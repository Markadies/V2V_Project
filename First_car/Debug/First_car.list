
First_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800c9a8  0800c9a8  0001c9a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce54  0800ce54  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce54  0800ce54  0001ce54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce5c  0800ce5c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce5c  0800ce5c  0001ce5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce60  0800ce60  0001ce60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ce64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013b0c  200001dc  0800d040  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013ce8  0800d040  00023ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f6cb  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004983  00000000  00000000  0003f91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c60  00000000  00000000  000442a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000160f  00000000  00000000  00045f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006860  00000000  00000000  0004750f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023edd  00000000  00000000  0004dd6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e595d  00000000  00000000  00071c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008698  00000000  00000000  001575ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0015fc44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c990 	.word	0x0800c990

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800c990 	.word	0x0800c990

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200135cc 	.word	0x200135cc
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <strlen>:
 8000350:	4603      	mov	r3, r0
 8000352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000356:	2a00      	cmp	r2, #0
 8000358:	d1fb      	bne.n	8000352 <strlen+0x2>
 800035a:	1a18      	subs	r0, r3, r0
 800035c:	3801      	subs	r0, #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	; 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2iz>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c40:	d215      	bcs.n	8000c6e <__aeabi_d2iz+0x36>
 8000c42:	d511      	bpl.n	8000c68 <__aeabi_d2iz+0x30>
 8000c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d912      	bls.n	8000c74 <__aeabi_d2iz+0x3c>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	4770      	bx	lr
 8000c68:	f04f 0000 	mov.w	r0, #0
 8000c6c:	4770      	bx	lr
 8000c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c72:	d105      	bne.n	8000c80 <__aeabi_d2iz+0x48>
 8000c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	bf08      	it	eq
 8000c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2uiz>:
 8000c88:	004a      	lsls	r2, r1, #1
 8000c8a:	d211      	bcs.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c90:	d211      	bcs.n	8000cb6 <__aeabi_d2uiz+0x2e>
 8000c92:	d50d      	bpl.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c9c:	d40e      	bmi.n	8000cbc <__aeabi_d2uiz+0x34>
 8000c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000caa:	fa23 f002 	lsr.w	r0, r3, r2
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cba:	d102      	bne.n	8000cc2 <__aeabi_d2uiz+0x3a>
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	4770      	bx	lr
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2f>:
 8000cc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ccc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cd0:	bf24      	itt	cs
 8000cd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cda:	d90d      	bls.n	8000cf8 <__aeabi_d2f+0x30>
 8000cdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ce0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ce4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ce8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cfc:	d121      	bne.n	8000d42 <__aeabi_d2f+0x7a>
 8000cfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d02:	bfbc      	itt	lt
 8000d04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d08:	4770      	bxlt	lr
 8000d0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d12:	f1c2 0218 	rsb	r2, r2, #24
 8000d16:	f1c2 0c20 	rsb	ip, r2, #32
 8000d1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d22:	bf18      	it	ne
 8000d24:	f040 0001 	orrne.w	r0, r0, #1
 8000d28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d34:	ea40 000c 	orr.w	r0, r0, ip
 8000d38:	fa23 f302 	lsr.w	r3, r3, r2
 8000d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d40:	e7cc      	b.n	8000cdc <__aeabi_d2f+0x14>
 8000d42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d46:	d107      	bne.n	8000d58 <__aeabi_d2f+0x90>
 8000d48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d56:	4770      	bxne	lr
 8000d58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b970 	b.w	8001060 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f806 	bl	8000d98 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__udivmoddi4>:
 8000d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d9c:	9e08      	ldr	r6, [sp, #32]
 8000d9e:	460d      	mov	r5, r1
 8000da0:	4604      	mov	r4, r0
 8000da2:	460f      	mov	r7, r1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d14a      	bne.n	8000e3e <__udivmoddi4+0xa6>
 8000da8:	428a      	cmp	r2, r1
 8000daa:	4694      	mov	ip, r2
 8000dac:	d965      	bls.n	8000e7a <__udivmoddi4+0xe2>
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	b143      	cbz	r3, 8000dc6 <__udivmoddi4+0x2e>
 8000db4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db8:	f1c3 0220 	rsb	r2, r3, #32
 8000dbc:	409f      	lsls	r7, r3
 8000dbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	409c      	lsls	r4, r3
 8000dc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dca:	fa1f f58c 	uxth.w	r5, ip
 8000dce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dd2:	0c22      	lsrs	r2, r4, #16
 8000dd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ddc:	fb01 f005 	mul.w	r0, r1, r5
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x62>
 8000de4:	eb1c 0202 	adds.w	r2, ip, r2
 8000de8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dec:	f080 811c 	bcs.w	8001028 <__udivmoddi4+0x290>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f240 8119 	bls.w	8001028 <__udivmoddi4+0x290>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a12      	subs	r2, r2, r0
 8000dfc:	b2a4      	uxth	r4, r4
 8000dfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0a:	fb00 f505 	mul.w	r5, r0, r5
 8000e0e:	42a5      	cmp	r5, r4
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x90>
 8000e12:	eb1c 0404 	adds.w	r4, ip, r4
 8000e16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x294>
 8000e1e:	42a5      	cmp	r5, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x294>
 8000e24:	4464      	add	r4, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11e      	cbz	r6, 8000e3a <__udivmoddi4+0xa2>
 8000e32:	40dc      	lsrs	r4, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0xbc>
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	f000 80ed 	beq.w	8001022 <__udivmoddi4+0x28a>
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e54:	fab3 f183 	clz	r1, r3
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d149      	bne.n	8000ef0 <__udivmoddi4+0x158>
 8000e5c:	42ab      	cmp	r3, r5
 8000e5e:	d302      	bcc.n	8000e66 <__udivmoddi4+0xce>
 8000e60:	4282      	cmp	r2, r0
 8000e62:	f200 80f8 	bhi.w	8001056 <__udivmoddi4+0x2be>
 8000e66:	1a84      	subs	r4, r0, r2
 8000e68:	eb65 0203 	sbc.w	r2, r5, r3
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4617      	mov	r7, r2
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d0e2      	beq.n	8000e3a <__udivmoddi4+0xa2>
 8000e74:	e9c6 4700 	strd	r4, r7, [r6]
 8000e78:	e7df      	b.n	8000e3a <__udivmoddi4+0xa2>
 8000e7a:	b902      	cbnz	r2, 8000e7e <__udivmoddi4+0xe6>
 8000e7c:	deff      	udf	#255	; 0xff
 8000e7e:	fab2 f382 	clz	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8090 	bne.w	8000fa8 <__udivmoddi4+0x210>
 8000e88:	1a8a      	subs	r2, r1, r2
 8000e8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	2101      	movs	r1, #1
 8000e94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e98:	fb07 2015 	mls	r0, r7, r5, r2
 8000e9c:	0c22      	lsrs	r2, r4, #16
 8000e9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ea2:	fb0e f005 	mul.w	r0, lr, r5
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x124>
 8000eaa:	eb1c 0202 	adds.w	r2, ip, r2
 8000eae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x122>
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	f200 80cb 	bhi.w	8001050 <__udivmoddi4+0x2b8>
 8000eba:	4645      	mov	r5, r8
 8000ebc:	1a12      	subs	r2, r2, r0
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ec4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ecc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed0:	45a6      	cmp	lr, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x14e>
 8000ed4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000edc:	d202      	bcs.n	8000ee4 <__udivmoddi4+0x14c>
 8000ede:	45a6      	cmp	lr, r4
 8000ee0:	f200 80bb 	bhi.w	800105a <__udivmoddi4+0x2c2>
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	eba4 040e 	sub.w	r4, r4, lr
 8000eea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eee:	e79f      	b.n	8000e30 <__udivmoddi4+0x98>
 8000ef0:	f1c1 0720 	rsb	r7, r1, #32
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000efe:	fa05 f401 	lsl.w	r4, r5, r1
 8000f02:	fa20 f307 	lsr.w	r3, r0, r7
 8000f06:	40fd      	lsrs	r5, r7
 8000f08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	fb09 5518 	mls	r5, r9, r8, r5
 8000f1a:	0c1c      	lsrs	r4, r3, #16
 8000f1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f20:	fb08 f50e 	mul.w	r5, r8, lr
 8000f24:	42a5      	cmp	r5, r4
 8000f26:	fa02 f201 	lsl.w	r2, r2, r1
 8000f2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f2e:	d90b      	bls.n	8000f48 <__udivmoddi4+0x1b0>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f38:	f080 8088 	bcs.w	800104c <__udivmoddi4+0x2b4>
 8000f3c:	42a5      	cmp	r5, r4
 8000f3e:	f240 8085 	bls.w	800104c <__udivmoddi4+0x2b4>
 8000f42:	f1a8 0802 	sub.w	r8, r8, #2
 8000f46:	4464      	add	r4, ip
 8000f48:	1b64      	subs	r4, r4, r5
 8000f4a:	b29d      	uxth	r5, r3
 8000f4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f50:	fb09 4413 	mls	r4, r9, r3, r4
 8000f54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x1da>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f68:	d26c      	bcs.n	8001044 <__udivmoddi4+0x2ac>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	d96a      	bls.n	8001044 <__udivmoddi4+0x2ac>
 8000f6e:	3b02      	subs	r3, #2
 8000f70:	4464      	add	r4, ip
 8000f72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f76:	fba3 9502 	umull	r9, r5, r3, r2
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	42ac      	cmp	r4, r5
 8000f80:	46c8      	mov	r8, r9
 8000f82:	46ae      	mov	lr, r5
 8000f84:	d356      	bcc.n	8001034 <__udivmoddi4+0x29c>
 8000f86:	d053      	beq.n	8001030 <__udivmoddi4+0x298>
 8000f88:	b156      	cbz	r6, 8000fa0 <__udivmoddi4+0x208>
 8000f8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f92:	fa04 f707 	lsl.w	r7, r4, r7
 8000f96:	40ca      	lsrs	r2, r1
 8000f98:	40cc      	lsrs	r4, r1
 8000f9a:	4317      	orrs	r7, r2
 8000f9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa8:	f1c3 0120 	rsb	r1, r3, #32
 8000fac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000fb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000fb8:	409d      	lsls	r5, r3
 8000fba:	432a      	orrs	r2, r5
 8000fbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc0:	fa1f fe8c 	uxth.w	lr, ip
 8000fc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fcc:	0c11      	lsrs	r1, r2, #16
 8000fce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fd2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fd6:	428d      	cmp	r5, r1
 8000fd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x258>
 8000fde:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fe6:	d22f      	bcs.n	8001048 <__udivmoddi4+0x2b0>
 8000fe8:	428d      	cmp	r5, r1
 8000fea:	d92d      	bls.n	8001048 <__udivmoddi4+0x2b0>
 8000fec:	3802      	subs	r0, #2
 8000fee:	4461      	add	r1, ip
 8000ff0:	1b49      	subs	r1, r1, r5
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ff8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	fb05 f10e 	mul.w	r1, r5, lr
 8001004:	4291      	cmp	r1, r2
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x282>
 8001008:	eb1c 0202 	adds.w	r2, ip, r2
 800100c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001010:	d216      	bcs.n	8001040 <__udivmoddi4+0x2a8>
 8001012:	4291      	cmp	r1, r2
 8001014:	d914      	bls.n	8001040 <__udivmoddi4+0x2a8>
 8001016:	3d02      	subs	r5, #2
 8001018:	4462      	add	r2, ip
 800101a:	1a52      	subs	r2, r2, r1
 800101c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001020:	e738      	b.n	8000e94 <__udivmoddi4+0xfc>
 8001022:	4631      	mov	r1, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e708      	b.n	8000e3a <__udivmoddi4+0xa2>
 8001028:	4639      	mov	r1, r7
 800102a:	e6e6      	b.n	8000dfa <__udivmoddi4+0x62>
 800102c:	4610      	mov	r0, r2
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x90>
 8001030:	4548      	cmp	r0, r9
 8001032:	d2a9      	bcs.n	8000f88 <__udivmoddi4+0x1f0>
 8001034:	ebb9 0802 	subs.w	r8, r9, r2
 8001038:	eb65 0e0c 	sbc.w	lr, r5, ip
 800103c:	3b01      	subs	r3, #1
 800103e:	e7a3      	b.n	8000f88 <__udivmoddi4+0x1f0>
 8001040:	4645      	mov	r5, r8
 8001042:	e7ea      	b.n	800101a <__udivmoddi4+0x282>
 8001044:	462b      	mov	r3, r5
 8001046:	e794      	b.n	8000f72 <__udivmoddi4+0x1da>
 8001048:	4640      	mov	r0, r8
 800104a:	e7d1      	b.n	8000ff0 <__udivmoddi4+0x258>
 800104c:	46d0      	mov	r8, sl
 800104e:	e77b      	b.n	8000f48 <__udivmoddi4+0x1b0>
 8001050:	3d02      	subs	r5, #2
 8001052:	4462      	add	r2, ip
 8001054:	e732      	b.n	8000ebc <__udivmoddi4+0x124>
 8001056:	4608      	mov	r0, r1
 8001058:	e70a      	b.n	8000e70 <__udivmoddi4+0xd8>
 800105a:	4464      	add	r4, ip
 800105c:	3802      	subs	r0, #2
 800105e:	e742      	b.n	8000ee6 <__udivmoddi4+0x14e>

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <Buzzer_voidHighSound>:
#endif


}
void Buzzer_voidHighSound(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0


#endif
#elif Buzzer_Timer_Connected == TIMER12
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1
	TIM12->CCR1=90;
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <Buzzer_voidHighSound+0x18>)
 800106a:	225a      	movs	r2, #90	; 0x5a
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 800106e:	2100      	movs	r1, #0
 8001070:	4803      	ldr	r0, [pc, #12]	; (8001080 <Buzzer_voidHighSound+0x1c>)
 8001072:	f003 fa95 	bl	80045a0 <HAL_TIM_PWM_Start>

#endif



}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40001800 	.word	0x40001800
 8001080:	200005dc 	.word	0x200005dc

08001084 <HAL_TIM_IC_CaptureCallback>:


/***************************************Interrupts_Call_Backs********************************************************/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001094:	d10c      	bne.n	80010b0 <HAL_TIM_IC_CaptureCallback+0x2c>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7f1b      	ldrb	r3, [r3, #28]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d003      	beq.n	80010a6 <HAL_TIM_IC_CaptureCallback+0x22>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7f1b      	ldrb	r3, [r3, #28]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d104      	bne.n	80010b0 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		edges_counter++;
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_TIM_IC_CaptureCallback+0x38>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_TIM_IC_CaptureCallback+0x38>)
 80010ae:	6013      	str	r3, [r2, #0]
	}
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	200001f8 	.word	0x200001f8

080010c0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	/*BT interrupt*/
	if(huart->Instance==USART3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <HAL_UART_RxCpltCallback+0x24>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d104      	bne.n	80010dc <HAL_UART_RxCpltCallback+0x1c>
	{
		HAL_UART_Receive_IT(&huart3, &received_char, 1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	4904      	ldr	r1, [pc, #16]	; (80010e8 <HAL_UART_RxCpltCallback+0x28>)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <HAL_UART_RxCpltCallback+0x2c>)
 80010d8:	f004 f9e9 	bl	80054ae <HAL_UART_Receive_IT>

		/*Give the semaphore*/

	}
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40004800 	.word	0x40004800
 80010e8:	20000734 	.word	0x20000734
 80010ec:	200006ac 	.word	0x200006ac

080010f0 <vApplicationIdleHook>:

/*********************************************Application_Hook*************************************************************/
void vApplicationIdleHook(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	/*The processer will go to sleep in the IDLE Task*/
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80010f4:	2101      	movs	r1, #1
 80010f6:	2000      	movs	r0, #0
 80010f8:	f002 fb44 	bl	8003784 <HAL_PWR_EnterSLEEPMode>

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <LCD_HighLightIntensity_Warning>:




void LCD_HighLightIntensity_Warning()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0

	/*Printing the warning sign*/
	LCD_Print_WarningSign();
 8001104:	f000 f814 	bl	8001130 <LCD_Print_WarningSign>

	/*Printing the warning message to the driver*/
	LCD_voidSetPositionXY(1,0);
 8001108:	2100      	movs	r1, #0
 800110a:	2001      	movs	r0, #1
 800110c:	f000 f96e 	bl	80013ec <LCD_voidSetPositionXY>
	LCD_voidSendString("Dim your");
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <LCD_HighLightIntensity_Warning+0x28>)
 8001112:	f000 f94f 	bl	80013b4 <LCD_voidSendString>

	LCD_voidSetPositionXY(2,0);
 8001116:	2100      	movs	r1, #0
 8001118:	2002      	movs	r0, #2
 800111a:	f000 f967 	bl	80013ec <LCD_voidSetPositionXY>
	LCD_voidSendString("Light ASAP!");
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <LCD_HighLightIntensity_Warning+0x2c>)
 8001120:	f000 f948 	bl	80013b4 <LCD_voidSendString>

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800c9a8 	.word	0x0800c9a8
 800112c:	0800c9b4 	.word	0x0800c9b4

08001130 <LCD_Print_WarningSign>:
	LCD_voidSendString("Slow Down");


}
static void LCD_Print_WarningSign(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b096      	sub	sp, #88	; 0x58
 8001134:	af00      	add	r7, sp, #0
	/*Saving the elemetents of each block of the LCD in multiple arrays to be sent to the special charachter function*/

	uint8_t LCD_R1_C16_Array[8] =
 8001136:	4a4e      	ldr	r2, [pc, #312]	; (8001270 <LCD_Print_WarningSign+0x140>)
 8001138:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800113c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001140:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00001110,
			0b00001110,
			0b00001110
	};
	uint8_t LCD_R1_C15_Array[8] =
 8001144:	4a4b      	ldr	r2, [pc, #300]	; (8001274 <LCD_Print_WarningSign+0x144>)
 8001146:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800114a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800114e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00010000,
			0b00000000
	};

	uint8_t LCD_R1_C14_Array[8] =
 8001152:	4a49      	ldr	r2, [pc, #292]	; (8001278 <LCD_Print_WarningSign+0x148>)
 8001154:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001158:	e892 0003 	ldmia.w	r2, {r0, r1}
 800115c:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00000001
	};
	uint8_t LCD_R1_C18_Array[8] =
 8001160:	4a46      	ldr	r2, [pc, #280]	; (800127c <LCD_Print_WarningSign+0x14c>)
 8001162:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001166:	e892 0003 	ldmia.w	r2, {r0, r1}
 800116a:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00010000
	};
	uint8_t LCD_R2_C14_Array[8] =
 800116e:	4a44      	ldr	r2, [pc, #272]	; (8001280 <LCD_Print_WarningSign+0x150>)
 8001170:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001178:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	uint8_t LCD_R2_C18_Array[8] =
 800117c:	4a41      	ldr	r2, [pc, #260]	; (8001284 <LCD_Print_WarningSign+0x154>)
 800117e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001186:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C13_Array[8] =
 800118a:	4a3f      	ldr	r2, [pc, #252]	; (8001288 <LCD_Print_WarningSign+0x158>)
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001194:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000010,
			0b00000100,
			0b00001000,
			0b00011111
	};
	uint8_t LCD_R2_C19_Array[8] =
 8001198:	4a3c      	ldr	r2, [pc, #240]	; (800128c <LCD_Print_WarningSign+0x15c>)
 800119a:	f107 0318 	add.w	r3, r7, #24
 800119e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011a2:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00000100,
			0b00000010,
			0b00011111
	};
	uint8_t LCD_R2_C15_Array[8] =
 80011a6:	4a3a      	ldr	r2, [pc, #232]	; (8001290 <LCD_Print_WarningSign+0x160>)
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b0:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C17_Array[8] =
 80011b4:	4a36      	ldr	r2, [pc, #216]	; (8001290 <LCD_Print_WarningSign+0x160>)
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011be:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C16_Array[8] =
 80011c2:	4a34      	ldr	r2, [pc, #208]	; (8001294 <LCD_Print_WarningSign+0x164>)
 80011c4:	463b      	mov	r3, r7
 80011c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ca:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	LCD_voidDrawSpecialCharachter(&LCD_R1_C14_Array, 0, 1, 14);
 80011ce:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80011d2:	230e      	movs	r3, #14
 80011d4:	2201      	movs	r2, #1
 80011d6:	2100      	movs	r1, #0
 80011d8:	f000 f94e 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C15_Array, 0, 1, 15);
 80011dc:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80011e0:	230f      	movs	r3, #15
 80011e2:	2201      	movs	r2, #1
 80011e4:	2100      	movs	r1, #0
 80011e6:	f000 f947 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C16_Array, 0, 1, 16);
 80011ea:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80011ee:	2310      	movs	r3, #16
 80011f0:	2201      	movs	r2, #1
 80011f2:	2100      	movs	r1, #0
 80011f4:	f000 f940 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C18_Array, 0, 1, 18);
 80011f8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80011fc:	2312      	movs	r3, #18
 80011fe:	2201      	movs	r2, #1
 8001200:	2100      	movs	r1, #0
 8001202:	f000 f939 	bl	8001478 <LCD_voidDrawSpecialCharachter>

	LCD_voidDrawSpecialCharachter(&LCD_R2_C13_Array, 0, 2, 13);
 8001206:	f107 0020 	add.w	r0, r7, #32
 800120a:	230d      	movs	r3, #13
 800120c:	2202      	movs	r2, #2
 800120e:	2100      	movs	r1, #0
 8001210:	f000 f932 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C14_Array, 0, 2, 14);
 8001214:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001218:	230e      	movs	r3, #14
 800121a:	2202      	movs	r2, #2
 800121c:	2100      	movs	r1, #0
 800121e:	f000 f92b 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C15_Array, 0, 2, 15);
 8001222:	f107 0010 	add.w	r0, r7, #16
 8001226:	230f      	movs	r3, #15
 8001228:	2202      	movs	r2, #2
 800122a:	2100      	movs	r1, #0
 800122c:	f000 f924 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C16_Array, 0, 2, 16);
 8001230:	4638      	mov	r0, r7
 8001232:	2310      	movs	r3, #16
 8001234:	2202      	movs	r2, #2
 8001236:	2100      	movs	r1, #0
 8001238:	f000 f91e 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C17_Array, 0, 2, 17);
 800123c:	f107 0008 	add.w	r0, r7, #8
 8001240:	2311      	movs	r3, #17
 8001242:	2202      	movs	r2, #2
 8001244:	2100      	movs	r1, #0
 8001246:	f000 f917 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C18_Array, 0, 2, 18);
 800124a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800124e:	2312      	movs	r3, #18
 8001250:	2202      	movs	r2, #2
 8001252:	2100      	movs	r1, #0
 8001254:	f000 f910 	bl	8001478 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C19_Array, 0, 2, 19);
 8001258:	f107 0018 	add.w	r0, r7, #24
 800125c:	2313      	movs	r3, #19
 800125e:	2202      	movs	r2, #2
 8001260:	2100      	movs	r1, #0
 8001262:	f000 f909 	bl	8001478 <LCD_voidDrawSpecialCharachter>



}
 8001266:	bf00      	nop
 8001268:	3758      	adds	r7, #88	; 0x58
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0800c9e0 	.word	0x0800c9e0
 8001274:	0800c9e8 	.word	0x0800c9e8
 8001278:	0800c9f0 	.word	0x0800c9f0
 800127c:	0800c9f8 	.word	0x0800c9f8
 8001280:	0800ca00 	.word	0x0800ca00
 8001284:	0800ca08 	.word	0x0800ca08
 8001288:	0800ca10 	.word	0x0800ca10
 800128c:	0800ca18 	.word	0x0800ca18
 8001290:	0800ca20 	.word	0x0800ca20
 8001294:	0800ca28 	.word	0x0800ca28

08001298 <LCD_voidInit>:
#define LCD_SLAVE_ADDRESS 0b01001110

extern I2C_HandleTypeDef hi2c1;

void LCD_voidInit(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	/*Setting 4 bits interface(Twice as the datasheet specefies)*/
	LCD_voidSendCommand(0b00110011);
 800129c:	2033      	movs	r0, #51	; 0x33
 800129e:	f000 f829 	bl	80012f4 <LCD_voidSendCommand>
	LCD_voidSendCommand(0b00110010);
 80012a2:	2032      	movs	r0, #50	; 0x32
 80012a4:	f000 f826 	bl	80012f4 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012a8:	2032      	movs	r0, #50	; 0x32
 80012aa:	f001 fad9 	bl	8002860 <HAL_Delay>
	/*Setting the LCD Function*/
	LCD_voidSendCommand(0b00101000);
 80012ae:	2028      	movs	r0, #40	; 0x28
 80012b0:	f000 f820 	bl	80012f4 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012b4:	2032      	movs	r0, #50	; 0x32
 80012b6:	f001 fad3 	bl	8002860 <HAL_Delay>
	/*Clearing the display*/
	LCD_voidSendCommand(0b00000001);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f000 f81a 	bl	80012f4 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012c0:	2032      	movs	r0, #50	; 0x32
 80012c2:	f001 facd 	bl	8002860 <HAL_Delay>
	/*Set the entry mode*/
	LCD_voidSendCommand(0b00000110);
 80012c6:	2006      	movs	r0, #6
 80012c8:	f000 f814 	bl	80012f4 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012cc:	2032      	movs	r0, #50	; 0x32
 80012ce:	f001 fac7 	bl	8002860 <HAL_Delay>
	/*Set the display to on*/
	LCD_voidSendCommand(0b00001100);
 80012d2:	200c      	movs	r0, #12
 80012d4:	f000 f80e 	bl	80012f4 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012d8:	2032      	movs	r0, #50	; 0x32
 80012da:	f001 fac1 	bl	8002860 <HAL_Delay>
	/*Set the cursor to home */
	LCD_voidSendCommand(0b00000010);
 80012de:	2002      	movs	r0, #2
 80012e0:	f000 f808 	bl	80012f4 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012e4:	2032      	movs	r0, #50	; 0x32
 80012e6:	f001 fabb 	bl	8002860 <HAL_Delay>
	/*and the Data address to 0*/
	LCD_voidSendCommand(0b10000000);
 80012ea:	2080      	movs	r0, #128	; 0x80
 80012ec:	f000 f802 	bl	80012f4 <LCD_voidSendCommand>

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8_t Copy_uint8Command)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
 *
 *
 * 0b00000001 --> DataU --> 0b000000000-->0b00000001100
 *
 * */
	Local_uint8Local_uint8DataU=(Copy_uint8Command&0b11110000);
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f023 030f 	bic.w	r3, r3, #15
 8001304:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Command<<4)&0b11110000);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001100; //EN=1 RS=0
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	f043 030c 	orr.w	r3, r3, #12
 8001312:	b2db      	uxtb	r3, r3
 8001314:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001000; //EN=0 RS=0
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	b2db      	uxtb	r3, r3
 800131e:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001100; //EN=1 RS=0
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	f043 030c 	orr.w	r3, r3, #12
 8001326:	b2db      	uxtb	r3, r3
 8001328:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001000; //EN=0 RS=0
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	b2db      	uxtb	r3, r3
 8001332:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001334:	f107 0208 	add.w	r2, r7, #8
 8001338:	2364      	movs	r3, #100	; 0x64
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2304      	movs	r3, #4
 800133e:	214e      	movs	r1, #78	; 0x4e
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <LCD_voidSendCommand+0x5c>)
 8001342:	f001 ff17 	bl	8003174 <HAL_I2C_Master_Transmit>
}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000408 	.word	0x20000408

08001354 <LCD_voidSendCharachter>:

void LCD_voidSendCharachter(uint8_t Copy_uint8Charachter)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af02      	add	r7, sp, #8
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_uint8Local_uint8DataU,Local_uint8Local_uint8DataL;
	uint8_t Local_uint8Local_uint8DataT[4];
	Local_uint8Local_uint8DataU=(Copy_uint8Charachter&0b11110000);
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f023 030f 	bic.w	r3, r3, #15
 8001364:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Charachter<<4)&0b11110000);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001101; //EN=1 RS=0
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	f043 030d 	orr.w	r3, r3, #13
 8001372:	b2db      	uxtb	r3, r3
 8001374:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001001; //EN=0 RS=0
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	f043 0309 	orr.w	r3, r3, #9
 800137c:	b2db      	uxtb	r3, r3
 800137e:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001101; //EN=1 RS=0
 8001380:	7bbb      	ldrb	r3, [r7, #14]
 8001382:	f043 030d 	orr.w	r3, r3, #13
 8001386:	b2db      	uxtb	r3, r3
 8001388:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001001; //EN=0 RS=0
 800138a:	7bbb      	ldrb	r3, [r7, #14]
 800138c:	f043 0309 	orr.w	r3, r3, #9
 8001390:	b2db      	uxtb	r3, r3
 8001392:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001394:	f107 0208 	add.w	r2, r7, #8
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2304      	movs	r3, #4
 800139e:	214e      	movs	r1, #78	; 0x4e
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <LCD_voidSendCharachter+0x5c>)
 80013a2:	f001 fee7 	bl	8003174 <HAL_I2C_Master_Transmit>

}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000408 	.word	0x20000408

080013b4 <LCD_voidSendString>:

void LCD_voidSendString (uint8_t *Copy_pu8StringOfCharachters)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8Counter=0;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 80013c0:	e009      	b.n	80013d6 <LCD_voidSendString+0x22>
	{
		LCD_voidSendCharachter(Copy_pu8StringOfCharachters[Local_uint8Counter]);
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ffc2 	bl	8001354 <LCD_voidSendCharachter>
		Local_uint8Counter++;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	3301      	adds	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ef      	bne.n	80013c2 <LCD_voidSendString+0xe>
	}


}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <LCD_voidSetPositionXY>:
void LCD_voidSetPositionXY(uint8_t Copy_uint8Row,uint8_t Copy_uint8Column)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71bb      	strb	r3, [r7, #6]
	//1,add,add,add,add,add,add,add,0,0
	uint8_t Local_uint8PositionAddress = 0b10000000;
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	73fb      	strb	r3, [r7, #15]
	switch(Copy_uint8Row){
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b03      	cmp	r3, #3
 8001404:	d82d      	bhi.n	8001462 <LCD_voidSetPositionXY+0x76>
 8001406:	a201      	add	r2, pc, #4	; (adr r2, 800140c <LCD_voidSetPositionXY+0x20>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	0800141d 	.word	0x0800141d
 8001410:	08001427 	.word	0x08001427
 8001414:	0800143b 	.word	0x0800143b
 8001418:	0800144f 	.word	0x0800144f
	case 0:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 0);
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	4313      	orrs	r3, r2
 8001422:	73fb      	strb	r3, [r7, #15]
		break;
 8001424:	e01d      	b.n	8001462 <LCD_voidSetPositionXY+0x76>
	case 1:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 64);
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	3340      	adds	r3, #64	; 0x40
 800142a:	b2db      	uxtb	r3, r3
 800142c:	b25a      	sxtb	r2, r3
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001432:	4313      	orrs	r3, r2
 8001434:	b25b      	sxtb	r3, r3
 8001436:	73fb      	strb	r3, [r7, #15]
		break;
 8001438:	e013      	b.n	8001462 <LCD_voidSetPositionXY+0x76>
	case 2:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 20);
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	3314      	adds	r3, #20
 800143e:	b2db      	uxtb	r3, r3
 8001440:	b25a      	sxtb	r2, r3
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4313      	orrs	r3, r2
 8001448:	b25b      	sxtb	r3, r3
 800144a:	73fb      	strb	r3, [r7, #15]
		break;
 800144c:	e009      	b.n	8001462 <LCD_voidSetPositionXY+0x76>
	case 3:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 84);
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	3354      	adds	r3, #84	; 0x54
 8001452:	b2db      	uxtb	r3, r3
 8001454:	b25a      	sxtb	r2, r3
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4313      	orrs	r3, r2
 800145c:	b25b      	sxtb	r3, r3
 800145e:	73fb      	strb	r3, [r7, #15]
		break;
 8001460:	bf00      	nop
	}
		LCD_voidSendCommand(Local_uint8PositionAddress);
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff45 	bl	80012f4 <LCD_voidSendCommand>
		HAL_Delay(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f001 f9f8 	bl	8002860 <HAL_Delay>

}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <LCD_voidDrawSpecialCharachter>:
		}
	}
}

void LCD_voidDrawSpecialCharachter(uint8_t*Copy_puint8Pattern,uint8_t Copy_uint8LocationNum,uint8_t Copy_uint8RowNum,uint8_t Copy_uint8ColNum)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	4608      	mov	r0, r1
 8001482:	4611      	mov	r1, r2
 8001484:	461a      	mov	r2, r3
 8001486:	4603      	mov	r3, r0
 8001488:	70fb      	strb	r3, [r7, #3]
 800148a:	460b      	mov	r3, r1
 800148c:	70bb      	strb	r3, [r7, #2]
 800148e:	4613      	mov	r3, r2
 8001490:	707b      	strb	r3, [r7, #1]
	/*Accessing the CGRAM address*/
	uint8_t Local_uint8CGRAMAddress,Local_uint8Counter;
	Local_uint8CGRAMAddress=Copy_uint8LocationNum*8;
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	73bb      	strb	r3, [r7, #14]
	/*Accessing CGRAM of lcd by command 0b01xxxxxx*/
	LCD_voidSendCommand(Local_uint8CGRAMAddress+64);
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	3340      	adds	r3, #64	; 0x40
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff28 	bl	80012f4 <LCD_voidSendCommand>
	/*Write the pattern on CGRAM*/
	/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes
	 * in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e009      	b.n	80014be <LCD_voidDrawSpecialCharachter+0x46>
	{
		LCD_voidSendCharachter(Copy_puint8Pattern[Local_uint8Counter]);
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff4e 	bl	8001354 <LCD_voidSendCharachter>
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	3301      	adds	r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b07      	cmp	r3, #7
 80014c2:	d9f2      	bls.n	80014aa <LCD_voidDrawSpecialCharachter+0x32>
	}
	/*Keda e7na 7atena al pattern fe location mo3yn fel CGRAM, fa na2esna bas neb3at al pattern lel DDRAM 34an n7oto fel LCD */
	/*kona fo2 3malna command 34an ne access al CGRAM 34an ne access al DDRAM lazem command tany
	 * wel set position feha asln al command dah*/
	LCD_voidSetPositionXY(Copy_uint8RowNum,Copy_uint8ColNum);
 80014c4:	787a      	ldrb	r2, [r7, #1]
 80014c6:	78bb      	ldrb	r3, [r7, #2]
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff8e 	bl	80013ec <LCD_voidSetPositionXY>
	LCD_voidSendCharachter(Copy_uint8LocationNum);
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff3e 	bl	8001354 <LCD_voidSendCharachter>
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <TASK_LCDBuzzer>:
#include <stdint.h>

extern uint8_t received_char;

void TASK_LCDBuzzer (void *parameters)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	6078      	str	r0, [r7, #4]
    uint32_t Local_uint8NotificationValue;

	while(1)
	{
     xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint8NotificationValue, portMAX_DELAY);
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	9200      	str	r2, [sp, #0]
 80014f2:	f04f 32ff 	mov.w	r2, #4294967295
 80014f6:	2100      	movs	r1, #0
 80014f8:	2000      	movs	r0, #0
 80014fa:	f006 f9ed 	bl	80078d8 <xTaskGenericNotifyWait>

	 switch(Local_uint8NotificationValue)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d104      	bne.n	800150e <TASK_LCDBuzzer+0x2e>
	  {
	 case Notify_TASK_LCDBuzzer_Break:

         Buzzer_voidHighSound();
 8001504:	f7ff fdae 	bl	8001064 <Buzzer_voidHighSound>
         LCD_HighLightIntensity_Warning();
 8001508:	f7ff fdfa 	bl	8001100 <LCD_HighLightIntensity_Warning>
         break;
 800150c:	e000      	b.n	8001510 <TASK_LCDBuzzer+0x30>

	 default:
		 /*Do Nothing*/
		 break;
 800150e:	bf00      	nop
     xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint8NotificationValue, portMAX_DELAY);
 8001510:	e7ea      	b.n	80014e8 <TASK_LCDBuzzer+0x8>

08001512 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001512:	b480      	push	{r7}
 8001514:	b085      	sub	sp, #20
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	6039      	str	r1, [r7, #0]
 800151c:	71fb      	strb	r3, [r7, #7]
	 * increments by 1 for future storing, it doesnt coincide with the tail
	 * the % UART_BUFFER_SIZE checking if the index of the next storing procedure
	 * is bigger than the buffer size(ex this iteration stores in 512 byte and the next one
	 * will be in the 513 so i should reset the (i) to zero to repeat again)*/

  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001524:	3301      	adds	r3, #1
 8001526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800152a:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	429a      	cmp	r2, r3
 8001536:	d009      	beq.n	800154c <store_char+0x3a>
  {
	  /*Storing the charachter in the recent head pointed location*/
    buffer->buffer[buffer->head] = c;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	79f9      	ldrb	r1, [r7, #7]
 8001542:	54d1      	strb	r1, [r2, r3]

    /*After storing the character, incrementing the head for the next storing */
    buffer->head = i;
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f003 0320 	and.w	r3, r3, #32
 8001576:	2b00      	cmp	r3, #0
 8001578:	d013      	beq.n	80015a2 <Uart_isr+0x4a>
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	f003 0320 	and.w	r3, r3, #32
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00e      	beq.n	80015a2 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <Uart_isr+0xb4>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ffb9 	bl	8001512 <store_char>
        return;
 80015a0:	e031      	b.n	8001606 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d02c      	beq.n	8001606 <Uart_isr+0xae>
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d027      	beq.n	8001606 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <Uart_isr+0xb8>)
 80015b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <Uart_isr+0xb8>)
 80015be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d108      	bne.n	80015d8 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015d4:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80015d6:	e015      	b.n	8001604 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <Uart_isr+0xb8>)
 80015da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <Uart_isr+0xb8>)
 80015e0:	5cd3      	ldrb	r3, [r2, r3]
 80015e2:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <Uart_isr+0xb8>)
 80015e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015ea:	3301      	adds	r3, #1
 80015ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <Uart_isr+0xb8>)
 80015f2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	7bba      	ldrb	r2, [r7, #14]
 8001602:	605a      	str	r2, [r3, #4]
    	return;
 8001604:	bf00      	nop
    }
}
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000404 	.word	0x20000404
 8001610:	200001fc 	.word	0x200001fc

08001614 <Calculate_Car_Speed>:
#include "calculateSpeed.h"

extern uint32_t edges_counter;

float Calculate_Car_Speed()
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
	float Local_uint16Speed;
	Local_uint16Speed = (edges_counter/50)/(2000.0*60);
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <Calculate_Car_Speed+0x48>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <Calculate_Car_Speed+0x4c>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ffdc 	bl	80005e4 <__aeabi_ui2d>
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <Calculate_Car_Speed+0x50>)
 8001632:	f7ff f97b 	bl	800092c <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fb43 	bl	8000cc8 <__aeabi_d2f>
 8001642:	4603      	mov	r3, r0
 8001644:	607b      	str	r3, [r7, #4]
	edges_counter=0;
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <Calculate_Car_Speed+0x48>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	return Local_uint16Speed;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	ee07 3a90 	vmov	s15, r3
}
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200001f8 	.word	0x200001f8
 8001660:	51eb851f 	.word	0x51eb851f
 8001664:	40fd4c00 	.word	0x40fd4c00

08001668 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800166e:	f001 f8b5 	bl	80027dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001672:	f000 f857 	bl	8001724 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001676:	f000 fb4b 	bl	8001d10 <MX_GPIO_Init>
	MX_I2C1_Init();
 800167a:	f000 f8bf 	bl	80017fc <MX_I2C1_Init>
	MX_USART1_UART_Init();
 800167e:	f000 fac9 	bl	8001c14 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8001682:	f000 faf1 	bl	8001c68 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8001686:	f000 f943 	bl	8001910 <MX_TIM2_Init>
	MX_I2C2_Init();
 800168a:	f000 f8e5 	bl	8001858 <MX_I2C2_Init>
	MX_I2C3_Init();
 800168e:	f000 f911 	bl	80018b4 <MX_I2C3_Init>
	MX_TIM3_Init();
 8001692:	f000 f9a1 	bl	80019d8 <MX_TIM3_Init>
	MX_UART5_Init();
 8001696:	f000 fa93 	bl	8001bc0 <MX_UART5_Init>
	MX_TIM6_Init();
 800169a:	f000 fa17 	bl	8001acc <MX_TIM6_Init>
	MX_TIM12_Init();
 800169e:	f000 fa4b 	bl	8001b38 <MX_TIM12_Init>
	MX_USART6_UART_Init();
 80016a2:	f000 fb0b 	bl	8001cbc <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3,&received_char , 1);
 80016a6:	2201      	movs	r2, #1
 80016a8:	4919      	ldr	r1, [pc, #100]	; (8001710 <main+0xa8>)
 80016aa:	481a      	ldr	r0, [pc, #104]	; (8001714 <main+0xac>)
 80016ac:	f003 feff 	bl	80054ae <HAL_UART_Receive_IT>
	LCD_voidInit();
 80016b0:	f7ff fdf2 	bl	8001298 <LCD_voidInit>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <main+0xb0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <main+0xb0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	60da      	str	r2, [r3, #12]
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80016c4:	2100      	movs	r1, #0
 80016c6:	4814      	ldr	r0, [pc, #80]	; (8001718 <main+0xb0>)
 80016c8:	f003 f832 	bl	8004730 <HAL_TIM_IC_Start_IT>
	//	LightSensor_voidInit();
	LCD_HighLightIntensity_Warning();
 80016cc:	f7ff fd18 	bl	8001100 <LCD_HighLightIntensity_Warning>
  /* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	SEGGER_SYSVIEW_Start();
 80016d0:	f007 fef4 	bl	80094bc <SEGGER_SYSVIEW_Start>

	Task1_Status=xTaskCreate(TASK_LCDBuzzer, "LED1", 200, NULL, 2, &Task1_Handle);
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	2302      	movs	r3, #2
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2300      	movs	r3, #0
 80016de:	22c8      	movs	r2, #200	; 0xc8
 80016e0:	490e      	ldr	r1, [pc, #56]	; (800171c <main+0xb4>)
 80016e2:	480f      	ldr	r0, [pc, #60]	; (8001720 <main+0xb8>)
 80016e4:	f005 f9ce 	bl	8006a84 <xTaskCreate>
 80016e8:	60f8      	str	r0, [r7, #12]

	configASSERT(Task1_Status==pdPASS);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d00a      	beq.n	8001706 <main+0x9e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80016f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016f4:	f383 8811 	msr	BASEPRI, r3
 80016f8:	f3bf 8f6f 	isb	sy
 80016fc:	f3bf 8f4f 	dsb	sy
 8001700:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001702:	bf00      	nop
 8001704:	e7fe      	b.n	8001704 <main+0x9c>

	vTaskStartScheduler();
 8001706:	f005 fb45 	bl	8006d94 <vTaskStartScheduler>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		Buzzer_voidHighSound();
 800170a:	f7ff fcab 	bl	8001064 <Buzzer_voidHighSound>
 800170e:	e7fc      	b.n	800170a <main+0xa2>
 8001710:	20000734 	.word	0x20000734
 8001714:	200006ac 	.word	0x200006ac
 8001718:	20000504 	.word	0x20000504
 800171c:	0800ca30 	.word	0x0800ca30
 8001720:	080014e1 	.word	0x080014e1

08001724 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b094      	sub	sp, #80	; 0x50
 8001728:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	2234      	movs	r2, #52	; 0x34
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f009 f997 	bl	800aa66 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <SystemClock_Config+0xd0>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	4a28      	ldr	r2, [pc, #160]	; (80017f4 <SystemClock_Config+0xd0>)
 8001752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001756:	6413      	str	r3, [r2, #64]	; 0x40
 8001758:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <SystemClock_Config+0xd0>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001764:	2300      	movs	r3, #0
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <SystemClock_Config+0xd4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001770:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <SystemClock_Config+0xd4>)
 8001772:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <SystemClock_Config+0xd4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001784:	2302      	movs	r3, #2
 8001786:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001788:	2301      	movs	r3, #1
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800178c:	2310      	movs	r3, #16
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001790:	2302      	movs	r3, #2
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001794:	2300      	movs	r3, #0
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001798:	2308      	movs	r3, #8
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 800179c:	2340      	movs	r3, #64	; 0x40
 800179e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017a0:	2302      	movs	r3, #2
 80017a2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 faf9 	bl	8003da8 <HAL_RCC_OscConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80017bc:	f000 fb32 	bl	8001e24 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c0:	230f      	movs	r3, #15
 80017c2:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c4:	2302      	movs	r3, #2
 80017c6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	2101      	movs	r1, #1
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 ffee 	bl	80037bc <HAL_RCC_ClockConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80017e6:	f000 fb1d 	bl	8001e24 <Error_Handler>
	}
}
 80017ea:	bf00      	nop
 80017ec:	3750      	adds	r7, #80	; 0x50
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40007000 	.word	0x40007000

080017fc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <MX_I2C1_Init+0x54>)
 8001802:	4a14      	ldr	r2, [pc, #80]	; (8001854 <MX_I2C1_Init+0x58>)
 8001804:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 1000;
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_I2C1_Init+0x54>)
 8001808:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800180c:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <MX_I2C1_Init+0x54>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_I2C1_Init+0x54>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <MX_I2C1_Init+0x54>)
 800181c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001820:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_I2C1_Init+0x54>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_I2C1_Init+0x54>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <MX_I2C1_Init+0x54>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_I2C1_Init+0x54>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_I2C1_Init+0x54>)
 800183c:	f001 fb56 	bl	8002eec <HAL_I2C_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_I2C1_Init+0x4e>
	{
		Error_Handler();
 8001846:	f000 faed 	bl	8001e24 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000408 	.word	0x20000408
 8001854:	40005400 	.word	0x40005400

08001858 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <MX_I2C2_Init+0x54>)
 800185e:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <MX_I2C2_Init+0x58>)
 8001860:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 1000;
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_I2C2_Init+0x54>)
 8001864:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001868:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <MX_I2C2_Init+0x54>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 120;
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_I2C2_Init+0x54>)
 8001872:	2278      	movs	r2, #120	; 0x78
 8001874:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <MX_I2C2_Init+0x54>)
 8001878:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <MX_I2C2_Init+0x54>)
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_I2C2_Init+0x54>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <MX_I2C2_Init+0x54>)
 800188c:	2200      	movs	r2, #0
 800188e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_I2C2_Init+0x54>)
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_I2C2_Init+0x54>)
 8001898:	f001 fb28 	bl	8002eec <HAL_I2C_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_I2C2_Init+0x4e>
	{
		Error_Handler();
 80018a2:	f000 fabf 	bl	8001e24 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000045c 	.word	0x2000045c
 80018b0:	40005800 	.word	0x40005800

080018b4 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <MX_I2C3_Init+0x50>)
 80018ba:	4a13      	ldr	r2, [pc, #76]	; (8001908 <MX_I2C3_Init+0x54>)
 80018bc:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_I2C3_Init+0x50>)
 80018c0:	4a12      	ldr	r2, [pc, #72]	; (800190c <MX_I2C3_Init+0x58>)
 80018c2:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_I2C3_Init+0x50>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_I2C3_Init+0x50>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_I2C3_Init+0x50>)
 80018d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d6:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <MX_I2C3_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_I2C3_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <MX_I2C3_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_I2C3_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <MX_I2C3_Init+0x50>)
 80018f2:	f001 fafb 	bl	8002eec <HAL_I2C_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 80018fc:	f000 fa92 	bl	8001e24 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200004b0 	.word	0x200004b0
 8001908:	40005c00 	.word	0x40005c00
 800190c:	000186a0 	.word	0x000186a0

08001910 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001916:	f107 0320 	add.w	r3, r7, #32
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001932:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <MX_TIM2_Init+0xc4>)
 8001934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001938:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15999;
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <MX_TIM2_Init+0xc4>)
 800193c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001940:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <MX_TIM2_Init+0xc4>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 12000;
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <MX_TIM2_Init+0xc4>)
 800194a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800194e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001950:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <MX_TIM2_Init+0xc4>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <MX_TIM2_Init+0xc4>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800195c:	481d      	ldr	r0, [pc, #116]	; (80019d4 <MX_TIM2_Init+0xc4>)
 800195e:	f002 fd81 	bl	8004464 <HAL_TIM_OC_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8001968:	f000 fa5c 	bl	8001e24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001974:	f107 0320 	add.w	r3, r7, #32
 8001978:	4619      	mov	r1, r3
 800197a:	4816      	ldr	r0, [pc, #88]	; (80019d4 <MX_TIM2_Init+0xc4>)
 800197c:	f003 fcba 	bl	80052f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8001986:	f000 fa4d 	bl	8001e24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <MX_TIM2_Init+0xc4>)
 80019a2:	f003 f8f5 	bl	8004b90 <HAL_TIM_OC_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM2_Init+0xa0>
	{
		Error_Handler();
 80019ac:	f000 fa3a 	bl	8001e24 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2204      	movs	r2, #4
 80019b4:	4619      	mov	r1, r3
 80019b6:	4807      	ldr	r0, [pc, #28]	; (80019d4 <MX_TIM2_Init+0xc4>)
 80019b8:	f003 f8ea 	bl	8004b90 <HAL_TIM_OC_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM2_Init+0xb6>
	{
		Error_Handler();
 80019c2:	f000 fa2f 	bl	8001e24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80019c6:	4803      	ldr	r0, [pc, #12]	; (80019d4 <MX_TIM2_Init+0xc4>)
 80019c8:	f000 fbac 	bl	8002124 <HAL_TIM_MspPostInit>

}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	; 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000504 	.word	0x20000504

080019d8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]
 80019f6:	615a      	str	r2, [r3, #20]
 80019f8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80019fa:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <MX_TIM3_Init+0xec>)
 80019fc:	4a32      	ldr	r2, [pc, #200]	; (8001ac8 <MX_TIM3_Init+0xf0>)
 80019fe:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 320-1;
 8001a00:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <MX_TIM3_Init+0xec>)
 8001a02:	f240 123f 	movw	r2, #319	; 0x13f
 8001a06:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a08:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <MX_TIM3_Init+0xec>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <MX_TIM3_Init+0xec>)
 8001a10:	2263      	movs	r2, #99	; 0x63
 8001a12:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <MX_TIM3_Init+0xec>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <MX_TIM3_Init+0xec>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a20:	4828      	ldr	r0, [pc, #160]	; (8001ac4 <MX_TIM3_Init+0xec>)
 8001a22:	f002 fd6e 	bl	8004502 <HAL_TIM_PWM_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 8001a2c:	f000 f9fa 	bl	8001e24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a38:	f107 0320 	add.w	r3, r7, #32
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4821      	ldr	r0, [pc, #132]	; (8001ac4 <MX_TIM3_Init+0xec>)
 8001a40:	f003 fc58 	bl	80052f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 8001a4a:	f000 f9eb 	bl	8001e24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4e:	2360      	movs	r3, #96	; 0x60
 8001a50:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	2200      	movs	r2, #0
 8001a62:	4619      	mov	r1, r3
 8001a64:	4817      	ldr	r0, [pc, #92]	; (8001ac4 <MX_TIM3_Init+0xec>)
 8001a66:	f003 f8ef 	bl	8004c48 <HAL_TIM_PWM_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 8001a70:	f000 f9d8 	bl	8001e24 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2204      	movs	r2, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4812      	ldr	r0, [pc, #72]	; (8001ac4 <MX_TIM3_Init+0xec>)
 8001a7c:	f003 f8e4 	bl	8004c48 <HAL_TIM_PWM_ConfigChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8001a86:	f000 f9cd 	bl	8001e24 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <MX_TIM3_Init+0xec>)
 8001a92:	f003 f8d9 	bl	8004c48 <HAL_TIM_PWM_ConfigChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0xc8>
	{
		Error_Handler();
 8001a9c:	f000 f9c2 	bl	8001e24 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <MX_TIM3_Init+0xec>)
 8001aa8:	f003 f8ce 	bl	8004c48 <HAL_TIM_PWM_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM3_Init+0xde>
	{
		Error_Handler();
 8001ab2:	f000 f9b7 	bl	8001e24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001ab6:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <MX_TIM3_Init+0xec>)
 8001ab8:	f000 fb34 	bl	8002124 <HAL_TIM_MspPostInit>

}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2000054c 	.word	0x2000054c
 8001ac8:	40000400 	.word	0x40000400

08001acc <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_TIM6_Init+0x64>)
 8001adc:	4a15      	ldr	r2, [pc, #84]	; (8001b34 <MX_TIM6_Init+0x68>)
 8001ade:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_TIM6_Init+0x64>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <MX_TIM6_Init+0x64>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535;
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <MX_TIM6_Init+0x64>)
 8001aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001af2:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_TIM6_Init+0x64>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001afa:	480d      	ldr	r0, [pc, #52]	; (8001b30 <MX_TIM6_Init+0x64>)
 8001afc:	f002 fbf2 	bl	80042e4 <HAL_TIM_Base_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 8001b06:	f000 f98d 	bl	8001e24 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b12:	463b      	mov	r3, r7
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <MX_TIM6_Init+0x64>)
 8001b18:	f003 fbec 	bl	80052f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 8001b22:	f000 f97f 	bl	8001e24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000594 	.word	0x20000594
 8001b34:	40001000 	.word	0x40001000

08001b38 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
 8001b4c:	615a      	str	r2, [r3, #20]
 8001b4e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <MX_TIM12_Init+0x80>)
 8001b52:	4a1a      	ldr	r2, [pc, #104]	; (8001bbc <MX_TIM12_Init+0x84>)
 8001b54:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 160-1;
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <MX_TIM12_Init+0x80>)
 8001b58:	229f      	movs	r2, #159	; 0x9f
 8001b5a:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <MX_TIM12_Init+0x80>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 100-1;
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_TIM12_Init+0x80>)
 8001b64:	2263      	movs	r2, #99	; 0x63
 8001b66:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <MX_TIM12_Init+0x80>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_TIM12_Init+0x80>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001b74:	4810      	ldr	r0, [pc, #64]	; (8001bb8 <MX_TIM12_Init+0x80>)
 8001b76:	f002 fcc4 	bl	8004502 <HAL_TIM_PWM_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM12_Init+0x4c>
	{
		Error_Handler();
 8001b80:	f000 f950 	bl	8001e24 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b84:	2360      	movs	r3, #96	; 0x60
 8001b86:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2200      	movs	r2, #0
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <MX_TIM12_Init+0x80>)
 8001b9c:	f003 f854 	bl	8004c48 <HAL_TIM_PWM_ConfigChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM12_Init+0x72>
	{
		Error_Handler();
 8001ba6:	f000 f93d 	bl	8001e24 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8001baa:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <MX_TIM12_Init+0x80>)
 8001bac:	f000 faba 	bl	8002124 <HAL_TIM_MspPostInit>

}
 8001bb0:	bf00      	nop
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	200005dc 	.word	0x200005dc
 8001bbc:	40001800 	.word	0x40001800

08001bc0 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_UART5_Init+0x4c>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <MX_UART5_Init+0x50>)
 8001bc8:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <MX_UART5_Init+0x4c>)
 8001bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd0:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_UART5_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_UART5_Init+0x4c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <MX_UART5_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_UART5_Init+0x4c>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <MX_UART5_Init+0x4c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_UART5_Init+0x4c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_UART5_Init+0x4c>)
 8001bf8:	f003 fc0c 	bl	8005414 <HAL_UART_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_UART5_Init+0x46>
	{
		Error_Handler();
 8001c02:	f000 f90f 	bl	8001e24 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000624 	.word	0x20000624
 8001c10:	40005000 	.word	0x40005000

08001c14 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <MX_USART1_UART_Init+0x50>)
 8001c1c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c24:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_USART1_UART_Init+0x4c>)
 8001c4c:	f003 fbe2 	bl	8005414 <HAL_UART_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001c56:	f000 f8e5 	bl	8001e24 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000668 	.word	0x20000668
 8001c64:	40011000 	.word	0x40011000

08001c68 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_USART3_UART_Init+0x4c>)
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <MX_USART3_UART_Init+0x50>)
 8001c70:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <MX_USART3_UART_Init+0x4c>)
 8001c74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c78:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_USART3_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_USART3_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <MX_USART3_UART_Init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_USART3_UART_Init+0x4c>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <MX_USART3_UART_Init+0x4c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_USART3_UART_Init+0x4c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_USART3_UART_Init+0x4c>)
 8001ca0:	f003 fbb8 	bl	8005414 <HAL_UART_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001caa:	f000 f8bb 	bl	8001e24 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200006ac 	.word	0x200006ac
 8001cb8:	40004800 	.word	0x40004800

08001cbc <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <MX_USART6_UART_Init+0x4c>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <MX_USART6_UART_Init+0x50>)
 8001cc4:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <MX_USART6_UART_Init+0x4c>)
 8001cc8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ccc:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <MX_USART6_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <MX_USART6_UART_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <MX_USART6_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_USART6_UART_Init+0x4c>)
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <MX_USART6_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <MX_USART6_UART_Init+0x4c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_USART6_UART_Init+0x4c>)
 8001cf4:	f003 fb8e 	bl	8005414 <HAL_UART_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 8001cfe:	f000 f891 	bl	8001e24 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200006f0 	.word	0x200006f0
 8001d0c:	40011400 	.word	0x40011400

08001d10 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <MX_GPIO_Init+0xe4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a31      	ldr	r2, [pc, #196]	; (8001df4 <MX_GPIO_Init+0xe4>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <MX_GPIO_Init+0xe4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <MX_GPIO_Init+0xe4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a2a      	ldr	r2, [pc, #168]	; (8001df4 <MX_GPIO_Init+0xe4>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <MX_GPIO_Init+0xe4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <MX_GPIO_Init+0xe4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <MX_GPIO_Init+0xe4>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <MX_GPIO_Init+0xe4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <MX_GPIO_Init+0xe4>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a1c      	ldr	r2, [pc, #112]	; (8001df4 <MX_GPIO_Init+0xe4>)
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_GPIO_Init+0xe4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001d96:	2200      	movs	r2, #0
 8001d98:	f242 311c 	movw	r1, #8988	; 0x231c
 8001d9c:	4816      	ldr	r0, [pc, #88]	; (8001df8 <MX_GPIO_Init+0xe8>)
 8001d9e:	f001 f88b 	bl	8002eb8 <HAL_GPIO_WritePin>
			|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001da8:	4814      	ldr	r0, [pc, #80]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001daa:	f001 f885 	bl	8002eb8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001dae:	f242 331c 	movw	r3, #8988	; 0x231c
 8001db2:	617b      	str	r3, [r7, #20]
			|GPIO_PIN_8|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	480c      	ldr	r0, [pc, #48]	; (8001df8 <MX_GPIO_Init+0xe8>)
 8001dc8:	f000 fee2 	bl	8002b90 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8001dcc:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001dd0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_GPIO_Init+0xec>)
 8001de6:	f000 fed3 	bl	8002b90 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001dea:	bf00      	nop
 8001dec:	3728      	adds	r7, #40	; 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020400 	.word	0x40020400

08001e00 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001e12:	f000 fd05 	bl	8002820 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40001400 	.word	0x40001400

08001e24 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e28:	b672      	cpsid	i
}
 8001e2a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e2c:	e7fe      	b.n	8001e2c <Error_Handler+0x8>
	...

08001e30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_MspInit+0x4c>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <HAL_MspInit+0x4c>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_MspInit+0x4c>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_MspInit+0x4c>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_MspInit+0x4c>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_MspInit+0x4c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800

08001e80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08e      	sub	sp, #56	; 0x38
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a5b      	ldr	r2, [pc, #364]	; (800200c <HAL_I2C_MspInit+0x18c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d12c      	bne.n	8001efc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
 8001ea6:	4b5a      	ldr	r3, [pc, #360]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a59      	ldr	r2, [pc, #356]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b57      	ldr	r3, [pc, #348]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	623b      	str	r3, [r7, #32]
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ebe:	23c0      	movs	r3, #192	; 0xc0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec2:	2312      	movs	r3, #18
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	484e      	ldr	r0, [pc, #312]	; (8002014 <HAL_I2C_MspInit+0x194>)
 8001eda:	f000 fe59 	bl	8002b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	4b4b      	ldr	r3, [pc, #300]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	4a4a      	ldr	r2, [pc, #296]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001ee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eec:	6413      	str	r3, [r2, #64]	; 0x40
 8001eee:	4b48      	ldr	r3, [pc, #288]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001efa:	e082      	b.n	8002002 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a45      	ldr	r2, [pc, #276]	; (8002018 <HAL_I2C_MspInit+0x198>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12d      	bne.n	8001f62 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a40      	ldr	r2, [pc, #256]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b3e      	ldr	r3, [pc, #248]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001f22:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f28:	2312      	movs	r3, #18
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f34:	2304      	movs	r3, #4
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4835      	ldr	r0, [pc, #212]	; (8002014 <HAL_I2C_MspInit+0x194>)
 8001f40:	f000 fe26 	bl	8002b90 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	4b31      	ldr	r3, [pc, #196]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	4a30      	ldr	r2, [pc, #192]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001f4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f52:	6413      	str	r3, [r2, #64]	; 0x40
 8001f54:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	697b      	ldr	r3, [r7, #20]
}
 8001f60:	e04f      	b.n	8002002 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a2d      	ldr	r2, [pc, #180]	; (800201c <HAL_I2C_MspInit+0x19c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d14a      	bne.n	8002002 <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	4a26      	ldr	r2, [pc, #152]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	4a1f      	ldr	r2, [pc, #124]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001f92:	f043 0302 	orr.w	r3, r3, #2
 8001f96:	6313      	str	r3, [r2, #48]	; 0x30
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001faa:	2312      	movs	r3, #18
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4817      	ldr	r0, [pc, #92]	; (8002020 <HAL_I2C_MspInit+0x1a0>)
 8001fc2:	f000 fde5 	bl	8002b90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fc6:	2310      	movs	r3, #16
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fca:	2312      	movs	r3, #18
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480c      	ldr	r0, [pc, #48]	; (8002014 <HAL_I2C_MspInit+0x194>)
 8001fe2:	f000 fdd5 	bl	8002b90 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a08      	ldr	r2, [pc, #32]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001ff0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_I2C_MspInit+0x190>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
}
 8002002:	bf00      	nop
 8002004:	3738      	adds	r7, #56	; 0x38
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40005400 	.word	0x40005400
 8002010:	40023800 	.word	0x40023800
 8002014:	40020400 	.word	0x40020400
 8002018:	40005800 	.word	0x40005800
 800201c:	40005c00 	.word	0x40005c00
 8002020:	40020000 	.word	0x40020000

08002024 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002034:	d115      	bne.n	8002062 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_TIM_OC_MspInit+0x48>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a0b      	ldr	r2, [pc, #44]	; (800206c <HAL_TIM_OC_MspInit+0x48>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_TIM_OC_MspInit+0x48>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	201c      	movs	r0, #28
 8002058:	f000 fcde 	bl	8002a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800205c:	201c      	movs	r0, #28
 800205e:	f000 fcf7 	bl	8002a50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800

08002070 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <HAL_TIM_PWM_MspInit+0x64>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <HAL_TIM_PWM_MspInit+0x68>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <HAL_TIM_PWM_MspInit+0x68>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_TIM_PWM_MspInit+0x68>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800209e:	e012      	b.n	80020c6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <HAL_TIM_PWM_MspInit+0x6c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10d      	bne.n	80020c6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_TIM_PWM_MspInit+0x68>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a09      	ldr	r2, [pc, #36]	; (80020d8 <HAL_TIM_PWM_MspInit+0x68>)
 80020b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <HAL_TIM_PWM_MspInit+0x68>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40000400 	.word	0x40000400
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40001800 	.word	0x40001800

080020e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0b      	ldr	r2, [pc, #44]	; (800211c <HAL_TIM_Base_MspInit+0x3c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d10d      	bne.n	800210e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_TIM_Base_MspInit+0x40>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <HAL_TIM_Base_MspInit+0x40>)
 80020fc:	f043 0310 	orr.w	r3, r3, #16
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b07      	ldr	r3, [pc, #28]	; (8002120 <HAL_TIM_Base_MspInit+0x40>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40001000 	.word	0x40001000
 8002120:	40023800 	.word	0x40023800

08002124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08c      	sub	sp, #48	; 0x30
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002144:	d11e      	bne.n	8002184 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	4b43      	ldr	r3, [pc, #268]	; (8002258 <HAL_TIM_MspPostInit+0x134>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a42      	ldr	r2, [pc, #264]	; (8002258 <HAL_TIM_MspPostInit+0x134>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b40      	ldr	r3, [pc, #256]	; (8002258 <HAL_TIM_MspPostInit+0x134>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002162:	2303      	movs	r3, #3
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002172:	2301      	movs	r3, #1
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	4619      	mov	r1, r3
 800217c:	4837      	ldr	r0, [pc, #220]	; (800225c <HAL_TIM_MspPostInit+0x138>)
 800217e:	f000 fd07 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002182:	e065      	b.n	8002250 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a35      	ldr	r2, [pc, #212]	; (8002260 <HAL_TIM_MspPostInit+0x13c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d13c      	bne.n	8002208 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	4b31      	ldr	r3, [pc, #196]	; (8002258 <HAL_TIM_MspPostInit+0x134>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a30      	ldr	r2, [pc, #192]	; (8002258 <HAL_TIM_MspPostInit+0x134>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <HAL_TIM_MspPostInit+0x134>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <HAL_TIM_MspPostInit+0x134>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a29      	ldr	r2, [pc, #164]	; (8002258 <HAL_TIM_MspPostInit+0x134>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_TIM_MspPostInit+0x134>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021c6:	23c0      	movs	r3, #192	; 0xc0
 80021c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021d6:	2302      	movs	r3, #2
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 031c 	add.w	r3, r7, #28
 80021de:	4619      	mov	r1, r3
 80021e0:	481e      	ldr	r0, [pc, #120]	; (800225c <HAL_TIM_MspPostInit+0x138>)
 80021e2:	f000 fcd5 	bl	8002b90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021e6:	2303      	movs	r3, #3
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021f6:	2302      	movs	r3, #2
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4619      	mov	r1, r3
 8002200:	4818      	ldr	r0, [pc, #96]	; (8002264 <HAL_TIM_MspPostInit+0x140>)
 8002202:	f000 fcc5 	bl	8002b90 <HAL_GPIO_Init>
}
 8002206:	e023      	b.n	8002250 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM12)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a16      	ldr	r2, [pc, #88]	; (8002268 <HAL_TIM_MspPostInit+0x144>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d11e      	bne.n	8002250 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_TIM_MspPostInit+0x134>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <HAL_TIM_MspPostInit+0x134>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_TIM_MspPostInit+0x134>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800222e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002240:	2309      	movs	r3, #9
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	4619      	mov	r1, r3
 800224a:	4806      	ldr	r0, [pc, #24]	; (8002264 <HAL_TIM_MspPostInit+0x140>)
 800224c:	f000 fca0 	bl	8002b90 <HAL_GPIO_Init>
}
 8002250:	bf00      	nop
 8002252:	3730      	adds	r7, #48	; 0x30
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	40020000 	.word	0x40020000
 8002260:	40000400 	.word	0x40000400
 8002264:	40020400 	.word	0x40020400
 8002268:	40001800 	.word	0x40001800

0800226c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b090      	sub	sp, #64	; 0x40
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a80      	ldr	r2, [pc, #512]	; (800248c <HAL_UART_MspInit+0x220>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d153      	bne.n	8002336 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
 8002292:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <HAL_UART_MspInit+0x224>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	4a7e      	ldr	r2, [pc, #504]	; (8002490 <HAL_UART_MspInit+0x224>)
 8002298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800229c:	6413      	str	r3, [r2, #64]	; 0x40
 800229e:	4b7c      	ldr	r3, [pc, #496]	; (8002490 <HAL_UART_MspInit+0x224>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	4b78      	ldr	r3, [pc, #480]	; (8002490 <HAL_UART_MspInit+0x224>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a77      	ldr	r2, [pc, #476]	; (8002490 <HAL_UART_MspInit+0x224>)
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b75      	ldr	r3, [pc, #468]	; (8002490 <HAL_UART_MspInit+0x224>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
 80022ca:	4b71      	ldr	r3, [pc, #452]	; (8002490 <HAL_UART_MspInit+0x224>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a70      	ldr	r2, [pc, #448]	; (8002490 <HAL_UART_MspInit+0x224>)
 80022d0:	f043 0308 	orr.w	r3, r3, #8
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b6e      	ldr	r3, [pc, #440]	; (8002490 <HAL_UART_MspInit+0x224>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	623b      	str	r3, [r7, #32]
 80022e0:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80022f4:	2308      	movs	r3, #8
 80022f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022fc:	4619      	mov	r1, r3
 80022fe:	4865      	ldr	r0, [pc, #404]	; (8002494 <HAL_UART_MspInit+0x228>)
 8002300:	f000 fc46 	bl	8002b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002304:	2304      	movs	r3, #4
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002314:	2308      	movs	r3, #8
 8002316:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800231c:	4619      	mov	r1, r3
 800231e:	485e      	ldr	r0, [pc, #376]	; (8002498 <HAL_UART_MspInit+0x22c>)
 8002320:	f000 fc36 	bl	8002b90 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	2035      	movs	r0, #53	; 0x35
 800232a:	f000 fb75 	bl	8002a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800232e:	2035      	movs	r0, #53	; 0x35
 8002330:	f000 fb8e 	bl	8002a50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002334:	e0a6      	b.n	8002484 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a58      	ldr	r2, [pc, #352]	; (800249c <HAL_UART_MspInit+0x230>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d135      	bne.n	80023ac <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	4b52      	ldr	r3, [pc, #328]	; (8002490 <HAL_UART_MspInit+0x224>)
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	4a51      	ldr	r2, [pc, #324]	; (8002490 <HAL_UART_MspInit+0x224>)
 800234a:	f043 0310 	orr.w	r3, r3, #16
 800234e:	6453      	str	r3, [r2, #68]	; 0x44
 8002350:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <HAL_UART_MspInit+0x224>)
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235c:	2300      	movs	r3, #0
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	4b4b      	ldr	r3, [pc, #300]	; (8002490 <HAL_UART_MspInit+0x224>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	4a4a      	ldr	r2, [pc, #296]	; (8002490 <HAL_UART_MspInit+0x224>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6313      	str	r3, [r2, #48]	; 0x30
 800236c:	4b48      	ldr	r3, [pc, #288]	; (8002490 <HAL_UART_MspInit+0x224>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002378:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002386:	2303      	movs	r3, #3
 8002388:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800238a:	2307      	movs	r3, #7
 800238c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002392:	4619      	mov	r1, r3
 8002394:	4842      	ldr	r0, [pc, #264]	; (80024a0 <HAL_UART_MspInit+0x234>)
 8002396:	f000 fbfb 	bl	8002b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2106      	movs	r1, #6
 800239e:	2025      	movs	r0, #37	; 0x25
 80023a0:	f000 fb3a 	bl	8002a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023a4:	2025      	movs	r0, #37	; 0x25
 80023a6:	f000 fb53 	bl	8002a50 <HAL_NVIC_EnableIRQ>
}
 80023aa:	e06b      	b.n	8002484 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART3)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a3c      	ldr	r2, [pc, #240]	; (80024a4 <HAL_UART_MspInit+0x238>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d135      	bne.n	8002422 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	4b35      	ldr	r3, [pc, #212]	; (8002490 <HAL_UART_MspInit+0x224>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	4a34      	ldr	r2, [pc, #208]	; (8002490 <HAL_UART_MspInit+0x224>)
 80023c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c4:	6413      	str	r3, [r2, #64]	; 0x40
 80023c6:	4b32      	ldr	r3, [pc, #200]	; (8002490 <HAL_UART_MspInit+0x224>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <HAL_UART_MspInit+0x224>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a2d      	ldr	r2, [pc, #180]	; (8002490 <HAL_UART_MspInit+0x224>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_UART_MspInit+0x224>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80023ee:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fc:	2303      	movs	r3, #3
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002400:	2307      	movs	r3, #7
 8002402:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002404:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002408:	4619      	mov	r1, r3
 800240a:	4822      	ldr	r0, [pc, #136]	; (8002494 <HAL_UART_MspInit+0x228>)
 800240c:	f000 fbc0 	bl	8002b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002410:	2200      	movs	r2, #0
 8002412:	2101      	movs	r1, #1
 8002414:	2027      	movs	r0, #39	; 0x27
 8002416:	f000 faff 	bl	8002a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800241a:	2027      	movs	r0, #39	; 0x27
 800241c:	f000 fb18 	bl	8002a50 <HAL_NVIC_EnableIRQ>
}
 8002420:	e030      	b.n	8002484 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART6)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a20      	ldr	r2, [pc, #128]	; (80024a8 <HAL_UART_MspInit+0x23c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d12b      	bne.n	8002484 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_UART_MspInit+0x224>)
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	4a16      	ldr	r2, [pc, #88]	; (8002490 <HAL_UART_MspInit+0x224>)
 8002436:	f043 0320 	orr.w	r3, r3, #32
 800243a:	6453      	str	r3, [r2, #68]	; 0x44
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_UART_MspInit+0x224>)
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002448:	2300      	movs	r3, #0
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_UART_MspInit+0x224>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_UART_MspInit+0x224>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6313      	str	r3, [r2, #48]	; 0x30
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_UART_MspInit+0x224>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002464:	23c0      	movs	r3, #192	; 0xc0
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002474:	2308      	movs	r3, #8
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800247c:	4619      	mov	r1, r3
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <HAL_UART_MspInit+0x228>)
 8002480:	f000 fb86 	bl	8002b90 <HAL_GPIO_Init>
}
 8002484:	bf00      	nop
 8002486:	3740      	adds	r7, #64	; 0x40
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40005000 	.word	0x40005000
 8002490:	40023800 	.word	0x40023800
 8002494:	40020800 	.word	0x40020800
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40011000 	.word	0x40011000
 80024a0:	40020000 	.word	0x40020000
 80024a4:	40004800 	.word	0x40004800
 80024a8:	40011400 	.word	0x40011400

080024ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08e      	sub	sp, #56	; 0x38
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	4b33      	ldr	r3, [pc, #204]	; (8002590 <HAL_InitTick+0xe4>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	4a32      	ldr	r2, [pc, #200]	; (8002590 <HAL_InitTick+0xe4>)
 80024c6:	f043 0320 	orr.w	r3, r3, #32
 80024ca:	6413      	str	r3, [r2, #64]	; 0x40
 80024cc:	4b30      	ldr	r3, [pc, #192]	; (8002590 <HAL_InitTick+0xe4>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024d8:	f107 0210 	add.w	r2, r7, #16
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f001 fa84 	bl	80039f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024f2:	f001 fa55 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 80024f6:	6378      	str	r0, [r7, #52]	; 0x34
 80024f8:	e004      	b.n	8002504 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024fa:	f001 fa51 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 80024fe:	4603      	mov	r3, r0
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002506:	4a23      	ldr	r2, [pc, #140]	; (8002594 <HAL_InitTick+0xe8>)
 8002508:	fba2 2303 	umull	r2, r3, r2, r3
 800250c:	0c9b      	lsrs	r3, r3, #18
 800250e:	3b01      	subs	r3, #1
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <HAL_InitTick+0xec>)
 8002514:	4a21      	ldr	r2, [pc, #132]	; (800259c <HAL_InitTick+0xf0>)
 8002516:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002518:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <HAL_InitTick+0xec>)
 800251a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800251e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002520:	4a1d      	ldr	r2, [pc, #116]	; (8002598 <HAL_InitTick+0xec>)
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002526:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <HAL_InitTick+0xec>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <HAL_InitTick+0xec>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002532:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_InitTick+0xec>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002538:	4817      	ldr	r0, [pc, #92]	; (8002598 <HAL_InitTick+0xec>)
 800253a:	f001 fed3 	bl	80042e4 <HAL_TIM_Base_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002544:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002548:	2b00      	cmp	r3, #0
 800254a:	d11b      	bne.n	8002584 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800254c:	4812      	ldr	r0, [pc, #72]	; (8002598 <HAL_InitTick+0xec>)
 800254e:	f001 ff19 	bl	8004384 <HAL_TIM_Base_Start_IT>
 8002552:	4603      	mov	r3, r0
 8002554:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002558:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800255c:	2b00      	cmp	r3, #0
 800255e:	d111      	bne.n	8002584 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002560:	2037      	movs	r0, #55	; 0x37
 8002562:	f000 fa75 	bl	8002a50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	d808      	bhi.n	800257e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800256c:	2200      	movs	r2, #0
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	2037      	movs	r0, #55	; 0x37
 8002572:	f000 fa51 	bl	8002a18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <HAL_InitTick+0xf4>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	e002      	b.n	8002584 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002584:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002588:	4618      	mov	r0, r3
 800258a:	3738      	adds	r7, #56	; 0x38
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40023800 	.word	0x40023800
 8002594:	431bde83 	.word	0x431bde83
 8002598:	20000738 	.word	0x20000738
 800259c:	40001400 	.word	0x40001400
 80025a0:	20000004 	.word	0x20000004

080025a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025a8:	e7fe      	b.n	80025a8 <NMI_Handler+0x4>

080025aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ae:	e7fe      	b.n	80025ae <HardFault_Handler+0x4>

080025b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <MemManage_Handler+0x4>

080025b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ba:	e7fe      	b.n	80025ba <BusFault_Handler+0x4>

080025bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <UsageFault_Handler+0x4>
	...

080025c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <TIM2_IRQHandler+0x58>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d117      	bne.n	8002606 <TIM2_IRQHandler+0x42>
		// Timer overflow interrupt
		Global_Speed = round(Calculate_Car_Speed());
 80025d6:	f7ff f81d 	bl	8001614 <Calculate_Car_Speed>
 80025da:	ee10 3a10 	vmov	r3, s0
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe f822 	bl	8000628 <__aeabi_f2d>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	ec43 2b10 	vmov	d0, r2, r3
 80025ec:	f00a f97a 	bl	800c8e4 <round>
 80025f0:	ec53 2b10 	vmov	r2, r3, d0
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	f7fe fb46 	bl	8000c88 <__aeabi_d2uiz>
 80025fc:	4603      	mov	r3, r0
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <TIM2_IRQHandler+0x5c>)
 8002602:	801a      	strh	r2, [r3, #0]
 8002604:	e004      	b.n	8002610 <TIM2_IRQHandler+0x4c>
	}else {
		edges_counter++;
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <TIM2_IRQHandler+0x60>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3301      	adds	r3, #1
 800260c:	4a05      	ldr	r2, [pc, #20]	; (8002624 <TIM2_IRQHandler+0x60>)
 800260e:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <TIM2_IRQHandler+0x58>)
 8002612:	f002 f9b5 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000504 	.word	0x20000504
 8002620:	20000736 	.word	0x20000736
 8002624:	200001f8 	.word	0x200001f8

08002628 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 800262c:	4803      	ldr	r0, [pc, #12]	; (800263c <USART1_IRQHandler+0x14>)
 800262e:	f7fe ff93 	bl	8001558 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002632:	4802      	ldr	r0, [pc, #8]	; (800263c <USART1_IRQHandler+0x14>)
 8002634:	f002 ff6c 	bl	8005510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000668 	.word	0x20000668

08002640 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <USART3_IRQHandler+0x10>)
 8002646:	f002 ff63 	bl	8005510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200006ac 	.word	0x200006ac

08002654 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <UART5_IRQHandler+0x10>)
 800265a:	f002 ff59 	bl	8005510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000624 	.word	0x20000624

08002668 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800266c:	4802      	ldr	r0, [pc, #8]	; (8002678 <TIM7_IRQHandler+0x10>)
 800266e:	f002 f987 	bl	8004980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000738 	.word	0x20000738

0800267c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return 1;
 8002680:	2301      	movs	r3, #1
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_kill>:

int _kill(int pid, int sig)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002696:	f008 fa27 	bl	800aae8 <__errno>
 800269a:	4603      	mov	r3, r0
 800269c:	2216      	movs	r2, #22
 800269e:	601a      	str	r2, [r3, #0]
  return -1;
 80026a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <_exit>:

void _exit (int status)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ffe7 	bl	800268c <_kill>
  while (1) {}    /* Make sure we hang here */
 80026be:	e7fe      	b.n	80026be <_exit+0x12>

080026c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	e00a      	b.n	80026e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026d2:	f3af 8000 	nop.w
 80026d6:	4601      	mov	r1, r0
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	60ba      	str	r2, [r7, #8]
 80026de:	b2ca      	uxtb	r2, r1
 80026e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3301      	adds	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	dbf0      	blt.n	80026d2 <_read+0x12>
  }

  return len;
 80026f0:	687b      	ldr	r3, [r7, #4]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_close>:
  }
  return len;
}

int _close(int file)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002722:	605a      	str	r2, [r3, #4]
  return 0;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <_isatty>:

int _isatty(int file)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800273a:	2301      	movs	r3, #1
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <SystemInit+0x20>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276e:	4a05      	ldr	r2, [pc, #20]	; (8002784 <SystemInit+0x20>)
 8002770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800278c:	480d      	ldr	r0, [pc, #52]	; (80027c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800278e:	490e      	ldr	r1, [pc, #56]	; (80027c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002790:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002794:	e002      	b.n	800279c <LoopCopyDataInit>

08002796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800279a:	3304      	adds	r3, #4

0800279c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800279c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a0:	d3f9      	bcc.n	8002796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027a2:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027a4:	4c0b      	ldr	r4, [pc, #44]	; (80027d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a8:	e001      	b.n	80027ae <LoopFillZerobss>

080027aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ac:	3204      	adds	r2, #4

080027ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b0:	d3fb      	bcc.n	80027aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027b2:	f7ff ffd7 	bl	8002764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027b6:	f008 f99d 	bl	800aaf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ba:	f7fe ff55 	bl	8001668 <main>
  bx  lr    
 80027be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80027cc:	0800ce64 	.word	0x0800ce64
  ldr r2, =_sbss
 80027d0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80027d4:	20013ce8 	.word	0x20013ce8

080027d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d8:	e7fe      	b.n	80027d8 <ADC_IRQHandler>
	...

080027dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_Init+0x40>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <HAL_Init+0x40>)
 80027e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0a      	ldr	r2, [pc, #40]	; (800281c <HAL_Init+0x40>)
 80027f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_Init+0x40>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a07      	ldr	r2, [pc, #28]	; (800281c <HAL_Init+0x40>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002804:	2003      	movs	r0, #3
 8002806:	f000 f8fc 	bl	8002a02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280a:	200f      	movs	r0, #15
 800280c:	f7ff fe4e 	bl	80024ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002810:	f7ff fb0e 	bl	8001e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023c00 	.word	0x40023c00

08002820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x20>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_IncTick+0x24>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4413      	add	r3, r2
 8002830:	4a04      	ldr	r2, [pc, #16]	; (8002844 <HAL_IncTick+0x24>)
 8002832:	6013      	str	r3, [r2, #0]
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000008 	.word	0x20000008
 8002844:	20000780 	.word	0x20000780

08002848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return uwTick;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_GetTick+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000780 	.word	0x20000780

08002860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7ff ffee 	bl	8002848 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d005      	beq.n	8002886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_Delay+0x44>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002886:	bf00      	nop
 8002888:	f7ff ffde 	bl	8002848 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	429a      	cmp	r2, r3
 8002896:	d8f7      	bhi.n	8002888 <HAL_Delay+0x28>
  {
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000008 	.word	0x20000008

080028a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028da:	4a04      	ldr	r2, [pc, #16]	; (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	60d3      	str	r3, [r2, #12]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <__NVIC_GetPriorityGrouping+0x18>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	f003 0307 	and.w	r3, r3, #7
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	2b00      	cmp	r3, #0
 800291c:	db0b      	blt.n	8002936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4907      	ldr	r1, [pc, #28]	; (8002944 <__NVIC_EnableIRQ+0x38>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2001      	movs	r0, #1
 800292e:	fa00 f202 	lsl.w	r2, r0, r2
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000e100 	.word	0xe000e100

08002948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	db0a      	blt.n	8002972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	490c      	ldr	r1, [pc, #48]	; (8002994 <__NVIC_SetPriority+0x4c>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	440b      	add	r3, r1
 800296c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002970:	e00a      	b.n	8002988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4908      	ldr	r1, [pc, #32]	; (8002998 <__NVIC_SetPriority+0x50>)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3b04      	subs	r3, #4
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	440b      	add	r3, r1
 8002986:	761a      	strb	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000e100 	.word	0xe000e100
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	; 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf28      	it	cs
 80029ba:	2304      	movcs	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d902      	bls.n	80029cc <NVIC_EncodePriority+0x30>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3b03      	subs	r3, #3
 80029ca:	e000      	b.n	80029ce <NVIC_EncodePriority+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43d9      	mvns	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	4313      	orrs	r3, r2
         );
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ff4c 	bl	80028a8 <__NVIC_SetPriorityGrouping>
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a2a:	f7ff ff61 	bl	80028f0 <__NVIC_GetPriorityGrouping>
 8002a2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	6978      	ldr	r0, [r7, #20]
 8002a36:	f7ff ffb1 	bl	800299c <NVIC_EncodePriority>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ff80 	bl	8002948 <__NVIC_SetPriority>
}
 8002a48:	bf00      	nop
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff54 	bl	800290c <__NVIC_EnableIRQ>
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a7a:	f7ff fee5 	bl	8002848 <HAL_GetTick>
 8002a7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d008      	beq.n	8002a9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2280      	movs	r2, #128	; 0x80
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e052      	b.n	8002b44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0216 	bic.w	r2, r2, #22
 8002aac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002abc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <HAL_DMA_Abort+0x62>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d007      	beq.n	8002ade <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0208 	bic.w	r2, r2, #8
 8002adc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aee:	e013      	b.n	8002b18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002af0:	f7ff feaa 	bl	8002848 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d90c      	bls.n	8002b18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2220      	movs	r2, #32
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2203      	movs	r2, #3
 8002b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e015      	b.n	8002b44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1e4      	bne.n	8002af0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	223f      	movs	r2, #63	; 0x3f
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d004      	beq.n	8002b6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00c      	b.n	8002b84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2205      	movs	r2, #5
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	e165      	b.n	8002e78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bac:	2201      	movs	r2, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	f040 8154 	bne.w	8002e72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d005      	beq.n	8002be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d130      	bne.n	8002c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	2203      	movs	r2, #3
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c18:	2201      	movs	r2, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 0201 	and.w	r2, r3, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d017      	beq.n	8002c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d123      	bne.n	8002cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	08da      	lsrs	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3208      	adds	r2, #8
 8002c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	08da      	lsrs	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3208      	adds	r2, #8
 8002cce:	69b9      	ldr	r1, [r7, #24]
 8002cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0203 	and.w	r2, r3, #3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80ae 	beq.w	8002e72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <HAL_GPIO_Init+0x300>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a5c      	ldr	r2, [pc, #368]	; (8002e90 <HAL_GPIO_Init+0x300>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b5a      	ldr	r3, [pc, #360]	; (8002e90 <HAL_GPIO_Init+0x300>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d32:	4a58      	ldr	r2, [pc, #352]	; (8002e94 <HAL_GPIO_Init+0x304>)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	220f      	movs	r2, #15
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a4f      	ldr	r2, [pc, #316]	; (8002e98 <HAL_GPIO_Init+0x308>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d025      	beq.n	8002daa <HAL_GPIO_Init+0x21a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4e      	ldr	r2, [pc, #312]	; (8002e9c <HAL_GPIO_Init+0x30c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01f      	beq.n	8002da6 <HAL_GPIO_Init+0x216>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4d      	ldr	r2, [pc, #308]	; (8002ea0 <HAL_GPIO_Init+0x310>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d019      	beq.n	8002da2 <HAL_GPIO_Init+0x212>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4c      	ldr	r2, [pc, #304]	; (8002ea4 <HAL_GPIO_Init+0x314>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_GPIO_Init+0x20e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4b      	ldr	r2, [pc, #300]	; (8002ea8 <HAL_GPIO_Init+0x318>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00d      	beq.n	8002d9a <HAL_GPIO_Init+0x20a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4a      	ldr	r2, [pc, #296]	; (8002eac <HAL_GPIO_Init+0x31c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <HAL_GPIO_Init+0x206>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a49      	ldr	r2, [pc, #292]	; (8002eb0 <HAL_GPIO_Init+0x320>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d101      	bne.n	8002d92 <HAL_GPIO_Init+0x202>
 8002d8e:	2306      	movs	r3, #6
 8002d90:	e00c      	b.n	8002dac <HAL_GPIO_Init+0x21c>
 8002d92:	2307      	movs	r3, #7
 8002d94:	e00a      	b.n	8002dac <HAL_GPIO_Init+0x21c>
 8002d96:	2305      	movs	r3, #5
 8002d98:	e008      	b.n	8002dac <HAL_GPIO_Init+0x21c>
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	e006      	b.n	8002dac <HAL_GPIO_Init+0x21c>
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e004      	b.n	8002dac <HAL_GPIO_Init+0x21c>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e002      	b.n	8002dac <HAL_GPIO_Init+0x21c>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_GPIO_Init+0x21c>
 8002daa:	2300      	movs	r3, #0
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	f002 0203 	and.w	r2, r2, #3
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	4093      	lsls	r3, r2
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dbc:	4935      	ldr	r1, [pc, #212]	; (8002e94 <HAL_GPIO_Init+0x304>)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dca:	4b3a      	ldr	r3, [pc, #232]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dee:	4a31      	ldr	r2, [pc, #196]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df4:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e18:	4a26      	ldr	r2, [pc, #152]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e1e:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e42:	4a1c      	ldr	r2, [pc, #112]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e6c:	4a11      	ldr	r2, [pc, #68]	; (8002eb4 <HAL_GPIO_Init+0x324>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3301      	adds	r3, #1
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b0f      	cmp	r3, #15
 8002e7c:	f67f ae96 	bls.w	8002bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	3724      	adds	r7, #36	; 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40013800 	.word	0x40013800
 8002e98:	40020000 	.word	0x40020000
 8002e9c:	40020400 	.word	0x40020400
 8002ea0:	40020800 	.word	0x40020800
 8002ea4:	40020c00 	.word	0x40020c00
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40021400 	.word	0x40021400
 8002eb0:	40021800 	.word	0x40021800
 8002eb4:	40013c00 	.word	0x40013c00

08002eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec8:	787b      	ldrb	r3, [r7, #1]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ece:	887a      	ldrh	r2, [r7, #2]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ed4:	e003      	b.n	8002ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ed6:	887b      	ldrh	r3, [r7, #2]
 8002ed8:	041a      	lsls	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	619a      	str	r2, [r3, #24]
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e12b      	b.n	8003156 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe ffb4 	bl	8001e80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	; 0x24
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f50:	f000 fd26 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8002f54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a81      	ldr	r2, [pc, #516]	; (8003160 <HAL_I2C_Init+0x274>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d807      	bhi.n	8002f70 <HAL_I2C_Init+0x84>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a80      	ldr	r2, [pc, #512]	; (8003164 <HAL_I2C_Init+0x278>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	bf94      	ite	ls
 8002f68:	2301      	movls	r3, #1
 8002f6a:	2300      	movhi	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e006      	b.n	8002f7e <HAL_I2C_Init+0x92>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4a7d      	ldr	r2, [pc, #500]	; (8003168 <HAL_I2C_Init+0x27c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	bf94      	ite	ls
 8002f78:	2301      	movls	r3, #1
 8002f7a:	2300      	movhi	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0e7      	b.n	8003156 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a78      	ldr	r2, [pc, #480]	; (800316c <HAL_I2C_Init+0x280>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	0c9b      	lsrs	r3, r3, #18
 8002f90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4a6a      	ldr	r2, [pc, #424]	; (8003160 <HAL_I2C_Init+0x274>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d802      	bhi.n	8002fc0 <HAL_I2C_Init+0xd4>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	e009      	b.n	8002fd4 <HAL_I2C_Init+0xe8>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	4a69      	ldr	r2, [pc, #420]	; (8003170 <HAL_I2C_Init+0x284>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	099b      	lsrs	r3, r3, #6
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fe6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	495c      	ldr	r1, [pc, #368]	; (8003160 <HAL_I2C_Init+0x274>)
 8002ff0:	428b      	cmp	r3, r1
 8002ff2:	d819      	bhi.n	8003028 <HAL_I2C_Init+0x13c>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1e59      	subs	r1, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003002:	1c59      	adds	r1, r3, #1
 8003004:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003008:	400b      	ands	r3, r1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_I2C_Init+0x138>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1e59      	subs	r1, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fbb1 f3f3 	udiv	r3, r1, r3
 800301c:	3301      	adds	r3, #1
 800301e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003022:	e051      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 8003024:	2304      	movs	r3, #4
 8003026:	e04f      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d111      	bne.n	8003054 <HAL_I2C_Init+0x168>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1e58      	subs	r0, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	440b      	add	r3, r1
 800303e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003042:	3301      	adds	r3, #1
 8003044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	e012      	b.n	800307a <HAL_I2C_Init+0x18e>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1e58      	subs	r0, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	0099      	lsls	r1, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	fbb0 f3f3 	udiv	r3, r0, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Init+0x196>
 800307e:	2301      	movs	r3, #1
 8003080:	e022      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10e      	bne.n	80030a8 <HAL_I2C_Init+0x1bc>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1e58      	subs	r0, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6859      	ldr	r1, [r3, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	440b      	add	r3, r1
 8003098:	fbb0 f3f3 	udiv	r3, r0, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a6:	e00f      	b.n	80030c8 <HAL_I2C_Init+0x1dc>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1e58      	subs	r0, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	0099      	lsls	r1, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	6809      	ldr	r1, [r1, #0]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6911      	ldr	r1, [r2, #16]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68d2      	ldr	r2, [r2, #12]
 8003102:	4311      	orrs	r1, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	430b      	orrs	r3, r1
 800310a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	000186a0 	.word	0x000186a0
 8003164:	001e847f 	.word	0x001e847f
 8003168:	003d08ff 	.word	0x003d08ff
 800316c:	431bde83 	.word	0x431bde83
 8003170:	10624dd3 	.word	0x10624dd3

08003174 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	461a      	mov	r2, r3
 8003180:	460b      	mov	r3, r1
 8003182:	817b      	strh	r3, [r7, #10]
 8003184:	4613      	mov	r3, r2
 8003186:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003188:	f7ff fb5e 	bl	8002848 <HAL_GetTick>
 800318c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b20      	cmp	r3, #32
 8003198:	f040 80e0 	bne.w	800335c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2319      	movs	r3, #25
 80031a2:	2201      	movs	r2, #1
 80031a4:	4970      	ldr	r1, [pc, #448]	; (8003368 <HAL_I2C_Master_Transmit+0x1f4>)
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f964 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0d3      	b.n	800335e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_I2C_Master_Transmit+0x50>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e0cc      	b.n	800335e <HAL_I2C_Master_Transmit+0x1ea>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d007      	beq.n	80031ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0201 	orr.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2221      	movs	r2, #33	; 0x21
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2210      	movs	r2, #16
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	893a      	ldrh	r2, [r7, #8]
 800321a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a50      	ldr	r2, [pc, #320]	; (800336c <HAL_I2C_Master_Transmit+0x1f8>)
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800322c:	8979      	ldrh	r1, [r7, #10]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	6a3a      	ldr	r2, [r7, #32]
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f89c 	bl	8003370 <I2C_MasterRequestWrite>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e08d      	b.n	800335e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003258:	e066      	b.n	8003328 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	6a39      	ldr	r1, [r7, #32]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f9de 	bl	8003620 <I2C_WaitOnTXEFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00d      	beq.n	8003286 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2b04      	cmp	r3, #4
 8003270:	d107      	bne.n	8003282 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003280:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e06b      	b.n	800335e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	781a      	ldrb	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d11b      	bne.n	80032fc <HAL_I2C_Master_Transmit+0x188>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d017      	beq.n	80032fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	6a39      	ldr	r1, [r7, #32]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f9ce 	bl	80036a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	2b04      	cmp	r3, #4
 8003312:	d107      	bne.n	8003324 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003322:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e01a      	b.n	800335e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	2b00      	cmp	r3, #0
 800332e:	d194      	bne.n	800325a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	e000      	b.n	800335e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800335c:	2302      	movs	r3, #2
  }
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	00100002 	.word	0x00100002
 800336c:	ffff0000 	.word	0xffff0000

08003370 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	460b      	mov	r3, r1
 800337e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d006      	beq.n	800339a <I2C_MasterRequestWrite+0x2a>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d003      	beq.n	800339a <I2C_MasterRequestWrite+0x2a>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003398:	d108      	bne.n	80033ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	e00b      	b.n	80033c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	2b12      	cmp	r3, #18
 80033b2:	d107      	bne.n	80033c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f84f 	bl	8003474 <I2C_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00d      	beq.n	80033f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ea:	d103      	bne.n	80033f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e035      	b.n	8003464 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003400:	d108      	bne.n	8003414 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003402:	897b      	ldrh	r3, [r7, #10]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003410:	611a      	str	r2, [r3, #16]
 8003412:	e01b      	b.n	800344c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003414:	897b      	ldrh	r3, [r7, #10]
 8003416:	11db      	asrs	r3, r3, #7
 8003418:	b2db      	uxtb	r3, r3
 800341a:	f003 0306 	and.w	r3, r3, #6
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f063 030f 	orn	r3, r3, #15
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	490e      	ldr	r1, [pc, #56]	; (800346c <I2C_MasterRequestWrite+0xfc>)
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f875 	bl	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e010      	b.n	8003464 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003442:	897b      	ldrh	r3, [r7, #10]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4907      	ldr	r1, [pc, #28]	; (8003470 <I2C_MasterRequestWrite+0x100>)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f865 	bl	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	00010008 	.word	0x00010008
 8003470:	00010002 	.word	0x00010002

08003474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003484:	e025      	b.n	80034d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d021      	beq.n	80034d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348e:	f7ff f9db 	bl	8002848 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d302      	bcc.n	80034a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d116      	bne.n	80034d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e023      	b.n	800351a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d10d      	bne.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	43da      	mvns	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4013      	ands	r3, r2
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	e00c      	b.n	8003512 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	43da      	mvns	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4013      	ands	r3, r2
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf0c      	ite	eq
 800350a:	2301      	moveq	r3, #1
 800350c:	2300      	movne	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	429a      	cmp	r2, r3
 8003516:	d0b6      	beq.n	8003486 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003530:	e051      	b.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003540:	d123      	bne.n	800358a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003550:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800355a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f043 0204 	orr.w	r2, r3, #4
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e046      	b.n	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d021      	beq.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7ff f959 	bl	8002848 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d116      	bne.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f043 0220 	orr.w	r2, r3, #32
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e020      	b.n	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	0c1b      	lsrs	r3, r3, #16
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d10c      	bne.n	80035fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	43da      	mvns	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4013      	ands	r3, r2
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	bf14      	ite	ne
 80035f2:	2301      	movne	r3, #1
 80035f4:	2300      	moveq	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	e00b      	b.n	8003612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	43da      	mvns	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4013      	ands	r3, r2
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf14      	ite	ne
 800360c:	2301      	movne	r3, #1
 800360e:	2300      	moveq	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d18d      	bne.n	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800362c:	e02d      	b.n	800368a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f878 	bl	8003724 <I2C_IsAcknowledgeFailed>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e02d      	b.n	800369a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d021      	beq.n	800368a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003646:	f7ff f8ff 	bl	8002848 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	d302      	bcc.n	800365c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d116      	bne.n	800368a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e007      	b.n	800369a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003694:	2b80      	cmp	r3, #128	; 0x80
 8003696:	d1ca      	bne.n	800362e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036ae:	e02d      	b.n	800370c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 f837 	bl	8003724 <I2C_IsAcknowledgeFailed>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e02d      	b.n	800371c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d021      	beq.n	800370c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c8:	f7ff f8be 	bl	8002848 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d302      	bcc.n	80036de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d116      	bne.n	800370c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f043 0220 	orr.w	r2, r3, #32
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e007      	b.n	800371c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b04      	cmp	r3, #4
 8003718:	d1ca      	bne.n	80036b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373a:	d11b      	bne.n	8003774 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003744:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	f043 0204 	orr.w	r2, r3, #4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <HAL_PWR_EnterSLEEPMode+0x34>)
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <HAL_PWR_EnterSLEEPMode+0x34>)
 8003796:	f023 0304 	bic.w	r3, r3, #4
 800379a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80037a2:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80037a4:	e002      	b.n	80037ac <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80037a6:	bf40      	sev
    __WFE();
 80037a8:	bf20      	wfe
    __WFE();
 80037aa:	bf20      	wfe
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0cc      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d0:	4b68      	ldr	r3, [pc, #416]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d90c      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b65      	ldr	r3, [pc, #404]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b63      	ldr	r3, [pc, #396]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0b8      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d020      	beq.n	8003846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003810:	4b59      	ldr	r3, [pc, #356]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a58      	ldr	r2, [pc, #352]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800381a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003828:	4b53      	ldr	r3, [pc, #332]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a52      	ldr	r2, [pc, #328]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003834:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	494d      	ldr	r1, [pc, #308]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d044      	beq.n	80038dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d119      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e07f      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d003      	beq.n	800387a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003876:	2b03      	cmp	r3, #3
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387a:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e06f      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388a:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e067      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389a:	4b37      	ldr	r3, [pc, #220]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f023 0203 	bic.w	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4934      	ldr	r1, [pc, #208]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ac:	f7fe ffcc 	bl	8002848 <HAL_GetTick>
 80038b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b4:	f7fe ffc8 	bl	8002848 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e04f      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 020c 	and.w	r2, r3, #12
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	429a      	cmp	r2, r3
 80038da:	d1eb      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038dc:	4b25      	ldr	r3, [pc, #148]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d20c      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b22      	ldr	r3, [pc, #136]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e032      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4916      	ldr	r1, [pc, #88]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	490e      	ldr	r1, [pc, #56]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003942:	f000 f887 	bl	8003a54 <HAL_RCC_GetSysClockFreq>
 8003946:	4602      	mov	r2, r0
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	490a      	ldr	r1, [pc, #40]	; (800397c <HAL_RCC_ClockConfig+0x1c0>)
 8003954:	5ccb      	ldrb	r3, [r1, r3]
 8003956:	fa22 f303 	lsr.w	r3, r2, r3
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800395e:	4b09      	ldr	r3, [pc, #36]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fe fda2 	bl	80024ac <HAL_InitTick>

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40023c00 	.word	0x40023c00
 8003978:	40023800 	.word	0x40023800
 800397c:	0800cac0 	.word	0x0800cac0
 8003980:	20000000 	.word	0x20000000
 8003984:	20000004 	.word	0x20000004

08003988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <HAL_RCC_GetHCLKFreq+0x14>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000000 	.word	0x20000000

080039a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039a4:	f7ff fff0 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	0a9b      	lsrs	r3, r3, #10
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4903      	ldr	r1, [pc, #12]	; (80039c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40023800 	.word	0x40023800
 80039c4:	0800cad0 	.word	0x0800cad0

080039c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039cc:	f7ff ffdc 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	0b5b      	lsrs	r3, r3, #13
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	4903      	ldr	r1, [pc, #12]	; (80039ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40023800 	.word	0x40023800
 80039ec:	0800cad0 	.word	0x0800cad0

080039f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	220f      	movs	r2, #15
 80039fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a00:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_RCC_GetClockConfig+0x5c>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0203 	and.w	r2, r3, #3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <HAL_RCC_GetClockConfig+0x5c>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <HAL_RCC_GetClockConfig+0x5c>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a24:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_RCC_GetClockConfig+0x5c>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	08db      	lsrs	r3, r3, #3
 8003a2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a32:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <HAL_RCC_GetClockConfig+0x60>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 020f 	and.w	r2, r3, #15
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	601a      	str	r2, [r3, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40023c00 	.word	0x40023c00

08003a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a58:	b0a6      	sub	sp, #152	; 0x98
 8003a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a7a:	4bc8      	ldr	r3, [pc, #800]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	f200 817e 	bhi.w	8003d84 <HAL_RCC_GetSysClockFreq+0x330>
 8003a88:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003ac5 	.word	0x08003ac5
 8003a94:	08003d85 	.word	0x08003d85
 8003a98:	08003d85 	.word	0x08003d85
 8003a9c:	08003d85 	.word	0x08003d85
 8003aa0:	08003acd 	.word	0x08003acd
 8003aa4:	08003d85 	.word	0x08003d85
 8003aa8:	08003d85 	.word	0x08003d85
 8003aac:	08003d85 	.word	0x08003d85
 8003ab0:	08003ad5 	.word	0x08003ad5
 8003ab4:	08003d85 	.word	0x08003d85
 8003ab8:	08003d85 	.word	0x08003d85
 8003abc:	08003d85 	.word	0x08003d85
 8003ac0:	08003c3f 	.word	0x08003c3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4bb6      	ldr	r3, [pc, #728]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003ac6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003aca:	e15f      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003acc:	4bb5      	ldr	r3, [pc, #724]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003ad2:	e15b      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad4:	4bb1      	ldr	r3, [pc, #708]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003adc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ae0:	4bae      	ldr	r3, [pc, #696]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d031      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aec:	4bab      	ldr	r3, [pc, #684]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	2200      	movs	r2, #0
 8003af4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003af6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afe:	663b      	str	r3, [r7, #96]	; 0x60
 8003b00:	2300      	movs	r3, #0
 8003b02:	667b      	str	r3, [r7, #100]	; 0x64
 8003b04:	4ba7      	ldr	r3, [pc, #668]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b06:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003b0a:	462a      	mov	r2, r5
 8003b0c:	fb03 f202 	mul.w	r2, r3, r2
 8003b10:	2300      	movs	r3, #0
 8003b12:	4621      	mov	r1, r4
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	4aa2      	ldr	r2, [pc, #648]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	fba1 1202 	umull	r1, r2, r1, r2
 8003b22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b24:	460a      	mov	r2, r1
 8003b26:	67ba      	str	r2, [r7, #120]	; 0x78
 8003b28:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003b2a:	4413      	add	r3, r2
 8003b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b32:	2200      	movs	r2, #0
 8003b34:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b3c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b40:	f7fd f912 	bl	8000d68 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b4e:	e064      	b.n	8003c1a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b50:	4b92      	ldr	r3, [pc, #584]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	099b      	lsrs	r3, r3, #6
 8003b56:	2200      	movs	r2, #0
 8003b58:	653b      	str	r3, [r7, #80]	; 0x50
 8003b5a:	657a      	str	r2, [r7, #84]	; 0x54
 8003b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b62:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b64:	2300      	movs	r3, #0
 8003b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b68:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	462b      	mov	r3, r5
 8003b70:	f04f 0000 	mov.w	r0, #0
 8003b74:	f04f 0100 	mov.w	r1, #0
 8003b78:	0159      	lsls	r1, r3, #5
 8003b7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b7e:	0150      	lsls	r0, r2, #5
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4621      	mov	r1, r4
 8003b86:	1a51      	subs	r1, r2, r1
 8003b88:	6139      	str	r1, [r7, #16]
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	eb63 0301 	sbc.w	r3, r3, r1
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b9e:	4659      	mov	r1, fp
 8003ba0:	018b      	lsls	r3, r1, #6
 8003ba2:	4651      	mov	r1, sl
 8003ba4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ba8:	4651      	mov	r1, sl
 8003baa:	018a      	lsls	r2, r1, #6
 8003bac:	4651      	mov	r1, sl
 8003bae:	ebb2 0801 	subs.w	r8, r2, r1
 8003bb2:	4659      	mov	r1, fp
 8003bb4:	eb63 0901 	sbc.w	r9, r3, r1
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bcc:	4690      	mov	r8, r2
 8003bce:	4699      	mov	r9, r3
 8003bd0:	4623      	mov	r3, r4
 8003bd2:	eb18 0303 	adds.w	r3, r8, r3
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	462b      	mov	r3, r5
 8003bda:	eb49 0303 	adc.w	r3, r9, r3
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bec:	4629      	mov	r1, r5
 8003bee:	028b      	lsls	r3, r1, #10
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	028a      	lsls	r2, r1, #10
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c02:	2200      	movs	r2, #0
 8003c04:	643b      	str	r3, [r7, #64]	; 0x40
 8003c06:	647a      	str	r2, [r7, #68]	; 0x44
 8003c08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c0c:	f7fd f8ac 	bl	8000d68 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4613      	mov	r3, r2
 8003c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c1a:	4b60      	ldr	r3, [pc, #384]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	0c1b      	lsrs	r3, r3, #16
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	3301      	adds	r3, #1
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003c2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003c3c:	e0a6      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c3e:	4b57      	ldr	r3, [pc, #348]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c4a:	4b54      	ldr	r3, [pc, #336]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d02a      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c56:	4b51      	ldr	r3, [pc, #324]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	099b      	lsrs	r3, r3, #6
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4b4e      	ldr	r3, [pc, #312]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003c6c:	fb03 f201 	mul.w	r2, r3, r1
 8003c70:	2300      	movs	r3, #0
 8003c72:	fb00 f303 	mul.w	r3, r0, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	4a4a      	ldr	r2, [pc, #296]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003c7a:	fba0 1202 	umull	r1, r2, r0, r2
 8003c7e:	677a      	str	r2, [r7, #116]	; 0x74
 8003c80:	460a      	mov	r2, r1
 8003c82:	673a      	str	r2, [r7, #112]	; 0x70
 8003c84:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c86:	4413      	add	r3, r2
 8003c88:	677b      	str	r3, [r7, #116]	; 0x74
 8003c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c8e:	2200      	movs	r2, #0
 8003c90:	633b      	str	r3, [r7, #48]	; 0x30
 8003c92:	637a      	str	r2, [r7, #52]	; 0x34
 8003c94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c98:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003c9c:	f7fd f864 	bl	8000d68 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003caa:	e05b      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cac:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	099b      	lsrs	r3, r3, #6
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbe:	623b      	str	r3, [r7, #32]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cc8:	4642      	mov	r2, r8
 8003cca:	464b      	mov	r3, r9
 8003ccc:	f04f 0000 	mov.w	r0, #0
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	0159      	lsls	r1, r3, #5
 8003cd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cda:	0150      	lsls	r0, r2, #5
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d00:	ebb2 040a 	subs.w	r4, r2, sl
 8003d04:	eb63 050b 	sbc.w	r5, r3, fp
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	00eb      	lsls	r3, r5, #3
 8003d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d16:	00e2      	lsls	r2, r4, #3
 8003d18:	4614      	mov	r4, r2
 8003d1a:	461d      	mov	r5, r3
 8003d1c:	4643      	mov	r3, r8
 8003d1e:	18e3      	adds	r3, r4, r3
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	464b      	mov	r3, r9
 8003d24:	eb45 0303 	adc.w	r3, r5, r3
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d36:	4629      	mov	r1, r5
 8003d38:	028b      	lsls	r3, r1, #10
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d40:	4621      	mov	r1, r4
 8003d42:	028a      	lsls	r2, r1, #10
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	61fa      	str	r2, [r7, #28]
 8003d52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d56:	f7fd f807 	bl	8000d68 <__aeabi_uldivmod>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4613      	mov	r3, r2
 8003d60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d64:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x348>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	0f1b      	lsrs	r3, r3, #28
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003d72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003d82:	e003      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003d86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003d8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3798      	adds	r7, #152	; 0x98
 8003d94:	46bd      	mov	sp, r7
 8003d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	00f42400 	.word	0x00f42400
 8003da4:	017d7840 	.word	0x017d7840

08003da8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e28d      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8083 	beq.w	8003ece <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003dc8:	4b94      	ldr	r3, [pc, #592]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 030c 	and.w	r3, r3, #12
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d019      	beq.n	8003e08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dd4:	4b91      	ldr	r3, [pc, #580]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d106      	bne.n	8003dee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003de0:	4b8e      	ldr	r3, [pc, #568]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dec:	d00c      	beq.n	8003e08 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dee:	4b8b      	ldr	r3, [pc, #556]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d112      	bne.n	8003e20 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfa:	4b88      	ldr	r3, [pc, #544]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e06:	d10b      	bne.n	8003e20 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e08:	4b84      	ldr	r3, [pc, #528]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d05b      	beq.n	8003ecc <HAL_RCC_OscConfig+0x124>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d157      	bne.n	8003ecc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e25a      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e28:	d106      	bne.n	8003e38 <HAL_RCC_OscConfig+0x90>
 8003e2a:	4b7c      	ldr	r3, [pc, #496]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a7b      	ldr	r2, [pc, #492]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e01d      	b.n	8003e74 <HAL_RCC_OscConfig+0xcc>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCC_OscConfig+0xb4>
 8003e42:	4b76      	ldr	r3, [pc, #472]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a75      	ldr	r2, [pc, #468]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b73      	ldr	r3, [pc, #460]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a72      	ldr	r2, [pc, #456]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCC_OscConfig+0xcc>
 8003e5c:	4b6f      	ldr	r3, [pc, #444]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a6e      	ldr	r2, [pc, #440]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b6c      	ldr	r3, [pc, #432]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6b      	ldr	r2, [pc, #428]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fe fce4 	bl	8002848 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fe fce0 	bl	8002848 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e21f      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	4b61      	ldr	r3, [pc, #388]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0xdc>
 8003ea2:	e014      	b.n	8003ece <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fe fcd0 	bl	8002848 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fe fccc 	bl	8002848 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	; 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e20b      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ebe:	4b57      	ldr	r3, [pc, #348]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x104>
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d06f      	beq.n	8003fba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eda:	4b50      	ldr	r3, [pc, #320]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d017      	beq.n	8003f16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ee6:	4b4d      	ldr	r3, [pc, #308]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d105      	bne.n	8003efe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ef2:	4b4a      	ldr	r3, [pc, #296]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b47      	ldr	r3, [pc, #284]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d11c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0a:	4b44      	ldr	r3, [pc, #272]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d116      	bne.n	8003f44 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	4b41      	ldr	r3, [pc, #260]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_RCC_OscConfig+0x186>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d001      	beq.n	8003f2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e1d3      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2e:	4b3b      	ldr	r3, [pc, #236]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4937      	ldr	r1, [pc, #220]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f42:	e03a      	b.n	8003fba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d020      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f4c:	4b34      	ldr	r3, [pc, #208]	; (8004020 <HAL_RCC_OscConfig+0x278>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fe fc79 	bl	8002848 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5a:	f7fe fc75 	bl	8002848 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e1b4      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f78:	4b28      	ldr	r3, [pc, #160]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4925      	ldr	r1, [pc, #148]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]
 8003f8c:	e015      	b.n	8003fba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8e:	4b24      	ldr	r3, [pc, #144]	; (8004020 <HAL_RCC_OscConfig+0x278>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fe fc58 	bl	8002848 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f9c:	f7fe fc54 	bl	8002848 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e193      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d036      	beq.n	8004034 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <HAL_RCC_OscConfig+0x27c>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7fe fc38 	bl	8002848 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fdc:	f7fe fc34 	bl	8002848 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e173      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_OscConfig+0x274>)
 8003ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x234>
 8003ffa:	e01b      	b.n	8004034 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ffc:	4b09      	ldr	r3, [pc, #36]	; (8004024 <HAL_RCC_OscConfig+0x27c>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004002:	f7fe fc21 	bl	8002848 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004008:	e00e      	b.n	8004028 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800400a:	f7fe fc1d 	bl	8002848 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d907      	bls.n	8004028 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e15c      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
 800401c:	40023800 	.word	0x40023800
 8004020:	42470000 	.word	0x42470000
 8004024:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004028:	4b8a      	ldr	r3, [pc, #552]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800402a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ea      	bne.n	800400a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8097 	beq.w	8004170 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004042:	2300      	movs	r3, #0
 8004044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004046:	4b83      	ldr	r3, [pc, #524]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10f      	bne.n	8004072 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	4b7f      	ldr	r3, [pc, #508]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4a7e      	ldr	r2, [pc, #504]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800405c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004060:	6413      	str	r3, [r2, #64]	; 0x40
 8004062:	4b7c      	ldr	r3, [pc, #496]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406e:	2301      	movs	r3, #1
 8004070:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004072:	4b79      	ldr	r3, [pc, #484]	; (8004258 <HAL_RCC_OscConfig+0x4b0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d118      	bne.n	80040b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407e:	4b76      	ldr	r3, [pc, #472]	; (8004258 <HAL_RCC_OscConfig+0x4b0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a75      	ldr	r2, [pc, #468]	; (8004258 <HAL_RCC_OscConfig+0x4b0>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408a:	f7fe fbdd 	bl	8002848 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004092:	f7fe fbd9 	bl	8002848 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e118      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a4:	4b6c      	ldr	r3, [pc, #432]	; (8004258 <HAL_RCC_OscConfig+0x4b0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d106      	bne.n	80040c6 <HAL_RCC_OscConfig+0x31e>
 80040b8:	4b66      	ldr	r3, [pc, #408]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	4a65      	ldr	r2, [pc, #404]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6713      	str	r3, [r2, #112]	; 0x70
 80040c4:	e01c      	b.n	8004100 <HAL_RCC_OscConfig+0x358>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b05      	cmp	r3, #5
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x340>
 80040ce:	4b61      	ldr	r3, [pc, #388]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a60      	ldr	r2, [pc, #384]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040d4:	f043 0304 	orr.w	r3, r3, #4
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
 80040da:	4b5e      	ldr	r3, [pc, #376]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a5d      	ldr	r2, [pc, #372]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_OscConfig+0x358>
 80040e8:	4b5a      	ldr	r3, [pc, #360]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ec:	4a59      	ldr	r2, [pc, #356]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	6713      	str	r3, [r2, #112]	; 0x70
 80040f4:	4b57      	ldr	r3, [pc, #348]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	4a56      	ldr	r2, [pc, #344]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80040fa:	f023 0304 	bic.w	r3, r3, #4
 80040fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004108:	f7fe fb9e 	bl	8002848 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410e:	e00a      	b.n	8004126 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fe fb9a 	bl	8002848 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	; 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0d7      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004126:	4b4b      	ldr	r3, [pc, #300]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0ee      	beq.n	8004110 <HAL_RCC_OscConfig+0x368>
 8004132:	e014      	b.n	800415e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fe fb88 	bl	8002848 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413a:	e00a      	b.n	8004152 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7fe fb84 	bl	8002848 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	; 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e0c1      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004152:	4b40      	ldr	r3, [pc, #256]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1ee      	bne.n	800413c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800415e:	7dfb      	ldrb	r3, [r7, #23]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d105      	bne.n	8004170 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004164:	4b3b      	ldr	r3, [pc, #236]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	4a3a      	ldr	r2, [pc, #232]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800416a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80ad 	beq.w	80042d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800417a:	4b36      	ldr	r3, [pc, #216]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b08      	cmp	r3, #8
 8004184:	d060      	beq.n	8004248 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d145      	bne.n	800421a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418e:	4b33      	ldr	r3, [pc, #204]	; (800425c <HAL_RCC_OscConfig+0x4b4>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fe fb58 	bl	8002848 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800419c:	f7fe fb54 	bl	8002848 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e093      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	4b29      	ldr	r3, [pc, #164]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	019b      	lsls	r3, r3, #6
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	3b01      	subs	r3, #1
 80041d4:	041b      	lsls	r3, r3, #16
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	071b      	lsls	r3, r3, #28
 80041e6:	491b      	ldr	r1, [pc, #108]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ec:	4b1b      	ldr	r3, [pc, #108]	; (800425c <HAL_RCC_OscConfig+0x4b4>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fe fb29 	bl	8002848 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fa:	f7fe fb25 	bl	8002848 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e064      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x452>
 8004218:	e05c      	b.n	80042d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <HAL_RCC_OscConfig+0x4b4>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fe fb12 	bl	8002848 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004228:	f7fe fb0e 	bl	8002848 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e04d      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_RCC_OscConfig+0x4ac>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x480>
 8004246:	e045      	b.n	80042d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d107      	bne.n	8004260 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e040      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
 8004254:	40023800 	.word	0x40023800
 8004258:	40007000 	.word	0x40007000
 800425c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004260:	4b1f      	ldr	r3, [pc, #124]	; (80042e0 <HAL_RCC_OscConfig+0x538>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d030      	beq.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d129      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004286:	429a      	cmp	r2, r3
 8004288:	d122      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004296:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004298:	4293      	cmp	r3, r2
 800429a:	d119      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	3b01      	subs	r3, #1
 80042aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d10f      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800

080042e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e041      	b.n	800437a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fd fee8 	bl	80020e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f000 fd70 	bl	8004e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d001      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e04e      	b.n	800443a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a23      	ldr	r2, [pc, #140]	; (8004448 <HAL_TIM_Base_Start_IT+0xc4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d022      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x80>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c6:	d01d      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x80>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1f      	ldr	r2, [pc, #124]	; (800444c <HAL_TIM_Base_Start_IT+0xc8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d018      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x80>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <HAL_TIM_Base_Start_IT+0xcc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x80>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <HAL_TIM_Base_Start_IT+0xd0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00e      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x80>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1b      	ldr	r2, [pc, #108]	; (8004458 <HAL_TIM_Base_Start_IT+0xd4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d009      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x80>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a19      	ldr	r2, [pc, #100]	; (800445c <HAL_TIM_Base_Start_IT+0xd8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x80>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a18      	ldr	r2, [pc, #96]	; (8004460 <HAL_TIM_Base_Start_IT+0xdc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d111      	bne.n	8004428 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b06      	cmp	r3, #6
 8004414:	d010      	beq.n	8004438 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004426:	e007      	b.n	8004438 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40010000 	.word	0x40010000
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800
 8004454:	40000c00 	.word	0x40000c00
 8004458:	40010400 	.word	0x40010400
 800445c:	40014000 	.word	0x40014000
 8004460:	40001800 	.word	0x40001800

08004464 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e041      	b.n	80044fa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fd fdca 	bl	8002024 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f000 fcb0 	bl	8004e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e041      	b.n	8004598 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7fd fda1 	bl	8002070 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f000 fc61 	bl	8004e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_TIM_PWM_Start+0x24>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	e022      	b.n	800460a <HAL_TIM_PWM_Start+0x6a>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d109      	bne.n	80045de <HAL_TIM_PWM_Start+0x3e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	bf14      	ite	ne
 80045d6:	2301      	movne	r3, #1
 80045d8:	2300      	moveq	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	e015      	b.n	800460a <HAL_TIM_PWM_Start+0x6a>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d109      	bne.n	80045f8 <HAL_TIM_PWM_Start+0x58>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	e008      	b.n	800460a <HAL_TIM_PWM_Start+0x6a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e07c      	b.n	800470c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Start+0x82>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004620:	e013      	b.n	800464a <HAL_TIM_PWM_Start+0xaa>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Start+0x92>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004630:	e00b      	b.n	800464a <HAL_TIM_PWM_Start+0xaa>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d104      	bne.n	8004642 <HAL_TIM_PWM_Start+0xa2>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004640:	e003      	b.n	800464a <HAL_TIM_PWM_Start+0xaa>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2202      	movs	r2, #2
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2201      	movs	r2, #1
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fe28 	bl	80052a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a2d      	ldr	r2, [pc, #180]	; (8004714 <HAL_TIM_PWM_Start+0x174>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIM_PWM_Start+0xcc>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2c      	ldr	r2, [pc, #176]	; (8004718 <HAL_TIM_PWM_Start+0x178>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d101      	bne.n	8004670 <HAL_TIM_PWM_Start+0xd0>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <HAL_TIM_PWM_Start+0xd2>
 8004670:	2300      	movs	r3, #0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004684:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a22      	ldr	r2, [pc, #136]	; (8004714 <HAL_TIM_PWM_Start+0x174>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d022      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x136>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004698:	d01d      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x136>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a1f      	ldr	r2, [pc, #124]	; (800471c <HAL_TIM_PWM_Start+0x17c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d018      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x136>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <HAL_TIM_PWM_Start+0x180>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x136>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <HAL_TIM_PWM_Start+0x184>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00e      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x136>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a16      	ldr	r2, [pc, #88]	; (8004718 <HAL_TIM_PWM_Start+0x178>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d009      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x136>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a18      	ldr	r2, [pc, #96]	; (8004728 <HAL_TIM_PWM_Start+0x188>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d004      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x136>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a16      	ldr	r2, [pc, #88]	; (800472c <HAL_TIM_PWM_Start+0x18c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d111      	bne.n	80046fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b06      	cmp	r3, #6
 80046e6:	d010      	beq.n	800470a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f8:	e007      	b.n	800470a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0201 	orr.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40010000 	.word	0x40010000
 8004718:	40010400 	.word	0x40010400
 800471c:	40000400 	.word	0x40000400
 8004720:	40000800 	.word	0x40000800
 8004724:	40000c00 	.word	0x40000c00
 8004728:	40014000 	.word	0x40014000
 800472c:	40001800 	.word	0x40001800

08004730 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d104      	bne.n	800474e <HAL_TIM_IC_Start_IT+0x1e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474a:	b2db      	uxtb	r3, r3
 800474c:	e013      	b.n	8004776 <HAL_TIM_IC_Start_IT+0x46>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d104      	bne.n	800475e <HAL_TIM_IC_Start_IT+0x2e>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800475a:	b2db      	uxtb	r3, r3
 800475c:	e00b      	b.n	8004776 <HAL_TIM_IC_Start_IT+0x46>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d104      	bne.n	800476e <HAL_TIM_IC_Start_IT+0x3e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800476a:	b2db      	uxtb	r3, r3
 800476c:	e003      	b.n	8004776 <HAL_TIM_IC_Start_IT+0x46>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004774:	b2db      	uxtb	r3, r3
 8004776:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <HAL_TIM_IC_Start_IT+0x58>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004784:	b2db      	uxtb	r3, r3
 8004786:	e013      	b.n	80047b0 <HAL_TIM_IC_Start_IT+0x80>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b04      	cmp	r3, #4
 800478c:	d104      	bne.n	8004798 <HAL_TIM_IC_Start_IT+0x68>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004794:	b2db      	uxtb	r3, r3
 8004796:	e00b      	b.n	80047b0 <HAL_TIM_IC_Start_IT+0x80>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b08      	cmp	r3, #8
 800479c:	d104      	bne.n	80047a8 <HAL_TIM_IC_Start_IT+0x78>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e003      	b.n	80047b0 <HAL_TIM_IC_Start_IT+0x80>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80047b2:	7bbb      	ldrb	r3, [r7, #14]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d102      	bne.n	80047be <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80047b8:	7b7b      	ldrb	r3, [r7, #13]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d001      	beq.n	80047c2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e0cc      	b.n	800495c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d104      	bne.n	80047d2 <HAL_TIM_IC_Start_IT+0xa2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d0:	e013      	b.n	80047fa <HAL_TIM_IC_Start_IT+0xca>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d104      	bne.n	80047e2 <HAL_TIM_IC_Start_IT+0xb2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e0:	e00b      	b.n	80047fa <HAL_TIM_IC_Start_IT+0xca>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d104      	bne.n	80047f2 <HAL_TIM_IC_Start_IT+0xc2>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f0:	e003      	b.n	80047fa <HAL_TIM_IC_Start_IT+0xca>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <HAL_TIM_IC_Start_IT+0xda>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004808:	e013      	b.n	8004832 <HAL_TIM_IC_Start_IT+0x102>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d104      	bne.n	800481a <HAL_TIM_IC_Start_IT+0xea>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004818:	e00b      	b.n	8004832 <HAL_TIM_IC_Start_IT+0x102>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d104      	bne.n	800482a <HAL_TIM_IC_Start_IT+0xfa>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004828:	e003      	b.n	8004832 <HAL_TIM_IC_Start_IT+0x102>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b0c      	cmp	r3, #12
 8004836:	d841      	bhi.n	80048bc <HAL_TIM_IC_Start_IT+0x18c>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <HAL_TIM_IC_Start_IT+0x110>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004875 	.word	0x08004875
 8004844:	080048bd 	.word	0x080048bd
 8004848:	080048bd 	.word	0x080048bd
 800484c:	080048bd 	.word	0x080048bd
 8004850:	08004887 	.word	0x08004887
 8004854:	080048bd 	.word	0x080048bd
 8004858:	080048bd 	.word	0x080048bd
 800485c:	080048bd 	.word	0x080048bd
 8004860:	08004899 	.word	0x08004899
 8004864:	080048bd 	.word	0x080048bd
 8004868:	080048bd 	.word	0x080048bd
 800486c:	080048bd 	.word	0x080048bd
 8004870:	080048ab 	.word	0x080048ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0202 	orr.w	r2, r2, #2
 8004882:	60da      	str	r2, [r3, #12]
      break;
 8004884:	e01d      	b.n	80048c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0204 	orr.w	r2, r2, #4
 8004894:	60da      	str	r2, [r3, #12]
      break;
 8004896:	e014      	b.n	80048c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0208 	orr.w	r2, r2, #8
 80048a6:	60da      	str	r2, [r3, #12]
      break;
 80048a8:	e00b      	b.n	80048c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0210 	orr.w	r2, r2, #16
 80048b8:	60da      	str	r2, [r3, #12]
      break;
 80048ba:	e002      	b.n	80048c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	73fb      	strb	r3, [r7, #15]
      break;
 80048c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d148      	bne.n	800495a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2201      	movs	r2, #1
 80048ce:	6839      	ldr	r1, [r7, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fce9 	bl	80052a8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a22      	ldr	r2, [pc, #136]	; (8004964 <HAL_TIM_IC_Start_IT+0x234>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d022      	beq.n	8004926 <HAL_TIM_IC_Start_IT+0x1f6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e8:	d01d      	beq.n	8004926 <HAL_TIM_IC_Start_IT+0x1f6>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1e      	ldr	r2, [pc, #120]	; (8004968 <HAL_TIM_IC_Start_IT+0x238>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d018      	beq.n	8004926 <HAL_TIM_IC_Start_IT+0x1f6>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a1c      	ldr	r2, [pc, #112]	; (800496c <HAL_TIM_IC_Start_IT+0x23c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d013      	beq.n	8004926 <HAL_TIM_IC_Start_IT+0x1f6>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a1b      	ldr	r2, [pc, #108]	; (8004970 <HAL_TIM_IC_Start_IT+0x240>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00e      	beq.n	8004926 <HAL_TIM_IC_Start_IT+0x1f6>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a19      	ldr	r2, [pc, #100]	; (8004974 <HAL_TIM_IC_Start_IT+0x244>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d009      	beq.n	8004926 <HAL_TIM_IC_Start_IT+0x1f6>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a18      	ldr	r2, [pc, #96]	; (8004978 <HAL_TIM_IC_Start_IT+0x248>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d004      	beq.n	8004926 <HAL_TIM_IC_Start_IT+0x1f6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a16      	ldr	r2, [pc, #88]	; (800497c <HAL_TIM_IC_Start_IT+0x24c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d111      	bne.n	800494a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b06      	cmp	r3, #6
 8004936:	d010      	beq.n	800495a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004948:	e007      	b.n	800495a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0201 	orr.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800495a:	7bfb      	ldrb	r3, [r7, #15]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40010000 	.word	0x40010000
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800
 8004970:	40000c00 	.word	0x40000c00
 8004974:	40010400 	.word	0x40010400
 8004978:	40014000 	.word	0x40014000
 800497c:	40001800 	.word	0x40001800

08004980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d122      	bne.n	80049dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d11b      	bne.n	80049dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0202 	mvn.w	r2, #2
 80049ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fc fb5e 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f9fe 	bl	8004dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fa05 	bl	8004de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d122      	bne.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d11b      	bne.n	8004a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0204 	mvn.w	r2, #4
 8004a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fc fb34 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 8004a1c:	e005      	b.n	8004a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9d4 	bl	8004dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f9db 	bl	8004de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d122      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d11b      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0208 	mvn.w	r2, #8
 8004a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fc fb0a 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f9aa 	bl	8004dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f9b1 	bl	8004de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d122      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0210 	mvn.w	r2, #16
 8004aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2208      	movs	r2, #8
 8004aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fc fae0 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f980 	bl	8004dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f987 	bl	8004de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d10e      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d107      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0201 	mvn.w	r2, #1
 8004afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd f97e 	bl	8001e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0e:	2b80      	cmp	r3, #128	; 0x80
 8004b10:	d10e      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1c:	2b80      	cmp	r3, #128	; 0x80
 8004b1e:	d107      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fc68 	bl	8005400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	d10e      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d107      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f94c 	bl	8004df4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d10e      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d107      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0220 	mvn.w	r2, #32
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fc32 	bl	80053ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_TIM_OC_ConfigChannel+0x1e>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e048      	b.n	8004c40 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b0c      	cmp	r3, #12
 8004bba:	d839      	bhi.n	8004c30 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004c31 	.word	0x08004c31
 8004bcc:	08004c31 	.word	0x08004c31
 8004bd0:	08004c31 	.word	0x08004c31
 8004bd4:	08004c07 	.word	0x08004c07
 8004bd8:	08004c31 	.word	0x08004c31
 8004bdc:	08004c31 	.word	0x08004c31
 8004be0:	08004c31 	.word	0x08004c31
 8004be4:	08004c15 	.word	0x08004c15
 8004be8:	08004c31 	.word	0x08004c31
 8004bec:	08004c31 	.word	0x08004c31
 8004bf0:	08004c31 	.word	0x08004c31
 8004bf4:	08004c23 	.word	0x08004c23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 f9a2 	bl	8004f48 <TIM_OC1_SetConfig>
      break;
 8004c04:	e017      	b.n	8004c36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fa0b 	bl	8005028 <TIM_OC2_SetConfig>
      break;
 8004c12:	e010      	b.n	8004c36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fa7a 	bl	8005114 <TIM_OC3_SetConfig>
      break;
 8004c20:	e009      	b.n	8004c36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fae7 	bl	80051fc <TIM_OC4_SetConfig>
      break;
 8004c2e:	e002      	b.n	8004c36 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	75fb      	strb	r3, [r7, #23]
      break;
 8004c34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e0ae      	b.n	8004dc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b0c      	cmp	r3, #12
 8004c72:	f200 809f 	bhi.w	8004db4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c76:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004cb1 	.word	0x08004cb1
 8004c80:	08004db5 	.word	0x08004db5
 8004c84:	08004db5 	.word	0x08004db5
 8004c88:	08004db5 	.word	0x08004db5
 8004c8c:	08004cf1 	.word	0x08004cf1
 8004c90:	08004db5 	.word	0x08004db5
 8004c94:	08004db5 	.word	0x08004db5
 8004c98:	08004db5 	.word	0x08004db5
 8004c9c:	08004d33 	.word	0x08004d33
 8004ca0:	08004db5 	.word	0x08004db5
 8004ca4:	08004db5 	.word	0x08004db5
 8004ca8:	08004db5 	.word	0x08004db5
 8004cac:	08004d73 	.word	0x08004d73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 f946 	bl	8004f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0208 	orr.w	r2, r2, #8
 8004cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699a      	ldr	r2, [r3, #24]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0204 	bic.w	r2, r2, #4
 8004cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6999      	ldr	r1, [r3, #24]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	619a      	str	r2, [r3, #24]
      break;
 8004cee:	e064      	b.n	8004dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 f996 	bl	8005028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6999      	ldr	r1, [r3, #24]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	021a      	lsls	r2, r3, #8
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	619a      	str	r2, [r3, #24]
      break;
 8004d30:	e043      	b.n	8004dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 f9eb 	bl	8005114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0208 	orr.w	r2, r2, #8
 8004d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69da      	ldr	r2, [r3, #28]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0204 	bic.w	r2, r2, #4
 8004d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69d9      	ldr	r1, [r3, #28]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	61da      	str	r2, [r3, #28]
      break;
 8004d70:	e023      	b.n	8004dba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fa3f 	bl	80051fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69d9      	ldr	r1, [r3, #28]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	021a      	lsls	r2, r3, #8
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	61da      	str	r2, [r3, #28]
      break;
 8004db2:	e002      	b.n	8004dba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	75fb      	strb	r3, [r7, #23]
      break;
 8004db8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a40      	ldr	r2, [pc, #256]	; (8004f1c <TIM_Base_SetConfig+0x114>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d013      	beq.n	8004e48 <TIM_Base_SetConfig+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e26:	d00f      	beq.n	8004e48 <TIM_Base_SetConfig+0x40>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3d      	ldr	r2, [pc, #244]	; (8004f20 <TIM_Base_SetConfig+0x118>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00b      	beq.n	8004e48 <TIM_Base_SetConfig+0x40>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a3c      	ldr	r2, [pc, #240]	; (8004f24 <TIM_Base_SetConfig+0x11c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d007      	beq.n	8004e48 <TIM_Base_SetConfig+0x40>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a3b      	ldr	r2, [pc, #236]	; (8004f28 <TIM_Base_SetConfig+0x120>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a3a      	ldr	r2, [pc, #232]	; (8004f2c <TIM_Base_SetConfig+0x124>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d108      	bne.n	8004e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2f      	ldr	r2, [pc, #188]	; (8004f1c <TIM_Base_SetConfig+0x114>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d02b      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e68:	d027      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	; (8004f20 <TIM_Base_SetConfig+0x118>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d023      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2b      	ldr	r2, [pc, #172]	; (8004f24 <TIM_Base_SetConfig+0x11c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01f      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2a      	ldr	r2, [pc, #168]	; (8004f28 <TIM_Base_SetConfig+0x120>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d01b      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a29      	ldr	r2, [pc, #164]	; (8004f2c <TIM_Base_SetConfig+0x124>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d017      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a28      	ldr	r2, [pc, #160]	; (8004f30 <TIM_Base_SetConfig+0x128>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a27      	ldr	r2, [pc, #156]	; (8004f34 <TIM_Base_SetConfig+0x12c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00f      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a26      	ldr	r2, [pc, #152]	; (8004f38 <TIM_Base_SetConfig+0x130>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00b      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a25      	ldr	r2, [pc, #148]	; (8004f3c <TIM_Base_SetConfig+0x134>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d007      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a24      	ldr	r2, [pc, #144]	; (8004f40 <TIM_Base_SetConfig+0x138>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d003      	beq.n	8004eba <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a23      	ldr	r2, [pc, #140]	; (8004f44 <TIM_Base_SetConfig+0x13c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d108      	bne.n	8004ecc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <TIM_Base_SetConfig+0x114>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_Base_SetConfig+0xf8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a0c      	ldr	r2, [pc, #48]	; (8004f2c <TIM_Base_SetConfig+0x124>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d103      	bne.n	8004f08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	615a      	str	r2, [r3, #20]
}
 8004f0e:	bf00      	nop
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40010000 	.word	0x40010000
 8004f20:	40000400 	.word	0x40000400
 8004f24:	40000800 	.word	0x40000800
 8004f28:	40000c00 	.word	0x40000c00
 8004f2c:	40010400 	.word	0x40010400
 8004f30:	40014000 	.word	0x40014000
 8004f34:	40014400 	.word	0x40014400
 8004f38:	40014800 	.word	0x40014800
 8004f3c:	40001800 	.word	0x40001800
 8004f40:	40001c00 	.word	0x40001c00
 8004f44:	40002000 	.word	0x40002000

08004f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f023 0201 	bic.w	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0303 	bic.w	r3, r3, #3
 8004f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 0302 	bic.w	r3, r3, #2
 8004f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a20      	ldr	r2, [pc, #128]	; (8005020 <TIM_OC1_SetConfig+0xd8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_OC1_SetConfig+0x64>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a1f      	ldr	r2, [pc, #124]	; (8005024 <TIM_OC1_SetConfig+0xdc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d10c      	bne.n	8004fc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 0308 	bic.w	r3, r3, #8
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f023 0304 	bic.w	r3, r3, #4
 8004fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a15      	ldr	r2, [pc, #84]	; (8005020 <TIM_OC1_SetConfig+0xd8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d003      	beq.n	8004fd6 <TIM_OC1_SetConfig+0x8e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a14      	ldr	r2, [pc, #80]	; (8005024 <TIM_OC1_SetConfig+0xdc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d111      	bne.n	8004ffa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	621a      	str	r2, [r3, #32]
}
 8005014:	bf00      	nop
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	40010000 	.word	0x40010000
 8005024:	40010400 	.word	0x40010400

08005028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0210 	bic.w	r2, r3, #16
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	021b      	lsls	r3, r3, #8
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0320 	bic.w	r3, r3, #32
 8005072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a22      	ldr	r2, [pc, #136]	; (800510c <TIM_OC2_SetConfig+0xe4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d003      	beq.n	8005090 <TIM_OC2_SetConfig+0x68>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a21      	ldr	r2, [pc, #132]	; (8005110 <TIM_OC2_SetConfig+0xe8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10d      	bne.n	80050ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a17      	ldr	r2, [pc, #92]	; (800510c <TIM_OC2_SetConfig+0xe4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC2_SetConfig+0x94>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a16      	ldr	r2, [pc, #88]	; (8005110 <TIM_OC2_SetConfig+0xe8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d113      	bne.n	80050e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40010000 	.word	0x40010000
 8005110:	40010400 	.word	0x40010400

08005114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0303 	bic.w	r3, r3, #3
 800514a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800515c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a21      	ldr	r2, [pc, #132]	; (80051f4 <TIM_OC3_SetConfig+0xe0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d003      	beq.n	800517a <TIM_OC3_SetConfig+0x66>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a20      	ldr	r2, [pc, #128]	; (80051f8 <TIM_OC3_SetConfig+0xe4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d10d      	bne.n	8005196 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a16      	ldr	r2, [pc, #88]	; (80051f4 <TIM_OC3_SetConfig+0xe0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_OC3_SetConfig+0x92>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <TIM_OC3_SetConfig+0xe4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d113      	bne.n	80051ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	621a      	str	r2, [r3, #32]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	40010000 	.word	0x40010000
 80051f8:	40010400 	.word	0x40010400

080051fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	031b      	lsls	r3, r3, #12
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <TIM_OC4_SetConfig+0xa4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_OC4_SetConfig+0x68>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a11      	ldr	r2, [pc, #68]	; (80052a4 <TIM_OC4_SetConfig+0xa8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d109      	bne.n	8005278 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800526a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	019b      	lsls	r3, r3, #6
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40010000 	.word	0x40010000
 80052a4:	40010400 	.word	0x40010400

080052a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	2201      	movs	r2, #1
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a1a      	ldr	r2, [r3, #32]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	43db      	mvns	r3, r3
 80052ca:	401a      	ands	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1a      	ldr	r2, [r3, #32]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	fa01 f303 	lsl.w	r3, r1, r3
 80052e0:	431a      	orrs	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005308:	2302      	movs	r3, #2
 800530a:	e05a      	b.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a21      	ldr	r2, [pc, #132]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d022      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005358:	d01d      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d018      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1a      	ldr	r2, [pc, #104]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00e      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a18      	ldr	r2, [pc, #96]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a17      	ldr	r2, [pc, #92]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d10c      	bne.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800539c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800
 80053dc:	40000c00 	.word	0x40000c00
 80053e0:	40010400 	.word	0x40010400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40001800 	.word	0x40001800

080053ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e03f      	b.n	80054a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fc ff16 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2224      	movs	r2, #36	; 0x24
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fcdf 	bl	8005e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800546c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695a      	ldr	r2, [r3, #20]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800547c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800548c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	4613      	mov	r3, r2
 80054ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d11d      	bne.n	8005504 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_UART_Receive_IT+0x26>
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e016      	b.n	8005506 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_UART_Receive_IT+0x38>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e00f      	b.n	8005506 <HAL_UART_Receive_IT+0x58>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	461a      	mov	r2, r3
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 fab6 	bl	8005a6c <UART_Start_Receive_IT>
 8005500:	4603      	mov	r3, r0
 8005502:	e000      	b.n	8005506 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005504:	2302      	movs	r3, #2
  }
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b0ba      	sub	sp, #232	; 0xe8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005536:	2300      	movs	r3, #0
 8005538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800553c:	2300      	movs	r3, #0
 800553e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800554e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10f      	bne.n	8005576 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b00      	cmp	r3, #0
 8005560:	d009      	beq.n	8005576 <HAL_UART_IRQHandler+0x66>
 8005562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fb99 	bl	8005ca6 <UART_Receive_IT>
      return;
 8005574:	e256      	b.n	8005a24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 80de 	beq.w	800573c <HAL_UART_IRQHandler+0x22c>
 8005580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d106      	bne.n	800559a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800558c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005590:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80d1 	beq.w	800573c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00b      	beq.n	80055be <HAL_UART_IRQHandler+0xae>
 80055a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f043 0201 	orr.w	r2, r3, #1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00b      	beq.n	80055e2 <HAL_UART_IRQHandler+0xd2>
 80055ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	f043 0202 	orr.w	r2, r3, #2
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00b      	beq.n	8005606 <HAL_UART_IRQHandler+0xf6>
 80055ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f043 0204 	orr.w	r2, r3, #4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d011      	beq.n	8005636 <HAL_UART_IRQHandler+0x126>
 8005612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d105      	bne.n	800562a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800561e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f043 0208 	orr.w	r2, r3, #8
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 81ed 	beq.w	8005a1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d008      	beq.n	800565e <HAL_UART_IRQHandler+0x14e>
 800564c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fb24 	bl	8005ca6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	bf0c      	ite	eq
 800566c:	2301      	moveq	r3, #1
 800566e:	2300      	movne	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <HAL_UART_IRQHandler+0x17a>
 8005682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005686:	2b00      	cmp	r3, #0
 8005688:	d04f      	beq.n	800572a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa2c 	bl	8005ae8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b40      	cmp	r3, #64	; 0x40
 800569c:	d141      	bne.n	8005722 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3314      	adds	r3, #20
 80056a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3314      	adds	r3, #20
 80056c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1d9      	bne.n	800569e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d013      	beq.n	800571a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	4a7d      	ldr	r2, [pc, #500]	; (80058ec <HAL_UART_IRQHandler+0x3dc>)
 80056f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fa24 	bl	8002b4c <HAL_DMA_Abort_IT>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d016      	beq.n	8005738 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	e00e      	b.n	8005738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f990 	bl	8005a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005720:	e00a      	b.n	8005738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f98c 	bl	8005a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	e006      	b.n	8005738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f988 	bl	8005a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005736:	e170      	b.n	8005a1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	bf00      	nop
    return;
 800573a:	e16e      	b.n	8005a1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	2b01      	cmp	r3, #1
 8005742:	f040 814a 	bne.w	80059da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574a:	f003 0310 	and.w	r3, r3, #16
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 8143 	beq.w	80059da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 813c 	beq.w	80059da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005762:	2300      	movs	r3, #0
 8005764:	60bb      	str	r3, [r7, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	60bb      	str	r3, [r7, #8]
 8005776:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	f040 80b4 	bne.w	80058f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005794:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8140 	beq.w	8005a1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057a6:	429a      	cmp	r2, r3
 80057a8:	f080 8139 	bcs.w	8005a1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057be:	f000 8088 	beq.w	80058d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	330c      	adds	r3, #12
 80057c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005806:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1d9      	bne.n	80057c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3314      	adds	r3, #20
 8005814:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800581e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3314      	adds	r3, #20
 800582e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005832:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005836:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800583a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e1      	bne.n	800580e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3314      	adds	r3, #20
 8005850:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800585a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800585c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3314      	adds	r3, #20
 800586a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800586e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005870:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005874:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800587c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e3      	bne.n	800584a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a2:	f023 0310 	bic.w	r3, r3, #16
 80058a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	330c      	adds	r3, #12
 80058b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80058b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e3      	bne.n	8005890 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fd f8cd 	bl	8002a6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058da:	b29b      	uxth	r3, r3
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	b29b      	uxth	r3, r3
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f8b6 	bl	8005a54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058e8:	e099      	b.n	8005a1e <HAL_UART_IRQHandler+0x50e>
 80058ea:	bf00      	nop
 80058ec:	08005baf 	.word	0x08005baf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 808b 	beq.w	8005a22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800590c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 8086 	beq.w	8005a22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	330c      	adds	r3, #12
 800591c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800592c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800593a:	647a      	str	r2, [r7, #68]	; 0x44
 800593c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e3      	bne.n	8005916 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3314      	adds	r3, #20
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	623b      	str	r3, [r7, #32]
   return(result);
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3314      	adds	r3, #20
 800596e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005972:	633a      	str	r2, [r7, #48]	; 0x30
 8005974:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e3      	bne.n	800594e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2220      	movs	r2, #32
 800598a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	330c      	adds	r3, #12
 800599a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0310 	bic.w	r3, r3, #16
 80059aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059b8:	61fa      	str	r2, [r7, #28]
 80059ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	69b9      	ldr	r1, [r7, #24]
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	617b      	str	r3, [r7, #20]
   return(result);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e3      	bne.n	8005994 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f83e 	bl	8005a54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059d8:	e023      	b.n	8005a22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <HAL_UART_IRQHandler+0x4ea>
 80059e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f8ef 	bl	8005bd6 <UART_Transmit_IT>
    return;
 80059f8:	e014      	b.n	8005a24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00e      	beq.n	8005a24 <HAL_UART_IRQHandler+0x514>
 8005a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d008      	beq.n	8005a24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f92f 	bl	8005c76 <UART_EndTransmit_IT>
    return;
 8005a18:	e004      	b.n	8005a24 <HAL_UART_IRQHandler+0x514>
    return;
 8005a1a:	bf00      	nop
 8005a1c:	e002      	b.n	8005a24 <HAL_UART_IRQHandler+0x514>
      return;
 8005a1e:	bf00      	nop
 8005a20:	e000      	b.n	8005a24 <HAL_UART_IRQHandler+0x514>
      return;
 8005a22:	bf00      	nop
  }
}
 8005a24:	37e8      	adds	r7, #232	; 0xe8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop

08005a2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	4613      	mov	r3, r2
 8005a78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	88fa      	ldrh	r2, [r7, #6]
 8005a8a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2222      	movs	r2, #34	; 0x22
 8005a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ab8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695a      	ldr	r2, [r3, #20]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 0201 	orr.w	r2, r2, #1
 8005ac8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0220 	orr.w	r2, r2, #32
 8005ad8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b095      	sub	sp, #84	; 0x54
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b10:	643a      	str	r2, [r7, #64]	; 0x40
 8005b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e5      	bne.n	8005af0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3314      	adds	r3, #20
 8005b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f023 0301 	bic.w	r3, r3, #1
 8005b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3314      	adds	r3, #20
 8005b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e5      	bne.n	8005b24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d119      	bne.n	8005b94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f023 0310 	bic.w	r3, r3, #16
 8005b76:	647b      	str	r3, [r7, #68]	; 0x44
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b80:	61ba      	str	r2, [r7, #24]
 8005b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	6979      	ldr	r1, [r7, #20]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e5      	bne.n	8005b60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ba2:	bf00      	nop
 8005ba4:	3754      	adds	r7, #84	; 0x54
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7ff ff39 	bl	8005a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b21      	cmp	r3, #33	; 0x21
 8005be8:	d13e      	bne.n	8005c68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf2:	d114      	bne.n	8005c1e <UART_Transmit_IT+0x48>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d110      	bne.n	8005c1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	1c9a      	adds	r2, r3, #2
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	621a      	str	r2, [r3, #32]
 8005c1c:	e008      	b.n	8005c30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	1c59      	adds	r1, r3, #1
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6211      	str	r1, [r2, #32]
 8005c28:	781a      	ldrb	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10f      	bne.n	8005c64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	e000      	b.n	8005c6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c68:	2302      	movs	r3, #2
  }
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff fec8 	bl	8005a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b08c      	sub	sp, #48	; 0x30
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b22      	cmp	r3, #34	; 0x22
 8005cb8:	f040 80ab 	bne.w	8005e12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc4:	d117      	bne.n	8005cf6 <UART_Receive_IT+0x50>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d113      	bne.n	8005cf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	1c9a      	adds	r2, r3, #2
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28
 8005cf4:	e026      	b.n	8005d44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d08:	d007      	beq.n	8005d1a <UART_Receive_IT+0x74>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10a      	bne.n	8005d28 <UART_Receive_IT+0x82>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	e008      	b.n	8005d3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	4619      	mov	r1, r3
 8005d52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d15a      	bne.n	8005e0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0220 	bic.w	r2, r2, #32
 8005d66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695a      	ldr	r2, [r3, #20]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0201 	bic.w	r2, r2, #1
 8005d86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d135      	bne.n	8005e04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	330c      	adds	r3, #12
 8005da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	613b      	str	r3, [r7, #16]
   return(result);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f023 0310 	bic.w	r3, r3, #16
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	330c      	adds	r3, #12
 8005dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dbe:	623a      	str	r2, [r7, #32]
 8005dc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	69f9      	ldr	r1, [r7, #28]
 8005dc4:	6a3a      	ldr	r2, [r7, #32]
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e5      	bne.n	8005d9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0310 	and.w	r3, r3, #16
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	d10a      	bne.n	8005df6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff fe29 	bl	8005a54 <HAL_UARTEx_RxEventCallback>
 8005e02:	e002      	b.n	8005e0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7fb f95b 	bl	80010c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	e002      	b.n	8005e14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	e000      	b.n	8005e14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e12:	2302      	movs	r3, #2
  }
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3730      	adds	r7, #48	; 0x30
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e20:	b0c0      	sub	sp, #256	; 0x100
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e38:	68d9      	ldr	r1, [r3, #12]
 8005e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	ea40 0301 	orr.w	r3, r0, r1
 8005e44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e74:	f021 010c 	bic.w	r1, r1, #12
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e82:	430b      	orrs	r3, r1
 8005e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e96:	6999      	ldr	r1, [r3, #24]
 8005e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	ea40 0301 	orr.w	r3, r0, r1
 8005ea2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4b8f      	ldr	r3, [pc, #572]	; (80060e8 <UART_SetConfig+0x2cc>)
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d005      	beq.n	8005ebc <UART_SetConfig+0xa0>
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	4b8d      	ldr	r3, [pc, #564]	; (80060ec <UART_SetConfig+0x2d0>)
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d104      	bne.n	8005ec6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ebc:	f7fd fd84 	bl	80039c8 <HAL_RCC_GetPCLK2Freq>
 8005ec0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ec4:	e003      	b.n	8005ece <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ec6:	f7fd fd6b 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8005eca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed8:	f040 810c 	bne.w	80060f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ee6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005eea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005eee:	4622      	mov	r2, r4
 8005ef0:	462b      	mov	r3, r5
 8005ef2:	1891      	adds	r1, r2, r2
 8005ef4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ef6:	415b      	adcs	r3, r3
 8005ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005efa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005efe:	4621      	mov	r1, r4
 8005f00:	eb12 0801 	adds.w	r8, r2, r1
 8005f04:	4629      	mov	r1, r5
 8005f06:	eb43 0901 	adc.w	r9, r3, r1
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f1e:	4690      	mov	r8, r2
 8005f20:	4699      	mov	r9, r3
 8005f22:	4623      	mov	r3, r4
 8005f24:	eb18 0303 	adds.w	r3, r8, r3
 8005f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	eb49 0303 	adc.w	r3, r9, r3
 8005f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	18db      	adds	r3, r3, r3
 8005f4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005f50:	4613      	mov	r3, r2
 8005f52:	eb42 0303 	adc.w	r3, r2, r3
 8005f56:	657b      	str	r3, [r7, #84]	; 0x54
 8005f58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f60:	f7fa ff02 	bl	8000d68 <__aeabi_uldivmod>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4b61      	ldr	r3, [pc, #388]	; (80060f0 <UART_SetConfig+0x2d4>)
 8005f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	011c      	lsls	r4, r3, #4
 8005f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f76:	2200      	movs	r2, #0
 8005f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f84:	4642      	mov	r2, r8
 8005f86:	464b      	mov	r3, r9
 8005f88:	1891      	adds	r1, r2, r2
 8005f8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f8c:	415b      	adcs	r3, r3
 8005f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f94:	4641      	mov	r1, r8
 8005f96:	eb12 0a01 	adds.w	sl, r2, r1
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	eb43 0b01 	adc.w	fp, r3, r1
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fb4:	4692      	mov	sl, r2
 8005fb6:	469b      	mov	fp, r3
 8005fb8:	4643      	mov	r3, r8
 8005fba:	eb1a 0303 	adds.w	r3, sl, r3
 8005fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	eb4b 0303 	adc.w	r3, fp, r3
 8005fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005fdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	18db      	adds	r3, r3, r3
 8005fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	eb42 0303 	adc.w	r3, r2, r3
 8005fec:	647b      	str	r3, [r7, #68]	; 0x44
 8005fee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ff2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ff6:	f7fa feb7 	bl	8000d68 <__aeabi_uldivmod>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4611      	mov	r1, r2
 8006000:	4b3b      	ldr	r3, [pc, #236]	; (80060f0 <UART_SetConfig+0x2d4>)
 8006002:	fba3 2301 	umull	r2, r3, r3, r1
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	2264      	movs	r2, #100	; 0x64
 800600a:	fb02 f303 	mul.w	r3, r2, r3
 800600e:	1acb      	subs	r3, r1, r3
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006016:	4b36      	ldr	r3, [pc, #216]	; (80060f0 <UART_SetConfig+0x2d4>)
 8006018:	fba3 2302 	umull	r2, r3, r3, r2
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006024:	441c      	add	r4, r3
 8006026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800602a:	2200      	movs	r2, #0
 800602c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006030:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006034:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006038:	4642      	mov	r2, r8
 800603a:	464b      	mov	r3, r9
 800603c:	1891      	adds	r1, r2, r2
 800603e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006040:	415b      	adcs	r3, r3
 8006042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006048:	4641      	mov	r1, r8
 800604a:	1851      	adds	r1, r2, r1
 800604c:	6339      	str	r1, [r7, #48]	; 0x30
 800604e:	4649      	mov	r1, r9
 8006050:	414b      	adcs	r3, r1
 8006052:	637b      	str	r3, [r7, #52]	; 0x34
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006060:	4659      	mov	r1, fp
 8006062:	00cb      	lsls	r3, r1, #3
 8006064:	4651      	mov	r1, sl
 8006066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800606a:	4651      	mov	r1, sl
 800606c:	00ca      	lsls	r2, r1, #3
 800606e:	4610      	mov	r0, r2
 8006070:	4619      	mov	r1, r3
 8006072:	4603      	mov	r3, r0
 8006074:	4642      	mov	r2, r8
 8006076:	189b      	adds	r3, r3, r2
 8006078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800607c:	464b      	mov	r3, r9
 800607e:	460a      	mov	r2, r1
 8006080:	eb42 0303 	adc.w	r3, r2, r3
 8006084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006094:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800609c:	460b      	mov	r3, r1
 800609e:	18db      	adds	r3, r3, r3
 80060a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060a2:	4613      	mov	r3, r2
 80060a4:	eb42 0303 	adc.w	r3, r2, r3
 80060a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060b2:	f7fa fe59 	bl	8000d68 <__aeabi_uldivmod>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <UART_SetConfig+0x2d4>)
 80060bc:	fba3 1302 	umull	r1, r3, r3, r2
 80060c0:	095b      	lsrs	r3, r3, #5
 80060c2:	2164      	movs	r1, #100	; 0x64
 80060c4:	fb01 f303 	mul.w	r3, r1, r3
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	3332      	adds	r3, #50	; 0x32
 80060ce:	4a08      	ldr	r2, [pc, #32]	; (80060f0 <UART_SetConfig+0x2d4>)
 80060d0:	fba2 2303 	umull	r2, r3, r2, r3
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	f003 0207 	and.w	r2, r3, #7
 80060da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4422      	add	r2, r4
 80060e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060e4:	e106      	b.n	80062f4 <UART_SetConfig+0x4d8>
 80060e6:	bf00      	nop
 80060e8:	40011000 	.word	0x40011000
 80060ec:	40011400 	.word	0x40011400
 80060f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f8:	2200      	movs	r2, #0
 80060fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006102:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006106:	4642      	mov	r2, r8
 8006108:	464b      	mov	r3, r9
 800610a:	1891      	adds	r1, r2, r2
 800610c:	6239      	str	r1, [r7, #32]
 800610e:	415b      	adcs	r3, r3
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
 8006112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006116:	4641      	mov	r1, r8
 8006118:	1854      	adds	r4, r2, r1
 800611a:	4649      	mov	r1, r9
 800611c:	eb43 0501 	adc.w	r5, r3, r1
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	00eb      	lsls	r3, r5, #3
 800612a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800612e:	00e2      	lsls	r2, r4, #3
 8006130:	4614      	mov	r4, r2
 8006132:	461d      	mov	r5, r3
 8006134:	4643      	mov	r3, r8
 8006136:	18e3      	adds	r3, r4, r3
 8006138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800613c:	464b      	mov	r3, r9
 800613e:	eb45 0303 	adc.w	r3, r5, r3
 8006142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006152:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006162:	4629      	mov	r1, r5
 8006164:	008b      	lsls	r3, r1, #2
 8006166:	4621      	mov	r1, r4
 8006168:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800616c:	4621      	mov	r1, r4
 800616e:	008a      	lsls	r2, r1, #2
 8006170:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006174:	f7fa fdf8 	bl	8000d68 <__aeabi_uldivmod>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4b60      	ldr	r3, [pc, #384]	; (8006300 <UART_SetConfig+0x4e4>)
 800617e:	fba3 2302 	umull	r2, r3, r3, r2
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	011c      	lsls	r4, r3, #4
 8006186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800618a:	2200      	movs	r2, #0
 800618c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006190:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006194:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	1891      	adds	r1, r2, r2
 800619e:	61b9      	str	r1, [r7, #24]
 80061a0:	415b      	adcs	r3, r3
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061a8:	4641      	mov	r1, r8
 80061aa:	1851      	adds	r1, r2, r1
 80061ac:	6139      	str	r1, [r7, #16]
 80061ae:	4649      	mov	r1, r9
 80061b0:	414b      	adcs	r3, r1
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061c0:	4659      	mov	r1, fp
 80061c2:	00cb      	lsls	r3, r1, #3
 80061c4:	4651      	mov	r1, sl
 80061c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ca:	4651      	mov	r1, sl
 80061cc:	00ca      	lsls	r2, r1, #3
 80061ce:	4610      	mov	r0, r2
 80061d0:	4619      	mov	r1, r3
 80061d2:	4603      	mov	r3, r0
 80061d4:	4642      	mov	r2, r8
 80061d6:	189b      	adds	r3, r3, r2
 80061d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061dc:	464b      	mov	r3, r9
 80061de:	460a      	mov	r2, r1
 80061e0:	eb42 0303 	adc.w	r3, r2, r3
 80061e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80061f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006200:	4649      	mov	r1, r9
 8006202:	008b      	lsls	r3, r1, #2
 8006204:	4641      	mov	r1, r8
 8006206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800620a:	4641      	mov	r1, r8
 800620c:	008a      	lsls	r2, r1, #2
 800620e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006212:	f7fa fda9 	bl	8000d68 <__aeabi_uldivmod>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	4611      	mov	r1, r2
 800621c:	4b38      	ldr	r3, [pc, #224]	; (8006300 <UART_SetConfig+0x4e4>)
 800621e:	fba3 2301 	umull	r2, r3, r3, r1
 8006222:	095b      	lsrs	r3, r3, #5
 8006224:	2264      	movs	r2, #100	; 0x64
 8006226:	fb02 f303 	mul.w	r3, r2, r3
 800622a:	1acb      	subs	r3, r1, r3
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	3332      	adds	r3, #50	; 0x32
 8006230:	4a33      	ldr	r2, [pc, #204]	; (8006300 <UART_SetConfig+0x4e4>)
 8006232:	fba2 2303 	umull	r2, r3, r2, r3
 8006236:	095b      	lsrs	r3, r3, #5
 8006238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800623c:	441c      	add	r4, r3
 800623e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006242:	2200      	movs	r2, #0
 8006244:	673b      	str	r3, [r7, #112]	; 0x70
 8006246:	677a      	str	r2, [r7, #116]	; 0x74
 8006248:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800624c:	4642      	mov	r2, r8
 800624e:	464b      	mov	r3, r9
 8006250:	1891      	adds	r1, r2, r2
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	415b      	adcs	r3, r3
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800625c:	4641      	mov	r1, r8
 800625e:	1851      	adds	r1, r2, r1
 8006260:	6039      	str	r1, [r7, #0]
 8006262:	4649      	mov	r1, r9
 8006264:	414b      	adcs	r3, r1
 8006266:	607b      	str	r3, [r7, #4]
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006274:	4659      	mov	r1, fp
 8006276:	00cb      	lsls	r3, r1, #3
 8006278:	4651      	mov	r1, sl
 800627a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800627e:	4651      	mov	r1, sl
 8006280:	00ca      	lsls	r2, r1, #3
 8006282:	4610      	mov	r0, r2
 8006284:	4619      	mov	r1, r3
 8006286:	4603      	mov	r3, r0
 8006288:	4642      	mov	r2, r8
 800628a:	189b      	adds	r3, r3, r2
 800628c:	66bb      	str	r3, [r7, #104]	; 0x68
 800628e:	464b      	mov	r3, r9
 8006290:	460a      	mov	r2, r1
 8006292:	eb42 0303 	adc.w	r3, r2, r3
 8006296:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	663b      	str	r3, [r7, #96]	; 0x60
 80062a2:	667a      	str	r2, [r7, #100]	; 0x64
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062b0:	4649      	mov	r1, r9
 80062b2:	008b      	lsls	r3, r1, #2
 80062b4:	4641      	mov	r1, r8
 80062b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062ba:	4641      	mov	r1, r8
 80062bc:	008a      	lsls	r2, r1, #2
 80062be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062c2:	f7fa fd51 	bl	8000d68 <__aeabi_uldivmod>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <UART_SetConfig+0x4e4>)
 80062cc:	fba3 1302 	umull	r1, r3, r3, r2
 80062d0:	095b      	lsrs	r3, r3, #5
 80062d2:	2164      	movs	r1, #100	; 0x64
 80062d4:	fb01 f303 	mul.w	r3, r1, r3
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	3332      	adds	r3, #50	; 0x32
 80062de:	4a08      	ldr	r2, [pc, #32]	; (8006300 <UART_SetConfig+0x4e4>)
 80062e0:	fba2 2303 	umull	r2, r3, r2, r3
 80062e4:	095b      	lsrs	r3, r3, #5
 80062e6:	f003 020f 	and.w	r2, r3, #15
 80062ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4422      	add	r2, r4
 80062f2:	609a      	str	r2, [r3, #8]
}
 80062f4:	bf00      	nop
 80062f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062fa:	46bd      	mov	sp, r7
 80062fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006300:	51eb851f 	.word	0x51eb851f

08006304 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f103 0208 	add.w	r2, r3, #8
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f04f 32ff 	mov.w	r2, #4294967295
 800631c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f103 0208 	add.w	r2, r3, #8
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f103 0208 	add.w	r2, r3, #8
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006374:	d103      	bne.n	800637e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	e00c      	b.n	8006398 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3308      	adds	r3, #8
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	e002      	b.n	800638c <vListInsert+0x2e>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	429a      	cmp	r2, r3
 8006396:	d2f6      	bcs.n	8006386 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	601a      	str	r2, [r3, #0]
}
 80063c4:	bf00      	nop
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6892      	ldr	r2, [r2, #8]
 80063e6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6852      	ldr	r2, [r2, #4]
 80063f0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d103      	bne.n	8006404 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	1e5a      	subs	r2, r3, #1
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800642e:	2301      	movs	r3, #1
 8006430:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <xQueueGenericReset+0x2e>
        __asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	60fb      	str	r3, [r7, #12]
    }
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d05d      	beq.n	8006514 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800645c:	2b00      	cmp	r3, #0
 800645e:	d059      	beq.n	8006514 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006468:	2100      	movs	r1, #0
 800646a:	fba3 2302 	umull	r2, r3, r3, r2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d000      	beq.n	8006474 <xQueueGenericReset+0x50>
 8006472:	2101      	movs	r1, #1
 8006474:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8006476:	2b00      	cmp	r3, #0
 8006478:	d14c      	bne.n	8006514 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800647a:	f001 fee5 	bl	8008248 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006486:	6939      	ldr	r1, [r7, #16]
 8006488:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800648a:	fb01 f303 	mul.w	r3, r1, r3
 800648e:	441a      	add	r2, r3
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	2200      	movs	r2, #0
 8006498:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064aa:	3b01      	subs	r3, #1
 80064ac:	6939      	ldr	r1, [r7, #16]
 80064ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064b0:	fb01 f303 	mul.w	r3, r1, r3
 80064b4:	441a      	add	r2, r3
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	22ff      	movs	r2, #255	; 0xff
 80064be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	22ff      	movs	r2, #255	; 0xff
 80064c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d114      	bne.n	80064fa <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d01a      	beq.n	800650e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	3310      	adds	r3, #16
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 ffc9 	bl	8007474 <xTaskRemoveFromEventList>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d012      	beq.n	800650e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80064e8:	4b15      	ldr	r3, [pc, #84]	; (8006540 <xQueueGenericReset+0x11c>)
 80064ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	e009      	b.n	800650e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	3310      	adds	r3, #16
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff ff00 	bl	8006304 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	3324      	adds	r3, #36	; 0x24
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff fefb 	bl	8006304 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800650e:	f001 fecb 	bl	80082a8 <vPortExitCritical>
 8006512:	e001      	b.n	8006518 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8006514:	2300      	movs	r3, #0
 8006516:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10a      	bne.n	8006534 <xQueueGenericReset+0x110>
        __asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	60bb      	str	r3, [r7, #8]
    }
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8006534:	697b      	ldr	r3, [r7, #20]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006544:	b580      	push	{r7, lr}
 8006546:	b08a      	sub	sp, #40	; 0x28
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	4613      	mov	r3, r2
 8006550:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8006552:	2300      	movs	r3, #0
 8006554:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d02e      	beq.n	80065ba <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800655c:	2100      	movs	r1, #0
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	fba3 2302 	umull	r2, r3, r3, r2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d000      	beq.n	800656c <xQueueGenericCreate+0x28>
 800656a:	2101      	movs	r1, #1
 800656c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800656e:	2b00      	cmp	r3, #0
 8006570:	d123      	bne.n	80065ba <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800657a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800657e:	d81c      	bhi.n	80065ba <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	fb02 f303 	mul.w	r3, r2, r3
 8006588:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	3350      	adds	r3, #80	; 0x50
 800658e:	4618      	mov	r0, r3
 8006590:	f001 ff44 	bl	800841c <pvPortMalloc>
 8006594:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d01c      	beq.n	80065d6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	3350      	adds	r3, #80	; 0x50
 80065a4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065a6:	79fa      	ldrb	r2, [r7, #7]
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	4613      	mov	r3, r2
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	68b9      	ldr	r1, [r7, #8]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f814 	bl	80065e0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80065b8:	e00d      	b.n	80065d6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <xQueueGenericCreate+0x92>
        __asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	613b      	str	r3, [r7, #16]
    }
 80065d2:	bf00      	nop
 80065d4:	e7fe      	b.n	80065d4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80065d6:	69fb      	ldr	r3, [r7, #28]
    }
 80065d8:	4618      	mov	r0, r3
 80065da:	3720      	adds	r7, #32
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d103      	bne.n	80065fc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	e002      	b.n	8006602 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800660e:	2101      	movs	r1, #1
 8006610:	69b8      	ldr	r0, [r7, #24]
 8006612:	f7ff ff07 	bl	8006424 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	78fa      	ldrb	r2, [r7, #3]
 800661a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800661e:	78fb      	ldrb	r3, [r7, #3]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	68f9      	ldr	r1, [r7, #12]
 8006624:	2073      	movs	r0, #115	; 0x73
 8006626:	f002 fe41 	bl	80092ac <SEGGER_SYSVIEW_RecordU32x3>
}
 800662a:	bf00      	nop
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006634:	b590      	push	{r4, r7, lr}
 8006636:	b08f      	sub	sp, #60	; 0x3c
 8006638:	af02      	add	r7, sp, #8
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006640:	2300      	movs	r3, #0
 8006642:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <xQueueReceive+0x30>
        __asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	623b      	str	r3, [r7, #32]
    }
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d103      	bne.n	8006672 <xQueueReceive+0x3e>
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <xQueueReceive+0x42>
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <xQueueReceive+0x44>
 8006676:	2300      	movs	r3, #0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <xQueueReceive+0x5e>
        __asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	61fb      	str	r3, [r7, #28]
    }
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006692:	f001 f903 	bl	800789c <xTaskGetSchedulerState>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d102      	bne.n	80066a2 <xQueueReceive+0x6e>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <xQueueReceive+0x72>
 80066a2:	2301      	movs	r3, #1
 80066a4:	e000      	b.n	80066a8 <xQueueReceive+0x74>
 80066a6:	2300      	movs	r3, #0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10a      	bne.n	80066c2 <xQueueReceive+0x8e>
        __asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	61bb      	str	r3, [r7, #24]
    }
 80066be:	bf00      	nop
 80066c0:	e7fe      	b.n	80066c0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80066c2:	f001 fdc1 	bl	8008248 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d02f      	beq.n	8006732 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066d6:	f000 f8bd 	bl	8006854 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	4618      	mov	r0, r3
 80066de:	f003 faed 	bl	8009cbc <SEGGER_SYSVIEW_ShrinkId>
 80066e2:	4604      	mov	r4, r0
 80066e4:	2000      	movs	r0, #0
 80066e6:	f003 fae9 	bl	8009cbc <SEGGER_SYSVIEW_ShrinkId>
 80066ea:	4602      	mov	r2, r0
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2101      	movs	r1, #1
 80066f0:	9100      	str	r1, [sp, #0]
 80066f2:	4621      	mov	r1, r4
 80066f4:	205c      	movs	r0, #92	; 0x5c
 80066f6:	f002 fe4f 	bl	8009398 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	1e5a      	subs	r2, r3, #1
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00f      	beq.n	800672a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	3310      	adds	r3, #16
 800670e:	4618      	mov	r0, r3
 8006710:	f000 feb0 	bl	8007474 <xTaskRemoveFromEventList>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d007      	beq.n	800672a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800671a:	4b4d      	ldr	r3, [pc, #308]	; (8006850 <xQueueReceive+0x21c>)
 800671c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800672a:	f001 fdbd 	bl	80082a8 <vPortExitCritical>
                return pdPASS;
 800672e:	2301      	movs	r3, #1
 8006730:	e08a      	b.n	8006848 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d113      	bne.n	8006760 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006738:	f001 fdb6 	bl	80082a8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	4618      	mov	r0, r3
 8006740:	f003 fabc 	bl	8009cbc <SEGGER_SYSVIEW_ShrinkId>
 8006744:	4604      	mov	r4, r0
 8006746:	2000      	movs	r0, #0
 8006748:	f003 fab8 	bl	8009cbc <SEGGER_SYSVIEW_ShrinkId>
 800674c:	4602      	mov	r2, r0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2101      	movs	r1, #1
 8006752:	9100      	str	r1, [sp, #0]
 8006754:	4621      	mov	r1, r4
 8006756:	205c      	movs	r0, #92	; 0x5c
 8006758:	f002 fe1e 	bl	8009398 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800675c:	2300      	movs	r3, #0
 800675e:	e073      	b.n	8006848 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006766:	f107 0310 	add.w	r3, r7, #16
 800676a:	4618      	mov	r0, r3
 800676c:	f000 ff5a 	bl	8007624 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006770:	2301      	movs	r3, #1
 8006772:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006774:	f001 fd98 	bl	80082a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006778:	f000 fb6e 	bl	8006e58 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800677c:	f001 fd64 	bl	8008248 <vPortEnterCritical>
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006786:	b25b      	sxtb	r3, r3
 8006788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678c:	d103      	bne.n	8006796 <xQueueReceive+0x162>
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800679c:	b25b      	sxtb	r3, r3
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a2:	d103      	bne.n	80067ac <xQueueReceive+0x178>
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067ac:	f001 fd7c 	bl	80082a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067b0:	1d3a      	adds	r2, r7, #4
 80067b2:	f107 0310 	add.w	r3, r7, #16
 80067b6:	4611      	mov	r1, r2
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 ff49 	bl	8007650 <xTaskCheckForTimeOut>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d124      	bne.n	800680e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067c6:	f000 f8bd 	bl	8006944 <prvIsQueueEmpty>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d018      	beq.n	8006802 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	3324      	adds	r3, #36	; 0x24
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	4611      	mov	r1, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fddf 	bl	800739c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80067de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e0:	f000 f85e 	bl	80068a0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80067e4:	f000 fb46 	bl	8006e74 <xTaskResumeAll>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f47f af69 	bne.w	80066c2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80067f0:	4b17      	ldr	r3, [pc, #92]	; (8006850 <xQueueReceive+0x21c>)
 80067f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	e75f      	b.n	80066c2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006804:	f000 f84c 	bl	80068a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006808:	f000 fb34 	bl	8006e74 <xTaskResumeAll>
 800680c:	e759      	b.n	80066c2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800680e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006810:	f000 f846 	bl	80068a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006814:	f000 fb2e 	bl	8006e74 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800681a:	f000 f893 	bl	8006944 <prvIsQueueEmpty>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	f43f af4e 	beq.w	80066c2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	4618      	mov	r0, r3
 800682a:	f003 fa47 	bl	8009cbc <SEGGER_SYSVIEW_ShrinkId>
 800682e:	4604      	mov	r4, r0
 8006830:	2000      	movs	r0, #0
 8006832:	f003 fa43 	bl	8009cbc <SEGGER_SYSVIEW_ShrinkId>
 8006836:	4602      	mov	r2, r0
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2101      	movs	r1, #1
 800683c:	9100      	str	r1, [sp, #0]
 800683e:	4621      	mov	r1, r4
 8006840:	205c      	movs	r0, #92	; 0x5c
 8006842:	f002 fda9 	bl	8009398 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8006846:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006848:	4618      	mov	r0, r3
 800684a:	3734      	adds	r7, #52	; 0x34
 800684c:	46bd      	mov	sp, r7
 800684e:	bd90      	pop	{r4, r7, pc}
 8006850:	e000ed04 	.word	0xe000ed04

08006854 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d018      	beq.n	8006898 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	441a      	add	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68da      	ldr	r2, [r3, #12]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	429a      	cmp	r2, r3
 800687e:	d303      	bcc.n	8006888 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68d9      	ldr	r1, [r3, #12]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	461a      	mov	r2, r3
 8006892:	6838      	ldr	r0, [r7, #0]
 8006894:	f004 f955 	bl	800ab42 <memcpy>
    }
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80068a8:	f001 fcce 	bl	8008248 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068b2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80068b4:	e011      	b.n	80068da <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d012      	beq.n	80068e4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3324      	adds	r3, #36	; 0x24
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fdd6 	bl	8007474 <xTaskRemoveFromEventList>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80068ce:	f000 ff25 	bl	800771c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80068da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	dce9      	bgt.n	80068b6 <prvUnlockQueue+0x16>
 80068e2:	e000      	b.n	80068e6 <prvUnlockQueue+0x46>
                    break;
 80068e4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	22ff      	movs	r2, #255	; 0xff
 80068ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80068ee:	f001 fcdb 	bl	80082a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80068f2:	f001 fca9 	bl	8008248 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068fc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80068fe:	e011      	b.n	8006924 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d012      	beq.n	800692e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3310      	adds	r3, #16
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fdb1 	bl	8007474 <xTaskRemoveFromEventList>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006918:	f000 ff00 	bl	800771c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800691c:	7bbb      	ldrb	r3, [r7, #14]
 800691e:	3b01      	subs	r3, #1
 8006920:	b2db      	uxtb	r3, r3
 8006922:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006928:	2b00      	cmp	r3, #0
 800692a:	dce9      	bgt.n	8006900 <prvUnlockQueue+0x60>
 800692c:	e000      	b.n	8006930 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800692e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	22ff      	movs	r2, #255	; 0xff
 8006934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006938:	f001 fcb6 	bl	80082a8 <vPortExitCritical>
}
 800693c:	bf00      	nop
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800694c:	f001 fc7c 	bl	8008248 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	2b00      	cmp	r3, #0
 8006956:	d102      	bne.n	800695e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006958:	2301      	movs	r3, #1
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	e001      	b.n	8006962 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006962:	f001 fca1 	bl	80082a8 <vPortExitCritical>

    return xReturn;
 8006966:	68fb      	ldr	r3, [r7, #12]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	60fb      	str	r3, [r7, #12]
    }
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d024      	beq.n	80069ea <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069a0:	2300      	movs	r3, #0
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	e01e      	b.n	80069e4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80069a6:	4a1c      	ldr	r2, [pc, #112]	; (8006a18 <vQueueAddToRegistry+0xa8>)
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	4413      	add	r3, r2
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d105      	bne.n	80069c2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <vQueueAddToRegistry+0xa8>)
 80069bc:	4413      	add	r3, r2
 80069be:	613b      	str	r3, [r7, #16]
                    break;
 80069c0:	e013      	b.n	80069ea <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10a      	bne.n	80069de <vQueueAddToRegistry+0x6e>
 80069c8:	4a13      	ldr	r2, [pc, #76]	; (8006a18 <vQueueAddToRegistry+0xa8>)
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	4a0f      	ldr	r2, [pc, #60]	; (8006a18 <vQueueAddToRegistry+0xa8>)
 80069da:	4413      	add	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	3301      	adds	r3, #1
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2b07      	cmp	r3, #7
 80069e8:	d9dd      	bls.n	80069a6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00f      	beq.n	8006a10 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f003 f95c 	bl	8009cbc <SEGGER_SYSVIEW_ShrinkId>
 8006a04:	4601      	mov	r1, r0
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	2071      	movs	r0, #113	; 0x71
 8006a0c:	f002 fbf4 	bl	80091f8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8006a10:	bf00      	nop
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20000784 	.word	0x20000784

08006a1c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006a2c:	f001 fc0c 	bl	8008248 <vPortEnterCritical>
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a36:	b25b      	sxtb	r3, r3
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3c:	d103      	bne.n	8006a46 <vQueueWaitForMessageRestricted+0x2a>
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a4c:	b25b      	sxtb	r3, r3
 8006a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a52:	d103      	bne.n	8006a5c <vQueueWaitForMessageRestricted+0x40>
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a5c:	f001 fc24 	bl	80082a8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d106      	bne.n	8006a76 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	3324      	adds	r3, #36	; 0x24
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fcb7 	bl	80073e4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006a76:	6978      	ldr	r0, [r7, #20]
 8006a78:	f7ff ff12 	bl	80068a0 <prvUnlockQueue>
    }
 8006a7c:	bf00      	nop
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08c      	sub	sp, #48	; 0x30
 8006a88:	af04      	add	r7, sp, #16
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	603b      	str	r3, [r7, #0]
 8006a90:	4613      	mov	r3, r2
 8006a92:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a94:	88fb      	ldrh	r3, [r7, #6]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f001 fcbf 	bl	800841c <pvPortMalloc>
 8006a9e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d013      	beq.n	8006ace <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006aa6:	2058      	movs	r0, #88	; 0x58
 8006aa8:	f001 fcb8 	bl	800841c <pvPortMalloc>
 8006aac:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d008      	beq.n	8006ac6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8006ab4:	2258      	movs	r2, #88	; 0x58
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	69f8      	ldr	r0, [r7, #28]
 8006aba:	f003 ffd4 	bl	800aa66 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ac4:	e005      	b.n	8006ad2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8006ac6:	6978      	ldr	r0, [r7, #20]
 8006ac8:	f001 fd62 	bl	8008590 <vPortFree>
 8006acc:	e001      	b.n	8006ad2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d013      	beq.n	8006b00 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ad8:	88fa      	ldrh	r2, [r7, #6]
 8006ada:	2300      	movs	r3, #0
 8006adc:	9303      	str	r3, [sp, #12]
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	9302      	str	r3, [sp, #8]
 8006ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68b9      	ldr	r1, [r7, #8]
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 f80e 	bl	8006b10 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006af4:	69f8      	ldr	r0, [r7, #28]
 8006af6:	f000 f899 	bl	8006c2c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006afa:	2301      	movs	r3, #1
 8006afc:	61bb      	str	r3, [r7, #24]
 8006afe:	e002      	b.n	8006b06 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b00:	f04f 33ff 	mov.w	r3, #4294967295
 8006b04:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006b06:	69bb      	ldr	r3, [r7, #24]
    }
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3720      	adds	r7, #32
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	461a      	mov	r2, r3
 8006b28:	21a5      	movs	r1, #165	; 0xa5
 8006b2a:	f003 ff9c 	bl	800aa66 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	f023 0307 	bic.w	r3, r3, #7
 8006b46:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	f003 0307 	and.w	r3, r3, #7
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <prvInitialiseNewTask+0x58>
        __asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	617b      	str	r3, [r7, #20]
    }
 8006b64:	bf00      	nop
 8006b66:	e7fe      	b.n	8006b66 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d01e      	beq.n	8006bac <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	e012      	b.n	8006b9a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	4413      	add	r3, r2
 8006b7a:	7819      	ldrb	r1, [r3, #0]
 8006b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	3334      	adds	r3, #52	; 0x34
 8006b84:	460a      	mov	r2, r1
 8006b86:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d006      	beq.n	8006ba2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	3301      	adds	r3, #1
 8006b98:	61fb      	str	r3, [r7, #28]
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	2b09      	cmp	r3, #9
 8006b9e:	d9e9      	bls.n	8006b74 <prvInitialiseNewTask+0x64>
 8006ba0:	e000      	b.n	8006ba4 <prvInitialiseNewTask+0x94>
            {
                break;
 8006ba2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d90a      	bls.n	8006bc8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	613b      	str	r3, [r7, #16]
    }
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d901      	bls.n	8006bd2 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bce:	2304      	movs	r3, #4
 8006bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bd6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bdc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	3304      	adds	r3, #4
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff fbae 	bl	8006344 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	3318      	adds	r3, #24
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff fba9 	bl	8006344 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bf6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	f1c3 0205 	rsb	r2, r3, #5
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c06:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	68f9      	ldr	r1, [r7, #12]
 8006c0c:	69b8      	ldr	r0, [r7, #24]
 8006c0e:	f001 f9ef 	bl	8007ff0 <pxPortInitialiseStack>
 8006c12:	4602      	mov	r2, r0
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c22:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006c24:	bf00      	nop
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006c2c:	b5b0      	push	{r4, r5, r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006c34:	f001 fb08 	bl	8008248 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006c38:	4b4f      	ldr	r3, [pc, #316]	; (8006d78 <prvAddNewTaskToReadyList+0x14c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	4a4e      	ldr	r2, [pc, #312]	; (8006d78 <prvAddNewTaskToReadyList+0x14c>)
 8006c40:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006c42:	4b4e      	ldr	r3, [pc, #312]	; (8006d7c <prvAddNewTaskToReadyList+0x150>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d109      	bne.n	8006c5e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006c4a:	4a4c      	ldr	r2, [pc, #304]	; (8006d7c <prvAddNewTaskToReadyList+0x150>)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c50:	4b49      	ldr	r3, [pc, #292]	; (8006d78 <prvAddNewTaskToReadyList+0x14c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d110      	bne.n	8006c7a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006c58:	f000 fd86 	bl	8007768 <prvInitialiseTaskLists>
 8006c5c:	e00d      	b.n	8006c7a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006c5e:	4b48      	ldr	r3, [pc, #288]	; (8006d80 <prvAddNewTaskToReadyList+0x154>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d109      	bne.n	8006c7a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c66:	4b45      	ldr	r3, [pc, #276]	; (8006d7c <prvAddNewTaskToReadyList+0x150>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d802      	bhi.n	8006c7a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006c74:	4a41      	ldr	r2, [pc, #260]	; (8006d7c <prvAddNewTaskToReadyList+0x150>)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006c7a:	4b42      	ldr	r3, [pc, #264]	; (8006d84 <prvAddNewTaskToReadyList+0x158>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	4a40      	ldr	r2, [pc, #256]	; (8006d84 <prvAddNewTaskToReadyList+0x158>)
 8006c82:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c84:	4b3f      	ldr	r3, [pc, #252]	; (8006d84 <prvAddNewTaskToReadyList+0x158>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d016      	beq.n	8006cc0 <prvAddNewTaskToReadyList+0x94>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f002 ff4b 	bl	8009b30 <SEGGER_SYSVIEW_OnTaskCreate>
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006caa:	461d      	mov	r5, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461c      	mov	r4, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	1ae3      	subs	r3, r4, r3
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	462b      	mov	r3, r5
 8006cbc:	f001 fd7a 	bl	80087b4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f002 ffb8 	bl	8009c38 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	2201      	movs	r2, #1
 8006cce:	409a      	lsls	r2, r3
 8006cd0:	4b2d      	ldr	r3, [pc, #180]	; (8006d88 <prvAddNewTaskToReadyList+0x15c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	4a2c      	ldr	r2, [pc, #176]	; (8006d88 <prvAddNewTaskToReadyList+0x15c>)
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cde:	492b      	ldr	r1, [pc, #172]	; (8006d8c <prvAddNewTaskToReadyList+0x160>)
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	3304      	adds	r3, #4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	609a      	str	r2, [r3, #8]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60da      	str	r2, [r3, #12]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	3204      	adds	r2, #4
 8006d06:	605a      	str	r2, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	1d1a      	adds	r2, r3, #4
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	609a      	str	r2, [r3, #8]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4a1b      	ldr	r2, [pc, #108]	; (8006d8c <prvAddNewTaskToReadyList+0x160>)
 8006d1e:	441a      	add	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	615a      	str	r2, [r3, #20]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d28:	4918      	ldr	r1, [pc, #96]	; (8006d8c <prvAddNewTaskToReadyList+0x160>)
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	1c59      	adds	r1, r3, #1
 8006d38:	4814      	ldr	r0, [pc, #80]	; (8006d8c <prvAddNewTaskToReadyList+0x160>)
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4403      	add	r3, r0
 8006d44:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006d46:	f001 faaf 	bl	80082a8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <prvAddNewTaskToReadyList+0x154>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00e      	beq.n	8006d70 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d52:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <prvAddNewTaskToReadyList+0x150>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d207      	bcs.n	8006d70 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006d60:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <prvAddNewTaskToReadyList+0x164>)
 8006d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006d70:	bf00      	nop
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bdb0      	pop	{r4, r5, r7, pc}
 8006d78:	2000089c 	.word	0x2000089c
 8006d7c:	200007c4 	.word	0x200007c4
 8006d80:	200008a8 	.word	0x200008a8
 8006d84:	200008b8 	.word	0x200008b8
 8006d88:	200008a4 	.word	0x200008a4
 8006d8c:	200007c8 	.word	0x200007c8
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8006d9a:	4b27      	ldr	r3, [pc, #156]	; (8006e38 <vTaskStartScheduler+0xa4>)
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	2300      	movs	r3, #0
 8006da4:	2282      	movs	r2, #130	; 0x82
 8006da6:	4925      	ldr	r1, [pc, #148]	; (8006e3c <vTaskStartScheduler+0xa8>)
 8006da8:	4825      	ldr	r0, [pc, #148]	; (8006e40 <vTaskStartScheduler+0xac>)
 8006daa:	f7ff fe6b 	bl	8006a84 <xTaskCreate>
 8006dae:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d102      	bne.n	8006dbc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8006db6:	f000 fe97 	bl	8007ae8 <xTimerCreateTimerTask>
 8006dba:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d124      	bne.n	8006e0c <vTaskStartScheduler+0x78>
        __asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	60bb      	str	r3, [r7, #8]
    }
 8006dd4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8006dd6:	4b1b      	ldr	r3, [pc, #108]	; (8006e44 <vTaskStartScheduler+0xb0>)
 8006dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ddc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006dde:	4b1a      	ldr	r3, [pc, #104]	; (8006e48 <vTaskStartScheduler+0xb4>)
 8006de0:	2201      	movs	r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006de4:	4b19      	ldr	r3, [pc, #100]	; (8006e4c <vTaskStartScheduler+0xb8>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8006dea:	4b19      	ldr	r3, [pc, #100]	; (8006e50 <vTaskStartScheduler+0xbc>)
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	4b12      	ldr	r3, [pc, #72]	; (8006e38 <vTaskStartScheduler+0xa4>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d102      	bne.n	8006dfc <vTaskStartScheduler+0x68>
 8006df6:	f002 fe7f 	bl	8009af8 <SEGGER_SYSVIEW_OnIdle>
 8006dfa:	e004      	b.n	8006e06 <vTaskStartScheduler+0x72>
 8006dfc:	4b14      	ldr	r3, [pc, #80]	; (8006e50 <vTaskStartScheduler+0xbc>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f002 fed7 	bl	8009bb4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8006e06:	f001 f97d 	bl	8008104 <xPortStartScheduler>
 8006e0a:	e00e      	b.n	8006e2a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e12:	d10a      	bne.n	8006e2a <vTaskStartScheduler+0x96>
        __asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	607b      	str	r3, [r7, #4]
    }
 8006e26:	bf00      	nop
 8006e28:	e7fe      	b.n	8006e28 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006e2a:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <vTaskStartScheduler+0xc0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
}
 8006e2e:	bf00      	nop
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	200008c0 	.word	0x200008c0
 8006e3c:	0800ca38 	.word	0x0800ca38
 8006e40:	08007735 	.word	0x08007735
 8006e44:	200008bc 	.word	0x200008bc
 8006e48:	200008a8 	.word	0x200008a8
 8006e4c:	200008a0 	.word	0x200008a0
 8006e50:	200007c4 	.word	0x200007c4
 8006e54:	2000000c 	.word	0x2000000c

08006e58 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006e5c:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <vTaskSuspendAll+0x18>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3301      	adds	r3, #1
 8006e62:	4a03      	ldr	r2, [pc, #12]	; (8006e70 <vTaskSuspendAll+0x18>)
 8006e64:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006e66:	bf00      	nop
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	200008c4 	.word	0x200008c4

08006e74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006e82:	4b73      	ldr	r3, [pc, #460]	; (8007050 <xTaskResumeAll+0x1dc>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10a      	bne.n	8006ea0 <xTaskResumeAll+0x2c>
        __asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	607b      	str	r3, [r7, #4]
    }
 8006e9c:	bf00      	nop
 8006e9e:	e7fe      	b.n	8006e9e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006ea0:	f001 f9d2 	bl	8008248 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006ea4:	4b6a      	ldr	r3, [pc, #424]	; (8007050 <xTaskResumeAll+0x1dc>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	4a69      	ldr	r2, [pc, #420]	; (8007050 <xTaskResumeAll+0x1dc>)
 8006eac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eae:	4b68      	ldr	r3, [pc, #416]	; (8007050 <xTaskResumeAll+0x1dc>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f040 80c4 	bne.w	8007040 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eb8:	4b66      	ldr	r3, [pc, #408]	; (8007054 <xTaskResumeAll+0x1e0>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 80bf 	beq.w	8007040 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ec2:	e08e      	b.n	8006fe2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec4:	4b64      	ldr	r3, [pc, #400]	; (8007058 <xTaskResumeAll+0x1e4>)
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed0:	613b      	str	r3, [r7, #16]
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	6a12      	ldr	r2, [r2, #32]
 8006eda:	609a      	str	r2, [r3, #8]
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	69d2      	ldr	r2, [r2, #28]
 8006ee4:	605a      	str	r2, [r3, #4]
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	3318      	adds	r3, #24
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d103      	bne.n	8006efa <xTaskResumeAll+0x86>
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	6a1a      	ldr	r2, [r3, #32]
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	605a      	str	r2, [r3, #4]
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	2200      	movs	r2, #0
 8006efe:	629a      	str	r2, [r3, #40]	; 0x28
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	1e5a      	subs	r2, r3, #1
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	69fa      	ldr	r2, [r7, #28]
 8006f16:	68d2      	ldr	r2, [r2, #12]
 8006f18:	609a      	str	r2, [r3, #8]
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	6892      	ldr	r2, [r2, #8]
 8006f22:	605a      	str	r2, [r3, #4]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d103      	bne.n	8006f38 <xTaskResumeAll+0xc4>
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	605a      	str	r2, [r3, #4]
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	615a      	str	r2, [r3, #20]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	1e5a      	subs	r2, r3, #1
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f002 fe74 	bl	8009c38 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f54:	2201      	movs	r2, #1
 8006f56:	409a      	lsls	r2, r3
 8006f58:	4b40      	ldr	r3, [pc, #256]	; (800705c <xTaskResumeAll+0x1e8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	4a3f      	ldr	r2, [pc, #252]	; (800705c <xTaskResumeAll+0x1e8>)
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f66:	493e      	ldr	r1, [pc, #248]	; (8007060 <xTaskResumeAll+0x1ec>)
 8006f68:	4613      	mov	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	440b      	add	r3, r1
 8006f72:	3304      	adds	r3, #4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60bb      	str	r3, [r7, #8]
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	609a      	str	r2, [r3, #8]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	60da      	str	r2, [r3, #12]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	69fa      	ldr	r2, [r7, #28]
 8006f8c:	3204      	adds	r2, #4
 8006f8e:	605a      	str	r2, [r3, #4]
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	1d1a      	adds	r2, r3, #4
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	609a      	str	r2, [r3, #8]
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4a2e      	ldr	r2, [pc, #184]	; (8007060 <xTaskResumeAll+0x1ec>)
 8006fa6:	441a      	add	r2, r3
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	615a      	str	r2, [r3, #20]
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb0:	492b      	ldr	r1, [pc, #172]	; (8007060 <xTaskResumeAll+0x1ec>)
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	440b      	add	r3, r1
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	1c59      	adds	r1, r3, #1
 8006fc0:	4827      	ldr	r0, [pc, #156]	; (8007060 <xTaskResumeAll+0x1ec>)
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4403      	add	r3, r0
 8006fcc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd2:	4b24      	ldr	r3, [pc, #144]	; (8007064 <xTaskResumeAll+0x1f0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d302      	bcc.n	8006fe2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8006fdc:	4b22      	ldr	r3, [pc, #136]	; (8007068 <xTaskResumeAll+0x1f4>)
 8006fde:	2201      	movs	r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fe2:	4b1d      	ldr	r3, [pc, #116]	; (8007058 <xTaskResumeAll+0x1e4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f47f af6c 	bne.w	8006ec4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006ff2:	f000 fc37 	bl	8007864 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ff6:	4b1d      	ldr	r3, [pc, #116]	; (800706c <xTaskResumeAll+0x1f8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d010      	beq.n	8007024 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007002:	f000 f847 	bl	8007094 <xTaskIncrementTick>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 800700c:	4b16      	ldr	r3, [pc, #88]	; (8007068 <xTaskResumeAll+0x1f4>)
 800700e:	2201      	movs	r2, #1
 8007010:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	3b01      	subs	r3, #1
 8007016:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1f1      	bne.n	8007002 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800701e:	4b13      	ldr	r3, [pc, #76]	; (800706c <xTaskResumeAll+0x1f8>)
 8007020:	2200      	movs	r2, #0
 8007022:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007024:	4b10      	ldr	r3, [pc, #64]	; (8007068 <xTaskResumeAll+0x1f4>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d009      	beq.n	8007040 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800702c:	2301      	movs	r3, #1
 800702e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007030:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <xTaskResumeAll+0x1fc>)
 8007032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007040:	f001 f932 	bl	80082a8 <vPortExitCritical>

    return xAlreadyYielded;
 8007044:	69bb      	ldr	r3, [r7, #24]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3720      	adds	r7, #32
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	200008c4 	.word	0x200008c4
 8007054:	2000089c 	.word	0x2000089c
 8007058:	2000085c 	.word	0x2000085c
 800705c:	200008a4 	.word	0x200008a4
 8007060:	200007c8 	.word	0x200007c8
 8007064:	200007c4 	.word	0x200007c4
 8007068:	200008b0 	.word	0x200008b0
 800706c:	200008ac 	.word	0x200008ac
 8007070:	e000ed04 	.word	0xe000ed04

08007074 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800707a:	4b05      	ldr	r3, [pc, #20]	; (8007090 <xTaskGetTickCount+0x1c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007080:	687b      	ldr	r3, [r7, #4]
}
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	200008a0 	.word	0x200008a0

08007094 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b08a      	sub	sp, #40	; 0x28
 8007098:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800709a:	2300      	movs	r3, #0
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800709e:	4b7f      	ldr	r3, [pc, #508]	; (800729c <xTaskIncrementTick+0x208>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f040 80f0 	bne.w	8007288 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070a8:	4b7d      	ldr	r3, [pc, #500]	; (80072a0 <xTaskIncrementTick+0x20c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3301      	adds	r3, #1
 80070ae:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80070b0:	4a7b      	ldr	r2, [pc, #492]	; (80072a0 <xTaskIncrementTick+0x20c>)
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d120      	bne.n	80070fe <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80070bc:	4b79      	ldr	r3, [pc, #484]	; (80072a4 <xTaskIncrementTick+0x210>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <xTaskIncrementTick+0x48>
        __asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	607b      	str	r3, [r7, #4]
    }
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <xTaskIncrementTick+0x46>
 80070dc:	4b71      	ldr	r3, [pc, #452]	; (80072a4 <xTaskIncrementTick+0x210>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	61fb      	str	r3, [r7, #28]
 80070e2:	4b71      	ldr	r3, [pc, #452]	; (80072a8 <xTaskIncrementTick+0x214>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a6f      	ldr	r2, [pc, #444]	; (80072a4 <xTaskIncrementTick+0x210>)
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	4a6f      	ldr	r2, [pc, #444]	; (80072a8 <xTaskIncrementTick+0x214>)
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	4b6e      	ldr	r3, [pc, #440]	; (80072ac <xTaskIncrementTick+0x218>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3301      	adds	r3, #1
 80070f6:	4a6d      	ldr	r2, [pc, #436]	; (80072ac <xTaskIncrementTick+0x218>)
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	f000 fbb3 	bl	8007864 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80070fe:	4b6c      	ldr	r3, [pc, #432]	; (80072b0 <xTaskIncrementTick+0x21c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6a3a      	ldr	r2, [r7, #32]
 8007104:	429a      	cmp	r2, r3
 8007106:	f0c0 80aa 	bcc.w	800725e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800710a:	4b66      	ldr	r3, [pc, #408]	; (80072a4 <xTaskIncrementTick+0x210>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d104      	bne.n	800711e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007114:	4b66      	ldr	r3, [pc, #408]	; (80072b0 <xTaskIncrementTick+0x21c>)
 8007116:	f04f 32ff 	mov.w	r2, #4294967295
 800711a:	601a      	str	r2, [r3, #0]
                    break;
 800711c:	e09f      	b.n	800725e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800711e:	4b61      	ldr	r3, [pc, #388]	; (80072a4 <xTaskIncrementTick+0x210>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800712e:	6a3a      	ldr	r2, [r7, #32]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	429a      	cmp	r2, r3
 8007134:	d203      	bcs.n	800713e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007136:	4a5e      	ldr	r2, [pc, #376]	; (80072b0 <xTaskIncrementTick+0x21c>)
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800713c:	e08f      	b.n	800725e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	613b      	str	r3, [r7, #16]
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	68d2      	ldr	r2, [r2, #12]
 800714c:	609a      	str	r2, [r3, #8]
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	6892      	ldr	r2, [r2, #8]
 8007156:	605a      	str	r2, [r3, #4]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	3304      	adds	r3, #4
 8007160:	429a      	cmp	r2, r3
 8007162:	d103      	bne.n	800716c <xTaskIncrementTick+0xd8>
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	605a      	str	r2, [r3, #4]
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	2200      	movs	r2, #0
 8007170:	615a      	str	r2, [r3, #20]
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	1e5a      	subs	r2, r3, #1
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	2b00      	cmp	r3, #0
 8007182:	d01e      	beq.n	80071c2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	6a12      	ldr	r2, [r2, #32]
 8007192:	609a      	str	r2, [r3, #8]
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	69d2      	ldr	r2, [r2, #28]
 800719c:	605a      	str	r2, [r3, #4]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	3318      	adds	r3, #24
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d103      	bne.n	80071b2 <xTaskIncrementTick+0x11e>
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	6a1a      	ldr	r2, [r3, #32]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	605a      	str	r2, [r3, #4]
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	2200      	movs	r2, #0
 80071b6:	629a      	str	r2, [r3, #40]	; 0x28
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	1e5a      	subs	r2, r3, #1
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f002 fd37 	bl	8009c38 <SEGGER_SYSVIEW_OnTaskStartReady>
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	2201      	movs	r2, #1
 80071d0:	409a      	lsls	r2, r3
 80071d2:	4b38      	ldr	r3, [pc, #224]	; (80072b4 <xTaskIncrementTick+0x220>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	4a36      	ldr	r2, [pc, #216]	; (80072b4 <xTaskIncrementTick+0x220>)
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e0:	4935      	ldr	r1, [pc, #212]	; (80072b8 <xTaskIncrementTick+0x224>)
 80071e2:	4613      	mov	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	440b      	add	r3, r1
 80071ec:	3304      	adds	r3, #4
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	60bb      	str	r3, [r7, #8]
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	609a      	str	r2, [r3, #8]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	60da      	str	r2, [r3, #12]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	3204      	adds	r2, #4
 8007208:	605a      	str	r2, [r3, #4]
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	1d1a      	adds	r2, r3, #4
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	609a      	str	r2, [r3, #8]
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4a26      	ldr	r2, [pc, #152]	; (80072b8 <xTaskIncrementTick+0x224>)
 8007220:	441a      	add	r2, r3
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	615a      	str	r2, [r3, #20]
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722a:	4923      	ldr	r1, [pc, #140]	; (80072b8 <xTaskIncrementTick+0x224>)
 800722c:	4613      	mov	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	440b      	add	r3, r1
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	1c59      	adds	r1, r3, #1
 800723a:	481f      	ldr	r0, [pc, #124]	; (80072b8 <xTaskIncrementTick+0x224>)
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4403      	add	r3, r0
 8007246:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724c:	4b1b      	ldr	r3, [pc, #108]	; (80072bc <xTaskIncrementTick+0x228>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007252:	429a      	cmp	r2, r3
 8007254:	f67f af59 	bls.w	800710a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8007258:	2301      	movs	r3, #1
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800725c:	e755      	b.n	800710a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800725e:	4b17      	ldr	r3, [pc, #92]	; (80072bc <xTaskIncrementTick+0x228>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007264:	4914      	ldr	r1, [pc, #80]	; (80072b8 <xTaskIncrementTick+0x224>)
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d901      	bls.n	800727a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8007276:	2301      	movs	r3, #1
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800727a:	4b11      	ldr	r3, [pc, #68]	; (80072c0 <xTaskIncrementTick+0x22c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d007      	beq.n	8007292 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8007282:	2301      	movs	r3, #1
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
 8007286:	e004      	b.n	8007292 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007288:	4b0e      	ldr	r3, [pc, #56]	; (80072c4 <xTaskIncrementTick+0x230>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3301      	adds	r3, #1
 800728e:	4a0d      	ldr	r2, [pc, #52]	; (80072c4 <xTaskIncrementTick+0x230>)
 8007290:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007294:	4618      	mov	r0, r3
 8007296:	3728      	adds	r7, #40	; 0x28
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	200008c4 	.word	0x200008c4
 80072a0:	200008a0 	.word	0x200008a0
 80072a4:	20000854 	.word	0x20000854
 80072a8:	20000858 	.word	0x20000858
 80072ac:	200008b4 	.word	0x200008b4
 80072b0:	200008bc 	.word	0x200008bc
 80072b4:	200008a4 	.word	0x200008a4
 80072b8:	200007c8 	.word	0x200007c8
 80072bc:	200007c4 	.word	0x200007c4
 80072c0:	200008b0 	.word	0x200008b0
 80072c4:	200008ac 	.word	0x200008ac

080072c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072ce:	4b2d      	ldr	r3, [pc, #180]	; (8007384 <vTaskSwitchContext+0xbc>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80072d6:	4b2c      	ldr	r3, [pc, #176]	; (8007388 <vTaskSwitchContext+0xc0>)
 80072d8:	2201      	movs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80072dc:	e04d      	b.n	800737a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80072de:	4b2a      	ldr	r3, [pc, #168]	; (8007388 <vTaskSwitchContext+0xc0>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e4:	4b29      	ldr	r3, [pc, #164]	; (800738c <vTaskSwitchContext+0xc4>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	fab3 f383 	clz	r3, r3
 80072f0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80072f2:	7afb      	ldrb	r3, [r7, #11]
 80072f4:	f1c3 031f 	rsb	r3, r3, #31
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	4925      	ldr	r1, [pc, #148]	; (8007390 <vTaskSwitchContext+0xc8>)
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	4613      	mov	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4413      	add	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	440b      	add	r3, r1
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10a      	bne.n	8007324 <vTaskSwitchContext+0x5c>
        __asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	607b      	str	r3, [r7, #4]
    }
 8007320:	bf00      	nop
 8007322:	e7fe      	b.n	8007322 <vTaskSwitchContext+0x5a>
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4a18      	ldr	r2, [pc, #96]	; (8007390 <vTaskSwitchContext+0xc8>)
 8007330:	4413      	add	r3, r2
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	605a      	str	r2, [r3, #4]
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	3308      	adds	r3, #8
 8007346:	429a      	cmp	r2, r3
 8007348:	d104      	bne.n	8007354 <vTaskSwitchContext+0x8c>
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	605a      	str	r2, [r3, #4]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	4a0e      	ldr	r2, [pc, #56]	; (8007394 <vTaskSwitchContext+0xcc>)
 800735c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800735e:	4b0d      	ldr	r3, [pc, #52]	; (8007394 <vTaskSwitchContext+0xcc>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	4b0d      	ldr	r3, [pc, #52]	; (8007398 <vTaskSwitchContext+0xd0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d102      	bne.n	8007370 <vTaskSwitchContext+0xa8>
 800736a:	f002 fbc5 	bl	8009af8 <SEGGER_SYSVIEW_OnIdle>
}
 800736e:	e004      	b.n	800737a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8007370:	4b08      	ldr	r3, [pc, #32]	; (8007394 <vTaskSwitchContext+0xcc>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4618      	mov	r0, r3
 8007376:	f002 fc1d 	bl	8009bb4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800737a:	bf00      	nop
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	200008c4 	.word	0x200008c4
 8007388:	200008b0 	.word	0x200008b0
 800738c:	200008a4 	.word	0x200008a4
 8007390:	200007c8 	.word	0x200007c8
 8007394:	200007c4 	.word	0x200007c4
 8007398:	200008c0 	.word	0x200008c0

0800739c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10a      	bne.n	80073c2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	60fb      	str	r3, [r7, #12]
    }
 80073be:	bf00      	nop
 80073c0:	e7fe      	b.n	80073c0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073c2:	4b07      	ldr	r3, [pc, #28]	; (80073e0 <vTaskPlaceOnEventList+0x44>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3318      	adds	r3, #24
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7fe ffc7 	bl	800635e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073d0:	2101      	movs	r1, #1
 80073d2:	6838      	ldr	r0, [r7, #0]
 80073d4:	f000 fb08 	bl	80079e8 <prvAddCurrentTaskToDelayedList>
}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	200007c4 	.word	0x200007c4

080073e4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10a      	bne.n	800740c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80073f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	613b      	str	r3, [r7, #16]
    }
 8007408:	bf00      	nop
 800740a:	e7fe      	b.n	800740a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	617b      	str	r3, [r7, #20]
 8007412:	4b17      	ldr	r3, [pc, #92]	; (8007470 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	61da      	str	r2, [r3, #28]
 800741a:	4b15      	ldr	r3, [pc, #84]	; (8007470 <vTaskPlaceOnEventListRestricted+0x8c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	6892      	ldr	r2, [r2, #8]
 8007422:	621a      	str	r2, [r3, #32]
 8007424:	4b12      	ldr	r3, [pc, #72]	; (8007470 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	3218      	adds	r2, #24
 800742e:	605a      	str	r2, [r3, #4]
 8007430:	4b0f      	ldr	r3, [pc, #60]	; (8007470 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f103 0218 	add.w	r2, r3, #24
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	609a      	str	r2, [r3, #8]
 800743c:	4b0c      	ldr	r3, [pc, #48]	; (8007470 <vTaskPlaceOnEventListRestricted+0x8c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	629a      	str	r2, [r3, #40]	; 0x28
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8007454:	f04f 33ff 	mov.w	r3, #4294967295
 8007458:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800745a:	2024      	movs	r0, #36	; 0x24
 800745c:	f001 fe72 	bl	8009144 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007460:	6879      	ldr	r1, [r7, #4]
 8007462:	68b8      	ldr	r0, [r7, #8]
 8007464:	f000 fac0 	bl	80079e8 <prvAddCurrentTaskToDelayedList>
    }
 8007468:	bf00      	nop
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	200007c4 	.word	0x200007c4

08007474 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08a      	sub	sp, #40	; 0x28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10a      	bne.n	80074a0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	60fb      	str	r3, [r7, #12]
    }
 800749c:	bf00      	nop
 800749e:	e7fe      	b.n	800749e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	6a3a      	ldr	r2, [r7, #32]
 80074ac:	6a12      	ldr	r2, [r2, #32]
 80074ae:	609a      	str	r2, [r3, #8]
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	6a3a      	ldr	r2, [r7, #32]
 80074b6:	69d2      	ldr	r2, [r2, #28]
 80074b8:	605a      	str	r2, [r3, #4]
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	3318      	adds	r3, #24
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d103      	bne.n	80074ce <xTaskRemoveFromEventList+0x5a>
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	6a1a      	ldr	r2, [r3, #32]
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	605a      	str	r2, [r3, #4]
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	2200      	movs	r2, #0
 80074d2:	629a      	str	r2, [r3, #40]	; 0x28
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	1e5a      	subs	r2, r3, #1
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074de:	4b4b      	ldr	r3, [pc, #300]	; (800760c <xTaskRemoveFromEventList+0x198>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d162      	bne.n	80075ac <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	6a3a      	ldr	r2, [r7, #32]
 80074f2:	68d2      	ldr	r2, [r2, #12]
 80074f4:	609a      	str	r2, [r3, #8]
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	6a3a      	ldr	r2, [r7, #32]
 80074fc:	6892      	ldr	r2, [r2, #8]
 80074fe:	605a      	str	r2, [r3, #4]
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	3304      	adds	r3, #4
 8007508:	429a      	cmp	r2, r3
 800750a:	d103      	bne.n	8007514 <xTaskRemoveFromEventList+0xa0>
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	605a      	str	r2, [r3, #4]
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	2200      	movs	r2, #0
 8007518:	615a      	str	r2, [r3, #20]
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	1e5a      	subs	r2, r3, #1
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	4618      	mov	r0, r3
 8007528:	f002 fb86 	bl	8009c38 <SEGGER_SYSVIEW_OnTaskStartReady>
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	2201      	movs	r2, #1
 8007532:	409a      	lsls	r2, r3
 8007534:	4b36      	ldr	r3, [pc, #216]	; (8007610 <xTaskRemoveFromEventList+0x19c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4313      	orrs	r3, r2
 800753a:	4a35      	ldr	r2, [pc, #212]	; (8007610 <xTaskRemoveFromEventList+0x19c>)
 800753c:	6013      	str	r3, [r2, #0]
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007542:	4934      	ldr	r1, [pc, #208]	; (8007614 <xTaskRemoveFromEventList+0x1a0>)
 8007544:	4613      	mov	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	440b      	add	r3, r1
 800754e:	3304      	adds	r3, #4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	613b      	str	r3, [r7, #16]
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	609a      	str	r2, [r3, #8]
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	60da      	str	r2, [r3, #12]
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	6a3a      	ldr	r2, [r7, #32]
 8007568:	3204      	adds	r2, #4
 800756a:	605a      	str	r2, [r3, #4]
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	1d1a      	adds	r2, r3, #4
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	609a      	str	r2, [r3, #8]
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007578:	4613      	mov	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4a24      	ldr	r2, [pc, #144]	; (8007614 <xTaskRemoveFromEventList+0x1a0>)
 8007582:	441a      	add	r2, r3
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	615a      	str	r2, [r3, #20]
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758c:	4921      	ldr	r1, [pc, #132]	; (8007614 <xTaskRemoveFromEventList+0x1a0>)
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	440b      	add	r3, r1
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	1c59      	adds	r1, r3, #1
 800759c:	481d      	ldr	r0, [pc, #116]	; (8007614 <xTaskRemoveFromEventList+0x1a0>)
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4403      	add	r3, r0
 80075a8:	6019      	str	r1, [r3, #0]
 80075aa:	e01b      	b.n	80075e4 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075ac:	4b1a      	ldr	r3, [pc, #104]	; (8007618 <xTaskRemoveFromEventList+0x1a4>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	61da      	str	r2, [r3, #28]
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	621a      	str	r2, [r3, #32]
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	6a3a      	ldr	r2, [r7, #32]
 80075c6:	3218      	adds	r2, #24
 80075c8:	605a      	str	r2, [r3, #4]
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	f103 0218 	add.w	r2, r3, #24
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	609a      	str	r2, [r3, #8]
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	4a10      	ldr	r2, [pc, #64]	; (8007618 <xTaskRemoveFromEventList+0x1a4>)
 80075d8:	629a      	str	r2, [r3, #40]	; 0x28
 80075da:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <xTaskRemoveFromEventList+0x1a4>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3301      	adds	r3, #1
 80075e0:	4a0d      	ldr	r2, [pc, #52]	; (8007618 <xTaskRemoveFromEventList+0x1a4>)
 80075e2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e8:	4b0c      	ldr	r3, [pc, #48]	; (800761c <xTaskRemoveFromEventList+0x1a8>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d905      	bls.n	80075fe <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80075f2:	2301      	movs	r3, #1
 80075f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80075f6:	4b0a      	ldr	r3, [pc, #40]	; (8007620 <xTaskRemoveFromEventList+0x1ac>)
 80075f8:	2201      	movs	r2, #1
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	e001      	b.n	8007602 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80075fe:	2300      	movs	r3, #0
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007604:	4618      	mov	r0, r3
 8007606:	3728      	adds	r7, #40	; 0x28
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	200008c4 	.word	0x200008c4
 8007610:	200008a4 	.word	0x200008a4
 8007614:	200007c8 	.word	0x200007c8
 8007618:	2000085c 	.word	0x2000085c
 800761c:	200007c4 	.word	0x200007c4
 8007620:	200008b0 	.word	0x200008b0

08007624 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800762c:	4b06      	ldr	r3, [pc, #24]	; (8007648 <vTaskInternalSetTimeOutState+0x24>)
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007634:	4b05      	ldr	r3, [pc, #20]	; (800764c <vTaskInternalSetTimeOutState+0x28>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	605a      	str	r2, [r3, #4]
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	200008b4 	.word	0x200008b4
 800764c:	200008a0 	.word	0x200008a0

08007650 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	613b      	str	r3, [r7, #16]
    }
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10a      	bne.n	8007692 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	60fb      	str	r3, [r7, #12]
    }
 800768e:	bf00      	nop
 8007690:	e7fe      	b.n	8007690 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8007692:	f000 fdd9 	bl	8008248 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007696:	4b1f      	ldr	r3, [pc, #124]	; (8007714 <xTaskCheckForTimeOut+0xc4>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ae:	d102      	bne.n	80076b6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80076b0:	2300      	movs	r3, #0
 80076b2:	61fb      	str	r3, [r7, #28]
 80076b4:	e026      	b.n	8007704 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	4b17      	ldr	r3, [pc, #92]	; (8007718 <xTaskCheckForTimeOut+0xc8>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d00a      	beq.n	80076d8 <xTaskCheckForTimeOut+0x88>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	69ba      	ldr	r2, [r7, #24]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d305      	bcc.n	80076d8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80076cc:	2301      	movs	r3, #1
 80076ce:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	e015      	b.n	8007704 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d20b      	bcs.n	80076fa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	1ad2      	subs	r2, r2, r3
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff ff98 	bl	8007624 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80076f4:	2300      	movs	r3, #0
 80076f6:	61fb      	str	r3, [r7, #28]
 80076f8:	e004      	b.n	8007704 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007700:	2301      	movs	r3, #1
 8007702:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007704:	f000 fdd0 	bl	80082a8 <vPortExitCritical>

    return xReturn;
 8007708:	69fb      	ldr	r3, [r7, #28]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3720      	adds	r7, #32
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	200008a0 	.word	0x200008a0
 8007718:	200008b4 	.word	0x200008b4

0800771c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800771c:	b480      	push	{r7}
 800771e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007720:	4b03      	ldr	r3, [pc, #12]	; (8007730 <vTaskMissedYield+0x14>)
 8007722:	2201      	movs	r2, #1
 8007724:	601a      	str	r2, [r3, #0]
}
 8007726:	bf00      	nop
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	200008b0 	.word	0x200008b0

08007734 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800773c:	f000 f854 	bl	80077e8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007740:	4b07      	ldr	r3, [pc, #28]	; (8007760 <prvIdleTask+0x2c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d907      	bls.n	8007758 <prvIdleTask+0x24>
            {
                taskYIELD();
 8007748:	4b06      	ldr	r3, [pc, #24]	; (8007764 <prvIdleTask+0x30>)
 800774a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8007758:	f7f9 fcca 	bl	80010f0 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 800775c:	e7ee      	b.n	800773c <prvIdleTask+0x8>
 800775e:	bf00      	nop
 8007760:	200007c8 	.word	0x200007c8
 8007764:	e000ed04 	.word	0xe000ed04

08007768 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800776e:	2300      	movs	r3, #0
 8007770:	607b      	str	r3, [r7, #4]
 8007772:	e00c      	b.n	800778e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4a12      	ldr	r2, [pc, #72]	; (80077c8 <prvInitialiseTaskLists+0x60>)
 8007780:	4413      	add	r3, r2
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe fdbe 	bl	8006304 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3301      	adds	r3, #1
 800778c:	607b      	str	r3, [r7, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b04      	cmp	r3, #4
 8007792:	d9ef      	bls.n	8007774 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007794:	480d      	ldr	r0, [pc, #52]	; (80077cc <prvInitialiseTaskLists+0x64>)
 8007796:	f7fe fdb5 	bl	8006304 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800779a:	480d      	ldr	r0, [pc, #52]	; (80077d0 <prvInitialiseTaskLists+0x68>)
 800779c:	f7fe fdb2 	bl	8006304 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80077a0:	480c      	ldr	r0, [pc, #48]	; (80077d4 <prvInitialiseTaskLists+0x6c>)
 80077a2:	f7fe fdaf 	bl	8006304 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80077a6:	480c      	ldr	r0, [pc, #48]	; (80077d8 <prvInitialiseTaskLists+0x70>)
 80077a8:	f7fe fdac 	bl	8006304 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80077ac:	480b      	ldr	r0, [pc, #44]	; (80077dc <prvInitialiseTaskLists+0x74>)
 80077ae:	f7fe fda9 	bl	8006304 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80077b2:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <prvInitialiseTaskLists+0x78>)
 80077b4:	4a05      	ldr	r2, [pc, #20]	; (80077cc <prvInitialiseTaskLists+0x64>)
 80077b6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077b8:	4b0a      	ldr	r3, [pc, #40]	; (80077e4 <prvInitialiseTaskLists+0x7c>)
 80077ba:	4a05      	ldr	r2, [pc, #20]	; (80077d0 <prvInitialiseTaskLists+0x68>)
 80077bc:	601a      	str	r2, [r3, #0]
}
 80077be:	bf00      	nop
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	200007c8 	.word	0x200007c8
 80077cc:	2000082c 	.word	0x2000082c
 80077d0:	20000840 	.word	0x20000840
 80077d4:	2000085c 	.word	0x2000085c
 80077d8:	20000870 	.word	0x20000870
 80077dc:	20000888 	.word	0x20000888
 80077e0:	20000854 	.word	0x20000854
 80077e4:	20000858 	.word	0x20000858

080077e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077ee:	e019      	b.n	8007824 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80077f0:	f000 fd2a 	bl	8008248 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f4:	4b10      	ldr	r3, [pc, #64]	; (8007838 <prvCheckTasksWaitingTermination+0x50>)
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3304      	adds	r3, #4
 8007800:	4618      	mov	r0, r3
 8007802:	f7fe fde5 	bl	80063d0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8007806:	4b0d      	ldr	r3, [pc, #52]	; (800783c <prvCheckTasksWaitingTermination+0x54>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3b01      	subs	r3, #1
 800780c:	4a0b      	ldr	r2, [pc, #44]	; (800783c <prvCheckTasksWaitingTermination+0x54>)
 800780e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8007810:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <prvCheckTasksWaitingTermination+0x58>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3b01      	subs	r3, #1
 8007816:	4a0a      	ldr	r2, [pc, #40]	; (8007840 <prvCheckTasksWaitingTermination+0x58>)
 8007818:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800781a:	f000 fd45 	bl	80082a8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f810 	bl	8007844 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007824:	4b06      	ldr	r3, [pc, #24]	; (8007840 <prvCheckTasksWaitingTermination+0x58>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e1      	bne.n	80077f0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20000870 	.word	0x20000870
 800783c:	2000089c 	.word	0x2000089c
 8007840:	20000884 	.word	0x20000884

08007844 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	4618      	mov	r0, r3
 8007852:	f000 fe9d 	bl	8008590 <vPortFree>
            vPortFree( pxTCB );
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fe9a 	bl	8008590 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800785c:	bf00      	nop
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007868:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <prvResetNextTaskUnblockTime+0x30>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d104      	bne.n	800787c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007872:	4b09      	ldr	r3, [pc, #36]	; (8007898 <prvResetNextTaskUnblockTime+0x34>)
 8007874:	f04f 32ff 	mov.w	r2, #4294967295
 8007878:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800787a:	e005      	b.n	8007888 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800787c:	4b05      	ldr	r3, [pc, #20]	; (8007894 <prvResetNextTaskUnblockTime+0x30>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a04      	ldr	r2, [pc, #16]	; (8007898 <prvResetNextTaskUnblockTime+0x34>)
 8007886:	6013      	str	r3, [r2, #0]
}
 8007888:	bf00      	nop
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20000854 	.word	0x20000854
 8007898:	200008bc 	.word	0x200008bc

0800789c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80078a2:	4b0b      	ldr	r3, [pc, #44]	; (80078d0 <xTaskGetSchedulerState+0x34>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d102      	bne.n	80078b0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80078aa:	2301      	movs	r3, #1
 80078ac:	607b      	str	r3, [r7, #4]
 80078ae:	e008      	b.n	80078c2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b0:	4b08      	ldr	r3, [pc, #32]	; (80078d4 <xTaskGetSchedulerState+0x38>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d102      	bne.n	80078be <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80078b8:	2302      	movs	r3, #2
 80078ba:	607b      	str	r3, [r7, #4]
 80078bc:	e001      	b.n	80078c2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80078be:	2300      	movs	r3, #0
 80078c0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80078c2:	687b      	ldr	r3, [r7, #4]
    }
 80078c4:	4618      	mov	r0, r3
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	200008a8 	.word	0x200008a8
 80078d4:	200008c4 	.word	0x200008c4

080078d8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80078d8:	b580      	push	{r7, lr}
 80078da:	b088      	sub	sp, #32
 80078dc:	af02      	add	r7, sp, #8
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00a      	beq.n	8007902 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	613b      	str	r3, [r7, #16]
    }
 80078fe:	bf00      	nop
 8007900:	e7fe      	b.n	8007900 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8007902:	f000 fca1 	bl	8008248 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8007906:	4b36      	ldr	r3, [pc, #216]	; (80079e0 <xTaskGenericNotifyWait+0x108>)
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4413      	add	r3, r2
 800790e:	3354      	adds	r3, #84	; 0x54
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b02      	cmp	r3, #2
 8007916:	d022      	beq.n	800795e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8007918:	4b31      	ldr	r3, [pc, #196]	; (80079e0 <xTaskGenericNotifyWait+0x108>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	3214      	adds	r2, #20
 8007920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	43d2      	mvns	r2, r2
 8007928:	4011      	ands	r1, r2
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	3214      	adds	r2, #20
 800792e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8007932:	4b2b      	ldr	r3, [pc, #172]	; (80079e0 <xTaskGenericNotifyWait+0x108>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4413      	add	r3, r2
 800793a:	3354      	adds	r3, #84	; 0x54
 800793c:	2201      	movs	r2, #1
 800793e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00b      	beq.n	800795e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007946:	2101      	movs	r1, #1
 8007948:	6a38      	ldr	r0, [r7, #32]
 800794a:	f000 f84d 	bl	80079e8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800794e:	4b25      	ldr	r3, [pc, #148]	; (80079e4 <xTaskGenericNotifyWait+0x10c>)
 8007950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800795e:	f000 fca3 	bl	80082a8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8007962:	f000 fc71 	bl	8008248 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	4613      	mov	r3, r2
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	68b9      	ldr	r1, [r7, #8]
 8007972:	2040      	movs	r0, #64	; 0x40
 8007974:	f001 fd10 	bl	8009398 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d007      	beq.n	800798e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800797e:	4b18      	ldr	r3, [pc, #96]	; (80079e0 <xTaskGenericNotifyWait+0x108>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	3214      	adds	r2, #20
 8007986:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800798e:	4b14      	ldr	r3, [pc, #80]	; (80079e0 <xTaskGenericNotifyWait+0x108>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	4413      	add	r3, r2
 8007996:	3354      	adds	r3, #84	; 0x54
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d002      	beq.n	80079a6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	e00e      	b.n	80079c4 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80079a6:	4b0e      	ldr	r3, [pc, #56]	; (80079e0 <xTaskGenericNotifyWait+0x108>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	3214      	adds	r2, #20
 80079ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	43d2      	mvns	r2, r2
 80079b6:	4011      	ands	r1, r2
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	3214      	adds	r2, #20
 80079bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80079c0:	2301      	movs	r3, #1
 80079c2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80079c4:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <xTaskGenericNotifyWait+0x108>)
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4413      	add	r3, r2
 80079cc:	3354      	adds	r3, #84	; 0x54
 80079ce:	2200      	movs	r2, #0
 80079d0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80079d2:	f000 fc69 	bl	80082a8 <vPortExitCritical>

        return xReturn;
 80079d6:	697b      	ldr	r3, [r7, #20]
    }
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	200007c4 	.word	0x200007c4
 80079e4:	e000ed04 	.word	0xe000ed04

080079e8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80079f2:	4b36      	ldr	r3, [pc, #216]	; (8007acc <prvAddCurrentTaskToDelayedList+0xe4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079f8:	4b35      	ldr	r3, [pc, #212]	; (8007ad0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3304      	adds	r3, #4
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe fce6 	bl	80063d0 <uxListRemove>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10b      	bne.n	8007a22 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a0a:	4b31      	ldr	r3, [pc, #196]	; (8007ad0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	2201      	movs	r2, #1
 8007a12:	fa02 f303 	lsl.w	r3, r2, r3
 8007a16:	43da      	mvns	r2, r3
 8007a18:	4b2e      	ldr	r3, [pc, #184]	; (8007ad4 <prvAddCurrentTaskToDelayedList+0xec>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	4a2d      	ldr	r2, [pc, #180]	; (8007ad4 <prvAddCurrentTaskToDelayedList+0xec>)
 8007a20:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a28:	d124      	bne.n	8007a74 <prvAddCurrentTaskToDelayedList+0x8c>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d021      	beq.n	8007a74 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a30:	4b29      	ldr	r3, [pc, #164]	; (8007ad8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	613b      	str	r3, [r7, #16]
 8007a36:	4b26      	ldr	r3, [pc, #152]	; (8007ad0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	609a      	str	r2, [r3, #8]
 8007a3e:	4b24      	ldr	r3, [pc, #144]	; (8007ad0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	6892      	ldr	r2, [r2, #8]
 8007a46:	60da      	str	r2, [r3, #12]
 8007a48:	4b21      	ldr	r3, [pc, #132]	; (8007ad0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	3204      	adds	r2, #4
 8007a52:	605a      	str	r2, [r3, #4]
 8007a54:	4b1e      	ldr	r3, [pc, #120]	; (8007ad0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	1d1a      	adds	r2, r3, #4
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	609a      	str	r2, [r3, #8]
 8007a5e:	4b1c      	ldr	r3, [pc, #112]	; (8007ad0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a1d      	ldr	r2, [pc, #116]	; (8007ad8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007a64:	615a      	str	r2, [r3, #20]
 8007a66:	4b1c      	ldr	r3, [pc, #112]	; (8007ad8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	4a1a      	ldr	r2, [pc, #104]	; (8007ad8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007a72:	e026      	b.n	8007ac2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4413      	add	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a7c:	4b14      	ldr	r3, [pc, #80]	; (8007ad0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d209      	bcs.n	8007aa0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a8c:	4b13      	ldr	r3, [pc, #76]	; (8007adc <prvAddCurrentTaskToDelayedList+0xf4>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	4b0f      	ldr	r3, [pc, #60]	; (8007ad0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3304      	adds	r3, #4
 8007a96:	4619      	mov	r1, r3
 8007a98:	4610      	mov	r0, r2
 8007a9a:	f7fe fc60 	bl	800635e <vListInsert>
}
 8007a9e:	e010      	b.n	8007ac2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aa0:	4b0f      	ldr	r3, [pc, #60]	; (8007ae0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4610      	mov	r0, r2
 8007aae:	f7fe fc56 	bl	800635e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007ab2:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d202      	bcs.n	8007ac2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8007abc:	4a09      	ldr	r2, [pc, #36]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6013      	str	r3, [r2, #0]
}
 8007ac2:	bf00      	nop
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	200008a0 	.word	0x200008a0
 8007ad0:	200007c4 	.word	0x200007c4
 8007ad4:	200008a4 	.word	0x200008a4
 8007ad8:	20000888 	.word	0x20000888
 8007adc:	20000858 	.word	0x20000858
 8007ae0:	20000854 	.word	0x20000854
 8007ae4:	200008bc 	.word	0x200008bc

08007ae8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007aee:	2300      	movs	r3, #0
 8007af0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007af2:	f000 fa47 	bl	8007f84 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007af6:	4b11      	ldr	r3, [pc, #68]	; (8007b3c <xTimerCreateTimerTask+0x54>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00b      	beq.n	8007b16 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8007afe:	4b10      	ldr	r3, [pc, #64]	; (8007b40 <xTimerCreateTimerTask+0x58>)
 8007b00:	9301      	str	r3, [sp, #4]
 8007b02:	2302      	movs	r3, #2
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	2300      	movs	r3, #0
 8007b08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007b0c:	490d      	ldr	r1, [pc, #52]	; (8007b44 <xTimerCreateTimerTask+0x5c>)
 8007b0e:	480e      	ldr	r0, [pc, #56]	; (8007b48 <xTimerCreateTimerTask+0x60>)
 8007b10:	f7fe ffb8 	bl	8006a84 <xTaskCreate>
 8007b14:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10a      	bne.n	8007b32 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	603b      	str	r3, [r7, #0]
    }
 8007b2e:	bf00      	nop
 8007b30:	e7fe      	b.n	8007b30 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007b32:	687b      	ldr	r3, [r7, #4]
    }
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	200008f8 	.word	0x200008f8
 8007b40:	200008fc 	.word	0x200008fc
 8007b44:	0800ca40 	.word	0x0800ca40
 8007b48:	08007bf1 	.word	0x08007bf1

08007b4c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007b58:	e008      	b.n	8007b6c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	4413      	add	r3, r2
 8007b62:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	699a      	ldr	r2, [r3, #24]
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	18d1      	adds	r1, r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f8dd 	bl	8007d38 <prvInsertTimerInActiveList>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1ea      	bne.n	8007b5a <prvReloadTimer+0xe>
        }
    }
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b9a:	4b14      	ldr	r3, [pc, #80]	; (8007bec <prvProcessExpiredTimer+0x5c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe fc11 	bl	80063d0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d005      	beq.n	8007bc8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f7ff ffc3 	bl	8007b4c <prvReloadTimer>
 8007bc6:	e008      	b.n	8007bda <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bce:	f023 0301 	bic.w	r3, r3, #1
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	4798      	blx	r3
    }
 8007be2:	bf00      	nop
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	200008f0 	.word	0x200008f0

08007bf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bf8:	f107 0308 	add.w	r3, r7, #8
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 f857 	bl	8007cb0 <prvGetNextExpireTime>
 8007c02:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4619      	mov	r1, r3
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 f803 	bl	8007c14 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007c0e:	f000 f8d5 	bl	8007dbc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c12:	e7f1      	b.n	8007bf8 <prvTimerTask+0x8>

08007c14 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007c1e:	f7ff f91b 	bl	8006e58 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c22:	f107 0308 	add.w	r3, r7, #8
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 f866 	bl	8007cf8 <prvSampleTimeNow>
 8007c2c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d130      	bne.n	8007c96 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <prvProcessTimerOrBlockTask+0x3c>
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d806      	bhi.n	8007c50 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007c42:	f7ff f917 	bl	8006e74 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c46:	68f9      	ldr	r1, [r7, #12]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff ffa1 	bl	8007b90 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007c4e:	e024      	b.n	8007c9a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d008      	beq.n	8007c68 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c56:	4b13      	ldr	r3, [pc, #76]	; (8007ca4 <prvProcessTimerOrBlockTask+0x90>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <prvProcessTimerOrBlockTask+0x50>
 8007c60:	2301      	movs	r3, #1
 8007c62:	e000      	b.n	8007c66 <prvProcessTimerOrBlockTask+0x52>
 8007c64:	2300      	movs	r3, #0
 8007c66:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c68:	4b0f      	ldr	r3, [pc, #60]	; (8007ca8 <prvProcessTimerOrBlockTask+0x94>)
 8007c6a:	6818      	ldr	r0, [r3, #0]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	4619      	mov	r1, r3
 8007c76:	f7fe fed1 	bl	8006a1c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007c7a:	f7ff f8fb 	bl	8006e74 <xTaskResumeAll>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007c84:	4b09      	ldr	r3, [pc, #36]	; (8007cac <prvProcessTimerOrBlockTask+0x98>)
 8007c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	f3bf 8f6f 	isb	sy
    }
 8007c94:	e001      	b.n	8007c9a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007c96:	f7ff f8ed 	bl	8006e74 <xTaskResumeAll>
    }
 8007c9a:	bf00      	nop
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200008f4 	.word	0x200008f4
 8007ca8:	200008f8 	.word	0x200008f8
 8007cac:	e000ed04 	.word	0xe000ed04

08007cb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cb8:	4b0e      	ldr	r3, [pc, #56]	; (8007cf4 <prvGetNextExpireTime+0x44>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <prvGetNextExpireTime+0x16>
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	e000      	b.n	8007cc8 <prvGetNextExpireTime+0x18>
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d105      	bne.n	8007ce0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cd4:	4b07      	ldr	r3, [pc, #28]	; (8007cf4 <prvGetNextExpireTime+0x44>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	e001      	b.n	8007ce4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
    }
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	200008f0 	.word	0x200008f0

08007cf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007d00:	f7ff f9b8 	bl	8007074 <xTaskGetTickCount>
 8007d04:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007d06:	4b0b      	ldr	r3, [pc, #44]	; (8007d34 <prvSampleTimeNow+0x3c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d205      	bcs.n	8007d1c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007d10:	f000 f912 	bl	8007f38 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	e002      	b.n	8007d22 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007d22:	4a04      	ldr	r2, [pc, #16]	; (8007d34 <prvSampleTimeNow+0x3c>)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007d28:	68fb      	ldr	r3, [r7, #12]
    }
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20000900 	.word	0x20000900

08007d38 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007d46:	2300      	movs	r3, #0
 8007d48:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d812      	bhi.n	8007d84 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	1ad2      	subs	r2, r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d302      	bcc.n	8007d72 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	e01b      	b.n	8007daa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d72:	4b10      	ldr	r3, [pc, #64]	; (8007db4 <prvInsertTimerInActiveList+0x7c>)
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f7fe faee 	bl	800635e <vListInsert>
 8007d82:	e012      	b.n	8007daa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d206      	bcs.n	8007d9a <prvInsertTimerInActiveList+0x62>
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d302      	bcc.n	8007d9a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007d94:	2301      	movs	r3, #1
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e007      	b.n	8007daa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d9a:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <prvInsertTimerInActiveList+0x80>)
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3304      	adds	r3, #4
 8007da2:	4619      	mov	r1, r3
 8007da4:	4610      	mov	r0, r2
 8007da6:	f7fe fada 	bl	800635e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007daa:	697b      	ldr	r3, [r7, #20]
    }
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	200008f4 	.word	0x200008f4
 8007db8:	200008f0 	.word	0x200008f0

08007dbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b088      	sub	sp, #32
 8007dc0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dc2:	e0a6      	b.n	8007f12 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f2c0 80a3 	blt.w	8007f12 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d004      	beq.n	8007de2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fe faf7 	bl	80063d0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007de2:	1d3b      	adds	r3, r7, #4
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff ff87 	bl	8007cf8 <prvSampleTimeNow>
 8007dea:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	f200 808d 	bhi.w	8007f10 <prvProcessReceivedCommands+0x154>
 8007df6:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <prvProcessReceivedCommands+0x40>)
 8007df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfc:	08007e21 	.word	0x08007e21
 8007e00:	08007e21 	.word	0x08007e21
 8007e04:	08007e89 	.word	0x08007e89
 8007e08:	08007e9d 	.word	0x08007e9d
 8007e0c:	08007ee7 	.word	0x08007ee7
 8007e10:	08007e21 	.word	0x08007e21
 8007e14:	08007e21 	.word	0x08007e21
 8007e18:	08007e89 	.word	0x08007e89
 8007e1c:	08007e9d 	.word	0x08007e9d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e26:	f043 0301 	orr.w	r3, r3, #1
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	18d1      	adds	r1, r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	69f8      	ldr	r0, [r7, #28]
 8007e40:	f7ff ff7a 	bl	8007d38 <prvInsertTimerInActiveList>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d063      	beq.n	8007f12 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d009      	beq.n	8007e6c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	4413      	add	r3, r2
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	4619      	mov	r1, r3
 8007e64:	69f8      	ldr	r0, [r7, #28]
 8007e66:	f7ff fe71 	bl	8007b4c <prvReloadTimer>
 8007e6a:	e008      	b.n	8007e7e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e72:	f023 0301 	bic.w	r3, r3, #1
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	69f8      	ldr	r0, [r7, #28]
 8007e84:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007e86:	e044      	b.n	8007f12 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e8e:	f023 0301 	bic.w	r3, r3, #1
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007e9a:	e03a      	b.n	8007f12 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ea2:	f043 0301 	orr.w	r3, r3, #1
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	617b      	str	r3, [r7, #20]
    }
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	699a      	ldr	r2, [r3, #24]
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	18d1      	adds	r1, r2, r3
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	69f8      	ldr	r0, [r7, #28]
 8007ee0:	f7ff ff2a 	bl	8007d38 <prvInsertTimerInActiveList>
                        break;
 8007ee4:	e015      	b.n	8007f12 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d103      	bne.n	8007efc <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8007ef4:	69f8      	ldr	r0, [r7, #28]
 8007ef6:	f000 fb4b 	bl	8008590 <vPortFree>
 8007efa:	e00a      	b.n	8007f12 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f02:	f023 0301 	bic.w	r3, r3, #1
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007f0e:	e000      	b.n	8007f12 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007f10:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f12:	4b08      	ldr	r3, [pc, #32]	; (8007f34 <prvProcessReceivedCommands+0x178>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f107 0108 	add.w	r1, r7, #8
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fe fb89 	bl	8006634 <xQueueReceive>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f47f af4d 	bne.w	8007dc4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8007f2a:	bf00      	nop
 8007f2c:	bf00      	nop
 8007f2e:	3720      	adds	r7, #32
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	200008f8 	.word	0x200008f8

08007f38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f3e:	e009      	b.n	8007f54 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f40:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <prvSwitchTimerLists+0x44>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007f4a:	f04f 31ff 	mov.w	r1, #4294967295
 8007f4e:	6838      	ldr	r0, [r7, #0]
 8007f50:	f7ff fe1e 	bl	8007b90 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f54:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <prvSwitchTimerLists+0x44>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f0      	bne.n	8007f40 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007f5e:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <prvSwitchTimerLists+0x44>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8007f64:	4b06      	ldr	r3, [pc, #24]	; (8007f80 <prvSwitchTimerLists+0x48>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a04      	ldr	r2, [pc, #16]	; (8007f7c <prvSwitchTimerLists+0x44>)
 8007f6a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007f6c:	4a04      	ldr	r2, [pc, #16]	; (8007f80 <prvSwitchTimerLists+0x48>)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6013      	str	r3, [r2, #0]
    }
 8007f72:	bf00      	nop
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200008f0 	.word	0x200008f0
 8007f80:	200008f4 	.word	0x200008f4

08007f84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007f88:	f000 f95e 	bl	8008248 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007f8c:	4b12      	ldr	r3, [pc, #72]	; (8007fd8 <prvCheckForValidListAndQueue+0x54>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d11d      	bne.n	8007fd0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007f94:	4811      	ldr	r0, [pc, #68]	; (8007fdc <prvCheckForValidListAndQueue+0x58>)
 8007f96:	f7fe f9b5 	bl	8006304 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007f9a:	4811      	ldr	r0, [pc, #68]	; (8007fe0 <prvCheckForValidListAndQueue+0x5c>)
 8007f9c:	f7fe f9b2 	bl	8006304 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007fa0:	4b10      	ldr	r3, [pc, #64]	; (8007fe4 <prvCheckForValidListAndQueue+0x60>)
 8007fa2:	4a0e      	ldr	r2, [pc, #56]	; (8007fdc <prvCheckForValidListAndQueue+0x58>)
 8007fa4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007fa6:	4b10      	ldr	r3, [pc, #64]	; (8007fe8 <prvCheckForValidListAndQueue+0x64>)
 8007fa8:	4a0d      	ldr	r2, [pc, #52]	; (8007fe0 <prvCheckForValidListAndQueue+0x5c>)
 8007faa:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007fac:	2200      	movs	r2, #0
 8007fae:	210c      	movs	r1, #12
 8007fb0:	200a      	movs	r0, #10
 8007fb2:	f7fe fac7 	bl	8006544 <xQueueGenericCreate>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4a07      	ldr	r2, [pc, #28]	; (8007fd8 <prvCheckForValidListAndQueue+0x54>)
 8007fba:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007fbc:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <prvCheckForValidListAndQueue+0x54>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007fc4:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <prvCheckForValidListAndQueue+0x54>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4908      	ldr	r1, [pc, #32]	; (8007fec <prvCheckForValidListAndQueue+0x68>)
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fcd0 	bl	8006970 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007fd0:	f000 f96a 	bl	80082a8 <vPortExitCritical>
    }
 8007fd4:	bf00      	nop
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	200008f8 	.word	0x200008f8
 8007fdc:	200008c8 	.word	0x200008c8
 8007fe0:	200008dc 	.word	0x200008dc
 8007fe4:	200008f0 	.word	0x200008f0
 8007fe8:	200008f4 	.word	0x200008f4
 8007fec:	0800ca48 	.word	0x0800ca48

08007ff0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	3b04      	subs	r3, #4
 8008000:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008008:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3b04      	subs	r3, #4
 800800e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f023 0201 	bic.w	r2, r3, #1
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	3b04      	subs	r3, #4
 800801e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008020:	4a0c      	ldr	r2, [pc, #48]	; (8008054 <pxPortInitialiseStack+0x64>)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3b14      	subs	r3, #20
 800802a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	3b04      	subs	r3, #4
 8008036:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f06f 0202 	mvn.w	r2, #2
 800803e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3b20      	subs	r3, #32
 8008044:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008046:	68fb      	ldr	r3, [r7, #12]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	08008059 	.word	0x08008059

08008058 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008062:	4b12      	ldr	r3, [pc, #72]	; (80080ac <prvTaskExitError+0x54>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806a:	d00a      	beq.n	8008082 <prvTaskExitError+0x2a>
        __asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	60fb      	str	r3, [r7, #12]
    }
 800807e:	bf00      	nop
 8008080:	e7fe      	b.n	8008080 <prvTaskExitError+0x28>
        __asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	60bb      	str	r3, [r7, #8]
    }
 8008094:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008096:	bf00      	nop
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d0fc      	beq.n	8008098 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800809e:	bf00      	nop
 80080a0:	bf00      	nop
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20000010 	.word	0x20000010

080080b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80080b0:	4b07      	ldr	r3, [pc, #28]	; (80080d0 <pxCurrentTCBConst2>)
 80080b2:	6819      	ldr	r1, [r3, #0]
 80080b4:	6808      	ldr	r0, [r1, #0]
 80080b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ba:	f380 8809 	msr	PSP, r0
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f04f 0000 	mov.w	r0, #0
 80080c6:	f380 8811 	msr	BASEPRI, r0
 80080ca:	4770      	bx	lr
 80080cc:	f3af 8000 	nop.w

080080d0 <pxCurrentTCBConst2>:
 80080d0:	200007c4 	.word	0x200007c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop

080080d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80080d8:	4808      	ldr	r0, [pc, #32]	; (80080fc <prvPortStartFirstTask+0x24>)
 80080da:	6800      	ldr	r0, [r0, #0]
 80080dc:	6800      	ldr	r0, [r0, #0]
 80080de:	f380 8808 	msr	MSP, r0
 80080e2:	f04f 0000 	mov.w	r0, #0
 80080e6:	f380 8814 	msr	CONTROL, r0
 80080ea:	b662      	cpsie	i
 80080ec:	b661      	cpsie	f
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	df00      	svc	0
 80080f8:	bf00      	nop
 80080fa:	0000      	.short	0x0000
 80080fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008100:	bf00      	nop
 8008102:	bf00      	nop

08008104 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800810a:	4b46      	ldr	r3, [pc, #280]	; (8008224 <xPortStartScheduler+0x120>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a46      	ldr	r2, [pc, #280]	; (8008228 <xPortStartScheduler+0x124>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d10a      	bne.n	800812a <xPortStartScheduler+0x26>
        __asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	613b      	str	r3, [r7, #16]
    }
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800812a:	4b3e      	ldr	r3, [pc, #248]	; (8008224 <xPortStartScheduler+0x120>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a3f      	ldr	r2, [pc, #252]	; (800822c <xPortStartScheduler+0x128>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d10a      	bne.n	800814a <xPortStartScheduler+0x46>
        __asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	60fb      	str	r3, [r7, #12]
    }
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800814a:	4b39      	ldr	r3, [pc, #228]	; (8008230 <xPortStartScheduler+0x12c>)
 800814c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	22ff      	movs	r2, #255	; 0xff
 800815a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	b2db      	uxtb	r3, r3
 8008162:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	b2db      	uxtb	r3, r3
 8008168:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800816c:	b2da      	uxtb	r2, r3
 800816e:	4b31      	ldr	r3, [pc, #196]	; (8008234 <xPortStartScheduler+0x130>)
 8008170:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008172:	4b31      	ldr	r3, [pc, #196]	; (8008238 <xPortStartScheduler+0x134>)
 8008174:	2207      	movs	r2, #7
 8008176:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008178:	e009      	b.n	800818e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800817a:	4b2f      	ldr	r3, [pc, #188]	; (8008238 <xPortStartScheduler+0x134>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3b01      	subs	r3, #1
 8008180:	4a2d      	ldr	r2, [pc, #180]	; (8008238 <xPortStartScheduler+0x134>)
 8008182:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008184:	78fb      	ldrb	r3, [r7, #3]
 8008186:	b2db      	uxtb	r3, r3
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	b2db      	uxtb	r3, r3
 800818c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008196:	2b80      	cmp	r3, #128	; 0x80
 8008198:	d0ef      	beq.n	800817a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800819a:	4b27      	ldr	r3, [pc, #156]	; (8008238 <xPortStartScheduler+0x134>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f1c3 0307 	rsb	r3, r3, #7
 80081a2:	2b04      	cmp	r3, #4
 80081a4:	d00a      	beq.n	80081bc <xPortStartScheduler+0xb8>
        __asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	60bb      	str	r3, [r7, #8]
    }
 80081b8:	bf00      	nop
 80081ba:	e7fe      	b.n	80081ba <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081bc:	4b1e      	ldr	r3, [pc, #120]	; (8008238 <xPortStartScheduler+0x134>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	4a1d      	ldr	r2, [pc, #116]	; (8008238 <xPortStartScheduler+0x134>)
 80081c4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081c6:	4b1c      	ldr	r3, [pc, #112]	; (8008238 <xPortStartScheduler+0x134>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081ce:	4a1a      	ldr	r2, [pc, #104]	; (8008238 <xPortStartScheduler+0x134>)
 80081d0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80081da:	4b18      	ldr	r3, [pc, #96]	; (800823c <xPortStartScheduler+0x138>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a17      	ldr	r2, [pc, #92]	; (800823c <xPortStartScheduler+0x138>)
 80081e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80081e6:	4b15      	ldr	r3, [pc, #84]	; (800823c <xPortStartScheduler+0x138>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a14      	ldr	r2, [pc, #80]	; (800823c <xPortStartScheduler+0x138>)
 80081ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80081f2:	f000 f8e3 	bl	80083bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80081f6:	4b12      	ldr	r3, [pc, #72]	; (8008240 <xPortStartScheduler+0x13c>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80081fc:	f000 f902 	bl	8008404 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008200:	4b10      	ldr	r3, [pc, #64]	; (8008244 <xPortStartScheduler+0x140>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a0f      	ldr	r2, [pc, #60]	; (8008244 <xPortStartScheduler+0x140>)
 8008206:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800820a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800820c:	f7ff ff64 	bl	80080d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008210:	f7ff f85a 	bl	80072c8 <vTaskSwitchContext>
    prvTaskExitError();
 8008214:	f7ff ff20 	bl	8008058 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	e000ed00 	.word	0xe000ed00
 8008228:	410fc271 	.word	0x410fc271
 800822c:	410fc270 	.word	0x410fc270
 8008230:	e000e400 	.word	0xe000e400
 8008234:	20000904 	.word	0x20000904
 8008238:	20000908 	.word	0x20000908
 800823c:	e000ed20 	.word	0xe000ed20
 8008240:	20000010 	.word	0x20000010
 8008244:	e000ef34 	.word	0xe000ef34

08008248 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
        __asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	607b      	str	r3, [r7, #4]
    }
 8008260:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008262:	4b0f      	ldr	r3, [pc, #60]	; (80082a0 <vPortEnterCritical+0x58>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3301      	adds	r3, #1
 8008268:	4a0d      	ldr	r2, [pc, #52]	; (80082a0 <vPortEnterCritical+0x58>)
 800826a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800826c:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <vPortEnterCritical+0x58>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d10f      	bne.n	8008294 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008274:	4b0b      	ldr	r3, [pc, #44]	; (80082a4 <vPortEnterCritical+0x5c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <vPortEnterCritical+0x4c>
        __asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	603b      	str	r3, [r7, #0]
    }
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <vPortEnterCritical+0x4a>
    }
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	20000010 	.word	0x20000010
 80082a4:	e000ed04 	.word	0xe000ed04

080082a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80082ae:	4b12      	ldr	r3, [pc, #72]	; (80082f8 <vPortExitCritical+0x50>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10a      	bne.n	80082cc <vPortExitCritical+0x24>
        __asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	607b      	str	r3, [r7, #4]
    }
 80082c8:	bf00      	nop
 80082ca:	e7fe      	b.n	80082ca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80082cc:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <vPortExitCritical+0x50>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	4a09      	ldr	r2, [pc, #36]	; (80082f8 <vPortExitCritical+0x50>)
 80082d4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80082d6:	4b08      	ldr	r3, [pc, #32]	; (80082f8 <vPortExitCritical+0x50>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d105      	bne.n	80082ea <vPortExitCritical+0x42>
 80082de:	2300      	movs	r3, #0
 80082e0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80082e8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	20000010 	.word	0x20000010
 80082fc:	00000000 	.word	0x00000000

08008300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008300:	f3ef 8009 	mrs	r0, PSP
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	4b15      	ldr	r3, [pc, #84]	; (8008360 <pxCurrentTCBConst>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	f01e 0f10 	tst.w	lr, #16
 8008310:	bf08      	it	eq
 8008312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831a:	6010      	str	r0, [r2, #0]
 800831c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008324:	f380 8811 	msr	BASEPRI, r0
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f7fe ffca 	bl	80072c8 <vTaskSwitchContext>
 8008334:	f04f 0000 	mov.w	r0, #0
 8008338:	f380 8811 	msr	BASEPRI, r0
 800833c:	bc09      	pop	{r0, r3}
 800833e:	6819      	ldr	r1, [r3, #0]
 8008340:	6808      	ldr	r0, [r1, #0]
 8008342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008346:	f01e 0f10 	tst.w	lr, #16
 800834a:	bf08      	it	eq
 800834c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008350:	f380 8809 	msr	PSP, r0
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	f3af 8000 	nop.w

08008360 <pxCurrentTCBConst>:
 8008360:	200007c4 	.word	0x200007c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop

08008368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
        __asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	607b      	str	r3, [r7, #4]
    }
 8008380:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8008382:	f001 fb3f 	bl	8009a04 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008386:	f7fe fe85 	bl	8007094 <xTaskIncrementTick>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d006      	beq.n	800839e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8008390:	f001 fb96 	bl	8009ac0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008394:	4b08      	ldr	r3, [pc, #32]	; (80083b8 <SysTick_Handler+0x50>)
 8008396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	e001      	b.n	80083a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800839e:	f001 fb73 	bl	8009a88 <SEGGER_SYSVIEW_RecordExitISR>
 80083a2:	2300      	movs	r3, #0
 80083a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	f383 8811 	msr	BASEPRI, r3
    }
 80083ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80083ae:	bf00      	nop
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80083bc:	b480      	push	{r7}
 80083be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083c0:	4b0b      	ldr	r3, [pc, #44]	; (80083f0 <vPortSetupTimerInterrupt+0x34>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083c6:	4b0b      	ldr	r3, [pc, #44]	; (80083f4 <vPortSetupTimerInterrupt+0x38>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083cc:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <vPortSetupTimerInterrupt+0x3c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a0a      	ldr	r2, [pc, #40]	; (80083fc <vPortSetupTimerInterrupt+0x40>)
 80083d2:	fba2 2303 	umull	r2, r3, r2, r3
 80083d6:	099b      	lsrs	r3, r3, #6
 80083d8:	4a09      	ldr	r2, [pc, #36]	; (8008400 <vPortSetupTimerInterrupt+0x44>)
 80083da:	3b01      	subs	r3, #1
 80083dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083de:	4b04      	ldr	r3, [pc, #16]	; (80083f0 <vPortSetupTimerInterrupt+0x34>)
 80083e0:	2207      	movs	r2, #7
 80083e2:	601a      	str	r2, [r3, #0]
}
 80083e4:	bf00      	nop
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	e000e010 	.word	0xe000e010
 80083f4:	e000e018 	.word	0xe000e018
 80083f8:	20000000 	.word	0x20000000
 80083fc:	10624dd3 	.word	0x10624dd3
 8008400:	e000e014 	.word	0xe000e014

08008404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008414 <vPortEnableVFP+0x10>
 8008408:	6801      	ldr	r1, [r0, #0]
 800840a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800840e:	6001      	str	r1, [r0, #0]
 8008410:	4770      	bx	lr
 8008412:	0000      	.short	0x0000
 8008414:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008418:	bf00      	nop
 800841a:	bf00      	nop

0800841c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08a      	sub	sp, #40	; 0x28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008424:	2300      	movs	r3, #0
 8008426:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8008428:	f7fe fd16 	bl	8006e58 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800842c:	4b53      	ldr	r3, [pc, #332]	; (800857c <pvPortMalloc+0x160>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d101      	bne.n	8008438 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008434:	f000 f908 	bl	8008648 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d012      	beq.n	8008464 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800843e:	2208      	movs	r2, #8
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f003 0307 	and.w	r3, r3, #7
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	3308      	adds	r3, #8
 800844a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	43db      	mvns	r3, r3
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	429a      	cmp	r2, r3
 8008454:	d804      	bhi.n	8008460 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	4413      	add	r3, r2
 800845c:	607b      	str	r3, [r7, #4]
 800845e:	e001      	b.n	8008464 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8008460:	2300      	movs	r3, #0
 8008462:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	db70      	blt.n	800854c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d06d      	beq.n	800854c <pvPortMalloc+0x130>
 8008470:	4b43      	ldr	r3, [pc, #268]	; (8008580 <pvPortMalloc+0x164>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	429a      	cmp	r2, r3
 8008478:	d868      	bhi.n	800854c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800847a:	4b42      	ldr	r3, [pc, #264]	; (8008584 <pvPortMalloc+0x168>)
 800847c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800847e:	4b41      	ldr	r3, [pc, #260]	; (8008584 <pvPortMalloc+0x168>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008484:	e004      	b.n	8008490 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	429a      	cmp	r2, r3
 8008498:	d903      	bls.n	80084a2 <pvPortMalloc+0x86>
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1f1      	bne.n	8008486 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80084a2:	4b36      	ldr	r3, [pc, #216]	; (800857c <pvPortMalloc+0x160>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d04f      	beq.n	800854c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2208      	movs	r2, #8
 80084b2:	4413      	add	r3, r2
 80084b4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	685a      	ldr	r2, [r3, #4]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	1ad2      	subs	r2, r2, r3
 80084c6:	2308      	movs	r3, #8
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d91f      	bls.n	800850e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4413      	add	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f003 0307 	and.w	r3, r3, #7
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00a      	beq.n	80084f6 <pvPortMalloc+0xda>
        __asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	613b      	str	r3, [r7, #16]
    }
 80084f2:	bf00      	nop
 80084f4:	e7fe      	b.n	80084f4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	1ad2      	subs	r2, r2, r3
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008508:	6978      	ldr	r0, [r7, #20]
 800850a:	f000 f8f9 	bl	8008700 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800850e:	4b1c      	ldr	r3, [pc, #112]	; (8008580 <pvPortMalloc+0x164>)
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	4a19      	ldr	r2, [pc, #100]	; (8008580 <pvPortMalloc+0x164>)
 800851a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800851c:	4b18      	ldr	r3, [pc, #96]	; (8008580 <pvPortMalloc+0x164>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	4b19      	ldr	r3, [pc, #100]	; (8008588 <pvPortMalloc+0x16c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	429a      	cmp	r2, r3
 8008526:	d203      	bcs.n	8008530 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008528:	4b15      	ldr	r3, [pc, #84]	; (8008580 <pvPortMalloc+0x164>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a16      	ldr	r2, [pc, #88]	; (8008588 <pvPortMalloc+0x16c>)
 800852e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008542:	4b12      	ldr	r3, [pc, #72]	; (800858c <pvPortMalloc+0x170>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3301      	adds	r3, #1
 8008548:	4a10      	ldr	r2, [pc, #64]	; (800858c <pvPortMalloc+0x170>)
 800854a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800854c:	f7fe fc92 	bl	8006e74 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	f003 0307 	and.w	r3, r3, #7
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <pvPortMalloc+0x154>
        __asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	60fb      	str	r3, [r7, #12]
    }
 800856c:	bf00      	nop
 800856e:	e7fe      	b.n	800856e <pvPortMalloc+0x152>
    return pvReturn;
 8008570:	69fb      	ldr	r3, [r7, #28]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3728      	adds	r7, #40	; 0x28
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20013514 	.word	0x20013514
 8008580:	20013518 	.word	0x20013518
 8008584:	2001350c 	.word	0x2001350c
 8008588:	2001351c 	.word	0x2001351c
 800858c:	20013520 	.word	0x20013520

08008590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d049      	beq.n	8008636 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80085a2:	2308      	movs	r3, #8
 80085a4:	425b      	negs	r3, r3
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	4413      	add	r3, r2
 80085aa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	db0a      	blt.n	80085ce <vPortFree+0x3e>
        __asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	60fb      	str	r3, [r7, #12]
    }
 80085ca:	bf00      	nop
 80085cc:	e7fe      	b.n	80085cc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00a      	beq.n	80085ec <vPortFree+0x5c>
        __asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60bb      	str	r3, [r7, #8]
    }
 80085e8:	bf00      	nop
 80085ea:	e7fe      	b.n	80085ea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	0fdb      	lsrs	r3, r3, #31
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d01c      	beq.n	8008636 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d118      	bne.n	8008636 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8008610:	f7fe fc22 	bl	8006e58 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	685a      	ldr	r2, [r3, #4]
 8008618:	4b09      	ldr	r3, [pc, #36]	; (8008640 <vPortFree+0xb0>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4413      	add	r3, r2
 800861e:	4a08      	ldr	r2, [pc, #32]	; (8008640 <vPortFree+0xb0>)
 8008620:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008622:	6938      	ldr	r0, [r7, #16]
 8008624:	f000 f86c 	bl	8008700 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008628:	4b06      	ldr	r3, [pc, #24]	; (8008644 <vPortFree+0xb4>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3301      	adds	r3, #1
 800862e:	4a05      	ldr	r2, [pc, #20]	; (8008644 <vPortFree+0xb4>)
 8008630:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008632:	f7fe fc1f 	bl	8006e74 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008636:	bf00      	nop
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	20013518 	.word	0x20013518
 8008644:	20013524 	.word	0x20013524

08008648 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800864e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8008652:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008654:	4b25      	ldr	r3, [pc, #148]	; (80086ec <prvHeapInit+0xa4>)
 8008656:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f003 0307 	and.w	r3, r3, #7
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00c      	beq.n	800867c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3307      	adds	r3, #7
 8008666:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0307 	bic.w	r3, r3, #7
 800866e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	4a1d      	ldr	r2, [pc, #116]	; (80086ec <prvHeapInit+0xa4>)
 8008678:	4413      	add	r3, r2
 800867a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008680:	4a1b      	ldr	r2, [pc, #108]	; (80086f0 <prvHeapInit+0xa8>)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008686:	4b1a      	ldr	r3, [pc, #104]	; (80086f0 <prvHeapInit+0xa8>)
 8008688:	2200      	movs	r2, #0
 800868a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	4413      	add	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008694:	2208      	movs	r2, #8
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	1a9b      	subs	r3, r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f023 0307 	bic.w	r3, r3, #7
 80086a2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4a13      	ldr	r2, [pc, #76]	; (80086f4 <prvHeapInit+0xac>)
 80086a8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80086aa:	4b12      	ldr	r3, [pc, #72]	; (80086f4 <prvHeapInit+0xac>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2200      	movs	r2, #0
 80086b0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80086b2:	4b10      	ldr	r3, [pc, #64]	; (80086f4 <prvHeapInit+0xac>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2200      	movs	r2, #0
 80086b8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	1ad2      	subs	r2, r2, r3
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086c8:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <prvHeapInit+0xac>)
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	4a08      	ldr	r2, [pc, #32]	; (80086f8 <prvHeapInit+0xb0>)
 80086d6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	4a07      	ldr	r2, [pc, #28]	; (80086fc <prvHeapInit+0xb4>)
 80086de:	6013      	str	r3, [r2, #0]
}
 80086e0:	bf00      	nop
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	2000090c 	.word	0x2000090c
 80086f0:	2001350c 	.word	0x2001350c
 80086f4:	20013514 	.word	0x20013514
 80086f8:	2001351c 	.word	0x2001351c
 80086fc:	20013518 	.word	0x20013518

08008700 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008708:	4b28      	ldr	r3, [pc, #160]	; (80087ac <prvInsertBlockIntoFreeList+0xac>)
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	e002      	b.n	8008714 <prvInsertBlockIntoFreeList+0x14>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	429a      	cmp	r2, r3
 800871c:	d8f7      	bhi.n	800870e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	4413      	add	r3, r2
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	429a      	cmp	r2, r3
 800872e:	d108      	bne.n	8008742 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	441a      	add	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	441a      	add	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	429a      	cmp	r2, r3
 8008754:	d118      	bne.n	8008788 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	4b15      	ldr	r3, [pc, #84]	; (80087b0 <prvInsertBlockIntoFreeList+0xb0>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	429a      	cmp	r2, r3
 8008760:	d00d      	beq.n	800877e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	441a      	add	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	e008      	b.n	8008790 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800877e:	4b0c      	ldr	r3, [pc, #48]	; (80087b0 <prvInsertBlockIntoFreeList+0xb0>)
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	e003      	b.n	8008790 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	429a      	cmp	r2, r3
 8008796:	d002      	beq.n	800879e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800879e:	bf00      	nop
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	2001350c 	.word	0x2001350c
 80087b0:	20013514 	.word	0x20013514

080087b4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80087c2:	2205      	movs	r2, #5
 80087c4:	492b      	ldr	r1, [pc, #172]	; (8008874 <SYSVIEW_AddTask+0xc0>)
 80087c6:	68b8      	ldr	r0, [r7, #8]
 80087c8:	f002 f93d 	bl	800aa46 <memcmp>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d04b      	beq.n	800886a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80087d2:	4b29      	ldr	r3, [pc, #164]	; (8008878 <SYSVIEW_AddTask+0xc4>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b07      	cmp	r3, #7
 80087d8:	d903      	bls.n	80087e2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80087da:	4828      	ldr	r0, [pc, #160]	; (800887c <SYSVIEW_AddTask+0xc8>)
 80087dc:	f001 fb5a 	bl	8009e94 <SEGGER_SYSVIEW_Warn>
    return;
 80087e0:	e044      	b.n	800886c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80087e2:	4b25      	ldr	r3, [pc, #148]	; (8008878 <SYSVIEW_AddTask+0xc4>)
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	4926      	ldr	r1, [pc, #152]	; (8008880 <SYSVIEW_AddTask+0xcc>)
 80087e8:	4613      	mov	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	440b      	add	r3, r1
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80087f6:	4b20      	ldr	r3, [pc, #128]	; (8008878 <SYSVIEW_AddTask+0xc4>)
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	4921      	ldr	r1, [pc, #132]	; (8008880 <SYSVIEW_AddTask+0xcc>)
 80087fc:	4613      	mov	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	440b      	add	r3, r1
 8008806:	3304      	adds	r3, #4
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800880c:	4b1a      	ldr	r3, [pc, #104]	; (8008878 <SYSVIEW_AddTask+0xc4>)
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	491b      	ldr	r1, [pc, #108]	; (8008880 <SYSVIEW_AddTask+0xcc>)
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	440b      	add	r3, r1
 800881c:	3308      	adds	r3, #8
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8008822:	4b15      	ldr	r3, [pc, #84]	; (8008878 <SYSVIEW_AddTask+0xc4>)
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	4916      	ldr	r1, [pc, #88]	; (8008880 <SYSVIEW_AddTask+0xcc>)
 8008828:	4613      	mov	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	440b      	add	r3, r1
 8008832:	330c      	adds	r3, #12
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008838:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <SYSVIEW_AddTask+0xc4>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	4910      	ldr	r1, [pc, #64]	; (8008880 <SYSVIEW_AddTask+0xcc>)
 800883e:	4613      	mov	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	440b      	add	r3, r1
 8008848:	3310      	adds	r3, #16
 800884a:	69ba      	ldr	r2, [r7, #24]
 800884c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800884e:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <SYSVIEW_AddTask+0xc4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3301      	adds	r3, #1
 8008854:	4a08      	ldr	r2, [pc, #32]	; (8008878 <SYSVIEW_AddTask+0xc4>)
 8008856:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	68b9      	ldr	r1, [r7, #8]
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 f80e 	bl	8008884 <SYSVIEW_SendTaskInfo>
 8008868:	e000      	b.n	800886c <SYSVIEW_AddTask+0xb8>
    return;
 800886a:	bf00      	nop

}
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	0800ca50 	.word	0x0800ca50
 8008878:	200135c8 	.word	0x200135c8
 800887c:	0800ca58 	.word	0x0800ca58
 8008880:	20013528 	.word	0x20013528

08008884 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8008884:	b580      	push	{r7, lr}
 8008886:	b08a      	sub	sp, #40	; 0x28
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8008892:	f107 0314 	add.w	r3, r7, #20
 8008896:	2214      	movs	r2, #20
 8008898:	2100      	movs	r1, #0
 800889a:	4618      	mov	r0, r3
 800889c:	f002 f8e3 	bl	800aa66 <memset>
  TaskInfo.TaskID     = TaskID;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80088b4:	f107 0314 	add.w	r3, r7, #20
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 ff79 	bl	80097b0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80088be:	bf00      	nop
 80088c0:	3728      	adds	r7, #40	; 0x28
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80088ce:	4b24      	ldr	r3, [pc, #144]	; (8008960 <_DoInit+0x98>)
 80088d0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2203      	movs	r2, #3
 80088d6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2203      	movs	r2, #3
 80088dc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a20      	ldr	r2, [pc, #128]	; (8008964 <_DoInit+0x9c>)
 80088e2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a20      	ldr	r2, [pc, #128]	; (8008968 <_DoInit+0xa0>)
 80088e8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088f0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a17      	ldr	r2, [pc, #92]	; (8008964 <_DoInit+0x9c>)
 8008908:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a17      	ldr	r2, [pc, #92]	; (800896c <_DoInit+0xa4>)
 800890e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2210      	movs	r2, #16
 8008914:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3307      	adds	r3, #7
 800892c:	4a10      	ldr	r2, [pc, #64]	; (8008970 <_DoInit+0xa8>)
 800892e:	6810      	ldr	r0, [r2, #0]
 8008930:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008932:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a0e      	ldr	r2, [pc, #56]	; (8008974 <_DoInit+0xac>)
 800893a:	6810      	ldr	r0, [r2, #0]
 800893c:	6018      	str	r0, [r3, #0]
 800893e:	8891      	ldrh	r1, [r2, #4]
 8008940:	7992      	ldrb	r2, [r2, #6]
 8008942:	8099      	strh	r1, [r3, #4]
 8008944:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008946:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2220      	movs	r2, #32
 800894e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008950:	f3bf 8f5f 	dmb	sy
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	200135cc 	.word	0x200135cc
 8008964:	0800caa8 	.word	0x0800caa8
 8008968:	20013674 	.word	0x20013674
 800896c:	20013a74 	.word	0x20013a74
 8008970:	0800cab4 	.word	0x0800cab4
 8008974:	0800cab8 	.word	0x0800cab8

08008978 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8008978:	b580      	push	{r7, lr}
 800897a:	b08a      	sub	sp, #40	; 0x28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8008984:	2300      	movs	r3, #0
 8008986:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8008994:	69ba      	ldr	r2, [r7, #24]
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	429a      	cmp	r2, r3
 800899a:	d905      	bls.n	80089a8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	3b01      	subs	r3, #1
 80089a4:	627b      	str	r3, [r7, #36]	; 0x24
 80089a6:	e007      	b.n	80089b8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	69b9      	ldr	r1, [r7, #24]
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	1acb      	subs	r3, r1, r3
 80089b2:	4413      	add	r3, r2
 80089b4:	3b01      	subs	r3, #1
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	689a      	ldr	r2, [r3, #8]
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c2:	4293      	cmp	r3, r2
 80089c4:	bf28      	it	cs
 80089c6:	4613      	movcs	r3, r2
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80089ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4293      	cmp	r3, r2
 80089d0:	bf28      	it	cs
 80089d2:	4613      	movcs	r3, r2
 80089d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	4413      	add	r3, r2
 80089de:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80089e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e2:	68b9      	ldr	r1, [r7, #8]
 80089e4:	6978      	ldr	r0, [r7, #20]
 80089e6:	f002 f8ac 	bl	800ab42 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80089ea:	6a3a      	ldr	r2, [r7, #32]
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	4413      	add	r3, r2
 80089f0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	4413      	add	r3, r2
 80089f8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8008a02:	69fa      	ldr	r2, [r7, #28]
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	4413      	add	r3, r2
 8008a08:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	69fa      	ldr	r2, [r7, #28]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d101      	bne.n	8008a18 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8008a14:	2300      	movs	r3, #0
 8008a16:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008a18:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	69fa      	ldr	r2, [r7, #28]
 8008a20:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1b2      	bne.n	800898e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8008a28:	6a3b      	ldr	r3, [r7, #32]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3728      	adds	r7, #40	; 0x28
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b088      	sub	sp, #32
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	689a      	ldr	r2, [r3, #8]
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8008a4e:	69ba      	ldr	r2, [r7, #24]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d911      	bls.n	8008a7a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	68b9      	ldr	r1, [r7, #8]
 8008a64:	6938      	ldr	r0, [r7, #16]
 8008a66:	f002 f86c 	bl	800ab42 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008a6a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8008a6e:	69fa      	ldr	r2, [r7, #28]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	441a      	add	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8008a78:	e01f      	b.n	8008aba <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4413      	add	r3, r2
 8008a86:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	6938      	ldr	r0, [r7, #16]
 8008a8e:	f002 f858 	bl	800ab42 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6938      	ldr	r0, [r7, #16]
 8008aac:	f002 f849 	bl	800ab42 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008ab0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	60da      	str	r2, [r3, #12]
}
 8008aba:	bf00      	nop
 8008abc:	3720      	adds	r7, #32
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8008ac2:	b480      	push	{r7}
 8008ac4:	b087      	sub	sp, #28
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d808      	bhi.n	8008af0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	689a      	ldr	r2, [r3, #8]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	1ad2      	subs	r2, r2, r3
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	4413      	add	r3, r2
 8008aea:	3b01      	subs	r3, #1
 8008aec:	617b      	str	r3, [r7, #20]
 8008aee:	e004      	b.n	8008afa <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	3b01      	subs	r3, #1
 8008af8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8008afa:	697b      	ldr	r3, [r7, #20]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	371c      	adds	r7, #28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08c      	sub	sp, #48	; 0x30
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008b14:	4b3e      	ldr	r3, [pc, #248]	; (8008c10 <SEGGER_RTT_ReadNoLock+0x108>)
 8008b16:	623b      	str	r3, [r7, #32]
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <SEGGER_RTT_ReadNoLock+0x1e>
 8008b22:	f7ff fed1 	bl	80088c8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	4413      	add	r3, r2
 8008b2e:	00db      	lsls	r3, r3, #3
 8008b30:	3360      	adds	r3, #96	; 0x60
 8008b32:	4a37      	ldr	r2, [pc, #220]	; (8008c10 <SEGGER_RTT_ReadNoLock+0x108>)
 8008b34:	4413      	add	r3, r2
 8008b36:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8008b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d92b      	bls.n	8008bac <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4293      	cmp	r3, r2
 8008b64:	bf28      	it	cs
 8008b66:	4613      	movcs	r3, r2
 8008b68:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b70:	4413      	add	r3, r2
 8008b72:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	6939      	ldr	r1, [r7, #16]
 8008b78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b7a:	f001 ffe2 	bl	800ab42 <memcpy>
    NumBytesRead += NumBytesRem;
 8008b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	4413      	add	r3, r2
 8008b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d101      	bne.n	8008bac <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008bb4:	697a      	ldr	r2, [r7, #20]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	bf28      	it	cs
 8008bbc:	4613      	movcs	r3, r2
 8008bbe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d019      	beq.n	8008bfa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	685a      	ldr	r2, [r3, #4]
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	4413      	add	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	6939      	ldr	r1, [r7, #16]
 8008bd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bd6:	f001 ffb4 	bl	800ab42 <memcpy>
    NumBytesRead += NumBytesRem;
 8008bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	4413      	add	r3, r2
 8008be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	4413      	add	r3, r2
 8008be8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c04:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3730      	adds	r7, #48	; 0x30
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	200135cc 	.word	0x200135cc

08008c14 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b088      	sub	sp, #32
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	4613      	mov	r3, r2
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	4413      	add	r3, r2
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	4a1f      	ldr	r2, [pc, #124]	; (8008cb0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8008c32:	4413      	add	r3, r2
 8008c34:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d029      	beq.n	8008c92 <SEGGER_RTT_WriteNoLock+0x7e>
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d82e      	bhi.n	8008ca0 <SEGGER_RTT_WriteNoLock+0x8c>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d002      	beq.n	8008c4c <SEGGER_RTT_WriteNoLock+0x38>
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d013      	beq.n	8008c72 <SEGGER_RTT_WriteNoLock+0x5e>
 8008c4a:	e029      	b.n	8008ca0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008c4c:	6978      	ldr	r0, [r7, #20]
 8008c4e:	f7ff ff38 	bl	8008ac2 <_GetAvailWriteSpace>
 8008c52:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d202      	bcs.n	8008c62 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8008c60:	e021      	b.n	8008ca6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	69b9      	ldr	r1, [r7, #24]
 8008c6a:	6978      	ldr	r0, [r7, #20]
 8008c6c:	f7ff fee1 	bl	8008a32 <_WriteNoCheck>
    break;
 8008c70:	e019      	b.n	8008ca6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008c72:	6978      	ldr	r0, [r7, #20]
 8008c74:	f7ff ff25 	bl	8008ac2 <_GetAvailWriteSpace>
 8008c78:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	bf28      	it	cs
 8008c82:	4613      	movcs	r3, r2
 8008c84:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8008c86:	69fa      	ldr	r2, [r7, #28]
 8008c88:	69b9      	ldr	r1, [r7, #24]
 8008c8a:	6978      	ldr	r0, [r7, #20]
 8008c8c:	f7ff fed1 	bl	8008a32 <_WriteNoCheck>
    break;
 8008c90:	e009      	b.n	8008ca6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	69b9      	ldr	r1, [r7, #24]
 8008c96:	6978      	ldr	r0, [r7, #20]
 8008c98:	f7ff fe6e 	bl	8008978 <_WriteBlocking>
 8008c9c:	61f8      	str	r0, [r7, #28]
    break;
 8008c9e:	e002      	b.n	8008ca6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	61fb      	str	r3, [r7, #28]
    break;
 8008ca4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3720      	adds	r7, #32
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	200135cc 	.word	0x200135cc

08008cb4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8008cc0:	4b0e      	ldr	r3, [pc, #56]	; (8008cfc <SEGGER_RTT_Write+0x48>)
 8008cc2:	61fb      	str	r3, [r7, #28]
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <SEGGER_RTT_Write+0x1e>
 8008cce:	f7ff fdfb 	bl	80088c8 <_DoInit>
  SEGGER_RTT_LOCK();
 8008cd2:	f3ef 8311 	mrs	r3, BASEPRI
 8008cd6:	f04f 0120 	mov.w	r1, #32
 8008cda:	f381 8811 	msr	BASEPRI, r1
 8008cde:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	68b9      	ldr	r1, [r7, #8]
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f7ff ff95 	bl	8008c14 <SEGGER_RTT_WriteNoLock>
 8008cea:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8008cf2:	697b      	ldr	r3, [r7, #20]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3720      	adds	r7, #32
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	200135cc 	.word	0x200135cc

08008d00 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8008d00:	b480      	push	{r7}
 8008d02:	b087      	sub	sp, #28
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8008d10:	e002      	b.n	8008d18 <_EncodeStr+0x18>
    Len++;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	3301      	adds	r3, #1
 8008d16:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1f6      	bne.n	8008d12 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d901      	bls.n	8008d30 <_EncodeStr+0x30>
    Len = Limit;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2bfe      	cmp	r3, #254	; 0xfe
 8008d34:	d806      	bhi.n	8008d44 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	60fa      	str	r2, [r7, #12]
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	b2d2      	uxtb	r2, r2
 8008d40:	701a      	strb	r2, [r3, #0]
 8008d42:	e011      	b.n	8008d68 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	1c5a      	adds	r2, r3, #1
 8008d48:	60fa      	str	r2, [r7, #12]
 8008d4a:	22ff      	movs	r2, #255	; 0xff
 8008d4c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	60fa      	str	r2, [r7, #12]
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	0a19      	lsrs	r1, r3, #8
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	1c5a      	adds	r2, r3, #1
 8008d62:	60fa      	str	r2, [r7, #12]
 8008d64:	b2ca      	uxtb	r2, r1
 8008d66:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008d6c:	e00a      	b.n	8008d84 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	1c53      	adds	r3, r2, #1
 8008d72:	60bb      	str	r3, [r7, #8]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	1c59      	adds	r1, r3, #1
 8008d78:	60f9      	str	r1, [r7, #12]
 8008d7a:	7812      	ldrb	r2, [r2, #0]
 8008d7c:	701a      	strb	r2, [r3, #0]
    n++;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	3301      	adds	r3, #1
 8008d82:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d3f0      	bcc.n	8008d6e <_EncodeStr+0x6e>
  }
  return pPayload;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	371c      	adds	r7, #28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3304      	adds	r3, #4
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
	...

08008db4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008dba:	4b35      	ldr	r3, [pc, #212]	; (8008e90 <_HandleIncomingPacket+0xdc>)
 8008dbc:	7e1b      	ldrb	r3, [r3, #24]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	1cfb      	adds	r3, r7, #3
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	f7ff fe9f 	bl	8008b08 <SEGGER_RTT_ReadNoLock>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	dd59      	ble.n	8008e88 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	2b80      	cmp	r3, #128	; 0x80
 8008dd8:	d032      	beq.n	8008e40 <_HandleIncomingPacket+0x8c>
 8008dda:	2b80      	cmp	r3, #128	; 0x80
 8008ddc:	dc42      	bgt.n	8008e64 <_HandleIncomingPacket+0xb0>
 8008dde:	2b07      	cmp	r3, #7
 8008de0:	dc16      	bgt.n	8008e10 <_HandleIncomingPacket+0x5c>
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	dd3e      	ble.n	8008e64 <_HandleIncomingPacket+0xb0>
 8008de6:	3b01      	subs	r3, #1
 8008de8:	2b06      	cmp	r3, #6
 8008dea:	d83b      	bhi.n	8008e64 <_HandleIncomingPacket+0xb0>
 8008dec:	a201      	add	r2, pc, #4	; (adr r2, 8008df4 <_HandleIncomingPacket+0x40>)
 8008dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df2:	bf00      	nop
 8008df4:	08008e17 	.word	0x08008e17
 8008df8:	08008e1d 	.word	0x08008e1d
 8008dfc:	08008e23 	.word	0x08008e23
 8008e00:	08008e29 	.word	0x08008e29
 8008e04:	08008e2f 	.word	0x08008e2f
 8008e08:	08008e35 	.word	0x08008e35
 8008e0c:	08008e3b 	.word	0x08008e3b
 8008e10:	2b7f      	cmp	r3, #127	; 0x7f
 8008e12:	d034      	beq.n	8008e7e <_HandleIncomingPacket+0xca>
 8008e14:	e026      	b.n	8008e64 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008e16:	f000 fb51 	bl	80094bc <SEGGER_SYSVIEW_Start>
      break;
 8008e1a:	e035      	b.n	8008e88 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8008e1c:	f000 fc08 	bl	8009630 <SEGGER_SYSVIEW_Stop>
      break;
 8008e20:	e032      	b.n	8008e88 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8008e22:	f000 fdbd 	bl	80099a0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008e26:	e02f      	b.n	8008e88 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008e28:	f000 fda6 	bl	8009978 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8008e2c:	e02c      	b.n	8008e88 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8008e2e:	f000 fc25 	bl	800967c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8008e32:	e029      	b.n	8008e88 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008e34:	f000 fff0 	bl	8009e18 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008e38:	e026      	b.n	8008e88 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8008e3a:	f000 ffcf 	bl	8009ddc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8008e3e:	e023      	b.n	8008e88 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008e40:	4b13      	ldr	r3, [pc, #76]	; (8008e90 <_HandleIncomingPacket+0xdc>)
 8008e42:	7e1b      	ldrb	r3, [r3, #24]
 8008e44:	4618      	mov	r0, r3
 8008e46:	1cfb      	adds	r3, r7, #3
 8008e48:	2201      	movs	r2, #1
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	f7ff fe5c 	bl	8008b08 <SEGGER_RTT_ReadNoLock>
 8008e50:	4603      	mov	r3, r0
 8008e52:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	dd13      	ble.n	8008e82 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8008e5a:	78fb      	ldrb	r3, [r7, #3]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 ff3d 	bl	8009cdc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8008e62:	e00e      	b.n	8008e82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	b25b      	sxtb	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	da0c      	bge.n	8008e86 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008e6c:	4b08      	ldr	r3, [pc, #32]	; (8008e90 <_HandleIncomingPacket+0xdc>)
 8008e6e:	7e1b      	ldrb	r3, [r3, #24]
 8008e70:	4618      	mov	r0, r3
 8008e72:	1cfb      	adds	r3, r7, #3
 8008e74:	2201      	movs	r2, #1
 8008e76:	4619      	mov	r1, r3
 8008e78:	f7ff fe46 	bl	8008b08 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8008e7c:	e003      	b.n	8008e86 <_HandleIncomingPacket+0xd2>
      break;
 8008e7e:	bf00      	nop
 8008e80:	e002      	b.n	8008e88 <_HandleIncomingPacket+0xd4>
      break;
 8008e82:	bf00      	nop
 8008e84:	e000      	b.n	8008e88 <_HandleIncomingPacket+0xd4>
      break;
 8008e86:	bf00      	nop
    }
  }
}
 8008e88:	bf00      	nop
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20013a84 	.word	0x20013a84

08008e94 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08c      	sub	sp, #48	; 0x30
 8008e98:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8008e9e:	1d3b      	adds	r3, r7, #4
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ea8:	4b31      	ldr	r3, [pc, #196]	; (8008f70 <_TrySendOverflowPacket+0xdc>)
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8008eae:	e00b      	b.n	8008ec8 <_TrySendOverflowPacket+0x34>
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb6:	1c59      	adds	r1, r3, #1
 8008eb8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ebe:	b2d2      	uxtb	r2, r2
 8008ec0:	701a      	strb	r2, [r3, #0]
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	09db      	lsrs	r3, r3, #7
 8008ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	2b7f      	cmp	r3, #127	; 0x7f
 8008ecc:	d8f0      	bhi.n	8008eb0 <_TrySendOverflowPacket+0x1c>
 8008ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed0:	1c5a      	adds	r2, r3, #1
 8008ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008edc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008ede:	4b25      	ldr	r3, [pc, #148]	; (8008f74 <_TrySendOverflowPacket+0xe0>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008ee4:	4b22      	ldr	r3, [pc, #136]	; (8008f70 <_TrySendOverflowPacket+0xdc>)
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	69ba      	ldr	r2, [r7, #24]
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	623b      	str	r3, [r7, #32]
 8008ef6:	e00b      	b.n	8008f10 <_TrySendOverflowPacket+0x7c>
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	1c59      	adds	r1, r3, #1
 8008f00:	6279      	str	r1, [r7, #36]	; 0x24
 8008f02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f06:	b2d2      	uxtb	r2, r2
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	09db      	lsrs	r3, r3, #7
 8008f0e:	623b      	str	r3, [r7, #32]
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	2b7f      	cmp	r3, #127	; 0x7f
 8008f14:	d8f0      	bhi.n	8008ef8 <_TrySendOverflowPacket+0x64>
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	1c5a      	adds	r2, r3, #1
 8008f1a:	627a      	str	r2, [r7, #36]	; 0x24
 8008f1c:	6a3a      	ldr	r2, [r7, #32]
 8008f1e:	b2d2      	uxtb	r2, r2
 8008f20:	701a      	strb	r2, [r3, #0]
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8008f26:	4b12      	ldr	r3, [pc, #72]	; (8008f70 <_TrySendOverflowPacket+0xdc>)
 8008f28:	785b      	ldrb	r3, [r3, #1]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	1d3b      	adds	r3, r7, #4
 8008f2e:	69fa      	ldr	r2, [r7, #28]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	1d3b      	adds	r3, r7, #4
 8008f36:	4619      	mov	r1, r3
 8008f38:	f7f7 f96a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d009      	beq.n	8008f5a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008f46:	4a0a      	ldr	r2, [pc, #40]	; (8008f70 <_TrySendOverflowPacket+0xdc>)
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8008f4c:	4b08      	ldr	r3, [pc, #32]	; (8008f70 <_TrySendOverflowPacket+0xdc>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	4b06      	ldr	r3, [pc, #24]	; (8008f70 <_TrySendOverflowPacket+0xdc>)
 8008f56:	701a      	strb	r2, [r3, #0]
 8008f58:	e004      	b.n	8008f64 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8008f5a:	4b05      	ldr	r3, [pc, #20]	; (8008f70 <_TrySendOverflowPacket+0xdc>)
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	4a03      	ldr	r2, [pc, #12]	; (8008f70 <_TrySendOverflowPacket+0xdc>)
 8008f62:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8008f64:	693b      	ldr	r3, [r7, #16]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3730      	adds	r7, #48	; 0x30
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20013a84 	.word	0x20013a84
 8008f74:	e0001004 	.word	0xe0001004

08008f78 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08a      	sub	sp, #40	; 0x28
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008f84:	4b6c      	ldr	r3, [pc, #432]	; (8009138 <_SendPacket+0x1c0>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d010      	beq.n	8008fae <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8008f8c:	4b6a      	ldr	r3, [pc, #424]	; (8009138 <_SendPacket+0x1c0>)
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 80a3 	beq.w	80090dc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8008f96:	4b68      	ldr	r3, [pc, #416]	; (8009138 <_SendPacket+0x1c0>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d109      	bne.n	8008fb2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8008f9e:	f7ff ff79 	bl	8008e94 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8008fa2:	4b65      	ldr	r3, [pc, #404]	; (8009138 <_SendPacket+0x1c0>)
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	f040 809a 	bne.w	80090e0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8008fac:	e001      	b.n	8008fb2 <_SendPacket+0x3a>
    goto Send;
 8008fae:	bf00      	nop
 8008fb0:	e000      	b.n	8008fb4 <_SendPacket+0x3c>
Send:
 8008fb2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b1f      	cmp	r3, #31
 8008fb8:	d809      	bhi.n	8008fce <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8008fba:	4b5f      	ldr	r3, [pc, #380]	; (8009138 <_SendPacket+0x1c0>)
 8008fbc:	69da      	ldr	r2, [r3, #28]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f040 808b 	bne.w	80090e4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b17      	cmp	r3, #23
 8008fd2:	d807      	bhi.n	8008fe4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	701a      	strb	r2, [r3, #0]
 8008fe2:	e03d      	b.n	8009060 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	2b7f      	cmp	r3, #127	; 0x7f
 8008ff0:	d912      	bls.n	8009018 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	09da      	lsrs	r2, r3, #7
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	b2d2      	uxtb	r2, r2
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	3a01      	subs	r2, #1
 800900a:	60fa      	str	r2, [r7, #12]
 800900c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009010:	b2da      	uxtb	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	701a      	strb	r2, [r3, #0]
 8009016:	e006      	b.n	8009026 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	3b01      	subs	r3, #1
 800901c:	60fb      	str	r3, [r7, #12]
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	b2da      	uxtb	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b7f      	cmp	r3, #127	; 0x7f
 800902a:	d912      	bls.n	8009052 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	09da      	lsrs	r2, r3, #7
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	3b01      	subs	r3, #1
 8009034:	60fb      	str	r3, [r7, #12]
 8009036:	b2d2      	uxtb	r2, r2
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	3a01      	subs	r2, #1
 8009044:	60fa      	str	r2, [r7, #12]
 8009046:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800904a:	b2da      	uxtb	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	701a      	strb	r2, [r3, #0]
 8009050:	e006      	b.n	8009060 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3b01      	subs	r3, #1
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	b2da      	uxtb	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009060:	4b36      	ldr	r3, [pc, #216]	; (800913c <_SendPacket+0x1c4>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009066:	4b34      	ldr	r3, [pc, #208]	; (8009138 <_SendPacket+0x1c0>)
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	69ba      	ldr	r2, [r7, #24]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	627b      	str	r3, [r7, #36]	; 0x24
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	623b      	str	r3, [r7, #32]
 8009078:	e00b      	b.n	8009092 <_SendPacket+0x11a>
 800907a:	6a3b      	ldr	r3, [r7, #32]
 800907c:	b2da      	uxtb	r2, r3
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	1c59      	adds	r1, r3, #1
 8009082:	6279      	str	r1, [r7, #36]	; 0x24
 8009084:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009088:	b2d2      	uxtb	r2, r2
 800908a:	701a      	strb	r2, [r3, #0]
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	09db      	lsrs	r3, r3, #7
 8009090:	623b      	str	r3, [r7, #32]
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	2b7f      	cmp	r3, #127	; 0x7f
 8009096:	d8f0      	bhi.n	800907a <_SendPacket+0x102>
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	1c5a      	adds	r2, r3, #1
 800909c:	627a      	str	r2, [r7, #36]	; 0x24
 800909e:	6a3a      	ldr	r2, [r7, #32]
 80090a0:	b2d2      	uxtb	r2, r2
 80090a2:	701a      	strb	r2, [r3, #0]
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80090a8:	4b23      	ldr	r3, [pc, #140]	; (8009138 <_SendPacket+0x1c0>)
 80090aa:	785b      	ldrb	r3, [r3, #1]
 80090ac:	4618      	mov	r0, r3
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	461a      	mov	r2, r3
 80090b6:	68f9      	ldr	r1, [r7, #12]
 80090b8:	f7f7 f8aa 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80090bc:	4603      	mov	r3, r0
 80090be:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d003      	beq.n	80090ce <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80090c6:	4a1c      	ldr	r2, [pc, #112]	; (8009138 <_SendPacket+0x1c0>)
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	60d3      	str	r3, [r2, #12]
 80090cc:	e00b      	b.n	80090e6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80090ce:	4b1a      	ldr	r3, [pc, #104]	; (8009138 <_SendPacket+0x1c0>)
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	3301      	adds	r3, #1
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	4b18      	ldr	r3, [pc, #96]	; (8009138 <_SendPacket+0x1c0>)
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	e004      	b.n	80090e6 <_SendPacket+0x16e>
    goto SendDone;
 80090dc:	bf00      	nop
 80090de:	e002      	b.n	80090e6 <_SendPacket+0x16e>
      goto SendDone;
 80090e0:	bf00      	nop
 80090e2:	e000      	b.n	80090e6 <_SendPacket+0x16e>
      goto SendDone;
 80090e4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80090e6:	4b14      	ldr	r3, [pc, #80]	; (8009138 <_SendPacket+0x1c0>)
 80090e8:	7e1b      	ldrb	r3, [r3, #24]
 80090ea:	4619      	mov	r1, r3
 80090ec:	4a14      	ldr	r2, [pc, #80]	; (8009140 <_SendPacket+0x1c8>)
 80090ee:	460b      	mov	r3, r1
 80090f0:	005b      	lsls	r3, r3, #1
 80090f2:	440b      	add	r3, r1
 80090f4:	00db      	lsls	r3, r3, #3
 80090f6:	4413      	add	r3, r2
 80090f8:	336c      	adds	r3, #108	; 0x6c
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	4b0e      	ldr	r3, [pc, #56]	; (8009138 <_SendPacket+0x1c0>)
 80090fe:	7e1b      	ldrb	r3, [r3, #24]
 8009100:	4618      	mov	r0, r3
 8009102:	490f      	ldr	r1, [pc, #60]	; (8009140 <_SendPacket+0x1c8>)
 8009104:	4603      	mov	r3, r0
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	4403      	add	r3, r0
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	440b      	add	r3, r1
 800910e:	3370      	adds	r3, #112	; 0x70
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	429a      	cmp	r2, r3
 8009114:	d00b      	beq.n	800912e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8009116:	4b08      	ldr	r3, [pc, #32]	; (8009138 <_SendPacket+0x1c0>)
 8009118:	789b      	ldrb	r3, [r3, #2]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d107      	bne.n	800912e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800911e:	4b06      	ldr	r3, [pc, #24]	; (8009138 <_SendPacket+0x1c0>)
 8009120:	2201      	movs	r2, #1
 8009122:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8009124:	f7ff fe46 	bl	8008db4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8009128:	4b03      	ldr	r3, [pc, #12]	; (8009138 <_SendPacket+0x1c0>)
 800912a:	2200      	movs	r2, #0
 800912c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800912e:	bf00      	nop
 8009130:	3728      	adds	r7, #40	; 0x28
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20013a84 	.word	0x20013a84
 800913c:	e0001004 	.word	0xe0001004
 8009140:	200135cc 	.word	0x200135cc

08009144 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800914c:	f3ef 8311 	mrs	r3, BASEPRI
 8009150:	f04f 0120 	mov.w	r1, #32
 8009154:	f381 8811 	msr	BASEPRI, r1
 8009158:	60fb      	str	r3, [r7, #12]
 800915a:	4808      	ldr	r0, [pc, #32]	; (800917c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800915c:	f7ff fe1d 	bl	8008d9a <_PreparePacket>
 8009160:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	68b9      	ldr	r1, [r7, #8]
 8009166:	68b8      	ldr	r0, [r7, #8]
 8009168:	f7ff ff06 	bl	8008f78 <_SendPacket>
  RECORD_END();
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f383 8811 	msr	BASEPRI, r3
}
 8009172:	bf00      	nop
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20013ab4 	.word	0x20013ab4

08009180 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8009180:	b580      	push	{r7, lr}
 8009182:	b088      	sub	sp, #32
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800918a:	f3ef 8311 	mrs	r3, BASEPRI
 800918e:	f04f 0120 	mov.w	r1, #32
 8009192:	f381 8811 	msr	BASEPRI, r1
 8009196:	617b      	str	r3, [r7, #20]
 8009198:	4816      	ldr	r0, [pc, #88]	; (80091f4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800919a:	f7ff fdfe 	bl	8008d9a <_PreparePacket>
 800919e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	61fb      	str	r3, [r7, #28]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	61bb      	str	r3, [r7, #24]
 80091ac:	e00b      	b.n	80091c6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	1c59      	adds	r1, r3, #1
 80091b6:	61f9      	str	r1, [r7, #28]
 80091b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80091bc:	b2d2      	uxtb	r2, r2
 80091be:	701a      	strb	r2, [r3, #0]
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	09db      	lsrs	r3, r3, #7
 80091c4:	61bb      	str	r3, [r7, #24]
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	2b7f      	cmp	r3, #127	; 0x7f
 80091ca:	d8f0      	bhi.n	80091ae <SEGGER_SYSVIEW_RecordU32+0x2e>
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	61fa      	str	r2, [r7, #28]
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	b2d2      	uxtb	r2, r2
 80091d6:	701a      	strb	r2, [r3, #0]
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	68f9      	ldr	r1, [r7, #12]
 80091e0:	6938      	ldr	r0, [r7, #16]
 80091e2:	f7ff fec9 	bl	8008f78 <_SendPacket>
  RECORD_END();
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f383 8811 	msr	BASEPRI, r3
}
 80091ec:	bf00      	nop
 80091ee:	3720      	adds	r7, #32
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20013ab4 	.word	0x20013ab4

080091f8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b08c      	sub	sp, #48	; 0x30
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009204:	f3ef 8311 	mrs	r3, BASEPRI
 8009208:	f04f 0120 	mov.w	r1, #32
 800920c:	f381 8811 	msr	BASEPRI, r1
 8009210:	61fb      	str	r3, [r7, #28]
 8009212:	4825      	ldr	r0, [pc, #148]	; (80092a8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8009214:	f7ff fdc1 	bl	8008d9a <_PreparePacket>
 8009218:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	62bb      	str	r3, [r7, #40]	; 0x28
 8009226:	e00b      	b.n	8009240 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8009228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922a:	b2da      	uxtb	r2, r3
 800922c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922e:	1c59      	adds	r1, r3, #1
 8009230:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009232:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009236:	b2d2      	uxtb	r2, r2
 8009238:	701a      	strb	r2, [r3, #0]
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	09db      	lsrs	r3, r3, #7
 800923e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	2b7f      	cmp	r3, #127	; 0x7f
 8009244:	d8f0      	bhi.n	8009228 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8009246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009248:	1c5a      	adds	r2, r3, #1
 800924a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800924c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800924e:	b2d2      	uxtb	r2, r2
 8009250:	701a      	strb	r2, [r3, #0]
 8009252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009254:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	623b      	str	r3, [r7, #32]
 800925e:	e00b      	b.n	8009278 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8009260:	6a3b      	ldr	r3, [r7, #32]
 8009262:	b2da      	uxtb	r2, r3
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	1c59      	adds	r1, r3, #1
 8009268:	6279      	str	r1, [r7, #36]	; 0x24
 800926a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800926e:	b2d2      	uxtb	r2, r2
 8009270:	701a      	strb	r2, [r3, #0]
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	09db      	lsrs	r3, r3, #7
 8009276:	623b      	str	r3, [r7, #32]
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	2b7f      	cmp	r3, #127	; 0x7f
 800927c:	d8f0      	bhi.n	8009260 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800927e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	627a      	str	r2, [r7, #36]	; 0x24
 8009284:	6a3a      	ldr	r2, [r7, #32]
 8009286:	b2d2      	uxtb	r2, r2
 8009288:	701a      	strb	r2, [r3, #0]
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	6979      	ldr	r1, [r7, #20]
 8009292:	69b8      	ldr	r0, [r7, #24]
 8009294:	f7ff fe70 	bl	8008f78 <_SendPacket>
  RECORD_END();
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	f383 8811 	msr	BASEPRI, r3
}
 800929e:	bf00      	nop
 80092a0:	3730      	adds	r7, #48	; 0x30
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20013ab4 	.word	0x20013ab4

080092ac <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08e      	sub	sp, #56	; 0x38
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
 80092b8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80092ba:	f3ef 8311 	mrs	r3, BASEPRI
 80092be:	f04f 0120 	mov.w	r1, #32
 80092c2:	f381 8811 	msr	BASEPRI, r1
 80092c6:	61fb      	str	r3, [r7, #28]
 80092c8:	4832      	ldr	r0, [pc, #200]	; (8009394 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80092ca:	f7ff fd66 	bl	8008d9a <_PreparePacket>
 80092ce:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	637b      	str	r3, [r7, #52]	; 0x34
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	633b      	str	r3, [r7, #48]	; 0x30
 80092dc:	e00b      	b.n	80092f6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e4:	1c59      	adds	r1, r3, #1
 80092e6:	6379      	str	r1, [r7, #52]	; 0x34
 80092e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80092ec:	b2d2      	uxtb	r2, r2
 80092ee:	701a      	strb	r2, [r3, #0]
 80092f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f2:	09db      	lsrs	r3, r3, #7
 80092f4:	633b      	str	r3, [r7, #48]	; 0x30
 80092f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f8:	2b7f      	cmp	r3, #127	; 0x7f
 80092fa:	d8f0      	bhi.n	80092de <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80092fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	637a      	str	r2, [r7, #52]	; 0x34
 8009302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009304:	b2d2      	uxtb	r2, r2
 8009306:	701a      	strb	r2, [r3, #0]
 8009308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	62bb      	str	r3, [r7, #40]	; 0x28
 8009314:	e00b      	b.n	800932e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8009316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009318:	b2da      	uxtb	r2, r3
 800931a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931c:	1c59      	adds	r1, r3, #1
 800931e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009320:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009324:	b2d2      	uxtb	r2, r2
 8009326:	701a      	strb	r2, [r3, #0]
 8009328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932a:	09db      	lsrs	r3, r3, #7
 800932c:	62bb      	str	r3, [r7, #40]	; 0x28
 800932e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009330:	2b7f      	cmp	r3, #127	; 0x7f
 8009332:	d8f0      	bhi.n	8009316 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8009334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	62fa      	str	r2, [r7, #44]	; 0x2c
 800933a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800933c:	b2d2      	uxtb	r2, r2
 800933e:	701a      	strb	r2, [r3, #0]
 8009340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009342:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	627b      	str	r3, [r7, #36]	; 0x24
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	623b      	str	r3, [r7, #32]
 800934c:	e00b      	b.n	8009366 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800934e:	6a3b      	ldr	r3, [r7, #32]
 8009350:	b2da      	uxtb	r2, r3
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	1c59      	adds	r1, r3, #1
 8009356:	6279      	str	r1, [r7, #36]	; 0x24
 8009358:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800935c:	b2d2      	uxtb	r2, r2
 800935e:	701a      	strb	r2, [r3, #0]
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	09db      	lsrs	r3, r3, #7
 8009364:	623b      	str	r3, [r7, #32]
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	2b7f      	cmp	r3, #127	; 0x7f
 800936a:	d8f0      	bhi.n	800934e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	1c5a      	adds	r2, r3, #1
 8009370:	627a      	str	r2, [r7, #36]	; 0x24
 8009372:	6a3a      	ldr	r2, [r7, #32]
 8009374:	b2d2      	uxtb	r2, r2
 8009376:	701a      	strb	r2, [r3, #0]
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	6979      	ldr	r1, [r7, #20]
 8009380:	69b8      	ldr	r0, [r7, #24]
 8009382:	f7ff fdf9 	bl	8008f78 <_SendPacket>
  RECORD_END();
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	f383 8811 	msr	BASEPRI, r3
}
 800938c:	bf00      	nop
 800938e:	3738      	adds	r7, #56	; 0x38
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20013ab4 	.word	0x20013ab4

08009398 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8009398:	b580      	push	{r7, lr}
 800939a:	b090      	sub	sp, #64	; 0x40
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
 80093a4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80093a6:	f3ef 8311 	mrs	r3, BASEPRI
 80093aa:	f04f 0120 	mov.w	r1, #32
 80093ae:	f381 8811 	msr	BASEPRI, r1
 80093b2:	61fb      	str	r3, [r7, #28]
 80093b4:	4840      	ldr	r0, [pc, #256]	; (80094b8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80093b6:	f7ff fcf0 	bl	8008d9a <_PreparePacket>
 80093ba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80093c8:	e00b      	b.n	80093e2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80093ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d0:	1c59      	adds	r1, r3, #1
 80093d2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80093d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80093d8:	b2d2      	uxtb	r2, r2
 80093da:	701a      	strb	r2, [r3, #0]
 80093dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093de:	09db      	lsrs	r3, r3, #7
 80093e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80093e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e4:	2b7f      	cmp	r3, #127	; 0x7f
 80093e6:	d8f0      	bhi.n	80093ca <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80093e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ea:	1c5a      	adds	r2, r3, #1
 80093ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80093ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093f0:	b2d2      	uxtb	r2, r2
 80093f2:	701a      	strb	r2, [r3, #0]
 80093f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	637b      	str	r3, [r7, #52]	; 0x34
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	633b      	str	r3, [r7, #48]	; 0x30
 8009400:	e00b      	b.n	800941a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8009402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009404:	b2da      	uxtb	r2, r3
 8009406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009408:	1c59      	adds	r1, r3, #1
 800940a:	6379      	str	r1, [r7, #52]	; 0x34
 800940c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009410:	b2d2      	uxtb	r2, r2
 8009412:	701a      	strb	r2, [r3, #0]
 8009414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009416:	09db      	lsrs	r3, r3, #7
 8009418:	633b      	str	r3, [r7, #48]	; 0x30
 800941a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941c:	2b7f      	cmp	r3, #127	; 0x7f
 800941e:	d8f0      	bhi.n	8009402 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8009420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	637a      	str	r2, [r7, #52]	; 0x34
 8009426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009428:	b2d2      	uxtb	r2, r2
 800942a:	701a      	strb	r2, [r3, #0]
 800942c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800942e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	62bb      	str	r3, [r7, #40]	; 0x28
 8009438:	e00b      	b.n	8009452 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800943a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943c:	b2da      	uxtb	r2, r3
 800943e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009440:	1c59      	adds	r1, r3, #1
 8009442:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009444:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009448:	b2d2      	uxtb	r2, r2
 800944a:	701a      	strb	r2, [r3, #0]
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	09db      	lsrs	r3, r3, #7
 8009450:	62bb      	str	r3, [r7, #40]	; 0x28
 8009452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009454:	2b7f      	cmp	r3, #127	; 0x7f
 8009456:	d8f0      	bhi.n	800943a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8009458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945a:	1c5a      	adds	r2, r3, #1
 800945c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800945e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009460:	b2d2      	uxtb	r2, r2
 8009462:	701a      	strb	r2, [r3, #0]
 8009464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009466:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	627b      	str	r3, [r7, #36]	; 0x24
 800946c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800946e:	623b      	str	r3, [r7, #32]
 8009470:	e00b      	b.n	800948a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	b2da      	uxtb	r2, r3
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	1c59      	adds	r1, r3, #1
 800947a:	6279      	str	r1, [r7, #36]	; 0x24
 800947c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009480:	b2d2      	uxtb	r2, r2
 8009482:	701a      	strb	r2, [r3, #0]
 8009484:	6a3b      	ldr	r3, [r7, #32]
 8009486:	09db      	lsrs	r3, r3, #7
 8009488:	623b      	str	r3, [r7, #32]
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	2b7f      	cmp	r3, #127	; 0x7f
 800948e:	d8f0      	bhi.n	8009472 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	627a      	str	r2, [r7, #36]	; 0x24
 8009496:	6a3a      	ldr	r2, [r7, #32]
 8009498:	b2d2      	uxtb	r2, r2
 800949a:	701a      	strb	r2, [r3, #0]
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	6979      	ldr	r1, [r7, #20]
 80094a4:	69b8      	ldr	r0, [r7, #24]
 80094a6:	f7ff fd67 	bl	8008f78 <_SendPacket>
  RECORD_END();
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	f383 8811 	msr	BASEPRI, r3
}
 80094b0:	bf00      	nop
 80094b2:	3740      	adds	r7, #64	; 0x40
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	20013ab4 	.word	0x20013ab4

080094bc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80094bc:	b580      	push	{r7, lr}
 80094be:	b08c      	sub	sp, #48	; 0x30
 80094c0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80094c2:	4b58      	ldr	r3, [pc, #352]	; (8009624 <SEGGER_SYSVIEW_Start+0x168>)
 80094c4:	2201      	movs	r2, #1
 80094c6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80094c8:	f3ef 8311 	mrs	r3, BASEPRI
 80094cc:	f04f 0120 	mov.w	r1, #32
 80094d0:	f381 8811 	msr	BASEPRI, r1
 80094d4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80094d6:	4b53      	ldr	r3, [pc, #332]	; (8009624 <SEGGER_SYSVIEW_Start+0x168>)
 80094d8:	785b      	ldrb	r3, [r3, #1]
 80094da:	220a      	movs	r2, #10
 80094dc:	4952      	ldr	r1, [pc, #328]	; (8009628 <SEGGER_SYSVIEW_Start+0x16c>)
 80094de:	4618      	mov	r0, r3
 80094e0:	f7f6 fe96 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80094ea:	200a      	movs	r0, #10
 80094ec:	f7ff fe2a 	bl	8009144 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80094f0:	f3ef 8311 	mrs	r3, BASEPRI
 80094f4:	f04f 0120 	mov.w	r1, #32
 80094f8:	f381 8811 	msr	BASEPRI, r1
 80094fc:	60bb      	str	r3, [r7, #8]
 80094fe:	484b      	ldr	r0, [pc, #300]	; (800962c <SEGGER_SYSVIEW_Start+0x170>)
 8009500:	f7ff fc4b 	bl	8008d9a <_PreparePacket>
 8009504:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800950e:	4b45      	ldr	r3, [pc, #276]	; (8009624 <SEGGER_SYSVIEW_Start+0x168>)
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	62bb      	str	r3, [r7, #40]	; 0x28
 8009514:	e00b      	b.n	800952e <SEGGER_SYSVIEW_Start+0x72>
 8009516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009518:	b2da      	uxtb	r2, r3
 800951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951c:	1c59      	adds	r1, r3, #1
 800951e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009520:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009524:	b2d2      	uxtb	r2, r2
 8009526:	701a      	strb	r2, [r3, #0]
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	09db      	lsrs	r3, r3, #7
 800952c:	62bb      	str	r3, [r7, #40]	; 0x28
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	2b7f      	cmp	r3, #127	; 0x7f
 8009532:	d8f0      	bhi.n	8009516 <SEGGER_SYSVIEW_Start+0x5a>
 8009534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	62fa      	str	r2, [r7, #44]	; 0x2c
 800953a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800953c:	b2d2      	uxtb	r2, r2
 800953e:	701a      	strb	r2, [r3, #0]
 8009540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009542:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	627b      	str	r3, [r7, #36]	; 0x24
 8009548:	4b36      	ldr	r3, [pc, #216]	; (8009624 <SEGGER_SYSVIEW_Start+0x168>)
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	623b      	str	r3, [r7, #32]
 800954e:	e00b      	b.n	8009568 <SEGGER_SYSVIEW_Start+0xac>
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	b2da      	uxtb	r2, r3
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	1c59      	adds	r1, r3, #1
 8009558:	6279      	str	r1, [r7, #36]	; 0x24
 800955a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800955e:	b2d2      	uxtb	r2, r2
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	6a3b      	ldr	r3, [r7, #32]
 8009564:	09db      	lsrs	r3, r3, #7
 8009566:	623b      	str	r3, [r7, #32]
 8009568:	6a3b      	ldr	r3, [r7, #32]
 800956a:	2b7f      	cmp	r3, #127	; 0x7f
 800956c:	d8f0      	bhi.n	8009550 <SEGGER_SYSVIEW_Start+0x94>
 800956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009570:	1c5a      	adds	r2, r3, #1
 8009572:	627a      	str	r2, [r7, #36]	; 0x24
 8009574:	6a3a      	ldr	r2, [r7, #32]
 8009576:	b2d2      	uxtb	r2, r2
 8009578:	701a      	strb	r2, [r3, #0]
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	61fb      	str	r3, [r7, #28]
 8009582:	4b28      	ldr	r3, [pc, #160]	; (8009624 <SEGGER_SYSVIEW_Start+0x168>)
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	61bb      	str	r3, [r7, #24]
 8009588:	e00b      	b.n	80095a2 <SEGGER_SYSVIEW_Start+0xe6>
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	b2da      	uxtb	r2, r3
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	1c59      	adds	r1, r3, #1
 8009592:	61f9      	str	r1, [r7, #28]
 8009594:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009598:	b2d2      	uxtb	r2, r2
 800959a:	701a      	strb	r2, [r3, #0]
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	09db      	lsrs	r3, r3, #7
 80095a0:	61bb      	str	r3, [r7, #24]
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	2b7f      	cmp	r3, #127	; 0x7f
 80095a6:	d8f0      	bhi.n	800958a <SEGGER_SYSVIEW_Start+0xce>
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	1c5a      	adds	r2, r3, #1
 80095ac:	61fa      	str	r2, [r7, #28]
 80095ae:	69ba      	ldr	r2, [r7, #24]
 80095b0:	b2d2      	uxtb	r2, r2
 80095b2:	701a      	strb	r2, [r3, #0]
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	617b      	str	r3, [r7, #20]
 80095bc:	2300      	movs	r3, #0
 80095be:	613b      	str	r3, [r7, #16]
 80095c0:	e00b      	b.n	80095da <SEGGER_SYSVIEW_Start+0x11e>
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	1c59      	adds	r1, r3, #1
 80095ca:	6179      	str	r1, [r7, #20]
 80095cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80095d0:	b2d2      	uxtb	r2, r2
 80095d2:	701a      	strb	r2, [r3, #0]
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	09db      	lsrs	r3, r3, #7
 80095d8:	613b      	str	r3, [r7, #16]
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	2b7f      	cmp	r3, #127	; 0x7f
 80095de:	d8f0      	bhi.n	80095c2 <SEGGER_SYSVIEW_Start+0x106>
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	617a      	str	r2, [r7, #20]
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	b2d2      	uxtb	r2, r2
 80095ea:	701a      	strb	r2, [r3, #0]
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80095f0:	2218      	movs	r2, #24
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7ff fcbf 	bl	8008f78 <_SendPacket>
      RECORD_END();
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009600:	4b08      	ldr	r3, [pc, #32]	; (8009624 <SEGGER_SYSVIEW_Start+0x168>)
 8009602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8009608:	4b06      	ldr	r3, [pc, #24]	; (8009624 <SEGGER_SYSVIEW_Start+0x168>)
 800960a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800960e:	f000 f9c7 	bl	80099a0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009612:	f000 f9b1 	bl	8009978 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8009616:	f000 fbff 	bl	8009e18 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800961a:	bf00      	nop
 800961c:	3730      	adds	r7, #48	; 0x30
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20013a84 	.word	0x20013a84
 8009628:	0800cad8 	.word	0x0800cad8
 800962c:	20013ab4 	.word	0x20013ab4

08009630 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009636:	f3ef 8311 	mrs	r3, BASEPRI
 800963a:	f04f 0120 	mov.w	r1, #32
 800963e:	f381 8811 	msr	BASEPRI, r1
 8009642:	607b      	str	r3, [r7, #4]
 8009644:	480b      	ldr	r0, [pc, #44]	; (8009674 <SEGGER_SYSVIEW_Stop+0x44>)
 8009646:	f7ff fba8 	bl	8008d9a <_PreparePacket>
 800964a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800964c:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <SEGGER_SYSVIEW_Stop+0x48>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d007      	beq.n	8009664 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009654:	220b      	movs	r2, #11
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	6838      	ldr	r0, [r7, #0]
 800965a:	f7ff fc8d 	bl	8008f78 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800965e:	4b06      	ldr	r3, [pc, #24]	; (8009678 <SEGGER_SYSVIEW_Stop+0x48>)
 8009660:	2200      	movs	r2, #0
 8009662:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f383 8811 	msr	BASEPRI, r3
}
 800966a:	bf00      	nop
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20013ab4 	.word	0x20013ab4
 8009678:	20013a84 	.word	0x20013a84

0800967c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800967c:	b580      	push	{r7, lr}
 800967e:	b08c      	sub	sp, #48	; 0x30
 8009680:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009682:	f3ef 8311 	mrs	r3, BASEPRI
 8009686:	f04f 0120 	mov.w	r1, #32
 800968a:	f381 8811 	msr	BASEPRI, r1
 800968e:	60fb      	str	r3, [r7, #12]
 8009690:	4845      	ldr	r0, [pc, #276]	; (80097a8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8009692:	f7ff fb82 	bl	8008d9a <_PreparePacket>
 8009696:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096a0:	4b42      	ldr	r3, [pc, #264]	; (80097ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80096a6:	e00b      	b.n	80096c0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ae:	1c59      	adds	r1, r3, #1
 80096b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80096b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80096b6:	b2d2      	uxtb	r2, r2
 80096b8:	701a      	strb	r2, [r3, #0]
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	09db      	lsrs	r3, r3, #7
 80096be:	62bb      	str	r3, [r7, #40]	; 0x28
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	2b7f      	cmp	r3, #127	; 0x7f
 80096c4:	d8f0      	bhi.n	80096a8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80096c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ce:	b2d2      	uxtb	r2, r2
 80096d0:	701a      	strb	r2, [r3, #0]
 80096d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	627b      	str	r3, [r7, #36]	; 0x24
 80096da:	4b34      	ldr	r3, [pc, #208]	; (80097ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	623b      	str	r3, [r7, #32]
 80096e0:	e00b      	b.n	80096fa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	1c59      	adds	r1, r3, #1
 80096ea:	6279      	str	r1, [r7, #36]	; 0x24
 80096ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80096f0:	b2d2      	uxtb	r2, r2
 80096f2:	701a      	strb	r2, [r3, #0]
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	09db      	lsrs	r3, r3, #7
 80096f8:	623b      	str	r3, [r7, #32]
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	2b7f      	cmp	r3, #127	; 0x7f
 80096fe:	d8f0      	bhi.n	80096e2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	1c5a      	adds	r2, r3, #1
 8009704:	627a      	str	r2, [r7, #36]	; 0x24
 8009706:	6a3a      	ldr	r2, [r7, #32]
 8009708:	b2d2      	uxtb	r2, r2
 800970a:	701a      	strb	r2, [r3, #0]
 800970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	61fb      	str	r3, [r7, #28]
 8009714:	4b25      	ldr	r3, [pc, #148]	; (80097ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	61bb      	str	r3, [r7, #24]
 800971a:	e00b      	b.n	8009734 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	b2da      	uxtb	r2, r3
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	1c59      	adds	r1, r3, #1
 8009724:	61f9      	str	r1, [r7, #28]
 8009726:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800972a:	b2d2      	uxtb	r2, r2
 800972c:	701a      	strb	r2, [r3, #0]
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	09db      	lsrs	r3, r3, #7
 8009732:	61bb      	str	r3, [r7, #24]
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	2b7f      	cmp	r3, #127	; 0x7f
 8009738:	d8f0      	bhi.n	800971c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	61fa      	str	r2, [r7, #28]
 8009740:	69ba      	ldr	r2, [r7, #24]
 8009742:	b2d2      	uxtb	r2, r2
 8009744:	701a      	strb	r2, [r3, #0]
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	617b      	str	r3, [r7, #20]
 800974e:	2300      	movs	r3, #0
 8009750:	613b      	str	r3, [r7, #16]
 8009752:	e00b      	b.n	800976c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	b2da      	uxtb	r2, r3
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	1c59      	adds	r1, r3, #1
 800975c:	6179      	str	r1, [r7, #20]
 800975e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009762:	b2d2      	uxtb	r2, r2
 8009764:	701a      	strb	r2, [r3, #0]
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	09db      	lsrs	r3, r3, #7
 800976a:	613b      	str	r3, [r7, #16]
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	2b7f      	cmp	r3, #127	; 0x7f
 8009770:	d8f0      	bhi.n	8009754 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	617a      	str	r2, [r7, #20]
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	b2d2      	uxtb	r2, r2
 800977c:	701a      	strb	r2, [r3, #0]
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009782:	2218      	movs	r2, #24
 8009784:	6879      	ldr	r1, [r7, #4]
 8009786:	68b8      	ldr	r0, [r7, #8]
 8009788:	f7ff fbf6 	bl	8008f78 <_SendPacket>
  RECORD_END();
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009792:	4b06      	ldr	r3, [pc, #24]	; (80097ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	2b00      	cmp	r3, #0
 8009798:	d002      	beq.n	80097a0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800979a:	4b04      	ldr	r3, [pc, #16]	; (80097ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	4798      	blx	r3
  }
}
 80097a0:	bf00      	nop
 80097a2:	3730      	adds	r7, #48	; 0x30
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	20013ab4 	.word	0x20013ab4
 80097ac:	20013a84 	.word	0x20013a84

080097b0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b092      	sub	sp, #72	; 0x48
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80097b8:	f3ef 8311 	mrs	r3, BASEPRI
 80097bc:	f04f 0120 	mov.w	r1, #32
 80097c0:	f381 8811 	msr	BASEPRI, r1
 80097c4:	617b      	str	r3, [r7, #20]
 80097c6:	486a      	ldr	r0, [pc, #424]	; (8009970 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80097c8:	f7ff fae7 	bl	8008d9a <_PreparePacket>
 80097cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	647b      	str	r3, [r7, #68]	; 0x44
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	4b66      	ldr	r3, [pc, #408]	; (8009974 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	643b      	str	r3, [r7, #64]	; 0x40
 80097e2:	e00b      	b.n	80097fc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80097e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097ea:	1c59      	adds	r1, r3, #1
 80097ec:	6479      	str	r1, [r7, #68]	; 0x44
 80097ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80097f2:	b2d2      	uxtb	r2, r2
 80097f4:	701a      	strb	r2, [r3, #0]
 80097f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097f8:	09db      	lsrs	r3, r3, #7
 80097fa:	643b      	str	r3, [r7, #64]	; 0x40
 80097fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097fe:	2b7f      	cmp	r3, #127	; 0x7f
 8009800:	d8f0      	bhi.n	80097e4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8009802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009804:	1c5a      	adds	r2, r3, #1
 8009806:	647a      	str	r2, [r7, #68]	; 0x44
 8009808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800980a:	b2d2      	uxtb	r2, r2
 800980c:	701a      	strb	r2, [r3, #0]
 800980e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009810:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	63bb      	str	r3, [r7, #56]	; 0x38
 800981c:	e00b      	b.n	8009836 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009820:	b2da      	uxtb	r2, r3
 8009822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009824:	1c59      	adds	r1, r3, #1
 8009826:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009828:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800982c:	b2d2      	uxtb	r2, r2
 800982e:	701a      	strb	r2, [r3, #0]
 8009830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009832:	09db      	lsrs	r3, r3, #7
 8009834:	63bb      	str	r3, [r7, #56]	; 0x38
 8009836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009838:	2b7f      	cmp	r3, #127	; 0x7f
 800983a:	d8f0      	bhi.n	800981e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800983c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009844:	b2d2      	uxtb	r2, r2
 8009846:	701a      	strb	r2, [r3, #0]
 8009848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800984a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	2220      	movs	r2, #32
 8009852:	4619      	mov	r1, r3
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f7ff fa53 	bl	8008d00 <_EncodeStr>
 800985a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800985c:	2209      	movs	r2, #9
 800985e:	68f9      	ldr	r1, [r7, #12]
 8009860:	6938      	ldr	r0, [r7, #16]
 8009862:	f7ff fb89 	bl	8008f78 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	637b      	str	r3, [r7, #52]	; 0x34
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	4b40      	ldr	r3, [pc, #256]	; (8009974 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	633b      	str	r3, [r7, #48]	; 0x30
 800987a:	e00b      	b.n	8009894 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800987c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987e:	b2da      	uxtb	r2, r3
 8009880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009882:	1c59      	adds	r1, r3, #1
 8009884:	6379      	str	r1, [r7, #52]	; 0x34
 8009886:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800988a:	b2d2      	uxtb	r2, r2
 800988c:	701a      	strb	r2, [r3, #0]
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	09db      	lsrs	r3, r3, #7
 8009892:	633b      	str	r3, [r7, #48]	; 0x30
 8009894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009896:	2b7f      	cmp	r3, #127	; 0x7f
 8009898:	d8f0      	bhi.n	800987c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800989a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	637a      	str	r2, [r7, #52]	; 0x34
 80098a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098a2:	b2d2      	uxtb	r2, r2
 80098a4:	701a      	strb	r2, [r3, #0]
 80098a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80098b4:	e00b      	b.n	80098ce <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80098b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098bc:	1c59      	adds	r1, r3, #1
 80098be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80098c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80098c4:	b2d2      	uxtb	r2, r2
 80098c6:	701a      	strb	r2, [r3, #0]
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	09db      	lsrs	r3, r3, #7
 80098cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	2b7f      	cmp	r3, #127	; 0x7f
 80098d2:	d8f0      	bhi.n	80098b6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80098d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098dc:	b2d2      	uxtb	r2, r2
 80098de:	701a      	strb	r2, [r3, #0]
 80098e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	627b      	str	r3, [r7, #36]	; 0x24
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	623b      	str	r3, [r7, #32]
 80098ee:	e00b      	b.n	8009908 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	1c59      	adds	r1, r3, #1
 80098f8:	6279      	str	r1, [r7, #36]	; 0x24
 80098fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80098fe:	b2d2      	uxtb	r2, r2
 8009900:	701a      	strb	r2, [r3, #0]
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	09db      	lsrs	r3, r3, #7
 8009906:	623b      	str	r3, [r7, #32]
 8009908:	6a3b      	ldr	r3, [r7, #32]
 800990a:	2b7f      	cmp	r3, #127	; 0x7f
 800990c:	d8f0      	bhi.n	80098f0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	1c5a      	adds	r2, r3, #1
 8009912:	627a      	str	r2, [r7, #36]	; 0x24
 8009914:	6a3a      	ldr	r2, [r7, #32]
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	701a      	strb	r2, [r3, #0]
 800991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	61fb      	str	r3, [r7, #28]
 8009922:	2300      	movs	r3, #0
 8009924:	61bb      	str	r3, [r7, #24]
 8009926:	e00b      	b.n	8009940 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	b2da      	uxtb	r2, r3
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	1c59      	adds	r1, r3, #1
 8009930:	61f9      	str	r1, [r7, #28]
 8009932:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009936:	b2d2      	uxtb	r2, r2
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	09db      	lsrs	r3, r3, #7
 800993e:	61bb      	str	r3, [r7, #24]
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	2b7f      	cmp	r3, #127	; 0x7f
 8009944:	d8f0      	bhi.n	8009928 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	61fa      	str	r2, [r7, #28]
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	701a      	strb	r2, [r3, #0]
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8009956:	2215      	movs	r2, #21
 8009958:	68f9      	ldr	r1, [r7, #12]
 800995a:	6938      	ldr	r0, [r7, #16]
 800995c:	f7ff fb0c 	bl	8008f78 <_SendPacket>
  RECORD_END();
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	f383 8811 	msr	BASEPRI, r3
}
 8009966:	bf00      	nop
 8009968:	3748      	adds	r7, #72	; 0x48
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20013ab4 	.word	0x20013ab4
 8009974:	20013a84 	.word	0x20013a84

08009978 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8009978:	b580      	push	{r7, lr}
 800997a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800997c:	4b07      	ldr	r3, [pc, #28]	; (800999c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d008      	beq.n	8009996 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8009984:	4b05      	ldr	r3, [pc, #20]	; (800999c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009986:	6a1b      	ldr	r3, [r3, #32]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800998e:	4b03      	ldr	r3, [pc, #12]	; (800999c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	4798      	blx	r3
  }
}
 8009996:	bf00      	nop
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20013a84 	.word	0x20013a84

080099a0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80099a0:	b590      	push	{r4, r7, lr}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80099a6:	4b15      	ldr	r3, [pc, #84]	; (80099fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d01a      	beq.n	80099e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80099ae:	4b13      	ldr	r3, [pc, #76]	; (80099fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d015      	beq.n	80099e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80099b8:	4b10      	ldr	r3, [pc, #64]	; (80099fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80099ba:	6a1b      	ldr	r3, [r3, #32]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4798      	blx	r3
 80099c0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80099c4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80099c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099ca:	f04f 0200 	mov.w	r2, #0
 80099ce:	f04f 0300 	mov.w	r3, #0
 80099d2:	000a      	movs	r2, r1
 80099d4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80099d6:	4613      	mov	r3, r2
 80099d8:	461a      	mov	r2, r3
 80099da:	4621      	mov	r1, r4
 80099dc:	200d      	movs	r0, #13
 80099de:	f7ff fc0b 	bl	80091f8 <SEGGER_SYSVIEW_RecordU32x2>
 80099e2:	e006      	b.n	80099f2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80099e4:	4b06      	ldr	r3, [pc, #24]	; (8009a00 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4619      	mov	r1, r3
 80099ea:	200c      	movs	r0, #12
 80099ec:	f7ff fbc8 	bl	8009180 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80099f0:	bf00      	nop
 80099f2:	bf00      	nop
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd90      	pop	{r4, r7, pc}
 80099fa:	bf00      	nop
 80099fc:	20013a84 	.word	0x20013a84
 8009a00:	e0001004 	.word	0xe0001004

08009a04 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8009a0e:	f04f 0120 	mov.w	r1, #32
 8009a12:	f381 8811 	msr	BASEPRI, r1
 8009a16:	60fb      	str	r3, [r7, #12]
 8009a18:	4819      	ldr	r0, [pc, #100]	; (8009a80 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8009a1a:	f7ff f9be 	bl	8008d9a <_PreparePacket>
 8009a1e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8009a24:	4b17      	ldr	r3, [pc, #92]	; (8009a84 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a2c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	617b      	str	r3, [r7, #20]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	613b      	str	r3, [r7, #16]
 8009a36:	e00b      	b.n	8009a50 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	1c59      	adds	r1, r3, #1
 8009a40:	6179      	str	r1, [r7, #20]
 8009a42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a46:	b2d2      	uxtb	r2, r2
 8009a48:	701a      	strb	r2, [r3, #0]
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	09db      	lsrs	r3, r3, #7
 8009a4e:	613b      	str	r3, [r7, #16]
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	2b7f      	cmp	r3, #127	; 0x7f
 8009a54:	d8f0      	bhi.n	8009a38 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	617a      	str	r2, [r7, #20]
 8009a5c:	693a      	ldr	r2, [r7, #16]
 8009a5e:	b2d2      	uxtb	r2, r2
 8009a60:	701a      	strb	r2, [r3, #0]
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8009a66:	2202      	movs	r2, #2
 8009a68:	6879      	ldr	r1, [r7, #4]
 8009a6a:	68b8      	ldr	r0, [r7, #8]
 8009a6c:	f7ff fa84 	bl	8008f78 <_SendPacket>
  RECORD_END();
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f383 8811 	msr	BASEPRI, r3
}
 8009a76:	bf00      	nop
 8009a78:	3718      	adds	r7, #24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20013ab4 	.word	0x20013ab4
 8009a84:	e000ed04 	.word	0xe000ed04

08009a88 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8009a92:	f04f 0120 	mov.w	r1, #32
 8009a96:	f381 8811 	msr	BASEPRI, r1
 8009a9a:	607b      	str	r3, [r7, #4]
 8009a9c:	4807      	ldr	r0, [pc, #28]	; (8009abc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8009a9e:	f7ff f97c 	bl	8008d9a <_PreparePacket>
 8009aa2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8009aa4:	2203      	movs	r2, #3
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6838      	ldr	r0, [r7, #0]
 8009aaa:	f7ff fa65 	bl	8008f78 <_SendPacket>
  RECORD_END();
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f383 8811 	msr	BASEPRI, r3
}
 8009ab4:	bf00      	nop
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20013ab4 	.word	0x20013ab4

08009ac0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8009aca:	f04f 0120 	mov.w	r1, #32
 8009ace:	f381 8811 	msr	BASEPRI, r1
 8009ad2:	607b      	str	r3, [r7, #4]
 8009ad4:	4807      	ldr	r0, [pc, #28]	; (8009af4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8009ad6:	f7ff f960 	bl	8008d9a <_PreparePacket>
 8009ada:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8009adc:	2212      	movs	r2, #18
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6838      	ldr	r0, [r7, #0]
 8009ae2:	f7ff fa49 	bl	8008f78 <_SendPacket>
  RECORD_END();
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f383 8811 	msr	BASEPRI, r3
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	20013ab4 	.word	0x20013ab4

08009af8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009afe:	f3ef 8311 	mrs	r3, BASEPRI
 8009b02:	f04f 0120 	mov.w	r1, #32
 8009b06:	f381 8811 	msr	BASEPRI, r1
 8009b0a:	607b      	str	r3, [r7, #4]
 8009b0c:	4807      	ldr	r0, [pc, #28]	; (8009b2c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8009b0e:	f7ff f944 	bl	8008d9a <_PreparePacket>
 8009b12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8009b14:	2211      	movs	r2, #17
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6838      	ldr	r0, [r7, #0]
 8009b1a:	f7ff fa2d 	bl	8008f78 <_SendPacket>
  RECORD_END();
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f383 8811 	msr	BASEPRI, r3
}
 8009b24:	bf00      	nop
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	20013ab4 	.word	0x20013ab4

08009b30 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b088      	sub	sp, #32
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009b38:	f3ef 8311 	mrs	r3, BASEPRI
 8009b3c:	f04f 0120 	mov.w	r1, #32
 8009b40:	f381 8811 	msr	BASEPRI, r1
 8009b44:	617b      	str	r3, [r7, #20]
 8009b46:	4819      	ldr	r0, [pc, #100]	; (8009bac <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8009b48:	f7ff f927 	bl	8008d9a <_PreparePacket>
 8009b4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009b52:	4b17      	ldr	r3, [pc, #92]	; (8009bb0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	61fb      	str	r3, [r7, #28]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	61bb      	str	r3, [r7, #24]
 8009b64:	e00b      	b.n	8009b7e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	1c59      	adds	r1, r3, #1
 8009b6e:	61f9      	str	r1, [r7, #28]
 8009b70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b74:	b2d2      	uxtb	r2, r2
 8009b76:	701a      	strb	r2, [r3, #0]
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	09db      	lsrs	r3, r3, #7
 8009b7c:	61bb      	str	r3, [r7, #24]
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	2b7f      	cmp	r3, #127	; 0x7f
 8009b82:	d8f0      	bhi.n	8009b66 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	1c5a      	adds	r2, r3, #1
 8009b88:	61fa      	str	r2, [r7, #28]
 8009b8a:	69ba      	ldr	r2, [r7, #24]
 8009b8c:	b2d2      	uxtb	r2, r2
 8009b8e:	701a      	strb	r2, [r3, #0]
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8009b94:	2208      	movs	r2, #8
 8009b96:	68f9      	ldr	r1, [r7, #12]
 8009b98:	6938      	ldr	r0, [r7, #16]
 8009b9a:	f7ff f9ed 	bl	8008f78 <_SendPacket>
  RECORD_END();
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f383 8811 	msr	BASEPRI, r3
}
 8009ba4:	bf00      	nop
 8009ba6:	3720      	adds	r7, #32
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	20013ab4 	.word	0x20013ab4
 8009bb0:	20013a84 	.word	0x20013a84

08009bb4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b088      	sub	sp, #32
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009bbc:	f3ef 8311 	mrs	r3, BASEPRI
 8009bc0:	f04f 0120 	mov.w	r1, #32
 8009bc4:	f381 8811 	msr	BASEPRI, r1
 8009bc8:	617b      	str	r3, [r7, #20]
 8009bca:	4819      	ldr	r0, [pc, #100]	; (8009c30 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8009bcc:	f7ff f8e5 	bl	8008d9a <_PreparePacket>
 8009bd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009bd6:	4b17      	ldr	r3, [pc, #92]	; (8009c34 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	61fb      	str	r3, [r7, #28]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	61bb      	str	r3, [r7, #24]
 8009be8:	e00b      	b.n	8009c02 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	1c59      	adds	r1, r3, #1
 8009bf2:	61f9      	str	r1, [r7, #28]
 8009bf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009bf8:	b2d2      	uxtb	r2, r2
 8009bfa:	701a      	strb	r2, [r3, #0]
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	09db      	lsrs	r3, r3, #7
 8009c00:	61bb      	str	r3, [r7, #24]
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	2b7f      	cmp	r3, #127	; 0x7f
 8009c06:	d8f0      	bhi.n	8009bea <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	1c5a      	adds	r2, r3, #1
 8009c0c:	61fa      	str	r2, [r7, #28]
 8009c0e:	69ba      	ldr	r2, [r7, #24]
 8009c10:	b2d2      	uxtb	r2, r2
 8009c12:	701a      	strb	r2, [r3, #0]
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8009c18:	2204      	movs	r2, #4
 8009c1a:	68f9      	ldr	r1, [r7, #12]
 8009c1c:	6938      	ldr	r0, [r7, #16]
 8009c1e:	f7ff f9ab 	bl	8008f78 <_SendPacket>
  RECORD_END();
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	f383 8811 	msr	BASEPRI, r3
}
 8009c28:	bf00      	nop
 8009c2a:	3720      	adds	r7, #32
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	20013ab4 	.word	0x20013ab4
 8009c34:	20013a84 	.word	0x20013a84

08009c38 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b088      	sub	sp, #32
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009c40:	f3ef 8311 	mrs	r3, BASEPRI
 8009c44:	f04f 0120 	mov.w	r1, #32
 8009c48:	f381 8811 	msr	BASEPRI, r1
 8009c4c:	617b      	str	r3, [r7, #20]
 8009c4e:	4819      	ldr	r0, [pc, #100]	; (8009cb4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8009c50:	f7ff f8a3 	bl	8008d9a <_PreparePacket>
 8009c54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009c5a:	4b17      	ldr	r3, [pc, #92]	; (8009cb8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	61fb      	str	r3, [r7, #28]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	61bb      	str	r3, [r7, #24]
 8009c6c:	e00b      	b.n	8009c86 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	1c59      	adds	r1, r3, #1
 8009c76:	61f9      	str	r1, [r7, #28]
 8009c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c7c:	b2d2      	uxtb	r2, r2
 8009c7e:	701a      	strb	r2, [r3, #0]
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	09db      	lsrs	r3, r3, #7
 8009c84:	61bb      	str	r3, [r7, #24]
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	2b7f      	cmp	r3, #127	; 0x7f
 8009c8a:	d8f0      	bhi.n	8009c6e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	1c5a      	adds	r2, r3, #1
 8009c90:	61fa      	str	r2, [r7, #28]
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	b2d2      	uxtb	r2, r2
 8009c96:	701a      	strb	r2, [r3, #0]
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8009c9c:	2206      	movs	r2, #6
 8009c9e:	68f9      	ldr	r1, [r7, #12]
 8009ca0:	6938      	ldr	r0, [r7, #16]
 8009ca2:	f7ff f969 	bl	8008f78 <_SendPacket>
  RECORD_END();
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f383 8811 	msr	BASEPRI, r3
}
 8009cac:	bf00      	nop
 8009cae:	3720      	adds	r7, #32
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	20013ab4 	.word	0x20013ab4
 8009cb8:	20013a84 	.word	0x20013a84

08009cbc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8009cc4:	4b04      	ldr	r3, [pc, #16]	; (8009cd8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	1ad3      	subs	r3, r2, r3
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	20013a84 	.word	0x20013a84

08009cdc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b08c      	sub	sp, #48	; 0x30
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8009ce6:	4b3b      	ldr	r3, [pc, #236]	; (8009dd4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d06d      	beq.n	8009dca <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8009cee:	4b39      	ldr	r3, [pc, #228]	; (8009dd4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cf8:	e008      	b.n	8009d0c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8009cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8009d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d007      	beq.n	8009d16 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8009d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d08:	3301      	adds	r3, #1
 8009d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d0c:	79fb      	ldrb	r3, [r7, #7]
 8009d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d3f2      	bcc.n	8009cfa <SEGGER_SYSVIEW_SendModule+0x1e>
 8009d14:	e000      	b.n	8009d18 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8009d16:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8009d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d055      	beq.n	8009dca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8009d22:	f04f 0120 	mov.w	r1, #32
 8009d26:	f381 8811 	msr	BASEPRI, r1
 8009d2a:	617b      	str	r3, [r7, #20]
 8009d2c:	482a      	ldr	r0, [pc, #168]	; (8009dd8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8009d2e:	f7ff f834 	bl	8008d9a <_PreparePacket>
 8009d32:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d3c:	79fb      	ldrb	r3, [r7, #7]
 8009d3e:	623b      	str	r3, [r7, #32]
 8009d40:	e00b      	b.n	8009d5a <SEGGER_SYSVIEW_SendModule+0x7e>
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	1c59      	adds	r1, r3, #1
 8009d4a:	6279      	str	r1, [r7, #36]	; 0x24
 8009d4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d50:	b2d2      	uxtb	r2, r2
 8009d52:	701a      	strb	r2, [r3, #0]
 8009d54:	6a3b      	ldr	r3, [r7, #32]
 8009d56:	09db      	lsrs	r3, r3, #7
 8009d58:	623b      	str	r3, [r7, #32]
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8009d5e:	d8f0      	bhi.n	8009d42 <SEGGER_SYSVIEW_SendModule+0x66>
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	627a      	str	r2, [r7, #36]	; 0x24
 8009d66:	6a3a      	ldr	r2, [r7, #32]
 8009d68:	b2d2      	uxtb	r2, r2
 8009d6a:	701a      	strb	r2, [r3, #0]
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	61bb      	str	r3, [r7, #24]
 8009d7a:	e00b      	b.n	8009d94 <SEGGER_SYSVIEW_SendModule+0xb8>
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	1c59      	adds	r1, r3, #1
 8009d84:	61f9      	str	r1, [r7, #28]
 8009d86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d8a:	b2d2      	uxtb	r2, r2
 8009d8c:	701a      	strb	r2, [r3, #0]
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	09db      	lsrs	r3, r3, #7
 8009d92:	61bb      	str	r3, [r7, #24]
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	2b7f      	cmp	r3, #127	; 0x7f
 8009d98:	d8f0      	bhi.n	8009d7c <SEGGER_SYSVIEW_SendModule+0xa0>
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	61fa      	str	r2, [r7, #28]
 8009da0:	69ba      	ldr	r2, [r7, #24]
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	701a      	strb	r2, [r3, #0]
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2280      	movs	r2, #128	; 0x80
 8009db0:	4619      	mov	r1, r3
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f7fe ffa4 	bl	8008d00 <_EncodeStr>
 8009db8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8009dba:	2216      	movs	r2, #22
 8009dbc:	68f9      	ldr	r1, [r7, #12]
 8009dbe:	6938      	ldr	r0, [r7, #16]
 8009dc0:	f7ff f8da 	bl	8008f78 <_SendPacket>
      RECORD_END();
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8009dca:	bf00      	nop
 8009dcc:	3730      	adds	r7, #48	; 0x30
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20013aac 	.word	0x20013aac
 8009dd8:	20013ab4 	.word	0x20013ab4

08009ddc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8009de2:	4b0c      	ldr	r3, [pc, #48]	; (8009e14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00f      	beq.n	8009e0a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8009dea:	4b0a      	ldr	r3, [pc, #40]	; (8009e14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1f2      	bne.n	8009df0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20013aac 	.word	0x20013aac

08009e18 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8009e1e:	f3ef 8311 	mrs	r3, BASEPRI
 8009e22:	f04f 0120 	mov.w	r1, #32
 8009e26:	f381 8811 	msr	BASEPRI, r1
 8009e2a:	60fb      	str	r3, [r7, #12]
 8009e2c:	4817      	ldr	r0, [pc, #92]	; (8009e8c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8009e2e:	f7fe ffb4 	bl	8008d9a <_PreparePacket>
 8009e32:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	617b      	str	r3, [r7, #20]
 8009e3c:	4b14      	ldr	r3, [pc, #80]	; (8009e90 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	613b      	str	r3, [r7, #16]
 8009e42:	e00b      	b.n	8009e5c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	b2da      	uxtb	r2, r3
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	1c59      	adds	r1, r3, #1
 8009e4c:	6179      	str	r1, [r7, #20]
 8009e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009e52:	b2d2      	uxtb	r2, r2
 8009e54:	701a      	strb	r2, [r3, #0]
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	09db      	lsrs	r3, r3, #7
 8009e5a:	613b      	str	r3, [r7, #16]
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8009e60:	d8f0      	bhi.n	8009e44 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	1c5a      	adds	r2, r3, #1
 8009e66:	617a      	str	r2, [r7, #20]
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	b2d2      	uxtb	r2, r2
 8009e6c:	701a      	strb	r2, [r3, #0]
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8009e72:	221b      	movs	r2, #27
 8009e74:	6879      	ldr	r1, [r7, #4]
 8009e76:	68b8      	ldr	r0, [r7, #8]
 8009e78:	f7ff f87e 	bl	8008f78 <_SendPacket>
  RECORD_END();
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f383 8811 	msr	BASEPRI, r3
}
 8009e82:	bf00      	nop
 8009e84:	3718      	adds	r7, #24
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	20013ab4 	.word	0x20013ab4
 8009e90:	20013ab0 	.word	0x20013ab0

08009e94 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08a      	sub	sp, #40	; 0x28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8009ea0:	f04f 0120 	mov.w	r1, #32
 8009ea4:	f381 8811 	msr	BASEPRI, r1
 8009ea8:	617b      	str	r3, [r7, #20]
 8009eaa:	4827      	ldr	r0, [pc, #156]	; (8009f48 <SEGGER_SYSVIEW_Warn+0xb4>)
 8009eac:	f7fe ff75 	bl	8008d9a <_PreparePacket>
 8009eb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009eb2:	2280      	movs	r2, #128	; 0x80
 8009eb4:	6879      	ldr	r1, [r7, #4]
 8009eb6:	6938      	ldr	r0, [r7, #16]
 8009eb8:	f7fe ff22 	bl	8008d00 <_EncodeStr>
 8009ebc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	623b      	str	r3, [r7, #32]
 8009ec6:	e00b      	b.n	8009ee0 <SEGGER_SYSVIEW_Warn+0x4c>
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ece:	1c59      	adds	r1, r3, #1
 8009ed0:	6279      	str	r1, [r7, #36]	; 0x24
 8009ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ed6:	b2d2      	uxtb	r2, r2
 8009ed8:	701a      	strb	r2, [r3, #0]
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	09db      	lsrs	r3, r3, #7
 8009ede:	623b      	str	r3, [r7, #32]
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
 8009ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8009ee4:	d8f0      	bhi.n	8009ec8 <SEGGER_SYSVIEW_Warn+0x34>
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	627a      	str	r2, [r7, #36]	; 0x24
 8009eec:	6a3a      	ldr	r2, [r7, #32]
 8009eee:	b2d2      	uxtb	r2, r2
 8009ef0:	701a      	strb	r2, [r3, #0]
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	61fb      	str	r3, [r7, #28]
 8009efa:	2300      	movs	r3, #0
 8009efc:	61bb      	str	r3, [r7, #24]
 8009efe:	e00b      	b.n	8009f18 <SEGGER_SYSVIEW_Warn+0x84>
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	1c59      	adds	r1, r3, #1
 8009f08:	61f9      	str	r1, [r7, #28]
 8009f0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f0e:	b2d2      	uxtb	r2, r2
 8009f10:	701a      	strb	r2, [r3, #0]
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	09db      	lsrs	r3, r3, #7
 8009f16:	61bb      	str	r3, [r7, #24]
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8009f1c:	d8f0      	bhi.n	8009f00 <SEGGER_SYSVIEW_Warn+0x6c>
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	61fa      	str	r2, [r7, #28]
 8009f24:	69ba      	ldr	r2, [r7, #24]
 8009f26:	b2d2      	uxtb	r2, r2
 8009f28:	701a      	strb	r2, [r3, #0]
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009f2e:	221a      	movs	r2, #26
 8009f30:	68f9      	ldr	r1, [r7, #12]
 8009f32:	6938      	ldr	r0, [r7, #16]
 8009f34:	f7ff f820 	bl	8008f78 <_SendPacket>
  RECORD_END();
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	f383 8811 	msr	BASEPRI, r3
}
 8009f3e:	bf00      	nop
 8009f40:	3728      	adds	r7, #40	; 0x28
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	20013ab4 	.word	0x20013ab4

08009f4c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	2000      	movs	r0, #0
 8009f60:	f7fe fea8 	bl	8008cb4 <SEGGER_RTT_Write>
  return len;
 8009f64:	683b      	ldr	r3, [r7, #0]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <__cvt>:
 8009f6e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f72:	ec55 4b10 	vmov	r4, r5, d0
 8009f76:	2d00      	cmp	r5, #0
 8009f78:	460e      	mov	r6, r1
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	462b      	mov	r3, r5
 8009f7e:	bfbb      	ittet	lt
 8009f80:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f84:	461d      	movlt	r5, r3
 8009f86:	2300      	movge	r3, #0
 8009f88:	232d      	movlt	r3, #45	; 0x2d
 8009f8a:	700b      	strb	r3, [r1, #0]
 8009f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f8e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f92:	4691      	mov	r9, r2
 8009f94:	f023 0820 	bic.w	r8, r3, #32
 8009f98:	bfbc      	itt	lt
 8009f9a:	4622      	movlt	r2, r4
 8009f9c:	4614      	movlt	r4, r2
 8009f9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009fa2:	d005      	beq.n	8009fb0 <__cvt+0x42>
 8009fa4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009fa8:	d100      	bne.n	8009fac <__cvt+0x3e>
 8009faa:	3601      	adds	r6, #1
 8009fac:	2102      	movs	r1, #2
 8009fae:	e000      	b.n	8009fb2 <__cvt+0x44>
 8009fb0:	2103      	movs	r1, #3
 8009fb2:	ab03      	add	r3, sp, #12
 8009fb4:	9301      	str	r3, [sp, #4]
 8009fb6:	ab02      	add	r3, sp, #8
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	ec45 4b10 	vmov	d0, r4, r5
 8009fbe:	4653      	mov	r3, sl
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	f000 fe55 	bl	800ac70 <_dtoa_r>
 8009fc6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009fca:	4607      	mov	r7, r0
 8009fcc:	d102      	bne.n	8009fd4 <__cvt+0x66>
 8009fce:	f019 0f01 	tst.w	r9, #1
 8009fd2:	d022      	beq.n	800a01a <__cvt+0xac>
 8009fd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009fd8:	eb07 0906 	add.w	r9, r7, r6
 8009fdc:	d110      	bne.n	800a000 <__cvt+0x92>
 8009fde:	783b      	ldrb	r3, [r7, #0]
 8009fe0:	2b30      	cmp	r3, #48	; 0x30
 8009fe2:	d10a      	bne.n	8009ffa <__cvt+0x8c>
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	4620      	mov	r0, r4
 8009fea:	4629      	mov	r1, r5
 8009fec:	f7f6 fddc 	bl	8000ba8 <__aeabi_dcmpeq>
 8009ff0:	b918      	cbnz	r0, 8009ffa <__cvt+0x8c>
 8009ff2:	f1c6 0601 	rsb	r6, r6, #1
 8009ff6:	f8ca 6000 	str.w	r6, [sl]
 8009ffa:	f8da 3000 	ldr.w	r3, [sl]
 8009ffe:	4499      	add	r9, r3
 800a000:	2200      	movs	r2, #0
 800a002:	2300      	movs	r3, #0
 800a004:	4620      	mov	r0, r4
 800a006:	4629      	mov	r1, r5
 800a008:	f7f6 fdce 	bl	8000ba8 <__aeabi_dcmpeq>
 800a00c:	b108      	cbz	r0, 800a012 <__cvt+0xa4>
 800a00e:	f8cd 900c 	str.w	r9, [sp, #12]
 800a012:	2230      	movs	r2, #48	; 0x30
 800a014:	9b03      	ldr	r3, [sp, #12]
 800a016:	454b      	cmp	r3, r9
 800a018:	d307      	bcc.n	800a02a <__cvt+0xbc>
 800a01a:	9b03      	ldr	r3, [sp, #12]
 800a01c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a01e:	1bdb      	subs	r3, r3, r7
 800a020:	4638      	mov	r0, r7
 800a022:	6013      	str	r3, [r2, #0]
 800a024:	b004      	add	sp, #16
 800a026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02a:	1c59      	adds	r1, r3, #1
 800a02c:	9103      	str	r1, [sp, #12]
 800a02e:	701a      	strb	r2, [r3, #0]
 800a030:	e7f0      	b.n	800a014 <__cvt+0xa6>

0800a032 <__exponent>:
 800a032:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a034:	4603      	mov	r3, r0
 800a036:	2900      	cmp	r1, #0
 800a038:	bfb8      	it	lt
 800a03a:	4249      	neglt	r1, r1
 800a03c:	f803 2b02 	strb.w	r2, [r3], #2
 800a040:	bfb4      	ite	lt
 800a042:	222d      	movlt	r2, #45	; 0x2d
 800a044:	222b      	movge	r2, #43	; 0x2b
 800a046:	2909      	cmp	r1, #9
 800a048:	7042      	strb	r2, [r0, #1]
 800a04a:	dd2a      	ble.n	800a0a2 <__exponent+0x70>
 800a04c:	f10d 0207 	add.w	r2, sp, #7
 800a050:	4617      	mov	r7, r2
 800a052:	260a      	movs	r6, #10
 800a054:	4694      	mov	ip, r2
 800a056:	fb91 f5f6 	sdiv	r5, r1, r6
 800a05a:	fb06 1415 	mls	r4, r6, r5, r1
 800a05e:	3430      	adds	r4, #48	; 0x30
 800a060:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a064:	460c      	mov	r4, r1
 800a066:	2c63      	cmp	r4, #99	; 0x63
 800a068:	f102 32ff 	add.w	r2, r2, #4294967295
 800a06c:	4629      	mov	r1, r5
 800a06e:	dcf1      	bgt.n	800a054 <__exponent+0x22>
 800a070:	3130      	adds	r1, #48	; 0x30
 800a072:	f1ac 0402 	sub.w	r4, ip, #2
 800a076:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a07a:	1c41      	adds	r1, r0, #1
 800a07c:	4622      	mov	r2, r4
 800a07e:	42ba      	cmp	r2, r7
 800a080:	d30a      	bcc.n	800a098 <__exponent+0x66>
 800a082:	f10d 0209 	add.w	r2, sp, #9
 800a086:	eba2 020c 	sub.w	r2, r2, ip
 800a08a:	42bc      	cmp	r4, r7
 800a08c:	bf88      	it	hi
 800a08e:	2200      	movhi	r2, #0
 800a090:	4413      	add	r3, r2
 800a092:	1a18      	subs	r0, r3, r0
 800a094:	b003      	add	sp, #12
 800a096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a098:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a09c:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a0a0:	e7ed      	b.n	800a07e <__exponent+0x4c>
 800a0a2:	2330      	movs	r3, #48	; 0x30
 800a0a4:	3130      	adds	r1, #48	; 0x30
 800a0a6:	7083      	strb	r3, [r0, #2]
 800a0a8:	70c1      	strb	r1, [r0, #3]
 800a0aa:	1d03      	adds	r3, r0, #4
 800a0ac:	e7f1      	b.n	800a092 <__exponent+0x60>
	...

0800a0b0 <_printf_float>:
 800a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	ed2d 8b02 	vpush	{d8}
 800a0b8:	b08d      	sub	sp, #52	; 0x34
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a0c0:	4616      	mov	r6, r2
 800a0c2:	461f      	mov	r7, r3
 800a0c4:	4605      	mov	r5, r0
 800a0c6:	f000 fcd7 	bl	800aa78 <_localeconv_r>
 800a0ca:	f8d0 a000 	ldr.w	sl, [r0]
 800a0ce:	4650      	mov	r0, sl
 800a0d0:	f7f6 f93e 	bl	8000350 <strlen>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	9305      	str	r3, [sp, #20]
 800a0dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a0e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a0e4:	3307      	adds	r3, #7
 800a0e6:	f023 0307 	bic.w	r3, r3, #7
 800a0ea:	f103 0208 	add.w	r2, r3, #8
 800a0ee:	f8c8 2000 	str.w	r2, [r8]
 800a0f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0fa:	9307      	str	r3, [sp, #28]
 800a0fc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a100:	ee08 0a10 	vmov	s16, r0
 800a104:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a108:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a10c:	4b9e      	ldr	r3, [pc, #632]	; (800a388 <_printf_float+0x2d8>)
 800a10e:	f04f 32ff 	mov.w	r2, #4294967295
 800a112:	f7f6 fd7b 	bl	8000c0c <__aeabi_dcmpun>
 800a116:	bb88      	cbnz	r0, 800a17c <_printf_float+0xcc>
 800a118:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a11c:	4b9a      	ldr	r3, [pc, #616]	; (800a388 <_printf_float+0x2d8>)
 800a11e:	f04f 32ff 	mov.w	r2, #4294967295
 800a122:	f7f6 fd55 	bl	8000bd0 <__aeabi_dcmple>
 800a126:	bb48      	cbnz	r0, 800a17c <_printf_float+0xcc>
 800a128:	2200      	movs	r2, #0
 800a12a:	2300      	movs	r3, #0
 800a12c:	4640      	mov	r0, r8
 800a12e:	4649      	mov	r1, r9
 800a130:	f7f6 fd44 	bl	8000bbc <__aeabi_dcmplt>
 800a134:	b110      	cbz	r0, 800a13c <_printf_float+0x8c>
 800a136:	232d      	movs	r3, #45	; 0x2d
 800a138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a13c:	4a93      	ldr	r2, [pc, #588]	; (800a38c <_printf_float+0x2dc>)
 800a13e:	4b94      	ldr	r3, [pc, #592]	; (800a390 <_printf_float+0x2e0>)
 800a140:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a144:	bf94      	ite	ls
 800a146:	4690      	movls	r8, r2
 800a148:	4698      	movhi	r8, r3
 800a14a:	2303      	movs	r3, #3
 800a14c:	6123      	str	r3, [r4, #16]
 800a14e:	9b05      	ldr	r3, [sp, #20]
 800a150:	f023 0304 	bic.w	r3, r3, #4
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	f04f 0900 	mov.w	r9, #0
 800a15a:	9700      	str	r7, [sp, #0]
 800a15c:	4633      	mov	r3, r6
 800a15e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a160:	4621      	mov	r1, r4
 800a162:	4628      	mov	r0, r5
 800a164:	f000 f9da 	bl	800a51c <_printf_common>
 800a168:	3001      	adds	r0, #1
 800a16a:	f040 8090 	bne.w	800a28e <_printf_float+0x1de>
 800a16e:	f04f 30ff 	mov.w	r0, #4294967295
 800a172:	b00d      	add	sp, #52	; 0x34
 800a174:	ecbd 8b02 	vpop	{d8}
 800a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17c:	4642      	mov	r2, r8
 800a17e:	464b      	mov	r3, r9
 800a180:	4640      	mov	r0, r8
 800a182:	4649      	mov	r1, r9
 800a184:	f7f6 fd42 	bl	8000c0c <__aeabi_dcmpun>
 800a188:	b140      	cbz	r0, 800a19c <_printf_float+0xec>
 800a18a:	464b      	mov	r3, r9
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	bfbc      	itt	lt
 800a190:	232d      	movlt	r3, #45	; 0x2d
 800a192:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a196:	4a7f      	ldr	r2, [pc, #508]	; (800a394 <_printf_float+0x2e4>)
 800a198:	4b7f      	ldr	r3, [pc, #508]	; (800a398 <_printf_float+0x2e8>)
 800a19a:	e7d1      	b.n	800a140 <_printf_float+0x90>
 800a19c:	6863      	ldr	r3, [r4, #4]
 800a19e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a1a2:	9206      	str	r2, [sp, #24]
 800a1a4:	1c5a      	adds	r2, r3, #1
 800a1a6:	d13f      	bne.n	800a228 <_printf_float+0x178>
 800a1a8:	2306      	movs	r3, #6
 800a1aa:	6063      	str	r3, [r4, #4]
 800a1ac:	9b05      	ldr	r3, [sp, #20]
 800a1ae:	6861      	ldr	r1, [r4, #4]
 800a1b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	9303      	str	r3, [sp, #12]
 800a1b8:	ab0a      	add	r3, sp, #40	; 0x28
 800a1ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a1be:	ab09      	add	r3, sp, #36	; 0x24
 800a1c0:	ec49 8b10 	vmov	d0, r8, r9
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	6022      	str	r2, [r4, #0]
 800a1c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	f7ff fece 	bl	8009f6e <__cvt>
 800a1d2:	9b06      	ldr	r3, [sp, #24]
 800a1d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1d6:	2b47      	cmp	r3, #71	; 0x47
 800a1d8:	4680      	mov	r8, r0
 800a1da:	d108      	bne.n	800a1ee <_printf_float+0x13e>
 800a1dc:	1cc8      	adds	r0, r1, #3
 800a1de:	db02      	blt.n	800a1e6 <_printf_float+0x136>
 800a1e0:	6863      	ldr	r3, [r4, #4]
 800a1e2:	4299      	cmp	r1, r3
 800a1e4:	dd41      	ble.n	800a26a <_printf_float+0x1ba>
 800a1e6:	f1ab 0302 	sub.w	r3, fp, #2
 800a1ea:	fa5f fb83 	uxtb.w	fp, r3
 800a1ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1f2:	d820      	bhi.n	800a236 <_printf_float+0x186>
 800a1f4:	3901      	subs	r1, #1
 800a1f6:	465a      	mov	r2, fp
 800a1f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a1fc:	9109      	str	r1, [sp, #36]	; 0x24
 800a1fe:	f7ff ff18 	bl	800a032 <__exponent>
 800a202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a204:	1813      	adds	r3, r2, r0
 800a206:	2a01      	cmp	r2, #1
 800a208:	4681      	mov	r9, r0
 800a20a:	6123      	str	r3, [r4, #16]
 800a20c:	dc02      	bgt.n	800a214 <_printf_float+0x164>
 800a20e:	6822      	ldr	r2, [r4, #0]
 800a210:	07d2      	lsls	r2, r2, #31
 800a212:	d501      	bpl.n	800a218 <_printf_float+0x168>
 800a214:	3301      	adds	r3, #1
 800a216:	6123      	str	r3, [r4, #16]
 800a218:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d09c      	beq.n	800a15a <_printf_float+0xaa>
 800a220:	232d      	movs	r3, #45	; 0x2d
 800a222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a226:	e798      	b.n	800a15a <_printf_float+0xaa>
 800a228:	9a06      	ldr	r2, [sp, #24]
 800a22a:	2a47      	cmp	r2, #71	; 0x47
 800a22c:	d1be      	bne.n	800a1ac <_printf_float+0xfc>
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1bc      	bne.n	800a1ac <_printf_float+0xfc>
 800a232:	2301      	movs	r3, #1
 800a234:	e7b9      	b.n	800a1aa <_printf_float+0xfa>
 800a236:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a23a:	d118      	bne.n	800a26e <_printf_float+0x1be>
 800a23c:	2900      	cmp	r1, #0
 800a23e:	6863      	ldr	r3, [r4, #4]
 800a240:	dd0b      	ble.n	800a25a <_printf_float+0x1aa>
 800a242:	6121      	str	r1, [r4, #16]
 800a244:	b913      	cbnz	r3, 800a24c <_printf_float+0x19c>
 800a246:	6822      	ldr	r2, [r4, #0]
 800a248:	07d0      	lsls	r0, r2, #31
 800a24a:	d502      	bpl.n	800a252 <_printf_float+0x1a2>
 800a24c:	3301      	adds	r3, #1
 800a24e:	440b      	add	r3, r1
 800a250:	6123      	str	r3, [r4, #16]
 800a252:	65a1      	str	r1, [r4, #88]	; 0x58
 800a254:	f04f 0900 	mov.w	r9, #0
 800a258:	e7de      	b.n	800a218 <_printf_float+0x168>
 800a25a:	b913      	cbnz	r3, 800a262 <_printf_float+0x1b2>
 800a25c:	6822      	ldr	r2, [r4, #0]
 800a25e:	07d2      	lsls	r2, r2, #31
 800a260:	d501      	bpl.n	800a266 <_printf_float+0x1b6>
 800a262:	3302      	adds	r3, #2
 800a264:	e7f4      	b.n	800a250 <_printf_float+0x1a0>
 800a266:	2301      	movs	r3, #1
 800a268:	e7f2      	b.n	800a250 <_printf_float+0x1a0>
 800a26a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a270:	4299      	cmp	r1, r3
 800a272:	db05      	blt.n	800a280 <_printf_float+0x1d0>
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	6121      	str	r1, [r4, #16]
 800a278:	07d8      	lsls	r0, r3, #31
 800a27a:	d5ea      	bpl.n	800a252 <_printf_float+0x1a2>
 800a27c:	1c4b      	adds	r3, r1, #1
 800a27e:	e7e7      	b.n	800a250 <_printf_float+0x1a0>
 800a280:	2900      	cmp	r1, #0
 800a282:	bfd4      	ite	le
 800a284:	f1c1 0202 	rsble	r2, r1, #2
 800a288:	2201      	movgt	r2, #1
 800a28a:	4413      	add	r3, r2
 800a28c:	e7e0      	b.n	800a250 <_printf_float+0x1a0>
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	055a      	lsls	r2, r3, #21
 800a292:	d407      	bmi.n	800a2a4 <_printf_float+0x1f4>
 800a294:	6923      	ldr	r3, [r4, #16]
 800a296:	4642      	mov	r2, r8
 800a298:	4631      	mov	r1, r6
 800a29a:	4628      	mov	r0, r5
 800a29c:	47b8      	blx	r7
 800a29e:	3001      	adds	r0, #1
 800a2a0:	d12c      	bne.n	800a2fc <_printf_float+0x24c>
 800a2a2:	e764      	b.n	800a16e <_printf_float+0xbe>
 800a2a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2a8:	f240 80e0 	bls.w	800a46c <_printf_float+0x3bc>
 800a2ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	f7f6 fc78 	bl	8000ba8 <__aeabi_dcmpeq>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d034      	beq.n	800a326 <_printf_float+0x276>
 800a2bc:	4a37      	ldr	r2, [pc, #220]	; (800a39c <_printf_float+0x2ec>)
 800a2be:	2301      	movs	r3, #1
 800a2c0:	4631      	mov	r1, r6
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	47b8      	blx	r7
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	f43f af51 	beq.w	800a16e <_printf_float+0xbe>
 800a2cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	db02      	blt.n	800a2da <_printf_float+0x22a>
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	07d8      	lsls	r0, r3, #31
 800a2d8:	d510      	bpl.n	800a2fc <_printf_float+0x24c>
 800a2da:	ee18 3a10 	vmov	r3, s16
 800a2de:	4652      	mov	r2, sl
 800a2e0:	4631      	mov	r1, r6
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	47b8      	blx	r7
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	f43f af41 	beq.w	800a16e <_printf_float+0xbe>
 800a2ec:	f04f 0800 	mov.w	r8, #0
 800a2f0:	f104 091a 	add.w	r9, r4, #26
 800a2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	4543      	cmp	r3, r8
 800a2fa:	dc09      	bgt.n	800a310 <_printf_float+0x260>
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	079b      	lsls	r3, r3, #30
 800a300:	f100 8107 	bmi.w	800a512 <_printf_float+0x462>
 800a304:	68e0      	ldr	r0, [r4, #12]
 800a306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a308:	4298      	cmp	r0, r3
 800a30a:	bfb8      	it	lt
 800a30c:	4618      	movlt	r0, r3
 800a30e:	e730      	b.n	800a172 <_printf_float+0xc2>
 800a310:	2301      	movs	r3, #1
 800a312:	464a      	mov	r2, r9
 800a314:	4631      	mov	r1, r6
 800a316:	4628      	mov	r0, r5
 800a318:	47b8      	blx	r7
 800a31a:	3001      	adds	r0, #1
 800a31c:	f43f af27 	beq.w	800a16e <_printf_float+0xbe>
 800a320:	f108 0801 	add.w	r8, r8, #1
 800a324:	e7e6      	b.n	800a2f4 <_printf_float+0x244>
 800a326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a328:	2b00      	cmp	r3, #0
 800a32a:	dc39      	bgt.n	800a3a0 <_printf_float+0x2f0>
 800a32c:	4a1b      	ldr	r2, [pc, #108]	; (800a39c <_printf_float+0x2ec>)
 800a32e:	2301      	movs	r3, #1
 800a330:	4631      	mov	r1, r6
 800a332:	4628      	mov	r0, r5
 800a334:	47b8      	blx	r7
 800a336:	3001      	adds	r0, #1
 800a338:	f43f af19 	beq.w	800a16e <_printf_float+0xbe>
 800a33c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a340:	4313      	orrs	r3, r2
 800a342:	d102      	bne.n	800a34a <_printf_float+0x29a>
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	07d9      	lsls	r1, r3, #31
 800a348:	d5d8      	bpl.n	800a2fc <_printf_float+0x24c>
 800a34a:	ee18 3a10 	vmov	r3, s16
 800a34e:	4652      	mov	r2, sl
 800a350:	4631      	mov	r1, r6
 800a352:	4628      	mov	r0, r5
 800a354:	47b8      	blx	r7
 800a356:	3001      	adds	r0, #1
 800a358:	f43f af09 	beq.w	800a16e <_printf_float+0xbe>
 800a35c:	f04f 0900 	mov.w	r9, #0
 800a360:	f104 0a1a 	add.w	sl, r4, #26
 800a364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a366:	425b      	negs	r3, r3
 800a368:	454b      	cmp	r3, r9
 800a36a:	dc01      	bgt.n	800a370 <_printf_float+0x2c0>
 800a36c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a36e:	e792      	b.n	800a296 <_printf_float+0x1e6>
 800a370:	2301      	movs	r3, #1
 800a372:	4652      	mov	r2, sl
 800a374:	4631      	mov	r1, r6
 800a376:	4628      	mov	r0, r5
 800a378:	47b8      	blx	r7
 800a37a:	3001      	adds	r0, #1
 800a37c:	f43f aef7 	beq.w	800a16e <_printf_float+0xbe>
 800a380:	f109 0901 	add.w	r9, r9, #1
 800a384:	e7ee      	b.n	800a364 <_printf_float+0x2b4>
 800a386:	bf00      	nop
 800a388:	7fefffff 	.word	0x7fefffff
 800a38c:	0800cbe3 	.word	0x0800cbe3
 800a390:	0800cbe7 	.word	0x0800cbe7
 800a394:	0800cbeb 	.word	0x0800cbeb
 800a398:	0800cbef 	.word	0x0800cbef
 800a39c:	0800cbf3 	.word	0x0800cbf3
 800a3a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	bfa8      	it	ge
 800a3a8:	461a      	movge	r2, r3
 800a3aa:	2a00      	cmp	r2, #0
 800a3ac:	4691      	mov	r9, r2
 800a3ae:	dc37      	bgt.n	800a420 <_printf_float+0x370>
 800a3b0:	f04f 0b00 	mov.w	fp, #0
 800a3b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3b8:	f104 021a 	add.w	r2, r4, #26
 800a3bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3be:	9305      	str	r3, [sp, #20]
 800a3c0:	eba3 0309 	sub.w	r3, r3, r9
 800a3c4:	455b      	cmp	r3, fp
 800a3c6:	dc33      	bgt.n	800a430 <_printf_float+0x380>
 800a3c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	db3b      	blt.n	800a448 <_printf_float+0x398>
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	07da      	lsls	r2, r3, #31
 800a3d4:	d438      	bmi.n	800a448 <_printf_float+0x398>
 800a3d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a3da:	eba2 0903 	sub.w	r9, r2, r3
 800a3de:	9b05      	ldr	r3, [sp, #20]
 800a3e0:	1ad2      	subs	r2, r2, r3
 800a3e2:	4591      	cmp	r9, r2
 800a3e4:	bfa8      	it	ge
 800a3e6:	4691      	movge	r9, r2
 800a3e8:	f1b9 0f00 	cmp.w	r9, #0
 800a3ec:	dc35      	bgt.n	800a45a <_printf_float+0x3aa>
 800a3ee:	f04f 0800 	mov.w	r8, #0
 800a3f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3f6:	f104 0a1a 	add.w	sl, r4, #26
 800a3fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3fe:	1a9b      	subs	r3, r3, r2
 800a400:	eba3 0309 	sub.w	r3, r3, r9
 800a404:	4543      	cmp	r3, r8
 800a406:	f77f af79 	ble.w	800a2fc <_printf_float+0x24c>
 800a40a:	2301      	movs	r3, #1
 800a40c:	4652      	mov	r2, sl
 800a40e:	4631      	mov	r1, r6
 800a410:	4628      	mov	r0, r5
 800a412:	47b8      	blx	r7
 800a414:	3001      	adds	r0, #1
 800a416:	f43f aeaa 	beq.w	800a16e <_printf_float+0xbe>
 800a41a:	f108 0801 	add.w	r8, r8, #1
 800a41e:	e7ec      	b.n	800a3fa <_printf_float+0x34a>
 800a420:	4613      	mov	r3, r2
 800a422:	4631      	mov	r1, r6
 800a424:	4642      	mov	r2, r8
 800a426:	4628      	mov	r0, r5
 800a428:	47b8      	blx	r7
 800a42a:	3001      	adds	r0, #1
 800a42c:	d1c0      	bne.n	800a3b0 <_printf_float+0x300>
 800a42e:	e69e      	b.n	800a16e <_printf_float+0xbe>
 800a430:	2301      	movs	r3, #1
 800a432:	4631      	mov	r1, r6
 800a434:	4628      	mov	r0, r5
 800a436:	9205      	str	r2, [sp, #20]
 800a438:	47b8      	blx	r7
 800a43a:	3001      	adds	r0, #1
 800a43c:	f43f ae97 	beq.w	800a16e <_printf_float+0xbe>
 800a440:	9a05      	ldr	r2, [sp, #20]
 800a442:	f10b 0b01 	add.w	fp, fp, #1
 800a446:	e7b9      	b.n	800a3bc <_printf_float+0x30c>
 800a448:	ee18 3a10 	vmov	r3, s16
 800a44c:	4652      	mov	r2, sl
 800a44e:	4631      	mov	r1, r6
 800a450:	4628      	mov	r0, r5
 800a452:	47b8      	blx	r7
 800a454:	3001      	adds	r0, #1
 800a456:	d1be      	bne.n	800a3d6 <_printf_float+0x326>
 800a458:	e689      	b.n	800a16e <_printf_float+0xbe>
 800a45a:	9a05      	ldr	r2, [sp, #20]
 800a45c:	464b      	mov	r3, r9
 800a45e:	4442      	add	r2, r8
 800a460:	4631      	mov	r1, r6
 800a462:	4628      	mov	r0, r5
 800a464:	47b8      	blx	r7
 800a466:	3001      	adds	r0, #1
 800a468:	d1c1      	bne.n	800a3ee <_printf_float+0x33e>
 800a46a:	e680      	b.n	800a16e <_printf_float+0xbe>
 800a46c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a46e:	2a01      	cmp	r2, #1
 800a470:	dc01      	bgt.n	800a476 <_printf_float+0x3c6>
 800a472:	07db      	lsls	r3, r3, #31
 800a474:	d53a      	bpl.n	800a4ec <_printf_float+0x43c>
 800a476:	2301      	movs	r3, #1
 800a478:	4642      	mov	r2, r8
 800a47a:	4631      	mov	r1, r6
 800a47c:	4628      	mov	r0, r5
 800a47e:	47b8      	blx	r7
 800a480:	3001      	adds	r0, #1
 800a482:	f43f ae74 	beq.w	800a16e <_printf_float+0xbe>
 800a486:	ee18 3a10 	vmov	r3, s16
 800a48a:	4652      	mov	r2, sl
 800a48c:	4631      	mov	r1, r6
 800a48e:	4628      	mov	r0, r5
 800a490:	47b8      	blx	r7
 800a492:	3001      	adds	r0, #1
 800a494:	f43f ae6b 	beq.w	800a16e <_printf_float+0xbe>
 800a498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a49c:	2200      	movs	r2, #0
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a4a4:	f7f6 fb80 	bl	8000ba8 <__aeabi_dcmpeq>
 800a4a8:	b9d8      	cbnz	r0, 800a4e2 <_printf_float+0x432>
 800a4aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a4ae:	f108 0201 	add.w	r2, r8, #1
 800a4b2:	4631      	mov	r1, r6
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	47b8      	blx	r7
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	d10e      	bne.n	800a4da <_printf_float+0x42a>
 800a4bc:	e657      	b.n	800a16e <_printf_float+0xbe>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	4652      	mov	r2, sl
 800a4c2:	4631      	mov	r1, r6
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	47b8      	blx	r7
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	f43f ae50 	beq.w	800a16e <_printf_float+0xbe>
 800a4ce:	f108 0801 	add.w	r8, r8, #1
 800a4d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	4543      	cmp	r3, r8
 800a4d8:	dcf1      	bgt.n	800a4be <_printf_float+0x40e>
 800a4da:	464b      	mov	r3, r9
 800a4dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a4e0:	e6da      	b.n	800a298 <_printf_float+0x1e8>
 800a4e2:	f04f 0800 	mov.w	r8, #0
 800a4e6:	f104 0a1a 	add.w	sl, r4, #26
 800a4ea:	e7f2      	b.n	800a4d2 <_printf_float+0x422>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	4642      	mov	r2, r8
 800a4f0:	e7df      	b.n	800a4b2 <_printf_float+0x402>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	464a      	mov	r2, r9
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	47b8      	blx	r7
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	f43f ae36 	beq.w	800a16e <_printf_float+0xbe>
 800a502:	f108 0801 	add.w	r8, r8, #1
 800a506:	68e3      	ldr	r3, [r4, #12]
 800a508:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a50a:	1a5b      	subs	r3, r3, r1
 800a50c:	4543      	cmp	r3, r8
 800a50e:	dcf0      	bgt.n	800a4f2 <_printf_float+0x442>
 800a510:	e6f8      	b.n	800a304 <_printf_float+0x254>
 800a512:	f04f 0800 	mov.w	r8, #0
 800a516:	f104 0919 	add.w	r9, r4, #25
 800a51a:	e7f4      	b.n	800a506 <_printf_float+0x456>

0800a51c <_printf_common>:
 800a51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a520:	4616      	mov	r6, r2
 800a522:	4699      	mov	r9, r3
 800a524:	688a      	ldr	r2, [r1, #8]
 800a526:	690b      	ldr	r3, [r1, #16]
 800a528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a52c:	4293      	cmp	r3, r2
 800a52e:	bfb8      	it	lt
 800a530:	4613      	movlt	r3, r2
 800a532:	6033      	str	r3, [r6, #0]
 800a534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a538:	4607      	mov	r7, r0
 800a53a:	460c      	mov	r4, r1
 800a53c:	b10a      	cbz	r2, 800a542 <_printf_common+0x26>
 800a53e:	3301      	adds	r3, #1
 800a540:	6033      	str	r3, [r6, #0]
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	0699      	lsls	r1, r3, #26
 800a546:	bf42      	ittt	mi
 800a548:	6833      	ldrmi	r3, [r6, #0]
 800a54a:	3302      	addmi	r3, #2
 800a54c:	6033      	strmi	r3, [r6, #0]
 800a54e:	6825      	ldr	r5, [r4, #0]
 800a550:	f015 0506 	ands.w	r5, r5, #6
 800a554:	d106      	bne.n	800a564 <_printf_common+0x48>
 800a556:	f104 0a19 	add.w	sl, r4, #25
 800a55a:	68e3      	ldr	r3, [r4, #12]
 800a55c:	6832      	ldr	r2, [r6, #0]
 800a55e:	1a9b      	subs	r3, r3, r2
 800a560:	42ab      	cmp	r3, r5
 800a562:	dc26      	bgt.n	800a5b2 <_printf_common+0x96>
 800a564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a568:	1e13      	subs	r3, r2, #0
 800a56a:	6822      	ldr	r2, [r4, #0]
 800a56c:	bf18      	it	ne
 800a56e:	2301      	movne	r3, #1
 800a570:	0692      	lsls	r2, r2, #26
 800a572:	d42b      	bmi.n	800a5cc <_printf_common+0xb0>
 800a574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a578:	4649      	mov	r1, r9
 800a57a:	4638      	mov	r0, r7
 800a57c:	47c0      	blx	r8
 800a57e:	3001      	adds	r0, #1
 800a580:	d01e      	beq.n	800a5c0 <_printf_common+0xa4>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	6922      	ldr	r2, [r4, #16]
 800a586:	f003 0306 	and.w	r3, r3, #6
 800a58a:	2b04      	cmp	r3, #4
 800a58c:	bf02      	ittt	eq
 800a58e:	68e5      	ldreq	r5, [r4, #12]
 800a590:	6833      	ldreq	r3, [r6, #0]
 800a592:	1aed      	subeq	r5, r5, r3
 800a594:	68a3      	ldr	r3, [r4, #8]
 800a596:	bf0c      	ite	eq
 800a598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a59c:	2500      	movne	r5, #0
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	bfc4      	itt	gt
 800a5a2:	1a9b      	subgt	r3, r3, r2
 800a5a4:	18ed      	addgt	r5, r5, r3
 800a5a6:	2600      	movs	r6, #0
 800a5a8:	341a      	adds	r4, #26
 800a5aa:	42b5      	cmp	r5, r6
 800a5ac:	d11a      	bne.n	800a5e4 <_printf_common+0xc8>
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	e008      	b.n	800a5c4 <_printf_common+0xa8>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	4652      	mov	r2, sl
 800a5b6:	4649      	mov	r1, r9
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	47c0      	blx	r8
 800a5bc:	3001      	adds	r0, #1
 800a5be:	d103      	bne.n	800a5c8 <_printf_common+0xac>
 800a5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c8:	3501      	adds	r5, #1
 800a5ca:	e7c6      	b.n	800a55a <_printf_common+0x3e>
 800a5cc:	18e1      	adds	r1, r4, r3
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	2030      	movs	r0, #48	; 0x30
 800a5d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5d6:	4422      	add	r2, r4
 800a5d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5e0:	3302      	adds	r3, #2
 800a5e2:	e7c7      	b.n	800a574 <_printf_common+0x58>
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	4622      	mov	r2, r4
 800a5e8:	4649      	mov	r1, r9
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	47c0      	blx	r8
 800a5ee:	3001      	adds	r0, #1
 800a5f0:	d0e6      	beq.n	800a5c0 <_printf_common+0xa4>
 800a5f2:	3601      	adds	r6, #1
 800a5f4:	e7d9      	b.n	800a5aa <_printf_common+0x8e>
	...

0800a5f8 <_printf_i>:
 800a5f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5fc:	7e0f      	ldrb	r7, [r1, #24]
 800a5fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a600:	2f78      	cmp	r7, #120	; 0x78
 800a602:	4691      	mov	r9, r2
 800a604:	4680      	mov	r8, r0
 800a606:	460c      	mov	r4, r1
 800a608:	469a      	mov	sl, r3
 800a60a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a60e:	d807      	bhi.n	800a620 <_printf_i+0x28>
 800a610:	2f62      	cmp	r7, #98	; 0x62
 800a612:	d80a      	bhi.n	800a62a <_printf_i+0x32>
 800a614:	2f00      	cmp	r7, #0
 800a616:	f000 80d4 	beq.w	800a7c2 <_printf_i+0x1ca>
 800a61a:	2f58      	cmp	r7, #88	; 0x58
 800a61c:	f000 80c0 	beq.w	800a7a0 <_printf_i+0x1a8>
 800a620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a628:	e03a      	b.n	800a6a0 <_printf_i+0xa8>
 800a62a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a62e:	2b15      	cmp	r3, #21
 800a630:	d8f6      	bhi.n	800a620 <_printf_i+0x28>
 800a632:	a101      	add	r1, pc, #4	; (adr r1, 800a638 <_printf_i+0x40>)
 800a634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a638:	0800a691 	.word	0x0800a691
 800a63c:	0800a6a5 	.word	0x0800a6a5
 800a640:	0800a621 	.word	0x0800a621
 800a644:	0800a621 	.word	0x0800a621
 800a648:	0800a621 	.word	0x0800a621
 800a64c:	0800a621 	.word	0x0800a621
 800a650:	0800a6a5 	.word	0x0800a6a5
 800a654:	0800a621 	.word	0x0800a621
 800a658:	0800a621 	.word	0x0800a621
 800a65c:	0800a621 	.word	0x0800a621
 800a660:	0800a621 	.word	0x0800a621
 800a664:	0800a7a9 	.word	0x0800a7a9
 800a668:	0800a6d1 	.word	0x0800a6d1
 800a66c:	0800a763 	.word	0x0800a763
 800a670:	0800a621 	.word	0x0800a621
 800a674:	0800a621 	.word	0x0800a621
 800a678:	0800a7cb 	.word	0x0800a7cb
 800a67c:	0800a621 	.word	0x0800a621
 800a680:	0800a6d1 	.word	0x0800a6d1
 800a684:	0800a621 	.word	0x0800a621
 800a688:	0800a621 	.word	0x0800a621
 800a68c:	0800a76b 	.word	0x0800a76b
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	1d1a      	adds	r2, r3, #4
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	602a      	str	r2, [r5, #0]
 800a698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a69c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e09f      	b.n	800a7e4 <_printf_i+0x1ec>
 800a6a4:	6820      	ldr	r0, [r4, #0]
 800a6a6:	682b      	ldr	r3, [r5, #0]
 800a6a8:	0607      	lsls	r7, r0, #24
 800a6aa:	f103 0104 	add.w	r1, r3, #4
 800a6ae:	6029      	str	r1, [r5, #0]
 800a6b0:	d501      	bpl.n	800a6b6 <_printf_i+0xbe>
 800a6b2:	681e      	ldr	r6, [r3, #0]
 800a6b4:	e003      	b.n	800a6be <_printf_i+0xc6>
 800a6b6:	0646      	lsls	r6, r0, #25
 800a6b8:	d5fb      	bpl.n	800a6b2 <_printf_i+0xba>
 800a6ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a6be:	2e00      	cmp	r6, #0
 800a6c0:	da03      	bge.n	800a6ca <_printf_i+0xd2>
 800a6c2:	232d      	movs	r3, #45	; 0x2d
 800a6c4:	4276      	negs	r6, r6
 800a6c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6ca:	485a      	ldr	r0, [pc, #360]	; (800a834 <_printf_i+0x23c>)
 800a6cc:	230a      	movs	r3, #10
 800a6ce:	e012      	b.n	800a6f6 <_printf_i+0xfe>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	6820      	ldr	r0, [r4, #0]
 800a6d4:	1d19      	adds	r1, r3, #4
 800a6d6:	6029      	str	r1, [r5, #0]
 800a6d8:	0605      	lsls	r5, r0, #24
 800a6da:	d501      	bpl.n	800a6e0 <_printf_i+0xe8>
 800a6dc:	681e      	ldr	r6, [r3, #0]
 800a6de:	e002      	b.n	800a6e6 <_printf_i+0xee>
 800a6e0:	0641      	lsls	r1, r0, #25
 800a6e2:	d5fb      	bpl.n	800a6dc <_printf_i+0xe4>
 800a6e4:	881e      	ldrh	r6, [r3, #0]
 800a6e6:	4853      	ldr	r0, [pc, #332]	; (800a834 <_printf_i+0x23c>)
 800a6e8:	2f6f      	cmp	r7, #111	; 0x6f
 800a6ea:	bf0c      	ite	eq
 800a6ec:	2308      	moveq	r3, #8
 800a6ee:	230a      	movne	r3, #10
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6f6:	6865      	ldr	r5, [r4, #4]
 800a6f8:	60a5      	str	r5, [r4, #8]
 800a6fa:	2d00      	cmp	r5, #0
 800a6fc:	bfa2      	ittt	ge
 800a6fe:	6821      	ldrge	r1, [r4, #0]
 800a700:	f021 0104 	bicge.w	r1, r1, #4
 800a704:	6021      	strge	r1, [r4, #0]
 800a706:	b90e      	cbnz	r6, 800a70c <_printf_i+0x114>
 800a708:	2d00      	cmp	r5, #0
 800a70a:	d04b      	beq.n	800a7a4 <_printf_i+0x1ac>
 800a70c:	4615      	mov	r5, r2
 800a70e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a712:	fb03 6711 	mls	r7, r3, r1, r6
 800a716:	5dc7      	ldrb	r7, [r0, r7]
 800a718:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a71c:	4637      	mov	r7, r6
 800a71e:	42bb      	cmp	r3, r7
 800a720:	460e      	mov	r6, r1
 800a722:	d9f4      	bls.n	800a70e <_printf_i+0x116>
 800a724:	2b08      	cmp	r3, #8
 800a726:	d10b      	bne.n	800a740 <_printf_i+0x148>
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	07de      	lsls	r6, r3, #31
 800a72c:	d508      	bpl.n	800a740 <_printf_i+0x148>
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	6861      	ldr	r1, [r4, #4]
 800a732:	4299      	cmp	r1, r3
 800a734:	bfde      	ittt	le
 800a736:	2330      	movle	r3, #48	; 0x30
 800a738:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a73c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a740:	1b52      	subs	r2, r2, r5
 800a742:	6122      	str	r2, [r4, #16]
 800a744:	f8cd a000 	str.w	sl, [sp]
 800a748:	464b      	mov	r3, r9
 800a74a:	aa03      	add	r2, sp, #12
 800a74c:	4621      	mov	r1, r4
 800a74e:	4640      	mov	r0, r8
 800a750:	f7ff fee4 	bl	800a51c <_printf_common>
 800a754:	3001      	adds	r0, #1
 800a756:	d14a      	bne.n	800a7ee <_printf_i+0x1f6>
 800a758:	f04f 30ff 	mov.w	r0, #4294967295
 800a75c:	b004      	add	sp, #16
 800a75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	f043 0320 	orr.w	r3, r3, #32
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	4833      	ldr	r0, [pc, #204]	; (800a838 <_printf_i+0x240>)
 800a76c:	2778      	movs	r7, #120	; 0x78
 800a76e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	6829      	ldr	r1, [r5, #0]
 800a776:	061f      	lsls	r7, r3, #24
 800a778:	f851 6b04 	ldr.w	r6, [r1], #4
 800a77c:	d402      	bmi.n	800a784 <_printf_i+0x18c>
 800a77e:	065f      	lsls	r7, r3, #25
 800a780:	bf48      	it	mi
 800a782:	b2b6      	uxthmi	r6, r6
 800a784:	07df      	lsls	r7, r3, #31
 800a786:	bf48      	it	mi
 800a788:	f043 0320 	orrmi.w	r3, r3, #32
 800a78c:	6029      	str	r1, [r5, #0]
 800a78e:	bf48      	it	mi
 800a790:	6023      	strmi	r3, [r4, #0]
 800a792:	b91e      	cbnz	r6, 800a79c <_printf_i+0x1a4>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	f023 0320 	bic.w	r3, r3, #32
 800a79a:	6023      	str	r3, [r4, #0]
 800a79c:	2310      	movs	r3, #16
 800a79e:	e7a7      	b.n	800a6f0 <_printf_i+0xf8>
 800a7a0:	4824      	ldr	r0, [pc, #144]	; (800a834 <_printf_i+0x23c>)
 800a7a2:	e7e4      	b.n	800a76e <_printf_i+0x176>
 800a7a4:	4615      	mov	r5, r2
 800a7a6:	e7bd      	b.n	800a724 <_printf_i+0x12c>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	6826      	ldr	r6, [r4, #0]
 800a7ac:	6961      	ldr	r1, [r4, #20]
 800a7ae:	1d18      	adds	r0, r3, #4
 800a7b0:	6028      	str	r0, [r5, #0]
 800a7b2:	0635      	lsls	r5, r6, #24
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	d501      	bpl.n	800a7bc <_printf_i+0x1c4>
 800a7b8:	6019      	str	r1, [r3, #0]
 800a7ba:	e002      	b.n	800a7c2 <_printf_i+0x1ca>
 800a7bc:	0670      	lsls	r0, r6, #25
 800a7be:	d5fb      	bpl.n	800a7b8 <_printf_i+0x1c0>
 800a7c0:	8019      	strh	r1, [r3, #0]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	6123      	str	r3, [r4, #16]
 800a7c6:	4615      	mov	r5, r2
 800a7c8:	e7bc      	b.n	800a744 <_printf_i+0x14c>
 800a7ca:	682b      	ldr	r3, [r5, #0]
 800a7cc:	1d1a      	adds	r2, r3, #4
 800a7ce:	602a      	str	r2, [r5, #0]
 800a7d0:	681d      	ldr	r5, [r3, #0]
 800a7d2:	6862      	ldr	r2, [r4, #4]
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	f7f5 fd6a 	bl	80002b0 <memchr>
 800a7dc:	b108      	cbz	r0, 800a7e2 <_printf_i+0x1ea>
 800a7de:	1b40      	subs	r0, r0, r5
 800a7e0:	6060      	str	r0, [r4, #4]
 800a7e2:	6863      	ldr	r3, [r4, #4]
 800a7e4:	6123      	str	r3, [r4, #16]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7ec:	e7aa      	b.n	800a744 <_printf_i+0x14c>
 800a7ee:	6923      	ldr	r3, [r4, #16]
 800a7f0:	462a      	mov	r2, r5
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	47d0      	blx	sl
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	d0ad      	beq.n	800a758 <_printf_i+0x160>
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	079b      	lsls	r3, r3, #30
 800a800:	d413      	bmi.n	800a82a <_printf_i+0x232>
 800a802:	68e0      	ldr	r0, [r4, #12]
 800a804:	9b03      	ldr	r3, [sp, #12]
 800a806:	4298      	cmp	r0, r3
 800a808:	bfb8      	it	lt
 800a80a:	4618      	movlt	r0, r3
 800a80c:	e7a6      	b.n	800a75c <_printf_i+0x164>
 800a80e:	2301      	movs	r3, #1
 800a810:	4632      	mov	r2, r6
 800a812:	4649      	mov	r1, r9
 800a814:	4640      	mov	r0, r8
 800a816:	47d0      	blx	sl
 800a818:	3001      	adds	r0, #1
 800a81a:	d09d      	beq.n	800a758 <_printf_i+0x160>
 800a81c:	3501      	adds	r5, #1
 800a81e:	68e3      	ldr	r3, [r4, #12]
 800a820:	9903      	ldr	r1, [sp, #12]
 800a822:	1a5b      	subs	r3, r3, r1
 800a824:	42ab      	cmp	r3, r5
 800a826:	dcf2      	bgt.n	800a80e <_printf_i+0x216>
 800a828:	e7eb      	b.n	800a802 <_printf_i+0x20a>
 800a82a:	2500      	movs	r5, #0
 800a82c:	f104 0619 	add.w	r6, r4, #25
 800a830:	e7f5      	b.n	800a81e <_printf_i+0x226>
 800a832:	bf00      	nop
 800a834:	0800cbf5 	.word	0x0800cbf5
 800a838:	0800cc06 	.word	0x0800cc06

0800a83c <std>:
 800a83c:	2300      	movs	r3, #0
 800a83e:	b510      	push	{r4, lr}
 800a840:	4604      	mov	r4, r0
 800a842:	e9c0 3300 	strd	r3, r3, [r0]
 800a846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a84a:	6083      	str	r3, [r0, #8]
 800a84c:	8181      	strh	r1, [r0, #12]
 800a84e:	6643      	str	r3, [r0, #100]	; 0x64
 800a850:	81c2      	strh	r2, [r0, #14]
 800a852:	6183      	str	r3, [r0, #24]
 800a854:	4619      	mov	r1, r3
 800a856:	2208      	movs	r2, #8
 800a858:	305c      	adds	r0, #92	; 0x5c
 800a85a:	f000 f904 	bl	800aa66 <memset>
 800a85e:	4b0d      	ldr	r3, [pc, #52]	; (800a894 <std+0x58>)
 800a860:	6263      	str	r3, [r4, #36]	; 0x24
 800a862:	4b0d      	ldr	r3, [pc, #52]	; (800a898 <std+0x5c>)
 800a864:	62a3      	str	r3, [r4, #40]	; 0x28
 800a866:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <std+0x60>)
 800a868:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a86a:	4b0d      	ldr	r3, [pc, #52]	; (800a8a0 <std+0x64>)
 800a86c:	6323      	str	r3, [r4, #48]	; 0x30
 800a86e:	4b0d      	ldr	r3, [pc, #52]	; (800a8a4 <std+0x68>)
 800a870:	6224      	str	r4, [r4, #32]
 800a872:	429c      	cmp	r4, r3
 800a874:	d006      	beq.n	800a884 <std+0x48>
 800a876:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a87a:	4294      	cmp	r4, r2
 800a87c:	d002      	beq.n	800a884 <std+0x48>
 800a87e:	33d0      	adds	r3, #208	; 0xd0
 800a880:	429c      	cmp	r4, r3
 800a882:	d105      	bne.n	800a890 <std+0x54>
 800a884:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a88c:	f000 b956 	b.w	800ab3c <__retarget_lock_init_recursive>
 800a890:	bd10      	pop	{r4, pc}
 800a892:	bf00      	nop
 800a894:	0800a9c1 	.word	0x0800a9c1
 800a898:	0800a9e3 	.word	0x0800a9e3
 800a89c:	0800aa1b 	.word	0x0800aa1b
 800a8a0:	0800aa3f 	.word	0x0800aa3f
 800a8a4:	20013b98 	.word	0x20013b98

0800a8a8 <stdio_exit_handler>:
 800a8a8:	4a02      	ldr	r2, [pc, #8]	; (800a8b4 <stdio_exit_handler+0xc>)
 800a8aa:	4903      	ldr	r1, [pc, #12]	; (800a8b8 <stdio_exit_handler+0x10>)
 800a8ac:	4803      	ldr	r0, [pc, #12]	; (800a8bc <stdio_exit_handler+0x14>)
 800a8ae:	f000 b869 	b.w	800a984 <_fwalk_sglue>
 800a8b2:	bf00      	nop
 800a8b4:	20000014 	.word	0x20000014
 800a8b8:	0800c299 	.word	0x0800c299
 800a8bc:	2000018c 	.word	0x2000018c

0800a8c0 <cleanup_stdio>:
 800a8c0:	6841      	ldr	r1, [r0, #4]
 800a8c2:	4b0c      	ldr	r3, [pc, #48]	; (800a8f4 <cleanup_stdio+0x34>)
 800a8c4:	4299      	cmp	r1, r3
 800a8c6:	b510      	push	{r4, lr}
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	d001      	beq.n	800a8d0 <cleanup_stdio+0x10>
 800a8cc:	f001 fce4 	bl	800c298 <_fflush_r>
 800a8d0:	68a1      	ldr	r1, [r4, #8]
 800a8d2:	4b09      	ldr	r3, [pc, #36]	; (800a8f8 <cleanup_stdio+0x38>)
 800a8d4:	4299      	cmp	r1, r3
 800a8d6:	d002      	beq.n	800a8de <cleanup_stdio+0x1e>
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f001 fcdd 	bl	800c298 <_fflush_r>
 800a8de:	68e1      	ldr	r1, [r4, #12]
 800a8e0:	4b06      	ldr	r3, [pc, #24]	; (800a8fc <cleanup_stdio+0x3c>)
 800a8e2:	4299      	cmp	r1, r3
 800a8e4:	d004      	beq.n	800a8f0 <cleanup_stdio+0x30>
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8ec:	f001 bcd4 	b.w	800c298 <_fflush_r>
 800a8f0:	bd10      	pop	{r4, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20013b98 	.word	0x20013b98
 800a8f8:	20013c00 	.word	0x20013c00
 800a8fc:	20013c68 	.word	0x20013c68

0800a900 <global_stdio_init.part.0>:
 800a900:	b510      	push	{r4, lr}
 800a902:	4b0b      	ldr	r3, [pc, #44]	; (800a930 <global_stdio_init.part.0+0x30>)
 800a904:	4c0b      	ldr	r4, [pc, #44]	; (800a934 <global_stdio_init.part.0+0x34>)
 800a906:	4a0c      	ldr	r2, [pc, #48]	; (800a938 <global_stdio_init.part.0+0x38>)
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	4620      	mov	r0, r4
 800a90c:	2200      	movs	r2, #0
 800a90e:	2104      	movs	r1, #4
 800a910:	f7ff ff94 	bl	800a83c <std>
 800a914:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a918:	2201      	movs	r2, #1
 800a91a:	2109      	movs	r1, #9
 800a91c:	f7ff ff8e 	bl	800a83c <std>
 800a920:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a924:	2202      	movs	r2, #2
 800a926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a92a:	2112      	movs	r1, #18
 800a92c:	f7ff bf86 	b.w	800a83c <std>
 800a930:	20013cd0 	.word	0x20013cd0
 800a934:	20013b98 	.word	0x20013b98
 800a938:	0800a8a9 	.word	0x0800a8a9

0800a93c <__sfp_lock_acquire>:
 800a93c:	4801      	ldr	r0, [pc, #4]	; (800a944 <__sfp_lock_acquire+0x8>)
 800a93e:	f000 b8fe 	b.w	800ab3e <__retarget_lock_acquire_recursive>
 800a942:	bf00      	nop
 800a944:	20013cd9 	.word	0x20013cd9

0800a948 <__sfp_lock_release>:
 800a948:	4801      	ldr	r0, [pc, #4]	; (800a950 <__sfp_lock_release+0x8>)
 800a94a:	f000 b8f9 	b.w	800ab40 <__retarget_lock_release_recursive>
 800a94e:	bf00      	nop
 800a950:	20013cd9 	.word	0x20013cd9

0800a954 <__sinit>:
 800a954:	b510      	push	{r4, lr}
 800a956:	4604      	mov	r4, r0
 800a958:	f7ff fff0 	bl	800a93c <__sfp_lock_acquire>
 800a95c:	6a23      	ldr	r3, [r4, #32]
 800a95e:	b11b      	cbz	r3, 800a968 <__sinit+0x14>
 800a960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a964:	f7ff bff0 	b.w	800a948 <__sfp_lock_release>
 800a968:	4b04      	ldr	r3, [pc, #16]	; (800a97c <__sinit+0x28>)
 800a96a:	6223      	str	r3, [r4, #32]
 800a96c:	4b04      	ldr	r3, [pc, #16]	; (800a980 <__sinit+0x2c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1f5      	bne.n	800a960 <__sinit+0xc>
 800a974:	f7ff ffc4 	bl	800a900 <global_stdio_init.part.0>
 800a978:	e7f2      	b.n	800a960 <__sinit+0xc>
 800a97a:	bf00      	nop
 800a97c:	0800a8c1 	.word	0x0800a8c1
 800a980:	20013cd0 	.word	0x20013cd0

0800a984 <_fwalk_sglue>:
 800a984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a988:	4607      	mov	r7, r0
 800a98a:	4688      	mov	r8, r1
 800a98c:	4614      	mov	r4, r2
 800a98e:	2600      	movs	r6, #0
 800a990:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a994:	f1b9 0901 	subs.w	r9, r9, #1
 800a998:	d505      	bpl.n	800a9a6 <_fwalk_sglue+0x22>
 800a99a:	6824      	ldr	r4, [r4, #0]
 800a99c:	2c00      	cmp	r4, #0
 800a99e:	d1f7      	bne.n	800a990 <_fwalk_sglue+0xc>
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9a6:	89ab      	ldrh	r3, [r5, #12]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d907      	bls.n	800a9bc <_fwalk_sglue+0x38>
 800a9ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	d003      	beq.n	800a9bc <_fwalk_sglue+0x38>
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	47c0      	blx	r8
 800a9ba:	4306      	orrs	r6, r0
 800a9bc:	3568      	adds	r5, #104	; 0x68
 800a9be:	e7e9      	b.n	800a994 <_fwalk_sglue+0x10>

0800a9c0 <__sread>:
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c8:	f000 f87c 	bl	800aac4 <_read_r>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	bfab      	itete	ge
 800a9d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a9d4:	181b      	addge	r3, r3, r0
 800a9d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9da:	bfac      	ite	ge
 800a9dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9de:	81a3      	strhlt	r3, [r4, #12]
 800a9e0:	bd10      	pop	{r4, pc}

0800a9e2 <__swrite>:
 800a9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e6:	461f      	mov	r7, r3
 800a9e8:	898b      	ldrh	r3, [r1, #12]
 800a9ea:	05db      	lsls	r3, r3, #23
 800a9ec:	4605      	mov	r5, r0
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	4616      	mov	r6, r2
 800a9f2:	d505      	bpl.n	800aa00 <__swrite+0x1e>
 800a9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f000 f850 	bl	800aaa0 <_lseek_r>
 800aa00:	89a3      	ldrh	r3, [r4, #12]
 800aa02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa0a:	81a3      	strh	r3, [r4, #12]
 800aa0c:	4632      	mov	r2, r6
 800aa0e:	463b      	mov	r3, r7
 800aa10:	4628      	mov	r0, r5
 800aa12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa16:	f7ff ba99 	b.w	8009f4c <_write_r>

0800aa1a <__sseek>:
 800aa1a:	b510      	push	{r4, lr}
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa22:	f000 f83d 	bl	800aaa0 <_lseek_r>
 800aa26:	1c43      	adds	r3, r0, #1
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	bf15      	itete	ne
 800aa2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa36:	81a3      	strheq	r3, [r4, #12]
 800aa38:	bf18      	it	ne
 800aa3a:	81a3      	strhne	r3, [r4, #12]
 800aa3c:	bd10      	pop	{r4, pc}

0800aa3e <__sclose>:
 800aa3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa42:	f000 b81d 	b.w	800aa80 <_close_r>

0800aa46 <memcmp>:
 800aa46:	b510      	push	{r4, lr}
 800aa48:	3901      	subs	r1, #1
 800aa4a:	4402      	add	r2, r0
 800aa4c:	4290      	cmp	r0, r2
 800aa4e:	d101      	bne.n	800aa54 <memcmp+0xe>
 800aa50:	2000      	movs	r0, #0
 800aa52:	e005      	b.n	800aa60 <memcmp+0x1a>
 800aa54:	7803      	ldrb	r3, [r0, #0]
 800aa56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aa5a:	42a3      	cmp	r3, r4
 800aa5c:	d001      	beq.n	800aa62 <memcmp+0x1c>
 800aa5e:	1b18      	subs	r0, r3, r4
 800aa60:	bd10      	pop	{r4, pc}
 800aa62:	3001      	adds	r0, #1
 800aa64:	e7f2      	b.n	800aa4c <memcmp+0x6>

0800aa66 <memset>:
 800aa66:	4402      	add	r2, r0
 800aa68:	4603      	mov	r3, r0
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d100      	bne.n	800aa70 <memset+0xa>
 800aa6e:	4770      	bx	lr
 800aa70:	f803 1b01 	strb.w	r1, [r3], #1
 800aa74:	e7f9      	b.n	800aa6a <memset+0x4>
	...

0800aa78 <_localeconv_r>:
 800aa78:	4800      	ldr	r0, [pc, #0]	; (800aa7c <_localeconv_r+0x4>)
 800aa7a:	4770      	bx	lr
 800aa7c:	20000110 	.word	0x20000110

0800aa80 <_close_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	4d06      	ldr	r5, [pc, #24]	; (800aa9c <_close_r+0x1c>)
 800aa84:	2300      	movs	r3, #0
 800aa86:	4604      	mov	r4, r0
 800aa88:	4608      	mov	r0, r1
 800aa8a:	602b      	str	r3, [r5, #0]
 800aa8c:	f7f7 fe35 	bl	80026fa <_close>
 800aa90:	1c43      	adds	r3, r0, #1
 800aa92:	d102      	bne.n	800aa9a <_close_r+0x1a>
 800aa94:	682b      	ldr	r3, [r5, #0]
 800aa96:	b103      	cbz	r3, 800aa9a <_close_r+0x1a>
 800aa98:	6023      	str	r3, [r4, #0]
 800aa9a:	bd38      	pop	{r3, r4, r5, pc}
 800aa9c:	20013cd4 	.word	0x20013cd4

0800aaa0 <_lseek_r>:
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	4d07      	ldr	r5, [pc, #28]	; (800aac0 <_lseek_r+0x20>)
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	4608      	mov	r0, r1
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	2200      	movs	r2, #0
 800aaac:	602a      	str	r2, [r5, #0]
 800aaae:	461a      	mov	r2, r3
 800aab0:	f7f7 fe4a 	bl	8002748 <_lseek>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	d102      	bne.n	800aabe <_lseek_r+0x1e>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	b103      	cbz	r3, 800aabe <_lseek_r+0x1e>
 800aabc:	6023      	str	r3, [r4, #0]
 800aabe:	bd38      	pop	{r3, r4, r5, pc}
 800aac0:	20013cd4 	.word	0x20013cd4

0800aac4 <_read_r>:
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	4d07      	ldr	r5, [pc, #28]	; (800aae4 <_read_r+0x20>)
 800aac8:	4604      	mov	r4, r0
 800aaca:	4608      	mov	r0, r1
 800aacc:	4611      	mov	r1, r2
 800aace:	2200      	movs	r2, #0
 800aad0:	602a      	str	r2, [r5, #0]
 800aad2:	461a      	mov	r2, r3
 800aad4:	f7f7 fdf4 	bl	80026c0 <_read>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d102      	bne.n	800aae2 <_read_r+0x1e>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b103      	cbz	r3, 800aae2 <_read_r+0x1e>
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	20013cd4 	.word	0x20013cd4

0800aae8 <__errno>:
 800aae8:	4b01      	ldr	r3, [pc, #4]	; (800aaf0 <__errno+0x8>)
 800aaea:	6818      	ldr	r0, [r3, #0]
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	200001d8 	.word	0x200001d8

0800aaf4 <__libc_init_array>:
 800aaf4:	b570      	push	{r4, r5, r6, lr}
 800aaf6:	4d0d      	ldr	r5, [pc, #52]	; (800ab2c <__libc_init_array+0x38>)
 800aaf8:	4c0d      	ldr	r4, [pc, #52]	; (800ab30 <__libc_init_array+0x3c>)
 800aafa:	1b64      	subs	r4, r4, r5
 800aafc:	10a4      	asrs	r4, r4, #2
 800aafe:	2600      	movs	r6, #0
 800ab00:	42a6      	cmp	r6, r4
 800ab02:	d109      	bne.n	800ab18 <__libc_init_array+0x24>
 800ab04:	4d0b      	ldr	r5, [pc, #44]	; (800ab34 <__libc_init_array+0x40>)
 800ab06:	4c0c      	ldr	r4, [pc, #48]	; (800ab38 <__libc_init_array+0x44>)
 800ab08:	f001 ff42 	bl	800c990 <_init>
 800ab0c:	1b64      	subs	r4, r4, r5
 800ab0e:	10a4      	asrs	r4, r4, #2
 800ab10:	2600      	movs	r6, #0
 800ab12:	42a6      	cmp	r6, r4
 800ab14:	d105      	bne.n	800ab22 <__libc_init_array+0x2e>
 800ab16:	bd70      	pop	{r4, r5, r6, pc}
 800ab18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab1c:	4798      	blx	r3
 800ab1e:	3601      	adds	r6, #1
 800ab20:	e7ee      	b.n	800ab00 <__libc_init_array+0xc>
 800ab22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab26:	4798      	blx	r3
 800ab28:	3601      	adds	r6, #1
 800ab2a:	e7f2      	b.n	800ab12 <__libc_init_array+0x1e>
 800ab2c:	0800ce5c 	.word	0x0800ce5c
 800ab30:	0800ce5c 	.word	0x0800ce5c
 800ab34:	0800ce5c 	.word	0x0800ce5c
 800ab38:	0800ce60 	.word	0x0800ce60

0800ab3c <__retarget_lock_init_recursive>:
 800ab3c:	4770      	bx	lr

0800ab3e <__retarget_lock_acquire_recursive>:
 800ab3e:	4770      	bx	lr

0800ab40 <__retarget_lock_release_recursive>:
 800ab40:	4770      	bx	lr

0800ab42 <memcpy>:
 800ab42:	440a      	add	r2, r1
 800ab44:	4291      	cmp	r1, r2
 800ab46:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab4a:	d100      	bne.n	800ab4e <memcpy+0xc>
 800ab4c:	4770      	bx	lr
 800ab4e:	b510      	push	{r4, lr}
 800ab50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab58:	4291      	cmp	r1, r2
 800ab5a:	d1f9      	bne.n	800ab50 <memcpy+0xe>
 800ab5c:	bd10      	pop	{r4, pc}

0800ab5e <quorem>:
 800ab5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab62:	6903      	ldr	r3, [r0, #16]
 800ab64:	690c      	ldr	r4, [r1, #16]
 800ab66:	42a3      	cmp	r3, r4
 800ab68:	4607      	mov	r7, r0
 800ab6a:	db7e      	blt.n	800ac6a <quorem+0x10c>
 800ab6c:	3c01      	subs	r4, #1
 800ab6e:	f101 0814 	add.w	r8, r1, #20
 800ab72:	f100 0514 	add.w	r5, r0, #20
 800ab76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab84:	3301      	adds	r3, #1
 800ab86:	429a      	cmp	r2, r3
 800ab88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab90:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab94:	d331      	bcc.n	800abfa <quorem+0x9c>
 800ab96:	f04f 0e00 	mov.w	lr, #0
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	46ac      	mov	ip, r5
 800ab9e:	46f2      	mov	sl, lr
 800aba0:	f850 2b04 	ldr.w	r2, [r0], #4
 800aba4:	b293      	uxth	r3, r2
 800aba6:	fb06 e303 	mla	r3, r6, r3, lr
 800abaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abae:	0c1a      	lsrs	r2, r3, #16
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	ebaa 0303 	sub.w	r3, sl, r3
 800abb6:	f8dc a000 	ldr.w	sl, [ip]
 800abba:	fa13 f38a 	uxtah	r3, r3, sl
 800abbe:	fb06 220e 	mla	r2, r6, lr, r2
 800abc2:	9300      	str	r3, [sp, #0]
 800abc4:	9b00      	ldr	r3, [sp, #0]
 800abc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abca:	b292      	uxth	r2, r2
 800abcc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800abd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abd4:	f8bd 3000 	ldrh.w	r3, [sp]
 800abd8:	4581      	cmp	r9, r0
 800abda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abde:	f84c 3b04 	str.w	r3, [ip], #4
 800abe2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800abe6:	d2db      	bcs.n	800aba0 <quorem+0x42>
 800abe8:	f855 300b 	ldr.w	r3, [r5, fp]
 800abec:	b92b      	cbnz	r3, 800abfa <quorem+0x9c>
 800abee:	9b01      	ldr	r3, [sp, #4]
 800abf0:	3b04      	subs	r3, #4
 800abf2:	429d      	cmp	r5, r3
 800abf4:	461a      	mov	r2, r3
 800abf6:	d32c      	bcc.n	800ac52 <quorem+0xf4>
 800abf8:	613c      	str	r4, [r7, #16]
 800abfa:	4638      	mov	r0, r7
 800abfc:	f001 f9b8 	bl	800bf70 <__mcmp>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	db22      	blt.n	800ac4a <quorem+0xec>
 800ac04:	3601      	adds	r6, #1
 800ac06:	4629      	mov	r1, r5
 800ac08:	2000      	movs	r0, #0
 800ac0a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac0e:	f8d1 c000 	ldr.w	ip, [r1]
 800ac12:	b293      	uxth	r3, r2
 800ac14:	1ac3      	subs	r3, r0, r3
 800ac16:	0c12      	lsrs	r2, r2, #16
 800ac18:	fa13 f38c 	uxtah	r3, r3, ip
 800ac1c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ac20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac2a:	45c1      	cmp	r9, r8
 800ac2c:	f841 3b04 	str.w	r3, [r1], #4
 800ac30:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac34:	d2e9      	bcs.n	800ac0a <quorem+0xac>
 800ac36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac3e:	b922      	cbnz	r2, 800ac4a <quorem+0xec>
 800ac40:	3b04      	subs	r3, #4
 800ac42:	429d      	cmp	r5, r3
 800ac44:	461a      	mov	r2, r3
 800ac46:	d30a      	bcc.n	800ac5e <quorem+0x100>
 800ac48:	613c      	str	r4, [r7, #16]
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	b003      	add	sp, #12
 800ac4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac52:	6812      	ldr	r2, [r2, #0]
 800ac54:	3b04      	subs	r3, #4
 800ac56:	2a00      	cmp	r2, #0
 800ac58:	d1ce      	bne.n	800abf8 <quorem+0x9a>
 800ac5a:	3c01      	subs	r4, #1
 800ac5c:	e7c9      	b.n	800abf2 <quorem+0x94>
 800ac5e:	6812      	ldr	r2, [r2, #0]
 800ac60:	3b04      	subs	r3, #4
 800ac62:	2a00      	cmp	r2, #0
 800ac64:	d1f0      	bne.n	800ac48 <quorem+0xea>
 800ac66:	3c01      	subs	r4, #1
 800ac68:	e7eb      	b.n	800ac42 <quorem+0xe4>
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	e7ee      	b.n	800ac4c <quorem+0xee>
	...

0800ac70 <_dtoa_r>:
 800ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	ed2d 8b04 	vpush	{d8-d9}
 800ac78:	69c5      	ldr	r5, [r0, #28]
 800ac7a:	b093      	sub	sp, #76	; 0x4c
 800ac7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ac80:	ec57 6b10 	vmov	r6, r7, d0
 800ac84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ac88:	9107      	str	r1, [sp, #28]
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	920a      	str	r2, [sp, #40]	; 0x28
 800ac8e:	930d      	str	r3, [sp, #52]	; 0x34
 800ac90:	b975      	cbnz	r5, 800acb0 <_dtoa_r+0x40>
 800ac92:	2010      	movs	r0, #16
 800ac94:	f000 fe2a 	bl	800b8ec <malloc>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	61e0      	str	r0, [r4, #28]
 800ac9c:	b920      	cbnz	r0, 800aca8 <_dtoa_r+0x38>
 800ac9e:	4bae      	ldr	r3, [pc, #696]	; (800af58 <_dtoa_r+0x2e8>)
 800aca0:	21ef      	movs	r1, #239	; 0xef
 800aca2:	48ae      	ldr	r0, [pc, #696]	; (800af5c <_dtoa_r+0x2ec>)
 800aca4:	f001 fb30 	bl	800c308 <__assert_func>
 800aca8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800acac:	6005      	str	r5, [r0, #0]
 800acae:	60c5      	str	r5, [r0, #12]
 800acb0:	69e3      	ldr	r3, [r4, #28]
 800acb2:	6819      	ldr	r1, [r3, #0]
 800acb4:	b151      	cbz	r1, 800accc <_dtoa_r+0x5c>
 800acb6:	685a      	ldr	r2, [r3, #4]
 800acb8:	604a      	str	r2, [r1, #4]
 800acba:	2301      	movs	r3, #1
 800acbc:	4093      	lsls	r3, r2
 800acbe:	608b      	str	r3, [r1, #8]
 800acc0:	4620      	mov	r0, r4
 800acc2:	f000 ff19 	bl	800baf8 <_Bfree>
 800acc6:	69e3      	ldr	r3, [r4, #28]
 800acc8:	2200      	movs	r2, #0
 800acca:	601a      	str	r2, [r3, #0]
 800accc:	1e3b      	subs	r3, r7, #0
 800acce:	bfbb      	ittet	lt
 800acd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800acd4:	9303      	strlt	r3, [sp, #12]
 800acd6:	2300      	movge	r3, #0
 800acd8:	2201      	movlt	r2, #1
 800acda:	bfac      	ite	ge
 800acdc:	f8c8 3000 	strge.w	r3, [r8]
 800ace0:	f8c8 2000 	strlt.w	r2, [r8]
 800ace4:	4b9e      	ldr	r3, [pc, #632]	; (800af60 <_dtoa_r+0x2f0>)
 800ace6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800acea:	ea33 0308 	bics.w	r3, r3, r8
 800acee:	d11b      	bne.n	800ad28 <_dtoa_r+0xb8>
 800acf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acf2:	f242 730f 	movw	r3, #9999	; 0x270f
 800acf6:	6013      	str	r3, [r2, #0]
 800acf8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800acfc:	4333      	orrs	r3, r6
 800acfe:	f000 8593 	beq.w	800b828 <_dtoa_r+0xbb8>
 800ad02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad04:	b963      	cbnz	r3, 800ad20 <_dtoa_r+0xb0>
 800ad06:	4b97      	ldr	r3, [pc, #604]	; (800af64 <_dtoa_r+0x2f4>)
 800ad08:	e027      	b.n	800ad5a <_dtoa_r+0xea>
 800ad0a:	4b97      	ldr	r3, [pc, #604]	; (800af68 <_dtoa_r+0x2f8>)
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	3308      	adds	r3, #8
 800ad10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad12:	6013      	str	r3, [r2, #0]
 800ad14:	9800      	ldr	r0, [sp, #0]
 800ad16:	b013      	add	sp, #76	; 0x4c
 800ad18:	ecbd 8b04 	vpop	{d8-d9}
 800ad1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad20:	4b90      	ldr	r3, [pc, #576]	; (800af64 <_dtoa_r+0x2f4>)
 800ad22:	9300      	str	r3, [sp, #0]
 800ad24:	3303      	adds	r3, #3
 800ad26:	e7f3      	b.n	800ad10 <_dtoa_r+0xa0>
 800ad28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	ec51 0b17 	vmov	r0, r1, d7
 800ad32:	eeb0 8a47 	vmov.f32	s16, s14
 800ad36:	eef0 8a67 	vmov.f32	s17, s15
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f7f5 ff34 	bl	8000ba8 <__aeabi_dcmpeq>
 800ad40:	4681      	mov	r9, r0
 800ad42:	b160      	cbz	r0, 800ad5e <_dtoa_r+0xee>
 800ad44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad46:	2301      	movs	r3, #1
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 8568 	beq.w	800b822 <_dtoa_r+0xbb2>
 800ad52:	4b86      	ldr	r3, [pc, #536]	; (800af6c <_dtoa_r+0x2fc>)
 800ad54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad56:	6013      	str	r3, [r2, #0]
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	e7da      	b.n	800ad14 <_dtoa_r+0xa4>
 800ad5e:	aa10      	add	r2, sp, #64	; 0x40
 800ad60:	a911      	add	r1, sp, #68	; 0x44
 800ad62:	4620      	mov	r0, r4
 800ad64:	eeb0 0a48 	vmov.f32	s0, s16
 800ad68:	eef0 0a68 	vmov.f32	s1, s17
 800ad6c:	f001 f9a6 	bl	800c0bc <__d2b>
 800ad70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ad74:	4682      	mov	sl, r0
 800ad76:	2d00      	cmp	r5, #0
 800ad78:	d07f      	beq.n	800ae7a <_dtoa_r+0x20a>
 800ad7a:	ee18 3a90 	vmov	r3, s17
 800ad7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ad86:	ec51 0b18 	vmov	r0, r1, d8
 800ad8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ad8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ad96:	4619      	mov	r1, r3
 800ad98:	2200      	movs	r2, #0
 800ad9a:	4b75      	ldr	r3, [pc, #468]	; (800af70 <_dtoa_r+0x300>)
 800ad9c:	f7f5 fae4 	bl	8000368 <__aeabi_dsub>
 800ada0:	a367      	add	r3, pc, #412	; (adr r3, 800af40 <_dtoa_r+0x2d0>)
 800ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada6:	f7f5 fc97 	bl	80006d8 <__aeabi_dmul>
 800adaa:	a367      	add	r3, pc, #412	; (adr r3, 800af48 <_dtoa_r+0x2d8>)
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	f7f5 fadc 	bl	800036c <__adddf3>
 800adb4:	4606      	mov	r6, r0
 800adb6:	4628      	mov	r0, r5
 800adb8:	460f      	mov	r7, r1
 800adba:	f7f5 fc23 	bl	8000604 <__aeabi_i2d>
 800adbe:	a364      	add	r3, pc, #400	; (adr r3, 800af50 <_dtoa_r+0x2e0>)
 800adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc4:	f7f5 fc88 	bl	80006d8 <__aeabi_dmul>
 800adc8:	4602      	mov	r2, r0
 800adca:	460b      	mov	r3, r1
 800adcc:	4630      	mov	r0, r6
 800adce:	4639      	mov	r1, r7
 800add0:	f7f5 facc 	bl	800036c <__adddf3>
 800add4:	4606      	mov	r6, r0
 800add6:	460f      	mov	r7, r1
 800add8:	f7f5 ff2e 	bl	8000c38 <__aeabi_d2iz>
 800addc:	2200      	movs	r2, #0
 800adde:	4683      	mov	fp, r0
 800ade0:	2300      	movs	r3, #0
 800ade2:	4630      	mov	r0, r6
 800ade4:	4639      	mov	r1, r7
 800ade6:	f7f5 fee9 	bl	8000bbc <__aeabi_dcmplt>
 800adea:	b148      	cbz	r0, 800ae00 <_dtoa_r+0x190>
 800adec:	4658      	mov	r0, fp
 800adee:	f7f5 fc09 	bl	8000604 <__aeabi_i2d>
 800adf2:	4632      	mov	r2, r6
 800adf4:	463b      	mov	r3, r7
 800adf6:	f7f5 fed7 	bl	8000ba8 <__aeabi_dcmpeq>
 800adfa:	b908      	cbnz	r0, 800ae00 <_dtoa_r+0x190>
 800adfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae00:	f1bb 0f16 	cmp.w	fp, #22
 800ae04:	d857      	bhi.n	800aeb6 <_dtoa_r+0x246>
 800ae06:	4b5b      	ldr	r3, [pc, #364]	; (800af74 <_dtoa_r+0x304>)
 800ae08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	ec51 0b18 	vmov	r0, r1, d8
 800ae14:	f7f5 fed2 	bl	8000bbc <__aeabi_dcmplt>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d04e      	beq.n	800aeba <_dtoa_r+0x24a>
 800ae1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae20:	2300      	movs	r3, #0
 800ae22:	930c      	str	r3, [sp, #48]	; 0x30
 800ae24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae26:	1b5b      	subs	r3, r3, r5
 800ae28:	1e5a      	subs	r2, r3, #1
 800ae2a:	bf45      	ittet	mi
 800ae2c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ae30:	9305      	strmi	r3, [sp, #20]
 800ae32:	2300      	movpl	r3, #0
 800ae34:	2300      	movmi	r3, #0
 800ae36:	9206      	str	r2, [sp, #24]
 800ae38:	bf54      	ite	pl
 800ae3a:	9305      	strpl	r3, [sp, #20]
 800ae3c:	9306      	strmi	r3, [sp, #24]
 800ae3e:	f1bb 0f00 	cmp.w	fp, #0
 800ae42:	db3c      	blt.n	800aebe <_dtoa_r+0x24e>
 800ae44:	9b06      	ldr	r3, [sp, #24]
 800ae46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ae4a:	445b      	add	r3, fp
 800ae4c:	9306      	str	r3, [sp, #24]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	9308      	str	r3, [sp, #32]
 800ae52:	9b07      	ldr	r3, [sp, #28]
 800ae54:	2b09      	cmp	r3, #9
 800ae56:	d868      	bhi.n	800af2a <_dtoa_r+0x2ba>
 800ae58:	2b05      	cmp	r3, #5
 800ae5a:	bfc4      	itt	gt
 800ae5c:	3b04      	subgt	r3, #4
 800ae5e:	9307      	strgt	r3, [sp, #28]
 800ae60:	9b07      	ldr	r3, [sp, #28]
 800ae62:	f1a3 0302 	sub.w	r3, r3, #2
 800ae66:	bfcc      	ite	gt
 800ae68:	2500      	movgt	r5, #0
 800ae6a:	2501      	movle	r5, #1
 800ae6c:	2b03      	cmp	r3, #3
 800ae6e:	f200 8085 	bhi.w	800af7c <_dtoa_r+0x30c>
 800ae72:	e8df f003 	tbb	[pc, r3]
 800ae76:	3b2e      	.short	0x3b2e
 800ae78:	5839      	.short	0x5839
 800ae7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ae7e:	441d      	add	r5, r3
 800ae80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ae84:	2b20      	cmp	r3, #32
 800ae86:	bfc1      	itttt	gt
 800ae88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae8c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ae90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ae94:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ae98:	bfd6      	itet	le
 800ae9a:	f1c3 0320 	rsble	r3, r3, #32
 800ae9e:	ea48 0003 	orrgt.w	r0, r8, r3
 800aea2:	fa06 f003 	lslle.w	r0, r6, r3
 800aea6:	f7f5 fb9d 	bl	80005e4 <__aeabi_ui2d>
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aeb0:	3d01      	subs	r5, #1
 800aeb2:	920e      	str	r2, [sp, #56]	; 0x38
 800aeb4:	e76f      	b.n	800ad96 <_dtoa_r+0x126>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e7b3      	b.n	800ae22 <_dtoa_r+0x1b2>
 800aeba:	900c      	str	r0, [sp, #48]	; 0x30
 800aebc:	e7b2      	b.n	800ae24 <_dtoa_r+0x1b4>
 800aebe:	9b05      	ldr	r3, [sp, #20]
 800aec0:	eba3 030b 	sub.w	r3, r3, fp
 800aec4:	9305      	str	r3, [sp, #20]
 800aec6:	f1cb 0300 	rsb	r3, fp, #0
 800aeca:	9308      	str	r3, [sp, #32]
 800aecc:	2300      	movs	r3, #0
 800aece:	930b      	str	r3, [sp, #44]	; 0x2c
 800aed0:	e7bf      	b.n	800ae52 <_dtoa_r+0x1e2>
 800aed2:	2300      	movs	r3, #0
 800aed4:	9309      	str	r3, [sp, #36]	; 0x24
 800aed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	dc52      	bgt.n	800af82 <_dtoa_r+0x312>
 800aedc:	2301      	movs	r3, #1
 800aede:	9301      	str	r3, [sp, #4]
 800aee0:	9304      	str	r3, [sp, #16]
 800aee2:	461a      	mov	r2, r3
 800aee4:	920a      	str	r2, [sp, #40]	; 0x28
 800aee6:	e00b      	b.n	800af00 <_dtoa_r+0x290>
 800aee8:	2301      	movs	r3, #1
 800aeea:	e7f3      	b.n	800aed4 <_dtoa_r+0x264>
 800aeec:	2300      	movs	r3, #0
 800aeee:	9309      	str	r3, [sp, #36]	; 0x24
 800aef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef2:	445b      	add	r3, fp
 800aef4:	9301      	str	r3, [sp, #4]
 800aef6:	3301      	adds	r3, #1
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	9304      	str	r3, [sp, #16]
 800aefc:	bfb8      	it	lt
 800aefe:	2301      	movlt	r3, #1
 800af00:	69e0      	ldr	r0, [r4, #28]
 800af02:	2100      	movs	r1, #0
 800af04:	2204      	movs	r2, #4
 800af06:	f102 0614 	add.w	r6, r2, #20
 800af0a:	429e      	cmp	r6, r3
 800af0c:	d93d      	bls.n	800af8a <_dtoa_r+0x31a>
 800af0e:	6041      	str	r1, [r0, #4]
 800af10:	4620      	mov	r0, r4
 800af12:	f000 fdb1 	bl	800ba78 <_Balloc>
 800af16:	9000      	str	r0, [sp, #0]
 800af18:	2800      	cmp	r0, #0
 800af1a:	d139      	bne.n	800af90 <_dtoa_r+0x320>
 800af1c:	4b16      	ldr	r3, [pc, #88]	; (800af78 <_dtoa_r+0x308>)
 800af1e:	4602      	mov	r2, r0
 800af20:	f240 11af 	movw	r1, #431	; 0x1af
 800af24:	e6bd      	b.n	800aca2 <_dtoa_r+0x32>
 800af26:	2301      	movs	r3, #1
 800af28:	e7e1      	b.n	800aeee <_dtoa_r+0x27e>
 800af2a:	2501      	movs	r5, #1
 800af2c:	2300      	movs	r3, #0
 800af2e:	9307      	str	r3, [sp, #28]
 800af30:	9509      	str	r5, [sp, #36]	; 0x24
 800af32:	f04f 33ff 	mov.w	r3, #4294967295
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	9304      	str	r3, [sp, #16]
 800af3a:	2200      	movs	r2, #0
 800af3c:	2312      	movs	r3, #18
 800af3e:	e7d1      	b.n	800aee4 <_dtoa_r+0x274>
 800af40:	636f4361 	.word	0x636f4361
 800af44:	3fd287a7 	.word	0x3fd287a7
 800af48:	8b60c8b3 	.word	0x8b60c8b3
 800af4c:	3fc68a28 	.word	0x3fc68a28
 800af50:	509f79fb 	.word	0x509f79fb
 800af54:	3fd34413 	.word	0x3fd34413
 800af58:	0800cc2e 	.word	0x0800cc2e
 800af5c:	0800cc45 	.word	0x0800cc45
 800af60:	7ff00000 	.word	0x7ff00000
 800af64:	0800cc2a 	.word	0x0800cc2a
 800af68:	0800cc21 	.word	0x0800cc21
 800af6c:	0800cbf4 	.word	0x0800cbf4
 800af70:	3ff80000 	.word	0x3ff80000
 800af74:	0800cd30 	.word	0x0800cd30
 800af78:	0800cc9d 	.word	0x0800cc9d
 800af7c:	2301      	movs	r3, #1
 800af7e:	9309      	str	r3, [sp, #36]	; 0x24
 800af80:	e7d7      	b.n	800af32 <_dtoa_r+0x2c2>
 800af82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	9304      	str	r3, [sp, #16]
 800af88:	e7ba      	b.n	800af00 <_dtoa_r+0x290>
 800af8a:	3101      	adds	r1, #1
 800af8c:	0052      	lsls	r2, r2, #1
 800af8e:	e7ba      	b.n	800af06 <_dtoa_r+0x296>
 800af90:	69e3      	ldr	r3, [r4, #28]
 800af92:	9a00      	ldr	r2, [sp, #0]
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	9b04      	ldr	r3, [sp, #16]
 800af98:	2b0e      	cmp	r3, #14
 800af9a:	f200 80a8 	bhi.w	800b0ee <_dtoa_r+0x47e>
 800af9e:	2d00      	cmp	r5, #0
 800afa0:	f000 80a5 	beq.w	800b0ee <_dtoa_r+0x47e>
 800afa4:	f1bb 0f00 	cmp.w	fp, #0
 800afa8:	dd38      	ble.n	800b01c <_dtoa_r+0x3ac>
 800afaa:	4bc0      	ldr	r3, [pc, #768]	; (800b2ac <_dtoa_r+0x63c>)
 800afac:	f00b 020f 	and.w	r2, fp, #15
 800afb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800afb8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800afbc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800afc0:	d019      	beq.n	800aff6 <_dtoa_r+0x386>
 800afc2:	4bbb      	ldr	r3, [pc, #748]	; (800b2b0 <_dtoa_r+0x640>)
 800afc4:	ec51 0b18 	vmov	r0, r1, d8
 800afc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afcc:	f7f5 fcae 	bl	800092c <__aeabi_ddiv>
 800afd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afd4:	f008 080f 	and.w	r8, r8, #15
 800afd8:	2503      	movs	r5, #3
 800afda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b2b0 <_dtoa_r+0x640>
 800afde:	f1b8 0f00 	cmp.w	r8, #0
 800afe2:	d10a      	bne.n	800affa <_dtoa_r+0x38a>
 800afe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afe8:	4632      	mov	r2, r6
 800afea:	463b      	mov	r3, r7
 800afec:	f7f5 fc9e 	bl	800092c <__aeabi_ddiv>
 800aff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aff4:	e02b      	b.n	800b04e <_dtoa_r+0x3de>
 800aff6:	2502      	movs	r5, #2
 800aff8:	e7ef      	b.n	800afda <_dtoa_r+0x36a>
 800affa:	f018 0f01 	tst.w	r8, #1
 800affe:	d008      	beq.n	800b012 <_dtoa_r+0x3a2>
 800b000:	4630      	mov	r0, r6
 800b002:	4639      	mov	r1, r7
 800b004:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b008:	f7f5 fb66 	bl	80006d8 <__aeabi_dmul>
 800b00c:	3501      	adds	r5, #1
 800b00e:	4606      	mov	r6, r0
 800b010:	460f      	mov	r7, r1
 800b012:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b016:	f109 0908 	add.w	r9, r9, #8
 800b01a:	e7e0      	b.n	800afde <_dtoa_r+0x36e>
 800b01c:	f000 809f 	beq.w	800b15e <_dtoa_r+0x4ee>
 800b020:	f1cb 0600 	rsb	r6, fp, #0
 800b024:	4ba1      	ldr	r3, [pc, #644]	; (800b2ac <_dtoa_r+0x63c>)
 800b026:	4fa2      	ldr	r7, [pc, #648]	; (800b2b0 <_dtoa_r+0x640>)
 800b028:	f006 020f 	and.w	r2, r6, #15
 800b02c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	ec51 0b18 	vmov	r0, r1, d8
 800b038:	f7f5 fb4e 	bl	80006d8 <__aeabi_dmul>
 800b03c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b040:	1136      	asrs	r6, r6, #4
 800b042:	2300      	movs	r3, #0
 800b044:	2502      	movs	r5, #2
 800b046:	2e00      	cmp	r6, #0
 800b048:	d17e      	bne.n	800b148 <_dtoa_r+0x4d8>
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1d0      	bne.n	800aff0 <_dtoa_r+0x380>
 800b04e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b050:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	f000 8084 	beq.w	800b162 <_dtoa_r+0x4f2>
 800b05a:	4b96      	ldr	r3, [pc, #600]	; (800b2b4 <_dtoa_r+0x644>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	4640      	mov	r0, r8
 800b060:	4649      	mov	r1, r9
 800b062:	f7f5 fdab 	bl	8000bbc <__aeabi_dcmplt>
 800b066:	2800      	cmp	r0, #0
 800b068:	d07b      	beq.n	800b162 <_dtoa_r+0x4f2>
 800b06a:	9b04      	ldr	r3, [sp, #16]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d078      	beq.n	800b162 <_dtoa_r+0x4f2>
 800b070:	9b01      	ldr	r3, [sp, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	dd39      	ble.n	800b0ea <_dtoa_r+0x47a>
 800b076:	4b90      	ldr	r3, [pc, #576]	; (800b2b8 <_dtoa_r+0x648>)
 800b078:	2200      	movs	r2, #0
 800b07a:	4640      	mov	r0, r8
 800b07c:	4649      	mov	r1, r9
 800b07e:	f7f5 fb2b 	bl	80006d8 <__aeabi_dmul>
 800b082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b086:	9e01      	ldr	r6, [sp, #4]
 800b088:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b08c:	3501      	adds	r5, #1
 800b08e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b092:	4628      	mov	r0, r5
 800b094:	f7f5 fab6 	bl	8000604 <__aeabi_i2d>
 800b098:	4642      	mov	r2, r8
 800b09a:	464b      	mov	r3, r9
 800b09c:	f7f5 fb1c 	bl	80006d8 <__aeabi_dmul>
 800b0a0:	4b86      	ldr	r3, [pc, #536]	; (800b2bc <_dtoa_r+0x64c>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f7f5 f962 	bl	800036c <__adddf3>
 800b0a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b0ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0b0:	9303      	str	r3, [sp, #12]
 800b0b2:	2e00      	cmp	r6, #0
 800b0b4:	d158      	bne.n	800b168 <_dtoa_r+0x4f8>
 800b0b6:	4b82      	ldr	r3, [pc, #520]	; (800b2c0 <_dtoa_r+0x650>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	4640      	mov	r0, r8
 800b0bc:	4649      	mov	r1, r9
 800b0be:	f7f5 f953 	bl	8000368 <__aeabi_dsub>
 800b0c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0c6:	4680      	mov	r8, r0
 800b0c8:	4689      	mov	r9, r1
 800b0ca:	f7f5 fd95 	bl	8000bf8 <__aeabi_dcmpgt>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f040 8296 	bne.w	800b600 <_dtoa_r+0x990>
 800b0d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b0d8:	4640      	mov	r0, r8
 800b0da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0de:	4649      	mov	r1, r9
 800b0e0:	f7f5 fd6c 	bl	8000bbc <__aeabi_dcmplt>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	f040 8289 	bne.w	800b5fc <_dtoa_r+0x98c>
 800b0ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b0ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f2c0 814e 	blt.w	800b392 <_dtoa_r+0x722>
 800b0f6:	f1bb 0f0e 	cmp.w	fp, #14
 800b0fa:	f300 814a 	bgt.w	800b392 <_dtoa_r+0x722>
 800b0fe:	4b6b      	ldr	r3, [pc, #428]	; (800b2ac <_dtoa_r+0x63c>)
 800b100:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b104:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	f280 80dc 	bge.w	800b2c8 <_dtoa_r+0x658>
 800b110:	9b04      	ldr	r3, [sp, #16]
 800b112:	2b00      	cmp	r3, #0
 800b114:	f300 80d8 	bgt.w	800b2c8 <_dtoa_r+0x658>
 800b118:	f040 826f 	bne.w	800b5fa <_dtoa_r+0x98a>
 800b11c:	4b68      	ldr	r3, [pc, #416]	; (800b2c0 <_dtoa_r+0x650>)
 800b11e:	2200      	movs	r2, #0
 800b120:	4640      	mov	r0, r8
 800b122:	4649      	mov	r1, r9
 800b124:	f7f5 fad8 	bl	80006d8 <__aeabi_dmul>
 800b128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b12c:	f7f5 fd5a 	bl	8000be4 <__aeabi_dcmpge>
 800b130:	9e04      	ldr	r6, [sp, #16]
 800b132:	4637      	mov	r7, r6
 800b134:	2800      	cmp	r0, #0
 800b136:	f040 8245 	bne.w	800b5c4 <_dtoa_r+0x954>
 800b13a:	9d00      	ldr	r5, [sp, #0]
 800b13c:	2331      	movs	r3, #49	; 0x31
 800b13e:	f805 3b01 	strb.w	r3, [r5], #1
 800b142:	f10b 0b01 	add.w	fp, fp, #1
 800b146:	e241      	b.n	800b5cc <_dtoa_r+0x95c>
 800b148:	07f2      	lsls	r2, r6, #31
 800b14a:	d505      	bpl.n	800b158 <_dtoa_r+0x4e8>
 800b14c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b150:	f7f5 fac2 	bl	80006d8 <__aeabi_dmul>
 800b154:	3501      	adds	r5, #1
 800b156:	2301      	movs	r3, #1
 800b158:	1076      	asrs	r6, r6, #1
 800b15a:	3708      	adds	r7, #8
 800b15c:	e773      	b.n	800b046 <_dtoa_r+0x3d6>
 800b15e:	2502      	movs	r5, #2
 800b160:	e775      	b.n	800b04e <_dtoa_r+0x3de>
 800b162:	9e04      	ldr	r6, [sp, #16]
 800b164:	465f      	mov	r7, fp
 800b166:	e792      	b.n	800b08e <_dtoa_r+0x41e>
 800b168:	9900      	ldr	r1, [sp, #0]
 800b16a:	4b50      	ldr	r3, [pc, #320]	; (800b2ac <_dtoa_r+0x63c>)
 800b16c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b170:	4431      	add	r1, r6
 800b172:	9102      	str	r1, [sp, #8]
 800b174:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b176:	eeb0 9a47 	vmov.f32	s18, s14
 800b17a:	eef0 9a67 	vmov.f32	s19, s15
 800b17e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b182:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b186:	2900      	cmp	r1, #0
 800b188:	d044      	beq.n	800b214 <_dtoa_r+0x5a4>
 800b18a:	494e      	ldr	r1, [pc, #312]	; (800b2c4 <_dtoa_r+0x654>)
 800b18c:	2000      	movs	r0, #0
 800b18e:	f7f5 fbcd 	bl	800092c <__aeabi_ddiv>
 800b192:	ec53 2b19 	vmov	r2, r3, d9
 800b196:	f7f5 f8e7 	bl	8000368 <__aeabi_dsub>
 800b19a:	9d00      	ldr	r5, [sp, #0]
 800b19c:	ec41 0b19 	vmov	d9, r0, r1
 800b1a0:	4649      	mov	r1, r9
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	f7f5 fd48 	bl	8000c38 <__aeabi_d2iz>
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	f7f5 fa2b 	bl	8000604 <__aeabi_i2d>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	4649      	mov	r1, r9
 800b1b6:	f7f5 f8d7 	bl	8000368 <__aeabi_dsub>
 800b1ba:	3630      	adds	r6, #48	; 0x30
 800b1bc:	f805 6b01 	strb.w	r6, [r5], #1
 800b1c0:	ec53 2b19 	vmov	r2, r3, d9
 800b1c4:	4680      	mov	r8, r0
 800b1c6:	4689      	mov	r9, r1
 800b1c8:	f7f5 fcf8 	bl	8000bbc <__aeabi_dcmplt>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d164      	bne.n	800b29a <_dtoa_r+0x62a>
 800b1d0:	4642      	mov	r2, r8
 800b1d2:	464b      	mov	r3, r9
 800b1d4:	4937      	ldr	r1, [pc, #220]	; (800b2b4 <_dtoa_r+0x644>)
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	f7f5 f8c6 	bl	8000368 <__aeabi_dsub>
 800b1dc:	ec53 2b19 	vmov	r2, r3, d9
 800b1e0:	f7f5 fcec 	bl	8000bbc <__aeabi_dcmplt>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	f040 80b6 	bne.w	800b356 <_dtoa_r+0x6e6>
 800b1ea:	9b02      	ldr	r3, [sp, #8]
 800b1ec:	429d      	cmp	r5, r3
 800b1ee:	f43f af7c 	beq.w	800b0ea <_dtoa_r+0x47a>
 800b1f2:	4b31      	ldr	r3, [pc, #196]	; (800b2b8 <_dtoa_r+0x648>)
 800b1f4:	ec51 0b19 	vmov	r0, r1, d9
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f7f5 fa6d 	bl	80006d8 <__aeabi_dmul>
 800b1fe:	4b2e      	ldr	r3, [pc, #184]	; (800b2b8 <_dtoa_r+0x648>)
 800b200:	ec41 0b19 	vmov	d9, r0, r1
 800b204:	2200      	movs	r2, #0
 800b206:	4640      	mov	r0, r8
 800b208:	4649      	mov	r1, r9
 800b20a:	f7f5 fa65 	bl	80006d8 <__aeabi_dmul>
 800b20e:	4680      	mov	r8, r0
 800b210:	4689      	mov	r9, r1
 800b212:	e7c5      	b.n	800b1a0 <_dtoa_r+0x530>
 800b214:	ec51 0b17 	vmov	r0, r1, d7
 800b218:	f7f5 fa5e 	bl	80006d8 <__aeabi_dmul>
 800b21c:	9b02      	ldr	r3, [sp, #8]
 800b21e:	9d00      	ldr	r5, [sp, #0]
 800b220:	930f      	str	r3, [sp, #60]	; 0x3c
 800b222:	ec41 0b19 	vmov	d9, r0, r1
 800b226:	4649      	mov	r1, r9
 800b228:	4640      	mov	r0, r8
 800b22a:	f7f5 fd05 	bl	8000c38 <__aeabi_d2iz>
 800b22e:	4606      	mov	r6, r0
 800b230:	f7f5 f9e8 	bl	8000604 <__aeabi_i2d>
 800b234:	3630      	adds	r6, #48	; 0x30
 800b236:	4602      	mov	r2, r0
 800b238:	460b      	mov	r3, r1
 800b23a:	4640      	mov	r0, r8
 800b23c:	4649      	mov	r1, r9
 800b23e:	f7f5 f893 	bl	8000368 <__aeabi_dsub>
 800b242:	f805 6b01 	strb.w	r6, [r5], #1
 800b246:	9b02      	ldr	r3, [sp, #8]
 800b248:	429d      	cmp	r5, r3
 800b24a:	4680      	mov	r8, r0
 800b24c:	4689      	mov	r9, r1
 800b24e:	f04f 0200 	mov.w	r2, #0
 800b252:	d124      	bne.n	800b29e <_dtoa_r+0x62e>
 800b254:	4b1b      	ldr	r3, [pc, #108]	; (800b2c4 <_dtoa_r+0x654>)
 800b256:	ec51 0b19 	vmov	r0, r1, d9
 800b25a:	f7f5 f887 	bl	800036c <__adddf3>
 800b25e:	4602      	mov	r2, r0
 800b260:	460b      	mov	r3, r1
 800b262:	4640      	mov	r0, r8
 800b264:	4649      	mov	r1, r9
 800b266:	f7f5 fcc7 	bl	8000bf8 <__aeabi_dcmpgt>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	d173      	bne.n	800b356 <_dtoa_r+0x6e6>
 800b26e:	ec53 2b19 	vmov	r2, r3, d9
 800b272:	4914      	ldr	r1, [pc, #80]	; (800b2c4 <_dtoa_r+0x654>)
 800b274:	2000      	movs	r0, #0
 800b276:	f7f5 f877 	bl	8000368 <__aeabi_dsub>
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	4640      	mov	r0, r8
 800b280:	4649      	mov	r1, r9
 800b282:	f7f5 fc9b 	bl	8000bbc <__aeabi_dcmplt>
 800b286:	2800      	cmp	r0, #0
 800b288:	f43f af2f 	beq.w	800b0ea <_dtoa_r+0x47a>
 800b28c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b28e:	1e6b      	subs	r3, r5, #1
 800b290:	930f      	str	r3, [sp, #60]	; 0x3c
 800b292:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b296:	2b30      	cmp	r3, #48	; 0x30
 800b298:	d0f8      	beq.n	800b28c <_dtoa_r+0x61c>
 800b29a:	46bb      	mov	fp, r7
 800b29c:	e04a      	b.n	800b334 <_dtoa_r+0x6c4>
 800b29e:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <_dtoa_r+0x648>)
 800b2a0:	f7f5 fa1a 	bl	80006d8 <__aeabi_dmul>
 800b2a4:	4680      	mov	r8, r0
 800b2a6:	4689      	mov	r9, r1
 800b2a8:	e7bd      	b.n	800b226 <_dtoa_r+0x5b6>
 800b2aa:	bf00      	nop
 800b2ac:	0800cd30 	.word	0x0800cd30
 800b2b0:	0800cd08 	.word	0x0800cd08
 800b2b4:	3ff00000 	.word	0x3ff00000
 800b2b8:	40240000 	.word	0x40240000
 800b2bc:	401c0000 	.word	0x401c0000
 800b2c0:	40140000 	.word	0x40140000
 800b2c4:	3fe00000 	.word	0x3fe00000
 800b2c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b2cc:	9d00      	ldr	r5, [sp, #0]
 800b2ce:	4642      	mov	r2, r8
 800b2d0:	464b      	mov	r3, r9
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	4639      	mov	r1, r7
 800b2d6:	f7f5 fb29 	bl	800092c <__aeabi_ddiv>
 800b2da:	f7f5 fcad 	bl	8000c38 <__aeabi_d2iz>
 800b2de:	9001      	str	r0, [sp, #4]
 800b2e0:	f7f5 f990 	bl	8000604 <__aeabi_i2d>
 800b2e4:	4642      	mov	r2, r8
 800b2e6:	464b      	mov	r3, r9
 800b2e8:	f7f5 f9f6 	bl	80006d8 <__aeabi_dmul>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	4639      	mov	r1, r7
 800b2f4:	f7f5 f838 	bl	8000368 <__aeabi_dsub>
 800b2f8:	9e01      	ldr	r6, [sp, #4]
 800b2fa:	9f04      	ldr	r7, [sp, #16]
 800b2fc:	3630      	adds	r6, #48	; 0x30
 800b2fe:	f805 6b01 	strb.w	r6, [r5], #1
 800b302:	9e00      	ldr	r6, [sp, #0]
 800b304:	1bae      	subs	r6, r5, r6
 800b306:	42b7      	cmp	r7, r6
 800b308:	4602      	mov	r2, r0
 800b30a:	460b      	mov	r3, r1
 800b30c:	d134      	bne.n	800b378 <_dtoa_r+0x708>
 800b30e:	f7f5 f82d 	bl	800036c <__adddf3>
 800b312:	4642      	mov	r2, r8
 800b314:	464b      	mov	r3, r9
 800b316:	4606      	mov	r6, r0
 800b318:	460f      	mov	r7, r1
 800b31a:	f7f5 fc6d 	bl	8000bf8 <__aeabi_dcmpgt>
 800b31e:	b9c8      	cbnz	r0, 800b354 <_dtoa_r+0x6e4>
 800b320:	4642      	mov	r2, r8
 800b322:	464b      	mov	r3, r9
 800b324:	4630      	mov	r0, r6
 800b326:	4639      	mov	r1, r7
 800b328:	f7f5 fc3e 	bl	8000ba8 <__aeabi_dcmpeq>
 800b32c:	b110      	cbz	r0, 800b334 <_dtoa_r+0x6c4>
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	07db      	lsls	r3, r3, #31
 800b332:	d40f      	bmi.n	800b354 <_dtoa_r+0x6e4>
 800b334:	4651      	mov	r1, sl
 800b336:	4620      	mov	r0, r4
 800b338:	f000 fbde 	bl	800baf8 <_Bfree>
 800b33c:	2300      	movs	r3, #0
 800b33e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b340:	702b      	strb	r3, [r5, #0]
 800b342:	f10b 0301 	add.w	r3, fp, #1
 800b346:	6013      	str	r3, [r2, #0]
 800b348:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f43f ace2 	beq.w	800ad14 <_dtoa_r+0xa4>
 800b350:	601d      	str	r5, [r3, #0]
 800b352:	e4df      	b.n	800ad14 <_dtoa_r+0xa4>
 800b354:	465f      	mov	r7, fp
 800b356:	462b      	mov	r3, r5
 800b358:	461d      	mov	r5, r3
 800b35a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b35e:	2a39      	cmp	r2, #57	; 0x39
 800b360:	d106      	bne.n	800b370 <_dtoa_r+0x700>
 800b362:	9a00      	ldr	r2, [sp, #0]
 800b364:	429a      	cmp	r2, r3
 800b366:	d1f7      	bne.n	800b358 <_dtoa_r+0x6e8>
 800b368:	9900      	ldr	r1, [sp, #0]
 800b36a:	2230      	movs	r2, #48	; 0x30
 800b36c:	3701      	adds	r7, #1
 800b36e:	700a      	strb	r2, [r1, #0]
 800b370:	781a      	ldrb	r2, [r3, #0]
 800b372:	3201      	adds	r2, #1
 800b374:	701a      	strb	r2, [r3, #0]
 800b376:	e790      	b.n	800b29a <_dtoa_r+0x62a>
 800b378:	4ba3      	ldr	r3, [pc, #652]	; (800b608 <_dtoa_r+0x998>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	f7f5 f9ac 	bl	80006d8 <__aeabi_dmul>
 800b380:	2200      	movs	r2, #0
 800b382:	2300      	movs	r3, #0
 800b384:	4606      	mov	r6, r0
 800b386:	460f      	mov	r7, r1
 800b388:	f7f5 fc0e 	bl	8000ba8 <__aeabi_dcmpeq>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d09e      	beq.n	800b2ce <_dtoa_r+0x65e>
 800b390:	e7d0      	b.n	800b334 <_dtoa_r+0x6c4>
 800b392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b394:	2a00      	cmp	r2, #0
 800b396:	f000 80ca 	beq.w	800b52e <_dtoa_r+0x8be>
 800b39a:	9a07      	ldr	r2, [sp, #28]
 800b39c:	2a01      	cmp	r2, #1
 800b39e:	f300 80ad 	bgt.w	800b4fc <_dtoa_r+0x88c>
 800b3a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3a4:	2a00      	cmp	r2, #0
 800b3a6:	f000 80a5 	beq.w	800b4f4 <_dtoa_r+0x884>
 800b3aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b3ae:	9e08      	ldr	r6, [sp, #32]
 800b3b0:	9d05      	ldr	r5, [sp, #20]
 800b3b2:	9a05      	ldr	r2, [sp, #20]
 800b3b4:	441a      	add	r2, r3
 800b3b6:	9205      	str	r2, [sp, #20]
 800b3b8:	9a06      	ldr	r2, [sp, #24]
 800b3ba:	2101      	movs	r1, #1
 800b3bc:	441a      	add	r2, r3
 800b3be:	4620      	mov	r0, r4
 800b3c0:	9206      	str	r2, [sp, #24]
 800b3c2:	f000 fc4f 	bl	800bc64 <__i2b>
 800b3c6:	4607      	mov	r7, r0
 800b3c8:	b165      	cbz	r5, 800b3e4 <_dtoa_r+0x774>
 800b3ca:	9b06      	ldr	r3, [sp, #24]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	dd09      	ble.n	800b3e4 <_dtoa_r+0x774>
 800b3d0:	42ab      	cmp	r3, r5
 800b3d2:	9a05      	ldr	r2, [sp, #20]
 800b3d4:	bfa8      	it	ge
 800b3d6:	462b      	movge	r3, r5
 800b3d8:	1ad2      	subs	r2, r2, r3
 800b3da:	9205      	str	r2, [sp, #20]
 800b3dc:	9a06      	ldr	r2, [sp, #24]
 800b3de:	1aed      	subs	r5, r5, r3
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	9306      	str	r3, [sp, #24]
 800b3e4:	9b08      	ldr	r3, [sp, #32]
 800b3e6:	b1f3      	cbz	r3, 800b426 <_dtoa_r+0x7b6>
 800b3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f000 80a3 	beq.w	800b536 <_dtoa_r+0x8c6>
 800b3f0:	2e00      	cmp	r6, #0
 800b3f2:	dd10      	ble.n	800b416 <_dtoa_r+0x7a6>
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	4632      	mov	r2, r6
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f000 fcf3 	bl	800bde4 <__pow5mult>
 800b3fe:	4652      	mov	r2, sl
 800b400:	4601      	mov	r1, r0
 800b402:	4607      	mov	r7, r0
 800b404:	4620      	mov	r0, r4
 800b406:	f000 fc43 	bl	800bc90 <__multiply>
 800b40a:	4651      	mov	r1, sl
 800b40c:	4680      	mov	r8, r0
 800b40e:	4620      	mov	r0, r4
 800b410:	f000 fb72 	bl	800baf8 <_Bfree>
 800b414:	46c2      	mov	sl, r8
 800b416:	9b08      	ldr	r3, [sp, #32]
 800b418:	1b9a      	subs	r2, r3, r6
 800b41a:	d004      	beq.n	800b426 <_dtoa_r+0x7b6>
 800b41c:	4651      	mov	r1, sl
 800b41e:	4620      	mov	r0, r4
 800b420:	f000 fce0 	bl	800bde4 <__pow5mult>
 800b424:	4682      	mov	sl, r0
 800b426:	2101      	movs	r1, #1
 800b428:	4620      	mov	r0, r4
 800b42a:	f000 fc1b 	bl	800bc64 <__i2b>
 800b42e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b430:	2b00      	cmp	r3, #0
 800b432:	4606      	mov	r6, r0
 800b434:	f340 8081 	ble.w	800b53a <_dtoa_r+0x8ca>
 800b438:	461a      	mov	r2, r3
 800b43a:	4601      	mov	r1, r0
 800b43c:	4620      	mov	r0, r4
 800b43e:	f000 fcd1 	bl	800bde4 <__pow5mult>
 800b442:	9b07      	ldr	r3, [sp, #28]
 800b444:	2b01      	cmp	r3, #1
 800b446:	4606      	mov	r6, r0
 800b448:	dd7a      	ble.n	800b540 <_dtoa_r+0x8d0>
 800b44a:	f04f 0800 	mov.w	r8, #0
 800b44e:	6933      	ldr	r3, [r6, #16]
 800b450:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b454:	6918      	ldr	r0, [r3, #16]
 800b456:	f000 fbb7 	bl	800bbc8 <__hi0bits>
 800b45a:	f1c0 0020 	rsb	r0, r0, #32
 800b45e:	9b06      	ldr	r3, [sp, #24]
 800b460:	4418      	add	r0, r3
 800b462:	f010 001f 	ands.w	r0, r0, #31
 800b466:	f000 8094 	beq.w	800b592 <_dtoa_r+0x922>
 800b46a:	f1c0 0320 	rsb	r3, r0, #32
 800b46e:	2b04      	cmp	r3, #4
 800b470:	f340 8085 	ble.w	800b57e <_dtoa_r+0x90e>
 800b474:	9b05      	ldr	r3, [sp, #20]
 800b476:	f1c0 001c 	rsb	r0, r0, #28
 800b47a:	4403      	add	r3, r0
 800b47c:	9305      	str	r3, [sp, #20]
 800b47e:	9b06      	ldr	r3, [sp, #24]
 800b480:	4403      	add	r3, r0
 800b482:	4405      	add	r5, r0
 800b484:	9306      	str	r3, [sp, #24]
 800b486:	9b05      	ldr	r3, [sp, #20]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	dd05      	ble.n	800b498 <_dtoa_r+0x828>
 800b48c:	4651      	mov	r1, sl
 800b48e:	461a      	mov	r2, r3
 800b490:	4620      	mov	r0, r4
 800b492:	f000 fd01 	bl	800be98 <__lshift>
 800b496:	4682      	mov	sl, r0
 800b498:	9b06      	ldr	r3, [sp, #24]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	dd05      	ble.n	800b4aa <_dtoa_r+0x83a>
 800b49e:	4631      	mov	r1, r6
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f000 fcf8 	bl	800be98 <__lshift>
 800b4a8:	4606      	mov	r6, r0
 800b4aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d072      	beq.n	800b596 <_dtoa_r+0x926>
 800b4b0:	4631      	mov	r1, r6
 800b4b2:	4650      	mov	r0, sl
 800b4b4:	f000 fd5c 	bl	800bf70 <__mcmp>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	da6c      	bge.n	800b596 <_dtoa_r+0x926>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	4651      	mov	r1, sl
 800b4c0:	220a      	movs	r2, #10
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f000 fb3a 	bl	800bb3c <__multadd>
 800b4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b4ce:	4682      	mov	sl, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 81b0 	beq.w	800b836 <_dtoa_r+0xbc6>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	4639      	mov	r1, r7
 800b4da:	220a      	movs	r2, #10
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f000 fb2d 	bl	800bb3c <__multadd>
 800b4e2:	9b01      	ldr	r3, [sp, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	4607      	mov	r7, r0
 800b4e8:	f300 8096 	bgt.w	800b618 <_dtoa_r+0x9a8>
 800b4ec:	9b07      	ldr	r3, [sp, #28]
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	dc59      	bgt.n	800b5a6 <_dtoa_r+0x936>
 800b4f2:	e091      	b.n	800b618 <_dtoa_r+0x9a8>
 800b4f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b4fa:	e758      	b.n	800b3ae <_dtoa_r+0x73e>
 800b4fc:	9b04      	ldr	r3, [sp, #16]
 800b4fe:	1e5e      	subs	r6, r3, #1
 800b500:	9b08      	ldr	r3, [sp, #32]
 800b502:	42b3      	cmp	r3, r6
 800b504:	bfbf      	itttt	lt
 800b506:	9b08      	ldrlt	r3, [sp, #32]
 800b508:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b50a:	9608      	strlt	r6, [sp, #32]
 800b50c:	1af3      	sublt	r3, r6, r3
 800b50e:	bfb4      	ite	lt
 800b510:	18d2      	addlt	r2, r2, r3
 800b512:	1b9e      	subge	r6, r3, r6
 800b514:	9b04      	ldr	r3, [sp, #16]
 800b516:	bfbc      	itt	lt
 800b518:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b51a:	2600      	movlt	r6, #0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bfb7      	itett	lt
 800b520:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b524:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b528:	1a9d      	sublt	r5, r3, r2
 800b52a:	2300      	movlt	r3, #0
 800b52c:	e741      	b.n	800b3b2 <_dtoa_r+0x742>
 800b52e:	9e08      	ldr	r6, [sp, #32]
 800b530:	9d05      	ldr	r5, [sp, #20]
 800b532:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b534:	e748      	b.n	800b3c8 <_dtoa_r+0x758>
 800b536:	9a08      	ldr	r2, [sp, #32]
 800b538:	e770      	b.n	800b41c <_dtoa_r+0x7ac>
 800b53a:	9b07      	ldr	r3, [sp, #28]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	dc19      	bgt.n	800b574 <_dtoa_r+0x904>
 800b540:	9b02      	ldr	r3, [sp, #8]
 800b542:	b9bb      	cbnz	r3, 800b574 <_dtoa_r+0x904>
 800b544:	9b03      	ldr	r3, [sp, #12]
 800b546:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b54a:	b99b      	cbnz	r3, 800b574 <_dtoa_r+0x904>
 800b54c:	9b03      	ldr	r3, [sp, #12]
 800b54e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b552:	0d1b      	lsrs	r3, r3, #20
 800b554:	051b      	lsls	r3, r3, #20
 800b556:	b183      	cbz	r3, 800b57a <_dtoa_r+0x90a>
 800b558:	9b05      	ldr	r3, [sp, #20]
 800b55a:	3301      	adds	r3, #1
 800b55c:	9305      	str	r3, [sp, #20]
 800b55e:	9b06      	ldr	r3, [sp, #24]
 800b560:	3301      	adds	r3, #1
 800b562:	9306      	str	r3, [sp, #24]
 800b564:	f04f 0801 	mov.w	r8, #1
 800b568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f47f af6f 	bne.w	800b44e <_dtoa_r+0x7de>
 800b570:	2001      	movs	r0, #1
 800b572:	e774      	b.n	800b45e <_dtoa_r+0x7ee>
 800b574:	f04f 0800 	mov.w	r8, #0
 800b578:	e7f6      	b.n	800b568 <_dtoa_r+0x8f8>
 800b57a:	4698      	mov	r8, r3
 800b57c:	e7f4      	b.n	800b568 <_dtoa_r+0x8f8>
 800b57e:	d082      	beq.n	800b486 <_dtoa_r+0x816>
 800b580:	9a05      	ldr	r2, [sp, #20]
 800b582:	331c      	adds	r3, #28
 800b584:	441a      	add	r2, r3
 800b586:	9205      	str	r2, [sp, #20]
 800b588:	9a06      	ldr	r2, [sp, #24]
 800b58a:	441a      	add	r2, r3
 800b58c:	441d      	add	r5, r3
 800b58e:	9206      	str	r2, [sp, #24]
 800b590:	e779      	b.n	800b486 <_dtoa_r+0x816>
 800b592:	4603      	mov	r3, r0
 800b594:	e7f4      	b.n	800b580 <_dtoa_r+0x910>
 800b596:	9b04      	ldr	r3, [sp, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	dc37      	bgt.n	800b60c <_dtoa_r+0x99c>
 800b59c:	9b07      	ldr	r3, [sp, #28]
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	dd34      	ble.n	800b60c <_dtoa_r+0x99c>
 800b5a2:	9b04      	ldr	r3, [sp, #16]
 800b5a4:	9301      	str	r3, [sp, #4]
 800b5a6:	9b01      	ldr	r3, [sp, #4]
 800b5a8:	b963      	cbnz	r3, 800b5c4 <_dtoa_r+0x954>
 800b5aa:	4631      	mov	r1, r6
 800b5ac:	2205      	movs	r2, #5
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f000 fac4 	bl	800bb3c <__multadd>
 800b5b4:	4601      	mov	r1, r0
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	4650      	mov	r0, sl
 800b5ba:	f000 fcd9 	bl	800bf70 <__mcmp>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	f73f adbb 	bgt.w	800b13a <_dtoa_r+0x4ca>
 800b5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c6:	9d00      	ldr	r5, [sp, #0]
 800b5c8:	ea6f 0b03 	mvn.w	fp, r3
 800b5cc:	f04f 0800 	mov.w	r8, #0
 800b5d0:	4631      	mov	r1, r6
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f000 fa90 	bl	800baf8 <_Bfree>
 800b5d8:	2f00      	cmp	r7, #0
 800b5da:	f43f aeab 	beq.w	800b334 <_dtoa_r+0x6c4>
 800b5de:	f1b8 0f00 	cmp.w	r8, #0
 800b5e2:	d005      	beq.n	800b5f0 <_dtoa_r+0x980>
 800b5e4:	45b8      	cmp	r8, r7
 800b5e6:	d003      	beq.n	800b5f0 <_dtoa_r+0x980>
 800b5e8:	4641      	mov	r1, r8
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f000 fa84 	bl	800baf8 <_Bfree>
 800b5f0:	4639      	mov	r1, r7
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f000 fa80 	bl	800baf8 <_Bfree>
 800b5f8:	e69c      	b.n	800b334 <_dtoa_r+0x6c4>
 800b5fa:	2600      	movs	r6, #0
 800b5fc:	4637      	mov	r7, r6
 800b5fe:	e7e1      	b.n	800b5c4 <_dtoa_r+0x954>
 800b600:	46bb      	mov	fp, r7
 800b602:	4637      	mov	r7, r6
 800b604:	e599      	b.n	800b13a <_dtoa_r+0x4ca>
 800b606:	bf00      	nop
 800b608:	40240000 	.word	0x40240000
 800b60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f000 80c8 	beq.w	800b7a4 <_dtoa_r+0xb34>
 800b614:	9b04      	ldr	r3, [sp, #16]
 800b616:	9301      	str	r3, [sp, #4]
 800b618:	2d00      	cmp	r5, #0
 800b61a:	dd05      	ble.n	800b628 <_dtoa_r+0x9b8>
 800b61c:	4639      	mov	r1, r7
 800b61e:	462a      	mov	r2, r5
 800b620:	4620      	mov	r0, r4
 800b622:	f000 fc39 	bl	800be98 <__lshift>
 800b626:	4607      	mov	r7, r0
 800b628:	f1b8 0f00 	cmp.w	r8, #0
 800b62c:	d05b      	beq.n	800b6e6 <_dtoa_r+0xa76>
 800b62e:	6879      	ldr	r1, [r7, #4]
 800b630:	4620      	mov	r0, r4
 800b632:	f000 fa21 	bl	800ba78 <_Balloc>
 800b636:	4605      	mov	r5, r0
 800b638:	b928      	cbnz	r0, 800b646 <_dtoa_r+0x9d6>
 800b63a:	4b83      	ldr	r3, [pc, #524]	; (800b848 <_dtoa_r+0xbd8>)
 800b63c:	4602      	mov	r2, r0
 800b63e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b642:	f7ff bb2e 	b.w	800aca2 <_dtoa_r+0x32>
 800b646:	693a      	ldr	r2, [r7, #16]
 800b648:	3202      	adds	r2, #2
 800b64a:	0092      	lsls	r2, r2, #2
 800b64c:	f107 010c 	add.w	r1, r7, #12
 800b650:	300c      	adds	r0, #12
 800b652:	f7ff fa76 	bl	800ab42 <memcpy>
 800b656:	2201      	movs	r2, #1
 800b658:	4629      	mov	r1, r5
 800b65a:	4620      	mov	r0, r4
 800b65c:	f000 fc1c 	bl	800be98 <__lshift>
 800b660:	9b00      	ldr	r3, [sp, #0]
 800b662:	3301      	adds	r3, #1
 800b664:	9304      	str	r3, [sp, #16]
 800b666:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b66a:	4413      	add	r3, r2
 800b66c:	9308      	str	r3, [sp, #32]
 800b66e:	9b02      	ldr	r3, [sp, #8]
 800b670:	f003 0301 	and.w	r3, r3, #1
 800b674:	46b8      	mov	r8, r7
 800b676:	9306      	str	r3, [sp, #24]
 800b678:	4607      	mov	r7, r0
 800b67a:	9b04      	ldr	r3, [sp, #16]
 800b67c:	4631      	mov	r1, r6
 800b67e:	3b01      	subs	r3, #1
 800b680:	4650      	mov	r0, sl
 800b682:	9301      	str	r3, [sp, #4]
 800b684:	f7ff fa6b 	bl	800ab5e <quorem>
 800b688:	4641      	mov	r1, r8
 800b68a:	9002      	str	r0, [sp, #8]
 800b68c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b690:	4650      	mov	r0, sl
 800b692:	f000 fc6d 	bl	800bf70 <__mcmp>
 800b696:	463a      	mov	r2, r7
 800b698:	9005      	str	r0, [sp, #20]
 800b69a:	4631      	mov	r1, r6
 800b69c:	4620      	mov	r0, r4
 800b69e:	f000 fc83 	bl	800bfa8 <__mdiff>
 800b6a2:	68c2      	ldr	r2, [r0, #12]
 800b6a4:	4605      	mov	r5, r0
 800b6a6:	bb02      	cbnz	r2, 800b6ea <_dtoa_r+0xa7a>
 800b6a8:	4601      	mov	r1, r0
 800b6aa:	4650      	mov	r0, sl
 800b6ac:	f000 fc60 	bl	800bf70 <__mcmp>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	4629      	mov	r1, r5
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b6b8:	f000 fa1e 	bl	800baf8 <_Bfree>
 800b6bc:	9b07      	ldr	r3, [sp, #28]
 800b6be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6c0:	9d04      	ldr	r5, [sp, #16]
 800b6c2:	ea43 0102 	orr.w	r1, r3, r2
 800b6c6:	9b06      	ldr	r3, [sp, #24]
 800b6c8:	4319      	orrs	r1, r3
 800b6ca:	d110      	bne.n	800b6ee <_dtoa_r+0xa7e>
 800b6cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b6d0:	d029      	beq.n	800b726 <_dtoa_r+0xab6>
 800b6d2:	9b05      	ldr	r3, [sp, #20]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	dd02      	ble.n	800b6de <_dtoa_r+0xa6e>
 800b6d8:	9b02      	ldr	r3, [sp, #8]
 800b6da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b6de:	9b01      	ldr	r3, [sp, #4]
 800b6e0:	f883 9000 	strb.w	r9, [r3]
 800b6e4:	e774      	b.n	800b5d0 <_dtoa_r+0x960>
 800b6e6:	4638      	mov	r0, r7
 800b6e8:	e7ba      	b.n	800b660 <_dtoa_r+0x9f0>
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	e7e1      	b.n	800b6b2 <_dtoa_r+0xa42>
 800b6ee:	9b05      	ldr	r3, [sp, #20]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	db04      	blt.n	800b6fe <_dtoa_r+0xa8e>
 800b6f4:	9907      	ldr	r1, [sp, #28]
 800b6f6:	430b      	orrs	r3, r1
 800b6f8:	9906      	ldr	r1, [sp, #24]
 800b6fa:	430b      	orrs	r3, r1
 800b6fc:	d120      	bne.n	800b740 <_dtoa_r+0xad0>
 800b6fe:	2a00      	cmp	r2, #0
 800b700:	dded      	ble.n	800b6de <_dtoa_r+0xa6e>
 800b702:	4651      	mov	r1, sl
 800b704:	2201      	movs	r2, #1
 800b706:	4620      	mov	r0, r4
 800b708:	f000 fbc6 	bl	800be98 <__lshift>
 800b70c:	4631      	mov	r1, r6
 800b70e:	4682      	mov	sl, r0
 800b710:	f000 fc2e 	bl	800bf70 <__mcmp>
 800b714:	2800      	cmp	r0, #0
 800b716:	dc03      	bgt.n	800b720 <_dtoa_r+0xab0>
 800b718:	d1e1      	bne.n	800b6de <_dtoa_r+0xa6e>
 800b71a:	f019 0f01 	tst.w	r9, #1
 800b71e:	d0de      	beq.n	800b6de <_dtoa_r+0xa6e>
 800b720:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b724:	d1d8      	bne.n	800b6d8 <_dtoa_r+0xa68>
 800b726:	9a01      	ldr	r2, [sp, #4]
 800b728:	2339      	movs	r3, #57	; 0x39
 800b72a:	7013      	strb	r3, [r2, #0]
 800b72c:	462b      	mov	r3, r5
 800b72e:	461d      	mov	r5, r3
 800b730:	3b01      	subs	r3, #1
 800b732:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b736:	2a39      	cmp	r2, #57	; 0x39
 800b738:	d06c      	beq.n	800b814 <_dtoa_r+0xba4>
 800b73a:	3201      	adds	r2, #1
 800b73c:	701a      	strb	r2, [r3, #0]
 800b73e:	e747      	b.n	800b5d0 <_dtoa_r+0x960>
 800b740:	2a00      	cmp	r2, #0
 800b742:	dd07      	ble.n	800b754 <_dtoa_r+0xae4>
 800b744:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b748:	d0ed      	beq.n	800b726 <_dtoa_r+0xab6>
 800b74a:	9a01      	ldr	r2, [sp, #4]
 800b74c:	f109 0301 	add.w	r3, r9, #1
 800b750:	7013      	strb	r3, [r2, #0]
 800b752:	e73d      	b.n	800b5d0 <_dtoa_r+0x960>
 800b754:	9b04      	ldr	r3, [sp, #16]
 800b756:	9a08      	ldr	r2, [sp, #32]
 800b758:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d043      	beq.n	800b7e8 <_dtoa_r+0xb78>
 800b760:	4651      	mov	r1, sl
 800b762:	2300      	movs	r3, #0
 800b764:	220a      	movs	r2, #10
 800b766:	4620      	mov	r0, r4
 800b768:	f000 f9e8 	bl	800bb3c <__multadd>
 800b76c:	45b8      	cmp	r8, r7
 800b76e:	4682      	mov	sl, r0
 800b770:	f04f 0300 	mov.w	r3, #0
 800b774:	f04f 020a 	mov.w	r2, #10
 800b778:	4641      	mov	r1, r8
 800b77a:	4620      	mov	r0, r4
 800b77c:	d107      	bne.n	800b78e <_dtoa_r+0xb1e>
 800b77e:	f000 f9dd 	bl	800bb3c <__multadd>
 800b782:	4680      	mov	r8, r0
 800b784:	4607      	mov	r7, r0
 800b786:	9b04      	ldr	r3, [sp, #16]
 800b788:	3301      	adds	r3, #1
 800b78a:	9304      	str	r3, [sp, #16]
 800b78c:	e775      	b.n	800b67a <_dtoa_r+0xa0a>
 800b78e:	f000 f9d5 	bl	800bb3c <__multadd>
 800b792:	4639      	mov	r1, r7
 800b794:	4680      	mov	r8, r0
 800b796:	2300      	movs	r3, #0
 800b798:	220a      	movs	r2, #10
 800b79a:	4620      	mov	r0, r4
 800b79c:	f000 f9ce 	bl	800bb3c <__multadd>
 800b7a0:	4607      	mov	r7, r0
 800b7a2:	e7f0      	b.n	800b786 <_dtoa_r+0xb16>
 800b7a4:	9b04      	ldr	r3, [sp, #16]
 800b7a6:	9301      	str	r3, [sp, #4]
 800b7a8:	9d00      	ldr	r5, [sp, #0]
 800b7aa:	4631      	mov	r1, r6
 800b7ac:	4650      	mov	r0, sl
 800b7ae:	f7ff f9d6 	bl	800ab5e <quorem>
 800b7b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b7b6:	9b00      	ldr	r3, [sp, #0]
 800b7b8:	f805 9b01 	strb.w	r9, [r5], #1
 800b7bc:	1aea      	subs	r2, r5, r3
 800b7be:	9b01      	ldr	r3, [sp, #4]
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	dd07      	ble.n	800b7d4 <_dtoa_r+0xb64>
 800b7c4:	4651      	mov	r1, sl
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	220a      	movs	r2, #10
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f000 f9b6 	bl	800bb3c <__multadd>
 800b7d0:	4682      	mov	sl, r0
 800b7d2:	e7ea      	b.n	800b7aa <_dtoa_r+0xb3a>
 800b7d4:	9b01      	ldr	r3, [sp, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	bfc8      	it	gt
 800b7da:	461d      	movgt	r5, r3
 800b7dc:	9b00      	ldr	r3, [sp, #0]
 800b7de:	bfd8      	it	le
 800b7e0:	2501      	movle	r5, #1
 800b7e2:	441d      	add	r5, r3
 800b7e4:	f04f 0800 	mov.w	r8, #0
 800b7e8:	4651      	mov	r1, sl
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 fb53 	bl	800be98 <__lshift>
 800b7f2:	4631      	mov	r1, r6
 800b7f4:	4682      	mov	sl, r0
 800b7f6:	f000 fbbb 	bl	800bf70 <__mcmp>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	dc96      	bgt.n	800b72c <_dtoa_r+0xabc>
 800b7fe:	d102      	bne.n	800b806 <_dtoa_r+0xb96>
 800b800:	f019 0f01 	tst.w	r9, #1
 800b804:	d192      	bne.n	800b72c <_dtoa_r+0xabc>
 800b806:	462b      	mov	r3, r5
 800b808:	461d      	mov	r5, r3
 800b80a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b80e:	2a30      	cmp	r2, #48	; 0x30
 800b810:	d0fa      	beq.n	800b808 <_dtoa_r+0xb98>
 800b812:	e6dd      	b.n	800b5d0 <_dtoa_r+0x960>
 800b814:	9a00      	ldr	r2, [sp, #0]
 800b816:	429a      	cmp	r2, r3
 800b818:	d189      	bne.n	800b72e <_dtoa_r+0xabe>
 800b81a:	f10b 0b01 	add.w	fp, fp, #1
 800b81e:	2331      	movs	r3, #49	; 0x31
 800b820:	e796      	b.n	800b750 <_dtoa_r+0xae0>
 800b822:	4b0a      	ldr	r3, [pc, #40]	; (800b84c <_dtoa_r+0xbdc>)
 800b824:	f7ff ba99 	b.w	800ad5a <_dtoa_r+0xea>
 800b828:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f47f aa6d 	bne.w	800ad0a <_dtoa_r+0x9a>
 800b830:	4b07      	ldr	r3, [pc, #28]	; (800b850 <_dtoa_r+0xbe0>)
 800b832:	f7ff ba92 	b.w	800ad5a <_dtoa_r+0xea>
 800b836:	9b01      	ldr	r3, [sp, #4]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	dcb5      	bgt.n	800b7a8 <_dtoa_r+0xb38>
 800b83c:	9b07      	ldr	r3, [sp, #28]
 800b83e:	2b02      	cmp	r3, #2
 800b840:	f73f aeb1 	bgt.w	800b5a6 <_dtoa_r+0x936>
 800b844:	e7b0      	b.n	800b7a8 <_dtoa_r+0xb38>
 800b846:	bf00      	nop
 800b848:	0800cc9d 	.word	0x0800cc9d
 800b84c:	0800cbf3 	.word	0x0800cbf3
 800b850:	0800cc21 	.word	0x0800cc21

0800b854 <_free_r>:
 800b854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b856:	2900      	cmp	r1, #0
 800b858:	d044      	beq.n	800b8e4 <_free_r+0x90>
 800b85a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b85e:	9001      	str	r0, [sp, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	f1a1 0404 	sub.w	r4, r1, #4
 800b866:	bfb8      	it	lt
 800b868:	18e4      	addlt	r4, r4, r3
 800b86a:	f000 f8f9 	bl	800ba60 <__malloc_lock>
 800b86e:	4a1e      	ldr	r2, [pc, #120]	; (800b8e8 <_free_r+0x94>)
 800b870:	9801      	ldr	r0, [sp, #4]
 800b872:	6813      	ldr	r3, [r2, #0]
 800b874:	b933      	cbnz	r3, 800b884 <_free_r+0x30>
 800b876:	6063      	str	r3, [r4, #4]
 800b878:	6014      	str	r4, [r2, #0]
 800b87a:	b003      	add	sp, #12
 800b87c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b880:	f000 b8f4 	b.w	800ba6c <__malloc_unlock>
 800b884:	42a3      	cmp	r3, r4
 800b886:	d908      	bls.n	800b89a <_free_r+0x46>
 800b888:	6825      	ldr	r5, [r4, #0]
 800b88a:	1961      	adds	r1, r4, r5
 800b88c:	428b      	cmp	r3, r1
 800b88e:	bf01      	itttt	eq
 800b890:	6819      	ldreq	r1, [r3, #0]
 800b892:	685b      	ldreq	r3, [r3, #4]
 800b894:	1949      	addeq	r1, r1, r5
 800b896:	6021      	streq	r1, [r4, #0]
 800b898:	e7ed      	b.n	800b876 <_free_r+0x22>
 800b89a:	461a      	mov	r2, r3
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	b10b      	cbz	r3, 800b8a4 <_free_r+0x50>
 800b8a0:	42a3      	cmp	r3, r4
 800b8a2:	d9fa      	bls.n	800b89a <_free_r+0x46>
 800b8a4:	6811      	ldr	r1, [r2, #0]
 800b8a6:	1855      	adds	r5, r2, r1
 800b8a8:	42a5      	cmp	r5, r4
 800b8aa:	d10b      	bne.n	800b8c4 <_free_r+0x70>
 800b8ac:	6824      	ldr	r4, [r4, #0]
 800b8ae:	4421      	add	r1, r4
 800b8b0:	1854      	adds	r4, r2, r1
 800b8b2:	42a3      	cmp	r3, r4
 800b8b4:	6011      	str	r1, [r2, #0]
 800b8b6:	d1e0      	bne.n	800b87a <_free_r+0x26>
 800b8b8:	681c      	ldr	r4, [r3, #0]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	6053      	str	r3, [r2, #4]
 800b8be:	440c      	add	r4, r1
 800b8c0:	6014      	str	r4, [r2, #0]
 800b8c2:	e7da      	b.n	800b87a <_free_r+0x26>
 800b8c4:	d902      	bls.n	800b8cc <_free_r+0x78>
 800b8c6:	230c      	movs	r3, #12
 800b8c8:	6003      	str	r3, [r0, #0]
 800b8ca:	e7d6      	b.n	800b87a <_free_r+0x26>
 800b8cc:	6825      	ldr	r5, [r4, #0]
 800b8ce:	1961      	adds	r1, r4, r5
 800b8d0:	428b      	cmp	r3, r1
 800b8d2:	bf04      	itt	eq
 800b8d4:	6819      	ldreq	r1, [r3, #0]
 800b8d6:	685b      	ldreq	r3, [r3, #4]
 800b8d8:	6063      	str	r3, [r4, #4]
 800b8da:	bf04      	itt	eq
 800b8dc:	1949      	addeq	r1, r1, r5
 800b8de:	6021      	streq	r1, [r4, #0]
 800b8e0:	6054      	str	r4, [r2, #4]
 800b8e2:	e7ca      	b.n	800b87a <_free_r+0x26>
 800b8e4:	b003      	add	sp, #12
 800b8e6:	bd30      	pop	{r4, r5, pc}
 800b8e8:	20013cdc 	.word	0x20013cdc

0800b8ec <malloc>:
 800b8ec:	4b02      	ldr	r3, [pc, #8]	; (800b8f8 <malloc+0xc>)
 800b8ee:	4601      	mov	r1, r0
 800b8f0:	6818      	ldr	r0, [r3, #0]
 800b8f2:	f000 b823 	b.w	800b93c <_malloc_r>
 800b8f6:	bf00      	nop
 800b8f8:	200001d8 	.word	0x200001d8

0800b8fc <sbrk_aligned>:
 800b8fc:	b570      	push	{r4, r5, r6, lr}
 800b8fe:	4e0e      	ldr	r6, [pc, #56]	; (800b938 <sbrk_aligned+0x3c>)
 800b900:	460c      	mov	r4, r1
 800b902:	6831      	ldr	r1, [r6, #0]
 800b904:	4605      	mov	r5, r0
 800b906:	b911      	cbnz	r1, 800b90e <sbrk_aligned+0x12>
 800b908:	f000 fcee 	bl	800c2e8 <_sbrk_r>
 800b90c:	6030      	str	r0, [r6, #0]
 800b90e:	4621      	mov	r1, r4
 800b910:	4628      	mov	r0, r5
 800b912:	f000 fce9 	bl	800c2e8 <_sbrk_r>
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	d00a      	beq.n	800b930 <sbrk_aligned+0x34>
 800b91a:	1cc4      	adds	r4, r0, #3
 800b91c:	f024 0403 	bic.w	r4, r4, #3
 800b920:	42a0      	cmp	r0, r4
 800b922:	d007      	beq.n	800b934 <sbrk_aligned+0x38>
 800b924:	1a21      	subs	r1, r4, r0
 800b926:	4628      	mov	r0, r5
 800b928:	f000 fcde 	bl	800c2e8 <_sbrk_r>
 800b92c:	3001      	adds	r0, #1
 800b92e:	d101      	bne.n	800b934 <sbrk_aligned+0x38>
 800b930:	f04f 34ff 	mov.w	r4, #4294967295
 800b934:	4620      	mov	r0, r4
 800b936:	bd70      	pop	{r4, r5, r6, pc}
 800b938:	20013ce0 	.word	0x20013ce0

0800b93c <_malloc_r>:
 800b93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b940:	1ccd      	adds	r5, r1, #3
 800b942:	f025 0503 	bic.w	r5, r5, #3
 800b946:	3508      	adds	r5, #8
 800b948:	2d0c      	cmp	r5, #12
 800b94a:	bf38      	it	cc
 800b94c:	250c      	movcc	r5, #12
 800b94e:	2d00      	cmp	r5, #0
 800b950:	4607      	mov	r7, r0
 800b952:	db01      	blt.n	800b958 <_malloc_r+0x1c>
 800b954:	42a9      	cmp	r1, r5
 800b956:	d905      	bls.n	800b964 <_malloc_r+0x28>
 800b958:	230c      	movs	r3, #12
 800b95a:	603b      	str	r3, [r7, #0]
 800b95c:	2600      	movs	r6, #0
 800b95e:	4630      	mov	r0, r6
 800b960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b964:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba38 <_malloc_r+0xfc>
 800b968:	f000 f87a 	bl	800ba60 <__malloc_lock>
 800b96c:	f8d8 3000 	ldr.w	r3, [r8]
 800b970:	461c      	mov	r4, r3
 800b972:	bb5c      	cbnz	r4, 800b9cc <_malloc_r+0x90>
 800b974:	4629      	mov	r1, r5
 800b976:	4638      	mov	r0, r7
 800b978:	f7ff ffc0 	bl	800b8fc <sbrk_aligned>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	4604      	mov	r4, r0
 800b980:	d155      	bne.n	800ba2e <_malloc_r+0xf2>
 800b982:	f8d8 4000 	ldr.w	r4, [r8]
 800b986:	4626      	mov	r6, r4
 800b988:	2e00      	cmp	r6, #0
 800b98a:	d145      	bne.n	800ba18 <_malloc_r+0xdc>
 800b98c:	2c00      	cmp	r4, #0
 800b98e:	d048      	beq.n	800ba22 <_malloc_r+0xe6>
 800b990:	6823      	ldr	r3, [r4, #0]
 800b992:	4631      	mov	r1, r6
 800b994:	4638      	mov	r0, r7
 800b996:	eb04 0903 	add.w	r9, r4, r3
 800b99a:	f000 fca5 	bl	800c2e8 <_sbrk_r>
 800b99e:	4581      	cmp	r9, r0
 800b9a0:	d13f      	bne.n	800ba22 <_malloc_r+0xe6>
 800b9a2:	6821      	ldr	r1, [r4, #0]
 800b9a4:	1a6d      	subs	r5, r5, r1
 800b9a6:	4629      	mov	r1, r5
 800b9a8:	4638      	mov	r0, r7
 800b9aa:	f7ff ffa7 	bl	800b8fc <sbrk_aligned>
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	d037      	beq.n	800ba22 <_malloc_r+0xe6>
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	442b      	add	r3, r5
 800b9b6:	6023      	str	r3, [r4, #0]
 800b9b8:	f8d8 3000 	ldr.w	r3, [r8]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d038      	beq.n	800ba32 <_malloc_r+0xf6>
 800b9c0:	685a      	ldr	r2, [r3, #4]
 800b9c2:	42a2      	cmp	r2, r4
 800b9c4:	d12b      	bne.n	800ba1e <_malloc_r+0xe2>
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	605a      	str	r2, [r3, #4]
 800b9ca:	e00f      	b.n	800b9ec <_malloc_r+0xb0>
 800b9cc:	6822      	ldr	r2, [r4, #0]
 800b9ce:	1b52      	subs	r2, r2, r5
 800b9d0:	d41f      	bmi.n	800ba12 <_malloc_r+0xd6>
 800b9d2:	2a0b      	cmp	r2, #11
 800b9d4:	d917      	bls.n	800ba06 <_malloc_r+0xca>
 800b9d6:	1961      	adds	r1, r4, r5
 800b9d8:	42a3      	cmp	r3, r4
 800b9da:	6025      	str	r5, [r4, #0]
 800b9dc:	bf18      	it	ne
 800b9de:	6059      	strne	r1, [r3, #4]
 800b9e0:	6863      	ldr	r3, [r4, #4]
 800b9e2:	bf08      	it	eq
 800b9e4:	f8c8 1000 	streq.w	r1, [r8]
 800b9e8:	5162      	str	r2, [r4, r5]
 800b9ea:	604b      	str	r3, [r1, #4]
 800b9ec:	4638      	mov	r0, r7
 800b9ee:	f104 060b 	add.w	r6, r4, #11
 800b9f2:	f000 f83b 	bl	800ba6c <__malloc_unlock>
 800b9f6:	f026 0607 	bic.w	r6, r6, #7
 800b9fa:	1d23      	adds	r3, r4, #4
 800b9fc:	1af2      	subs	r2, r6, r3
 800b9fe:	d0ae      	beq.n	800b95e <_malloc_r+0x22>
 800ba00:	1b9b      	subs	r3, r3, r6
 800ba02:	50a3      	str	r3, [r4, r2]
 800ba04:	e7ab      	b.n	800b95e <_malloc_r+0x22>
 800ba06:	42a3      	cmp	r3, r4
 800ba08:	6862      	ldr	r2, [r4, #4]
 800ba0a:	d1dd      	bne.n	800b9c8 <_malloc_r+0x8c>
 800ba0c:	f8c8 2000 	str.w	r2, [r8]
 800ba10:	e7ec      	b.n	800b9ec <_malloc_r+0xb0>
 800ba12:	4623      	mov	r3, r4
 800ba14:	6864      	ldr	r4, [r4, #4]
 800ba16:	e7ac      	b.n	800b972 <_malloc_r+0x36>
 800ba18:	4634      	mov	r4, r6
 800ba1a:	6876      	ldr	r6, [r6, #4]
 800ba1c:	e7b4      	b.n	800b988 <_malloc_r+0x4c>
 800ba1e:	4613      	mov	r3, r2
 800ba20:	e7cc      	b.n	800b9bc <_malloc_r+0x80>
 800ba22:	230c      	movs	r3, #12
 800ba24:	603b      	str	r3, [r7, #0]
 800ba26:	4638      	mov	r0, r7
 800ba28:	f000 f820 	bl	800ba6c <__malloc_unlock>
 800ba2c:	e797      	b.n	800b95e <_malloc_r+0x22>
 800ba2e:	6025      	str	r5, [r4, #0]
 800ba30:	e7dc      	b.n	800b9ec <_malloc_r+0xb0>
 800ba32:	605b      	str	r3, [r3, #4]
 800ba34:	deff      	udf	#255	; 0xff
 800ba36:	bf00      	nop
 800ba38:	20013cdc 	.word	0x20013cdc

0800ba3c <__ascii_mbtowc>:
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	b901      	cbnz	r1, 800ba42 <__ascii_mbtowc+0x6>
 800ba40:	a901      	add	r1, sp, #4
 800ba42:	b142      	cbz	r2, 800ba56 <__ascii_mbtowc+0x1a>
 800ba44:	b14b      	cbz	r3, 800ba5a <__ascii_mbtowc+0x1e>
 800ba46:	7813      	ldrb	r3, [r2, #0]
 800ba48:	600b      	str	r3, [r1, #0]
 800ba4a:	7812      	ldrb	r2, [r2, #0]
 800ba4c:	1e10      	subs	r0, r2, #0
 800ba4e:	bf18      	it	ne
 800ba50:	2001      	movne	r0, #1
 800ba52:	b002      	add	sp, #8
 800ba54:	4770      	bx	lr
 800ba56:	4610      	mov	r0, r2
 800ba58:	e7fb      	b.n	800ba52 <__ascii_mbtowc+0x16>
 800ba5a:	f06f 0001 	mvn.w	r0, #1
 800ba5e:	e7f8      	b.n	800ba52 <__ascii_mbtowc+0x16>

0800ba60 <__malloc_lock>:
 800ba60:	4801      	ldr	r0, [pc, #4]	; (800ba68 <__malloc_lock+0x8>)
 800ba62:	f7ff b86c 	b.w	800ab3e <__retarget_lock_acquire_recursive>
 800ba66:	bf00      	nop
 800ba68:	20013cd8 	.word	0x20013cd8

0800ba6c <__malloc_unlock>:
 800ba6c:	4801      	ldr	r0, [pc, #4]	; (800ba74 <__malloc_unlock+0x8>)
 800ba6e:	f7ff b867 	b.w	800ab40 <__retarget_lock_release_recursive>
 800ba72:	bf00      	nop
 800ba74:	20013cd8 	.word	0x20013cd8

0800ba78 <_Balloc>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	69c6      	ldr	r6, [r0, #28]
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	460d      	mov	r5, r1
 800ba80:	b976      	cbnz	r6, 800baa0 <_Balloc+0x28>
 800ba82:	2010      	movs	r0, #16
 800ba84:	f7ff ff32 	bl	800b8ec <malloc>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	61e0      	str	r0, [r4, #28]
 800ba8c:	b920      	cbnz	r0, 800ba98 <_Balloc+0x20>
 800ba8e:	4b18      	ldr	r3, [pc, #96]	; (800baf0 <_Balloc+0x78>)
 800ba90:	4818      	ldr	r0, [pc, #96]	; (800baf4 <_Balloc+0x7c>)
 800ba92:	216b      	movs	r1, #107	; 0x6b
 800ba94:	f000 fc38 	bl	800c308 <__assert_func>
 800ba98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba9c:	6006      	str	r6, [r0, #0]
 800ba9e:	60c6      	str	r6, [r0, #12]
 800baa0:	69e6      	ldr	r6, [r4, #28]
 800baa2:	68f3      	ldr	r3, [r6, #12]
 800baa4:	b183      	cbz	r3, 800bac8 <_Balloc+0x50>
 800baa6:	69e3      	ldr	r3, [r4, #28]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800baae:	b9b8      	cbnz	r0, 800bae0 <_Balloc+0x68>
 800bab0:	2101      	movs	r1, #1
 800bab2:	fa01 f605 	lsl.w	r6, r1, r5
 800bab6:	1d72      	adds	r2, r6, #5
 800bab8:	0092      	lsls	r2, r2, #2
 800baba:	4620      	mov	r0, r4
 800babc:	f000 fc42 	bl	800c344 <_calloc_r>
 800bac0:	b160      	cbz	r0, 800badc <_Balloc+0x64>
 800bac2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bac6:	e00e      	b.n	800bae6 <_Balloc+0x6e>
 800bac8:	2221      	movs	r2, #33	; 0x21
 800baca:	2104      	movs	r1, #4
 800bacc:	4620      	mov	r0, r4
 800bace:	f000 fc39 	bl	800c344 <_calloc_r>
 800bad2:	69e3      	ldr	r3, [r4, #28]
 800bad4:	60f0      	str	r0, [r6, #12]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1e4      	bne.n	800baa6 <_Balloc+0x2e>
 800badc:	2000      	movs	r0, #0
 800bade:	bd70      	pop	{r4, r5, r6, pc}
 800bae0:	6802      	ldr	r2, [r0, #0]
 800bae2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bae6:	2300      	movs	r3, #0
 800bae8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800baec:	e7f7      	b.n	800bade <_Balloc+0x66>
 800baee:	bf00      	nop
 800baf0:	0800cc2e 	.word	0x0800cc2e
 800baf4:	0800ccae 	.word	0x0800ccae

0800baf8 <_Bfree>:
 800baf8:	b570      	push	{r4, r5, r6, lr}
 800bafa:	69c6      	ldr	r6, [r0, #28]
 800bafc:	4605      	mov	r5, r0
 800bafe:	460c      	mov	r4, r1
 800bb00:	b976      	cbnz	r6, 800bb20 <_Bfree+0x28>
 800bb02:	2010      	movs	r0, #16
 800bb04:	f7ff fef2 	bl	800b8ec <malloc>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	61e8      	str	r0, [r5, #28]
 800bb0c:	b920      	cbnz	r0, 800bb18 <_Bfree+0x20>
 800bb0e:	4b09      	ldr	r3, [pc, #36]	; (800bb34 <_Bfree+0x3c>)
 800bb10:	4809      	ldr	r0, [pc, #36]	; (800bb38 <_Bfree+0x40>)
 800bb12:	218f      	movs	r1, #143	; 0x8f
 800bb14:	f000 fbf8 	bl	800c308 <__assert_func>
 800bb18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb1c:	6006      	str	r6, [r0, #0]
 800bb1e:	60c6      	str	r6, [r0, #12]
 800bb20:	b13c      	cbz	r4, 800bb32 <_Bfree+0x3a>
 800bb22:	69eb      	ldr	r3, [r5, #28]
 800bb24:	6862      	ldr	r2, [r4, #4]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb2c:	6021      	str	r1, [r4, #0]
 800bb2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb32:	bd70      	pop	{r4, r5, r6, pc}
 800bb34:	0800cc2e 	.word	0x0800cc2e
 800bb38:	0800ccae 	.word	0x0800ccae

0800bb3c <__multadd>:
 800bb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb40:	690d      	ldr	r5, [r1, #16]
 800bb42:	4607      	mov	r7, r0
 800bb44:	460c      	mov	r4, r1
 800bb46:	461e      	mov	r6, r3
 800bb48:	f101 0c14 	add.w	ip, r1, #20
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	f8dc 3000 	ldr.w	r3, [ip]
 800bb52:	b299      	uxth	r1, r3
 800bb54:	fb02 6101 	mla	r1, r2, r1, r6
 800bb58:	0c1e      	lsrs	r6, r3, #16
 800bb5a:	0c0b      	lsrs	r3, r1, #16
 800bb5c:	fb02 3306 	mla	r3, r2, r6, r3
 800bb60:	b289      	uxth	r1, r1
 800bb62:	3001      	adds	r0, #1
 800bb64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb68:	4285      	cmp	r5, r0
 800bb6a:	f84c 1b04 	str.w	r1, [ip], #4
 800bb6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb72:	dcec      	bgt.n	800bb4e <__multadd+0x12>
 800bb74:	b30e      	cbz	r6, 800bbba <__multadd+0x7e>
 800bb76:	68a3      	ldr	r3, [r4, #8]
 800bb78:	42ab      	cmp	r3, r5
 800bb7a:	dc19      	bgt.n	800bbb0 <__multadd+0x74>
 800bb7c:	6861      	ldr	r1, [r4, #4]
 800bb7e:	4638      	mov	r0, r7
 800bb80:	3101      	adds	r1, #1
 800bb82:	f7ff ff79 	bl	800ba78 <_Balloc>
 800bb86:	4680      	mov	r8, r0
 800bb88:	b928      	cbnz	r0, 800bb96 <__multadd+0x5a>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	4b0c      	ldr	r3, [pc, #48]	; (800bbc0 <__multadd+0x84>)
 800bb8e:	480d      	ldr	r0, [pc, #52]	; (800bbc4 <__multadd+0x88>)
 800bb90:	21ba      	movs	r1, #186	; 0xba
 800bb92:	f000 fbb9 	bl	800c308 <__assert_func>
 800bb96:	6922      	ldr	r2, [r4, #16]
 800bb98:	3202      	adds	r2, #2
 800bb9a:	f104 010c 	add.w	r1, r4, #12
 800bb9e:	0092      	lsls	r2, r2, #2
 800bba0:	300c      	adds	r0, #12
 800bba2:	f7fe ffce 	bl	800ab42 <memcpy>
 800bba6:	4621      	mov	r1, r4
 800bba8:	4638      	mov	r0, r7
 800bbaa:	f7ff ffa5 	bl	800baf8 <_Bfree>
 800bbae:	4644      	mov	r4, r8
 800bbb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bbb4:	3501      	adds	r5, #1
 800bbb6:	615e      	str	r6, [r3, #20]
 800bbb8:	6125      	str	r5, [r4, #16]
 800bbba:	4620      	mov	r0, r4
 800bbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc0:	0800cc9d 	.word	0x0800cc9d
 800bbc4:	0800ccae 	.word	0x0800ccae

0800bbc8 <__hi0bits>:
 800bbc8:	0c03      	lsrs	r3, r0, #16
 800bbca:	041b      	lsls	r3, r3, #16
 800bbcc:	b9d3      	cbnz	r3, 800bc04 <__hi0bits+0x3c>
 800bbce:	0400      	lsls	r0, r0, #16
 800bbd0:	2310      	movs	r3, #16
 800bbd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbd6:	bf04      	itt	eq
 800bbd8:	0200      	lsleq	r0, r0, #8
 800bbda:	3308      	addeq	r3, #8
 800bbdc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbe0:	bf04      	itt	eq
 800bbe2:	0100      	lsleq	r0, r0, #4
 800bbe4:	3304      	addeq	r3, #4
 800bbe6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbea:	bf04      	itt	eq
 800bbec:	0080      	lsleq	r0, r0, #2
 800bbee:	3302      	addeq	r3, #2
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	db05      	blt.n	800bc00 <__hi0bits+0x38>
 800bbf4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbf8:	f103 0301 	add.w	r3, r3, #1
 800bbfc:	bf08      	it	eq
 800bbfe:	2320      	moveq	r3, #32
 800bc00:	4618      	mov	r0, r3
 800bc02:	4770      	bx	lr
 800bc04:	2300      	movs	r3, #0
 800bc06:	e7e4      	b.n	800bbd2 <__hi0bits+0xa>

0800bc08 <__lo0bits>:
 800bc08:	6803      	ldr	r3, [r0, #0]
 800bc0a:	f013 0207 	ands.w	r2, r3, #7
 800bc0e:	d00c      	beq.n	800bc2a <__lo0bits+0x22>
 800bc10:	07d9      	lsls	r1, r3, #31
 800bc12:	d422      	bmi.n	800bc5a <__lo0bits+0x52>
 800bc14:	079a      	lsls	r2, r3, #30
 800bc16:	bf49      	itett	mi
 800bc18:	085b      	lsrmi	r3, r3, #1
 800bc1a:	089b      	lsrpl	r3, r3, #2
 800bc1c:	6003      	strmi	r3, [r0, #0]
 800bc1e:	2201      	movmi	r2, #1
 800bc20:	bf5c      	itt	pl
 800bc22:	6003      	strpl	r3, [r0, #0]
 800bc24:	2202      	movpl	r2, #2
 800bc26:	4610      	mov	r0, r2
 800bc28:	4770      	bx	lr
 800bc2a:	b299      	uxth	r1, r3
 800bc2c:	b909      	cbnz	r1, 800bc32 <__lo0bits+0x2a>
 800bc2e:	0c1b      	lsrs	r3, r3, #16
 800bc30:	2210      	movs	r2, #16
 800bc32:	b2d9      	uxtb	r1, r3
 800bc34:	b909      	cbnz	r1, 800bc3a <__lo0bits+0x32>
 800bc36:	3208      	adds	r2, #8
 800bc38:	0a1b      	lsrs	r3, r3, #8
 800bc3a:	0719      	lsls	r1, r3, #28
 800bc3c:	bf04      	itt	eq
 800bc3e:	091b      	lsreq	r3, r3, #4
 800bc40:	3204      	addeq	r2, #4
 800bc42:	0799      	lsls	r1, r3, #30
 800bc44:	bf04      	itt	eq
 800bc46:	089b      	lsreq	r3, r3, #2
 800bc48:	3202      	addeq	r2, #2
 800bc4a:	07d9      	lsls	r1, r3, #31
 800bc4c:	d403      	bmi.n	800bc56 <__lo0bits+0x4e>
 800bc4e:	085b      	lsrs	r3, r3, #1
 800bc50:	f102 0201 	add.w	r2, r2, #1
 800bc54:	d003      	beq.n	800bc5e <__lo0bits+0x56>
 800bc56:	6003      	str	r3, [r0, #0]
 800bc58:	e7e5      	b.n	800bc26 <__lo0bits+0x1e>
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	e7e3      	b.n	800bc26 <__lo0bits+0x1e>
 800bc5e:	2220      	movs	r2, #32
 800bc60:	e7e1      	b.n	800bc26 <__lo0bits+0x1e>
	...

0800bc64 <__i2b>:
 800bc64:	b510      	push	{r4, lr}
 800bc66:	460c      	mov	r4, r1
 800bc68:	2101      	movs	r1, #1
 800bc6a:	f7ff ff05 	bl	800ba78 <_Balloc>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	b928      	cbnz	r0, 800bc7e <__i2b+0x1a>
 800bc72:	4b05      	ldr	r3, [pc, #20]	; (800bc88 <__i2b+0x24>)
 800bc74:	4805      	ldr	r0, [pc, #20]	; (800bc8c <__i2b+0x28>)
 800bc76:	f240 1145 	movw	r1, #325	; 0x145
 800bc7a:	f000 fb45 	bl	800c308 <__assert_func>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	6144      	str	r4, [r0, #20]
 800bc82:	6103      	str	r3, [r0, #16]
 800bc84:	bd10      	pop	{r4, pc}
 800bc86:	bf00      	nop
 800bc88:	0800cc9d 	.word	0x0800cc9d
 800bc8c:	0800ccae 	.word	0x0800ccae

0800bc90 <__multiply>:
 800bc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc94:	4691      	mov	r9, r2
 800bc96:	690a      	ldr	r2, [r1, #16]
 800bc98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	bfb8      	it	lt
 800bca0:	460b      	movlt	r3, r1
 800bca2:	460c      	mov	r4, r1
 800bca4:	bfbc      	itt	lt
 800bca6:	464c      	movlt	r4, r9
 800bca8:	4699      	movlt	r9, r3
 800bcaa:	6927      	ldr	r7, [r4, #16]
 800bcac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bcb0:	68a3      	ldr	r3, [r4, #8]
 800bcb2:	6861      	ldr	r1, [r4, #4]
 800bcb4:	eb07 060a 	add.w	r6, r7, sl
 800bcb8:	42b3      	cmp	r3, r6
 800bcba:	b085      	sub	sp, #20
 800bcbc:	bfb8      	it	lt
 800bcbe:	3101      	addlt	r1, #1
 800bcc0:	f7ff feda 	bl	800ba78 <_Balloc>
 800bcc4:	b930      	cbnz	r0, 800bcd4 <__multiply+0x44>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	4b44      	ldr	r3, [pc, #272]	; (800bddc <__multiply+0x14c>)
 800bcca:	4845      	ldr	r0, [pc, #276]	; (800bde0 <__multiply+0x150>)
 800bccc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bcd0:	f000 fb1a 	bl	800c308 <__assert_func>
 800bcd4:	f100 0514 	add.w	r5, r0, #20
 800bcd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bcdc:	462b      	mov	r3, r5
 800bcde:	2200      	movs	r2, #0
 800bce0:	4543      	cmp	r3, r8
 800bce2:	d321      	bcc.n	800bd28 <__multiply+0x98>
 800bce4:	f104 0314 	add.w	r3, r4, #20
 800bce8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bcec:	f109 0314 	add.w	r3, r9, #20
 800bcf0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bcf4:	9202      	str	r2, [sp, #8]
 800bcf6:	1b3a      	subs	r2, r7, r4
 800bcf8:	3a15      	subs	r2, #21
 800bcfa:	f022 0203 	bic.w	r2, r2, #3
 800bcfe:	3204      	adds	r2, #4
 800bd00:	f104 0115 	add.w	r1, r4, #21
 800bd04:	428f      	cmp	r7, r1
 800bd06:	bf38      	it	cc
 800bd08:	2204      	movcc	r2, #4
 800bd0a:	9201      	str	r2, [sp, #4]
 800bd0c:	9a02      	ldr	r2, [sp, #8]
 800bd0e:	9303      	str	r3, [sp, #12]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d80c      	bhi.n	800bd2e <__multiply+0x9e>
 800bd14:	2e00      	cmp	r6, #0
 800bd16:	dd03      	ble.n	800bd20 <__multiply+0x90>
 800bd18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d05b      	beq.n	800bdd8 <__multiply+0x148>
 800bd20:	6106      	str	r6, [r0, #16]
 800bd22:	b005      	add	sp, #20
 800bd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd28:	f843 2b04 	str.w	r2, [r3], #4
 800bd2c:	e7d8      	b.n	800bce0 <__multiply+0x50>
 800bd2e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd32:	f1ba 0f00 	cmp.w	sl, #0
 800bd36:	d024      	beq.n	800bd82 <__multiply+0xf2>
 800bd38:	f104 0e14 	add.w	lr, r4, #20
 800bd3c:	46a9      	mov	r9, r5
 800bd3e:	f04f 0c00 	mov.w	ip, #0
 800bd42:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd46:	f8d9 1000 	ldr.w	r1, [r9]
 800bd4a:	fa1f fb82 	uxth.w	fp, r2
 800bd4e:	b289      	uxth	r1, r1
 800bd50:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd58:	f8d9 2000 	ldr.w	r2, [r9]
 800bd5c:	4461      	add	r1, ip
 800bd5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd62:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd6a:	b289      	uxth	r1, r1
 800bd6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd70:	4577      	cmp	r7, lr
 800bd72:	f849 1b04 	str.w	r1, [r9], #4
 800bd76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd7a:	d8e2      	bhi.n	800bd42 <__multiply+0xb2>
 800bd7c:	9a01      	ldr	r2, [sp, #4]
 800bd7e:	f845 c002 	str.w	ip, [r5, r2]
 800bd82:	9a03      	ldr	r2, [sp, #12]
 800bd84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd88:	3304      	adds	r3, #4
 800bd8a:	f1b9 0f00 	cmp.w	r9, #0
 800bd8e:	d021      	beq.n	800bdd4 <__multiply+0x144>
 800bd90:	6829      	ldr	r1, [r5, #0]
 800bd92:	f104 0c14 	add.w	ip, r4, #20
 800bd96:	46ae      	mov	lr, r5
 800bd98:	f04f 0a00 	mov.w	sl, #0
 800bd9c:	f8bc b000 	ldrh.w	fp, [ip]
 800bda0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bda4:	fb09 220b 	mla	r2, r9, fp, r2
 800bda8:	4452      	add	r2, sl
 800bdaa:	b289      	uxth	r1, r1
 800bdac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bdb0:	f84e 1b04 	str.w	r1, [lr], #4
 800bdb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bdb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdbc:	f8be 1000 	ldrh.w	r1, [lr]
 800bdc0:	fb09 110a 	mla	r1, r9, sl, r1
 800bdc4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bdc8:	4567      	cmp	r7, ip
 800bdca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdce:	d8e5      	bhi.n	800bd9c <__multiply+0x10c>
 800bdd0:	9a01      	ldr	r2, [sp, #4]
 800bdd2:	50a9      	str	r1, [r5, r2]
 800bdd4:	3504      	adds	r5, #4
 800bdd6:	e799      	b.n	800bd0c <__multiply+0x7c>
 800bdd8:	3e01      	subs	r6, #1
 800bdda:	e79b      	b.n	800bd14 <__multiply+0x84>
 800bddc:	0800cc9d 	.word	0x0800cc9d
 800bde0:	0800ccae 	.word	0x0800ccae

0800bde4 <__pow5mult>:
 800bde4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bde8:	4615      	mov	r5, r2
 800bdea:	f012 0203 	ands.w	r2, r2, #3
 800bdee:	4606      	mov	r6, r0
 800bdf0:	460f      	mov	r7, r1
 800bdf2:	d007      	beq.n	800be04 <__pow5mult+0x20>
 800bdf4:	4c25      	ldr	r4, [pc, #148]	; (800be8c <__pow5mult+0xa8>)
 800bdf6:	3a01      	subs	r2, #1
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdfe:	f7ff fe9d 	bl	800bb3c <__multadd>
 800be02:	4607      	mov	r7, r0
 800be04:	10ad      	asrs	r5, r5, #2
 800be06:	d03d      	beq.n	800be84 <__pow5mult+0xa0>
 800be08:	69f4      	ldr	r4, [r6, #28]
 800be0a:	b97c      	cbnz	r4, 800be2c <__pow5mult+0x48>
 800be0c:	2010      	movs	r0, #16
 800be0e:	f7ff fd6d 	bl	800b8ec <malloc>
 800be12:	4602      	mov	r2, r0
 800be14:	61f0      	str	r0, [r6, #28]
 800be16:	b928      	cbnz	r0, 800be24 <__pow5mult+0x40>
 800be18:	4b1d      	ldr	r3, [pc, #116]	; (800be90 <__pow5mult+0xac>)
 800be1a:	481e      	ldr	r0, [pc, #120]	; (800be94 <__pow5mult+0xb0>)
 800be1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800be20:	f000 fa72 	bl	800c308 <__assert_func>
 800be24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be28:	6004      	str	r4, [r0, #0]
 800be2a:	60c4      	str	r4, [r0, #12]
 800be2c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800be30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be34:	b94c      	cbnz	r4, 800be4a <__pow5mult+0x66>
 800be36:	f240 2171 	movw	r1, #625	; 0x271
 800be3a:	4630      	mov	r0, r6
 800be3c:	f7ff ff12 	bl	800bc64 <__i2b>
 800be40:	2300      	movs	r3, #0
 800be42:	f8c8 0008 	str.w	r0, [r8, #8]
 800be46:	4604      	mov	r4, r0
 800be48:	6003      	str	r3, [r0, #0]
 800be4a:	f04f 0900 	mov.w	r9, #0
 800be4e:	07eb      	lsls	r3, r5, #31
 800be50:	d50a      	bpl.n	800be68 <__pow5mult+0x84>
 800be52:	4639      	mov	r1, r7
 800be54:	4622      	mov	r2, r4
 800be56:	4630      	mov	r0, r6
 800be58:	f7ff ff1a 	bl	800bc90 <__multiply>
 800be5c:	4639      	mov	r1, r7
 800be5e:	4680      	mov	r8, r0
 800be60:	4630      	mov	r0, r6
 800be62:	f7ff fe49 	bl	800baf8 <_Bfree>
 800be66:	4647      	mov	r7, r8
 800be68:	106d      	asrs	r5, r5, #1
 800be6a:	d00b      	beq.n	800be84 <__pow5mult+0xa0>
 800be6c:	6820      	ldr	r0, [r4, #0]
 800be6e:	b938      	cbnz	r0, 800be80 <__pow5mult+0x9c>
 800be70:	4622      	mov	r2, r4
 800be72:	4621      	mov	r1, r4
 800be74:	4630      	mov	r0, r6
 800be76:	f7ff ff0b 	bl	800bc90 <__multiply>
 800be7a:	6020      	str	r0, [r4, #0]
 800be7c:	f8c0 9000 	str.w	r9, [r0]
 800be80:	4604      	mov	r4, r0
 800be82:	e7e4      	b.n	800be4e <__pow5mult+0x6a>
 800be84:	4638      	mov	r0, r7
 800be86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be8a:	bf00      	nop
 800be8c:	0800cdf8 	.word	0x0800cdf8
 800be90:	0800cc2e 	.word	0x0800cc2e
 800be94:	0800ccae 	.word	0x0800ccae

0800be98 <__lshift>:
 800be98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be9c:	460c      	mov	r4, r1
 800be9e:	6849      	ldr	r1, [r1, #4]
 800bea0:	6923      	ldr	r3, [r4, #16]
 800bea2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bea6:	68a3      	ldr	r3, [r4, #8]
 800bea8:	4607      	mov	r7, r0
 800beaa:	4691      	mov	r9, r2
 800beac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800beb0:	f108 0601 	add.w	r6, r8, #1
 800beb4:	42b3      	cmp	r3, r6
 800beb6:	db0b      	blt.n	800bed0 <__lshift+0x38>
 800beb8:	4638      	mov	r0, r7
 800beba:	f7ff fddd 	bl	800ba78 <_Balloc>
 800bebe:	4605      	mov	r5, r0
 800bec0:	b948      	cbnz	r0, 800bed6 <__lshift+0x3e>
 800bec2:	4602      	mov	r2, r0
 800bec4:	4b28      	ldr	r3, [pc, #160]	; (800bf68 <__lshift+0xd0>)
 800bec6:	4829      	ldr	r0, [pc, #164]	; (800bf6c <__lshift+0xd4>)
 800bec8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800becc:	f000 fa1c 	bl	800c308 <__assert_func>
 800bed0:	3101      	adds	r1, #1
 800bed2:	005b      	lsls	r3, r3, #1
 800bed4:	e7ee      	b.n	800beb4 <__lshift+0x1c>
 800bed6:	2300      	movs	r3, #0
 800bed8:	f100 0114 	add.w	r1, r0, #20
 800bedc:	f100 0210 	add.w	r2, r0, #16
 800bee0:	4618      	mov	r0, r3
 800bee2:	4553      	cmp	r3, sl
 800bee4:	db33      	blt.n	800bf4e <__lshift+0xb6>
 800bee6:	6920      	ldr	r0, [r4, #16]
 800bee8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800beec:	f104 0314 	add.w	r3, r4, #20
 800bef0:	f019 091f 	ands.w	r9, r9, #31
 800bef4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bef8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800befc:	d02b      	beq.n	800bf56 <__lshift+0xbe>
 800befe:	f1c9 0e20 	rsb	lr, r9, #32
 800bf02:	468a      	mov	sl, r1
 800bf04:	2200      	movs	r2, #0
 800bf06:	6818      	ldr	r0, [r3, #0]
 800bf08:	fa00 f009 	lsl.w	r0, r0, r9
 800bf0c:	4310      	orrs	r0, r2
 800bf0e:	f84a 0b04 	str.w	r0, [sl], #4
 800bf12:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf16:	459c      	cmp	ip, r3
 800bf18:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf1c:	d8f3      	bhi.n	800bf06 <__lshift+0x6e>
 800bf1e:	ebac 0304 	sub.w	r3, ip, r4
 800bf22:	3b15      	subs	r3, #21
 800bf24:	f023 0303 	bic.w	r3, r3, #3
 800bf28:	3304      	adds	r3, #4
 800bf2a:	f104 0015 	add.w	r0, r4, #21
 800bf2e:	4584      	cmp	ip, r0
 800bf30:	bf38      	it	cc
 800bf32:	2304      	movcc	r3, #4
 800bf34:	50ca      	str	r2, [r1, r3]
 800bf36:	b10a      	cbz	r2, 800bf3c <__lshift+0xa4>
 800bf38:	f108 0602 	add.w	r6, r8, #2
 800bf3c:	3e01      	subs	r6, #1
 800bf3e:	4638      	mov	r0, r7
 800bf40:	612e      	str	r6, [r5, #16]
 800bf42:	4621      	mov	r1, r4
 800bf44:	f7ff fdd8 	bl	800baf8 <_Bfree>
 800bf48:	4628      	mov	r0, r5
 800bf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf52:	3301      	adds	r3, #1
 800bf54:	e7c5      	b.n	800bee2 <__lshift+0x4a>
 800bf56:	3904      	subs	r1, #4
 800bf58:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf60:	459c      	cmp	ip, r3
 800bf62:	d8f9      	bhi.n	800bf58 <__lshift+0xc0>
 800bf64:	e7ea      	b.n	800bf3c <__lshift+0xa4>
 800bf66:	bf00      	nop
 800bf68:	0800cc9d 	.word	0x0800cc9d
 800bf6c:	0800ccae 	.word	0x0800ccae

0800bf70 <__mcmp>:
 800bf70:	b530      	push	{r4, r5, lr}
 800bf72:	6902      	ldr	r2, [r0, #16]
 800bf74:	690c      	ldr	r4, [r1, #16]
 800bf76:	1b12      	subs	r2, r2, r4
 800bf78:	d10e      	bne.n	800bf98 <__mcmp+0x28>
 800bf7a:	f100 0314 	add.w	r3, r0, #20
 800bf7e:	3114      	adds	r1, #20
 800bf80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf90:	42a5      	cmp	r5, r4
 800bf92:	d003      	beq.n	800bf9c <__mcmp+0x2c>
 800bf94:	d305      	bcc.n	800bfa2 <__mcmp+0x32>
 800bf96:	2201      	movs	r2, #1
 800bf98:	4610      	mov	r0, r2
 800bf9a:	bd30      	pop	{r4, r5, pc}
 800bf9c:	4283      	cmp	r3, r0
 800bf9e:	d3f3      	bcc.n	800bf88 <__mcmp+0x18>
 800bfa0:	e7fa      	b.n	800bf98 <__mcmp+0x28>
 800bfa2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa6:	e7f7      	b.n	800bf98 <__mcmp+0x28>

0800bfa8 <__mdiff>:
 800bfa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfac:	460c      	mov	r4, r1
 800bfae:	4606      	mov	r6, r0
 800bfb0:	4611      	mov	r1, r2
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	4690      	mov	r8, r2
 800bfb6:	f7ff ffdb 	bl	800bf70 <__mcmp>
 800bfba:	1e05      	subs	r5, r0, #0
 800bfbc:	d110      	bne.n	800bfe0 <__mdiff+0x38>
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	f7ff fd59 	bl	800ba78 <_Balloc>
 800bfc6:	b930      	cbnz	r0, 800bfd6 <__mdiff+0x2e>
 800bfc8:	4b3a      	ldr	r3, [pc, #232]	; (800c0b4 <__mdiff+0x10c>)
 800bfca:	4602      	mov	r2, r0
 800bfcc:	f240 2137 	movw	r1, #567	; 0x237
 800bfd0:	4839      	ldr	r0, [pc, #228]	; (800c0b8 <__mdiff+0x110>)
 800bfd2:	f000 f999 	bl	800c308 <__assert_func>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe0:	bfa4      	itt	ge
 800bfe2:	4643      	movge	r3, r8
 800bfe4:	46a0      	movge	r8, r4
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bfec:	bfa6      	itte	ge
 800bfee:	461c      	movge	r4, r3
 800bff0:	2500      	movge	r5, #0
 800bff2:	2501      	movlt	r5, #1
 800bff4:	f7ff fd40 	bl	800ba78 <_Balloc>
 800bff8:	b920      	cbnz	r0, 800c004 <__mdiff+0x5c>
 800bffa:	4b2e      	ldr	r3, [pc, #184]	; (800c0b4 <__mdiff+0x10c>)
 800bffc:	4602      	mov	r2, r0
 800bffe:	f240 2145 	movw	r1, #581	; 0x245
 800c002:	e7e5      	b.n	800bfd0 <__mdiff+0x28>
 800c004:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c008:	6926      	ldr	r6, [r4, #16]
 800c00a:	60c5      	str	r5, [r0, #12]
 800c00c:	f104 0914 	add.w	r9, r4, #20
 800c010:	f108 0514 	add.w	r5, r8, #20
 800c014:	f100 0e14 	add.w	lr, r0, #20
 800c018:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c01c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c020:	f108 0210 	add.w	r2, r8, #16
 800c024:	46f2      	mov	sl, lr
 800c026:	2100      	movs	r1, #0
 800c028:	f859 3b04 	ldr.w	r3, [r9], #4
 800c02c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c030:	fa11 f88b 	uxtah	r8, r1, fp
 800c034:	b299      	uxth	r1, r3
 800c036:	0c1b      	lsrs	r3, r3, #16
 800c038:	eba8 0801 	sub.w	r8, r8, r1
 800c03c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c040:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c044:	fa1f f888 	uxth.w	r8, r8
 800c048:	1419      	asrs	r1, r3, #16
 800c04a:	454e      	cmp	r6, r9
 800c04c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c050:	f84a 3b04 	str.w	r3, [sl], #4
 800c054:	d8e8      	bhi.n	800c028 <__mdiff+0x80>
 800c056:	1b33      	subs	r3, r6, r4
 800c058:	3b15      	subs	r3, #21
 800c05a:	f023 0303 	bic.w	r3, r3, #3
 800c05e:	3304      	adds	r3, #4
 800c060:	3415      	adds	r4, #21
 800c062:	42a6      	cmp	r6, r4
 800c064:	bf38      	it	cc
 800c066:	2304      	movcc	r3, #4
 800c068:	441d      	add	r5, r3
 800c06a:	4473      	add	r3, lr
 800c06c:	469e      	mov	lr, r3
 800c06e:	462e      	mov	r6, r5
 800c070:	4566      	cmp	r6, ip
 800c072:	d30e      	bcc.n	800c092 <__mdiff+0xea>
 800c074:	f10c 0203 	add.w	r2, ip, #3
 800c078:	1b52      	subs	r2, r2, r5
 800c07a:	f022 0203 	bic.w	r2, r2, #3
 800c07e:	3d03      	subs	r5, #3
 800c080:	45ac      	cmp	ip, r5
 800c082:	bf38      	it	cc
 800c084:	2200      	movcc	r2, #0
 800c086:	4413      	add	r3, r2
 800c088:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c08c:	b17a      	cbz	r2, 800c0ae <__mdiff+0x106>
 800c08e:	6107      	str	r7, [r0, #16]
 800c090:	e7a4      	b.n	800bfdc <__mdiff+0x34>
 800c092:	f856 8b04 	ldr.w	r8, [r6], #4
 800c096:	fa11 f288 	uxtah	r2, r1, r8
 800c09a:	1414      	asrs	r4, r2, #16
 800c09c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0a0:	b292      	uxth	r2, r2
 800c0a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c0a6:	f84e 2b04 	str.w	r2, [lr], #4
 800c0aa:	1421      	asrs	r1, r4, #16
 800c0ac:	e7e0      	b.n	800c070 <__mdiff+0xc8>
 800c0ae:	3f01      	subs	r7, #1
 800c0b0:	e7ea      	b.n	800c088 <__mdiff+0xe0>
 800c0b2:	bf00      	nop
 800c0b4:	0800cc9d 	.word	0x0800cc9d
 800c0b8:	0800ccae 	.word	0x0800ccae

0800c0bc <__d2b>:
 800c0bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0c0:	460f      	mov	r7, r1
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	ec59 8b10 	vmov	r8, r9, d0
 800c0c8:	4616      	mov	r6, r2
 800c0ca:	f7ff fcd5 	bl	800ba78 <_Balloc>
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	b930      	cbnz	r0, 800c0e0 <__d2b+0x24>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	4b24      	ldr	r3, [pc, #144]	; (800c168 <__d2b+0xac>)
 800c0d6:	4825      	ldr	r0, [pc, #148]	; (800c16c <__d2b+0xb0>)
 800c0d8:	f240 310f 	movw	r1, #783	; 0x30f
 800c0dc:	f000 f914 	bl	800c308 <__assert_func>
 800c0e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c0e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0e8:	bb2d      	cbnz	r5, 800c136 <__d2b+0x7a>
 800c0ea:	9301      	str	r3, [sp, #4]
 800c0ec:	f1b8 0300 	subs.w	r3, r8, #0
 800c0f0:	d026      	beq.n	800c140 <__d2b+0x84>
 800c0f2:	4668      	mov	r0, sp
 800c0f4:	9300      	str	r3, [sp, #0]
 800c0f6:	f7ff fd87 	bl	800bc08 <__lo0bits>
 800c0fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c0fe:	b1e8      	cbz	r0, 800c13c <__d2b+0x80>
 800c100:	f1c0 0320 	rsb	r3, r0, #32
 800c104:	fa02 f303 	lsl.w	r3, r2, r3
 800c108:	430b      	orrs	r3, r1
 800c10a:	40c2      	lsrs	r2, r0
 800c10c:	6163      	str	r3, [r4, #20]
 800c10e:	9201      	str	r2, [sp, #4]
 800c110:	9b01      	ldr	r3, [sp, #4]
 800c112:	61a3      	str	r3, [r4, #24]
 800c114:	2b00      	cmp	r3, #0
 800c116:	bf14      	ite	ne
 800c118:	2202      	movne	r2, #2
 800c11a:	2201      	moveq	r2, #1
 800c11c:	6122      	str	r2, [r4, #16]
 800c11e:	b1bd      	cbz	r5, 800c150 <__d2b+0x94>
 800c120:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c124:	4405      	add	r5, r0
 800c126:	603d      	str	r5, [r7, #0]
 800c128:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c12c:	6030      	str	r0, [r6, #0]
 800c12e:	4620      	mov	r0, r4
 800c130:	b003      	add	sp, #12
 800c132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c13a:	e7d6      	b.n	800c0ea <__d2b+0x2e>
 800c13c:	6161      	str	r1, [r4, #20]
 800c13e:	e7e7      	b.n	800c110 <__d2b+0x54>
 800c140:	a801      	add	r0, sp, #4
 800c142:	f7ff fd61 	bl	800bc08 <__lo0bits>
 800c146:	9b01      	ldr	r3, [sp, #4]
 800c148:	6163      	str	r3, [r4, #20]
 800c14a:	3020      	adds	r0, #32
 800c14c:	2201      	movs	r2, #1
 800c14e:	e7e5      	b.n	800c11c <__d2b+0x60>
 800c150:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c154:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c158:	6038      	str	r0, [r7, #0]
 800c15a:	6918      	ldr	r0, [r3, #16]
 800c15c:	f7ff fd34 	bl	800bbc8 <__hi0bits>
 800c160:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c164:	e7e2      	b.n	800c12c <__d2b+0x70>
 800c166:	bf00      	nop
 800c168:	0800cc9d 	.word	0x0800cc9d
 800c16c:	0800ccae 	.word	0x0800ccae

0800c170 <__ascii_wctomb>:
 800c170:	b149      	cbz	r1, 800c186 <__ascii_wctomb+0x16>
 800c172:	2aff      	cmp	r2, #255	; 0xff
 800c174:	bf85      	ittet	hi
 800c176:	238a      	movhi	r3, #138	; 0x8a
 800c178:	6003      	strhi	r3, [r0, #0]
 800c17a:	700a      	strbls	r2, [r1, #0]
 800c17c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c180:	bf98      	it	ls
 800c182:	2001      	movls	r0, #1
 800c184:	4770      	bx	lr
 800c186:	4608      	mov	r0, r1
 800c188:	4770      	bx	lr
	...

0800c18c <__sflush_r>:
 800c18c:	898a      	ldrh	r2, [r1, #12]
 800c18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c192:	4605      	mov	r5, r0
 800c194:	0710      	lsls	r0, r2, #28
 800c196:	460c      	mov	r4, r1
 800c198:	d458      	bmi.n	800c24c <__sflush_r+0xc0>
 800c19a:	684b      	ldr	r3, [r1, #4]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	dc05      	bgt.n	800c1ac <__sflush_r+0x20>
 800c1a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	dc02      	bgt.n	800c1ac <__sflush_r+0x20>
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1ae:	2e00      	cmp	r6, #0
 800c1b0:	d0f9      	beq.n	800c1a6 <__sflush_r+0x1a>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1b8:	682f      	ldr	r7, [r5, #0]
 800c1ba:	6a21      	ldr	r1, [r4, #32]
 800c1bc:	602b      	str	r3, [r5, #0]
 800c1be:	d032      	beq.n	800c226 <__sflush_r+0x9a>
 800c1c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	075a      	lsls	r2, r3, #29
 800c1c6:	d505      	bpl.n	800c1d4 <__sflush_r+0x48>
 800c1c8:	6863      	ldr	r3, [r4, #4]
 800c1ca:	1ac0      	subs	r0, r0, r3
 800c1cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1ce:	b10b      	cbz	r3, 800c1d4 <__sflush_r+0x48>
 800c1d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1d2:	1ac0      	subs	r0, r0, r3
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1da:	6a21      	ldr	r1, [r4, #32]
 800c1dc:	4628      	mov	r0, r5
 800c1de:	47b0      	blx	r6
 800c1e0:	1c43      	adds	r3, r0, #1
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	d106      	bne.n	800c1f4 <__sflush_r+0x68>
 800c1e6:	6829      	ldr	r1, [r5, #0]
 800c1e8:	291d      	cmp	r1, #29
 800c1ea:	d82b      	bhi.n	800c244 <__sflush_r+0xb8>
 800c1ec:	4a29      	ldr	r2, [pc, #164]	; (800c294 <__sflush_r+0x108>)
 800c1ee:	410a      	asrs	r2, r1
 800c1f0:	07d6      	lsls	r6, r2, #31
 800c1f2:	d427      	bmi.n	800c244 <__sflush_r+0xb8>
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	6062      	str	r2, [r4, #4]
 800c1f8:	04d9      	lsls	r1, r3, #19
 800c1fa:	6922      	ldr	r2, [r4, #16]
 800c1fc:	6022      	str	r2, [r4, #0]
 800c1fe:	d504      	bpl.n	800c20a <__sflush_r+0x7e>
 800c200:	1c42      	adds	r2, r0, #1
 800c202:	d101      	bne.n	800c208 <__sflush_r+0x7c>
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	b903      	cbnz	r3, 800c20a <__sflush_r+0x7e>
 800c208:	6560      	str	r0, [r4, #84]	; 0x54
 800c20a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c20c:	602f      	str	r7, [r5, #0]
 800c20e:	2900      	cmp	r1, #0
 800c210:	d0c9      	beq.n	800c1a6 <__sflush_r+0x1a>
 800c212:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c216:	4299      	cmp	r1, r3
 800c218:	d002      	beq.n	800c220 <__sflush_r+0x94>
 800c21a:	4628      	mov	r0, r5
 800c21c:	f7ff fb1a 	bl	800b854 <_free_r>
 800c220:	2000      	movs	r0, #0
 800c222:	6360      	str	r0, [r4, #52]	; 0x34
 800c224:	e7c0      	b.n	800c1a8 <__sflush_r+0x1c>
 800c226:	2301      	movs	r3, #1
 800c228:	4628      	mov	r0, r5
 800c22a:	47b0      	blx	r6
 800c22c:	1c41      	adds	r1, r0, #1
 800c22e:	d1c8      	bne.n	800c1c2 <__sflush_r+0x36>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d0c5      	beq.n	800c1c2 <__sflush_r+0x36>
 800c236:	2b1d      	cmp	r3, #29
 800c238:	d001      	beq.n	800c23e <__sflush_r+0xb2>
 800c23a:	2b16      	cmp	r3, #22
 800c23c:	d101      	bne.n	800c242 <__sflush_r+0xb6>
 800c23e:	602f      	str	r7, [r5, #0]
 800c240:	e7b1      	b.n	800c1a6 <__sflush_r+0x1a>
 800c242:	89a3      	ldrh	r3, [r4, #12]
 800c244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c248:	81a3      	strh	r3, [r4, #12]
 800c24a:	e7ad      	b.n	800c1a8 <__sflush_r+0x1c>
 800c24c:	690f      	ldr	r7, [r1, #16]
 800c24e:	2f00      	cmp	r7, #0
 800c250:	d0a9      	beq.n	800c1a6 <__sflush_r+0x1a>
 800c252:	0793      	lsls	r3, r2, #30
 800c254:	680e      	ldr	r6, [r1, #0]
 800c256:	bf08      	it	eq
 800c258:	694b      	ldreq	r3, [r1, #20]
 800c25a:	600f      	str	r7, [r1, #0]
 800c25c:	bf18      	it	ne
 800c25e:	2300      	movne	r3, #0
 800c260:	eba6 0807 	sub.w	r8, r6, r7
 800c264:	608b      	str	r3, [r1, #8]
 800c266:	f1b8 0f00 	cmp.w	r8, #0
 800c26a:	dd9c      	ble.n	800c1a6 <__sflush_r+0x1a>
 800c26c:	6a21      	ldr	r1, [r4, #32]
 800c26e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c270:	4643      	mov	r3, r8
 800c272:	463a      	mov	r2, r7
 800c274:	4628      	mov	r0, r5
 800c276:	47b0      	blx	r6
 800c278:	2800      	cmp	r0, #0
 800c27a:	dc06      	bgt.n	800c28a <__sflush_r+0xfe>
 800c27c:	89a3      	ldrh	r3, [r4, #12]
 800c27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c282:	81a3      	strh	r3, [r4, #12]
 800c284:	f04f 30ff 	mov.w	r0, #4294967295
 800c288:	e78e      	b.n	800c1a8 <__sflush_r+0x1c>
 800c28a:	4407      	add	r7, r0
 800c28c:	eba8 0800 	sub.w	r8, r8, r0
 800c290:	e7e9      	b.n	800c266 <__sflush_r+0xda>
 800c292:	bf00      	nop
 800c294:	dfbffffe 	.word	0xdfbffffe

0800c298 <_fflush_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	690b      	ldr	r3, [r1, #16]
 800c29c:	4605      	mov	r5, r0
 800c29e:	460c      	mov	r4, r1
 800c2a0:	b913      	cbnz	r3, 800c2a8 <_fflush_r+0x10>
 800c2a2:	2500      	movs	r5, #0
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}
 800c2a8:	b118      	cbz	r0, 800c2b2 <_fflush_r+0x1a>
 800c2aa:	6a03      	ldr	r3, [r0, #32]
 800c2ac:	b90b      	cbnz	r3, 800c2b2 <_fflush_r+0x1a>
 800c2ae:	f7fe fb51 	bl	800a954 <__sinit>
 800c2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d0f3      	beq.n	800c2a2 <_fflush_r+0xa>
 800c2ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2bc:	07d0      	lsls	r0, r2, #31
 800c2be:	d404      	bmi.n	800c2ca <_fflush_r+0x32>
 800c2c0:	0599      	lsls	r1, r3, #22
 800c2c2:	d402      	bmi.n	800c2ca <_fflush_r+0x32>
 800c2c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2c6:	f7fe fc3a 	bl	800ab3e <__retarget_lock_acquire_recursive>
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	4621      	mov	r1, r4
 800c2ce:	f7ff ff5d 	bl	800c18c <__sflush_r>
 800c2d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2d4:	07da      	lsls	r2, r3, #31
 800c2d6:	4605      	mov	r5, r0
 800c2d8:	d4e4      	bmi.n	800c2a4 <_fflush_r+0xc>
 800c2da:	89a3      	ldrh	r3, [r4, #12]
 800c2dc:	059b      	lsls	r3, r3, #22
 800c2de:	d4e1      	bmi.n	800c2a4 <_fflush_r+0xc>
 800c2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2e2:	f7fe fc2d 	bl	800ab40 <__retarget_lock_release_recursive>
 800c2e6:	e7dd      	b.n	800c2a4 <_fflush_r+0xc>

0800c2e8 <_sbrk_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d06      	ldr	r5, [pc, #24]	; (800c304 <_sbrk_r+0x1c>)
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	602b      	str	r3, [r5, #0]
 800c2f4:	f000 fb3e 	bl	800c974 <_sbrk>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d102      	bne.n	800c302 <_sbrk_r+0x1a>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	b103      	cbz	r3, 800c302 <_sbrk_r+0x1a>
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	20013cd4 	.word	0x20013cd4

0800c308 <__assert_func>:
 800c308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c30a:	4614      	mov	r4, r2
 800c30c:	461a      	mov	r2, r3
 800c30e:	4b09      	ldr	r3, [pc, #36]	; (800c334 <__assert_func+0x2c>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4605      	mov	r5, r0
 800c314:	68d8      	ldr	r0, [r3, #12]
 800c316:	b14c      	cbz	r4, 800c32c <__assert_func+0x24>
 800c318:	4b07      	ldr	r3, [pc, #28]	; (800c338 <__assert_func+0x30>)
 800c31a:	9100      	str	r1, [sp, #0]
 800c31c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c320:	4906      	ldr	r1, [pc, #24]	; (800c33c <__assert_func+0x34>)
 800c322:	462b      	mov	r3, r5
 800c324:	f000 f824 	bl	800c370 <fiprintf>
 800c328:	f000 f834 	bl	800c394 <abort>
 800c32c:	4b04      	ldr	r3, [pc, #16]	; (800c340 <__assert_func+0x38>)
 800c32e:	461c      	mov	r4, r3
 800c330:	e7f3      	b.n	800c31a <__assert_func+0x12>
 800c332:	bf00      	nop
 800c334:	200001d8 	.word	0x200001d8
 800c338:	0800ce04 	.word	0x0800ce04
 800c33c:	0800ce11 	.word	0x0800ce11
 800c340:	0800ce3f 	.word	0x0800ce3f

0800c344 <_calloc_r>:
 800c344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c346:	fba1 2402 	umull	r2, r4, r1, r2
 800c34a:	b94c      	cbnz	r4, 800c360 <_calloc_r+0x1c>
 800c34c:	4611      	mov	r1, r2
 800c34e:	9201      	str	r2, [sp, #4]
 800c350:	f7ff faf4 	bl	800b93c <_malloc_r>
 800c354:	9a01      	ldr	r2, [sp, #4]
 800c356:	4605      	mov	r5, r0
 800c358:	b930      	cbnz	r0, 800c368 <_calloc_r+0x24>
 800c35a:	4628      	mov	r0, r5
 800c35c:	b003      	add	sp, #12
 800c35e:	bd30      	pop	{r4, r5, pc}
 800c360:	220c      	movs	r2, #12
 800c362:	6002      	str	r2, [r0, #0]
 800c364:	2500      	movs	r5, #0
 800c366:	e7f8      	b.n	800c35a <_calloc_r+0x16>
 800c368:	4621      	mov	r1, r4
 800c36a:	f7fe fb7c 	bl	800aa66 <memset>
 800c36e:	e7f4      	b.n	800c35a <_calloc_r+0x16>

0800c370 <fiprintf>:
 800c370:	b40e      	push	{r1, r2, r3}
 800c372:	b503      	push	{r0, r1, lr}
 800c374:	4601      	mov	r1, r0
 800c376:	ab03      	add	r3, sp, #12
 800c378:	4805      	ldr	r0, [pc, #20]	; (800c390 <fiprintf+0x20>)
 800c37a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c37e:	6800      	ldr	r0, [r0, #0]
 800c380:	9301      	str	r3, [sp, #4]
 800c382:	f000 f837 	bl	800c3f4 <_vfiprintf_r>
 800c386:	b002      	add	sp, #8
 800c388:	f85d eb04 	ldr.w	lr, [sp], #4
 800c38c:	b003      	add	sp, #12
 800c38e:	4770      	bx	lr
 800c390:	200001d8 	.word	0x200001d8

0800c394 <abort>:
 800c394:	b508      	push	{r3, lr}
 800c396:	2006      	movs	r0, #6
 800c398:	f000 fa04 	bl	800c7a4 <raise>
 800c39c:	2001      	movs	r0, #1
 800c39e:	f7f6 f985 	bl	80026ac <_exit>

0800c3a2 <__sfputc_r>:
 800c3a2:	6893      	ldr	r3, [r2, #8]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	b410      	push	{r4}
 800c3aa:	6093      	str	r3, [r2, #8]
 800c3ac:	da08      	bge.n	800c3c0 <__sfputc_r+0x1e>
 800c3ae:	6994      	ldr	r4, [r2, #24]
 800c3b0:	42a3      	cmp	r3, r4
 800c3b2:	db01      	blt.n	800c3b8 <__sfputc_r+0x16>
 800c3b4:	290a      	cmp	r1, #10
 800c3b6:	d103      	bne.n	800c3c0 <__sfputc_r+0x1e>
 800c3b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3bc:	f000 b934 	b.w	800c628 <__swbuf_r>
 800c3c0:	6813      	ldr	r3, [r2, #0]
 800c3c2:	1c58      	adds	r0, r3, #1
 800c3c4:	6010      	str	r0, [r2, #0]
 800c3c6:	7019      	strb	r1, [r3, #0]
 800c3c8:	4608      	mov	r0, r1
 800c3ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <__sfputs_r>:
 800c3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	460f      	mov	r7, r1
 800c3d6:	4614      	mov	r4, r2
 800c3d8:	18d5      	adds	r5, r2, r3
 800c3da:	42ac      	cmp	r4, r5
 800c3dc:	d101      	bne.n	800c3e2 <__sfputs_r+0x12>
 800c3de:	2000      	movs	r0, #0
 800c3e0:	e007      	b.n	800c3f2 <__sfputs_r+0x22>
 800c3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e6:	463a      	mov	r2, r7
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	f7ff ffda 	bl	800c3a2 <__sfputc_r>
 800c3ee:	1c43      	adds	r3, r0, #1
 800c3f0:	d1f3      	bne.n	800c3da <__sfputs_r+0xa>
 800c3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c3f4 <_vfiprintf_r>:
 800c3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f8:	460d      	mov	r5, r1
 800c3fa:	b09d      	sub	sp, #116	; 0x74
 800c3fc:	4614      	mov	r4, r2
 800c3fe:	4698      	mov	r8, r3
 800c400:	4606      	mov	r6, r0
 800c402:	b118      	cbz	r0, 800c40c <_vfiprintf_r+0x18>
 800c404:	6a03      	ldr	r3, [r0, #32]
 800c406:	b90b      	cbnz	r3, 800c40c <_vfiprintf_r+0x18>
 800c408:	f7fe faa4 	bl	800a954 <__sinit>
 800c40c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c40e:	07d9      	lsls	r1, r3, #31
 800c410:	d405      	bmi.n	800c41e <_vfiprintf_r+0x2a>
 800c412:	89ab      	ldrh	r3, [r5, #12]
 800c414:	059a      	lsls	r2, r3, #22
 800c416:	d402      	bmi.n	800c41e <_vfiprintf_r+0x2a>
 800c418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c41a:	f7fe fb90 	bl	800ab3e <__retarget_lock_acquire_recursive>
 800c41e:	89ab      	ldrh	r3, [r5, #12]
 800c420:	071b      	lsls	r3, r3, #28
 800c422:	d501      	bpl.n	800c428 <_vfiprintf_r+0x34>
 800c424:	692b      	ldr	r3, [r5, #16]
 800c426:	b99b      	cbnz	r3, 800c450 <_vfiprintf_r+0x5c>
 800c428:	4629      	mov	r1, r5
 800c42a:	4630      	mov	r0, r6
 800c42c:	f000 f93a 	bl	800c6a4 <__swsetup_r>
 800c430:	b170      	cbz	r0, 800c450 <_vfiprintf_r+0x5c>
 800c432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c434:	07dc      	lsls	r4, r3, #31
 800c436:	d504      	bpl.n	800c442 <_vfiprintf_r+0x4e>
 800c438:	f04f 30ff 	mov.w	r0, #4294967295
 800c43c:	b01d      	add	sp, #116	; 0x74
 800c43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c442:	89ab      	ldrh	r3, [r5, #12]
 800c444:	0598      	lsls	r0, r3, #22
 800c446:	d4f7      	bmi.n	800c438 <_vfiprintf_r+0x44>
 800c448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c44a:	f7fe fb79 	bl	800ab40 <__retarget_lock_release_recursive>
 800c44e:	e7f3      	b.n	800c438 <_vfiprintf_r+0x44>
 800c450:	2300      	movs	r3, #0
 800c452:	9309      	str	r3, [sp, #36]	; 0x24
 800c454:	2320      	movs	r3, #32
 800c456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c45e:	2330      	movs	r3, #48	; 0x30
 800c460:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c614 <_vfiprintf_r+0x220>
 800c464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c468:	f04f 0901 	mov.w	r9, #1
 800c46c:	4623      	mov	r3, r4
 800c46e:	469a      	mov	sl, r3
 800c470:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c474:	b10a      	cbz	r2, 800c47a <_vfiprintf_r+0x86>
 800c476:	2a25      	cmp	r2, #37	; 0x25
 800c478:	d1f9      	bne.n	800c46e <_vfiprintf_r+0x7a>
 800c47a:	ebba 0b04 	subs.w	fp, sl, r4
 800c47e:	d00b      	beq.n	800c498 <_vfiprintf_r+0xa4>
 800c480:	465b      	mov	r3, fp
 800c482:	4622      	mov	r2, r4
 800c484:	4629      	mov	r1, r5
 800c486:	4630      	mov	r0, r6
 800c488:	f7ff ffa2 	bl	800c3d0 <__sfputs_r>
 800c48c:	3001      	adds	r0, #1
 800c48e:	f000 80a9 	beq.w	800c5e4 <_vfiprintf_r+0x1f0>
 800c492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c494:	445a      	add	r2, fp
 800c496:	9209      	str	r2, [sp, #36]	; 0x24
 800c498:	f89a 3000 	ldrb.w	r3, [sl]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 80a1 	beq.w	800c5e4 <_vfiprintf_r+0x1f0>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c4a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4ac:	f10a 0a01 	add.w	sl, sl, #1
 800c4b0:	9304      	str	r3, [sp, #16]
 800c4b2:	9307      	str	r3, [sp, #28]
 800c4b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4b8:	931a      	str	r3, [sp, #104]	; 0x68
 800c4ba:	4654      	mov	r4, sl
 800c4bc:	2205      	movs	r2, #5
 800c4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4c2:	4854      	ldr	r0, [pc, #336]	; (800c614 <_vfiprintf_r+0x220>)
 800c4c4:	f7f3 fef4 	bl	80002b0 <memchr>
 800c4c8:	9a04      	ldr	r2, [sp, #16]
 800c4ca:	b9d8      	cbnz	r0, 800c504 <_vfiprintf_r+0x110>
 800c4cc:	06d1      	lsls	r1, r2, #27
 800c4ce:	bf44      	itt	mi
 800c4d0:	2320      	movmi	r3, #32
 800c4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4d6:	0713      	lsls	r3, r2, #28
 800c4d8:	bf44      	itt	mi
 800c4da:	232b      	movmi	r3, #43	; 0x2b
 800c4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c4e6:	d015      	beq.n	800c514 <_vfiprintf_r+0x120>
 800c4e8:	9a07      	ldr	r2, [sp, #28]
 800c4ea:	4654      	mov	r4, sl
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	f04f 0c0a 	mov.w	ip, #10
 800c4f2:	4621      	mov	r1, r4
 800c4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4f8:	3b30      	subs	r3, #48	; 0x30
 800c4fa:	2b09      	cmp	r3, #9
 800c4fc:	d94d      	bls.n	800c59a <_vfiprintf_r+0x1a6>
 800c4fe:	b1b0      	cbz	r0, 800c52e <_vfiprintf_r+0x13a>
 800c500:	9207      	str	r2, [sp, #28]
 800c502:	e014      	b.n	800c52e <_vfiprintf_r+0x13a>
 800c504:	eba0 0308 	sub.w	r3, r0, r8
 800c508:	fa09 f303 	lsl.w	r3, r9, r3
 800c50c:	4313      	orrs	r3, r2
 800c50e:	9304      	str	r3, [sp, #16]
 800c510:	46a2      	mov	sl, r4
 800c512:	e7d2      	b.n	800c4ba <_vfiprintf_r+0xc6>
 800c514:	9b03      	ldr	r3, [sp, #12]
 800c516:	1d19      	adds	r1, r3, #4
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	9103      	str	r1, [sp, #12]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	bfbb      	ittet	lt
 800c520:	425b      	neglt	r3, r3
 800c522:	f042 0202 	orrlt.w	r2, r2, #2
 800c526:	9307      	strge	r3, [sp, #28]
 800c528:	9307      	strlt	r3, [sp, #28]
 800c52a:	bfb8      	it	lt
 800c52c:	9204      	strlt	r2, [sp, #16]
 800c52e:	7823      	ldrb	r3, [r4, #0]
 800c530:	2b2e      	cmp	r3, #46	; 0x2e
 800c532:	d10c      	bne.n	800c54e <_vfiprintf_r+0x15a>
 800c534:	7863      	ldrb	r3, [r4, #1]
 800c536:	2b2a      	cmp	r3, #42	; 0x2a
 800c538:	d134      	bne.n	800c5a4 <_vfiprintf_r+0x1b0>
 800c53a:	9b03      	ldr	r3, [sp, #12]
 800c53c:	1d1a      	adds	r2, r3, #4
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	9203      	str	r2, [sp, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	bfb8      	it	lt
 800c546:	f04f 33ff 	movlt.w	r3, #4294967295
 800c54a:	3402      	adds	r4, #2
 800c54c:	9305      	str	r3, [sp, #20]
 800c54e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c624 <_vfiprintf_r+0x230>
 800c552:	7821      	ldrb	r1, [r4, #0]
 800c554:	2203      	movs	r2, #3
 800c556:	4650      	mov	r0, sl
 800c558:	f7f3 feaa 	bl	80002b0 <memchr>
 800c55c:	b138      	cbz	r0, 800c56e <_vfiprintf_r+0x17a>
 800c55e:	9b04      	ldr	r3, [sp, #16]
 800c560:	eba0 000a 	sub.w	r0, r0, sl
 800c564:	2240      	movs	r2, #64	; 0x40
 800c566:	4082      	lsls	r2, r0
 800c568:	4313      	orrs	r3, r2
 800c56a:	3401      	adds	r4, #1
 800c56c:	9304      	str	r3, [sp, #16]
 800c56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c572:	4829      	ldr	r0, [pc, #164]	; (800c618 <_vfiprintf_r+0x224>)
 800c574:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c578:	2206      	movs	r2, #6
 800c57a:	f7f3 fe99 	bl	80002b0 <memchr>
 800c57e:	2800      	cmp	r0, #0
 800c580:	d03f      	beq.n	800c602 <_vfiprintf_r+0x20e>
 800c582:	4b26      	ldr	r3, [pc, #152]	; (800c61c <_vfiprintf_r+0x228>)
 800c584:	bb1b      	cbnz	r3, 800c5ce <_vfiprintf_r+0x1da>
 800c586:	9b03      	ldr	r3, [sp, #12]
 800c588:	3307      	adds	r3, #7
 800c58a:	f023 0307 	bic.w	r3, r3, #7
 800c58e:	3308      	adds	r3, #8
 800c590:	9303      	str	r3, [sp, #12]
 800c592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c594:	443b      	add	r3, r7
 800c596:	9309      	str	r3, [sp, #36]	; 0x24
 800c598:	e768      	b.n	800c46c <_vfiprintf_r+0x78>
 800c59a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c59e:	460c      	mov	r4, r1
 800c5a0:	2001      	movs	r0, #1
 800c5a2:	e7a6      	b.n	800c4f2 <_vfiprintf_r+0xfe>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	3401      	adds	r4, #1
 800c5a8:	9305      	str	r3, [sp, #20]
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	f04f 0c0a 	mov.w	ip, #10
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5b6:	3a30      	subs	r2, #48	; 0x30
 800c5b8:	2a09      	cmp	r2, #9
 800c5ba:	d903      	bls.n	800c5c4 <_vfiprintf_r+0x1d0>
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d0c6      	beq.n	800c54e <_vfiprintf_r+0x15a>
 800c5c0:	9105      	str	r1, [sp, #20]
 800c5c2:	e7c4      	b.n	800c54e <_vfiprintf_r+0x15a>
 800c5c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e7f0      	b.n	800c5b0 <_vfiprintf_r+0x1bc>
 800c5ce:	ab03      	add	r3, sp, #12
 800c5d0:	9300      	str	r3, [sp, #0]
 800c5d2:	462a      	mov	r2, r5
 800c5d4:	4b12      	ldr	r3, [pc, #72]	; (800c620 <_vfiprintf_r+0x22c>)
 800c5d6:	a904      	add	r1, sp, #16
 800c5d8:	4630      	mov	r0, r6
 800c5da:	f7fd fd69 	bl	800a0b0 <_printf_float>
 800c5de:	4607      	mov	r7, r0
 800c5e0:	1c78      	adds	r0, r7, #1
 800c5e2:	d1d6      	bne.n	800c592 <_vfiprintf_r+0x19e>
 800c5e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5e6:	07d9      	lsls	r1, r3, #31
 800c5e8:	d405      	bmi.n	800c5f6 <_vfiprintf_r+0x202>
 800c5ea:	89ab      	ldrh	r3, [r5, #12]
 800c5ec:	059a      	lsls	r2, r3, #22
 800c5ee:	d402      	bmi.n	800c5f6 <_vfiprintf_r+0x202>
 800c5f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5f2:	f7fe faa5 	bl	800ab40 <__retarget_lock_release_recursive>
 800c5f6:	89ab      	ldrh	r3, [r5, #12]
 800c5f8:	065b      	lsls	r3, r3, #25
 800c5fa:	f53f af1d 	bmi.w	800c438 <_vfiprintf_r+0x44>
 800c5fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c600:	e71c      	b.n	800c43c <_vfiprintf_r+0x48>
 800c602:	ab03      	add	r3, sp, #12
 800c604:	9300      	str	r3, [sp, #0]
 800c606:	462a      	mov	r2, r5
 800c608:	4b05      	ldr	r3, [pc, #20]	; (800c620 <_vfiprintf_r+0x22c>)
 800c60a:	a904      	add	r1, sp, #16
 800c60c:	4630      	mov	r0, r6
 800c60e:	f7fd fff3 	bl	800a5f8 <_printf_i>
 800c612:	e7e4      	b.n	800c5de <_vfiprintf_r+0x1ea>
 800c614:	0800ce40 	.word	0x0800ce40
 800c618:	0800ce4a 	.word	0x0800ce4a
 800c61c:	0800a0b1 	.word	0x0800a0b1
 800c620:	0800c3d1 	.word	0x0800c3d1
 800c624:	0800ce46 	.word	0x0800ce46

0800c628 <__swbuf_r>:
 800c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62a:	460e      	mov	r6, r1
 800c62c:	4614      	mov	r4, r2
 800c62e:	4605      	mov	r5, r0
 800c630:	b118      	cbz	r0, 800c63a <__swbuf_r+0x12>
 800c632:	6a03      	ldr	r3, [r0, #32]
 800c634:	b90b      	cbnz	r3, 800c63a <__swbuf_r+0x12>
 800c636:	f7fe f98d 	bl	800a954 <__sinit>
 800c63a:	69a3      	ldr	r3, [r4, #24]
 800c63c:	60a3      	str	r3, [r4, #8]
 800c63e:	89a3      	ldrh	r3, [r4, #12]
 800c640:	071a      	lsls	r2, r3, #28
 800c642:	d525      	bpl.n	800c690 <__swbuf_r+0x68>
 800c644:	6923      	ldr	r3, [r4, #16]
 800c646:	b31b      	cbz	r3, 800c690 <__swbuf_r+0x68>
 800c648:	6823      	ldr	r3, [r4, #0]
 800c64a:	6922      	ldr	r2, [r4, #16]
 800c64c:	1a98      	subs	r0, r3, r2
 800c64e:	6963      	ldr	r3, [r4, #20]
 800c650:	b2f6      	uxtb	r6, r6
 800c652:	4283      	cmp	r3, r0
 800c654:	4637      	mov	r7, r6
 800c656:	dc04      	bgt.n	800c662 <__swbuf_r+0x3a>
 800c658:	4621      	mov	r1, r4
 800c65a:	4628      	mov	r0, r5
 800c65c:	f7ff fe1c 	bl	800c298 <_fflush_r>
 800c660:	b9e0      	cbnz	r0, 800c69c <__swbuf_r+0x74>
 800c662:	68a3      	ldr	r3, [r4, #8]
 800c664:	3b01      	subs	r3, #1
 800c666:	60a3      	str	r3, [r4, #8]
 800c668:	6823      	ldr	r3, [r4, #0]
 800c66a:	1c5a      	adds	r2, r3, #1
 800c66c:	6022      	str	r2, [r4, #0]
 800c66e:	701e      	strb	r6, [r3, #0]
 800c670:	6962      	ldr	r2, [r4, #20]
 800c672:	1c43      	adds	r3, r0, #1
 800c674:	429a      	cmp	r2, r3
 800c676:	d004      	beq.n	800c682 <__swbuf_r+0x5a>
 800c678:	89a3      	ldrh	r3, [r4, #12]
 800c67a:	07db      	lsls	r3, r3, #31
 800c67c:	d506      	bpl.n	800c68c <__swbuf_r+0x64>
 800c67e:	2e0a      	cmp	r6, #10
 800c680:	d104      	bne.n	800c68c <__swbuf_r+0x64>
 800c682:	4621      	mov	r1, r4
 800c684:	4628      	mov	r0, r5
 800c686:	f7ff fe07 	bl	800c298 <_fflush_r>
 800c68a:	b938      	cbnz	r0, 800c69c <__swbuf_r+0x74>
 800c68c:	4638      	mov	r0, r7
 800c68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c690:	4621      	mov	r1, r4
 800c692:	4628      	mov	r0, r5
 800c694:	f000 f806 	bl	800c6a4 <__swsetup_r>
 800c698:	2800      	cmp	r0, #0
 800c69a:	d0d5      	beq.n	800c648 <__swbuf_r+0x20>
 800c69c:	f04f 37ff 	mov.w	r7, #4294967295
 800c6a0:	e7f4      	b.n	800c68c <__swbuf_r+0x64>
	...

0800c6a4 <__swsetup_r>:
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	4b2a      	ldr	r3, [pc, #168]	; (800c750 <__swsetup_r+0xac>)
 800c6a8:	4605      	mov	r5, r0
 800c6aa:	6818      	ldr	r0, [r3, #0]
 800c6ac:	460c      	mov	r4, r1
 800c6ae:	b118      	cbz	r0, 800c6b8 <__swsetup_r+0x14>
 800c6b0:	6a03      	ldr	r3, [r0, #32]
 800c6b2:	b90b      	cbnz	r3, 800c6b8 <__swsetup_r+0x14>
 800c6b4:	f7fe f94e 	bl	800a954 <__sinit>
 800c6b8:	89a3      	ldrh	r3, [r4, #12]
 800c6ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6be:	0718      	lsls	r0, r3, #28
 800c6c0:	d422      	bmi.n	800c708 <__swsetup_r+0x64>
 800c6c2:	06d9      	lsls	r1, r3, #27
 800c6c4:	d407      	bmi.n	800c6d6 <__swsetup_r+0x32>
 800c6c6:	2309      	movs	r3, #9
 800c6c8:	602b      	str	r3, [r5, #0]
 800c6ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c6ce:	81a3      	strh	r3, [r4, #12]
 800c6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d4:	e034      	b.n	800c740 <__swsetup_r+0x9c>
 800c6d6:	0758      	lsls	r0, r3, #29
 800c6d8:	d512      	bpl.n	800c700 <__swsetup_r+0x5c>
 800c6da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6dc:	b141      	cbz	r1, 800c6f0 <__swsetup_r+0x4c>
 800c6de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6e2:	4299      	cmp	r1, r3
 800c6e4:	d002      	beq.n	800c6ec <__swsetup_r+0x48>
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	f7ff f8b4 	bl	800b854 <_free_r>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	6363      	str	r3, [r4, #52]	; 0x34
 800c6f0:	89a3      	ldrh	r3, [r4, #12]
 800c6f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6f6:	81a3      	strh	r3, [r4, #12]
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	6063      	str	r3, [r4, #4]
 800c6fc:	6923      	ldr	r3, [r4, #16]
 800c6fe:	6023      	str	r3, [r4, #0]
 800c700:	89a3      	ldrh	r3, [r4, #12]
 800c702:	f043 0308 	orr.w	r3, r3, #8
 800c706:	81a3      	strh	r3, [r4, #12]
 800c708:	6923      	ldr	r3, [r4, #16]
 800c70a:	b94b      	cbnz	r3, 800c720 <__swsetup_r+0x7c>
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c716:	d003      	beq.n	800c720 <__swsetup_r+0x7c>
 800c718:	4621      	mov	r1, r4
 800c71a:	4628      	mov	r0, r5
 800c71c:	f000 f884 	bl	800c828 <__smakebuf_r>
 800c720:	89a0      	ldrh	r0, [r4, #12]
 800c722:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c726:	f010 0301 	ands.w	r3, r0, #1
 800c72a:	d00a      	beq.n	800c742 <__swsetup_r+0x9e>
 800c72c:	2300      	movs	r3, #0
 800c72e:	60a3      	str	r3, [r4, #8]
 800c730:	6963      	ldr	r3, [r4, #20]
 800c732:	425b      	negs	r3, r3
 800c734:	61a3      	str	r3, [r4, #24]
 800c736:	6923      	ldr	r3, [r4, #16]
 800c738:	b943      	cbnz	r3, 800c74c <__swsetup_r+0xa8>
 800c73a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c73e:	d1c4      	bne.n	800c6ca <__swsetup_r+0x26>
 800c740:	bd38      	pop	{r3, r4, r5, pc}
 800c742:	0781      	lsls	r1, r0, #30
 800c744:	bf58      	it	pl
 800c746:	6963      	ldrpl	r3, [r4, #20]
 800c748:	60a3      	str	r3, [r4, #8]
 800c74a:	e7f4      	b.n	800c736 <__swsetup_r+0x92>
 800c74c:	2000      	movs	r0, #0
 800c74e:	e7f7      	b.n	800c740 <__swsetup_r+0x9c>
 800c750:	200001d8 	.word	0x200001d8

0800c754 <_raise_r>:
 800c754:	291f      	cmp	r1, #31
 800c756:	b538      	push	{r3, r4, r5, lr}
 800c758:	4604      	mov	r4, r0
 800c75a:	460d      	mov	r5, r1
 800c75c:	d904      	bls.n	800c768 <_raise_r+0x14>
 800c75e:	2316      	movs	r3, #22
 800c760:	6003      	str	r3, [r0, #0]
 800c762:	f04f 30ff 	mov.w	r0, #4294967295
 800c766:	bd38      	pop	{r3, r4, r5, pc}
 800c768:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c76a:	b112      	cbz	r2, 800c772 <_raise_r+0x1e>
 800c76c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c770:	b94b      	cbnz	r3, 800c786 <_raise_r+0x32>
 800c772:	4620      	mov	r0, r4
 800c774:	f000 f830 	bl	800c7d8 <_getpid_r>
 800c778:	462a      	mov	r2, r5
 800c77a:	4601      	mov	r1, r0
 800c77c:	4620      	mov	r0, r4
 800c77e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c782:	f000 b817 	b.w	800c7b4 <_kill_r>
 800c786:	2b01      	cmp	r3, #1
 800c788:	d00a      	beq.n	800c7a0 <_raise_r+0x4c>
 800c78a:	1c59      	adds	r1, r3, #1
 800c78c:	d103      	bne.n	800c796 <_raise_r+0x42>
 800c78e:	2316      	movs	r3, #22
 800c790:	6003      	str	r3, [r0, #0]
 800c792:	2001      	movs	r0, #1
 800c794:	e7e7      	b.n	800c766 <_raise_r+0x12>
 800c796:	2400      	movs	r4, #0
 800c798:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c79c:	4628      	mov	r0, r5
 800c79e:	4798      	blx	r3
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	e7e0      	b.n	800c766 <_raise_r+0x12>

0800c7a4 <raise>:
 800c7a4:	4b02      	ldr	r3, [pc, #8]	; (800c7b0 <raise+0xc>)
 800c7a6:	4601      	mov	r1, r0
 800c7a8:	6818      	ldr	r0, [r3, #0]
 800c7aa:	f7ff bfd3 	b.w	800c754 <_raise_r>
 800c7ae:	bf00      	nop
 800c7b0:	200001d8 	.word	0x200001d8

0800c7b4 <_kill_r>:
 800c7b4:	b538      	push	{r3, r4, r5, lr}
 800c7b6:	4d07      	ldr	r5, [pc, #28]	; (800c7d4 <_kill_r+0x20>)
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	4608      	mov	r0, r1
 800c7be:	4611      	mov	r1, r2
 800c7c0:	602b      	str	r3, [r5, #0]
 800c7c2:	f7f5 ff63 	bl	800268c <_kill>
 800c7c6:	1c43      	adds	r3, r0, #1
 800c7c8:	d102      	bne.n	800c7d0 <_kill_r+0x1c>
 800c7ca:	682b      	ldr	r3, [r5, #0]
 800c7cc:	b103      	cbz	r3, 800c7d0 <_kill_r+0x1c>
 800c7ce:	6023      	str	r3, [r4, #0]
 800c7d0:	bd38      	pop	{r3, r4, r5, pc}
 800c7d2:	bf00      	nop
 800c7d4:	20013cd4 	.word	0x20013cd4

0800c7d8 <_getpid_r>:
 800c7d8:	f7f5 bf50 	b.w	800267c <_getpid>

0800c7dc <__swhatbuf_r>:
 800c7dc:	b570      	push	{r4, r5, r6, lr}
 800c7de:	460c      	mov	r4, r1
 800c7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7e4:	2900      	cmp	r1, #0
 800c7e6:	b096      	sub	sp, #88	; 0x58
 800c7e8:	4615      	mov	r5, r2
 800c7ea:	461e      	mov	r6, r3
 800c7ec:	da0d      	bge.n	800c80a <__swhatbuf_r+0x2e>
 800c7ee:	89a3      	ldrh	r3, [r4, #12]
 800c7f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c7f4:	f04f 0100 	mov.w	r1, #0
 800c7f8:	bf0c      	ite	eq
 800c7fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c7fe:	2340      	movne	r3, #64	; 0x40
 800c800:	2000      	movs	r0, #0
 800c802:	6031      	str	r1, [r6, #0]
 800c804:	602b      	str	r3, [r5, #0]
 800c806:	b016      	add	sp, #88	; 0x58
 800c808:	bd70      	pop	{r4, r5, r6, pc}
 800c80a:	466a      	mov	r2, sp
 800c80c:	f000 f848 	bl	800c8a0 <_fstat_r>
 800c810:	2800      	cmp	r0, #0
 800c812:	dbec      	blt.n	800c7ee <__swhatbuf_r+0x12>
 800c814:	9901      	ldr	r1, [sp, #4]
 800c816:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c81a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c81e:	4259      	negs	r1, r3
 800c820:	4159      	adcs	r1, r3
 800c822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c826:	e7eb      	b.n	800c800 <__swhatbuf_r+0x24>

0800c828 <__smakebuf_r>:
 800c828:	898b      	ldrh	r3, [r1, #12]
 800c82a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c82c:	079d      	lsls	r5, r3, #30
 800c82e:	4606      	mov	r6, r0
 800c830:	460c      	mov	r4, r1
 800c832:	d507      	bpl.n	800c844 <__smakebuf_r+0x1c>
 800c834:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	6123      	str	r3, [r4, #16]
 800c83c:	2301      	movs	r3, #1
 800c83e:	6163      	str	r3, [r4, #20]
 800c840:	b002      	add	sp, #8
 800c842:	bd70      	pop	{r4, r5, r6, pc}
 800c844:	ab01      	add	r3, sp, #4
 800c846:	466a      	mov	r2, sp
 800c848:	f7ff ffc8 	bl	800c7dc <__swhatbuf_r>
 800c84c:	9900      	ldr	r1, [sp, #0]
 800c84e:	4605      	mov	r5, r0
 800c850:	4630      	mov	r0, r6
 800c852:	f7ff f873 	bl	800b93c <_malloc_r>
 800c856:	b948      	cbnz	r0, 800c86c <__smakebuf_r+0x44>
 800c858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c85c:	059a      	lsls	r2, r3, #22
 800c85e:	d4ef      	bmi.n	800c840 <__smakebuf_r+0x18>
 800c860:	f023 0303 	bic.w	r3, r3, #3
 800c864:	f043 0302 	orr.w	r3, r3, #2
 800c868:	81a3      	strh	r3, [r4, #12]
 800c86a:	e7e3      	b.n	800c834 <__smakebuf_r+0xc>
 800c86c:	89a3      	ldrh	r3, [r4, #12]
 800c86e:	6020      	str	r0, [r4, #0]
 800c870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c874:	81a3      	strh	r3, [r4, #12]
 800c876:	9b00      	ldr	r3, [sp, #0]
 800c878:	6163      	str	r3, [r4, #20]
 800c87a:	9b01      	ldr	r3, [sp, #4]
 800c87c:	6120      	str	r0, [r4, #16]
 800c87e:	b15b      	cbz	r3, 800c898 <__smakebuf_r+0x70>
 800c880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c884:	4630      	mov	r0, r6
 800c886:	f000 f81d 	bl	800c8c4 <_isatty_r>
 800c88a:	b128      	cbz	r0, 800c898 <__smakebuf_r+0x70>
 800c88c:	89a3      	ldrh	r3, [r4, #12]
 800c88e:	f023 0303 	bic.w	r3, r3, #3
 800c892:	f043 0301 	orr.w	r3, r3, #1
 800c896:	81a3      	strh	r3, [r4, #12]
 800c898:	89a3      	ldrh	r3, [r4, #12]
 800c89a:	431d      	orrs	r5, r3
 800c89c:	81a5      	strh	r5, [r4, #12]
 800c89e:	e7cf      	b.n	800c840 <__smakebuf_r+0x18>

0800c8a0 <_fstat_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	4d07      	ldr	r5, [pc, #28]	; (800c8c0 <_fstat_r+0x20>)
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	4608      	mov	r0, r1
 800c8aa:	4611      	mov	r1, r2
 800c8ac:	602b      	str	r3, [r5, #0]
 800c8ae:	f7f5 ff30 	bl	8002712 <_fstat>
 800c8b2:	1c43      	adds	r3, r0, #1
 800c8b4:	d102      	bne.n	800c8bc <_fstat_r+0x1c>
 800c8b6:	682b      	ldr	r3, [r5, #0]
 800c8b8:	b103      	cbz	r3, 800c8bc <_fstat_r+0x1c>
 800c8ba:	6023      	str	r3, [r4, #0]
 800c8bc:	bd38      	pop	{r3, r4, r5, pc}
 800c8be:	bf00      	nop
 800c8c0:	20013cd4 	.word	0x20013cd4

0800c8c4 <_isatty_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	4d06      	ldr	r5, [pc, #24]	; (800c8e0 <_isatty_r+0x1c>)
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	4608      	mov	r0, r1
 800c8ce:	602b      	str	r3, [r5, #0]
 800c8d0:	f7f5 ff2f 	bl	8002732 <_isatty>
 800c8d4:	1c43      	adds	r3, r0, #1
 800c8d6:	d102      	bne.n	800c8de <_isatty_r+0x1a>
 800c8d8:	682b      	ldr	r3, [r5, #0]
 800c8da:	b103      	cbz	r3, 800c8de <_isatty_r+0x1a>
 800c8dc:	6023      	str	r3, [r4, #0]
 800c8de:	bd38      	pop	{r3, r4, r5, pc}
 800c8e0:	20013cd4 	.word	0x20013cd4

0800c8e4 <round>:
 800c8e4:	ec53 2b10 	vmov	r2, r3, d0
 800c8e8:	b570      	push	{r4, r5, r6, lr}
 800c8ea:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800c8ee:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800c8f2:	2813      	cmp	r0, #19
 800c8f4:	ee10 5a10 	vmov	r5, s0
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	dc18      	bgt.n	800c92e <round+0x4a>
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	da09      	bge.n	800c914 <round+0x30>
 800c900:	3001      	adds	r0, #1
 800c902:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800c906:	d103      	bne.n	800c910 <round+0x2c>
 800c908:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800c90c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c910:	2300      	movs	r3, #0
 800c912:	e02a      	b.n	800c96a <round+0x86>
 800c914:	4c16      	ldr	r4, [pc, #88]	; (800c970 <round+0x8c>)
 800c916:	4104      	asrs	r4, r0
 800c918:	ea03 0604 	and.w	r6, r3, r4
 800c91c:	4316      	orrs	r6, r2
 800c91e:	d011      	beq.n	800c944 <round+0x60>
 800c920:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c924:	4103      	asrs	r3, r0
 800c926:	440b      	add	r3, r1
 800c928:	ea23 0104 	bic.w	r1, r3, r4
 800c92c:	e7f0      	b.n	800c910 <round+0x2c>
 800c92e:	2833      	cmp	r0, #51	; 0x33
 800c930:	dd0b      	ble.n	800c94a <round+0x66>
 800c932:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800c936:	d105      	bne.n	800c944 <round+0x60>
 800c938:	ee10 0a10 	vmov	r0, s0
 800c93c:	f7f3 fd16 	bl	800036c <__adddf3>
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	ec43 2b10 	vmov	d0, r2, r3
 800c948:	bd70      	pop	{r4, r5, r6, pc}
 800c94a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800c94e:	f04f 34ff 	mov.w	r4, #4294967295
 800c952:	40f4      	lsrs	r4, r6
 800c954:	4214      	tst	r4, r2
 800c956:	d0f5      	beq.n	800c944 <round+0x60>
 800c958:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800c95c:	2301      	movs	r3, #1
 800c95e:	4083      	lsls	r3, r0
 800c960:	195b      	adds	r3, r3, r5
 800c962:	bf28      	it	cs
 800c964:	3101      	addcs	r1, #1
 800c966:	ea23 0304 	bic.w	r3, r3, r4
 800c96a:	461a      	mov	r2, r3
 800c96c:	460b      	mov	r3, r1
 800c96e:	e7e9      	b.n	800c944 <round+0x60>
 800c970:	000fffff 	.word	0x000fffff

0800c974 <_sbrk>:
 800c974:	4a04      	ldr	r2, [pc, #16]	; (800c988 <_sbrk+0x14>)
 800c976:	6811      	ldr	r1, [r2, #0]
 800c978:	4603      	mov	r3, r0
 800c97a:	b909      	cbnz	r1, 800c980 <_sbrk+0xc>
 800c97c:	4903      	ldr	r1, [pc, #12]	; (800c98c <_sbrk+0x18>)
 800c97e:	6011      	str	r1, [r2, #0]
 800c980:	6810      	ldr	r0, [r2, #0]
 800c982:	4403      	add	r3, r0
 800c984:	6013      	str	r3, [r2, #0]
 800c986:	4770      	bx	lr
 800c988:	20013ce4 	.word	0x20013ce4
 800c98c:	20013ce8 	.word	0x20013ce8

0800c990 <_init>:
 800c990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c992:	bf00      	nop
 800c994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c996:	bc08      	pop	{r3}
 800c998:	469e      	mov	lr, r3
 800c99a:	4770      	bx	lr

0800c99c <_fini>:
 800c99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99e:	bf00      	nop
 800c9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9a2:	bc08      	pop	{r3}
 800c9a4:	469e      	mov	lr, r3
 800c9a6:	4770      	bx	lr
