
First_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006940  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b58  08006b58  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006b58  08006b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b60  08006b60  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b60  08006b60  00016b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b64  08006b64  00016b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004684  20000010  08006b78  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004694  08006b78  00024694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000190ce  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036fa  00000000  00000000  00039151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  0003c850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011cf  00000000  00000000  0003def0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003290  00000000  00000000  0003f0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba89  00000000  00000000  0004234f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd069  00000000  00000000  0005ddd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006100  00000000  00000000  0013ae44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00140f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006af8 	.word	0x08006af8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08006af8 	.word	0x08006af8

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2uiz>:
 80009ac:	004a      	lsls	r2, r1, #1
 80009ae:	d211      	bcs.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b4:	d211      	bcs.n	80009da <__aeabi_d2uiz+0x2e>
 80009b6:	d50d      	bpl.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d40e      	bmi.n	80009e0 <__aeabi_d2uiz+0x34>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	fa23 f002 	lsr.w	r0, r3, r2
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d102      	bne.n	80009e6 <__aeabi_d2uiz+0x3a>
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	4770      	bx	lr
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	4770      	bx	lr

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b970 	b.w	8000d84 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	460d      	mov	r5, r1
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	460f      	mov	r7, r1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d14a      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000acc:	428a      	cmp	r2, r1
 8000ace:	4694      	mov	ip, r2
 8000ad0:	d965      	bls.n	8000b9e <__udivmoddi4+0xe2>
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	b143      	cbz	r3, 8000aea <__udivmoddi4+0x2e>
 8000ad8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000adc:	f1c3 0220 	rsb	r2, r3, #32
 8000ae0:	409f      	lsls	r7, r3
 8000ae2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ae6:	4317      	orrs	r7, r2
 8000ae8:	409c      	lsls	r4, r3
 8000aea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aee:	fa1f f58c 	uxth.w	r5, ip
 8000af2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000af6:	0c22      	lsrs	r2, r4, #16
 8000af8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000afc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b00:	fb01 f005 	mul.w	r0, r1, r5
 8000b04:	4290      	cmp	r0, r2
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x62>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b10:	f080 811c 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b14:	4290      	cmp	r0, r2
 8000b16:	f240 8119 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b1a:	3902      	subs	r1, #2
 8000b1c:	4462      	add	r2, ip
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	b2a4      	uxth	r4, r4
 8000b22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b2e:	fb00 f505 	mul.w	r5, r0, r5
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x90>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3e:	f080 8107 	bcs.w	8000d50 <__udivmoddi4+0x294>
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	f240 8104 	bls.w	8000d50 <__udivmoddi4+0x294>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b50:	1b64      	subs	r4, r4, r5
 8000b52:	2100      	movs	r1, #0
 8000b54:	b11e      	cbz	r6, 8000b5e <__udivmoddi4+0xa2>
 8000b56:	40dc      	lsrs	r4, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0xbc>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80ed 	beq.w	8000d46 <__udivmoddi4+0x28a>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b72:	4608      	mov	r0, r1
 8000b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b78:	fab3 f183 	clz	r1, r3
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	d149      	bne.n	8000c14 <__udivmoddi4+0x158>
 8000b80:	42ab      	cmp	r3, r5
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xce>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80f8 	bhi.w	8000d7a <__udivmoddi4+0x2be>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	4617      	mov	r7, r2
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d0e2      	beq.n	8000b5e <__udivmoddi4+0xa2>
 8000b98:	e9c6 4700 	strd	r4, r7, [r6]
 8000b9c:	e7df      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000b9e:	b902      	cbnz	r2, 8000ba2 <__udivmoddi4+0xe6>
 8000ba0:	deff      	udf	#255	; 0xff
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8090 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bac:	1a8a      	subs	r2, r1, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f fe8c 	uxth.w	lr, ip
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc0:	0c22      	lsrs	r2, r4, #16
 8000bc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bc6:	fb0e f005 	mul.w	r0, lr, r5
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bce:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f200 80cb 	bhi.w	8000d74 <__udivmoddi4+0x2b8>
 8000bde:	4645      	mov	r5, r8
 8000be0:	1a12      	subs	r2, r2, r0
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000be8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf4:	45a6      	cmp	lr, r4
 8000bf6:	d908      	bls.n	8000c0a <__udivmoddi4+0x14e>
 8000bf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c00:	d202      	bcs.n	8000c08 <__udivmoddi4+0x14c>
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	f200 80bb 	bhi.w	8000d7e <__udivmoddi4+0x2c2>
 8000c08:	4610      	mov	r0, r2
 8000c0a:	eba4 040e 	sub.w	r4, r4, lr
 8000c0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c12:	e79f      	b.n	8000b54 <__udivmoddi4+0x98>
 8000c14:	f1c1 0720 	rsb	r7, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c22:	fa05 f401 	lsl.w	r4, r5, r1
 8000c26:	fa20 f307 	lsr.w	r3, r0, r7
 8000c2a:	40fd      	lsrs	r5, r7
 8000c2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c30:	4323      	orrs	r3, r4
 8000c32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c36:	fa1f fe8c 	uxth.w	lr, ip
 8000c3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c3e:	0c1c      	lsrs	r4, r3, #16
 8000c40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c44:	fb08 f50e 	mul.w	r5, r8, lr
 8000c48:	42a5      	cmp	r5, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c5c:	f080 8088 	bcs.w	8000d70 <__udivmoddi4+0x2b4>
 8000c60:	42a5      	cmp	r5, r4
 8000c62:	f240 8085 	bls.w	8000d70 <__udivmoddi4+0x2b4>
 8000c66:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6a:	4464      	add	r4, ip
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	b29d      	uxth	r5, r3
 8000c70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c74:	fb09 4413 	mls	r4, r9, r3, r4
 8000c78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c8c:	d26c      	bcs.n	8000d68 <__udivmoddi4+0x2ac>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	d96a      	bls.n	8000d68 <__udivmoddi4+0x2ac>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	4464      	add	r4, ip
 8000c96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ca2:	42ac      	cmp	r4, r5
 8000ca4:	46c8      	mov	r8, r9
 8000ca6:	46ae      	mov	lr, r5
 8000ca8:	d356      	bcc.n	8000d58 <__udivmoddi4+0x29c>
 8000caa:	d053      	beq.n	8000d54 <__udivmoddi4+0x298>
 8000cac:	b156      	cbz	r6, 8000cc4 <__udivmoddi4+0x208>
 8000cae:	ebb0 0208 	subs.w	r2, r0, r8
 8000cb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cba:	40ca      	lsrs	r2, r1
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	4317      	orrs	r7, r2
 8000cc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ccc:	f1c3 0120 	rsb	r1, r3, #32
 8000cd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cdc:	409d      	lsls	r5, r3
 8000cde:	432a      	orrs	r2, r5
 8000ce0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce4:	fa1f fe8c 	uxth.w	lr, ip
 8000ce8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cec:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cf6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cfa:	428d      	cmp	r5, r1
 8000cfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x258>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d0a:	d22f      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d0c:	428d      	cmp	r5, r1
 8000d0e:	d92d      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4461      	add	r1, ip
 8000d14:	1b49      	subs	r1, r1, r5
 8000d16:	b292      	uxth	r2, r2
 8000d18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d24:	fb05 f10e 	mul.w	r1, r5, lr
 8000d28:	4291      	cmp	r1, r2
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x282>
 8000d2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d34:	d216      	bcs.n	8000d64 <__udivmoddi4+0x2a8>
 8000d36:	4291      	cmp	r1, r2
 8000d38:	d914      	bls.n	8000d64 <__udivmoddi4+0x2a8>
 8000d3a:	3d02      	subs	r5, #2
 8000d3c:	4462      	add	r2, ip
 8000d3e:	1a52      	subs	r2, r2, r1
 8000d40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d44:	e738      	b.n	8000bb8 <__udivmoddi4+0xfc>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000d4c:	4639      	mov	r1, r7
 8000d4e:	e6e6      	b.n	8000b1e <__udivmoddi4+0x62>
 8000d50:	4610      	mov	r0, r2
 8000d52:	e6fb      	b.n	8000b4c <__udivmoddi4+0x90>
 8000d54:	4548      	cmp	r0, r9
 8000d56:	d2a9      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d58:	ebb9 0802 	subs.w	r8, r9, r2
 8000d5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d60:	3b01      	subs	r3, #1
 8000d62:	e7a3      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d64:	4645      	mov	r5, r8
 8000d66:	e7ea      	b.n	8000d3e <__udivmoddi4+0x282>
 8000d68:	462b      	mov	r3, r5
 8000d6a:	e794      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	e7d1      	b.n	8000d14 <__udivmoddi4+0x258>
 8000d70:	46d0      	mov	r8, sl
 8000d72:	e77b      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d74:	3d02      	subs	r5, #2
 8000d76:	4462      	add	r2, ip
 8000d78:	e732      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e70a      	b.n	8000b94 <__udivmoddi4+0xd8>
 8000d7e:	4464      	add	r4, ip
 8000d80:	3802      	subs	r0, #2
 8000d82:	e742      	b.n	8000c0a <__udivmoddi4+0x14e>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <LCD_voidInit>:
#define LCD_SLAVE_ADDRESS 0b01001110

extern I2C_HandleTypeDef hi2c1;

void LCD_voidInit(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	/*Setting 4 bits interface(Twice as the datasheet specefies)*/
	LCD_voidSendCommand(0b00110011);
 8000d8c:	2033      	movs	r0, #51	; 0x33
 8000d8e:	f000 f829 	bl	8000de4 <LCD_voidSendCommand>
	LCD_voidSendCommand(0b00110010);
 8000d92:	2032      	movs	r0, #50	; 0x32
 8000d94:	f000 f826 	bl	8000de4 <LCD_voidSendCommand>
	HAL_Delay(50);
 8000d98:	2032      	movs	r0, #50	; 0x32
 8000d9a:	f001 f923 	bl	8001fe4 <HAL_Delay>
	/*Setting the LCD Function*/
	LCD_voidSendCommand(0b00101000);
 8000d9e:	2028      	movs	r0, #40	; 0x28
 8000da0:	f000 f820 	bl	8000de4 <LCD_voidSendCommand>
	HAL_Delay(50);
 8000da4:	2032      	movs	r0, #50	; 0x32
 8000da6:	f001 f91d 	bl	8001fe4 <HAL_Delay>
	/*Clearing the display*/
	LCD_voidSendCommand(0b00000001);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f000 f81a 	bl	8000de4 <LCD_voidSendCommand>
	HAL_Delay(50);
 8000db0:	2032      	movs	r0, #50	; 0x32
 8000db2:	f001 f917 	bl	8001fe4 <HAL_Delay>
	/*Set the entry mode*/
	LCD_voidSendCommand(0b00000110);
 8000db6:	2006      	movs	r0, #6
 8000db8:	f000 f814 	bl	8000de4 <LCD_voidSendCommand>
	HAL_Delay(50);
 8000dbc:	2032      	movs	r0, #50	; 0x32
 8000dbe:	f001 f911 	bl	8001fe4 <HAL_Delay>
	/*Set the display to on*/
	LCD_voidSendCommand(0b00001100);
 8000dc2:	200c      	movs	r0, #12
 8000dc4:	f000 f80e 	bl	8000de4 <LCD_voidSendCommand>
	HAL_Delay(50);
 8000dc8:	2032      	movs	r0, #50	; 0x32
 8000dca:	f001 f90b 	bl	8001fe4 <HAL_Delay>
	/*Set the cursor to home */
	LCD_voidSendCommand(0b00000010);
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f000 f808 	bl	8000de4 <LCD_voidSendCommand>
	HAL_Delay(50);
 8000dd4:	2032      	movs	r0, #50	; 0x32
 8000dd6:	f001 f905 	bl	8001fe4 <HAL_Delay>
	/*and the Data address to 0*/
	LCD_voidSendCommand(0b10000000);
 8000dda:	2080      	movs	r0, #128	; 0x80
 8000ddc:	f000 f802 	bl	8000de4 <LCD_voidSendCommand>

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8_t Copy_uint8Command)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af02      	add	r7, sp, #8
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
 *
 *
 * 0b00000001 --> DataU --> 0b000000000-->0b00000001100
 *
 * */
	Local_uint8Local_uint8DataU=(Copy_uint8Command&0b11110000);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f023 030f 	bic.w	r3, r3, #15
 8000df4:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Command<<4)&0b11110000);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001100; //EN=1 RS=0
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	f043 030c 	orr.w	r3, r3, #12
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001000; //EN=0 RS=0
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001100; //EN=1 RS=0
 8000e10:	7bbb      	ldrb	r3, [r7, #14]
 8000e12:	f043 030c 	orr.w	r3, r3, #12
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001000; //EN=0 RS=0
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	f043 0308 	orr.w	r3, r3, #8
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8000e24:	f107 0208 	add.w	r2, r7, #8
 8000e28:	2364      	movs	r3, #100	; 0x64
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	214e      	movs	r1, #78	; 0x4e
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <LCD_voidSendCommand+0x5c>)
 8000e32:	f001 fd61 	bl	80028f8 <HAL_I2C_Master_Transmit>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000238 	.word	0x20000238

08000e44 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	71fb      	strb	r3, [r7, #7]
	 * increments by 1 for future storing, it doesnt coincide with the tail
	 * the % UART_BUFFER_SIZE checking if the index of the next storing procedure
	 * is bigger than the buffer size(ex this iteration stores in 512 byte and the next one
	 * will be in the 513 so i should reset the (i) to zero to repeat again)*/

  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e56:	3301      	adds	r3, #1
 8000e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e5c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d009      	beq.n	8000e7e <store_char+0x3a>
  {
	  /*Storing the charachter in the recent head pointed location*/
    buffer->buffer[buffer->head] = c;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	79f9      	ldrb	r1, [r7, #7]
 8000e74:	54d1      	strb	r1, [r2, r3]

    /*After storing the character, incrementing the head for the next storing */
    buffer->head = i;
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	f003 0320 	and.w	r3, r3, #32
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d013      	beq.n	8000ed6 <Uart_isr+0x4a>
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	f003 0320 	and.w	r3, r3, #32
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d00e      	beq.n	8000ed6 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <Uart_isr+0xb4>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ffb8 	bl	8000e44 <store_char>
        return;
 8000ed4:	e031      	b.n	8000f3a <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d02c      	beq.n	8000f3a <Uart_isr+0xae>
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d027      	beq.n	8000f3a <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <Uart_isr+0xb8>)
 8000eec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <Uart_isr+0xb8>)
 8000ef2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d108      	bne.n	8000f0c <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f08:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000f0a:	e015      	b.n	8000f38 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <Uart_isr+0xb8>)
 8000f0e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f12:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <Uart_isr+0xb8>)
 8000f14:	5cd3      	ldrb	r3, [r2, r3]
 8000f16:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <Uart_isr+0xb8>)
 8000f1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f1e:	3301      	adds	r3, #1
 8000f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <Uart_isr+0xb8>)
 8000f26:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	7bba      	ldrb	r2, [r7, #14]
 8000f36:	605a      	str	r2, [r3, #4]
    	return;
 8000f38:	bf00      	nop
    }
}
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000234 	.word	0x20000234
 8000f44:	2000002c 	.word	0x2000002c

08000f48 <Calculate_Car_Speed>:
#include "calculateSpeed.h"

extern uint32_t edges_counter;

float Calculate_Car_Speed()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
	float Local_uint16Speed;
	Local_uint16Speed = (edges_counter/50)/(2000.0*60);
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <Calculate_Car_Speed+0x48>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <Calculate_Car_Speed+0x4c>)
 8000f54:	fba2 2303 	umull	r2, r3, r2, r3
 8000f58:	091b      	lsrs	r3, r3, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fa9a 	bl	8000494 <__aeabi_ui2d>
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <Calculate_Car_Speed+0x50>)
 8000f66:	f7ff fc39 	bl	80007dc <__aeabi_ddiv>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	f7ff fd3b 	bl	80009ec <__aeabi_d2f>
 8000f76:	4603      	mov	r3, r0
 8000f78:	607b      	str	r3, [r7, #4]
	edges_counter=0;
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <Calculate_Car_Speed+0x48>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
	return Local_uint16Speed;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	ee07 3a90 	vmov	s15, r3
}
 8000f86:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000528 	.word	0x20000528
 8000f94:	51eb851f 	.word	0x51eb851f
 8000f98:	40fd4c00 	.word	0x40fd4c00

08000f9c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fa0:	f000 ffde 	bl	8001f60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fa4:	f000 f828 	bl	8000ff8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fa8:	f000 faee 	bl	8001588 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000fac:	f000 f890 	bl	80010d0 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000fb0:	f000 fa96 	bl	80014e0 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8000fb4:	f000 fabe 	bl	8001534 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8000fb8:	f000 f914 	bl	80011e4 <MX_TIM2_Init>
	MX_I2C2_Init();
 8000fbc:	f000 f8b6 	bl	800112c <MX_I2C2_Init>
	MX_I2C3_Init();
 8000fc0:	f000 f8e2 	bl	8001188 <MX_I2C3_Init>
	MX_TIM3_Init();
 8000fc4:	f000 f96e 	bl	80012a4 <MX_TIM3_Init>
	MX_UART5_Init();
 8000fc8:	f000 fa60 	bl	800148c <MX_UART5_Init>
	MX_TIM6_Init();
 8000fcc:	f000 f9e4 	bl	8001398 <MX_TIM6_Init>
	MX_TIM12_Init();
 8000fd0:	f000 fa18 	bl	8001404 <MX_TIM12_Init>
	/* USER CODE BEGIN 2 */
	LCD_voidInit();
 8000fd4:	f7ff fed8 	bl	8000d88 <LCD_voidInit>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <main+0x50>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <main+0x54>)
 8000fde:	f004 fc37 	bl	8005850 <osThreadNew>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a03      	ldr	r2, [pc, #12]	; (8000ff4 <main+0x58>)
 8000fe6:	6013      	str	r3, [r2, #0]
	//osKernelStart();

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <main+0x4c>
 8000fea:	bf00      	nop
 8000fec:	08006b1c 	.word	0x08006b1c
 8000ff0:	080016b5 	.word	0x080016b5
 8000ff4:	20000520 	.word	0x20000520

08000ff8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2234      	movs	r2, #52	; 0x34
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f005 fd02 	bl	8006a10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <SystemClock_Config+0xd0>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <SystemClock_Config+0xd0>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <SystemClock_Config+0xd0>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001038:	2300      	movs	r3, #0
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <SystemClock_Config+0xd4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <SystemClock_Config+0xd4>)
 8001046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <SystemClock_Config+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001058:	2302      	movs	r3, #2
 800105a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105c:	2301      	movs	r3, #1
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001060:	2310      	movs	r3, #16
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001068:	2300      	movs	r3, #0
 800106a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800106c:	2308      	movs	r3, #8
 800106e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 8001070:	2340      	movs	r3, #64	; 0x40
 8001072:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001074:	2302      	movs	r3, #2
 8001076:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800107c:	2302      	movs	r3, #2
 800107e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4618      	mov	r0, r3
 8001086:	f002 fa35 	bl	80034f4 <HAL_RCC_OscConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001090:	f000 fb2a 	bl	80016e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001094:	230f      	movs	r3, #15
 8001096:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001098:	2302      	movs	r3, #2
 800109a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	2101      	movs	r1, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 ff2a 	bl	8002f08 <HAL_RCC_ClockConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80010ba:	f000 fb15 	bl	80016e8 <Error_Handler>
	}
}
 80010be:	bf00      	nop
 80010c0:	3750      	adds	r7, #80	; 0x50
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40007000 	.word	0x40007000

080010d0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_I2C1_Init+0x54>)
 80010d6:	4a14      	ldr	r2, [pc, #80]	; (8001128 <MX_I2C1_Init+0x58>)
 80010d8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 1000;
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_I2C1_Init+0x54>)
 80010dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010e0:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <MX_I2C1_Init+0x54>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_I2C1_Init+0x54>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <MX_I2C1_Init+0x54>)
 80010f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_I2C1_Init+0x54>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_I2C1_Init+0x54>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_I2C1_Init+0x54>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_I2C1_Init+0x54>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_I2C1_Init+0x54>)
 8001110:	f001 faae 	bl	8002670 <HAL_I2C_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_I2C1_Init+0x4e>
	{
		Error_Handler();
 800111a:	f000 fae5 	bl	80016e8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000238 	.word	0x20000238
 8001128:	40005400 	.word	0x40005400

0800112c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <MX_I2C2_Init+0x54>)
 8001132:	4a14      	ldr	r2, [pc, #80]	; (8001184 <MX_I2C2_Init+0x58>)
 8001134:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 1000;
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_I2C2_Init+0x54>)
 8001138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800113c:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_I2C2_Init+0x54>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 120;
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_I2C2_Init+0x54>)
 8001146:	2278      	movs	r2, #120	; 0x78
 8001148:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <MX_I2C2_Init+0x54>)
 800114c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001150:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_I2C2_Init+0x54>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_I2C2_Init+0x54>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_I2C2_Init+0x54>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_I2C2_Init+0x54>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_I2C2_Init+0x54>)
 800116c:	f001 fa80 	bl	8002670 <HAL_I2C_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2C2_Init+0x4e>
	{
		Error_Handler();
 8001176:	f000 fab7 	bl	80016e8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000028c 	.word	0x2000028c
 8001184:	40005800 	.word	0x40005800

08001188 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <MX_I2C3_Init+0x50>)
 800118e:	4a13      	ldr	r2, [pc, #76]	; (80011dc <MX_I2C3_Init+0x54>)
 8001190:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_I2C3_Init+0x50>)
 8001194:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <MX_I2C3_Init+0x58>)
 8001196:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_I2C3_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_I2C3_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_I2C3_Init+0x50>)
 80011a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011aa:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <MX_I2C3_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_I2C3_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_I2C3_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_I2C3_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_I2C3_Init+0x50>)
 80011c6:	f001 fa53 	bl	8002670 <HAL_I2C_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 80011d0:	f000 fa8a 	bl	80016e8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200002e0 	.word	0x200002e0
 80011dc:	40005c00 	.word	0x40005c00
 80011e0:	000186a0 	.word	0x000186a0

080011e4 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001200:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <MX_TIM2_Init+0xbc>)
 8001202:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001206:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15999;
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <MX_TIM2_Init+0xbc>)
 800120a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800120e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <MX_TIM2_Init+0xbc>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 12000;
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <MX_TIM2_Init+0xbc>)
 8001218:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800121c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <MX_TIM2_Init+0xbc>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_TIM2_Init+0xbc>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800122a:	481d      	ldr	r0, [pc, #116]	; (80012a0 <MX_TIM2_Init+0xbc>)
 800122c:	f002 fd0f 	bl	8003c4e <HAL_TIM_IC_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8001236:	f000 fa57 	bl	80016e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4619      	mov	r1, r3
 8001248:	4815      	ldr	r0, [pc, #84]	; (80012a0 <MX_TIM2_Init+0xbc>)
 800124a:	f003 fb4d 	bl	80048e8 <HAL_TIMEx_MasterConfigSynchronization>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 8001254:	f000 fa48 	bl	80016e8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001258:	230a      	movs	r3, #10
 800125a:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800125c:	2301      	movs	r3, #1
 800125e:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	4619      	mov	r1, r3
 800126e:	480c      	ldr	r0, [pc, #48]	; (80012a0 <MX_TIM2_Init+0xbc>)
 8001270:	f002 fe44 	bl	8003efc <HAL_TIM_IC_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 800127a:	f000 fa35 	bl	80016e8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	2204      	movs	r2, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_TIM2_Init+0xbc>)
 800128a:	f002 fe37 	bl	8003efc <HAL_TIM_IC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8001294:	f000 fa28 	bl	80016e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000334 	.word	0x20000334

080012a4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
 80012c2:	615a      	str	r2, [r3, #20]
 80012c4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <MX_TIM3_Init+0xec>)
 80012c8:	4a32      	ldr	r2, [pc, #200]	; (8001394 <MX_TIM3_Init+0xf0>)
 80012ca:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 320-1;
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <MX_TIM3_Init+0xec>)
 80012ce:	f240 123f 	movw	r2, #319	; 0x13f
 80012d2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <MX_TIM3_Init+0xec>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <MX_TIM3_Init+0xec>)
 80012dc:	2263      	movs	r2, #99	; 0x63
 80012de:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <MX_TIM3_Init+0xec>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <MX_TIM3_Init+0xec>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012ec:	4828      	ldr	r0, [pc, #160]	; (8001390 <MX_TIM3_Init+0xec>)
 80012ee:	f002 fc5f 	bl	8003bb0 <HAL_TIM_PWM_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 80012f8:	f000 f9f6 	bl	80016e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	4619      	mov	r1, r3
 800130a:	4821      	ldr	r0, [pc, #132]	; (8001390 <MX_TIM3_Init+0xec>)
 800130c:	f003 faec 	bl	80048e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 8001316:	f000 f9e7 	bl	80016e8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131a:	2360      	movs	r3, #96	; 0x60
 800131c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	4619      	mov	r1, r3
 8001330:	4817      	ldr	r0, [pc, #92]	; (8001390 <MX_TIM3_Init+0xec>)
 8001332:	f002 fe7f 	bl	8004034 <HAL_TIM_PWM_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 800133c:	f000 f9d4 	bl	80016e8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2204      	movs	r2, #4
 8001344:	4619      	mov	r1, r3
 8001346:	4812      	ldr	r0, [pc, #72]	; (8001390 <MX_TIM3_Init+0xec>)
 8001348:	f002 fe74 	bl	8004034 <HAL_TIM_PWM_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8001352:	f000 f9c9 	bl	80016e8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2208      	movs	r2, #8
 800135a:	4619      	mov	r1, r3
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <MX_TIM3_Init+0xec>)
 800135e:	f002 fe69 	bl	8004034 <HAL_TIM_PWM_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0xc8>
	{
		Error_Handler();
 8001368:	f000 f9be 	bl	80016e8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	220c      	movs	r2, #12
 8001370:	4619      	mov	r1, r3
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <MX_TIM3_Init+0xec>)
 8001374:	f002 fe5e 	bl	8004034 <HAL_TIM_PWM_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0xde>
	{
		Error_Handler();
 800137e:	f000 f9b3 	bl	80016e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001382:	4803      	ldr	r0, [pc, #12]	; (8001390 <MX_TIM3_Init+0xec>)
 8001384:	f000 fb5c 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000037c 	.word	0x2000037c
 8001394:	40000400 	.word	0x40000400

08001398 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139e:	463b      	mov	r3, r7
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_TIM6_Init+0x64>)
 80013a8:	4a15      	ldr	r2, [pc, #84]	; (8001400 <MX_TIM6_Init+0x68>)
 80013aa:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <MX_TIM6_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_TIM6_Init+0x64>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535;
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <MX_TIM6_Init+0x64>)
 80013ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013be:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_TIM6_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013c6:	480d      	ldr	r0, [pc, #52]	; (80013fc <MX_TIM6_Init+0x64>)
 80013c8:	f002 fb32 	bl	8003a30 <HAL_TIM_Base_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 80013d2:	f000 f989 	bl	80016e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_TIM6_Init+0x64>)
 80013e4:	f003 fa80 	bl	80048e8 <HAL_TIMEx_MasterConfigSynchronization>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 80013ee:	f000 f97b 	bl	80016e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200003c4 	.word	0x200003c4
 8001400:	40001000 	.word	0x40001000

08001404 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	615a      	str	r2, [r3, #20]
 800141a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <MX_TIM12_Init+0x80>)
 800141e:	4a1a      	ldr	r2, [pc, #104]	; (8001488 <MX_TIM12_Init+0x84>)
 8001420:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 160-1;
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_TIM12_Init+0x80>)
 8001424:	229f      	movs	r2, #159	; 0x9f
 8001426:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_TIM12_Init+0x80>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 100-1;
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_TIM12_Init+0x80>)
 8001430:	2263      	movs	r2, #99	; 0x63
 8001432:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_TIM12_Init+0x80>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_TIM12_Init+0x80>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001440:	4810      	ldr	r0, [pc, #64]	; (8001484 <MX_TIM12_Init+0x80>)
 8001442:	f002 fbb5 	bl	8003bb0 <HAL_TIM_PWM_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM12_Init+0x4c>
	{
		Error_Handler();
 800144c:	f000 f94c 	bl	80016e8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001450:	2360      	movs	r3, #96	; 0x60
 8001452:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2200      	movs	r2, #0
 8001464:	4619      	mov	r1, r3
 8001466:	4807      	ldr	r0, [pc, #28]	; (8001484 <MX_TIM12_Init+0x80>)
 8001468:	f002 fde4 	bl	8004034 <HAL_TIM_PWM_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM12_Init+0x72>
	{
		Error_Handler();
 8001472:	f000 f939 	bl	80016e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <MX_TIM12_Init+0x80>)
 8001478:	f000 fae2 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000040c 	.word	0x2000040c
 8001488:	40001800 	.word	0x40001800

0800148c <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_UART5_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <MX_UART5_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 9600;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_UART5_Init+0x4c>)
 8001498:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800149c:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_UART5_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_UART5_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_UART5_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_UART5_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_UART5_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_UART5_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_UART5_Init+0x4c>)
 80014c4:	f003 faa0 	bl	8004a08 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_UART5_Init+0x46>
	{
		Error_Handler();
 80014ce:	f000 f90b 	bl	80016e8 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000454 	.word	0x20000454
 80014dc:	40005000 	.word	0x40005000

080014e0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_USART1_UART_Init+0x4c>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <MX_USART1_UART_Init+0x50>)
 80014e8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <MX_USART1_UART_Init+0x4c>)
 80014ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014f0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_USART1_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_USART1_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_USART1_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_USART1_UART_Init+0x4c>)
 8001506:	220c      	movs	r2, #12
 8001508:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_USART1_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_USART1_UART_Init+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_USART1_UART_Init+0x4c>)
 8001518:	f003 fa76 	bl	8004a08 <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001522:	f000 f8e1 	bl	80016e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000498 	.word	0x20000498
 8001530:	40011000 	.word	0x40011000

08001534 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USART3_UART_Init+0x4c>)
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <MX_USART3_UART_Init+0x50>)
 800153c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <MX_USART3_UART_Init+0x4c>)
 8001540:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001544:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USART3_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USART3_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USART3_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USART3_UART_Init+0x4c>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USART3_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_USART3_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_USART3_UART_Init+0x4c>)
 800156c:	f003 fa4c 	bl	8004a08 <HAL_UART_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001576:	f000 f8b7 	bl	80016e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200004dc 	.word	0x200004dc
 8001584:	40004800 	.word	0x40004800

08001588 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b32      	ldr	r3, [pc, #200]	; (800166c <MX_GPIO_Init+0xe4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a31      	ldr	r2, [pc, #196]	; (800166c <MX_GPIO_Init+0xe4>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b2f      	ldr	r3, [pc, #188]	; (800166c <MX_GPIO_Init+0xe4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <MX_GPIO_Init+0xe4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a2a      	ldr	r2, [pc, #168]	; (800166c <MX_GPIO_Init+0xe4>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b28      	ldr	r3, [pc, #160]	; (800166c <MX_GPIO_Init+0xe4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <MX_GPIO_Init+0xe4>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a23      	ldr	r2, [pc, #140]	; (800166c <MX_GPIO_Init+0xe4>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b21      	ldr	r3, [pc, #132]	; (800166c <MX_GPIO_Init+0xe4>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_GPIO_Init+0xe4>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <MX_GPIO_Init+0xe4>)
 80015fc:	f043 0308 	orr.w	r3, r3, #8
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_GPIO_Init+0xe4>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800160e:	2200      	movs	r2, #0
 8001610:	f242 311c 	movw	r1, #8988	; 0x231c
 8001614:	4816      	ldr	r0, [pc, #88]	; (8001670 <MX_GPIO_Init+0xe8>)
 8001616:	f001 f811 	bl	800263c <HAL_GPIO_WritePin>
			|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001620:	4814      	ldr	r0, [pc, #80]	; (8001674 <MX_GPIO_Init+0xec>)
 8001622:	f001 f80b 	bl	800263c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001626:	f242 331c 	movw	r3, #8988	; 0x231c
 800162a:	617b      	str	r3, [r7, #20]
			|GPIO_PIN_8|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	480c      	ldr	r0, [pc, #48]	; (8001670 <MX_GPIO_Init+0xe8>)
 8001640:	f000 fe68 	bl	8002314 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8001644:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001648:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_GPIO_Init+0xec>)
 800165e:	f000 fe59 	bl	8002314 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40020800 	.word	0x40020800
 8001674:	40020400 	.word	0x40020400

08001678 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001688:	d10c      	bne.n	80016a4 <HAL_TIM_IC_CaptureCallback+0x2c>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7f1b      	ldrb	r3, [r3, #28]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d003      	beq.n	800169a <HAL_TIM_IC_CaptureCallback+0x22>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7f1b      	ldrb	r3, [r3, #28]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d104      	bne.n	80016a4 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		edges_counter++;
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_TIM_IC_CaptureCallback+0x38>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	4a03      	ldr	r2, [pc, #12]	; (80016b0 <HAL_TIM_IC_CaptureCallback+0x38>)
 80016a2:	6013      	str	r3, [r2, #0]
	}
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	20000528 	.word	0x20000528

080016b4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80016bc:	2001      	movs	r0, #1
 80016be:	f004 f959 	bl	8005974 <osDelay>
 80016c2:	e7fb      	b.n	80016bc <StartDefaultTask+0x8>

080016c4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80016d6:	f000 fc65 	bl	8001fa4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40001400 	.word	0x40001400

080016e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016f0:	e7fe      	b.n	80016f0 <Error_Handler+0x8>
	...

080016f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_MspInit+0x54>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a11      	ldr	r2, [pc, #68]	; (8001748 <HAL_MspInit+0x54>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_MspInit+0x54>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_MspInit+0x54>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_MspInit+0x54>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_MspInit+0x54>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	210f      	movs	r1, #15
 8001736:	f06f 0001 	mvn.w	r0, #1
 800173a:	f000 fd2f 	bl	800219c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800

0800174c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08e      	sub	sp, #56	; 0x38
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a5b      	ldr	r2, [pc, #364]	; (80018d8 <HAL_I2C_MspInit+0x18c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d12c      	bne.n	80017c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
 8001772:	4b5a      	ldr	r3, [pc, #360]	; (80018dc <HAL_I2C_MspInit+0x190>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a59      	ldr	r2, [pc, #356]	; (80018dc <HAL_I2C_MspInit+0x190>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b57      	ldr	r3, [pc, #348]	; (80018dc <HAL_I2C_MspInit+0x190>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	623b      	str	r3, [r7, #32]
 8001788:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800178a:	23c0      	movs	r3, #192	; 0xc0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178e:	2312      	movs	r3, #18
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800179a:	2304      	movs	r3, #4
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	484e      	ldr	r0, [pc, #312]	; (80018e0 <HAL_I2C_MspInit+0x194>)
 80017a6:	f000 fdb5 	bl	8002314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <HAL_I2C_MspInit+0x190>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a4a      	ldr	r2, [pc, #296]	; (80018dc <HAL_I2C_MspInit+0x190>)
 80017b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b48      	ldr	r3, [pc, #288]	; (80018dc <HAL_I2C_MspInit+0x190>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80017c6:	e082      	b.n	80018ce <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a45      	ldr	r2, [pc, #276]	; (80018e4 <HAL_I2C_MspInit+0x198>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d12d      	bne.n	800182e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <HAL_I2C_MspInit+0x190>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a40      	ldr	r2, [pc, #256]	; (80018dc <HAL_I2C_MspInit+0x190>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <HAL_I2C_MspInit+0x190>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80017ee:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f4:	2312      	movs	r3, #18
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001800:	2304      	movs	r3, #4
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	4835      	ldr	r0, [pc, #212]	; (80018e0 <HAL_I2C_MspInit+0x194>)
 800180c:	f000 fd82 	bl	8002314 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	4b31      	ldr	r3, [pc, #196]	; (80018dc <HAL_I2C_MspInit+0x190>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	4a30      	ldr	r2, [pc, #192]	; (80018dc <HAL_I2C_MspInit+0x190>)
 800181a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800181e:	6413      	str	r3, [r2, #64]	; 0x40
 8001820:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <HAL_I2C_MspInit+0x190>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	697b      	ldr	r3, [r7, #20]
}
 800182c:	e04f      	b.n	80018ce <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a2d      	ldr	r2, [pc, #180]	; (80018e8 <HAL_I2C_MspInit+0x19c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d14a      	bne.n	80018ce <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	4b27      	ldr	r3, [pc, #156]	; (80018dc <HAL_I2C_MspInit+0x190>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	4a26      	ldr	r2, [pc, #152]	; (80018dc <HAL_I2C_MspInit+0x190>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6313      	str	r3, [r2, #48]	; 0x30
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_I2C_MspInit+0x190>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_I2C_MspInit+0x190>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <HAL_I2C_MspInit+0x190>)
 800185e:	f043 0302 	orr.w	r3, r3, #2
 8001862:	6313      	str	r3, [r2, #48]	; 0x30
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <HAL_I2C_MspInit+0x190>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001876:	2312      	movs	r3, #18
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001882:	2304      	movs	r3, #4
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188a:	4619      	mov	r1, r3
 800188c:	4817      	ldr	r0, [pc, #92]	; (80018ec <HAL_I2C_MspInit+0x1a0>)
 800188e:	f000 fd41 	bl	8002314 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001892:	2310      	movs	r3, #16
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001896:	2312      	movs	r3, #18
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018a2:	2304      	movs	r3, #4
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018aa:	4619      	mov	r1, r3
 80018ac:	480c      	ldr	r0, [pc, #48]	; (80018e0 <HAL_I2C_MspInit+0x194>)
 80018ae:	f000 fd31 	bl	8002314 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_I2C_MspInit+0x190>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_I2C_MspInit+0x190>)
 80018bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_I2C_MspInit+0x190>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
}
 80018ce:	bf00      	nop
 80018d0:	3738      	adds	r7, #56	; 0x38
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40005400 	.word	0x40005400
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40005800 	.word	0x40005800
 80018e8:	40005c00 	.word	0x40005c00
 80018ec:	40020000 	.word	0x40020000

080018f0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001910:	d133      	bne.n	800197a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_TIM_IC_MspInit+0x94>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	4a1a      	ldr	r2, [pc, #104]	; (8001984 <HAL_TIM_IC_MspInit+0x94>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_TIM_IC_MspInit+0x94>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_TIM_IC_MspInit+0x94>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a13      	ldr	r2, [pc, #76]	; (8001984 <HAL_TIM_IC_MspInit+0x94>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_TIM_IC_MspInit+0x94>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800194a:	2303      	movs	r3, #3
 800194c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800195a:	2301      	movs	r3, #1
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4808      	ldr	r0, [pc, #32]	; (8001988 <HAL_TIM_IC_MspInit+0x98>)
 8001966:	f000 fcd5 	bl	8002314 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	201c      	movs	r0, #28
 8001970:	f000 fc14 	bl	800219c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001974:	201c      	movs	r0, #28
 8001976:	f000 fc2d 	bl	80021d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	; 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40020000 	.word	0x40020000

0800198c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a15      	ldr	r2, [pc, #84]	; (80019f0 <HAL_TIM_PWM_MspInit+0x64>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10e      	bne.n	80019bc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_TIM_PWM_MspInit+0x68>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <HAL_TIM_PWM_MspInit+0x68>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_TIM_PWM_MspInit+0x68>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80019ba:	e012      	b.n	80019e2 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10d      	bne.n	80019e2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_TIM_PWM_MspInit+0x68>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_TIM_PWM_MspInit+0x68>)
 80019d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_TIM_PWM_MspInit+0x68>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40000400 	.word	0x40000400
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40001800 	.word	0x40001800

080019fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <HAL_TIM_Base_MspInit+0x3c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d10d      	bne.n	8001a2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_TIM_Base_MspInit+0x40>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_TIM_Base_MspInit+0x40>)
 8001a18:	f043 0310 	orr.w	r3, r3, #16
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_TIM_Base_MspInit+0x40>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40001000 	.word	0x40001000
 8001a3c:	40023800 	.word	0x40023800

08001a40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a33      	ldr	r2, [pc, #204]	; (8001b2c <HAL_TIM_MspPostInit+0xec>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d13c      	bne.n	8001adc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <HAL_TIM_MspPostInit+0xf0>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a31      	ldr	r2, [pc, #196]	; (8001b30 <HAL_TIM_MspPostInit+0xf0>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b2f      	ldr	r3, [pc, #188]	; (8001b30 <HAL_TIM_MspPostInit+0xf0>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <HAL_TIM_MspPostInit+0xf0>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a2a      	ldr	r2, [pc, #168]	; (8001b30 <HAL_TIM_MspPostInit+0xf0>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <HAL_TIM_MspPostInit+0xf0>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a9a:	23c0      	movs	r3, #192	; 0xc0
 8001a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	481f      	ldr	r0, [pc, #124]	; (8001b34 <HAL_TIM_MspPostInit+0xf4>)
 8001ab6:	f000 fc2d 	bl	8002314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aba:	2303      	movs	r3, #3
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aca:	2302      	movs	r3, #2
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4818      	ldr	r0, [pc, #96]	; (8001b38 <HAL_TIM_MspPostInit+0xf8>)
 8001ad6:	f000 fc1d 	bl	8002314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001ada:	e023      	b.n	8001b24 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM12)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a16      	ldr	r2, [pc, #88]	; (8001b3c <HAL_TIM_MspPostInit+0xfc>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d11e      	bne.n	8001b24 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_TIM_MspPostInit+0xf0>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <HAL_TIM_MspPostInit+0xf0>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_TIM_MspPostInit+0xf0>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001b14:	2309      	movs	r3, #9
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4806      	ldr	r0, [pc, #24]	; (8001b38 <HAL_TIM_MspPostInit+0xf8>)
 8001b20:	f000 fbf8 	bl	8002314 <HAL_GPIO_Init>
}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40000400 	.word	0x40000400
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40001800 	.word	0x40001800

08001b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08e      	sub	sp, #56	; 0x38
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a67      	ldr	r2, [pc, #412]	; (8001cfc <HAL_UART_MspInit+0x1bc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d153      	bne.n	8001c0a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
 8001b66:	4b66      	ldr	r3, [pc, #408]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a65      	ldr	r2, [pc, #404]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001b6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b63      	ldr	r3, [pc, #396]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b7a:	623b      	str	r3, [r7, #32]
 8001b7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	4b5f      	ldr	r3, [pc, #380]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a5e      	ldr	r2, [pc, #376]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b5c      	ldr	r3, [pc, #368]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	4b58      	ldr	r3, [pc, #352]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a57      	ldr	r2, [pc, #348]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b55      	ldr	r3, [pc, #340]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bc8:	2308      	movs	r3, #8
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	484c      	ldr	r0, [pc, #304]	; (8001d04 <HAL_UART_MspInit+0x1c4>)
 8001bd4:	f000 fb9e 	bl	8002314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001be8:	2308      	movs	r3, #8
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4845      	ldr	r0, [pc, #276]	; (8001d08 <HAL_UART_MspInit+0x1c8>)
 8001bf4:	f000 fb8e 	bl	8002314 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2107      	movs	r1, #7
 8001bfc:	2035      	movs	r0, #53	; 0x35
 8001bfe:	f000 facd 	bl	800219c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001c02:	2035      	movs	r0, #53	; 0x35
 8001c04:	f000 fae6 	bl	80021d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c08:	e074      	b.n	8001cf4 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a3f      	ldr	r2, [pc, #252]	; (8001d0c <HAL_UART_MspInit+0x1cc>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d135      	bne.n	8001c80 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	4a38      	ldr	r2, [pc, #224]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001c1e:	f043 0310 	orr.w	r3, r3, #16
 8001c22:	6453      	str	r3, [r2, #68]	; 0x44
 8001c24:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4a31      	ldr	r2, [pc, #196]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c40:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c4c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c5e:	2307      	movs	r3, #7
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	4619      	mov	r1, r3
 8001c68:	4829      	ldr	r0, [pc, #164]	; (8001d10 <HAL_UART_MspInit+0x1d0>)
 8001c6a:	f000 fb53 	bl	8002314 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2106      	movs	r1, #6
 8001c72:	2025      	movs	r0, #37	; 0x25
 8001c74:	f000 fa92 	bl	800219c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c78:	2025      	movs	r0, #37	; 0x25
 8001c7a:	f000 faab 	bl	80021d4 <HAL_NVIC_EnableIRQ>
}
 8001c7e:	e039      	b.n	8001cf4 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <HAL_UART_MspInit+0x1d4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d134      	bne.n	8001cf4 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c98:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_UART_MspInit+0x1c0>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001cc2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cd4:	2307      	movs	r3, #7
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4809      	ldr	r0, [pc, #36]	; (8001d04 <HAL_UART_MspInit+0x1c4>)
 8001ce0:	f000 fb18 	bl	8002314 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	2027      	movs	r0, #39	; 0x27
 8001cea:	f000 fa57 	bl	800219c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cee:	2027      	movs	r0, #39	; 0x27
 8001cf0:	f000 fa70 	bl	80021d4 <HAL_NVIC_EnableIRQ>
}
 8001cf4:	bf00      	nop
 8001cf6:	3738      	adds	r7, #56	; 0x38
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40005000 	.word	0x40005000
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020800 	.word	0x40020800
 8001d08:	40020c00 	.word	0x40020c00
 8001d0c:	40011000 	.word	0x40011000
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40004800 	.word	0x40004800

08001d18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08e      	sub	sp, #56	; 0x38
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <HAL_InitTick+0xe4>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	4a32      	ldr	r2, [pc, #200]	; (8001dfc <HAL_InitTick+0xe4>)
 8001d32:	f043 0320 	orr.w	r3, r3, #32
 8001d36:	6413      	str	r3, [r2, #64]	; 0x40
 8001d38:	4b30      	ldr	r3, [pc, #192]	; (8001dfc <HAL_InitTick+0xe4>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d44:	f107 0210 	add.w	r2, r7, #16
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f001 f9f4 	bl	800313c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d5e:	f001 f9c5 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8001d62:	6378      	str	r0, [r7, #52]	; 0x34
 8001d64:	e004      	b.n	8001d70 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d66:	f001 f9c1 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d72:	4a23      	ldr	r2, [pc, #140]	; (8001e00 <HAL_InitTick+0xe8>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	0c9b      	lsrs	r3, r3, #18
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001d7e:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_InitTick+0xec>)
 8001d80:	4a21      	ldr	r2, [pc, #132]	; (8001e08 <HAL_InitTick+0xf0>)
 8001d82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001d84:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <HAL_InitTick+0xec>)
 8001d86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d8a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001d8c:	4a1d      	ldr	r2, [pc, #116]	; (8001e04 <HAL_InitTick+0xec>)
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001d92:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <HAL_InitTick+0xec>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <HAL_InitTick+0xec>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_InitTick+0xec>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001da4:	4817      	ldr	r0, [pc, #92]	; (8001e04 <HAL_InitTick+0xec>)
 8001da6:	f001 fe43 	bl	8003a30 <HAL_TIM_Base_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001db0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d11b      	bne.n	8001df0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001db8:	4812      	ldr	r0, [pc, #72]	; (8001e04 <HAL_InitTick+0xec>)
 8001dba:	f001 fe89 	bl	8003ad0 <HAL_TIM_Base_Start_IT>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d111      	bne.n	8001df0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001dcc:	2037      	movs	r0, #55	; 0x37
 8001dce:	f000 fa01 	bl	80021d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d808      	bhi.n	8001dea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	2037      	movs	r0, #55	; 0x37
 8001dde:	f000 f9dd 	bl	800219c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_InitTick+0xf4>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	e002      	b.n	8001df0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001df0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3738      	adds	r7, #56	; 0x38
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	431bde83 	.word	0x431bde83
 8001e04:	20000530 	.word	0x20000530
 8001e08:	40001400 	.word	0x40001400
 8001e0c:	20000004 	.word	0x20000004

08001e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <NMI_Handler+0x4>

08001e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1a:	e7fe      	b.n	8001e1a <HardFault_Handler+0x4>

08001e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <MemManage_Handler+0x4>

08001e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e26:	e7fe      	b.n	8001e26 <BusFault_Handler+0x4>

08001e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <UsageFault_Handler+0x4>
	...

08001e30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	float Local_fSpeed_In_Decimals;
	is_two_readings++;
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <TIM2_IRQHandler+0x5c>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <TIM2_IRQHandler+0x5c>)
 8001e40:	701a      	strb	r2, [r3, #0]
	if(is_two_readings == 2){
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <TIM2_IRQHandler+0x5c>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d119      	bne.n	8001e7e <TIM2_IRQHandler+0x4e>
		Local_fSpeed_In_Decimals=Calculate_Car_Speed();
 8001e4a:	f7ff f87d 	bl	8000f48 <Calculate_Car_Speed>
 8001e4e:	ed87 0a01 	vstr	s0, [r7, #4]
         Global_Speed=round(Local_fSpeed_In_Decimals);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fb40 	bl	80004d8 <__aeabi_f2d>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	ec43 2b10 	vmov	d0, r2, r3
 8001e60:	f004 fe02 	bl	8006a68 <round>
 8001e64:	ec53 2b10 	vmov	r2, r3, d0
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7fe fd9e 	bl	80009ac <__aeabi_d2uiz>
 8001e70:	4603      	mov	r3, r0
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <TIM2_IRQHandler+0x60>)
 8001e76:	801a      	strh	r2, [r3, #0]
		is_two_readings = 0;
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <TIM2_IRQHandler+0x5c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <TIM2_IRQHandler+0x64>)
 8001e80:	f001 ff34 	bl	8003cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000524 	.word	0x20000524
 8001e90:	2000052c 	.word	0x2000052c
 8001e94:	20000334 	.word	0x20000334

08001e98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <USART1_IRQHandler+0x10>)
 8001e9e:	f7fe fff5 	bl	8000e8c <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
 // HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000498 	.word	0x20000498

08001eac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <USART3_IRQHandler+0x10>)
 8001eb2:	f002 fdf7 	bl	8004aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200004dc 	.word	0x200004dc

08001ec0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <UART5_IRQHandler+0x10>)
 8001ec6:	f002 fded 	bl	8004aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000454 	.word	0x20000454

08001ed4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <TIM7_IRQHandler+0x10>)
 8001eda:	f001 ff07 	bl	8003cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000530 	.word	0x20000530

08001ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <SystemInit+0x20>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <SystemInit+0x20>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f10:	480d      	ldr	r0, [pc, #52]	; (8001f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f12:	490e      	ldr	r1, [pc, #56]	; (8001f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f14:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f18:	e002      	b.n	8001f20 <LoopCopyDataInit>

08001f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1e:	3304      	adds	r3, #4

08001f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f24:	d3f9      	bcc.n	8001f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f26:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f28:	4c0b      	ldr	r4, [pc, #44]	; (8001f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f2c:	e001      	b.n	8001f32 <LoopFillZerobss>

08001f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f30:	3204      	adds	r2, #4

08001f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f34:	d3fb      	bcc.n	8001f2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f36:	f7ff ffd7 	bl	8001ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f004 fd71 	bl	8006a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3e:	f7ff f82d 	bl	8000f9c <main>
  bx  lr    
 8001f42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f50:	08006b68 	.word	0x08006b68
  ldr r2, =_sbss
 8001f54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f58:	20004694 	.word	0x20004694

08001f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC_IRQHandler>
	...

08001f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_Init+0x40>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0d      	ldr	r2, [pc, #52]	; (8001fa0 <HAL_Init+0x40>)
 8001f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_Init+0x40>)
 8001f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a07      	ldr	r2, [pc, #28]	; (8001fa0 <HAL_Init+0x40>)
 8001f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f000 f8fc 	bl	8002186 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8e:	200f      	movs	r0, #15
 8001f90:	f7ff fec2 	bl	8001d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f94:	f7ff fbae 	bl	80016f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023c00 	.word	0x40023c00

08001fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x20>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <HAL_IncTick+0x24>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	20000578 	.word	0x20000578

08001fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetTick+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000578 	.word	0x20000578

08001fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff ffee 	bl	8001fcc <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d005      	beq.n	800200a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_Delay+0x44>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800200a:	bf00      	nop
 800200c:	f7ff ffde 	bl	8001fcc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f7      	bhi.n	800200c <HAL_Delay+0x28>
  {
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000008 	.word	0x20000008

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4907      	ldr	r1, [pc, #28]	; (80020c8 <__NVIC_EnableIRQ+0x38>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	; (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	; (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff4c 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ae:	f7ff ff61 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	6978      	ldr	r0, [r7, #20]
 80021ba:	f7ff ffb1 	bl	8002120 <NVIC_EncodePriority>
 80021be:	4602      	mov	r2, r0
 80021c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff80 	bl	80020cc <__NVIC_SetPriority>
}
 80021cc:	bf00      	nop
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff54 	bl	8002090 <__NVIC_EnableIRQ>
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021fe:	f7ff fee5 	bl	8001fcc <HAL_GetTick>
 8002202:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d008      	beq.n	8002222 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2280      	movs	r2, #128	; 0x80
 8002214:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e052      	b.n	80022c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0216 	bic.w	r2, r2, #22
 8002230:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002240:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <HAL_DMA_Abort+0x62>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0208 	bic.w	r2, r2, #8
 8002260:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002272:	e013      	b.n	800229c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002274:	f7ff feaa 	bl	8001fcc <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b05      	cmp	r3, #5
 8002280:	d90c      	bls.n	800229c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2220      	movs	r2, #32
 8002286:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2203      	movs	r2, #3
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e015      	b.n	80022c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1e4      	bne.n	8002274 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ae:	223f      	movs	r2, #63	; 0x3f
 80022b0:	409a      	lsls	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d004      	beq.n	80022ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2280      	movs	r2, #128	; 0x80
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00c      	b.n	8002308 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2205      	movs	r2, #5
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0201 	bic.w	r2, r2, #1
 8002304:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	e165      	b.n	80025fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002330:	2201      	movs	r2, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	429a      	cmp	r2, r3
 800234a:	f040 8154 	bne.w	80025f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d005      	beq.n	8002366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002362:	2b02      	cmp	r3, #2
 8002364:	d130      	bne.n	80023c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800239c:	2201      	movs	r2, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 0201 	and.w	r2, r3, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d017      	beq.n	8002404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d123      	bne.n	8002458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	08da      	lsrs	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3208      	adds	r2, #8
 8002418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	220f      	movs	r2, #15
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80ae 	beq.w	80025f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b5d      	ldr	r3, [pc, #372]	; (8002614 <HAL_GPIO_Init+0x300>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	4a5c      	ldr	r2, [pc, #368]	; (8002614 <HAL_GPIO_Init+0x300>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	; 0x44
 80024aa:	4b5a      	ldr	r3, [pc, #360]	; (8002614 <HAL_GPIO_Init+0x300>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b6:	4a58      	ldr	r2, [pc, #352]	; (8002618 <HAL_GPIO_Init+0x304>)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4f      	ldr	r2, [pc, #316]	; (800261c <HAL_GPIO_Init+0x308>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d025      	beq.n	800252e <HAL_GPIO_Init+0x21a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4e      	ldr	r2, [pc, #312]	; (8002620 <HAL_GPIO_Init+0x30c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01f      	beq.n	800252a <HAL_GPIO_Init+0x216>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4d      	ldr	r2, [pc, #308]	; (8002624 <HAL_GPIO_Init+0x310>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_Init+0x212>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4c      	ldr	r2, [pc, #304]	; (8002628 <HAL_GPIO_Init+0x314>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x20e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4b      	ldr	r2, [pc, #300]	; (800262c <HAL_GPIO_Init+0x318>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x20a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4a      	ldr	r2, [pc, #296]	; (8002630 <HAL_GPIO_Init+0x31c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x206>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a49      	ldr	r2, [pc, #292]	; (8002634 <HAL_GPIO_Init+0x320>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x202>
 8002512:	2306      	movs	r3, #6
 8002514:	e00c      	b.n	8002530 <HAL_GPIO_Init+0x21c>
 8002516:	2307      	movs	r3, #7
 8002518:	e00a      	b.n	8002530 <HAL_GPIO_Init+0x21c>
 800251a:	2305      	movs	r3, #5
 800251c:	e008      	b.n	8002530 <HAL_GPIO_Init+0x21c>
 800251e:	2304      	movs	r3, #4
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x21c>
 8002522:	2303      	movs	r3, #3
 8002524:	e004      	b.n	8002530 <HAL_GPIO_Init+0x21c>
 8002526:	2302      	movs	r3, #2
 8002528:	e002      	b.n	8002530 <HAL_GPIO_Init+0x21c>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_GPIO_Init+0x21c>
 800252e:	2300      	movs	r3, #0
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	f002 0203 	and.w	r2, r2, #3
 8002536:	0092      	lsls	r2, r2, #2
 8002538:	4093      	lsls	r3, r2
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002540:	4935      	ldr	r1, [pc, #212]	; (8002618 <HAL_GPIO_Init+0x304>)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	089b      	lsrs	r3, r3, #2
 8002546:	3302      	adds	r3, #2
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800254e:	4b3a      	ldr	r3, [pc, #232]	; (8002638 <HAL_GPIO_Init+0x324>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002572:	4a31      	ldr	r2, [pc, #196]	; (8002638 <HAL_GPIO_Init+0x324>)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002578:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <HAL_GPIO_Init+0x324>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800259c:	4a26      	ldr	r2, [pc, #152]	; (8002638 <HAL_GPIO_Init+0x324>)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025a2:	4b25      	ldr	r3, [pc, #148]	; (8002638 <HAL_GPIO_Init+0x324>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025c6:	4a1c      	ldr	r2, [pc, #112]	; (8002638 <HAL_GPIO_Init+0x324>)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025cc:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <HAL_GPIO_Init+0x324>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f0:	4a11      	ldr	r2, [pc, #68]	; (8002638 <HAL_GPIO_Init+0x324>)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3301      	adds	r3, #1
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b0f      	cmp	r3, #15
 8002600:	f67f ae96 	bls.w	8002330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3724      	adds	r7, #36	; 0x24
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	40013800 	.word	0x40013800
 800261c:	40020000 	.word	0x40020000
 8002620:	40020400 	.word	0x40020400
 8002624:	40020800 	.word	0x40020800
 8002628:	40020c00 	.word	0x40020c00
 800262c:	40021000 	.word	0x40021000
 8002630:	40021400 	.word	0x40021400
 8002634:	40021800 	.word	0x40021800
 8002638:	40013c00 	.word	0x40013c00

0800263c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
 8002648:	4613      	mov	r3, r2
 800264a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800264c:	787b      	ldrb	r3, [r7, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002658:	e003      	b.n	8002662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	041a      	lsls	r2, r3, #16
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	619a      	str	r2, [r3, #24]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e12b      	b.n	80028da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff f858 	bl	800174c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026d4:	f000 fd0a 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 80026d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4a81      	ldr	r2, [pc, #516]	; (80028e4 <HAL_I2C_Init+0x274>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d807      	bhi.n	80026f4 <HAL_I2C_Init+0x84>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a80      	ldr	r2, [pc, #512]	; (80028e8 <HAL_I2C_Init+0x278>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	bf94      	ite	ls
 80026ec:	2301      	movls	r3, #1
 80026ee:	2300      	movhi	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	e006      	b.n	8002702 <HAL_I2C_Init+0x92>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4a7d      	ldr	r2, [pc, #500]	; (80028ec <HAL_I2C_Init+0x27c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	bf94      	ite	ls
 80026fc:	2301      	movls	r3, #1
 80026fe:	2300      	movhi	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0e7      	b.n	80028da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4a78      	ldr	r2, [pc, #480]	; (80028f0 <HAL_I2C_Init+0x280>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0c9b      	lsrs	r3, r3, #18
 8002714:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a6a      	ldr	r2, [pc, #424]	; (80028e4 <HAL_I2C_Init+0x274>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d802      	bhi.n	8002744 <HAL_I2C_Init+0xd4>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3301      	adds	r3, #1
 8002742:	e009      	b.n	8002758 <HAL_I2C_Init+0xe8>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	4a69      	ldr	r2, [pc, #420]	; (80028f4 <HAL_I2C_Init+0x284>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	099b      	lsrs	r3, r3, #6
 8002756:	3301      	adds	r3, #1
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	430b      	orrs	r3, r1
 800275e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800276a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	495c      	ldr	r1, [pc, #368]	; (80028e4 <HAL_I2C_Init+0x274>)
 8002774:	428b      	cmp	r3, r1
 8002776:	d819      	bhi.n	80027ac <HAL_I2C_Init+0x13c>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1e59      	subs	r1, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fbb1 f3f3 	udiv	r3, r1, r3
 8002786:	1c59      	adds	r1, r3, #1
 8002788:	f640 73fc 	movw	r3, #4092	; 0xffc
 800278c:	400b      	ands	r3, r1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_I2C_Init+0x138>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1e59      	subs	r1, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a6:	e051      	b.n	800284c <HAL_I2C_Init+0x1dc>
 80027a8:	2304      	movs	r3, #4
 80027aa:	e04f      	b.n	800284c <HAL_I2C_Init+0x1dc>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d111      	bne.n	80027d8 <HAL_I2C_Init+0x168>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e58      	subs	r0, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	440b      	add	r3, r1
 80027c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e012      	b.n	80027fe <HAL_I2C_Init+0x18e>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1e58      	subs	r0, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	0099      	lsls	r1, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ee:	3301      	adds	r3, #1
 80027f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_I2C_Init+0x196>
 8002802:	2301      	movs	r3, #1
 8002804:	e022      	b.n	800284c <HAL_I2C_Init+0x1dc>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10e      	bne.n	800282c <HAL_I2C_Init+0x1bc>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e58      	subs	r0, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	440b      	add	r3, r1
 800281c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002820:	3301      	adds	r3, #1
 8002822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282a:	e00f      	b.n	800284c <HAL_I2C_Init+0x1dc>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1e58      	subs	r0, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	0099      	lsls	r1, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002842:	3301      	adds	r3, #1
 8002844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	6809      	ldr	r1, [r1, #0]
 8002850:	4313      	orrs	r3, r2
 8002852:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800287a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6911      	ldr	r1, [r2, #16]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68d2      	ldr	r2, [r2, #12]
 8002886:	4311      	orrs	r1, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	430b      	orrs	r3, r1
 800288e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	000186a0 	.word	0x000186a0
 80028e8:	001e847f 	.word	0x001e847f
 80028ec:	003d08ff 	.word	0x003d08ff
 80028f0:	431bde83 	.word	0x431bde83
 80028f4:	10624dd3 	.word	0x10624dd3

080028f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	461a      	mov	r2, r3
 8002904:	460b      	mov	r3, r1
 8002906:	817b      	strh	r3, [r7, #10]
 8002908:	4613      	mov	r3, r2
 800290a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800290c:	f7ff fb5e 	bl	8001fcc <HAL_GetTick>
 8002910:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b20      	cmp	r3, #32
 800291c:	f040 80e0 	bne.w	8002ae0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2319      	movs	r3, #25
 8002926:	2201      	movs	r2, #1
 8002928:	4970      	ldr	r1, [pc, #448]	; (8002aec <HAL_I2C_Master_Transmit+0x1f4>)
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f964 	bl	8002bf8 <I2C_WaitOnFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002936:	2302      	movs	r3, #2
 8002938:	e0d3      	b.n	8002ae2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_I2C_Master_Transmit+0x50>
 8002944:	2302      	movs	r3, #2
 8002946:	e0cc      	b.n	8002ae2 <HAL_I2C_Master_Transmit+0x1ea>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d007      	beq.n	800296e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0201 	orr.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2221      	movs	r2, #33	; 0x21
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2210      	movs	r2, #16
 800298a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	893a      	ldrh	r2, [r7, #8]
 800299e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4a50      	ldr	r2, [pc, #320]	; (8002af0 <HAL_I2C_Master_Transmit+0x1f8>)
 80029ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029b0:	8979      	ldrh	r1, [r7, #10]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	6a3a      	ldr	r2, [r7, #32]
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f89c 	bl	8002af4 <I2C_MasterRequestWrite>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e08d      	b.n	8002ae2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029dc:	e066      	b.n	8002aac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	6a39      	ldr	r1, [r7, #32]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f9de 	bl	8002da4 <I2C_WaitOnTXEFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00d      	beq.n	8002a0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d107      	bne.n	8002a06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e06b      	b.n	8002ae2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	781a      	ldrb	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d11b      	bne.n	8002a80 <HAL_I2C_Master_Transmit+0x188>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d017      	beq.n	8002a80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	6a39      	ldr	r1, [r7, #32]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f9ce 	bl	8002e26 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00d      	beq.n	8002aac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d107      	bne.n	8002aa8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e01a      	b.n	8002ae2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d194      	bne.n	80029de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	e000      	b.n	8002ae2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ae0:	2302      	movs	r3, #2
  }
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	00100002 	.word	0x00100002
 8002af0:	ffff0000 	.word	0xffff0000

08002af4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	460b      	mov	r3, r1
 8002b02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d006      	beq.n	8002b1e <I2C_MasterRequestWrite+0x2a>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d003      	beq.n	8002b1e <I2C_MasterRequestWrite+0x2a>
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b1c:	d108      	bne.n	8002b30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e00b      	b.n	8002b48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	2b12      	cmp	r3, #18
 8002b36:	d107      	bne.n	8002b48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f84f 	bl	8002bf8 <I2C_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b6e:	d103      	bne.n	8002b78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e035      	b.n	8002be8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b84:	d108      	bne.n	8002b98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b86:	897b      	ldrh	r3, [r7, #10]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b94:	611a      	str	r2, [r3, #16]
 8002b96:	e01b      	b.n	8002bd0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b98:	897b      	ldrh	r3, [r7, #10]
 8002b9a:	11db      	asrs	r3, r3, #7
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f003 0306 	and.w	r3, r3, #6
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f063 030f 	orn	r3, r3, #15
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	490e      	ldr	r1, [pc, #56]	; (8002bf0 <I2C_MasterRequestWrite+0xfc>)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f875 	bl	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e010      	b.n	8002be8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bc6:	897b      	ldrh	r3, [r7, #10]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4907      	ldr	r1, [pc, #28]	; (8002bf4 <I2C_MasterRequestWrite+0x100>)
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f865 	bl	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	00010008 	.word	0x00010008
 8002bf4:	00010002 	.word	0x00010002

08002bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	4613      	mov	r3, r2
 8002c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c08:	e025      	b.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d021      	beq.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c12:	f7ff f9db 	bl	8001fcc <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d302      	bcc.n	8002c28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d116      	bne.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f043 0220 	orr.w	r2, r3, #32
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e023      	b.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10d      	bne.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	43da      	mvns	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf0c      	ite	eq
 8002c72:	2301      	moveq	r3, #1
 8002c74:	2300      	movne	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	e00c      	b.n	8002c96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	43da      	mvns	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4013      	ands	r3, r2
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf0c      	ite	eq
 8002c8e:	2301      	moveq	r3, #1
 8002c90:	2300      	movne	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d0b6      	beq.n	8002c0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cb4:	e051      	b.n	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc4:	d123      	bne.n	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e046      	b.n	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d021      	beq.n	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d16:	f7ff f959 	bl	8001fcc <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d116      	bne.n	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f043 0220 	orr.w	r2, r3, #32
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e020      	b.n	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	0c1b      	lsrs	r3, r3, #16
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d10c      	bne.n	8002d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	bf14      	ite	ne
 8002d76:	2301      	movne	r3, #1
 8002d78:	2300      	moveq	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	e00b      	b.n	8002d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	43da      	mvns	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf14      	ite	ne
 8002d90:	2301      	movne	r3, #1
 8002d92:	2300      	moveq	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d18d      	bne.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db0:	e02d      	b.n	8002e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f878 	bl	8002ea8 <I2C_IsAcknowledgeFailed>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e02d      	b.n	8002e1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d021      	beq.n	8002e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dca:	f7ff f8ff 	bl	8001fcc <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d302      	bcc.n	8002de0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d116      	bne.n	8002e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f043 0220 	orr.w	r2, r3, #32
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e007      	b.n	8002e1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	2b80      	cmp	r3, #128	; 0x80
 8002e1a:	d1ca      	bne.n	8002db2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e32:	e02d      	b.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f837 	bl	8002ea8 <I2C_IsAcknowledgeFailed>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e02d      	b.n	8002ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d021      	beq.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4c:	f7ff f8be 	bl	8001fcc <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d302      	bcc.n	8002e62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d116      	bne.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e007      	b.n	8002ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d1ca      	bne.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebe:	d11b      	bne.n	8002ef8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ec8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f043 0204 	orr.w	r2, r3, #4
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0cc      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b68      	ldr	r3, [pc, #416]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d90c      	bls.n	8002f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b65      	ldr	r3, [pc, #404]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b63      	ldr	r3, [pc, #396]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0b8      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d020      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f5c:	4b59      	ldr	r3, [pc, #356]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4a58      	ldr	r2, [pc, #352]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f74:	4b53      	ldr	r3, [pc, #332]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	4a52      	ldr	r2, [pc, #328]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f80:	4b50      	ldr	r3, [pc, #320]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	494d      	ldr	r1, [pc, #308]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d044      	beq.n	8003028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d107      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d119      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e07f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d003      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	4b3f      	ldr	r3, [pc, #252]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e06f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e067      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe6:	4b37      	ldr	r3, [pc, #220]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f023 0203 	bic.w	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4934      	ldr	r1, [pc, #208]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff8:	f7fe ffe8 	bl	8001fcc <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003000:	f7fe ffe4 	bl	8001fcc <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e04f      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003016:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 020c 	and.w	r2, r3, #12
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	429a      	cmp	r2, r3
 8003026:	d1eb      	bne.n	8003000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d20c      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e032      	b.n	80030b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4916      	ldr	r1, [pc, #88]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	490e      	ldr	r1, [pc, #56]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800308e:	f000 f887 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 8003092:	4602      	mov	r2, r0
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	490a      	ldr	r1, [pc, #40]	; (80030c8 <HAL_RCC_ClockConfig+0x1c0>)
 80030a0:	5ccb      	ldrb	r3, [r1, r3]
 80030a2:	fa22 f303 	lsr.w	r3, r2, r3
 80030a6:	4a09      	ldr	r2, [pc, #36]	; (80030cc <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe fe32 	bl	8001d18 <HAL_InitTick>

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023c00 	.word	0x40023c00
 80030c4:	40023800 	.word	0x40023800
 80030c8:	08006b40 	.word	0x08006b40
 80030cc:	20000000 	.word	0x20000000
 80030d0:	20000004 	.word	0x20000004

080030d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000000 	.word	0x20000000

080030ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030f0:	f7ff fff0 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	0a9b      	lsrs	r3, r3, #10
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4903      	ldr	r1, [pc, #12]	; (8003110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40023800 	.word	0x40023800
 8003110:	08006b50 	.word	0x08006b50

08003114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003118:	f7ff ffdc 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b05      	ldr	r3, [pc, #20]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	0b5b      	lsrs	r3, r3, #13
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4903      	ldr	r1, [pc, #12]	; (8003138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	08006b50 	.word	0x08006b50

0800313c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	220f      	movs	r2, #15
 800314a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800314c:	4b12      	ldr	r3, [pc, #72]	; (8003198 <HAL_RCC_GetClockConfig+0x5c>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0203 	and.w	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003158:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <HAL_RCC_GetClockConfig+0x5c>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003164:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <HAL_RCC_GetClockConfig+0x5c>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003170:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCC_GetClockConfig+0x5c>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	08db      	lsrs	r3, r3, #3
 8003176:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800317e:	4b07      	ldr	r3, [pc, #28]	; (800319c <HAL_RCC_GetClockConfig+0x60>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 020f 	and.w	r2, r3, #15
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	601a      	str	r2, [r3, #0]
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	40023c00 	.word	0x40023c00

080031a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a4:	b0a6      	sub	sp, #152	; 0x98
 80031a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031c6:	4bc8      	ldr	r3, [pc, #800]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b0c      	cmp	r3, #12
 80031d0:	f200 817e 	bhi.w	80034d0 <HAL_RCC_GetSysClockFreq+0x330>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	08003211 	.word	0x08003211
 80031e0:	080034d1 	.word	0x080034d1
 80031e4:	080034d1 	.word	0x080034d1
 80031e8:	080034d1 	.word	0x080034d1
 80031ec:	08003219 	.word	0x08003219
 80031f0:	080034d1 	.word	0x080034d1
 80031f4:	080034d1 	.word	0x080034d1
 80031f8:	080034d1 	.word	0x080034d1
 80031fc:	08003221 	.word	0x08003221
 8003200:	080034d1 	.word	0x080034d1
 8003204:	080034d1 	.word	0x080034d1
 8003208:	080034d1 	.word	0x080034d1
 800320c:	0800338b 	.word	0x0800338b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003210:	4bb6      	ldr	r3, [pc, #728]	; (80034ec <HAL_RCC_GetSysClockFreq+0x34c>)
 8003212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003216:	e15f      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003218:	4bb5      	ldr	r3, [pc, #724]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x350>)
 800321a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800321e:	e15b      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003220:	4bb1      	ldr	r3, [pc, #708]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003228:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800322c:	4bae      	ldr	r3, [pc, #696]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d031      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003238:	4bab      	ldr	r3, [pc, #684]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	099b      	lsrs	r3, r3, #6
 800323e:	2200      	movs	r2, #0
 8003240:	66bb      	str	r3, [r7, #104]	; 0x68
 8003242:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003244:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324a:	663b      	str	r3, [r7, #96]	; 0x60
 800324c:	2300      	movs	r3, #0
 800324e:	667b      	str	r3, [r7, #100]	; 0x64
 8003250:	4ba7      	ldr	r3, [pc, #668]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003252:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003256:	462a      	mov	r2, r5
 8003258:	fb03 f202 	mul.w	r2, r3, r2
 800325c:	2300      	movs	r3, #0
 800325e:	4621      	mov	r1, r4
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	4aa2      	ldr	r2, [pc, #648]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003268:	4621      	mov	r1, r4
 800326a:	fba1 1202 	umull	r1, r2, r1, r2
 800326e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003270:	460a      	mov	r2, r1
 8003272:	67ba      	str	r2, [r7, #120]	; 0x78
 8003274:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003276:	4413      	add	r3, r2
 8003278:	67fb      	str	r3, [r7, #124]	; 0x7c
 800327a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800327e:	2200      	movs	r2, #0
 8003280:	65bb      	str	r3, [r7, #88]	; 0x58
 8003282:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003284:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003288:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800328c:	f7fd fbfe 	bl	8000a8c <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4613      	mov	r3, r2
 8003296:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800329a:	e064      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329c:	4b92      	ldr	r3, [pc, #584]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	099b      	lsrs	r3, r3, #6
 80032a2:	2200      	movs	r2, #0
 80032a4:	653b      	str	r3, [r7, #80]	; 0x50
 80032a6:	657a      	str	r2, [r7, #84]	; 0x54
 80032a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80032b0:	2300      	movs	r3, #0
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80032b8:	4622      	mov	r2, r4
 80032ba:	462b      	mov	r3, r5
 80032bc:	f04f 0000 	mov.w	r0, #0
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	0159      	lsls	r1, r3, #5
 80032c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032ca:	0150      	lsls	r0, r2, #5
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4621      	mov	r1, r4
 80032d2:	1a51      	subs	r1, r2, r1
 80032d4:	6139      	str	r1, [r7, #16]
 80032d6:	4629      	mov	r1, r5
 80032d8:	eb63 0301 	sbc.w	r3, r3, r1
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032ea:	4659      	mov	r1, fp
 80032ec:	018b      	lsls	r3, r1, #6
 80032ee:	4651      	mov	r1, sl
 80032f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032f4:	4651      	mov	r1, sl
 80032f6:	018a      	lsls	r2, r1, #6
 80032f8:	4651      	mov	r1, sl
 80032fa:	ebb2 0801 	subs.w	r8, r2, r1
 80032fe:	4659      	mov	r1, fp
 8003300:	eb63 0901 	sbc.w	r9, r3, r1
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003310:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003314:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003318:	4690      	mov	r8, r2
 800331a:	4699      	mov	r9, r3
 800331c:	4623      	mov	r3, r4
 800331e:	eb18 0303 	adds.w	r3, r8, r3
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	462b      	mov	r3, r5
 8003326:	eb49 0303 	adc.w	r3, r9, r3
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003338:	4629      	mov	r1, r5
 800333a:	028b      	lsls	r3, r1, #10
 800333c:	4621      	mov	r1, r4
 800333e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003342:	4621      	mov	r1, r4
 8003344:	028a      	lsls	r2, r1, #10
 8003346:	4610      	mov	r0, r2
 8003348:	4619      	mov	r1, r3
 800334a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800334e:	2200      	movs	r2, #0
 8003350:	643b      	str	r3, [r7, #64]	; 0x40
 8003352:	647a      	str	r2, [r7, #68]	; 0x44
 8003354:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003358:	f7fd fb98 	bl	8000a8c <__aeabi_uldivmod>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4613      	mov	r3, r2
 8003362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003366:	4b60      	ldr	r3, [pc, #384]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	0c1b      	lsrs	r3, r3, #16
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	3301      	adds	r3, #1
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003378:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800337c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003380:	fbb2 f3f3 	udiv	r3, r2, r3
 8003384:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003388:	e0a6      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800338a:	4b57      	ldr	r3, [pc, #348]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003396:	4b54      	ldr	r3, [pc, #336]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d02a      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a2:	4b51      	ldr	r3, [pc, #324]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	2200      	movs	r2, #0
 80033aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033b4:	2100      	movs	r1, #0
 80033b6:	4b4e      	ldr	r3, [pc, #312]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x350>)
 80033b8:	fb03 f201 	mul.w	r2, r3, r1
 80033bc:	2300      	movs	r3, #0
 80033be:	fb00 f303 	mul.w	r3, r0, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	4a4a      	ldr	r2, [pc, #296]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x350>)
 80033c6:	fba0 1202 	umull	r1, r2, r0, r2
 80033ca:	677a      	str	r2, [r7, #116]	; 0x74
 80033cc:	460a      	mov	r2, r1
 80033ce:	673a      	str	r2, [r7, #112]	; 0x70
 80033d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033d2:	4413      	add	r3, r2
 80033d4:	677b      	str	r3, [r7, #116]	; 0x74
 80033d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033da:	2200      	movs	r2, #0
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30
 80033de:	637a      	str	r2, [r7, #52]	; 0x34
 80033e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80033e4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80033e8:	f7fd fb50 	bl	8000a8c <__aeabi_uldivmod>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4613      	mov	r3, r2
 80033f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033f6:	e05b      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f8:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	099b      	lsrs	r3, r3, #6
 80033fe:	2200      	movs	r2, #0
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
 8003402:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340a:	623b      	str	r3, [r7, #32]
 800340c:	2300      	movs	r3, #0
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
 8003410:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003414:	4642      	mov	r2, r8
 8003416:	464b      	mov	r3, r9
 8003418:	f04f 0000 	mov.w	r0, #0
 800341c:	f04f 0100 	mov.w	r1, #0
 8003420:	0159      	lsls	r1, r3, #5
 8003422:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003426:	0150      	lsls	r0, r2, #5
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4641      	mov	r1, r8
 800342e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003432:	4649      	mov	r1, r9
 8003434:	eb63 0b01 	sbc.w	fp, r3, r1
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003444:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003448:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800344c:	ebb2 040a 	subs.w	r4, r2, sl
 8003450:	eb63 050b 	sbc.w	r5, r3, fp
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	00eb      	lsls	r3, r5, #3
 800345e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003462:	00e2      	lsls	r2, r4, #3
 8003464:	4614      	mov	r4, r2
 8003466:	461d      	mov	r5, r3
 8003468:	4643      	mov	r3, r8
 800346a:	18e3      	adds	r3, r4, r3
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	464b      	mov	r3, r9
 8003470:	eb45 0303 	adc.w	r3, r5, r3
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003482:	4629      	mov	r1, r5
 8003484:	028b      	lsls	r3, r1, #10
 8003486:	4621      	mov	r1, r4
 8003488:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800348c:	4621      	mov	r1, r4
 800348e:	028a      	lsls	r2, r1, #10
 8003490:	4610      	mov	r0, r2
 8003492:	4619      	mov	r1, r3
 8003494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003498:	2200      	movs	r2, #0
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	61fa      	str	r2, [r7, #28]
 800349e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034a2:	f7fd faf3 	bl	8000a8c <__aeabi_uldivmod>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4613      	mov	r3, r2
 80034ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034b0:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	0f1b      	lsrs	r3, r3, #28
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80034be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80034ce:	e003      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_RCC_GetSysClockFreq+0x34c>)
 80034d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80034d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3798      	adds	r7, #152	; 0x98
 80034e0:	46bd      	mov	sp, r7
 80034e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800
 80034ec:	00f42400 	.word	0x00f42400
 80034f0:	017d7840 	.word	0x017d7840

080034f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e28d      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8083 	beq.w	800361a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003514:	4b94      	ldr	r3, [pc, #592]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b04      	cmp	r3, #4
 800351e:	d019      	beq.n	8003554 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003520:	4b91      	ldr	r3, [pc, #580]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003528:	2b08      	cmp	r3, #8
 800352a:	d106      	bne.n	800353a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800352c:	4b8e      	ldr	r3, [pc, #568]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003538:	d00c      	beq.n	8003554 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800353a:	4b8b      	ldr	r3, [pc, #556]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003542:	2b0c      	cmp	r3, #12
 8003544:	d112      	bne.n	800356c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003546:	4b88      	ldr	r3, [pc, #544]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003552:	d10b      	bne.n	800356c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	4b84      	ldr	r3, [pc, #528]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d05b      	beq.n	8003618 <HAL_RCC_OscConfig+0x124>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d157      	bne.n	8003618 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e25a      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003574:	d106      	bne.n	8003584 <HAL_RCC_OscConfig+0x90>
 8003576:	4b7c      	ldr	r3, [pc, #496]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a7b      	ldr	r2, [pc, #492]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e01d      	b.n	80035c0 <HAL_RCC_OscConfig+0xcc>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0xb4>
 800358e:	4b76      	ldr	r3, [pc, #472]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a75      	ldr	r2, [pc, #468]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 8003594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b73      	ldr	r3, [pc, #460]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a72      	ldr	r2, [pc, #456]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0xcc>
 80035a8:	4b6f      	ldr	r3, [pc, #444]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6e      	ldr	r2, [pc, #440]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b6c      	ldr	r3, [pc, #432]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a6b      	ldr	r2, [pc, #428]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 80035ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d013      	beq.n	80035f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe fd00 	bl	8001fcc <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fcfc 	bl	8001fcc <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e21f      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e2:	4b61      	ldr	r3, [pc, #388]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0xdc>
 80035ee:	e014      	b.n	800361a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fcec 	bl	8001fcc <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe fce8 	bl	8001fcc <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e20b      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360a:	4b57      	ldr	r3, [pc, #348]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x104>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d06f      	beq.n	8003706 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003626:	4b50      	ldr	r3, [pc, #320]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b00      	cmp	r3, #0
 8003630:	d017      	beq.n	8003662 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003632:	4b4d      	ldr	r3, [pc, #308]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800363a:	2b08      	cmp	r3, #8
 800363c:	d105      	bne.n	800364a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800363e:	4b4a      	ldr	r3, [pc, #296]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364a:	4b47      	ldr	r3, [pc, #284]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003652:	2b0c      	cmp	r3, #12
 8003654:	d11c      	bne.n	8003690 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003656:	4b44      	ldr	r3, [pc, #272]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d116      	bne.n	8003690 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003662:	4b41      	ldr	r3, [pc, #260]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_RCC_OscConfig+0x186>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d001      	beq.n	800367a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e1d3      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367a:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4937      	ldr	r1, [pc, #220]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	e03a      	b.n	8003706 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003698:	4b34      	ldr	r3, [pc, #208]	; (800376c <HAL_RCC_OscConfig+0x278>)
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fe fc95 	bl	8001fcc <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a6:	f7fe fc91 	bl	8001fcc <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e1b4      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b8:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c4:	4b28      	ldr	r3, [pc, #160]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4925      	ldr	r1, [pc, #148]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]
 80036d8:	e015      	b.n	8003706 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036da:	4b24      	ldr	r3, [pc, #144]	; (800376c <HAL_RCC_OscConfig+0x278>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fe fc74 	bl	8001fcc <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e8:	f7fe fc70 	bl	8001fcc <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e193      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fa:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d036      	beq.n	8003780 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d016      	beq.n	8003748 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371a:	4b15      	ldr	r3, [pc, #84]	; (8003770 <HAL_RCC_OscConfig+0x27c>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fe fc54 	bl	8001fcc <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003728:	f7fe fc50 	bl	8001fcc <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e173      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_OscConfig+0x274>)
 800373c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x234>
 8003746:	e01b      	b.n	8003780 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCC_OscConfig+0x27c>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374e:	f7fe fc3d 	bl	8001fcc <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003754:	e00e      	b.n	8003774 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003756:	f7fe fc39 	bl	8001fcc <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d907      	bls.n	8003774 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e15c      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
 8003768:	40023800 	.word	0x40023800
 800376c:	42470000 	.word	0x42470000
 8003770:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003774:	4b8a      	ldr	r3, [pc, #552]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 8003776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ea      	bne.n	8003756 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 8097 	beq.w	80038bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800378e:	2300      	movs	r3, #0
 8003790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003792:	4b83      	ldr	r3, [pc, #524]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10f      	bne.n	80037be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	4b7f      	ldr	r3, [pc, #508]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	4a7e      	ldr	r2, [pc, #504]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 80037a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ac:	6413      	str	r3, [r2, #64]	; 0x40
 80037ae:	4b7c      	ldr	r3, [pc, #496]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ba:	2301      	movs	r3, #1
 80037bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037be:	4b79      	ldr	r3, [pc, #484]	; (80039a4 <HAL_RCC_OscConfig+0x4b0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d118      	bne.n	80037fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ca:	4b76      	ldr	r3, [pc, #472]	; (80039a4 <HAL_RCC_OscConfig+0x4b0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a75      	ldr	r2, [pc, #468]	; (80039a4 <HAL_RCC_OscConfig+0x4b0>)
 80037d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d6:	f7fe fbf9 	bl	8001fcc <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037de:	f7fe fbf5 	bl	8001fcc <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e118      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f0:	4b6c      	ldr	r3, [pc, #432]	; (80039a4 <HAL_RCC_OscConfig+0x4b0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d106      	bne.n	8003812 <HAL_RCC_OscConfig+0x31e>
 8003804:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	4a65      	ldr	r2, [pc, #404]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 800380a:	f043 0301 	orr.w	r3, r3, #1
 800380e:	6713      	str	r3, [r2, #112]	; 0x70
 8003810:	e01c      	b.n	800384c <HAL_RCC_OscConfig+0x358>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b05      	cmp	r3, #5
 8003818:	d10c      	bne.n	8003834 <HAL_RCC_OscConfig+0x340>
 800381a:	4b61      	ldr	r3, [pc, #388]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a60      	ldr	r2, [pc, #384]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 8003820:	f043 0304 	orr.w	r3, r3, #4
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
 8003826:	4b5e      	ldr	r3, [pc, #376]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	4a5d      	ldr	r2, [pc, #372]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6713      	str	r3, [r2, #112]	; 0x70
 8003832:	e00b      	b.n	800384c <HAL_RCC_OscConfig+0x358>
 8003834:	4b5a      	ldr	r3, [pc, #360]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a59      	ldr	r2, [pc, #356]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
 8003840:	4b57      	ldr	r3, [pc, #348]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	4a56      	ldr	r2, [pc, #344]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 8003846:	f023 0304 	bic.w	r3, r3, #4
 800384a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d015      	beq.n	8003880 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fe fbba 	bl	8001fcc <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385a:	e00a      	b.n	8003872 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800385c:	f7fe fbb6 	bl	8001fcc <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e0d7      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003872:	4b4b      	ldr	r3, [pc, #300]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0ee      	beq.n	800385c <HAL_RCC_OscConfig+0x368>
 800387e:	e014      	b.n	80038aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003880:	f7fe fba4 	bl	8001fcc <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003886:	e00a      	b.n	800389e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003888:	f7fe fba0 	bl	8001fcc <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e0c1      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389e:	4b40      	ldr	r3, [pc, #256]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1ee      	bne.n	8003888 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d105      	bne.n	80038bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b0:	4b3b      	ldr	r3, [pc, #236]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	4a3a      	ldr	r2, [pc, #232]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 80038b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80ad 	beq.w	8003a20 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038c6:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d060      	beq.n	8003994 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d145      	bne.n	8003966 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038da:	4b33      	ldr	r3, [pc, #204]	; (80039a8 <HAL_RCC_OscConfig+0x4b4>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fe fb74 	bl	8001fcc <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fe fb70 	bl	8001fcc <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e093      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fa:	4b29      	ldr	r3, [pc, #164]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69da      	ldr	r2, [r3, #28]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	019b      	lsls	r3, r3, #6
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	3b01      	subs	r3, #1
 8003920:	041b      	lsls	r3, r3, #16
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	061b      	lsls	r3, r3, #24
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	071b      	lsls	r3, r3, #28
 8003932:	491b      	ldr	r1, [pc, #108]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003938:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <HAL_RCC_OscConfig+0x4b4>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393e:	f7fe fb45 	bl	8001fcc <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003946:	f7fe fb41 	bl	8001fcc <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e064      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x452>
 8003964:	e05c      	b.n	8003a20 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_RCC_OscConfig+0x4b4>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fe fb2e 	bl	8001fcc <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003974:	f7fe fb2a 	bl	8001fcc <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e04d      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCC_OscConfig+0x4ac>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x480>
 8003992:	e045      	b.n	8003a20 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d107      	bne.n	80039ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e040      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40007000 	.word	0x40007000
 80039a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039ac:	4b1f      	ldr	r3, [pc, #124]	; (8003a2c <HAL_RCC_OscConfig+0x538>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d030      	beq.n	8003a1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d129      	bne.n	8003a1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d122      	bne.n	8003a1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039dc:	4013      	ands	r3, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d119      	bne.n	8003a1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	3b01      	subs	r3, #1
 80039f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d10f      	bne.n	8003a1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023800 	.word	0x40023800

08003a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e041      	b.n	8003ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd ffd0 	bl	80019fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f000 fbc0 	bl	80041f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d001      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e04e      	b.n	8003b86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a23      	ldr	r2, [pc, #140]	; (8003b94 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d022      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b12:	d01d      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d018      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <HAL_TIM_Base_Start_IT+0xcc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1b      	ldr	r2, [pc, #108]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_TIM_Base_Start_IT+0xdc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d111      	bne.n	8003b74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d010      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b72:	e007      	b.n	8003b84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800
 8003ba0:	40000c00 	.word	0x40000c00
 8003ba4:	40010400 	.word	0x40010400
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40001800 	.word	0x40001800

08003bb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e041      	b.n	8003c46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fd fed8 	bl	800198c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f000 fb00 	bl	80041f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e041      	b.n	8003ce4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7fd fe3b 	bl	80018f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f000 fab1 	bl	80041f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d122      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d11b      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0202 	mvn.w	r2, #2
 8003d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fca2 	bl	8001678 <HAL_TIM_IC_CaptureCallback>
 8003d34:	e005      	b.n	8003d42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa3e 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fa45 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d122      	bne.n	8003d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d11b      	bne.n	8003d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0204 	mvn.w	r2, #4
 8003d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2202      	movs	r2, #2
 8003d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fd fc78 	bl	8001678 <HAL_TIM_IC_CaptureCallback>
 8003d88:	e005      	b.n	8003d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fa14 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fa1b 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d122      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d11b      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0208 	mvn.w	r2, #8
 8003dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fd fc4e 	bl	8001678 <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f9ea 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f9f1 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b10      	cmp	r3, #16
 8003dfc:	d122      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d11b      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0210 	mvn.w	r2, #16
 8003e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2208      	movs	r2, #8
 8003e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fd fc24 	bl	8001678 <HAL_TIM_IC_CaptureCallback>
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9c0 	bl	80041b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f9c7 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d10e      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d107      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0201 	mvn.w	r2, #1
 8003e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fd fc2a 	bl	80016c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7a:	2b80      	cmp	r3, #128	; 0x80
 8003e7c:	d10e      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e88:	2b80      	cmp	r3, #128	; 0x80
 8003e8a:	d107      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fdac 	bl	80049f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b40      	cmp	r3, #64	; 0x40
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b40      	cmp	r3, #64	; 0x40
 8003eb6:	d107      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f98c 	bl	80041e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d107      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0220 	mvn.w	r2, #32
 8003eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fd76 	bl	80049e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e088      	b.n	800402c <HAL_TIM_IC_ConfigChannel+0x130>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d11b      	bne.n	8003f60 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	6819      	ldr	r1, [r3, #0]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f000 fbac 	bl	8004694 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699a      	ldr	r2, [r3, #24]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 020c 	bic.w	r2, r2, #12
 8003f4a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6999      	ldr	r1, [r3, #24]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	619a      	str	r2, [r3, #24]
 8003f5e:	e060      	b.n	8004022 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d11c      	bne.n	8003fa0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6819      	ldr	r1, [r3, #0]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f000 fc01 	bl	800477c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699a      	ldr	r2, [r3, #24]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f88:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6999      	ldr	r1, [r3, #24]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	021a      	lsls	r2, r3, #8
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	619a      	str	r2, [r3, #24]
 8003f9e:	e040      	b.n	8004022 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d11b      	bne.n	8003fde <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	6819      	ldr	r1, [r3, #0]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f000 fc1e 	bl	80047f6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 020c 	bic.w	r2, r2, #12
 8003fc8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69d9      	ldr	r1, [r3, #28]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	61da      	str	r2, [r3, #28]
 8003fdc:	e021      	b.n	8004022 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b0c      	cmp	r3, #12
 8003fe2:	d11c      	bne.n	800401e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	6819      	ldr	r1, [r3, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f000 fc3b 	bl	800486e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69da      	ldr	r2, [r3, #28]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004006:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69d9      	ldr	r1, [r3, #28]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	021a      	lsls	r2, r3, #8
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	61da      	str	r2, [r3, #28]
 800401c:	e001      	b.n	8004022 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800402a:	7dfb      	ldrb	r3, [r7, #23]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800404e:	2302      	movs	r3, #2
 8004050:	e0ae      	b.n	80041b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b0c      	cmp	r3, #12
 800405e:	f200 809f 	bhi.w	80041a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	0800409d 	.word	0x0800409d
 800406c:	080041a1 	.word	0x080041a1
 8004070:	080041a1 	.word	0x080041a1
 8004074:	080041a1 	.word	0x080041a1
 8004078:	080040dd 	.word	0x080040dd
 800407c:	080041a1 	.word	0x080041a1
 8004080:	080041a1 	.word	0x080041a1
 8004084:	080041a1 	.word	0x080041a1
 8004088:	0800411f 	.word	0x0800411f
 800408c:	080041a1 	.word	0x080041a1
 8004090:	080041a1 	.word	0x080041a1
 8004094:	080041a1 	.word	0x080041a1
 8004098:	0800415f 	.word	0x0800415f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f946 	bl	8004334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0208 	orr.w	r2, r2, #8
 80040b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0204 	bic.w	r2, r2, #4
 80040c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6999      	ldr	r1, [r3, #24]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	619a      	str	r2, [r3, #24]
      break;
 80040da:	e064      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f996 	bl	8004414 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699a      	ldr	r2, [r3, #24]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6999      	ldr	r1, [r3, #24]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	021a      	lsls	r2, r3, #8
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	619a      	str	r2, [r3, #24]
      break;
 800411c:	e043      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f9eb 	bl	8004500 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0208 	orr.w	r2, r2, #8
 8004138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0204 	bic.w	r2, r2, #4
 8004148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69d9      	ldr	r1, [r3, #28]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	61da      	str	r2, [r3, #28]
      break;
 800415c:	e023      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fa3f 	bl	80045e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69da      	ldr	r2, [r3, #28]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69da      	ldr	r2, [r3, #28]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69d9      	ldr	r1, [r3, #28]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	021a      	lsls	r2, r3, #8
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	61da      	str	r2, [r3, #28]
      break;
 800419e:	e002      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	75fb      	strb	r3, [r7, #23]
      break;
 80041a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a40      	ldr	r2, [pc, #256]	; (8004308 <TIM_Base_SetConfig+0x114>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d013      	beq.n	8004234 <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004212:	d00f      	beq.n	8004234 <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a3d      	ldr	r2, [pc, #244]	; (800430c <TIM_Base_SetConfig+0x118>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00b      	beq.n	8004234 <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a3c      	ldr	r2, [pc, #240]	; (8004310 <TIM_Base_SetConfig+0x11c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d007      	beq.n	8004234 <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3b      	ldr	r2, [pc, #236]	; (8004314 <TIM_Base_SetConfig+0x120>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_Base_SetConfig+0x40>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a3a      	ldr	r2, [pc, #232]	; (8004318 <TIM_Base_SetConfig+0x124>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d108      	bne.n	8004246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a2f      	ldr	r2, [pc, #188]	; (8004308 <TIM_Base_SetConfig+0x114>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d02b      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004254:	d027      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2c      	ldr	r2, [pc, #176]	; (800430c <TIM_Base_SetConfig+0x118>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d023      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2b      	ldr	r2, [pc, #172]	; (8004310 <TIM_Base_SetConfig+0x11c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01f      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a2a      	ldr	r2, [pc, #168]	; (8004314 <TIM_Base_SetConfig+0x120>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d01b      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a29      	ldr	r2, [pc, #164]	; (8004318 <TIM_Base_SetConfig+0x124>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d017      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a28      	ldr	r2, [pc, #160]	; (800431c <TIM_Base_SetConfig+0x128>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d013      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a27      	ldr	r2, [pc, #156]	; (8004320 <TIM_Base_SetConfig+0x12c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00f      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a26      	ldr	r2, [pc, #152]	; (8004324 <TIM_Base_SetConfig+0x130>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00b      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a25      	ldr	r2, [pc, #148]	; (8004328 <TIM_Base_SetConfig+0x134>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d007      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a24      	ldr	r2, [pc, #144]	; (800432c <TIM_Base_SetConfig+0x138>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d003      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a23      	ldr	r2, [pc, #140]	; (8004330 <TIM_Base_SetConfig+0x13c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d108      	bne.n	80042b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <TIM_Base_SetConfig+0x114>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <TIM_Base_SetConfig+0xf8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <TIM_Base_SetConfig+0x124>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d103      	bne.n	80042f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	615a      	str	r2, [r3, #20]
}
 80042fa:	bf00      	nop
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40010000 	.word	0x40010000
 800430c:	40000400 	.word	0x40000400
 8004310:	40000800 	.word	0x40000800
 8004314:	40000c00 	.word	0x40000c00
 8004318:	40010400 	.word	0x40010400
 800431c:	40014000 	.word	0x40014000
 8004320:	40014400 	.word	0x40014400
 8004324:	40014800 	.word	0x40014800
 8004328:	40001800 	.word	0x40001800
 800432c:	40001c00 	.word	0x40001c00
 8004330:	40002000 	.word	0x40002000

08004334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f023 0201 	bic.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0303 	bic.w	r3, r3, #3
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f023 0302 	bic.w	r3, r3, #2
 800437c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a20      	ldr	r2, [pc, #128]	; (800440c <TIM_OC1_SetConfig+0xd8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d003      	beq.n	8004398 <TIM_OC1_SetConfig+0x64>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a1f      	ldr	r2, [pc, #124]	; (8004410 <TIM_OC1_SetConfig+0xdc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d10c      	bne.n	80043b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f023 0308 	bic.w	r3, r3, #8
 800439e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f023 0304 	bic.w	r3, r3, #4
 80043b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <TIM_OC1_SetConfig+0xd8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d003      	beq.n	80043c2 <TIM_OC1_SetConfig+0x8e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a14      	ldr	r2, [pc, #80]	; (8004410 <TIM_OC1_SetConfig+0xdc>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d111      	bne.n	80043e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	621a      	str	r2, [r3, #32]
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	40010000 	.word	0x40010000
 8004410:	40010400 	.word	0x40010400

08004414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f023 0210 	bic.w	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0320 	bic.w	r3, r3, #32
 800445e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a22      	ldr	r2, [pc, #136]	; (80044f8 <TIM_OC2_SetConfig+0xe4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_OC2_SetConfig+0x68>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a21      	ldr	r2, [pc, #132]	; (80044fc <TIM_OC2_SetConfig+0xe8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d10d      	bne.n	8004498 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004496:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a17      	ldr	r2, [pc, #92]	; (80044f8 <TIM_OC2_SetConfig+0xe4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_OC2_SetConfig+0x94>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a16      	ldr	r2, [pc, #88]	; (80044fc <TIM_OC2_SetConfig+0xe8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d113      	bne.n	80044d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	621a      	str	r2, [r3, #32]
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40010000 	.word	0x40010000
 80044fc:	40010400 	.word	0x40010400

08004500 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0303 	bic.w	r3, r3, #3
 8004536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	021b      	lsls	r3, r3, #8
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a21      	ldr	r2, [pc, #132]	; (80045e0 <TIM_OC3_SetConfig+0xe0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d003      	beq.n	8004566 <TIM_OC3_SetConfig+0x66>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a20      	ldr	r2, [pc, #128]	; (80045e4 <TIM_OC3_SetConfig+0xe4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d10d      	bne.n	8004582 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800456c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a16      	ldr	r2, [pc, #88]	; (80045e0 <TIM_OC3_SetConfig+0xe0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d003      	beq.n	8004592 <TIM_OC3_SetConfig+0x92>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <TIM_OC3_SetConfig+0xe4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d113      	bne.n	80045ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	621a      	str	r2, [r3, #32]
}
 80045d4:	bf00      	nop
 80045d6:	371c      	adds	r7, #28
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40010400 	.word	0x40010400

080045e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	031b      	lsls	r3, r3, #12
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a12      	ldr	r2, [pc, #72]	; (800468c <TIM_OC4_SetConfig+0xa4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_OC4_SetConfig+0x68>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a11      	ldr	r2, [pc, #68]	; (8004690 <TIM_OC4_SetConfig+0xa8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d109      	bne.n	8004664 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	019b      	lsls	r3, r3, #6
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40010000 	.word	0x40010000
 8004690:	40010400 	.word	0x40010400

08004694 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f023 0201 	bic.w	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4a28      	ldr	r2, [pc, #160]	; (8004760 <TIM_TI1_SetConfig+0xcc>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d01b      	beq.n	80046fa <TIM_TI1_SetConfig+0x66>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c8:	d017      	beq.n	80046fa <TIM_TI1_SetConfig+0x66>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4a25      	ldr	r2, [pc, #148]	; (8004764 <TIM_TI1_SetConfig+0xd0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <TIM_TI1_SetConfig+0x66>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a24      	ldr	r2, [pc, #144]	; (8004768 <TIM_TI1_SetConfig+0xd4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00f      	beq.n	80046fa <TIM_TI1_SetConfig+0x66>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4a23      	ldr	r2, [pc, #140]	; (800476c <TIM_TI1_SetConfig+0xd8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00b      	beq.n	80046fa <TIM_TI1_SetConfig+0x66>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4a22      	ldr	r2, [pc, #136]	; (8004770 <TIM_TI1_SetConfig+0xdc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d007      	beq.n	80046fa <TIM_TI1_SetConfig+0x66>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a21      	ldr	r2, [pc, #132]	; (8004774 <TIM_TI1_SetConfig+0xe0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_TI1_SetConfig+0x66>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4a20      	ldr	r2, [pc, #128]	; (8004778 <TIM_TI1_SetConfig+0xe4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d101      	bne.n	80046fe <TIM_TI1_SetConfig+0x6a>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <TIM_TI1_SetConfig+0x6c>
 80046fe:	2300      	movs	r3, #0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e003      	b.n	800471e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004724:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	b2db      	uxtb	r3, r3
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f023 030a 	bic.w	r3, r3, #10
 8004738:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f003 030a 	and.w	r3, r3, #10
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	621a      	str	r2, [r3, #32]
}
 8004752:	bf00      	nop
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40010000 	.word	0x40010000
 8004764:	40000400 	.word	0x40000400
 8004768:	40000800 	.word	0x40000800
 800476c:	40000c00 	.word	0x40000c00
 8004770:	40010400 	.word	0x40010400
 8004774:	40014000 	.word	0x40014000
 8004778:	40001800 	.word	0x40001800

0800477c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f023 0210 	bic.w	r2, r3, #16
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	031b      	lsls	r3, r3, #12
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	621a      	str	r2, [r3, #32]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b087      	sub	sp, #28
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f023 0303 	bic.w	r3, r3, #3
 8004822:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004832:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	b2db      	uxtb	r3, r3
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004846:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800486e:	b480      	push	{r7}
 8004870:	b087      	sub	sp, #28
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800489a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	031b      	lsls	r3, r3, #12
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80048c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	031b      	lsls	r3, r3, #12
 80048c6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	621a      	str	r2, [r3, #32]
}
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e05a      	b.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a21      	ldr	r2, [pc, #132]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d022      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494c:	d01d      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d018      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1a      	ldr	r2, [pc, #104]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00e      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a18      	ldr	r2, [pc, #96]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d009      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d10c      	bne.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	4313      	orrs	r3, r2
 800499a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	40000c00 	.word	0x40000c00
 80049d4:	40010400 	.word	0x40010400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40001800 	.word	0x40001800

080049e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e03f      	b.n	8004a9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fd f886 	bl	8001b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2224      	movs	r2, #36	; 0x24
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fc7b 	bl	8005348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b0ba      	sub	sp, #232	; 0xe8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ae2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10f      	bne.n	8004b0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <HAL_UART_IRQHandler+0x66>
 8004af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fb65 	bl	80051d2 <UART_Receive_IT>
      return;
 8004b08:	e256      	b.n	8004fb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80de 	beq.w	8004cd0 <HAL_UART_IRQHandler+0x22c>
 8004b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d106      	bne.n	8004b2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80d1 	beq.w	8004cd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <HAL_UART_IRQHandler+0xae>
 8004b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f043 0201 	orr.w	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <HAL_UART_IRQHandler+0xd2>
 8004b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	f043 0202 	orr.w	r2, r3, #2
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00b      	beq.n	8004b9a <HAL_UART_IRQHandler+0xf6>
 8004b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f043 0204 	orr.w	r2, r3, #4
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d011      	beq.n	8004bca <HAL_UART_IRQHandler+0x126>
 8004ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d105      	bne.n	8004bbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f043 0208 	orr.w	r2, r3, #8
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 81ed 	beq.w	8004fae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x14e>
 8004be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 faf0 	bl	80051d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	bf0c      	ite	eq
 8004c00:	2301      	moveq	r3, #1
 8004c02:	2300      	movne	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <HAL_UART_IRQHandler+0x17a>
 8004c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d04f      	beq.n	8004cbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f9f8 	bl	8005014 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d141      	bne.n	8004cb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3314      	adds	r3, #20
 8004c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3314      	adds	r3, #20
 8004c5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1d9      	bne.n	8004c32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d013      	beq.n	8004cae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	4a7d      	ldr	r2, [pc, #500]	; (8004e80 <HAL_UART_IRQHandler+0x3dc>)
 8004c8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fd fb1c 	bl	80022d0 <HAL_DMA_Abort_IT>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d016      	beq.n	8004ccc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cac:	e00e      	b.n	8004ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f99a 	bl	8004fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb4:	e00a      	b.n	8004ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f996 	bl	8004fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cbc:	e006      	b.n	8004ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f992 	bl	8004fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004cca:	e170      	b.n	8004fae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	bf00      	nop
    return;
 8004cce:	e16e      	b.n	8004fae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	f040 814a 	bne.w	8004f6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 8143 	beq.w	8004f6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 813c 	beq.w	8004f6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b40      	cmp	r3, #64	; 0x40
 8004d18:	f040 80b4 	bne.w	8004e84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8140 	beq.w	8004fb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	f080 8139 	bcs.w	8004fb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d52:	f000 8088 	beq.w	8004e66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1d9      	bne.n	8004d56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3314      	adds	r3, #20
 8004da8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3314      	adds	r3, #20
 8004dc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004dca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004dce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e1      	bne.n	8004da2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3314      	adds	r3, #20
 8004de4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3314      	adds	r3, #20
 8004dfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e3      	bne.n	8004dde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e36:	f023 0310 	bic.w	r3, r3, #16
 8004e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	330c      	adds	r3, #12
 8004e44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e48:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e3      	bne.n	8004e24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fd f9c5 	bl	80021f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	4619      	mov	r1, r3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f8c0 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e7c:	e099      	b.n	8004fb2 <HAL_UART_IRQHandler+0x50e>
 8004e7e:	bf00      	nop
 8004e80:	080050db 	.word	0x080050db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 808b 	beq.w	8004fb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 8086 	beq.w	8004fb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	330c      	adds	r3, #12
 8004eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ebc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ece:	647a      	str	r2, [r7, #68]	; 0x44
 8004ed0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e3      	bne.n	8004eaa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3314      	adds	r3, #20
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	f023 0301 	bic.w	r3, r3, #1
 8004ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3314      	adds	r3, #20
 8004f02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f06:	633a      	str	r2, [r7, #48]	; 0x30
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e3      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0310 	bic.w	r3, r3, #16
 8004f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	330c      	adds	r3, #12
 8004f48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f4c:	61fa      	str	r2, [r7, #28]
 8004f4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	69b9      	ldr	r1, [r7, #24]
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	e841 2300 	strex	r3, r2, [r1]
 8004f58:	617b      	str	r3, [r7, #20]
   return(result);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e3      	bne.n	8004f28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f64:	4619      	mov	r1, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f848 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f6c:	e023      	b.n	8004fb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <HAL_UART_IRQHandler+0x4ea>
 8004f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f8bb 	bl	8005102 <UART_Transmit_IT>
    return;
 8004f8c:	e014      	b.n	8004fb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00e      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x514>
 8004f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d008      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f8fb 	bl	80051a2 <UART_EndTransmit_IT>
    return;
 8004fac:	e004      	b.n	8004fb8 <HAL_UART_IRQHandler+0x514>
    return;
 8004fae:	bf00      	nop
 8004fb0:	e002      	b.n	8004fb8 <HAL_UART_IRQHandler+0x514>
      return;
 8004fb2:	bf00      	nop
 8004fb4:	e000      	b.n	8004fb8 <HAL_UART_IRQHandler+0x514>
      return;
 8004fb6:	bf00      	nop
  }
}
 8004fb8:	37e8      	adds	r7, #232	; 0xe8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop

08004fc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005014:	b480      	push	{r7}
 8005016:	b095      	sub	sp, #84	; 0x54
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	330c      	adds	r3, #12
 8005022:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	330c      	adds	r3, #12
 800503a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800503c:	643a      	str	r2, [r7, #64]	; 0x40
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005042:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800504a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e5      	bne.n	800501c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3314      	adds	r3, #20
 8005056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	64bb      	str	r3, [r7, #72]	; 0x48
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3314      	adds	r3, #20
 800506e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005070:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e5      	bne.n	8005050 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	2b01      	cmp	r3, #1
 800508a:	d119      	bne.n	80050c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	330c      	adds	r3, #12
 8005092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	60bb      	str	r3, [r7, #8]
   return(result);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f023 0310 	bic.w	r3, r3, #16
 80050a2:	647b      	str	r3, [r7, #68]	; 0x44
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	330c      	adds	r3, #12
 80050aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050ac:	61ba      	str	r2, [r7, #24]
 80050ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	6979      	ldr	r1, [r7, #20]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	613b      	str	r3, [r7, #16]
   return(result);
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e5      	bne.n	800508c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050ce:	bf00      	nop
 80050d0:	3754      	adds	r7, #84	; 0x54
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff ff77 	bl	8004fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050fa:	bf00      	nop
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b21      	cmp	r3, #33	; 0x21
 8005114:	d13e      	bne.n	8005194 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511e:	d114      	bne.n	800514a <UART_Transmit_IT+0x48>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d110      	bne.n	800514a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800513c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	1c9a      	adds	r2, r3, #2
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	621a      	str	r2, [r3, #32]
 8005148:	e008      	b.n	800515c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	1c59      	adds	r1, r3, #1
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6211      	str	r1, [r2, #32]
 8005154:	781a      	ldrb	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29b      	uxth	r3, r3
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	4619      	mov	r1, r3
 800516a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10f      	bne.n	8005190 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800517e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800518e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	e000      	b.n	8005196 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005194:	2302      	movs	r3, #2
  }
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff fefc 	bl	8004fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b08c      	sub	sp, #48	; 0x30
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b22      	cmp	r3, #34	; 0x22
 80051e4:	f040 80ab 	bne.w	800533e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f0:	d117      	bne.n	8005222 <UART_Receive_IT+0x50>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d113      	bne.n	8005222 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	b29b      	uxth	r3, r3
 800520c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005210:	b29a      	uxth	r2, r3
 8005212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005214:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	1c9a      	adds	r2, r3, #2
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	629a      	str	r2, [r3, #40]	; 0x28
 8005220:	e026      	b.n	8005270 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005228:	2300      	movs	r3, #0
 800522a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005234:	d007      	beq.n	8005246 <UART_Receive_IT+0x74>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <UART_Receive_IT+0x82>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	e008      	b.n	8005266 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005260:	b2da      	uxtb	r2, r3
 8005262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005264:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29b      	uxth	r3, r3
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	4619      	mov	r1, r3
 800527e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005280:	2b00      	cmp	r3, #0
 8005282:	d15a      	bne.n	800533a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0220 	bic.w	r2, r2, #32
 8005292:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695a      	ldr	r2, [r3, #20]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0201 	bic.w	r2, r2, #1
 80052b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d135      	bne.n	8005330 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	330c      	adds	r3, #12
 80052d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	613b      	str	r3, [r7, #16]
   return(result);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f023 0310 	bic.w	r3, r3, #16
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	330c      	adds	r3, #12
 80052e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ea:	623a      	str	r2, [r7, #32]
 80052ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	69f9      	ldr	r1, [r7, #28]
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e5      	bne.n	80052ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b10      	cmp	r3, #16
 800530a:	d10a      	bne.n	8005322 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800530c:	2300      	movs	r3, #0
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff fe67 	bl	8004ffc <HAL_UARTEx_RxEventCallback>
 800532e:	e002      	b.n	8005336 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff fe4f 	bl	8004fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e002      	b.n	8005340 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	e000      	b.n	8005340 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800533e:	2302      	movs	r3, #2
  }
}
 8005340:	4618      	mov	r0, r3
 8005342:	3730      	adds	r7, #48	; 0x30
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800534c:	b0c0      	sub	sp, #256	; 0x100
 800534e:	af00      	add	r7, sp, #0
 8005350:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005364:	68d9      	ldr	r1, [r3, #12]
 8005366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	ea40 0301 	orr.w	r3, r0, r1
 8005370:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	431a      	orrs	r2, r3
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	431a      	orrs	r2, r3
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053a0:	f021 010c 	bic.w	r1, r1, #12
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053ae:	430b      	orrs	r3, r1
 80053b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c2:	6999      	ldr	r1, [r3, #24]
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	ea40 0301 	orr.w	r3, r0, r1
 80053ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b8f      	ldr	r3, [pc, #572]	; (8005614 <UART_SetConfig+0x2cc>)
 80053d8:	429a      	cmp	r2, r3
 80053da:	d005      	beq.n	80053e8 <UART_SetConfig+0xa0>
 80053dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4b8d      	ldr	r3, [pc, #564]	; (8005618 <UART_SetConfig+0x2d0>)
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d104      	bne.n	80053f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053e8:	f7fd fe94 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 80053ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80053f0:	e003      	b.n	80053fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053f2:	f7fd fe7b 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 80053f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005404:	f040 810c 	bne.w	8005620 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800540c:	2200      	movs	r2, #0
 800540e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005412:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005416:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800541a:	4622      	mov	r2, r4
 800541c:	462b      	mov	r3, r5
 800541e:	1891      	adds	r1, r2, r2
 8005420:	65b9      	str	r1, [r7, #88]	; 0x58
 8005422:	415b      	adcs	r3, r3
 8005424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800542a:	4621      	mov	r1, r4
 800542c:	eb12 0801 	adds.w	r8, r2, r1
 8005430:	4629      	mov	r1, r5
 8005432:	eb43 0901 	adc.w	r9, r3, r1
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800544a:	4690      	mov	r8, r2
 800544c:	4699      	mov	r9, r3
 800544e:	4623      	mov	r3, r4
 8005450:	eb18 0303 	adds.w	r3, r8, r3
 8005454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005458:	462b      	mov	r3, r5
 800545a:	eb49 0303 	adc.w	r3, r9, r3
 800545e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800546e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005472:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005476:	460b      	mov	r3, r1
 8005478:	18db      	adds	r3, r3, r3
 800547a:	653b      	str	r3, [r7, #80]	; 0x50
 800547c:	4613      	mov	r3, r2
 800547e:	eb42 0303 	adc.w	r3, r2, r3
 8005482:	657b      	str	r3, [r7, #84]	; 0x54
 8005484:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005488:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800548c:	f7fb fafe 	bl	8000a8c <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4b61      	ldr	r3, [pc, #388]	; (800561c <UART_SetConfig+0x2d4>)
 8005496:	fba3 2302 	umull	r2, r3, r3, r2
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	011c      	lsls	r4, r3, #4
 800549e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054b0:	4642      	mov	r2, r8
 80054b2:	464b      	mov	r3, r9
 80054b4:	1891      	adds	r1, r2, r2
 80054b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80054b8:	415b      	adcs	r3, r3
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054c0:	4641      	mov	r1, r8
 80054c2:	eb12 0a01 	adds.w	sl, r2, r1
 80054c6:	4649      	mov	r1, r9
 80054c8:	eb43 0b01 	adc.w	fp, r3, r1
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	f04f 0300 	mov.w	r3, #0
 80054d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054e0:	4692      	mov	sl, r2
 80054e2:	469b      	mov	fp, r3
 80054e4:	4643      	mov	r3, r8
 80054e6:	eb1a 0303 	adds.w	r3, sl, r3
 80054ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054ee:	464b      	mov	r3, r9
 80054f0:	eb4b 0303 	adc.w	r3, fp, r3
 80054f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005504:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005508:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800550c:	460b      	mov	r3, r1
 800550e:	18db      	adds	r3, r3, r3
 8005510:	643b      	str	r3, [r7, #64]	; 0x40
 8005512:	4613      	mov	r3, r2
 8005514:	eb42 0303 	adc.w	r3, r2, r3
 8005518:	647b      	str	r3, [r7, #68]	; 0x44
 800551a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800551e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005522:	f7fb fab3 	bl	8000a8c <__aeabi_uldivmod>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	4611      	mov	r1, r2
 800552c:	4b3b      	ldr	r3, [pc, #236]	; (800561c <UART_SetConfig+0x2d4>)
 800552e:	fba3 2301 	umull	r2, r3, r3, r1
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	2264      	movs	r2, #100	; 0x64
 8005536:	fb02 f303 	mul.w	r3, r2, r3
 800553a:	1acb      	subs	r3, r1, r3
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005542:	4b36      	ldr	r3, [pc, #216]	; (800561c <UART_SetConfig+0x2d4>)
 8005544:	fba3 2302 	umull	r2, r3, r3, r2
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005550:	441c      	add	r4, r3
 8005552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005556:	2200      	movs	r2, #0
 8005558:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800555c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005560:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005564:	4642      	mov	r2, r8
 8005566:	464b      	mov	r3, r9
 8005568:	1891      	adds	r1, r2, r2
 800556a:	63b9      	str	r1, [r7, #56]	; 0x38
 800556c:	415b      	adcs	r3, r3
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005570:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005574:	4641      	mov	r1, r8
 8005576:	1851      	adds	r1, r2, r1
 8005578:	6339      	str	r1, [r7, #48]	; 0x30
 800557a:	4649      	mov	r1, r9
 800557c:	414b      	adcs	r3, r1
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800558c:	4659      	mov	r1, fp
 800558e:	00cb      	lsls	r3, r1, #3
 8005590:	4651      	mov	r1, sl
 8005592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005596:	4651      	mov	r1, sl
 8005598:	00ca      	lsls	r2, r1, #3
 800559a:	4610      	mov	r0, r2
 800559c:	4619      	mov	r1, r3
 800559e:	4603      	mov	r3, r0
 80055a0:	4642      	mov	r2, r8
 80055a2:	189b      	adds	r3, r3, r2
 80055a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055a8:	464b      	mov	r3, r9
 80055aa:	460a      	mov	r2, r1
 80055ac:	eb42 0303 	adc.w	r3, r2, r3
 80055b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055c8:	460b      	mov	r3, r1
 80055ca:	18db      	adds	r3, r3, r3
 80055cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ce:	4613      	mov	r3, r2
 80055d0:	eb42 0303 	adc.w	r3, r2, r3
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055de:	f7fb fa55 	bl	8000a8c <__aeabi_uldivmod>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4b0d      	ldr	r3, [pc, #52]	; (800561c <UART_SetConfig+0x2d4>)
 80055e8:	fba3 1302 	umull	r1, r3, r3, r2
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	2164      	movs	r1, #100	; 0x64
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	3332      	adds	r3, #50	; 0x32
 80055fa:	4a08      	ldr	r2, [pc, #32]	; (800561c <UART_SetConfig+0x2d4>)
 80055fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005600:	095b      	lsrs	r3, r3, #5
 8005602:	f003 0207 	and.w	r2, r3, #7
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4422      	add	r2, r4
 800560e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005610:	e106      	b.n	8005820 <UART_SetConfig+0x4d8>
 8005612:	bf00      	nop
 8005614:	40011000 	.word	0x40011000
 8005618:	40011400 	.word	0x40011400
 800561c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005624:	2200      	movs	r2, #0
 8005626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800562a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800562e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005632:	4642      	mov	r2, r8
 8005634:	464b      	mov	r3, r9
 8005636:	1891      	adds	r1, r2, r2
 8005638:	6239      	str	r1, [r7, #32]
 800563a:	415b      	adcs	r3, r3
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
 800563e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005642:	4641      	mov	r1, r8
 8005644:	1854      	adds	r4, r2, r1
 8005646:	4649      	mov	r1, r9
 8005648:	eb43 0501 	adc.w	r5, r3, r1
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	00eb      	lsls	r3, r5, #3
 8005656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800565a:	00e2      	lsls	r2, r4, #3
 800565c:	4614      	mov	r4, r2
 800565e:	461d      	mov	r5, r3
 8005660:	4643      	mov	r3, r8
 8005662:	18e3      	adds	r3, r4, r3
 8005664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005668:	464b      	mov	r3, r9
 800566a:	eb45 0303 	adc.w	r3, r5, r3
 800566e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800567e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800568e:	4629      	mov	r1, r5
 8005690:	008b      	lsls	r3, r1, #2
 8005692:	4621      	mov	r1, r4
 8005694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005698:	4621      	mov	r1, r4
 800569a:	008a      	lsls	r2, r1, #2
 800569c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056a0:	f7fb f9f4 	bl	8000a8c <__aeabi_uldivmod>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4b60      	ldr	r3, [pc, #384]	; (800582c <UART_SetConfig+0x4e4>)
 80056aa:	fba3 2302 	umull	r2, r3, r3, r2
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	011c      	lsls	r4, r3, #4
 80056b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056c4:	4642      	mov	r2, r8
 80056c6:	464b      	mov	r3, r9
 80056c8:	1891      	adds	r1, r2, r2
 80056ca:	61b9      	str	r1, [r7, #24]
 80056cc:	415b      	adcs	r3, r3
 80056ce:	61fb      	str	r3, [r7, #28]
 80056d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056d4:	4641      	mov	r1, r8
 80056d6:	1851      	adds	r1, r2, r1
 80056d8:	6139      	str	r1, [r7, #16]
 80056da:	4649      	mov	r1, r9
 80056dc:	414b      	adcs	r3, r1
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	f04f 0300 	mov.w	r3, #0
 80056e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056ec:	4659      	mov	r1, fp
 80056ee:	00cb      	lsls	r3, r1, #3
 80056f0:	4651      	mov	r1, sl
 80056f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056f6:	4651      	mov	r1, sl
 80056f8:	00ca      	lsls	r2, r1, #3
 80056fa:	4610      	mov	r0, r2
 80056fc:	4619      	mov	r1, r3
 80056fe:	4603      	mov	r3, r0
 8005700:	4642      	mov	r2, r8
 8005702:	189b      	adds	r3, r3, r2
 8005704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005708:	464b      	mov	r3, r9
 800570a:	460a      	mov	r2, r1
 800570c:	eb42 0303 	adc.w	r3, r2, r3
 8005710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	67bb      	str	r3, [r7, #120]	; 0x78
 800571e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800572c:	4649      	mov	r1, r9
 800572e:	008b      	lsls	r3, r1, #2
 8005730:	4641      	mov	r1, r8
 8005732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005736:	4641      	mov	r1, r8
 8005738:	008a      	lsls	r2, r1, #2
 800573a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800573e:	f7fb f9a5 	bl	8000a8c <__aeabi_uldivmod>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4611      	mov	r1, r2
 8005748:	4b38      	ldr	r3, [pc, #224]	; (800582c <UART_SetConfig+0x4e4>)
 800574a:	fba3 2301 	umull	r2, r3, r3, r1
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2264      	movs	r2, #100	; 0x64
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	1acb      	subs	r3, r1, r3
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	3332      	adds	r3, #50	; 0x32
 800575c:	4a33      	ldr	r2, [pc, #204]	; (800582c <UART_SetConfig+0x4e4>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005768:	441c      	add	r4, r3
 800576a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800576e:	2200      	movs	r2, #0
 8005770:	673b      	str	r3, [r7, #112]	; 0x70
 8005772:	677a      	str	r2, [r7, #116]	; 0x74
 8005774:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005778:	4642      	mov	r2, r8
 800577a:	464b      	mov	r3, r9
 800577c:	1891      	adds	r1, r2, r2
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	415b      	adcs	r3, r3
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005788:	4641      	mov	r1, r8
 800578a:	1851      	adds	r1, r2, r1
 800578c:	6039      	str	r1, [r7, #0]
 800578e:	4649      	mov	r1, r9
 8005790:	414b      	adcs	r3, r1
 8005792:	607b      	str	r3, [r7, #4]
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057a0:	4659      	mov	r1, fp
 80057a2:	00cb      	lsls	r3, r1, #3
 80057a4:	4651      	mov	r1, sl
 80057a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057aa:	4651      	mov	r1, sl
 80057ac:	00ca      	lsls	r2, r1, #3
 80057ae:	4610      	mov	r0, r2
 80057b0:	4619      	mov	r1, r3
 80057b2:	4603      	mov	r3, r0
 80057b4:	4642      	mov	r2, r8
 80057b6:	189b      	adds	r3, r3, r2
 80057b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80057ba:	464b      	mov	r3, r9
 80057bc:	460a      	mov	r2, r1
 80057be:	eb42 0303 	adc.w	r3, r2, r3
 80057c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	663b      	str	r3, [r7, #96]	; 0x60
 80057ce:	667a      	str	r2, [r7, #100]	; 0x64
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057dc:	4649      	mov	r1, r9
 80057de:	008b      	lsls	r3, r1, #2
 80057e0:	4641      	mov	r1, r8
 80057e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057e6:	4641      	mov	r1, r8
 80057e8:	008a      	lsls	r2, r1, #2
 80057ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80057ee:	f7fb f94d 	bl	8000a8c <__aeabi_uldivmod>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4b0d      	ldr	r3, [pc, #52]	; (800582c <UART_SetConfig+0x4e4>)
 80057f8:	fba3 1302 	umull	r1, r3, r3, r2
 80057fc:	095b      	lsrs	r3, r3, #5
 80057fe:	2164      	movs	r1, #100	; 0x64
 8005800:	fb01 f303 	mul.w	r3, r1, r3
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	3332      	adds	r3, #50	; 0x32
 800580a:	4a08      	ldr	r2, [pc, #32]	; (800582c <UART_SetConfig+0x4e4>)
 800580c:	fba2 2303 	umull	r2, r3, r2, r3
 8005810:	095b      	lsrs	r3, r3, #5
 8005812:	f003 020f 	and.w	r2, r3, #15
 8005816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4422      	add	r2, r4
 800581e:	609a      	str	r2, [r3, #8]
}
 8005820:	bf00      	nop
 8005822:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005826:	46bd      	mov	sp, r7
 8005828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800582c:	51eb851f 	.word	0x51eb851f

08005830 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005834:	4b05      	ldr	r3, [pc, #20]	; (800584c <SysTick_Handler+0x1c>)
 8005836:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005838:	f000 fd64 	bl	8006304 <xTaskGetSchedulerState>
 800583c:	4603      	mov	r3, r0
 800583e:	2b01      	cmp	r3, #1
 8005840:	d001      	beq.n	8005846 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005842:	f000 fed9 	bl	80065f8 <xPortSysTickHandler>
  }
}
 8005846:	bf00      	nop
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	e000e010 	.word	0xe000e010

08005850 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005850:	b580      	push	{r7, lr}
 8005852:	b08e      	sub	sp, #56	; 0x38
 8005854:	af04      	add	r7, sp, #16
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800585c:	2300      	movs	r3, #0
 800585e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005860:	f3ef 8305 	mrs	r3, IPSR
 8005864:	617b      	str	r3, [r7, #20]
  return(result);
 8005866:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005868:	2b00      	cmp	r3, #0
 800586a:	d17e      	bne.n	800596a <osThreadNew+0x11a>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d07b      	beq.n	800596a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005872:	2380      	movs	r3, #128	; 0x80
 8005874:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005876:	2318      	movs	r3, #24
 8005878:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800587e:	f04f 33ff 	mov.w	r3, #4294967295
 8005882:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d045      	beq.n	8005916 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <osThreadNew+0x48>
        name = attr->name;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <osThreadNew+0x6e>
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	2b38      	cmp	r3, #56	; 0x38
 80058b0:	d805      	bhi.n	80058be <osThreadNew+0x6e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <osThreadNew+0x72>
        return (NULL);
 80058be:	2300      	movs	r3, #0
 80058c0:	e054      	b.n	800596c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	089b      	lsrs	r3, r3, #2
 80058d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00e      	beq.n	80058f8 <osThreadNew+0xa8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	2b5b      	cmp	r3, #91	; 0x5b
 80058e0:	d90a      	bls.n	80058f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d006      	beq.n	80058f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <osThreadNew+0xa8>
        mem = 1;
 80058f2:	2301      	movs	r3, #1
 80058f4:	61bb      	str	r3, [r7, #24]
 80058f6:	e010      	b.n	800591a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10c      	bne.n	800591a <osThreadNew+0xca>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d108      	bne.n	800591a <osThreadNew+0xca>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d104      	bne.n	800591a <osThreadNew+0xca>
          mem = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	61bb      	str	r3, [r7, #24]
 8005914:	e001      	b.n	800591a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d110      	bne.n	8005942 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005928:	9202      	str	r2, [sp, #8]
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	6a3a      	ldr	r2, [r7, #32]
 8005934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f8eb 	bl	8005b12 <xTaskCreateStatic>
 800593c:	4603      	mov	r3, r0
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	e013      	b.n	800596a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d110      	bne.n	800596a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	b29a      	uxth	r2, r3
 800594c:	f107 0310 	add.w	r3, r7, #16
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f936 	bl	8005bcc <xTaskCreate>
 8005960:	4603      	mov	r3, r0
 8005962:	2b01      	cmp	r3, #1
 8005964:	d001      	beq.n	800596a <osThreadNew+0x11a>
            hTask = NULL;
 8005966:	2300      	movs	r3, #0
 8005968:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800596a:	693b      	ldr	r3, [r7, #16]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3728      	adds	r7, #40	; 0x28
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800597c:	f3ef 8305 	mrs	r3, IPSR
 8005980:	60bb      	str	r3, [r7, #8]
  return(result);
 8005982:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <osDelay+0x1c>
    stat = osErrorISR;
 8005988:	f06f 0305 	mvn.w	r3, #5
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	e007      	b.n	80059a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fa5a 	bl	8005e54 <vTaskDelay>
    }
  }

  return (stat);
 80059a0:	68fb      	ldr	r3, [r7, #12]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f103 0208 	add.w	r2, r3, #8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f04f 32ff 	mov.w	r2, #4294967295
 80059c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f103 0208 	add.w	r2, r3, #8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f103 0208 	add.w	r2, r3, #8
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	601a      	str	r2, [r3, #0]
}
 8005a40:	bf00      	nop
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	d103      	bne.n	8005a6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	e00c      	b.n	8005a86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	e002      	b.n	8005a7a <vListInsert+0x2e>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d2f6      	bcs.n	8005a74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	601a      	str	r2, [r3, #0]
}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6892      	ldr	r2, [r2, #8]
 8005ad4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6852      	ldr	r2, [r2, #4]
 8005ade:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d103      	bne.n	8005af2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	1e5a      	subs	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b08e      	sub	sp, #56	; 0x38
 8005b16:	af04      	add	r7, sp, #16
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	607a      	str	r2, [r7, #4]
 8005b1e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b26:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b38:	bf00      	nop
 8005b3a:	e7fe      	b.n	8005b3a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <xTaskCreateStatic+0x46>
	__asm volatile
 8005b42:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	61fb      	str	r3, [r7, #28]
}
 8005b54:	bf00      	nop
 8005b56:	e7fe      	b.n	8005b56 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b58:	235c      	movs	r3, #92	; 0x5c
 8005b5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b5c      	cmp	r3, #92	; 0x5c
 8005b60:	d00a      	beq.n	8005b78 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b62:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	61bb      	str	r3, [r7, #24]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01e      	beq.n	8005bbe <xTaskCreateStatic+0xac>
 8005b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d01b      	beq.n	8005bbe <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9303      	str	r3, [sp, #12]
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	9302      	str	r3, [sp, #8]
 8005ba0:	f107 0314 	add.w	r3, r7, #20
 8005ba4:	9301      	str	r3, [sp, #4]
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f850 	bl	8005c56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bb8:	f000 f8dc 	bl	8005d74 <prvAddNewTaskToReadyList>
 8005bbc:	e001      	b.n	8005bc2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bc2:	697b      	ldr	r3, [r7, #20]
	}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3728      	adds	r7, #40	; 0x28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08c      	sub	sp, #48	; 0x30
 8005bd0:	af04      	add	r7, sp, #16
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fd2b 	bl	800663c <pvPortMalloc>
 8005be6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00e      	beq.n	8005c0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bee:	205c      	movs	r0, #92	; 0x5c
 8005bf0:	f000 fd24 	bl	800663c <pvPortMalloc>
 8005bf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	631a      	str	r2, [r3, #48]	; 0x30
 8005c02:	e005      	b.n	8005c10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c04:	6978      	ldr	r0, [r7, #20]
 8005c06:	f000 fde5 	bl	80067d4 <vPortFree>
 8005c0a:	e001      	b.n	8005c10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d017      	beq.n	8005c46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c1e:	88fa      	ldrh	r2, [r7, #6]
 8005c20:	2300      	movs	r3, #0
 8005c22:	9303      	str	r3, [sp, #12]
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	9302      	str	r3, [sp, #8]
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	9301      	str	r3, [sp, #4]
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 f80e 	bl	8005c56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c3a:	69f8      	ldr	r0, [r7, #28]
 8005c3c:	f000 f89a 	bl	8005d74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c40:	2301      	movs	r3, #1
 8005c42:	61bb      	str	r3, [r7, #24]
 8005c44:	e002      	b.n	8005c4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c46:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c4c:	69bb      	ldr	r3, [r7, #24]
	}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3720      	adds	r7, #32
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b088      	sub	sp, #32
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
 8005c62:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	21a5      	movs	r1, #165	; 0xa5
 8005c70:	f000 fece 	bl	8006a10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	f023 0307 	bic.w	r3, r3, #7
 8005c8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c98:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	617b      	str	r3, [r7, #20]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01f      	beq.n	8005cf4 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	e012      	b.n	8005ce0 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	7819      	ldrb	r1, [r3, #0]
 8005cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3334      	adds	r3, #52	; 0x34
 8005cca:	460a      	mov	r2, r1
 8005ccc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d006      	beq.n	8005ce8 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	61fb      	str	r3, [r7, #28]
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	2b0f      	cmp	r3, #15
 8005ce4:	d9e9      	bls.n	8005cba <prvInitialiseNewTask+0x64>
 8005ce6:	e000      	b.n	8005cea <prvInitialiseNewTask+0x94>
			{
				break;
 8005ce8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cf2:	e003      	b.n	8005cfc <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	2b37      	cmp	r3, #55	; 0x37
 8005d00:	d901      	bls.n	8005d06 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d02:	2337      	movs	r3, #55	; 0x37
 8005d04:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d10:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	2200      	movs	r2, #0
 8005d16:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fe64 	bl	80059ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	3318      	adds	r3, #24
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff fe5f 	bl	80059ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	2200      	movs	r2, #0
 8005d46:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	69b8      	ldr	r0, [r7, #24]
 8005d56:	f000 fb47 	bl	80063e8 <pxPortInitialiseStack>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d6c:	bf00      	nop
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d7c:	f000 fbac 	bl	80064d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d80:	4b2d      	ldr	r3, [pc, #180]	; (8005e38 <prvAddNewTaskToReadyList+0xc4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3301      	adds	r3, #1
 8005d86:	4a2c      	ldr	r2, [pc, #176]	; (8005e38 <prvAddNewTaskToReadyList+0xc4>)
 8005d88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d8a:	4b2c      	ldr	r3, [pc, #176]	; (8005e3c <prvAddNewTaskToReadyList+0xc8>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d92:	4a2a      	ldr	r2, [pc, #168]	; (8005e3c <prvAddNewTaskToReadyList+0xc8>)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d98:	4b27      	ldr	r3, [pc, #156]	; (8005e38 <prvAddNewTaskToReadyList+0xc4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d110      	bne.n	8005dc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005da0:	f000 fa50 	bl	8006244 <prvInitialiseTaskLists>
 8005da4:	e00d      	b.n	8005dc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005da6:	4b26      	ldr	r3, [pc, #152]	; (8005e40 <prvAddNewTaskToReadyList+0xcc>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d109      	bne.n	8005dc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005dae:	4b23      	ldr	r3, [pc, #140]	; (8005e3c <prvAddNewTaskToReadyList+0xc8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d802      	bhi.n	8005dc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005dbc:	4a1f      	ldr	r2, [pc, #124]	; (8005e3c <prvAddNewTaskToReadyList+0xc8>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dc2:	4b20      	ldr	r3, [pc, #128]	; (8005e44 <prvAddNewTaskToReadyList+0xd0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	4a1e      	ldr	r2, [pc, #120]	; (8005e44 <prvAddNewTaskToReadyList+0xd0>)
 8005dca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	; (8005e44 <prvAddNewTaskToReadyList+0xd0>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd8:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <prvAddNewTaskToReadyList+0xd4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d903      	bls.n	8005de8 <prvAddNewTaskToReadyList+0x74>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <prvAddNewTaskToReadyList+0xd4>)
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4a15      	ldr	r2, [pc, #84]	; (8005e4c <prvAddNewTaskToReadyList+0xd8>)
 8005df6:	441a      	add	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	f7ff fe00 	bl	8005a04 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e04:	f000 fb98 	bl	8006538 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e08:	4b0d      	ldr	r3, [pc, #52]	; (8005e40 <prvAddNewTaskToReadyList+0xcc>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00e      	beq.n	8005e2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e10:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <prvAddNewTaskToReadyList+0xc8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d207      	bcs.n	8005e2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	; (8005e50 <prvAddNewTaskToReadyList+0xdc>)
 8005e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000a4c 	.word	0x20000a4c
 8005e3c:	2000057c 	.word	0x2000057c
 8005e40:	20000a58 	.word	0x20000a58
 8005e44:	20000a68 	.word	0x20000a68
 8005e48:	20000a54 	.word	0x20000a54
 8005e4c:	20000580 	.word	0x20000580
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d017      	beq.n	8005e96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e66:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <vTaskDelay+0x60>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <vTaskDelay+0x30>
	__asm volatile
 8005e6e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	60bb      	str	r3, [r7, #8]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e84:	f000 f81a 	bl	8005ebc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e88:	2100      	movs	r1, #0
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa58 	bl	8006340 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e90:	f000 f822 	bl	8005ed8 <xTaskResumeAll>
 8005e94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d107      	bne.n	8005eac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <vTaskDelay+0x64>)
 8005e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000a70 	.word	0x20000a70
 8005eb8:	e000ed04 	.word	0xe000ed04

08005ebc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ec0:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <vTaskSuspendAll+0x18>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	4a03      	ldr	r2, [pc, #12]	; (8005ed4 <vTaskSuspendAll+0x18>)
 8005ec8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005eca:	bf00      	nop
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	20000a70 	.word	0x20000a70

08005ed8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ee6:	4b42      	ldr	r3, [pc, #264]	; (8005ff0 <xTaskResumeAll+0x118>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <xTaskResumeAll+0x2c>
	__asm volatile
 8005eee:	f04f 0370 	mov.w	r3, #112	; 0x70
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	603b      	str	r3, [r7, #0]
}
 8005f00:	bf00      	nop
 8005f02:	e7fe      	b.n	8005f02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f04:	f000 fae8 	bl	80064d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f08:	4b39      	ldr	r3, [pc, #228]	; (8005ff0 <xTaskResumeAll+0x118>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	4a38      	ldr	r2, [pc, #224]	; (8005ff0 <xTaskResumeAll+0x118>)
 8005f10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f12:	4b37      	ldr	r3, [pc, #220]	; (8005ff0 <xTaskResumeAll+0x118>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d162      	bne.n	8005fe0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f1a:	4b36      	ldr	r3, [pc, #216]	; (8005ff4 <xTaskResumeAll+0x11c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d05e      	beq.n	8005fe0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f22:	e02f      	b.n	8005f84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f24:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <xTaskResumeAll+0x120>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3318      	adds	r3, #24
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fdc4 	bl	8005abe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff fdbf 	bl	8005abe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f44:	4b2d      	ldr	r3, [pc, #180]	; (8005ffc <xTaskResumeAll+0x124>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d903      	bls.n	8005f54 <xTaskResumeAll+0x7c>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	4a2a      	ldr	r2, [pc, #168]	; (8005ffc <xTaskResumeAll+0x124>)
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4a27      	ldr	r2, [pc, #156]	; (8006000 <xTaskResumeAll+0x128>)
 8005f62:	441a      	add	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f7ff fd4a 	bl	8005a04 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f74:	4b23      	ldr	r3, [pc, #140]	; (8006004 <xTaskResumeAll+0x12c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d302      	bcc.n	8005f84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f7e:	4b22      	ldr	r3, [pc, #136]	; (8006008 <xTaskResumeAll+0x130>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f84:	4b1c      	ldr	r3, [pc, #112]	; (8005ff8 <xTaskResumeAll+0x120>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1cb      	bne.n	8005f24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f92:	f000 f997 	bl	80062c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f96:	4b1d      	ldr	r3, [pc, #116]	; (800600c <xTaskResumeAll+0x134>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d010      	beq.n	8005fc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fa2:	f000 f837 	bl	8006014 <xTaskIncrementTick>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005fac:	4b16      	ldr	r3, [pc, #88]	; (8006008 <xTaskResumeAll+0x130>)
 8005fae:	2201      	movs	r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f1      	bne.n	8005fa2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005fbe:	4b13      	ldr	r3, [pc, #76]	; (800600c <xTaskResumeAll+0x134>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fc4:	4b10      	ldr	r3, [pc, #64]	; (8006008 <xTaskResumeAll+0x130>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d009      	beq.n	8005fe0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fd0:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <xTaskResumeAll+0x138>)
 8005fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fe0:	f000 faaa 	bl	8006538 <vPortExitCritical>

	return xAlreadyYielded;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000a70 	.word	0x20000a70
 8005ff4:	20000a4c 	.word	0x20000a4c
 8005ff8:	20000a10 	.word	0x20000a10
 8005ffc:	20000a54 	.word	0x20000a54
 8006000:	20000580 	.word	0x20000580
 8006004:	2000057c 	.word	0x2000057c
 8006008:	20000a60 	.word	0x20000a60
 800600c:	20000a5c 	.word	0x20000a5c
 8006010:	e000ed04 	.word	0xe000ed04

08006014 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800601e:	4b4f      	ldr	r3, [pc, #316]	; (800615c <xTaskIncrementTick+0x148>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	f040 808f 	bne.w	8006146 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006028:	4b4d      	ldr	r3, [pc, #308]	; (8006160 <xTaskIncrementTick+0x14c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3301      	adds	r3, #1
 800602e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006030:	4a4b      	ldr	r2, [pc, #300]	; (8006160 <xTaskIncrementTick+0x14c>)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d120      	bne.n	800607e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800603c:	4b49      	ldr	r3, [pc, #292]	; (8006164 <xTaskIncrementTick+0x150>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <xTaskIncrementTick+0x48>
	__asm volatile
 8006046:	f04f 0370 	mov.w	r3, #112	; 0x70
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	603b      	str	r3, [r7, #0]
}
 8006058:	bf00      	nop
 800605a:	e7fe      	b.n	800605a <xTaskIncrementTick+0x46>
 800605c:	4b41      	ldr	r3, [pc, #260]	; (8006164 <xTaskIncrementTick+0x150>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	4b41      	ldr	r3, [pc, #260]	; (8006168 <xTaskIncrementTick+0x154>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a3f      	ldr	r2, [pc, #252]	; (8006164 <xTaskIncrementTick+0x150>)
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	4a3f      	ldr	r2, [pc, #252]	; (8006168 <xTaskIncrementTick+0x154>)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	4b3e      	ldr	r3, [pc, #248]	; (800616c <xTaskIncrementTick+0x158>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	4a3d      	ldr	r2, [pc, #244]	; (800616c <xTaskIncrementTick+0x158>)
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	f000 f923 	bl	80062c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800607e:	4b3c      	ldr	r3, [pc, #240]	; (8006170 <xTaskIncrementTick+0x15c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	429a      	cmp	r2, r3
 8006086:	d349      	bcc.n	800611c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006088:	4b36      	ldr	r3, [pc, #216]	; (8006164 <xTaskIncrementTick+0x150>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d104      	bne.n	800609c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006092:	4b37      	ldr	r3, [pc, #220]	; (8006170 <xTaskIncrementTick+0x15c>)
 8006094:	f04f 32ff 	mov.w	r2, #4294967295
 8006098:	601a      	str	r2, [r3, #0]
					break;
 800609a:	e03f      	b.n	800611c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800609c:	4b31      	ldr	r3, [pc, #196]	; (8006164 <xTaskIncrementTick+0x150>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d203      	bcs.n	80060bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060b4:	4a2e      	ldr	r2, [pc, #184]	; (8006170 <xTaskIncrementTick+0x15c>)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060ba:	e02f      	b.n	800611c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	3304      	adds	r3, #4
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff fcfc 	bl	8005abe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d004      	beq.n	80060d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	3318      	adds	r3, #24
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fcf3 	bl	8005abe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060dc:	4b25      	ldr	r3, [pc, #148]	; (8006174 <xTaskIncrementTick+0x160>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d903      	bls.n	80060ec <xTaskIncrementTick+0xd8>
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	4a22      	ldr	r2, [pc, #136]	; (8006174 <xTaskIncrementTick+0x160>)
 80060ea:	6013      	str	r3, [r2, #0]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4a1f      	ldr	r2, [pc, #124]	; (8006178 <xTaskIncrementTick+0x164>)
 80060fa:	441a      	add	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	3304      	adds	r3, #4
 8006100:	4619      	mov	r1, r3
 8006102:	4610      	mov	r0, r2
 8006104:	f7ff fc7e 	bl	8005a04 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610c:	4b1b      	ldr	r3, [pc, #108]	; (800617c <xTaskIncrementTick+0x168>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006112:	429a      	cmp	r2, r3
 8006114:	d3b8      	bcc.n	8006088 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006116:	2301      	movs	r3, #1
 8006118:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800611a:	e7b5      	b.n	8006088 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800611c:	4b17      	ldr	r3, [pc, #92]	; (800617c <xTaskIncrementTick+0x168>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006122:	4915      	ldr	r1, [pc, #84]	; (8006178 <xTaskIncrementTick+0x164>)
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d901      	bls.n	8006138 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006134:	2301      	movs	r3, #1
 8006136:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006138:	4b11      	ldr	r3, [pc, #68]	; (8006180 <xTaskIncrementTick+0x16c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006140:	2301      	movs	r3, #1
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	e004      	b.n	8006150 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006146:	4b0f      	ldr	r3, [pc, #60]	; (8006184 <xTaskIncrementTick+0x170>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3301      	adds	r3, #1
 800614c:	4a0d      	ldr	r2, [pc, #52]	; (8006184 <xTaskIncrementTick+0x170>)
 800614e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006150:	697b      	ldr	r3, [r7, #20]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000a70 	.word	0x20000a70
 8006160:	20000a50 	.word	0x20000a50
 8006164:	20000a08 	.word	0x20000a08
 8006168:	20000a0c 	.word	0x20000a0c
 800616c:	20000a64 	.word	0x20000a64
 8006170:	20000a6c 	.word	0x20000a6c
 8006174:	20000a54 	.word	0x20000a54
 8006178:	20000580 	.word	0x20000580
 800617c:	2000057c 	.word	0x2000057c
 8006180:	20000a60 	.word	0x20000a60
 8006184:	20000a5c 	.word	0x20000a5c

08006188 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800618e:	4b28      	ldr	r3, [pc, #160]	; (8006230 <vTaskSwitchContext+0xa8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006196:	4b27      	ldr	r3, [pc, #156]	; (8006234 <vTaskSwitchContext+0xac>)
 8006198:	2201      	movs	r2, #1
 800619a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800619c:	e041      	b.n	8006222 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800619e:	4b25      	ldr	r3, [pc, #148]	; (8006234 <vTaskSwitchContext+0xac>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061a4:	4b24      	ldr	r3, [pc, #144]	; (8006238 <vTaskSwitchContext+0xb0>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	e010      	b.n	80061ce <vTaskSwitchContext+0x46>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80061b2:	f04f 0370 	mov.w	r3, #112	; 0x70
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	607b      	str	r3, [r7, #4]
}
 80061c4:	bf00      	nop
 80061c6:	e7fe      	b.n	80061c6 <vTaskSwitchContext+0x3e>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	491b      	ldr	r1, [pc, #108]	; (800623c <vTaskSwitchContext+0xb4>)
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	440b      	add	r3, r1
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0e4      	beq.n	80061ac <vTaskSwitchContext+0x24>
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4a13      	ldr	r2, [pc, #76]	; (800623c <vTaskSwitchContext+0xb4>)
 80061ee:	4413      	add	r3, r2
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	605a      	str	r2, [r3, #4]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	3308      	adds	r3, #8
 8006204:	429a      	cmp	r2, r3
 8006206:	d104      	bne.n	8006212 <vTaskSwitchContext+0x8a>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	605a      	str	r2, [r3, #4]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	4a09      	ldr	r2, [pc, #36]	; (8006240 <vTaskSwitchContext+0xb8>)
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	4a06      	ldr	r2, [pc, #24]	; (8006238 <vTaskSwitchContext+0xb0>)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6013      	str	r3, [r2, #0]
}
 8006222:	bf00      	nop
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000a70 	.word	0x20000a70
 8006234:	20000a60 	.word	0x20000a60
 8006238:	20000a54 	.word	0x20000a54
 800623c:	20000580 	.word	0x20000580
 8006240:	2000057c 	.word	0x2000057c

08006244 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800624a:	2300      	movs	r3, #0
 800624c:	607b      	str	r3, [r7, #4]
 800624e:	e00c      	b.n	800626a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4a12      	ldr	r2, [pc, #72]	; (80062a4 <prvInitialiseTaskLists+0x60>)
 800625c:	4413      	add	r3, r2
 800625e:	4618      	mov	r0, r3
 8006260:	f7ff fba3 	bl	80059aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3301      	adds	r3, #1
 8006268:	607b      	str	r3, [r7, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b37      	cmp	r3, #55	; 0x37
 800626e:	d9ef      	bls.n	8006250 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006270:	480d      	ldr	r0, [pc, #52]	; (80062a8 <prvInitialiseTaskLists+0x64>)
 8006272:	f7ff fb9a 	bl	80059aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006276:	480d      	ldr	r0, [pc, #52]	; (80062ac <prvInitialiseTaskLists+0x68>)
 8006278:	f7ff fb97 	bl	80059aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800627c:	480c      	ldr	r0, [pc, #48]	; (80062b0 <prvInitialiseTaskLists+0x6c>)
 800627e:	f7ff fb94 	bl	80059aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006282:	480c      	ldr	r0, [pc, #48]	; (80062b4 <prvInitialiseTaskLists+0x70>)
 8006284:	f7ff fb91 	bl	80059aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006288:	480b      	ldr	r0, [pc, #44]	; (80062b8 <prvInitialiseTaskLists+0x74>)
 800628a:	f7ff fb8e 	bl	80059aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800628e:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <prvInitialiseTaskLists+0x78>)
 8006290:	4a05      	ldr	r2, [pc, #20]	; (80062a8 <prvInitialiseTaskLists+0x64>)
 8006292:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006294:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <prvInitialiseTaskLists+0x7c>)
 8006296:	4a05      	ldr	r2, [pc, #20]	; (80062ac <prvInitialiseTaskLists+0x68>)
 8006298:	601a      	str	r2, [r3, #0]
}
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000580 	.word	0x20000580
 80062a8:	200009e0 	.word	0x200009e0
 80062ac:	200009f4 	.word	0x200009f4
 80062b0:	20000a10 	.word	0x20000a10
 80062b4:	20000a24 	.word	0x20000a24
 80062b8:	20000a38 	.word	0x20000a38
 80062bc:	20000a08 	.word	0x20000a08
 80062c0:	20000a0c 	.word	0x20000a0c

080062c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ca:	4b0c      	ldr	r3, [pc, #48]	; (80062fc <prvResetNextTaskUnblockTime+0x38>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d104      	bne.n	80062de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062d4:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <prvResetNextTaskUnblockTime+0x3c>)
 80062d6:	f04f 32ff 	mov.w	r2, #4294967295
 80062da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062dc:	e008      	b.n	80062f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062de:	4b07      	ldr	r3, [pc, #28]	; (80062fc <prvResetNextTaskUnblockTime+0x38>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	4a04      	ldr	r2, [pc, #16]	; (8006300 <prvResetNextTaskUnblockTime+0x3c>)
 80062ee:	6013      	str	r3, [r2, #0]
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	20000a08 	.word	0x20000a08
 8006300:	20000a6c 	.word	0x20000a6c

08006304 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800630a:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <xTaskGetSchedulerState+0x34>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d102      	bne.n	8006318 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006312:	2301      	movs	r3, #1
 8006314:	607b      	str	r3, [r7, #4]
 8006316:	e008      	b.n	800632a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006318:	4b08      	ldr	r3, [pc, #32]	; (800633c <xTaskGetSchedulerState+0x38>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d102      	bne.n	8006326 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006320:	2302      	movs	r3, #2
 8006322:	607b      	str	r3, [r7, #4]
 8006324:	e001      	b.n	800632a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006326:	2300      	movs	r3, #0
 8006328:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800632a:	687b      	ldr	r3, [r7, #4]
	}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	20000a58 	.word	0x20000a58
 800633c:	20000a70 	.word	0x20000a70

08006340 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800634a:	4b21      	ldr	r3, [pc, #132]	; (80063d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006350:	4b20      	ldr	r3, [pc, #128]	; (80063d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3304      	adds	r3, #4
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff fbb1 	bl	8005abe <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006362:	d10a      	bne.n	800637a <prvAddCurrentTaskToDelayedList+0x3a>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800636a:	4b1a      	ldr	r3, [pc, #104]	; (80063d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4819      	ldr	r0, [pc, #100]	; (80063d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006374:	f7ff fb46 	bl	8005a04 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006378:	e026      	b.n	80063c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4413      	add	r3, r2
 8006380:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006382:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	429a      	cmp	r2, r3
 8006390:	d209      	bcs.n	80063a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006392:	4b12      	ldr	r3, [pc, #72]	; (80063dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3304      	adds	r3, #4
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f7ff fb54 	bl	8005a4c <vListInsert>
}
 80063a4:	e010      	b.n	80063c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063a6:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4619      	mov	r1, r3
 80063b2:	4610      	mov	r0, r2
 80063b4:	f7ff fb4a 	bl	8005a4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063b8:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d202      	bcs.n	80063c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80063c2:	4a08      	ldr	r2, [pc, #32]	; (80063e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	6013      	str	r3, [r2, #0]
}
 80063c8:	bf00      	nop
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	20000a50 	.word	0x20000a50
 80063d4:	2000057c 	.word	0x2000057c
 80063d8:	20000a38 	.word	0x20000a38
 80063dc:	20000a0c 	.word	0x20000a0c
 80063e0:	20000a08 	.word	0x20000a08
 80063e4:	20000a6c 	.word	0x20000a6c

080063e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3b04      	subs	r3, #4
 80063f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3b04      	subs	r3, #4
 8006406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f023 0201 	bic.w	r2, r3, #1
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3b04      	subs	r3, #4
 8006416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006418:	4a0c      	ldr	r2, [pc, #48]	; (800644c <pxPortInitialiseStack+0x64>)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3b14      	subs	r3, #20
 8006422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3b04      	subs	r3, #4
 800642e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f06f 0202 	mvn.w	r2, #2
 8006436:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3b20      	subs	r3, #32
 800643c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800643e:	68fb      	ldr	r3, [r7, #12]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	08006451 	.word	0x08006451

08006450 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006456:	2300      	movs	r3, #0
 8006458:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800645a:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <prvTaskExitError+0x54>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006462:	d00a      	beq.n	800647a <prvTaskExitError+0x2a>
	__asm volatile
 8006464:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	60fb      	str	r3, [r7, #12]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <prvTaskExitError+0x28>
	__asm volatile
 800647a:	f04f 0370 	mov.w	r3, #112	; 0x70
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	60bb      	str	r3, [r7, #8]
}
 800648c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800648e:	bf00      	nop
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0fc      	beq.n	8006490 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006496:	bf00      	nop
 8006498:	bf00      	nop
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	2000000c 	.word	0x2000000c
	...

080064b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064b0:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <pxCurrentTCBConst2>)
 80064b2:	6819      	ldr	r1, [r3, #0]
 80064b4:	6808      	ldr	r0, [r1, #0]
 80064b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ba:	f380 8809 	msr	PSP, r0
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	f380 8811 	msr	BASEPRI, r0
 80064ca:	4770      	bx	lr
 80064cc:	f3af 8000 	nop.w

080064d0 <pxCurrentTCBConst2>:
 80064d0:	2000057c 	.word	0x2000057c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop

080064d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
	__asm volatile
 80064de:	f04f 0370 	mov.w	r3, #112	; 0x70
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	607b      	str	r3, [r7, #4]
}
 80064f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064f2:	4b0f      	ldr	r3, [pc, #60]	; (8006530 <vPortEnterCritical+0x58>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3301      	adds	r3, #1
 80064f8:	4a0d      	ldr	r2, [pc, #52]	; (8006530 <vPortEnterCritical+0x58>)
 80064fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064fc:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <vPortEnterCritical+0x58>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d10f      	bne.n	8006524 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006504:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <vPortEnterCritical+0x5c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <vPortEnterCritical+0x4c>
	__asm volatile
 800650e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	603b      	str	r3, [r7, #0]
}
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <vPortEnterCritical+0x4a>
	}
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	2000000c 	.word	0x2000000c
 8006534:	e000ed04 	.word	0xe000ed04

08006538 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800653e:	4b12      	ldr	r3, [pc, #72]	; (8006588 <vPortExitCritical+0x50>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10a      	bne.n	800655c <vPortExitCritical+0x24>
	__asm volatile
 8006546:	f04f 0370 	mov.w	r3, #112	; 0x70
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	607b      	str	r3, [r7, #4]
}
 8006558:	bf00      	nop
 800655a:	e7fe      	b.n	800655a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800655c:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <vPortExitCritical+0x50>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3b01      	subs	r3, #1
 8006562:	4a09      	ldr	r2, [pc, #36]	; (8006588 <vPortExitCritical+0x50>)
 8006564:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006566:	4b08      	ldr	r3, [pc, #32]	; (8006588 <vPortExitCritical+0x50>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d105      	bne.n	800657a <vPortExitCritical+0x42>
 800656e:	2300      	movs	r3, #0
 8006570:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006578:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	2000000c 	.word	0x2000000c
 800658c:	00000000 	.word	0x00000000

08006590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006590:	f3ef 8009 	mrs	r0, PSP
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <pxCurrentTCBConst>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	f01e 0f10 	tst.w	lr, #16
 80065a0:	bf08      	it	eq
 80065a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065aa:	6010      	str	r0, [r2, #0]
 80065ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065b0:	f04f 0070 	mov.w	r0, #112	; 0x70
 80065b4:	f380 8811 	msr	BASEPRI, r0
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f7ff fde2 	bl	8006188 <vTaskSwitchContext>
 80065c4:	f04f 0000 	mov.w	r0, #0
 80065c8:	f380 8811 	msr	BASEPRI, r0
 80065cc:	bc09      	pop	{r0, r3}
 80065ce:	6819      	ldr	r1, [r3, #0]
 80065d0:	6808      	ldr	r0, [r1, #0]
 80065d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d6:	f01e 0f10 	tst.w	lr, #16
 80065da:	bf08      	it	eq
 80065dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065e0:	f380 8809 	msr	PSP, r0
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	f3af 8000 	nop.w

080065f0 <pxCurrentTCBConst>:
 80065f0:	2000057c 	.word	0x2000057c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop

080065f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
	__asm volatile
 80065fe:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	607b      	str	r3, [r7, #4]
}
 8006610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006612:	f7ff fcff 	bl	8006014 <xTaskIncrementTick>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800661c:	4b06      	ldr	r3, [pc, #24]	; (8006638 <xPortSysTickHandler+0x40>)
 800661e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	2300      	movs	r3, #0
 8006626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f383 8811 	msr	BASEPRI, r3
}
 800662e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006630:	bf00      	nop
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08a      	sub	sp, #40	; 0x28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006644:	2300      	movs	r3, #0
 8006646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006648:	f7ff fc38 	bl	8005ebc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800664c:	4b5b      	ldr	r3, [pc, #364]	; (80067bc <pvPortMalloc+0x180>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006654:	f000 f920 	bl	8006898 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006658:	4b59      	ldr	r3, [pc, #356]	; (80067c0 <pvPortMalloc+0x184>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4013      	ands	r3, r2
 8006660:	2b00      	cmp	r3, #0
 8006662:	f040 8093 	bne.w	800678c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01d      	beq.n	80066a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800666c:	2208      	movs	r2, #8
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4413      	add	r3, r2
 8006672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	2b00      	cmp	r3, #0
 800667c:	d014      	beq.n	80066a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f023 0307 	bic.w	r3, r3, #7
 8006684:	3308      	adds	r3, #8
 8006686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <pvPortMalloc+0x6c>
	__asm volatile
 8006692:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	617b      	str	r3, [r7, #20]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d06e      	beq.n	800678c <pvPortMalloc+0x150>
 80066ae:	4b45      	ldr	r3, [pc, #276]	; (80067c4 <pvPortMalloc+0x188>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d869      	bhi.n	800678c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066b8:	4b43      	ldr	r3, [pc, #268]	; (80067c8 <pvPortMalloc+0x18c>)
 80066ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066bc:	4b42      	ldr	r3, [pc, #264]	; (80067c8 <pvPortMalloc+0x18c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066c2:	e004      	b.n	80066ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d903      	bls.n	80066e0 <pvPortMalloc+0xa4>
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f1      	bne.n	80066c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066e0:	4b36      	ldr	r3, [pc, #216]	; (80067bc <pvPortMalloc+0x180>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d050      	beq.n	800678c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2208      	movs	r2, #8
 80066f0:	4413      	add	r3, r2
 80066f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	1ad2      	subs	r2, r2, r3
 8006704:	2308      	movs	r3, #8
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	429a      	cmp	r2, r3
 800670a:	d91f      	bls.n	800674c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800670c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4413      	add	r3, r2
 8006712:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <pvPortMalloc+0xf8>
	__asm volatile
 800671e:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	613b      	str	r3, [r7, #16]
}
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	1ad2      	subs	r2, r2, r3
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006746:	69b8      	ldr	r0, [r7, #24]
 8006748:	f000 f908 	bl	800695c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800674c:	4b1d      	ldr	r3, [pc, #116]	; (80067c4 <pvPortMalloc+0x188>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	4a1b      	ldr	r2, [pc, #108]	; (80067c4 <pvPortMalloc+0x188>)
 8006758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800675a:	4b1a      	ldr	r3, [pc, #104]	; (80067c4 <pvPortMalloc+0x188>)
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	4b1b      	ldr	r3, [pc, #108]	; (80067cc <pvPortMalloc+0x190>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d203      	bcs.n	800676e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006766:	4b17      	ldr	r3, [pc, #92]	; (80067c4 <pvPortMalloc+0x188>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a18      	ldr	r2, [pc, #96]	; (80067cc <pvPortMalloc+0x190>)
 800676c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	4b13      	ldr	r3, [pc, #76]	; (80067c0 <pvPortMalloc+0x184>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	431a      	orrs	r2, r3
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006782:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <pvPortMalloc+0x194>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3301      	adds	r3, #1
 8006788:	4a11      	ldr	r2, [pc, #68]	; (80067d0 <pvPortMalloc+0x194>)
 800678a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800678c:	f7ff fba4 	bl	8005ed8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <pvPortMalloc+0x174>
	__asm volatile
 800679a:	f04f 0370 	mov.w	r3, #112	; 0x70
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	60fb      	str	r3, [r7, #12]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <pvPortMalloc+0x172>
	return pvReturn;
 80067b0:	69fb      	ldr	r3, [r7, #28]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3728      	adds	r7, #40	; 0x28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	2000467c 	.word	0x2000467c
 80067c0:	20004690 	.word	0x20004690
 80067c4:	20004680 	.word	0x20004680
 80067c8:	20004674 	.word	0x20004674
 80067cc:	20004684 	.word	0x20004684
 80067d0:	20004688 	.word	0x20004688

080067d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d04d      	beq.n	8006882 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067e6:	2308      	movs	r3, #8
 80067e8:	425b      	negs	r3, r3
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4413      	add	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	4b24      	ldr	r3, [pc, #144]	; (800688c <vPortFree+0xb8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4013      	ands	r3, r2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <vPortFree+0x44>
	__asm volatile
 8006802:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	60fb      	str	r3, [r7, #12]
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <vPortFree+0x62>
	__asm volatile
 8006820:	f04f 0370 	mov.w	r3, #112	; 0x70
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	60bb      	str	r3, [r7, #8]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	4b14      	ldr	r3, [pc, #80]	; (800688c <vPortFree+0xb8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4013      	ands	r3, r2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d01e      	beq.n	8006882 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d11a      	bne.n	8006882 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	4b0e      	ldr	r3, [pc, #56]	; (800688c <vPortFree+0xb8>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	43db      	mvns	r3, r3
 8006856:	401a      	ands	r2, r3
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800685c:	f7ff fb2e 	bl	8005ebc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <vPortFree+0xbc>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4413      	add	r3, r2
 800686a:	4a09      	ldr	r2, [pc, #36]	; (8006890 <vPortFree+0xbc>)
 800686c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800686e:	6938      	ldr	r0, [r7, #16]
 8006870:	f000 f874 	bl	800695c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006874:	4b07      	ldr	r3, [pc, #28]	; (8006894 <vPortFree+0xc0>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	4a06      	ldr	r2, [pc, #24]	; (8006894 <vPortFree+0xc0>)
 800687c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800687e:	f7ff fb2b 	bl	8005ed8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006882:	bf00      	nop
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20004690 	.word	0x20004690
 8006890:	20004680 	.word	0x20004680
 8006894:	2000468c 	.word	0x2000468c

08006898 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800689e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068a4:	4b27      	ldr	r3, [pc, #156]	; (8006944 <prvHeapInit+0xac>)
 80068a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00c      	beq.n	80068cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3307      	adds	r3, #7
 80068b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0307 	bic.w	r3, r3, #7
 80068be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	4a1f      	ldr	r2, [pc, #124]	; (8006944 <prvHeapInit+0xac>)
 80068c8:	4413      	add	r3, r2
 80068ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068d0:	4a1d      	ldr	r2, [pc, #116]	; (8006948 <prvHeapInit+0xb0>)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068d6:	4b1c      	ldr	r3, [pc, #112]	; (8006948 <prvHeapInit+0xb0>)
 80068d8:	2200      	movs	r2, #0
 80068da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068e4:	2208      	movs	r2, #8
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	1a9b      	subs	r3, r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0307 	bic.w	r3, r3, #7
 80068f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4a15      	ldr	r2, [pc, #84]	; (800694c <prvHeapInit+0xb4>)
 80068f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068fa:	4b14      	ldr	r3, [pc, #80]	; (800694c <prvHeapInit+0xb4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2200      	movs	r2, #0
 8006900:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006902:	4b12      	ldr	r3, [pc, #72]	; (800694c <prvHeapInit+0xb4>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006918:	4b0c      	ldr	r3, [pc, #48]	; (800694c <prvHeapInit+0xb4>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <prvHeapInit+0xb8>)
 8006926:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	4a09      	ldr	r2, [pc, #36]	; (8006954 <prvHeapInit+0xbc>)
 800692e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006930:	4b09      	ldr	r3, [pc, #36]	; (8006958 <prvHeapInit+0xc0>)
 8006932:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006936:	601a      	str	r2, [r3, #0]
}
 8006938:	bf00      	nop
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	20000a74 	.word	0x20000a74
 8006948:	20004674 	.word	0x20004674
 800694c:	2000467c 	.word	0x2000467c
 8006950:	20004684 	.word	0x20004684
 8006954:	20004680 	.word	0x20004680
 8006958:	20004690 	.word	0x20004690

0800695c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006964:	4b28      	ldr	r3, [pc, #160]	; (8006a08 <prvInsertBlockIntoFreeList+0xac>)
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e002      	b.n	8006970 <prvInsertBlockIntoFreeList+0x14>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	429a      	cmp	r2, r3
 8006978:	d8f7      	bhi.n	800696a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	4413      	add	r3, r2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	429a      	cmp	r2, r3
 800698a:	d108      	bne.n	800699e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	441a      	add	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	441a      	add	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d118      	bne.n	80069e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <prvInsertBlockIntoFreeList+0xb0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d00d      	beq.n	80069da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	441a      	add	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	e008      	b.n	80069ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069da:	4b0c      	ldr	r3, [pc, #48]	; (8006a0c <prvInsertBlockIntoFreeList+0xb0>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	e003      	b.n	80069ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d002      	beq.n	80069fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	20004674 	.word	0x20004674
 8006a0c:	2000467c 	.word	0x2000467c

08006a10 <memset>:
 8006a10:	4402      	add	r2, r0
 8006a12:	4603      	mov	r3, r0
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d100      	bne.n	8006a1a <memset+0xa>
 8006a18:	4770      	bx	lr
 8006a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a1e:	e7f9      	b.n	8006a14 <memset+0x4>

08006a20 <__libc_init_array>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	4d0d      	ldr	r5, [pc, #52]	; (8006a58 <__libc_init_array+0x38>)
 8006a24:	4c0d      	ldr	r4, [pc, #52]	; (8006a5c <__libc_init_array+0x3c>)
 8006a26:	1b64      	subs	r4, r4, r5
 8006a28:	10a4      	asrs	r4, r4, #2
 8006a2a:	2600      	movs	r6, #0
 8006a2c:	42a6      	cmp	r6, r4
 8006a2e:	d109      	bne.n	8006a44 <__libc_init_array+0x24>
 8006a30:	4d0b      	ldr	r5, [pc, #44]	; (8006a60 <__libc_init_array+0x40>)
 8006a32:	4c0c      	ldr	r4, [pc, #48]	; (8006a64 <__libc_init_array+0x44>)
 8006a34:	f000 f860 	bl	8006af8 <_init>
 8006a38:	1b64      	subs	r4, r4, r5
 8006a3a:	10a4      	asrs	r4, r4, #2
 8006a3c:	2600      	movs	r6, #0
 8006a3e:	42a6      	cmp	r6, r4
 8006a40:	d105      	bne.n	8006a4e <__libc_init_array+0x2e>
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a48:	4798      	blx	r3
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	e7ee      	b.n	8006a2c <__libc_init_array+0xc>
 8006a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a52:	4798      	blx	r3
 8006a54:	3601      	adds	r6, #1
 8006a56:	e7f2      	b.n	8006a3e <__libc_init_array+0x1e>
 8006a58:	08006b60 	.word	0x08006b60
 8006a5c:	08006b60 	.word	0x08006b60
 8006a60:	08006b60 	.word	0x08006b60
 8006a64:	08006b64 	.word	0x08006b64

08006a68 <round>:
 8006a68:	ec53 2b10 	vmov	r2, r3, d0
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8006a72:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8006a76:	2813      	cmp	r0, #19
 8006a78:	ee10 5a10 	vmov	r5, s0
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	dc18      	bgt.n	8006ab2 <round+0x4a>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	da09      	bge.n	8006a98 <round+0x30>
 8006a84:	3001      	adds	r0, #1
 8006a86:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8006a8a:	d103      	bne.n	8006a94 <round+0x2c>
 8006a8c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8006a90:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006a94:	2300      	movs	r3, #0
 8006a96:	e02a      	b.n	8006aee <round+0x86>
 8006a98:	4c16      	ldr	r4, [pc, #88]	; (8006af4 <round+0x8c>)
 8006a9a:	4104      	asrs	r4, r0
 8006a9c:	ea03 0604 	and.w	r6, r3, r4
 8006aa0:	4316      	orrs	r6, r2
 8006aa2:	d011      	beq.n	8006ac8 <round+0x60>
 8006aa4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006aa8:	4103      	asrs	r3, r0
 8006aaa:	440b      	add	r3, r1
 8006aac:	ea23 0104 	bic.w	r1, r3, r4
 8006ab0:	e7f0      	b.n	8006a94 <round+0x2c>
 8006ab2:	2833      	cmp	r0, #51	; 0x33
 8006ab4:	dd0b      	ble.n	8006ace <round+0x66>
 8006ab6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006aba:	d105      	bne.n	8006ac8 <round+0x60>
 8006abc:	ee10 0a10 	vmov	r0, s0
 8006ac0:	f7f9 fbac 	bl	800021c <__adddf3>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	ec43 2b10 	vmov	d0, r2, r3
 8006acc:	bd70      	pop	{r4, r5, r6, pc}
 8006ace:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8006ad2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ad6:	40f4      	lsrs	r4, r6
 8006ad8:	4214      	tst	r4, r2
 8006ada:	d0f5      	beq.n	8006ac8 <round+0x60>
 8006adc:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	4083      	lsls	r3, r0
 8006ae4:	195b      	adds	r3, r3, r5
 8006ae6:	bf28      	it	cs
 8006ae8:	3101      	addcs	r1, #1
 8006aea:	ea23 0304 	bic.w	r3, r3, r4
 8006aee:	461a      	mov	r2, r3
 8006af0:	460b      	mov	r3, r1
 8006af2:	e7e9      	b.n	8006ac8 <round+0x60>
 8006af4:	000fffff 	.word	0x000fffff

08006af8 <_init>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr

08006b04 <_fini>:
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b06:	bf00      	nop
 8006b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0a:	bc08      	pop	{r3}
 8006b0c:	469e      	mov	lr, r3
 8006b0e:	4770      	bx	lr
