
First_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  080103b8  080103b8  000203b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010958  08010958  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08010958  08010958  00020958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010960  08010960  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010960  08010960  00020960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010964  08010964  00020964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08010968  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013e24  200001f0  08010b58  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20014014  08010b58  00034014  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021894  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005156  00000000  00000000  00051af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001df8  00000000  00000000  00056c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001735  00000000  00000000  00058a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007bc5  00000000  00000000  0005a17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000269bb  00000000  00000000  00061d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e697f  00000000  00000000  000886fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008f20  00000000  00000000  0016f07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  00177f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080103a0 	.word	0x080103a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	080103a0 	.word	0x080103a0

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200138f8 	.word	0x200138f8
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <strlen>:
 8000350:	4603      	mov	r3, r0
 8000352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000356:	2a00      	cmp	r2, #0
 8000358:	d1fb      	bne.n	8000352 <strlen+0x2>
 800035a:	1a18      	subs	r0, r3, r0
 800035c:	3801      	subs	r0, #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	; 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2iz>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c40:	d215      	bcs.n	8000c6e <__aeabi_d2iz+0x36>
 8000c42:	d511      	bpl.n	8000c68 <__aeabi_d2iz+0x30>
 8000c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d912      	bls.n	8000c74 <__aeabi_d2iz+0x3c>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	4770      	bx	lr
 8000c68:	f04f 0000 	mov.w	r0, #0
 8000c6c:	4770      	bx	lr
 8000c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c72:	d105      	bne.n	8000c80 <__aeabi_d2iz+0x48>
 8000c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	bf08      	it	eq
 8000c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2uiz>:
 8000c88:	004a      	lsls	r2, r1, #1
 8000c8a:	d211      	bcs.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c90:	d211      	bcs.n	8000cb6 <__aeabi_d2uiz+0x2e>
 8000c92:	d50d      	bpl.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c9c:	d40e      	bmi.n	8000cbc <__aeabi_d2uiz+0x34>
 8000c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000caa:	fa23 f002 	lsr.w	r0, r3, r2
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cba:	d102      	bne.n	8000cc2 <__aeabi_d2uiz+0x3a>
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	4770      	bx	lr
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2f>:
 8000cc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ccc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cd0:	bf24      	itt	cs
 8000cd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cda:	d90d      	bls.n	8000cf8 <__aeabi_d2f+0x30>
 8000cdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ce0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ce4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ce8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cfc:	d121      	bne.n	8000d42 <__aeabi_d2f+0x7a>
 8000cfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d02:	bfbc      	itt	lt
 8000d04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d08:	4770      	bxlt	lr
 8000d0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d12:	f1c2 0218 	rsb	r2, r2, #24
 8000d16:	f1c2 0c20 	rsb	ip, r2, #32
 8000d1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d22:	bf18      	it	ne
 8000d24:	f040 0001 	orrne.w	r0, r0, #1
 8000d28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d34:	ea40 000c 	orr.w	r0, r0, ip
 8000d38:	fa23 f302 	lsr.w	r3, r3, r2
 8000d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d40:	e7cc      	b.n	8000cdc <__aeabi_d2f+0x14>
 8000d42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d46:	d107      	bne.n	8000d58 <__aeabi_d2f+0x90>
 8000d48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d56:	4770      	bxne	lr
 8000d58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b970 	b.w	8001060 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f806 	bl	8000d98 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__udivmoddi4>:
 8000d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d9c:	9e08      	ldr	r6, [sp, #32]
 8000d9e:	460d      	mov	r5, r1
 8000da0:	4604      	mov	r4, r0
 8000da2:	460f      	mov	r7, r1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d14a      	bne.n	8000e3e <__udivmoddi4+0xa6>
 8000da8:	428a      	cmp	r2, r1
 8000daa:	4694      	mov	ip, r2
 8000dac:	d965      	bls.n	8000e7a <__udivmoddi4+0xe2>
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	b143      	cbz	r3, 8000dc6 <__udivmoddi4+0x2e>
 8000db4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db8:	f1c3 0220 	rsb	r2, r3, #32
 8000dbc:	409f      	lsls	r7, r3
 8000dbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	409c      	lsls	r4, r3
 8000dc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dca:	fa1f f58c 	uxth.w	r5, ip
 8000dce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dd2:	0c22      	lsrs	r2, r4, #16
 8000dd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ddc:	fb01 f005 	mul.w	r0, r1, r5
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x62>
 8000de4:	eb1c 0202 	adds.w	r2, ip, r2
 8000de8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dec:	f080 811c 	bcs.w	8001028 <__udivmoddi4+0x290>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f240 8119 	bls.w	8001028 <__udivmoddi4+0x290>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a12      	subs	r2, r2, r0
 8000dfc:	b2a4      	uxth	r4, r4
 8000dfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0a:	fb00 f505 	mul.w	r5, r0, r5
 8000e0e:	42a5      	cmp	r5, r4
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x90>
 8000e12:	eb1c 0404 	adds.w	r4, ip, r4
 8000e16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x294>
 8000e1e:	42a5      	cmp	r5, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x294>
 8000e24:	4464      	add	r4, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11e      	cbz	r6, 8000e3a <__udivmoddi4+0xa2>
 8000e32:	40dc      	lsrs	r4, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0xbc>
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	f000 80ed 	beq.w	8001022 <__udivmoddi4+0x28a>
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e54:	fab3 f183 	clz	r1, r3
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d149      	bne.n	8000ef0 <__udivmoddi4+0x158>
 8000e5c:	42ab      	cmp	r3, r5
 8000e5e:	d302      	bcc.n	8000e66 <__udivmoddi4+0xce>
 8000e60:	4282      	cmp	r2, r0
 8000e62:	f200 80f8 	bhi.w	8001056 <__udivmoddi4+0x2be>
 8000e66:	1a84      	subs	r4, r0, r2
 8000e68:	eb65 0203 	sbc.w	r2, r5, r3
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4617      	mov	r7, r2
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d0e2      	beq.n	8000e3a <__udivmoddi4+0xa2>
 8000e74:	e9c6 4700 	strd	r4, r7, [r6]
 8000e78:	e7df      	b.n	8000e3a <__udivmoddi4+0xa2>
 8000e7a:	b902      	cbnz	r2, 8000e7e <__udivmoddi4+0xe6>
 8000e7c:	deff      	udf	#255	; 0xff
 8000e7e:	fab2 f382 	clz	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8090 	bne.w	8000fa8 <__udivmoddi4+0x210>
 8000e88:	1a8a      	subs	r2, r1, r2
 8000e8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	2101      	movs	r1, #1
 8000e94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e98:	fb07 2015 	mls	r0, r7, r5, r2
 8000e9c:	0c22      	lsrs	r2, r4, #16
 8000e9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ea2:	fb0e f005 	mul.w	r0, lr, r5
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x124>
 8000eaa:	eb1c 0202 	adds.w	r2, ip, r2
 8000eae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x122>
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	f200 80cb 	bhi.w	8001050 <__udivmoddi4+0x2b8>
 8000eba:	4645      	mov	r5, r8
 8000ebc:	1a12      	subs	r2, r2, r0
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ec4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ecc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed0:	45a6      	cmp	lr, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x14e>
 8000ed4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000edc:	d202      	bcs.n	8000ee4 <__udivmoddi4+0x14c>
 8000ede:	45a6      	cmp	lr, r4
 8000ee0:	f200 80bb 	bhi.w	800105a <__udivmoddi4+0x2c2>
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	eba4 040e 	sub.w	r4, r4, lr
 8000eea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eee:	e79f      	b.n	8000e30 <__udivmoddi4+0x98>
 8000ef0:	f1c1 0720 	rsb	r7, r1, #32
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000efe:	fa05 f401 	lsl.w	r4, r5, r1
 8000f02:	fa20 f307 	lsr.w	r3, r0, r7
 8000f06:	40fd      	lsrs	r5, r7
 8000f08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	fb09 5518 	mls	r5, r9, r8, r5
 8000f1a:	0c1c      	lsrs	r4, r3, #16
 8000f1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f20:	fb08 f50e 	mul.w	r5, r8, lr
 8000f24:	42a5      	cmp	r5, r4
 8000f26:	fa02 f201 	lsl.w	r2, r2, r1
 8000f2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f2e:	d90b      	bls.n	8000f48 <__udivmoddi4+0x1b0>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f38:	f080 8088 	bcs.w	800104c <__udivmoddi4+0x2b4>
 8000f3c:	42a5      	cmp	r5, r4
 8000f3e:	f240 8085 	bls.w	800104c <__udivmoddi4+0x2b4>
 8000f42:	f1a8 0802 	sub.w	r8, r8, #2
 8000f46:	4464      	add	r4, ip
 8000f48:	1b64      	subs	r4, r4, r5
 8000f4a:	b29d      	uxth	r5, r3
 8000f4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f50:	fb09 4413 	mls	r4, r9, r3, r4
 8000f54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x1da>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f68:	d26c      	bcs.n	8001044 <__udivmoddi4+0x2ac>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	d96a      	bls.n	8001044 <__udivmoddi4+0x2ac>
 8000f6e:	3b02      	subs	r3, #2
 8000f70:	4464      	add	r4, ip
 8000f72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f76:	fba3 9502 	umull	r9, r5, r3, r2
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	42ac      	cmp	r4, r5
 8000f80:	46c8      	mov	r8, r9
 8000f82:	46ae      	mov	lr, r5
 8000f84:	d356      	bcc.n	8001034 <__udivmoddi4+0x29c>
 8000f86:	d053      	beq.n	8001030 <__udivmoddi4+0x298>
 8000f88:	b156      	cbz	r6, 8000fa0 <__udivmoddi4+0x208>
 8000f8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f92:	fa04 f707 	lsl.w	r7, r4, r7
 8000f96:	40ca      	lsrs	r2, r1
 8000f98:	40cc      	lsrs	r4, r1
 8000f9a:	4317      	orrs	r7, r2
 8000f9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa8:	f1c3 0120 	rsb	r1, r3, #32
 8000fac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000fb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000fb8:	409d      	lsls	r5, r3
 8000fba:	432a      	orrs	r2, r5
 8000fbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc0:	fa1f fe8c 	uxth.w	lr, ip
 8000fc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fcc:	0c11      	lsrs	r1, r2, #16
 8000fce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fd2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fd6:	428d      	cmp	r5, r1
 8000fd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x258>
 8000fde:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fe6:	d22f      	bcs.n	8001048 <__udivmoddi4+0x2b0>
 8000fe8:	428d      	cmp	r5, r1
 8000fea:	d92d      	bls.n	8001048 <__udivmoddi4+0x2b0>
 8000fec:	3802      	subs	r0, #2
 8000fee:	4461      	add	r1, ip
 8000ff0:	1b49      	subs	r1, r1, r5
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ff8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	fb05 f10e 	mul.w	r1, r5, lr
 8001004:	4291      	cmp	r1, r2
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x282>
 8001008:	eb1c 0202 	adds.w	r2, ip, r2
 800100c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001010:	d216      	bcs.n	8001040 <__udivmoddi4+0x2a8>
 8001012:	4291      	cmp	r1, r2
 8001014:	d914      	bls.n	8001040 <__udivmoddi4+0x2a8>
 8001016:	3d02      	subs	r5, #2
 8001018:	4462      	add	r2, ip
 800101a:	1a52      	subs	r2, r2, r1
 800101c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001020:	e738      	b.n	8000e94 <__udivmoddi4+0xfc>
 8001022:	4631      	mov	r1, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e708      	b.n	8000e3a <__udivmoddi4+0xa2>
 8001028:	4639      	mov	r1, r7
 800102a:	e6e6      	b.n	8000dfa <__udivmoddi4+0x62>
 800102c:	4610      	mov	r0, r2
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x90>
 8001030:	4548      	cmp	r0, r9
 8001032:	d2a9      	bcs.n	8000f88 <__udivmoddi4+0x1f0>
 8001034:	ebb9 0802 	subs.w	r8, r9, r2
 8001038:	eb65 0e0c 	sbc.w	lr, r5, ip
 800103c:	3b01      	subs	r3, #1
 800103e:	e7a3      	b.n	8000f88 <__udivmoddi4+0x1f0>
 8001040:	4645      	mov	r5, r8
 8001042:	e7ea      	b.n	800101a <__udivmoddi4+0x282>
 8001044:	462b      	mov	r3, r5
 8001046:	e794      	b.n	8000f72 <__udivmoddi4+0x1da>
 8001048:	4640      	mov	r0, r8
 800104a:	e7d1      	b.n	8000ff0 <__udivmoddi4+0x258>
 800104c:	46d0      	mov	r8, sl
 800104e:	e77b      	b.n	8000f48 <__udivmoddi4+0x1b0>
 8001050:	3d02      	subs	r5, #2
 8001052:	4462      	add	r2, ip
 8001054:	e732      	b.n	8000ebc <__udivmoddi4+0x124>
 8001056:	4608      	mov	r0, r1
 8001058:	e70a      	b.n	8000e70 <__udivmoddi4+0xd8>
 800105a:	4464      	add	r4, ip
 800105c:	3802      	subs	r0, #2
 800105e:	e742      	b.n	8000ee6 <__udivmoddi4+0x14e>

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <Buzzer_voidHighSound>:
#endif


}
void Buzzer_voidHighSound(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0


#endif
#elif Buzzer_Timer_Connected == TIMER12
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1
	TIM12->CCR1=90;
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <Buzzer_voidHighSound+0x18>)
 800106a:	225a      	movs	r2, #90	; 0x5a
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 800106e:	2100      	movs	r1, #0
 8001070:	4803      	ldr	r0, [pc, #12]	; (8001080 <Buzzer_voidHighSound+0x1c>)
 8001072:	f005 fb3d 	bl	80066f0 <HAL_TIM_PWM_Start>

#endif



}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40001800 	.word	0x40001800
 8001080:	20000908 	.word	0x20000908

08001084 <Buzzer_voidStop>:

void Buzzer_voidStop(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
#endif

#elif Buzzer_Timer_Connected == TIMER12
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1

	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8001088:	2100      	movs	r1, #0
 800108a:	4802      	ldr	r0, [pc, #8]	; (8001094 <Buzzer_voidStop+0x10>)
 800108c:	f005 fbf8 	bl	8006880 <HAL_TIM_PWM_Stop>




#endif
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000908 	.word	0x20000908

08001098 <HAL_TIM_IC_CaptureCallback>:


/***************************************Interrupts_Call_Backs********************************************************/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a8:	d10c      	bne.n	80010c4 <HAL_TIM_IC_CaptureCallback+0x2c>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	7f1b      	ldrb	r3, [r3, #28]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d003      	beq.n	80010ba <HAL_TIM_IC_CaptureCallback+0x22>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7f1b      	ldrb	r3, [r3, #28]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d104      	bne.n	80010c4 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		edges_counter++;
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_TIM_IC_CaptureCallback+0x38>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a03      	ldr	r2, [pc, #12]	; (80010d0 <HAL_TIM_IC_CaptureCallback+0x38>)
 80010c2:	6013      	str	r3, [r2, #0]
	}
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	20000224 	.word	0x20000224

080010d4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af02      	add	r7, sp, #8
 80010da:	6078      	str	r0, [r7, #4]
	/* Bluetooth interrupt*/
	if(huart->Instance==USART3)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <HAL_UART_RxCpltCallback+0x3c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d10f      	bne.n	8001106 <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_UART_Receive_IT(&huart3, &received_char, 1);
 80010e6:	2201      	movs	r2, #1
 80010e8:	490a      	ldr	r1, [pc, #40]	; (8001114 <HAL_UART_RxCpltCallback+0x40>)
 80010ea:	480b      	ldr	r0, [pc, #44]	; (8001118 <HAL_UART_RxCpltCallback+0x44>)
 80010ec:	f006 faf7 	bl	80076de <HAL_UART_Receive_IT>

		/*Give the Notification to the CarControl task*/
		xTaskNotifyFromISR(Handle_CarControl,NULL,eNoAction,NULL);
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_UART_RxCpltCallback+0x48>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	2300      	movs	r3, #0
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	2300      	movs	r3, #0
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2300      	movs	r3, #0
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	f008 fef5 	bl	8009ef0 <xTaskGenericNotifyFromISR>

	}
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40004800 	.word	0x40004800
 8001114:	20000a60 	.word	0x20000a60
 8001118:	200009d8 	.word	0x200009d8
 800111c:	20000210 	.word	0x20000210

08001120 <vApplicationIdleHook>:

/*********************************************Application_Hook*************************************************************/
void vApplicationIdleHook(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	/*The processor will go to sleep in the IDLE Task*/
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001124:	2101      	movs	r1, #1
 8001126:	2000      	movs	r0, #0
 8001128:	f004 fbd4 	bl	80058d4 <HAL_PWR_EnterSLEEPMode>

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <CallBack_TimerLCDBuzzer>:

/*********************************************SW_Timers_CallBacks*********************************************************/
void CallBack_TimerLCDBuzzer(TimerHandle_t xTimer)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	/*When the LCDBuzzer task starts the timer it should turn off the buzzer and clear the LCD*/

	/*Stopping the buzzer*/
	Buzzer_voidStop();
 8001138:	f7ff ffa4 	bl	8001084 <Buzzer_voidStop>

	/*Clearing the LCD*/
	LCD_voidClearDisplay();
 800113c:	f000 fc64 	bl	8001a08 <LCD_voidClearDisplay>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <Car_Move_Forward_High_Speed>:

void Motor4_Rotate_CW(void);
void Motor4_Rotate_CCW(void);


void Car_Move_Forward_High_Speed(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 800114c:	f000 f928 	bl	80013a0 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <Car_Move_Forward_High_Speed+0x54>)
 8001152:	2263      	movs	r2, #99	; 0x63
 8001154:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <Car_Move_Forward_High_Speed+0x54>)
 8001158:	2263      	movs	r2, #99	; 0x63
 800115a:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <Car_Move_Forward_High_Speed+0x54>)
 800115e:	2263      	movs	r2, #99	; 0x63
 8001160:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <Car_Move_Forward_High_Speed+0x54>)
 8001164:	2263      	movs	r2, #99	; 0x63
 8001166:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001168:	2100      	movs	r1, #0
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <Car_Move_Forward_High_Speed+0x58>)
 800116c:	f005 fac0 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001170:	2104      	movs	r1, #4
 8001172:	480b      	ldr	r0, [pc, #44]	; (80011a0 <Car_Move_Forward_High_Speed+0x58>)
 8001174:	f005 fabc 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001178:	2108      	movs	r1, #8
 800117a:	4809      	ldr	r0, [pc, #36]	; (80011a0 <Car_Move_Forward_High_Speed+0x58>)
 800117c:	f005 fab8 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001180:	210c      	movs	r1, #12
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <Car_Move_Forward_High_Speed+0x58>)
 8001184:	f005 fab4 	bl	80066f0 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at the same direction*/
	Motor1_Rotate_CW();
 8001188:	f000 f93e 	bl	8001408 <Motor1_Rotate_CW>
	Motor2_Rotate_CW();
 800118c:	f000 f960 	bl	8001450 <Motor2_Rotate_CW>
	Motor3_Rotate_CW();
 8001190:	f000 f97e 	bl	8001490 <Motor3_Rotate_CW>
	Motor4_Rotate_CW();
 8001194:	f000 f9a0 	bl	80014d8 <Motor4_Rotate_CW>
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40000400 	.word	0x40000400
 80011a0:	20000878 	.word	0x20000878

080011a4 <Car_Move_Backward>:
	Motor2_Rotate_CW();
	Motor3_Rotate_CW();
	Motor4_Rotate_CW();
}
void Car_Move_Backward(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 80011a8:	f000 f8fa 	bl	80013a0 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <Car_Move_Backward+0x54>)
 80011ae:	2263      	movs	r2, #99	; 0x63
 80011b0:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <Car_Move_Backward+0x54>)
 80011b4:	2263      	movs	r2, #99	; 0x63
 80011b6:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <Car_Move_Backward+0x54>)
 80011ba:	2263      	movs	r2, #99	; 0x63
 80011bc:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <Car_Move_Backward+0x54>)
 80011c0:	2263      	movs	r2, #99	; 0x63
 80011c2:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 80011c4:	2100      	movs	r1, #0
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <Car_Move_Backward+0x58>)
 80011c8:	f005 fa92 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 80011cc:	2104      	movs	r1, #4
 80011ce:	480b      	ldr	r0, [pc, #44]	; (80011fc <Car_Move_Backward+0x58>)
 80011d0:	f005 fa8e 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 80011d4:	2108      	movs	r1, #8
 80011d6:	4809      	ldr	r0, [pc, #36]	; (80011fc <Car_Move_Backward+0x58>)
 80011d8:	f005 fa8a 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 80011dc:	210c      	movs	r1, #12
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <Car_Move_Backward+0x58>)
 80011e0:	f005 fa86 	bl	80066f0 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at the same  direction*/
	Motor1_Rotate_CCW();
 80011e4:	f000 f922 	bl	800142c <Motor1_Rotate_CCW>
	Motor2_Rotate_CCW();
 80011e8:	f000 f942 	bl	8001470 <Motor2_Rotate_CCW>
	Motor3_Rotate_CCW();
 80011ec:	f000 f962 	bl	80014b4 <Motor3_Rotate_CCW>
	Motor4_Rotate_CCW();
 80011f0:	f000 f984 	bl	80014fc <Motor4_Rotate_CCW>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40000400 	.word	0x40000400
 80011fc:	20000878 	.word	0x20000878

08001200 <Car_Rotate_Right>:

void Car_Rotate_Right(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 8001204:	f000 f8cc 	bl	80013a0 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <Car_Rotate_Right+0x54>)
 800120a:	2263      	movs	r2, #99	; 0x63
 800120c:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <Car_Rotate_Right+0x54>)
 8001210:	2263      	movs	r2, #99	; 0x63
 8001212:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <Car_Rotate_Right+0x54>)
 8001216:	2263      	movs	r2, #99	; 0x63
 8001218:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <Car_Rotate_Right+0x54>)
 800121c:	2263      	movs	r2, #99	; 0x63
 800121e:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001220:	2100      	movs	r1, #0
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <Car_Rotate_Right+0x58>)
 8001224:	f005 fa64 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001228:	2104      	movs	r1, #4
 800122a:	480b      	ldr	r0, [pc, #44]	; (8001258 <Car_Rotate_Right+0x58>)
 800122c:	f005 fa60 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001230:	2108      	movs	r1, #8
 8001232:	4809      	ldr	r0, [pc, #36]	; (8001258 <Car_Rotate_Right+0x58>)
 8001234:	f005 fa5c 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001238:	210c      	movs	r1, #12
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <Car_Rotate_Right+0x58>)
 800123c:	f005 fa58 	bl	80066f0 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at opposite direction*/
	Motor1_Rotate_CW();
 8001240:	f000 f8e2 	bl	8001408 <Motor1_Rotate_CW>
	Motor2_Rotate_CCW();
 8001244:	f000 f914 	bl	8001470 <Motor2_Rotate_CCW>
	Motor3_Rotate_CW();
 8001248:	f000 f922 	bl	8001490 <Motor3_Rotate_CW>
	Motor4_Rotate_CCW();
 800124c:	f000 f956 	bl	80014fc <Motor4_Rotate_CCW>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40000400 	.word	0x40000400
 8001258:	20000878 	.word	0x20000878

0800125c <Car_Rotate_Left>:
void Car_Rotate_Left(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 8001260:	f000 f89e 	bl	80013a0 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=LOW_SPEED;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <Car_Rotate_Left+0x54>)
 8001266:	2246      	movs	r2, #70	; 0x46
 8001268:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=LOW_SPEED;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <Car_Rotate_Left+0x54>)
 800126c:	2246      	movs	r2, #70	; 0x46
 800126e:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=LOW_SPEED;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <Car_Rotate_Left+0x54>)
 8001272:	2246      	movs	r2, #70	; 0x46
 8001274:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=LOW_SPEED;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <Car_Rotate_Left+0x54>)
 8001278:	2246      	movs	r2, #70	; 0x46
 800127a:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 800127c:	2100      	movs	r1, #0
 800127e:	480d      	ldr	r0, [pc, #52]	; (80012b4 <Car_Rotate_Left+0x58>)
 8001280:	f005 fa36 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001284:	2104      	movs	r1, #4
 8001286:	480b      	ldr	r0, [pc, #44]	; (80012b4 <Car_Rotate_Left+0x58>)
 8001288:	f005 fa32 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 800128c:	2108      	movs	r1, #8
 800128e:	4809      	ldr	r0, [pc, #36]	; (80012b4 <Car_Rotate_Left+0x58>)
 8001290:	f005 fa2e 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001294:	210c      	movs	r1, #12
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <Car_Rotate_Left+0x58>)
 8001298:	f005 fa2a 	bl	80066f0 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at opposite direction*/
	Motor1_Rotate_CCW();
 800129c:	f000 f8c6 	bl	800142c <Motor1_Rotate_CCW>
	Motor2_Rotate_CW();
 80012a0:	f000 f8d6 	bl	8001450 <Motor2_Rotate_CW>
	Motor3_Rotate_CCW();
 80012a4:	f000 f906 	bl	80014b4 <Motor3_Rotate_CCW>
	Motor4_Rotate_CW();
 80012a8:	f000 f916 	bl	80014d8 <Motor4_Rotate_CW>

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40000400 	.word	0x40000400
 80012b4:	20000878 	.word	0x20000878

080012b8 <Car_Rotate_RightForward>:
void Car_Rotate_RightForward(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	/*First Disabling the Four motors*/
	Motors_Disabling();
 80012bc:	f000 f870 	bl	80013a0 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Right motors rotate high speed and the Left with low speed*/
	/*Assigning the duty cycle*/

	PWM_Motor_1=LOW_SPEED;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <Car_Rotate_RightForward+0x54>)
 80012c2:	2246      	movs	r2, #70	; 0x46
 80012c4:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <Car_Rotate_RightForward+0x54>)
 80012c8:	2263      	movs	r2, #99	; 0x63
 80012ca:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=LOW_SPEED;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <Car_Rotate_RightForward+0x54>)
 80012ce:	2246      	movs	r2, #70	; 0x46
 80012d0:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <Car_Rotate_RightForward+0x54>)
 80012d4:	2263      	movs	r2, #99	; 0x63
 80012d6:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/

	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 80012d8:	2100      	movs	r1, #0
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <Car_Rotate_RightForward+0x58>)
 80012dc:	f005 fa08 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 80012e0:	2104      	movs	r1, #4
 80012e2:	480b      	ldr	r0, [pc, #44]	; (8001310 <Car_Rotate_RightForward+0x58>)
 80012e4:	f005 fa04 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 80012e8:	2108      	movs	r1, #8
 80012ea:	4809      	ldr	r0, [pc, #36]	; (8001310 <Car_Rotate_RightForward+0x58>)
 80012ec:	f005 fa00 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 80012f0:	210c      	movs	r1, #12
 80012f2:	4807      	ldr	r0, [pc, #28]	; (8001310 <Car_Rotate_RightForward+0x58>)
 80012f4:	f005 f9fc 	bl	80066f0 <HAL_TIM_PWM_Start>

	/*Making  motors rotate at opposite direction*/
		Motor1_Rotate_CW();
 80012f8:	f000 f886 	bl	8001408 <Motor1_Rotate_CW>
		Motor2_Rotate_CW();
 80012fc:	f000 f8a8 	bl	8001450 <Motor2_Rotate_CW>
		Motor3_Rotate_CW();
 8001300:	f000 f8c6 	bl	8001490 <Motor3_Rotate_CW>
		Motor4_Rotate_CW();
 8001304:	f000 f8e8 	bl	80014d8 <Motor4_Rotate_CW>



}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40000400 	.word	0x40000400
 8001310:	20000878 	.word	0x20000878

08001314 <Car_Rotate_LeftForward>:
void Car_Rotate_LeftForward(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

	/*First Disabling the Four motors*/
	Motors_Disabling();
 8001318:	f000 f842 	bl	80013a0 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Right motors rotate high speed and the Left with low speed*/
	/*Assigning the duty cycle*/

	PWM_Motor_1=HIGH_SPEED;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <Car_Rotate_LeftForward+0x54>)
 800131e:	2263      	movs	r2, #99	; 0x63
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=LOW_SPEED;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <Car_Rotate_LeftForward+0x54>)
 8001324:	2246      	movs	r2, #70	; 0x46
 8001326:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <Car_Rotate_LeftForward+0x54>)
 800132a:	2263      	movs	r2, #99	; 0x63
 800132c:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=LOW_SPEED;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <Car_Rotate_LeftForward+0x54>)
 8001330:	2246      	movs	r2, #70	; 0x46
 8001332:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/

	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001334:	2100      	movs	r1, #0
 8001336:	480d      	ldr	r0, [pc, #52]	; (800136c <Car_Rotate_LeftForward+0x58>)
 8001338:	f005 f9da 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 800133c:	2104      	movs	r1, #4
 800133e:	480b      	ldr	r0, [pc, #44]	; (800136c <Car_Rotate_LeftForward+0x58>)
 8001340:	f005 f9d6 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001344:	2108      	movs	r1, #8
 8001346:	4809      	ldr	r0, [pc, #36]	; (800136c <Car_Rotate_LeftForward+0x58>)
 8001348:	f005 f9d2 	bl	80066f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 800134c:	210c      	movs	r1, #12
 800134e:	4807      	ldr	r0, [pc, #28]	; (800136c <Car_Rotate_LeftForward+0x58>)
 8001350:	f005 f9ce 	bl	80066f0 <HAL_TIM_PWM_Start>

	/*Making  motors rotate at opposite direction*/
		Motor1_Rotate_CW();
 8001354:	f000 f858 	bl	8001408 <Motor1_Rotate_CW>
		Motor2_Rotate_CW();
 8001358:	f000 f87a 	bl	8001450 <Motor2_Rotate_CW>
		Motor3_Rotate_CW();
 800135c:	f000 f898 	bl	8001490 <Motor3_Rotate_CW>
		Motor4_Rotate_CW();
 8001360:	f000 f8ba 	bl	80014d8 <Motor4_Rotate_CW>




}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40000400 	.word	0x40000400
 800136c:	20000878 	.word	0x20000878

08001370 <Car_Stop>:
void Car_Stop(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
    /*Stopping the PWM generation on both motors*/
	HAL_TIM_PWM_Stop(Motor1_Timer, Motor1_Channel);
 8001374:	2100      	movs	r1, #0
 8001376:	4809      	ldr	r0, [pc, #36]	; (800139c <Car_Stop+0x2c>)
 8001378:	f005 fa82 	bl	8006880 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor2_Timer, Motor2_Channel);
 800137c:	2104      	movs	r1, #4
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <Car_Stop+0x2c>)
 8001380:	f005 fa7e 	bl	8006880 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor3_Timer, Motor3_Channel);
 8001384:	2108      	movs	r1, #8
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <Car_Stop+0x2c>)
 8001388:	f005 fa7a 	bl	8006880 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor4_Timer, Motor4_Channel);
 800138c:	210c      	movs	r1, #12
 800138e:	4803      	ldr	r0, [pc, #12]	; (800139c <Car_Stop+0x2c>)
 8001390:	f005 fa76 	bl	8006880 <HAL_TIM_PWM_Stop>
	/*Disabling both motors*/
	Motors_Disabling();
 8001394:	f000 f804 	bl	80013a0 <Motors_Disabling>

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000878 	.word	0x20000878

080013a0 <Motors_Disabling>:
static void Motors_Disabling(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port, IN1, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013aa:	4815      	ldr	r0, [pc, #84]	; (8001400 <Motors_Disabling+0x60>)
 80013ac:	f003 f938 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port, IN2, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b6:	4812      	ldr	r0, [pc, #72]	; (8001400 <Motors_Disabling+0x60>)
 80013b8:	f003 f932 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port, IN3, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	2104      	movs	r1, #4
 80013c0:	480f      	ldr	r0, [pc, #60]	; (8001400 <Motors_Disabling+0x60>)
 80013c2:	f003 f92d 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port, IN4, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2108      	movs	r1, #8
 80013ca:	480d      	ldr	r0, [pc, #52]	; (8001400 <Motors_Disabling+0x60>)
 80013cc:	f003 f928 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port, IN5, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d6:	480a      	ldr	r0, [pc, #40]	; (8001400 <Motors_Disabling+0x60>)
 80013d8:	f003 f922 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port, IN6, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2110      	movs	r1, #16
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <Motors_Disabling+0x60>)
 80013e2:	f003 f91d 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port, IN7, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2120      	movs	r1, #32
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <Motors_Disabling+0x64>)
 80013ec:	f003 f918 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port, IN8, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f6:	4803      	ldr	r0, [pc, #12]	; (8001404 <Motors_Disabling+0x64>)
 80013f8:	f003 f912 	bl	8004620 <HAL_GPIO_WritePin>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40020800 	.word	0x40020800
 8001404:	40020400 	.word	0x40020400

08001408 <Motor1_Rotate_CW>:
 void Motor1_Rotate_CW(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor1_Port,IN1, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <Motor1_Rotate_CW+0x20>)
 8001414:	f003 f904 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port,IN2, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800141e:	4802      	ldr	r0, [pc, #8]	; (8001428 <Motor1_Rotate_CW+0x20>)
 8001420:	f003 f8fe 	bl	8004620 <HAL_GPIO_WritePin>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40020800 	.word	0x40020800

0800142c <Motor1_Rotate_CCW>:
 void Motor1_Rotate_CCW(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port,IN1, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <Motor1_Rotate_CCW+0x20>)
 8001438:	f003 f8f2 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port,IN2, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001442:	4802      	ldr	r0, [pc, #8]	; (800144c <Motor1_Rotate_CCW+0x20>)
 8001444:	f003 f8ec 	bl	8004620 <HAL_GPIO_WritePin>
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40020800 	.word	0x40020800

08001450 <Motor2_Rotate_CW>:
void Motor2_Rotate_CW(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor2_Port,IN3, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	2104      	movs	r1, #4
 8001458:	4804      	ldr	r0, [pc, #16]	; (800146c <Motor2_Rotate_CW+0x1c>)
 800145a:	f003 f8e1 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port,IN4, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2108      	movs	r1, #8
 8001462:	4802      	ldr	r0, [pc, #8]	; (800146c <Motor2_Rotate_CW+0x1c>)
 8001464:	f003 f8dc 	bl	8004620 <HAL_GPIO_WritePin>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40020800 	.word	0x40020800

08001470 <Motor2_Rotate_CCW>:
void Motor2_Rotate_CCW(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor2_Port,IN3, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2104      	movs	r1, #4
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <Motor2_Rotate_CCW+0x1c>)
 800147a:	f003 f8d1 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port,IN4, GPIO_PIN_SET);
 800147e:	2201      	movs	r2, #1
 8001480:	2108      	movs	r1, #8
 8001482:	4802      	ldr	r0, [pc, #8]	; (800148c <Motor2_Rotate_CCW+0x1c>)
 8001484:	f003 f8cc 	bl	8004620 <HAL_GPIO_WritePin>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40020800 	.word	0x40020800

08001490 <Motor3_Rotate_CW>:




 void Motor3_Rotate_CW(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor3_Port,IN5, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <Motor3_Rotate_CW+0x20>)
 800149c:	f003 f8c0 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port,IN6, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2110      	movs	r1, #16
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <Motor3_Rotate_CW+0x20>)
 80014a6:	f003 f8bb 	bl	8004620 <HAL_GPIO_WritePin>
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40020800 	.word	0x40020800

080014b4 <Motor3_Rotate_CCW>:
 void Motor3_Rotate_CCW(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor3_Port,IN5, GPIO_PIN_SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <Motor3_Rotate_CCW+0x20>)
 80014c0:	f003 f8ae 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port,IN6, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2110      	movs	r1, #16
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <Motor3_Rotate_CCW+0x20>)
 80014ca:	f003 f8a9 	bl	8004620 <HAL_GPIO_WritePin>
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40020800 	.word	0x40020800

080014d8 <Motor4_Rotate_CW>:



 void Motor4_Rotate_CW(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor4_Port,IN7, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	2120      	movs	r1, #32
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <Motor4_Rotate_CW+0x20>)
 80014e2:	f003 f89d 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port,IN8, GPIO_PIN_SET);
 80014e6:	2201      	movs	r2, #1
 80014e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <Motor4_Rotate_CW+0x20>)
 80014ee:	f003 f897 	bl	8004620 <HAL_GPIO_WritePin>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40020400 	.word	0x40020400

080014fc <Motor4_Rotate_CCW>:
 void Motor4_Rotate_CCW(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor4_Port,IN7, GPIO_PIN_SET);
 8001500:	2201      	movs	r2, #1
 8001502:	2120      	movs	r1, #32
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <Motor4_Rotate_CCW+0x20>)
 8001506:	f003 f88b 	bl	8004620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port,IN8, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <Motor4_Rotate_CCW+0x20>)
 8001512:	f003 f885 	bl	8004620 <HAL_GPIO_WritePin>
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40020400 	.word	0x40020400

08001520 <GPS_voidInit>:
/*This is the object of our struct*/
GPS_Data_t GPS_Data;

/*Waits till the gps gets right information and its done*/
void GPS_voidInit(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	/*Ringbuffer initialization*/
	Ringbuf_init();
 8001524:	f001 f948 	bl	80027b8 <Ringbuf_init>
	HAL_Delay(500);
 8001528:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800152c:	f002 fd4c 	bl	8003fc8 <HAL_Delay>

	/*LCD initializing*/
	LCD_voidInit();
 8001530:	f000 f97a 	bl	8001828 <LCD_voidInit>

	/*Writing on LCD that the gps still warming up*/
	LCD_voidSetPositionXY(0,2);
 8001534:	2102      	movs	r1, #2
 8001536:	2000      	movs	r0, #0
 8001538:	f000 fa20 	bl	800197c <LCD_voidSetPositionXY>
	LCD_voidSendString("Waiting for GPS");
 800153c:	481d      	ldr	r0, [pc, #116]	; (80015b4 <GPS_voidInit+0x94>)
 800153e:	f000 fa01 	bl	8001944 <LCD_voidSendString>

	/*waiting till the GGA data is valid*/
	while(flagGGA!=Valid_Data)
 8001542:	e017      	b.n	8001574 <GPS_voidInit+0x54>
	{
		if (Wait_for("GGA") == 1)
 8001544:	481c      	ldr	r0, [pc, #112]	; (80015b8 <GPS_voidInit+0x98>)
 8001546:	f001 fa67 	bl	8002a18 <Wait_for>
 800154a:	4603      	mov	r3, r0
 800154c:	2b01      	cmp	r3, #1
 800154e:	d111      	bne.n	8001574 <GPS_voidInit+0x54>
		{
			Copy_upto("*", GGA);
 8001550:	491a      	ldr	r1, [pc, #104]	; (80015bc <GPS_voidInit+0x9c>)
 8001552:	481b      	ldr	r0, [pc, #108]	; (80015c0 <GPS_voidInit+0xa0>)
 8001554:	f001 f9e0 	bl	8002918 <Copy_upto>
			if (decodeGGA(GGA, &GPS_NMEA_DATA.ggastruct) == 0) flagGGA = Valid_Data;  // 2 indicates the data is valid
 8001558:	491a      	ldr	r1, [pc, #104]	; (80015c4 <GPS_voidInit+0xa4>)
 800155a:	4818      	ldr	r0, [pc, #96]	; (80015bc <GPS_voidInit+0x9c>)
 800155c:	f000 fc48 	bl	8001df0 <decodeGGA>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d103      	bne.n	800156e <GPS_voidInit+0x4e>
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <GPS_voidInit+0xa8>)
 8001568:	2202      	movs	r2, #2
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e002      	b.n	8001574 <GPS_voidInit+0x54>
			else flagGGA = unValid_Data;  // 1 indicates the data is invalid
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <GPS_voidInit+0xa8>)
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]
	while(flagGGA!=Valid_Data)
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <GPS_voidInit+0xa8>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d1e3      	bne.n	8001544 <GPS_voidInit+0x24>
		}
	}

	/*Clearing the LCD and telling the user to start the project */
	LCD_voidClearDisplay();
 800157c:	f000 fa44 	bl	8001a08 <LCD_voidClearDisplay>
	LCD_voidSetPositionXY(0,4);
 8001580:	2104      	movs	r1, #4
 8001582:	2000      	movs	r0, #0
 8001584:	f000 f9fa 	bl	800197c <LCD_voidSetPositionXY>
	LCD_voidSendString("GPS is done");
 8001588:	4810      	ldr	r0, [pc, #64]	; (80015cc <GPS_voidInit+0xac>)
 800158a:	f000 f9db 	bl	8001944 <LCD_voidSendString>
	LCD_voidSetPositionXY(1,4);
 800158e:	2104      	movs	r1, #4
 8001590:	2001      	movs	r0, #1
 8001592:	f000 f9f3 	bl	800197c <LCD_voidSetPositionXY>
	LCD_voidSendString("good 2 go");
 8001596:	480e      	ldr	r0, [pc, #56]	; (80015d0 <GPS_voidInit+0xb0>)
 8001598:	f000 f9d4 	bl	8001944 <LCD_voidSendString>

	/*Clearing the flag*/
	flagGGA=0;
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <GPS_voidInit+0xa8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 80015a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a6:	f002 fd0f 	bl	8003fc8 <HAL_Delay>

	/*Clearing the LCD*/
	LCD_voidClearDisplay();
 80015aa:	f000 fa2d 	bl	8001a08 <LCD_voidClearDisplay>

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	080103b8 	.word	0x080103b8
 80015b8:	080103c8 	.word	0x080103c8
 80015bc:	20000228 	.word	0x20000228
 80015c0:	080103cc 	.word	0x080103cc
 80015c4:	20000290 	.word	0x20000290
 80015c8:	200002f0 	.word	0x200002f0
 80015cc:	080103d0 	.word	0x080103d0
 80015d0:	080103dc 	.word	0x080103dc

080015d4 <GPS_uint8DecodeGGAData>:
/*Decode the message and puts the important information in the global variables
 * like: longitude, latitude, North/south , East/west*/

/*Returns 1 in success and 2 if the decoding process failed*/
uint8_t GPS_uint8DecodeGGAData()
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	uint8_t Local_uint8ErrorCode=0;
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]

	if (Wait_for("GGA") == 1)
 80015de:	4825      	ldr	r0, [pc, #148]	; (8001674 <GPS_uint8DecodeGGAData+0xa0>)
 80015e0:	f001 fa1a 	bl	8002a18 <Wait_for>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d111      	bne.n	800160e <GPS_uint8DecodeGGAData+0x3a>
	{
		Copy_upto("*", GGA);
 80015ea:	4923      	ldr	r1, [pc, #140]	; (8001678 <GPS_uint8DecodeGGAData+0xa4>)
 80015ec:	4823      	ldr	r0, [pc, #140]	; (800167c <GPS_uint8DecodeGGAData+0xa8>)
 80015ee:	f001 f993 	bl	8002918 <Copy_upto>
		if (decodeGGA(GGA, &GPS_NMEA_DATA.ggastruct) == 0) flagGGA = Valid_Data;  // 2 indicates the data is valid
 80015f2:	4923      	ldr	r1, [pc, #140]	; (8001680 <GPS_uint8DecodeGGAData+0xac>)
 80015f4:	4820      	ldr	r0, [pc, #128]	; (8001678 <GPS_uint8DecodeGGAData+0xa4>)
 80015f6:	f000 fbfb 	bl	8001df0 <decodeGGA>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d103      	bne.n	8001608 <GPS_uint8DecodeGGAData+0x34>
 8001600:	4b20      	ldr	r3, [pc, #128]	; (8001684 <GPS_uint8DecodeGGAData+0xb0>)
 8001602:	2202      	movs	r2, #2
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	e002      	b.n	800160e <GPS_uint8DecodeGGAData+0x3a>
		else flagGGA = unValid_Data;  // 1 indicates the data is invalid
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <GPS_uint8DecodeGGAData+0xb0>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
	}

	if(flagGGA==Valid_Data)
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <GPS_uint8DecodeGGAData+0xb0>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d11e      	bne.n	8001654 <GPS_uint8DecodeGGAData+0x80>
	{
		Local_uint8ErrorCode=Decode_Success;
 8001616:	2301      	movs	r3, #1
 8001618:	71fb      	strb	r3, [r7, #7]
		GPS_Data.Latitude  = GPS_NMEA_DATA.ggastruct.lcation.latitude;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <GPS_uint8DecodeGGAData+0xac>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fb50 	bl	8000cc8 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <GPS_uint8DecodeGGAData+0xb4>)
 800162c:	6013      	str	r3, [r2, #0]
		GPS_Data.Longitude = GPS_NMEA_DATA.ggastruct.lcation.longitude;
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <GPS_uint8DecodeGGAData+0xac>)
 8001630:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	f7ff fb46 	bl	8000cc8 <__aeabi_d2f>
 800163c:	4603      	mov	r3, r0
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <GPS_uint8DecodeGGAData+0xb4>)
 8001640:	6053      	str	r3, [r2, #4]

		GPS_Data.East_West = GPS_NMEA_DATA.ggastruct.lcation.EW;
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <GPS_uint8DecodeGGAData+0xac>)
 8001644:	7e1a      	ldrb	r2, [r3, #24]
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <GPS_uint8DecodeGGAData+0xb4>)
 8001648:	721a      	strb	r2, [r3, #8]
		GPS_Data.North_South = GPS_NMEA_DATA.ggastruct.lcation.NS;
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <GPS_uint8DecodeGGAData+0xac>)
 800164c:	7a1a      	ldrb	r2, [r3, #8]
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <GPS_uint8DecodeGGAData+0xb4>)
 8001650:	725a      	strb	r2, [r3, #9]
 8001652:	e00a      	b.n	800166a <GPS_uint8DecodeGGAData+0x96>
	}
	else
	{
		Local_uint8ErrorCode=Decode_Failed;
 8001654:	2302      	movs	r3, #2
 8001656:	71fb      	strb	r3, [r7, #7]
		/*When the decoding is unsuccessful, you shouldnot print on the LCD,
		 * you will know when the flag is = 2*/
		LCD_voidClearDisplay();
 8001658:	f000 f9d6 	bl	8001a08 <LCD_voidClearDisplay>
		LCD_voidSetPositionXY(2,2);
 800165c:	2102      	movs	r1, #2
 800165e:	2002      	movs	r0, #2
 8001660:	f000 f98c 	bl	800197c <LCD_voidSetPositionXY>
		LCD_voidSendString("GPS decode fail");
 8001664:	4809      	ldr	r0, [pc, #36]	; (800168c <GPS_uint8DecodeGGAData+0xb8>)
 8001666:	f000 f96d 	bl	8001944 <LCD_voidSendString>
	}


	return Local_uint8ErrorCode;
 800166a:	79fb      	ldrb	r3, [r7, #7]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	080103c8 	.word	0x080103c8
 8001678:	20000228 	.word	0x20000228
 800167c:	080103cc 	.word	0x080103cc
 8001680:	20000290 	.word	0x20000290
 8001684:	200002f0 	.word	0x200002f0
 8001688:	200002f4 	.word	0x200002f4
 800168c:	080103e8 	.word	0x080103e8

08001690 <LCD_AvoidHardBraking>:

}


void LCD_AvoidHardBraking(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	/*Printing the warning sign*/
	LCD_Print_WarningSign();
 8001694:	f000 f814 	bl	80016c0 <LCD_Print_WarningSign>

	/*Printing the warning message to the driver*/
	LCD_voidSetPositionXY(1,0);
 8001698:	2100      	movs	r1, #0
 800169a:	2001      	movs	r0, #1
 800169c:	f000 f96e 	bl	800197c <LCD_voidSetPositionXY>
	LCD_voidSendString("Hit Brakes");
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <LCD_AvoidHardBraking+0x28>)
 80016a2:	f000 f94f 	bl	8001944 <LCD_voidSendString>

	LCD_voidSetPositionXY(2,3);
 80016a6:	2103      	movs	r1, #3
 80016a8:	2002      	movs	r0, #2
 80016aa:	f000 f967 	bl	800197c <LCD_voidSetPositionXY>
	LCD_voidSendString("ASAP!!!");
 80016ae:	4803      	ldr	r0, [pc, #12]	; (80016bc <LCD_AvoidHardBraking+0x2c>)
 80016b0:	f000 f948 	bl	8001944 <LCD_voidSendString>

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	08010430 	.word	0x08010430
 80016bc:	0801043c 	.word	0x0801043c

080016c0 <LCD_Print_WarningSign>:
	LCD_voidSendString("Slow Down");


}
static void LCD_Print_WarningSign(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b096      	sub	sp, #88	; 0x58
 80016c4:	af00      	add	r7, sp, #0
	/*Saving the elemetents of each block of the LCD in multiple arrays to be sent to the special charachter function*/

	uint8_t LCD_R1_C16_Array[8] =
 80016c6:	4a4e      	ldr	r2, [pc, #312]	; (8001800 <LCD_Print_WarningSign+0x140>)
 80016c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016d0:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00001110,
			0b00001110,
			0b00001110
	};
	uint8_t LCD_R1_C15_Array[8] =
 80016d4:	4a4b      	ldr	r2, [pc, #300]	; (8001804 <LCD_Print_WarningSign+0x144>)
 80016d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016de:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00010000,
			0b00000000
	};

	uint8_t LCD_R1_C14_Array[8] =
 80016e2:	4a49      	ldr	r2, [pc, #292]	; (8001808 <LCD_Print_WarningSign+0x148>)
 80016e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ec:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00000001
	};
	uint8_t LCD_R1_C18_Array[8] =
 80016f0:	4a46      	ldr	r2, [pc, #280]	; (800180c <LCD_Print_WarningSign+0x14c>)
 80016f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016fa:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00010000
	};
	uint8_t LCD_R2_C14_Array[8] =
 80016fe:	4a44      	ldr	r2, [pc, #272]	; (8001810 <LCD_Print_WarningSign+0x150>)
 8001700:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001704:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001708:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	uint8_t LCD_R2_C18_Array[8] =
 800170c:	4a41      	ldr	r2, [pc, #260]	; (8001814 <LCD_Print_WarningSign+0x154>)
 800170e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001716:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C13_Array[8] =
 800171a:	4a3f      	ldr	r2, [pc, #252]	; (8001818 <LCD_Print_WarningSign+0x158>)
 800171c:	f107 0320 	add.w	r3, r7, #32
 8001720:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001724:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000010,
			0b00000100,
			0b00001000,
			0b00011111
	};
	uint8_t LCD_R2_C19_Array[8] =
 8001728:	4a3c      	ldr	r2, [pc, #240]	; (800181c <LCD_Print_WarningSign+0x15c>)
 800172a:	f107 0318 	add.w	r3, r7, #24
 800172e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001732:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00000100,
			0b00000010,
			0b00011111
	};
	uint8_t LCD_R2_C15_Array[8] =
 8001736:	4a3a      	ldr	r2, [pc, #232]	; (8001820 <LCD_Print_WarningSign+0x160>)
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001740:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C17_Array[8] =
 8001744:	4a36      	ldr	r2, [pc, #216]	; (8001820 <LCD_Print_WarningSign+0x160>)
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800174e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C16_Array[8] =
 8001752:	4a34      	ldr	r2, [pc, #208]	; (8001824 <LCD_Print_WarningSign+0x164>)
 8001754:	463b      	mov	r3, r7
 8001756:	e892 0003 	ldmia.w	r2, {r0, r1}
 800175a:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	LCD_voidDrawSpecialCharachter(&LCD_R1_C14_Array, 0, 1, 14);
 800175e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001762:	230e      	movs	r3, #14
 8001764:	2201      	movs	r2, #1
 8001766:	2100      	movs	r1, #0
 8001768:	f000 f955 	bl	8001a16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C15_Array, 0, 1, 15);
 800176c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001770:	230f      	movs	r3, #15
 8001772:	2201      	movs	r2, #1
 8001774:	2100      	movs	r1, #0
 8001776:	f000 f94e 	bl	8001a16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C16_Array, 0, 1, 16);
 800177a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800177e:	2310      	movs	r3, #16
 8001780:	2201      	movs	r2, #1
 8001782:	2100      	movs	r1, #0
 8001784:	f000 f947 	bl	8001a16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C18_Array, 0, 1, 18);
 8001788:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800178c:	2312      	movs	r3, #18
 800178e:	2201      	movs	r2, #1
 8001790:	2100      	movs	r1, #0
 8001792:	f000 f940 	bl	8001a16 <LCD_voidDrawSpecialCharachter>

	LCD_voidDrawSpecialCharachter(&LCD_R2_C13_Array, 0, 2, 13);
 8001796:	f107 0020 	add.w	r0, r7, #32
 800179a:	230d      	movs	r3, #13
 800179c:	2202      	movs	r2, #2
 800179e:	2100      	movs	r1, #0
 80017a0:	f000 f939 	bl	8001a16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C14_Array, 0, 2, 14);
 80017a4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80017a8:	230e      	movs	r3, #14
 80017aa:	2202      	movs	r2, #2
 80017ac:	2100      	movs	r1, #0
 80017ae:	f000 f932 	bl	8001a16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C15_Array, 0, 2, 15);
 80017b2:	f107 0010 	add.w	r0, r7, #16
 80017b6:	230f      	movs	r3, #15
 80017b8:	2202      	movs	r2, #2
 80017ba:	2100      	movs	r1, #0
 80017bc:	f000 f92b 	bl	8001a16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C16_Array, 0, 2, 16);
 80017c0:	4638      	mov	r0, r7
 80017c2:	2310      	movs	r3, #16
 80017c4:	2202      	movs	r2, #2
 80017c6:	2100      	movs	r1, #0
 80017c8:	f000 f925 	bl	8001a16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C17_Array, 0, 2, 17);
 80017cc:	f107 0008 	add.w	r0, r7, #8
 80017d0:	2311      	movs	r3, #17
 80017d2:	2202      	movs	r2, #2
 80017d4:	2100      	movs	r1, #0
 80017d6:	f000 f91e 	bl	8001a16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C18_Array, 0, 2, 18);
 80017da:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80017de:	2312      	movs	r3, #18
 80017e0:	2202      	movs	r2, #2
 80017e2:	2100      	movs	r1, #0
 80017e4:	f000 f917 	bl	8001a16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C19_Array, 0, 2, 19);
 80017e8:	f107 0018 	add.w	r0, r7, #24
 80017ec:	2313      	movs	r3, #19
 80017ee:	2202      	movs	r2, #2
 80017f0:	2100      	movs	r1, #0
 80017f2:	f000 f910 	bl	8001a16 <LCD_voidDrawSpecialCharachter>



}
 80017f6:	bf00      	nop
 80017f8:	3758      	adds	r7, #88	; 0x58
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	08010464 	.word	0x08010464
 8001804:	0801046c 	.word	0x0801046c
 8001808:	08010474 	.word	0x08010474
 800180c:	0801047c 	.word	0x0801047c
 8001810:	08010484 	.word	0x08010484
 8001814:	0801048c 	.word	0x0801048c
 8001818:	08010494 	.word	0x08010494
 800181c:	0801049c 	.word	0x0801049c
 8001820:	080104a4 	.word	0x080104a4
 8001824:	080104ac 	.word	0x080104ac

08001828 <LCD_voidInit>:
#define LCD_SLAVE_ADDRESS 0b01001110

extern I2C_HandleTypeDef hi2c1;

void LCD_voidInit(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	/*Setting 4 bits interface(Twice as the datasheet specefies)*/
	LCD_voidSendCommand(0b00110011);
 800182c:	2033      	movs	r0, #51	; 0x33
 800182e:	f000 f829 	bl	8001884 <LCD_voidSendCommand>
	LCD_voidSendCommand(0b00110010);
 8001832:	2032      	movs	r0, #50	; 0x32
 8001834:	f000 f826 	bl	8001884 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001838:	2032      	movs	r0, #50	; 0x32
 800183a:	f002 fbc5 	bl	8003fc8 <HAL_Delay>
	/*Setting the LCD Function*/
	LCD_voidSendCommand(0b00101000);
 800183e:	2028      	movs	r0, #40	; 0x28
 8001840:	f000 f820 	bl	8001884 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001844:	2032      	movs	r0, #50	; 0x32
 8001846:	f002 fbbf 	bl	8003fc8 <HAL_Delay>
	/*Clearing the display*/
	LCD_voidSendCommand(0b00000001);
 800184a:	2001      	movs	r0, #1
 800184c:	f000 f81a 	bl	8001884 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001850:	2032      	movs	r0, #50	; 0x32
 8001852:	f002 fbb9 	bl	8003fc8 <HAL_Delay>
	/*Set the entry mode*/
	LCD_voidSendCommand(0b00000110);
 8001856:	2006      	movs	r0, #6
 8001858:	f000 f814 	bl	8001884 <LCD_voidSendCommand>
	HAL_Delay(50);
 800185c:	2032      	movs	r0, #50	; 0x32
 800185e:	f002 fbb3 	bl	8003fc8 <HAL_Delay>
	/*Set the display to on*/
	LCD_voidSendCommand(0b00001100);
 8001862:	200c      	movs	r0, #12
 8001864:	f000 f80e 	bl	8001884 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001868:	2032      	movs	r0, #50	; 0x32
 800186a:	f002 fbad 	bl	8003fc8 <HAL_Delay>
	/*Set the cursor to home */
	LCD_voidSendCommand(0b00000010);
 800186e:	2002      	movs	r0, #2
 8001870:	f000 f808 	bl	8001884 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001874:	2032      	movs	r0, #50	; 0x32
 8001876:	f002 fba7 	bl	8003fc8 <HAL_Delay>
	/*and the Data address to 0*/
	LCD_voidSendCommand(0b10000000);
 800187a:	2080      	movs	r0, #128	; 0x80
 800187c:	f000 f802 	bl	8001884 <LCD_voidSendCommand>

}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8_t Copy_uint8Command)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af02      	add	r7, sp, #8
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
 *
 *
 * 0b00000001 --> DataU --> 0b000000000-->0b00000001100
 *
 * */
	Local_uint8Local_uint8DataU=(Copy_uint8Command&0b11110000);
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f023 030f 	bic.w	r3, r3, #15
 8001894:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Command<<4)&0b11110000);
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001100; //EN=1 RS=0
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	f043 030c 	orr.w	r3, r3, #12
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001000; //EN=0 RS=0
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001100; //EN=1 RS=0
 80018b0:	7bbb      	ldrb	r3, [r7, #14]
 80018b2:	f043 030c 	orr.w	r3, r3, #12
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001000; //EN=0 RS=0
 80018ba:	7bbb      	ldrb	r3, [r7, #14]
 80018bc:	f043 0308 	orr.w	r3, r3, #8
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 80018c4:	f107 0208 	add.w	r2, r7, #8
 80018c8:	2364      	movs	r3, #100	; 0x64
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2304      	movs	r3, #4
 80018ce:	214e      	movs	r1, #78	; 0x4e
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <LCD_voidSendCommand+0x5c>)
 80018d2:	f003 f803 	bl	80048dc <HAL_I2C_Master_Transmit>
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000734 	.word	0x20000734

080018e4 <LCD_voidSendCharachter>:

void LCD_voidSendCharachter(uint8_t Copy_uint8Charachter)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_uint8Local_uint8DataU,Local_uint8Local_uint8DataL;
	uint8_t Local_uint8Local_uint8DataT[4];
	Local_uint8Local_uint8DataU=(Copy_uint8Charachter&0b11110000);
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f023 030f 	bic.w	r3, r3, #15
 80018f4:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Charachter<<4)&0b11110000);
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001101; //EN=1 RS=0
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	f043 030d 	orr.w	r3, r3, #13
 8001902:	b2db      	uxtb	r3, r3
 8001904:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001001; //EN=0 RS=0
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	f043 0309 	orr.w	r3, r3, #9
 800190c:	b2db      	uxtb	r3, r3
 800190e:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001101; //EN=1 RS=0
 8001910:	7bbb      	ldrb	r3, [r7, #14]
 8001912:	f043 030d 	orr.w	r3, r3, #13
 8001916:	b2db      	uxtb	r3, r3
 8001918:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001001; //EN=0 RS=0
 800191a:	7bbb      	ldrb	r3, [r7, #14]
 800191c:	f043 0309 	orr.w	r3, r3, #9
 8001920:	b2db      	uxtb	r3, r3
 8001922:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001924:	f107 0208 	add.w	r2, r7, #8
 8001928:	2364      	movs	r3, #100	; 0x64
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2304      	movs	r3, #4
 800192e:	214e      	movs	r1, #78	; 0x4e
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <LCD_voidSendCharachter+0x5c>)
 8001932:	f002 ffd3 	bl	80048dc <HAL_I2C_Master_Transmit>

}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000734 	.word	0x20000734

08001944 <LCD_voidSendString>:

void LCD_voidSendString (uint8_t *Copy_pu8StringOfCharachters)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8Counter=0;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 8001950:	e009      	b.n	8001966 <LCD_voidSendString+0x22>
	{
		LCD_voidSendCharachter(Copy_pu8StringOfCharachters[Local_uint8Counter]);
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ffc2 	bl	80018e4 <LCD_voidSendCharachter>
		Local_uint8Counter++;
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	3301      	adds	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ef      	bne.n	8001952 <LCD_voidSendString+0xe>
	}


}
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <LCD_voidSetPositionXY>:
void LCD_voidSetPositionXY(uint8_t Copy_uint8Row,uint8_t Copy_uint8Column)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	460a      	mov	r2, r1
 8001986:	71fb      	strb	r3, [r7, #7]
 8001988:	4613      	mov	r3, r2
 800198a:	71bb      	strb	r3, [r7, #6]
	//1,add,add,add,add,add,add,add,0,0
	uint8_t Local_uint8PositionAddress = 0b10000000;
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	73fb      	strb	r3, [r7, #15]
	switch(Copy_uint8Row){
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d82d      	bhi.n	80019f2 <LCD_voidSetPositionXY+0x76>
 8001996:	a201      	add	r2, pc, #4	; (adr r2, 800199c <LCD_voidSetPositionXY+0x20>)
 8001998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199c:	080019ad 	.word	0x080019ad
 80019a0:	080019b7 	.word	0x080019b7
 80019a4:	080019cb 	.word	0x080019cb
 80019a8:	080019df 	.word	0x080019df
	case 0:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 0);
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	79bb      	ldrb	r3, [r7, #6]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	73fb      	strb	r3, [r7, #15]
		break;
 80019b4:	e01d      	b.n	80019f2 <LCD_voidSetPositionXY+0x76>
	case 1:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 64);
 80019b6:	79bb      	ldrb	r3, [r7, #6]
 80019b8:	3340      	adds	r3, #64	; 0x40
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	b25a      	sxtb	r2, r3
 80019be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	73fb      	strb	r3, [r7, #15]
		break;
 80019c8:	e013      	b.n	80019f2 <LCD_voidSetPositionXY+0x76>
	case 2:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 20);
 80019ca:	79bb      	ldrb	r3, [r7, #6]
 80019cc:	3314      	adds	r3, #20
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	b25a      	sxtb	r2, r3
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	73fb      	strb	r3, [r7, #15]
		break;
 80019dc:	e009      	b.n	80019f2 <LCD_voidSetPositionXY+0x76>
	case 3:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 84);
 80019de:	79bb      	ldrb	r3, [r7, #6]
 80019e0:	3354      	adds	r3, #84	; 0x54
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	b25a      	sxtb	r2, r3
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b25b      	sxtb	r3, r3
 80019ee:	73fb      	strb	r3, [r7, #15]
		break;
 80019f0:	bf00      	nop
	}
		LCD_voidSendCommand(Local_uint8PositionAddress);
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff45 	bl	8001884 <LCD_voidSendCommand>
		HAL_Delay(1);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f002 fae4 	bl	8003fc8 <HAL_Delay>

}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	/*Clearing the display by command 0b00000001*/
	LCD_voidSendCommand(0b00000001);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f7ff ff39 	bl	8001884 <LCD_voidSendCommand>
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <LCD_voidDrawSpecialCharachter>:
		}
	}
}

void LCD_voidDrawSpecialCharachter(uint8_t*Copy_puint8Pattern,uint8_t Copy_uint8LocationNum,uint8_t Copy_uint8RowNum,uint8_t Copy_uint8ColNum)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	4608      	mov	r0, r1
 8001a20:	4611      	mov	r1, r2
 8001a22:	461a      	mov	r2, r3
 8001a24:	4603      	mov	r3, r0
 8001a26:	70fb      	strb	r3, [r7, #3]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	70bb      	strb	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	707b      	strb	r3, [r7, #1]
	/*Accessing the CGRAM address*/
	uint8_t Local_uint8CGRAMAddress,Local_uint8Counter;
	Local_uint8CGRAMAddress=Copy_uint8LocationNum*8;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	73bb      	strb	r3, [r7, #14]
	/*Accessing CGRAM of lcd by command 0b01xxxxxx*/
	LCD_voidSendCommand(Local_uint8CGRAMAddress+64);
 8001a36:	7bbb      	ldrb	r3, [r7, #14]
 8001a38:	3340      	adds	r3, #64	; 0x40
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff21 	bl	8001884 <LCD_voidSendCommand>
	/*Write the pattern on CGRAM*/
	/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes
	 * in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	e009      	b.n	8001a5c <LCD_voidDrawSpecialCharachter+0x46>
	{
		LCD_voidSendCharachter(Copy_puint8Pattern[Local_uint8Counter]);
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff47 	bl	80018e4 <LCD_voidSendCharachter>
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	2b07      	cmp	r3, #7
 8001a60:	d9f2      	bls.n	8001a48 <LCD_voidDrawSpecialCharachter+0x32>
	}
	/*Keda e7na 7atena al pattern fe location mo3yn fel CGRAM, fa na2esna bas neb3at al pattern lel DDRAM 34an n7oto fel LCD */
	/*kona fo2 3malna command 34an ne access al CGRAM 34an ne access al DDRAM lazem command tany
	 * wel set position feha asln al command dah*/
	LCD_voidSetPositionXY(Copy_uint8RowNum,Copy_uint8ColNum);
 8001a62:	787a      	ldrb	r2, [r7, #1]
 8001a64:	78bb      	ldrb	r3, [r7, #2]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff87 	bl	800197c <LCD_voidSetPositionXY>
	LCD_voidSendCharachter(Copy_uint8LocationNum);
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff37 	bl	80018e4 <LCD_voidSendCharachter>
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <LightSensor_voidInit>:
static void TSL2561_GetChannelsReadings(uint16_t* Copy_uint16Data0Val, uint16_t* Copy_uint16Data1Val);
static void TSL2561_WriteByte(uint8_t Copy_uint8RegisterAddress, uint8_t Copy_uint8RegisterValue);
static void TSL2561_ReadByte(uint8_t Copy_uint8RegisterAddress, uint8_t *Copy_puinit8RecivingVariable);

void LightSensor_voidInit(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0

	/*Powering up the module*/

	/*1-first element is the command -> Address of control register
	 * 2-Second element is the 0b00000011 which power up the module */
	TSL2561_WriteByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_CONTROL),0b00000011);
 8001a82:	2103      	movs	r1, #3
 8001a84:	2080      	movs	r0, #128	; 0x80
 8001a86:	f000 f97d 	bl	8001d84 <TSL2561_WriteByte>

	/*1- first element is the command -> Address of timing register
	 *2- Second element is the 0b00010010 which makes the gain = 1 and the integration time
	 *2- =402ms which is the default value*/

	TSL2561_WriteByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_TIMING),0b00000010);
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	2081      	movs	r0, #129	; 0x81
 8001a8e:	f000 f979 	bl	8001d84 <TSL2561_WriteByte>


}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <LightSensor_uint8ReadIntensity>:

void LightSensor_uint8ReadIntensity(uint16_t *Copy_puint16LuxValue)
{
 8001a98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
	//Variables for storing Data registers
	uint16_t Local_uint16Channel0Val, Local_uint16Channel1Val,flux_integar=0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	827b      	strh	r3, [r7, #18]
	float flux=0;
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

	//Get the values from the data registers
	TSL2561_GetChannelsReadings(&Local_uint16Channel0Val, &Local_uint16Channel1Val);
 8001aac:	f107 0208 	add.w	r2, r7, #8
 8001ab0:	f107 030a 	add.w	r3, r7, #10
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f92e 	bl	8001d18 <TSL2561_GetChannelsReadings>
	/*Calculating the lux for T, FN, and CL Package of the sensor*/

	//Calculate the ratio of the PhotoDiodes
	float Ratio = ((float)Local_uint16Channel1Val) / ((float)Local_uint16Channel0Val);
 8001abc:	893b      	ldrh	r3, [r7, #8]
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ac6:	897b      	ldrh	r3, [r7, #10]
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad4:	edc7 7a03 	vstr	s15, [r7, #12]

	//Calculating Lux
	//Ratio between 0 and 0.50

	if(Ratio <= 0.50)
 8001ad8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001adc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	d839      	bhi.n	8001b5e <LightSensor_uint8ReadIntensity+0xc6>
	{
		flux= (0.0304 * Local_uint16Channel0Val) - (0.062* Local_uint16Channel0Val * pow(Ratio, 1.4));
 8001aea:	897b      	ldrh	r3, [r7, #10]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fd89 	bl	8000604 <__aeabi_i2d>
 8001af2:	a373      	add	r3, pc, #460	; (adr r3, 8001cc0 <LightSensor_uint8ReadIntensity+0x228>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fdee 	bl	80006d8 <__aeabi_dmul>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4614      	mov	r4, r2
 8001b02:	461d      	mov	r5, r3
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fd7c 	bl	8000604 <__aeabi_i2d>
 8001b0c:	a36e      	add	r3, pc, #440	; (adr r3, 8001cc8 <LightSensor_uint8ReadIntensity+0x230>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fde1 	bl	80006d8 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	4699      	mov	r9, r3
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f7fe fd82 	bl	8000628 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8001cb8 <LightSensor_uint8ReadIntensity+0x220>
 8001b2c:	ec43 2b10 	vmov	d0, r2, r3
 8001b30:	f00d fca8 	bl	800f484 <pow>
 8001b34:	ec53 2b10 	vmov	r2, r3, d0
 8001b38:	4640      	mov	r0, r8
 8001b3a:	4649      	mov	r1, r9
 8001b3c:	f7fe fdcc 	bl	80006d8 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4620      	mov	r0, r4
 8001b46:	4629      	mov	r1, r5
 8001b48:	f7fe fc0e 	bl	8000368 <__aeabi_dsub>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f7ff f8b8 	bl	8000cc8 <__aeabi_d2f>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e092      	b.n	8001c84 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the ratio is between 0.51 and 0.61
	else if(Ratio <= 0.61)
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7fe fd62 	bl	8000628 <__aeabi_f2d>
 8001b64:	a35a      	add	r3, pc, #360	; (adr r3, 8001cd0 <LightSensor_uint8ReadIntensity+0x238>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7ff f831 	bl	8000bd0 <__aeabi_dcmple>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d024      	beq.n	8001bbe <LightSensor_uint8ReadIntensity+0x126>
	{
		flux = (0.0224 * Local_uint16Channel0Val) - (0.031 * Local_uint16Channel1Val);
 8001b74:	897b      	ldrh	r3, [r7, #10]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fd44 	bl	8000604 <__aeabi_i2d>
 8001b7c:	a356      	add	r3, pc, #344	; (adr r3, 8001cd8 <LightSensor_uint8ReadIntensity+0x240>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fda9 	bl	80006d8 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4614      	mov	r4, r2
 8001b8c:	461d      	mov	r5, r3
 8001b8e:	893b      	ldrh	r3, [r7, #8]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fd37 	bl	8000604 <__aeabi_i2d>
 8001b96:	a352      	add	r3, pc, #328	; (adr r3, 8001ce0 <LightSensor_uint8ReadIntensity+0x248>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	f7fe fd9c 	bl	80006d8 <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	f7fe fbde 	bl	8000368 <__aeabi_dsub>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f7ff f888 	bl	8000cc8 <__aeabi_d2f>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	e062      	b.n	8001c84 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the Ratio is between 0.62 and 0.81
	else if(Ratio <= 0.80)
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7fe fd32 	bl	8000628 <__aeabi_f2d>
 8001bc4:	a348      	add	r3, pc, #288	; (adr r3, 8001ce8 <LightSensor_uint8ReadIntensity+0x250>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7ff f801 	bl	8000bd0 <__aeabi_dcmple>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d024      	beq.n	8001c1e <LightSensor_uint8ReadIntensity+0x186>
	{
		flux = (0.0128 * Local_uint16Channel0Val) - (0.0153 * Local_uint16Channel1Val);
 8001bd4:	897b      	ldrh	r3, [r7, #10]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fd14 	bl	8000604 <__aeabi_i2d>
 8001bdc:	a344      	add	r3, pc, #272	; (adr r3, 8001cf0 <LightSensor_uint8ReadIntensity+0x258>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	f7fe fd79 	bl	80006d8 <__aeabi_dmul>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4614      	mov	r4, r2
 8001bec:	461d      	mov	r5, r3
 8001bee:	893b      	ldrh	r3, [r7, #8]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fd07 	bl	8000604 <__aeabi_i2d>
 8001bf6:	a340      	add	r3, pc, #256	; (adr r3, 8001cf8 <LightSensor_uint8ReadIntensity+0x260>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fd6c 	bl	80006d8 <__aeabi_dmul>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4620      	mov	r0, r4
 8001c06:	4629      	mov	r1, r5
 8001c08:	f7fe fbae 	bl	8000368 <__aeabi_dsub>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7ff f858 	bl	8000cc8 <__aeabi_d2f>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e032      	b.n	8001c84 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the Ratio is between 0.82 and 1.39
	else if(Ratio <= 1.30)
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f7fe fd02 	bl	8000628 <__aeabi_f2d>
 8001c24:	a336      	add	r3, pc, #216	; (adr r3, 8001d00 <LightSensor_uint8ReadIntensity+0x268>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	f7fe ffd1 	bl	8000bd0 <__aeabi_dcmple>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d024      	beq.n	8001c7e <LightSensor_uint8ReadIntensity+0x1e6>
	{
		flux = (0.00146 * Local_uint16Channel0Val) - (0.00112 * Local_uint16Channel1Val);
 8001c34:	897b      	ldrh	r3, [r7, #10]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fce4 	bl	8000604 <__aeabi_i2d>
 8001c3c:	a332      	add	r3, pc, #200	; (adr r3, 8001d08 <LightSensor_uint8ReadIntensity+0x270>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fd49 	bl	80006d8 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4614      	mov	r4, r2
 8001c4c:	461d      	mov	r5, r3
 8001c4e:	893b      	ldrh	r3, [r7, #8]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fcd7 	bl	8000604 <__aeabi_i2d>
 8001c56:	a32e      	add	r3, pc, #184	; (adr r3, 8001d10 <LightSensor_uint8ReadIntensity+0x278>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fd3c 	bl	80006d8 <__aeabi_dmul>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4620      	mov	r0, r4
 8001c66:	4629      	mov	r1, r5
 8001c68:	f7fe fb7e 	bl	8000368 <__aeabi_dsub>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7ff f828 	bl	8000cc8 <__aeabi_d2f>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e002      	b.n	8001c84 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the Ratio is bigger than 1.30
	else
	{
		flux = 0;
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
	}

	flux_integar=round(flux);
 8001c84:	6978      	ldr	r0, [r7, #20]
 8001c86:	f7fe fccf 	bl	8000628 <__aeabi_f2d>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	ec43 2b10 	vmov	d0, r2, r3
 8001c92:	f00d fd4d 	bl	800f730 <round>
 8001c96:	ec53 2b10 	vmov	r2, r3, d0
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f7fe fff3 	bl	8000c88 <__aeabi_d2uiz>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	827b      	strh	r3, [r7, #18]

	/*Update the user variable*/
	*Copy_puint16LuxValue=flux_integar;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	8a7a      	ldrh	r2, [r7, #18]
 8001caa:	801a      	strh	r2, [r3, #0]
	{
      TSL2561_Reset();
	}
	 */

}
 8001cac:	bf00      	nop
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cb6:	bf00      	nop
 8001cb8:	66666666 	.word	0x66666666
 8001cbc:	3ff66666 	.word	0x3ff66666
 8001cc0:	77318fc5 	.word	0x77318fc5
 8001cc4:	3f9f212d 	.word	0x3f9f212d
 8001cc8:	c8b43958 	.word	0xc8b43958
 8001ccc:	3fafbe76 	.word	0x3fafbe76
 8001cd0:	b851eb85 	.word	0xb851eb85
 8001cd4:	3fe3851e 	.word	0x3fe3851e
 8001cd8:	8db8bac7 	.word	0x8db8bac7
 8001cdc:	3f96f006 	.word	0x3f96f006
 8001ce0:	c8b43958 	.word	0xc8b43958
 8001ce4:	3f9fbe76 	.word	0x3f9fbe76
 8001ce8:	9999999a 	.word	0x9999999a
 8001cec:	3fe99999 	.word	0x3fe99999
 8001cf0:	eb1c432d 	.word	0xeb1c432d
 8001cf4:	3f8a36e2 	.word	0x3f8a36e2
 8001cf8:	3d07c84b 	.word	0x3d07c84b
 8001cfc:	3f8f559b 	.word	0x3f8f559b
 8001d00:	cccccccd 	.word	0xcccccccd
 8001d04:	3ff4cccc 	.word	0x3ff4cccc
 8001d08:	102363b2 	.word	0x102363b2
 8001d0c:	3f57ebaf 	.word	0x3f57ebaf
 8001d10:	d7c6fbd2 	.word	0xd7c6fbd2
 8001d14:	3f52599e 	.word	0x3f52599e

08001d18 <TSL2561_GetChannelsReadings>:
	TSL2561_WriteByte((TSL2561_COMMAND_NORMAL | TSL2561_REG_INTERRUPT), 0b00000000);

}

static void TSL2561_GetChannelsReadings(uint16_t* Copy_uint16Data0Val, uint16_t* Copy_uint16Data1Val)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
	//Variables for storing received data
	uint8_t data0Low, data0High, data1Low, data1High;

	//Read Data0 registers
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA0LOW),	&data0Low);
 8001d22:	f107 030f 	add.w	r3, r7, #15
 8001d26:	4619      	mov	r1, r3
 8001d28:	208c      	movs	r0, #140	; 0x8c
 8001d2a:	f000 f847 	bl	8001dbc <TSL2561_ReadByte>
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA0HIGH), &data0High);
 8001d2e:	f107 030e 	add.w	r3, r7, #14
 8001d32:	4619      	mov	r1, r3
 8001d34:	208d      	movs	r0, #141	; 0x8d
 8001d36:	f000 f841 	bl	8001dbc <TSL2561_ReadByte>

	//Read Data1 registers
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA1LOW),	&data1Low);
 8001d3a:	f107 030d 	add.w	r3, r7, #13
 8001d3e:	4619      	mov	r1, r3
 8001d40:	208e      	movs	r0, #142	; 0x8e
 8001d42:	f000 f83b 	bl	8001dbc <TSL2561_ReadByte>
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA1HIGH), &data1High);
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	208f      	movs	r0, #143	; 0x8f
 8001d4e:	f000 f835 	bl	8001dbc <TSL2561_ReadByte>

	//Combine Data register values into single 16 bit variable
	*Copy_uint16Data0Val = data0High * 256 + data0Low;
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	801a      	strh	r2, [r3, #0]
	*Copy_uint16Data1Val = data1High * 256 + data1Low;
 8001d66:	7b3b      	ldrb	r3, [r7, #12]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	7b7b      	ldrb	r3, [r7, #13]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	801a      	strh	r2, [r3, #0]

}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <TSL2561_WriteByte>:
	LightSensor_voidInit();

}

static void TSL2561_WriteByte(uint8_t Copy_uint8RegisterAddress, uint8_t Copy_uint8RegisterValue)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af04      	add	r7, sp, #16
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	4613      	mov	r3, r2
 8001d92:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(LightSensor_I2CChannel, LightSensor_SLAVE_ADDRESS,Copy_uint8RegisterAddress, 1, &Copy_uint8RegisterValue,1,TSL2561_Max_Delay);
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	2301      	movs	r3, #1
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	1dbb      	adds	r3, r7, #6
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2301      	movs	r3, #1
 8001da8:	2172      	movs	r1, #114	; 0x72
 8001daa:	4803      	ldr	r0, [pc, #12]	; (8001db8 <TSL2561_WriteByte+0x34>)
 8001dac:	f002 fe94 	bl	8004ad8 <HAL_I2C_Mem_Write>
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000788 	.word	0x20000788

08001dbc <TSL2561_ReadByte>:

static void TSL2561_ReadByte(uint8_t Copy_uint8RegisterAddress, uint8_t *Copy_puinit8RecivingVariable)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(LightSensor_I2CChannel, LightSensor_SLAVE_ADDRESS,Copy_uint8RegisterAddress, 1, Copy_puinit8RecivingVariable, 1,TSL2561_Max_Delay);
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd0:	9302      	str	r3, [sp, #8]
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2301      	movs	r3, #1
 8001ddc:	2172      	movs	r1, #114	; 0x72
 8001dde:	4803      	ldr	r0, [pc, #12]	; (8001dec <TSL2561_ReadByte+0x30>)
 8001de0:	f002 ff74 	bl	8004ccc <HAL_I2C_Mem_Read>
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000788 	.word	0x20000788

08001df0 <decodeGGA>:
 GGAbuffer is the buffer which stores the GGA Data
 GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
 Returns 0 on success
 */

int decodeGGA(char *GGAbuffer, GGASTRUCT *gga) {
 8001df0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001df4:	b08e      	sub	sp, #56	; 0x38
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001dfc:	4b5b      	ldr	r3, [pc, #364]	; (8001f6c <decodeGGA+0x17c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')
 8001e06:	e004      	b.n	8001e12 <decodeGGA+0x22>
		inx++;  // 1st ','
 8001e08:	4b58      	ldr	r3, [pc, #352]	; (8001f6c <decodeGGA+0x17c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	4a57      	ldr	r2, [pc, #348]	; (8001f6c <decodeGGA+0x17c>)
 8001e10:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001e12:	4b56      	ldr	r3, [pc, #344]	; (8001f6c <decodeGGA+0x17c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b2c      	cmp	r3, #44	; 0x2c
 8001e20:	d1f2      	bne.n	8001e08 <decodeGGA+0x18>
	inx++;
 8001e22:	4b52      	ldr	r3, [pc, #328]	; (8001f6c <decodeGGA+0x17c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	4a50      	ldr	r2, [pc, #320]	; (8001f6c <decodeGGA+0x17c>)
 8001e2a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001e2c:	e004      	b.n	8001e38 <decodeGGA+0x48>
		inx++;  // After time ','
 8001e2e:	4b4f      	ldr	r3, [pc, #316]	; (8001f6c <decodeGGA+0x17c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	4a4d      	ldr	r2, [pc, #308]	; (8001f6c <decodeGGA+0x17c>)
 8001e36:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001e38:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <decodeGGA+0x17c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b2c      	cmp	r3, #44	; 0x2c
 8001e46:	d1f2      	bne.n	8001e2e <decodeGGA+0x3e>
	inx++;
 8001e48:	4b48      	ldr	r3, [pc, #288]	; (8001f6c <decodeGGA+0x17c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	4a47      	ldr	r2, [pc, #284]	; (8001f6c <decodeGGA+0x17c>)
 8001e50:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001e52:	e004      	b.n	8001e5e <decodeGGA+0x6e>
		inx++;  // after latitude ','
 8001e54:	4b45      	ldr	r3, [pc, #276]	; (8001f6c <decodeGGA+0x17c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	4a44      	ldr	r2, [pc, #272]	; (8001f6c <decodeGGA+0x17c>)
 8001e5c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001e5e:	4b43      	ldr	r3, [pc, #268]	; (8001f6c <decodeGGA+0x17c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b2c      	cmp	r3, #44	; 0x2c
 8001e6c:	d1f2      	bne.n	8001e54 <decodeGGA+0x64>
	inx++;
 8001e6e:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <decodeGGA+0x17c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	3301      	adds	r3, #1
 8001e74:	4a3d      	ldr	r2, [pc, #244]	; (8001f6c <decodeGGA+0x17c>)
 8001e76:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001e78:	e004      	b.n	8001e84 <decodeGGA+0x94>
		inx++;  // after NS ','
 8001e7a:	4b3c      	ldr	r3, [pc, #240]	; (8001f6c <decodeGGA+0x17c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	4a3a      	ldr	r2, [pc, #232]	; (8001f6c <decodeGGA+0x17c>)
 8001e82:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001e84:	4b39      	ldr	r3, [pc, #228]	; (8001f6c <decodeGGA+0x17c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b2c      	cmp	r3, #44	; 0x2c
 8001e92:	d1f2      	bne.n	8001e7a <decodeGGA+0x8a>
	inx++;
 8001e94:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <decodeGGA+0x17c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	4a34      	ldr	r2, [pc, #208]	; (8001f6c <decodeGGA+0x17c>)
 8001e9c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001e9e:	e004      	b.n	8001eaa <decodeGGA+0xba>
		inx++;  // after longitude ','
 8001ea0:	4b32      	ldr	r3, [pc, #200]	; (8001f6c <decodeGGA+0x17c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	4a31      	ldr	r2, [pc, #196]	; (8001f6c <decodeGGA+0x17c>)
 8001ea8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001eaa:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <decodeGGA+0x17c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b2c      	cmp	r3, #44	; 0x2c
 8001eb8:	d1f2      	bne.n	8001ea0 <decodeGGA+0xb0>
	inx++;
 8001eba:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <decodeGGA+0x17c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	4a2a      	ldr	r2, [pc, #168]	; (8001f6c <decodeGGA+0x17c>)
 8001ec2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001ec4:	e004      	b.n	8001ed0 <decodeGGA+0xe0>
		inx++;  // after EW ','
 8001ec6:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <decodeGGA+0x17c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	4a27      	ldr	r2, [pc, #156]	; (8001f6c <decodeGGA+0x17c>)
 8001ece:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001ed0:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <decodeGGA+0x17c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b2c      	cmp	r3, #44	; 0x2c
 8001ede:	d1f2      	bne.n	8001ec6 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001ee0:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <decodeGGA+0x17c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	4a21      	ldr	r2, [pc, #132]	; (8001f6c <decodeGGA+0x17c>)
 8001ee8:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2')
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <decodeGGA+0x17c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b31      	cmp	r3, #49	; 0x31
 8001ef8:	d00f      	beq.n	8001f1a <decodeGGA+0x12a>
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <decodeGGA+0x17c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b32      	cmp	r3, #50	; 0x32
 8001f08:	d007      	beq.n	8001f1a <decodeGGA+0x12a>
			|| (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <decodeGGA+0x17c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b36      	cmp	r3, #54	; 0x36
 8001f18:	d106      	bne.n	8001f28 <decodeGGA+0x138>
			{
		gga->isfixValid = 1;   // fix available
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c
		inx = 0; // reset the index. We will start from the inx=0 and extract information now
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <decodeGGA+0x17c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
	} else {
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',')
 8001f26:	e009      	b.n	8001f3c <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
		return 1;  // return error
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e2f3      	b.n	800251a <decodeGGA+0x72a>
		inx++;  // 1st ','
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <decodeGGA+0x17c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <decodeGGA+0x17c>)
 8001f3a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <decodeGGA+0x17c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b2c      	cmp	r3, #44	; 0x2c
 8001f4a:	d1f2      	bne.n	8001f32 <decodeGGA+0x142>

	/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)
	inx++;   // reach the first number in time
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <decodeGGA+0x17c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <decodeGGA+0x17c>)
 8001f54:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f00b fb4f 	bl	800d602 <memset>
	i = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001f68:	e016      	b.n	8001f98 <decodeGGA+0x1a8>
 8001f6a:	bf00      	nop
 8001f6c:	20000300 	.word	0x20000300
	{
		buffer[i] = GGAbuffer[inx];
 8001f70:	4ba9      	ldr	r3, [pc, #676]	; (8002218 <decodeGGA+0x428>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	7819      	ldrb	r1, [r3, #0]
 8001f7c:	f107 020c 	add.w	r2, r7, #12
 8001f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f82:	4413      	add	r3, r2
 8001f84:	460a      	mov	r2, r1
 8001f86:	701a      	strb	r2, [r3, #0]
		i++;
 8001f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8001f8e:	4ba2      	ldr	r3, [pc, #648]	; (8002218 <decodeGGA+0x428>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	4aa0      	ldr	r2, [pc, #640]	; (8002218 <decodeGGA+0x428>)
 8001f96:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001f98:	4b9f      	ldr	r3, [pc, #636]	; (8002218 <decodeGGA+0x428>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b2c      	cmp	r3, #44	; 0x2c
 8001fa6:	d1e3      	bne.n	8001f70 <decodeGGA+0x180>
	}

	hr = (atoi(buffer) / 10000) + GMT / 100; // get the hours from the 6 digit number
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	4618      	mov	r0, r3
 8001fae:	f00a fd1c 	bl	800c9ea <atoi>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4a99      	ldr	r2, [pc, #612]	; (800221c <decodeGGA+0x42c>)
 8001fb6:	fb82 1203 	smull	r1, r2, r2, r3
 8001fba:	1312      	asrs	r2, r2, #12
 8001fbc:	17db      	asrs	r3, r3, #31
 8001fbe:	1ad2      	subs	r2, r2, r3
 8001fc0:	4b97      	ldr	r3, [pc, #604]	; (8002220 <decodeGGA+0x430>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4997      	ldr	r1, [pc, #604]	; (8002224 <decodeGGA+0x434>)
 8001fc6:	fb81 0103 	smull	r0, r1, r1, r3
 8001fca:	1149      	asrs	r1, r1, #5
 8001fcc:	17db      	asrs	r3, r3, #31
 8001fce:	1acb      	subs	r3, r1, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a95      	ldr	r2, [pc, #596]	; (8002228 <decodeGGA+0x438>)
 8001fd4:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer) / 100) % 100) + GMT % 100; // get the minutes from the 6 digit number
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f00a fd05 	bl	800c9ea <atoi>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a90      	ldr	r2, [pc, #576]	; (8002224 <decodeGGA+0x434>)
 8001fe4:	fb82 1203 	smull	r1, r2, r2, r3
 8001fe8:	1152      	asrs	r2, r2, #5
 8001fea:	17db      	asrs	r3, r3, #31
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	4a8d      	ldr	r2, [pc, #564]	; (8002224 <decodeGGA+0x434>)
 8001ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ff4:	1151      	asrs	r1, r2, #5
 8001ff6:	17da      	asrs	r2, r3, #31
 8001ff8:	1a8a      	subs	r2, r1, r2
 8001ffa:	2164      	movs	r1, #100	; 0x64
 8001ffc:	fb01 f202 	mul.w	r2, r1, r2
 8002000:	1a9a      	subs	r2, r3, r2
 8002002:	4b87      	ldr	r3, [pc, #540]	; (8002220 <decodeGGA+0x430>)
 8002004:	6819      	ldr	r1, [r3, #0]
 8002006:	4b87      	ldr	r3, [pc, #540]	; (8002224 <decodeGGA+0x434>)
 8002008:	fb83 0301 	smull	r0, r3, r3, r1
 800200c:	1158      	asrs	r0, r3, #5
 800200e:	17cb      	asrs	r3, r1, #31
 8002010:	1ac3      	subs	r3, r0, r3
 8002012:	2064      	movs	r0, #100	; 0x64
 8002014:	fb00 f303 	mul.w	r3, r0, r3
 8002018:	1acb      	subs	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	4a83      	ldr	r2, [pc, #524]	; (800222c <decodeGGA+0x43c>)
 800201e:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) {
 8002020:	4b82      	ldr	r3, [pc, #520]	; (800222c <decodeGGA+0x43c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b3b      	cmp	r3, #59	; 0x3b
 8002026:	dd09      	ble.n	800203c <decodeGGA+0x24c>
		min = min - 60;
 8002028:	4b80      	ldr	r3, [pc, #512]	; (800222c <decodeGGA+0x43c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3b3c      	subs	r3, #60	; 0x3c
 800202e:	4a7f      	ldr	r2, [pc, #508]	; (800222c <decodeGGA+0x43c>)
 8002030:	6013      	str	r3, [r2, #0]
		hr++;
 8002032:	4b7d      	ldr	r3, [pc, #500]	; (8002228 <decodeGGA+0x438>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3301      	adds	r3, #1
 8002038:	4a7b      	ldr	r2, [pc, #492]	; (8002228 <decodeGGA+0x438>)
 800203a:	6013      	str	r3, [r2, #0]
	}
	if (hr < 0) {
 800203c:	4b7a      	ldr	r3, [pc, #488]	; (8002228 <decodeGGA+0x438>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	da09      	bge.n	8002058 <decodeGGA+0x268>
		hr = 24 + hr;
 8002044:	4b78      	ldr	r3, [pc, #480]	; (8002228 <decodeGGA+0x438>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	3318      	adds	r3, #24
 800204a:	4a77      	ldr	r2, [pc, #476]	; (8002228 <decodeGGA+0x438>)
 800204c:	6013      	str	r3, [r2, #0]
		daychange--;
 800204e:	4b78      	ldr	r3, [pc, #480]	; (8002230 <decodeGGA+0x440>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	3b01      	subs	r3, #1
 8002054:	4a76      	ldr	r2, [pc, #472]	; (8002230 <decodeGGA+0x440>)
 8002056:	6013      	str	r3, [r2, #0]
	}
	if (hr >= 24) {
 8002058:	4b73      	ldr	r3, [pc, #460]	; (8002228 <decodeGGA+0x438>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b17      	cmp	r3, #23
 800205e:	dd09      	ble.n	8002074 <decodeGGA+0x284>
		hr = hr - 24;
 8002060:	4b71      	ldr	r3, [pc, #452]	; (8002228 <decodeGGA+0x438>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3b18      	subs	r3, #24
 8002066:	4a70      	ldr	r2, [pc, #448]	; (8002228 <decodeGGA+0x438>)
 8002068:	6013      	str	r3, [r2, #0]
		daychange++;
 800206a:	4b71      	ldr	r3, [pc, #452]	; (8002230 <decodeGGA+0x440>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	4a6f      	ldr	r2, [pc, #444]	; (8002230 <decodeGGA+0x440>)
 8002072:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8002074:	4b6c      	ldr	r3, [pc, #432]	; (8002228 <decodeGGA+0x438>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	621a      	str	r2, [r3, #32]
	gga->tim.min = min;
 800207c:	4b6b      	ldr	r3, [pc, #428]	; (800222c <decodeGGA+0x43c>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
	gga->tim.sec = atoi(buffer) % 100;
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	4618      	mov	r0, r3
 800208a:	f00a fcae 	bl	800c9ea <atoi>
 800208e:	4602      	mov	r2, r0
 8002090:	4b64      	ldr	r3, [pc, #400]	; (8002224 <decodeGGA+0x434>)
 8002092:	fb83 1302 	smull	r1, r3, r3, r2
 8002096:	1159      	asrs	r1, r3, #5
 8002098:	17d3      	asrs	r3, r2, #31
 800209a:	1acb      	subs	r3, r1, r3
 800209c:	2164      	movs	r1, #100	; 0x64
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	6293      	str	r3, [r2, #40]	; 0x28

	/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 80020a8:	4b5b      	ldr	r3, [pc, #364]	; (8002218 <decodeGGA+0x428>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	4a5a      	ldr	r2, [pc, #360]	; (8002218 <decodeGGA+0x428>)
 80020b0:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	220c      	movs	r2, #12
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00b faa1 	bl	800d602 <memset>
	i = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 80020c4:	e013      	b.n	80020ee <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 80020c6:	4b54      	ldr	r3, [pc, #336]	; (8002218 <decodeGGA+0x428>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	7819      	ldrb	r1, [r3, #0]
 80020d2:	f107 020c 	add.w	r2, r7, #12
 80020d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d8:	4413      	add	r3, r2
 80020da:	460a      	mov	r2, r1
 80020dc:	701a      	strb	r2, [r3, #0]
		i++;
 80020de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e0:	3301      	adds	r3, #1
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 80020e4:	4b4c      	ldr	r3, [pc, #304]	; (8002218 <decodeGGA+0x428>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	4a4b      	ldr	r2, [pc, #300]	; (8002218 <decodeGGA+0x428>)
 80020ec:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 80020ee:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <decodeGGA+0x428>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4413      	add	r3, r2
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b2c      	cmp	r3, #44	; 0x2c
 80020fc:	d1e3      	bne.n	80020c6 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6)
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe f924 	bl	8000350 <strlen>
 8002108:	4603      	mov	r3, r0
 800210a:	2b05      	cmp	r3, #5
 800210c:	d801      	bhi.n	8002112 <decodeGGA+0x322>
		return 2;  // If the buffer length is not appropriate, return error
 800210e:	2302      	movs	r3, #2
 8002110:	e203      	b.n	800251a <decodeGGA+0x72a>
	int16_t num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	4618      	mov	r0, r3
 8002118:	f00a fc67 	bl	800c9ea <atoi>
 800211c:	4603      	mov	r3, r0
 800211e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int j = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8002124:	e002      	b.n	800212c <decodeGGA+0x33c>
		j++;   // Figure out how many digits before the decimal
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	3301      	adds	r3, #1
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800212c:	f107 020c 	add.w	r2, r7, #12
 8002130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002132:	4413      	add	r3, r2
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b2e      	cmp	r3, #46	; 0x2e
 8002138:	d1f5      	bne.n	8002126 <decodeGGA+0x336>
	j++;
 800213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213c:	3301      	adds	r3, #1
 800213e:	633b      	str	r3, [r7, #48]	; 0x30
	int declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe f903 	bl	8000350 <strlen>
 800214a:	4602      	mov	r2, r0
 800214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
	int dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 8002152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002154:	f107 020c 	add.w	r2, r7, #12
 8002158:	4413      	add	r3, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f00a fc45 	bl	800c9ea <atoi>
 8002160:	6278      	str	r0, [r7, #36]	; 0x24
	double lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 8002162:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fa4c 	bl	8000604 <__aeabi_i2d>
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b30      	ldr	r3, [pc, #192]	; (8002234 <decodeGGA+0x444>)
 8002172:	f7fe fbdb 	bl	800092c <__aeabi_ddiv>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4690      	mov	r8, r2
 800217c:	4699      	mov	r9, r3
 800217e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002180:	f7fe fa40 	bl	8000604 <__aeabi_i2d>
 8002184:	4604      	mov	r4, r0
 8002186:	460d      	mov	r5, r1
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	3302      	adds	r3, #2
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fa39 	bl	8000604 <__aeabi_i2d>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	ec43 2b11 	vmov	d1, r2, r3
 800219a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8002210 <decodeGGA+0x420>
 800219e:	f00d f971 	bl	800f484 <pow>
 80021a2:	ec53 2b10 	vmov	r2, r3, d0
 80021a6:	4620      	mov	r0, r4
 80021a8:	4629      	mov	r1, r5
 80021aa:	f7fe fbbf 	bl	800092c <__aeabi_ddiv>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4640      	mov	r0, r8
 80021b4:	4649      	mov	r1, r9
 80021b6:	f7fe f8d9 	bl	800036c <__adddf3>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 80021c2:	6839      	ldr	r1, [r7, #0]
 80021c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021c8:	e9c1 2300 	strd	r2, r3, [r1]
	inx++;
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <decodeGGA+0x428>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	4a11      	ldr	r2, [pc, #68]	; (8002218 <decodeGGA+0x428>)
 80021d4:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <decodeGGA+0x428>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	721a      	strb	r2, [r3, #8]

	/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <decodeGGA+0x428>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	3301      	adds	r3, #1
 80021ec:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <decodeGGA+0x428>)
 80021ee:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <decodeGGA+0x428>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <decodeGGA+0x428>)
 80021f8:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80021fa:	f107 030c 	add.w	r3, r7, #12
 80021fe:	220c      	movs	r2, #12
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f00b f9fd 	bl	800d602 <memset>
	i = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 800220c:	e028      	b.n	8002260 <decodeGGA+0x470>
 800220e:	bf00      	nop
 8002210:	00000000 	.word	0x00000000
 8002214:	40240000 	.word	0x40240000
 8002218:	20000300 	.word	0x20000300
 800221c:	68db8bad 	.word	0x68db8bad
 8002220:	20000000 	.word	0x20000000
 8002224:	51eb851f 	.word	0x51eb851f
 8002228:	20000304 	.word	0x20000304
 800222c:	20000308 	.word	0x20000308
 8002230:	2000030c 	.word	0x2000030c
 8002234:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8002238:	4b89      	ldr	r3, [pc, #548]	; (8002460 <decodeGGA+0x670>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	7819      	ldrb	r1, [r3, #0]
 8002244:	f107 020c 	add.w	r2, r7, #12
 8002248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224a:	4413      	add	r3, r2
 800224c:	460a      	mov	r2, r1
 800224e:	701a      	strb	r2, [r3, #0]
		i++;
 8002250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002252:	3301      	adds	r3, #1
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8002256:	4b82      	ldr	r3, [pc, #520]	; (8002460 <decodeGGA+0x670>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3301      	adds	r3, #1
 800225c:	4a80      	ldr	r2, [pc, #512]	; (8002460 <decodeGGA+0x670>)
 800225e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 8002260:	4b7f      	ldr	r3, [pc, #508]	; (8002460 <decodeGGA+0x670>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b2c      	cmp	r3, #44	; 0x2c
 800226e:	d1e3      	bne.n	8002238 <decodeGGA+0x448>
	}
	num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	4618      	mov	r0, r3
 8002276:	f00a fbb8 	bl	800c9ea <atoi>
 800227a:	4603      	mov	r3, r0
 800227c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8002282:	e002      	b.n	800228a <decodeGGA+0x49a>
		j++;  // Figure out how many digits before the decimal
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	3301      	adds	r3, #1
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800228a:	f107 020c 	add.w	r2, r7, #12
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	4413      	add	r3, r2
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b2e      	cmp	r3, #46	; 0x2e
 8002296:	d1f5      	bne.n	8002284 <decodeGGA+0x494>
	j++;
 8002298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229a:	3301      	adds	r3, #1
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 800229e:	f107 030c 	add.w	r3, r7, #12
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f854 	bl	8000350 <strlen>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	f107 020c 	add.w	r2, r7, #12
 80022b6:	4413      	add	r3, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f00a fb96 	bl	800c9ea <atoi>
 80022be:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 80022c0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f99d 	bl	8000604 <__aeabi_i2d>
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	4b65      	ldr	r3, [pc, #404]	; (8002464 <decodeGGA+0x674>)
 80022d0:	f7fe fb2c 	bl	800092c <__aeabi_ddiv>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4690      	mov	r8, r2
 80022da:	4699      	mov	r9, r3
 80022dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022de:	f7fe f991 	bl	8000604 <__aeabi_i2d>
 80022e2:	4604      	mov	r4, r0
 80022e4:	460d      	mov	r5, r1
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	3302      	adds	r3, #2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe f98a 	bl	8000604 <__aeabi_i2d>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	ec43 2b11 	vmov	d1, r2, r3
 80022f8:	ed9f 0b57 	vldr	d0, [pc, #348]	; 8002458 <decodeGGA+0x668>
 80022fc:	f00d f8c2 	bl	800f484 <pow>
 8002300:	ec53 2b10 	vmov	r2, r3, d0
 8002304:	4620      	mov	r0, r4
 8002306:	4629      	mov	r1, r5
 8002308:	f7fe fb10 	bl	800092c <__aeabi_ddiv>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4640      	mov	r0, r8
 8002312:	4649      	mov	r1, r9
 8002314:	f7fe f82a 	bl	800036c <__adddf3>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8002320:	6839      	ldr	r1, [r7, #0]
 8002322:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002326:	e9c1 2304 	strd	r2, r3, [r1, #16]
	inx++;
 800232a:	4b4d      	ldr	r3, [pc, #308]	; (8002460 <decodeGGA+0x670>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	4a4b      	ldr	r2, [pc, #300]	; (8002460 <decodeGGA+0x670>)
 8002332:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8002334:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <decodeGGA+0x670>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	781a      	ldrb	r2, [r3, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	761a      	strb	r2, [r3, #24]

	/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8002344:	4b46      	ldr	r3, [pc, #280]	; (8002460 <decodeGGA+0x670>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	4a45      	ldr	r2, [pc, #276]	; (8002460 <decodeGGA+0x670>)
 800234c:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 800234e:	4b44      	ldr	r3, [pc, #272]	; (8002460 <decodeGGA+0x670>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3301      	adds	r3, #1
 8002354:	4a42      	ldr	r2, [pc, #264]	; (8002460 <decodeGGA+0x670>)
 8002356:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8002358:	4b41      	ldr	r3, [pc, #260]	; (8002460 <decodeGGA+0x670>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3301      	adds	r3, #1
 800235e:	4a40      	ldr	r2, [pc, #256]	; (8002460 <decodeGGA+0x670>)
 8002360:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8002362:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <decodeGGA+0x670>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	4a3d      	ldr	r2, [pc, #244]	; (8002460 <decodeGGA+0x670>)
 800236a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	220c      	movs	r2, #12
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f00b f944 	bl	800d602 <memset>
	i = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 800237e:	e013      	b.n	80023a8 <decodeGGA+0x5b8>
	{
		buffer[i] = GGAbuffer[inx];
 8002380:	4b37      	ldr	r3, [pc, #220]	; (8002460 <decodeGGA+0x670>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	7819      	ldrb	r1, [r3, #0]
 800238c:	f107 020c 	add.w	r2, r7, #12
 8002390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002392:	4413      	add	r3, r2
 8002394:	460a      	mov	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]
		i++;
 8002398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239a:	3301      	adds	r3, #1
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800239e:	4b30      	ldr	r3, [pc, #192]	; (8002460 <decodeGGA+0x670>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	3301      	adds	r3, #1
 80023a4:	4a2e      	ldr	r2, [pc, #184]	; (8002460 <decodeGGA+0x670>)
 80023a6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 80023a8:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <decodeGGA+0x670>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b2c      	cmp	r3, #44	; 0x2c
 80023b6:	d1e3      	bne.n	8002380 <decodeGGA+0x590>
	}
	gga->numofsat = atoi(buffer); // convert the buffer to number and save into the structure
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	4618      	mov	r0, r3
 80023be:	f00a fb14 	bl	800c9ea <atoi>
 80023c2:	4602      	mov	r2, r0
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40

	/***************** skip HDOP  *********************/
	inx++;
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <decodeGGA+0x670>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	4a24      	ldr	r2, [pc, #144]	; (8002460 <decodeGGA+0x670>)
 80023d0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80023d2:	e004      	b.n	80023de <decodeGGA+0x5ee>
		inx++;
 80023d4:	4b22      	ldr	r3, [pc, #136]	; (8002460 <decodeGGA+0x670>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	3301      	adds	r3, #1
 80023da:	4a21      	ldr	r2, [pc, #132]	; (8002460 <decodeGGA+0x670>)
 80023dc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <decodeGGA+0x670>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b2c      	cmp	r3, #44	; 0x2c
 80023ec:	d1f2      	bne.n	80023d4 <decodeGGA+0x5e4>

	/*************** Altitude calculation ********************/
	inx++;
 80023ee:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <decodeGGA+0x670>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	3301      	adds	r3, #1
 80023f4:	4a1a      	ldr	r2, [pc, #104]	; (8002460 <decodeGGA+0x670>)
 80023f6:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80023f8:	f107 030c 	add.w	r3, r7, #12
 80023fc:	220c      	movs	r2, #12
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f00b f8fe 	bl	800d602 <memset>
	i = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') {
 800240a:	e013      	b.n	8002434 <decodeGGA+0x644>
		buffer[i] = GGAbuffer[inx];
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <decodeGGA+0x670>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	7819      	ldrb	r1, [r3, #0]
 8002418:	f107 020c 	add.w	r2, r7, #12
 800241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241e:	4413      	add	r3, r2
 8002420:	460a      	mov	r2, r1
 8002422:	701a      	strb	r2, [r3, #0]
		i++;
 8002424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002426:	3301      	adds	r3, #1
 8002428:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <decodeGGA+0x670>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3301      	adds	r3, #1
 8002430:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <decodeGGA+0x670>)
 8002432:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <decodeGGA+0x670>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b2c      	cmp	r3, #44	; 0x2c
 8002442:	d1e3      	bne.n	800240c <decodeGGA+0x61c>
	}
	num = (atoi(buffer));
 8002444:	f107 030c 	add.w	r3, r7, #12
 8002448:	4618      	mov	r0, r3
 800244a:	f00a face 	bl	800c9ea <atoi>
 800244e:	4603      	mov	r3, r0
 8002450:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8002456:	e00a      	b.n	800246e <decodeGGA+0x67e>
 8002458:	00000000 	.word	0x00000000
 800245c:	40240000 	.word	0x40240000
 8002460:	20000300 	.word	0x20000300
 8002464:	40590000 	.word	0x40590000
		j++;
 8002468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246a:	3301      	adds	r3, #1
 800246c:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800246e:	f107 020c 	add.w	r2, r7, #12
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	4413      	add	r3, r2
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b2e      	cmp	r3, #46	; 0x2e
 800247a:	d1f5      	bne.n	8002468 <decodeGGA+0x678>
	j++;
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	3301      	adds	r3, #1
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j;
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	4618      	mov	r0, r3
 8002488:	f7fd ff62 	bl	8000350 <strlen>
 800248c:	4602      	mov	r2, r0
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j);
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	f107 020c 	add.w	r2, r7, #12
 800249a:	4413      	add	r3, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f00a faa4 	bl	800c9ea <atoi>
 80024a2:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num) + (dec / pow(10, (declen)));
 80024a4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe f8ab 	bl	8000604 <__aeabi_i2d>
 80024ae:	4604      	mov	r4, r0
 80024b0:	460d      	mov	r5, r1
 80024b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024b4:	f7fe f8a6 	bl	8000604 <__aeabi_i2d>
 80024b8:	4680      	mov	r8, r0
 80024ba:	4689      	mov	r9, r1
 80024bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024be:	f7fe f8a1 	bl	8000604 <__aeabi_i2d>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	ec43 2b11 	vmov	d1, r2, r3
 80024ca:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002528 <decodeGGA+0x738>
 80024ce:	f00c ffd9 	bl	800f484 <pow>
 80024d2:	ec53 2b10 	vmov	r2, r3, d0
 80024d6:	4640      	mov	r0, r8
 80024d8:	4649      	mov	r1, r9
 80024da:	f7fe fa27 	bl	800092c <__aeabi_ddiv>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4620      	mov	r0, r4
 80024e4:	4629      	mov	r1, r5
 80024e6:	f7fd ff41 	bl	800036c <__adddf3>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->alt.altitude = lat;
 80024f2:	6839      	ldr	r1, [r7, #0]
 80024f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	inx++;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <decodeGGA+0x740>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3301      	adds	r3, #1
 8002502:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <decodeGGA+0x740>)
 8002504:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <decodeGGA+0x740>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	return 0;
 8002518:	2300      	movs	r3, #0

}
 800251a:	4618      	mov	r0, r3
 800251c:	3738      	adds	r7, #56	; 0x38
 800251e:	46bd      	mov	sp, r7
 8002520:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002524:	f3af 8000 	nop.w
 8002528:	00000000 	.word	0x00000000
 800252c:	40240000 	.word	0x40240000
 8002530:	20000300 	.word	0x20000300

08002534 <TASK_GPS>:
extern TaskHandle_t Handle_ESP_Periodic;
extern TaskHandle_t Handle_ESP_Status;
extern TaskHandle_t Handle_LightSensor;

void TASK_GPS(void *pvParameters)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af02      	add	r7, sp, #8
 800253a:	6078      	str	r0, [r7, #4]
	uint8_t Decode_Error_Code;
	while(1)
	{
		/*Update the GPS Data*/
		Decode_Error_Code = GPS_uint8DecodeGGAData();
 800253c:	f7ff f84a 	bl	80015d4 <GPS_uint8DecodeGGAData>
 8002540:	4603      	mov	r3, r0
 8002542:	73fb      	strb	r3, [r7, #15]
		if(Decode_Error_Code==Decode_Success)
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d1f8      	bne.n	800253c <TASK_GPS+0x8>
		{
			/*Update the completion flag to activate the sendESP_Periodic task*/
			if(Global_GPS_Speed_Completetion==Nothing_Completed)
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <TASK_GPS+0x50>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d103      	bne.n	800255a <TASK_GPS+0x26>
			{
				Global_GPS_Speed_Completetion=Half_Completed_GPS;
 8002552:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <TASK_GPS+0x50>)
 8002554:	2202      	movs	r2, #2
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	e00f      	b.n	800257a <TASK_GPS+0x46>

			}
			else if(Global_GPS_Speed_Completetion==Half_Completed_Speed)
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <TASK_GPS+0x50>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d10b      	bne.n	800257a <TASK_GPS+0x46>
			{

				Global_GPS_Speed_Completetion=Nothing_Completed;
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <TASK_GPS+0x50>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]


				/*Activate the ESPTask*/
				xTaskNotify(Handle_ESP_Periodic,0,eNoAction);
 8002568:	4b07      	ldr	r3, [pc, #28]	; (8002588 <TASK_GPS+0x54>)
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	2300      	movs	r3, #0
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2300      	movs	r3, #0
 8002572:	2200      	movs	r2, #0
 8002574:	2100      	movs	r1, #0
 8002576:	f007 fb87 	bl	8009c88 <xTaskGenericNotify>
			}
			/*Stopping the task for 400ms to free the processor*/
			vTaskDelay(pdMS_TO_TICKS(400));
 800257a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800257e:	f006 fd21 	bl	8008fc4 <vTaskDelay>
		Decode_Error_Code = GPS_uint8DecodeGGAData();
 8002582:	e7db      	b.n	800253c <TASK_GPS+0x8>
 8002584:	20000310 	.word	0x20000310
 8002588:	20000218 	.word	0x20000218

0800258c <TASK_LCDBuzzer>:


}

void TASK_LCDBuzzer (void *pvParameters)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af02      	add	r7, sp, #8
 8002592:	6078      	str	r0, [r7, #4]
	uint32_t Local_uint8NotificationValue;

	while(1)
	{
		xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint8NotificationValue, portMAX_DELAY);
 8002594:	f107 030c 	add.w	r3, r7, #12
 8002598:	f04f 32ff 	mov.w	r2, #4294967295
 800259c:	9200      	str	r2, [sp, #0]
 800259e:	f04f 32ff 	mov.w	r2, #4294967295
 80025a2:	2100      	movs	r1, #0
 80025a4:	2000      	movs	r0, #0
 80025a6:	f007 fae7 	bl	8009b78 <xTaskGenericNotifyWait>

		switch(Local_uint8NotificationValue)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d104      	bne.n	80025ba <TASK_LCDBuzzer+0x2e>
		{
		case Notify_TASK_LCDBuzzer_Break:

			Buzzer_voidHighSound();
 80025b0:	f7fe fd58 	bl	8001064 <Buzzer_voidHighSound>
			LCD_AvoidHardBraking();
 80025b4:	f7ff f86c 	bl	8001690 <LCD_AvoidHardBraking>
			break;
 80025b8:	e000      	b.n	80025bc <TASK_LCDBuzzer+0x30>

		default:
			/*Do Nothing*/
			break;
 80025ba:	bf00      	nop
		xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint8NotificationValue, portMAX_DELAY);
 80025bc:	e7ea      	b.n	8002594 <TASK_LCDBuzzer+0x8>
	...

080025c0 <TASK_CarControl>:


}

void TASK_CarControl(void *pvParameters)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	6078      	str	r0, [r7, #4]
	uint32_t Local_Notification_Value;
	for (;;) {

		/*Waiting to be notified from the BT ISR */
		xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_Notification_Value,portMAX_DELAY);
 80025c8:	f107 030c 	add.w	r3, r7, #12
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	9200      	str	r2, [sp, #0]
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	2000      	movs	r0, #0
 80025d8:	f007 face 	bl	8009b78 <xTaskGenericNotifyWait>

		// Read data from UART
		switch (received_char){
 80025dc:	4b4b      	ldr	r3, [pc, #300]	; (800270c <TASK_CarControl+0x14c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	3b31      	subs	r3, #49	; 0x31
 80025e2:	2b3b      	cmp	r3, #59	; 0x3b
 80025e4:	d8f0      	bhi.n	80025c8 <TASK_CarControl+0x8>
 80025e6:	a201      	add	r2, pc, #4	; (adr r2, 80025ec <TASK_CarControl+0x2c>)
 80025e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ec:	080026dd 	.word	0x080026dd
 80025f0:	080026e3 	.word	0x080026e3
 80025f4:	080025c9 	.word	0x080025c9
 80025f8:	080026e9 	.word	0x080026e9
 80025fc:	080026ef 	.word	0x080026ef
 8002600:	080026f5 	.word	0x080026f5
 8002604:	080026fb 	.word	0x080026fb
 8002608:	08002701 	.word	0x08002701
 800260c:	080025c9 	.word	0x080025c9
 8002610:	080025c9 	.word	0x080025c9
 8002614:	080025c9 	.word	0x080025c9
 8002618:	080025c9 	.word	0x080025c9
 800261c:	080025c9 	.word	0x080025c9
 8002620:	080025c9 	.word	0x080025c9
 8002624:	080025c9 	.word	0x080025c9
 8002628:	080025c9 	.word	0x080025c9
 800262c:	080025c9 	.word	0x080025c9
 8002630:	080025c9 	.word	0x080025c9
 8002634:	080025c9 	.word	0x080025c9
 8002638:	080025c9 	.word	0x080025c9
 800263c:	080025c9 	.word	0x080025c9
 8002640:	080025c9 	.word	0x080025c9
 8002644:	080025c9 	.word	0x080025c9
 8002648:	080025c9 	.word	0x080025c9
 800264c:	080025c9 	.word	0x080025c9
 8002650:	080025c9 	.word	0x080025c9
 8002654:	080025c9 	.word	0x080025c9
 8002658:	080025c9 	.word	0x080025c9
 800265c:	080025c9 	.word	0x080025c9
 8002660:	080025c9 	.word	0x080025c9
 8002664:	080025c9 	.word	0x080025c9
 8002668:	080025c9 	.word	0x080025c9
 800266c:	080025c9 	.word	0x080025c9
 8002670:	080025c9 	.word	0x080025c9
 8002674:	080025c9 	.word	0x080025c9
 8002678:	080025c9 	.word	0x080025c9
 800267c:	080025c9 	.word	0x080025c9
 8002680:	080025c9 	.word	0x080025c9
 8002684:	080025c9 	.word	0x080025c9
 8002688:	080025c9 	.word	0x080025c9
 800268c:	080025c9 	.word	0x080025c9
 8002690:	080025c9 	.word	0x080025c9
 8002694:	080025c9 	.word	0x080025c9
 8002698:	080025c9 	.word	0x080025c9
 800269c:	080025c9 	.word	0x080025c9
 80026a0:	080025c9 	.word	0x080025c9
 80026a4:	080025c9 	.word	0x080025c9
 80026a8:	080025c9 	.word	0x080025c9
 80026ac:	080025c9 	.word	0x080025c9
 80026b0:	080025c9 	.word	0x080025c9
 80026b4:	080025c9 	.word	0x080025c9
 80026b8:	080025c9 	.word	0x080025c9
 80026bc:	080025c9 	.word	0x080025c9
 80026c0:	080025c9 	.word	0x080025c9
 80026c4:	080025c9 	.word	0x080025c9
 80026c8:	080025c9 	.word	0x080025c9
 80026cc:	080025c9 	.word	0x080025c9
 80026d0:	080025c9 	.word	0x080025c9
 80026d4:	080025c9 	.word	0x080025c9
 80026d8:	080025c9 	.word	0x080025c9
		case '1':
			Car_Rotate_LeftForward();
 80026dc:	f7fe fe1a 	bl	8001314 <Car_Rotate_LeftForward>
			break;
 80026e0:	e012      	b.n	8002708 <TASK_CarControl+0x148>
		case '2':
			Car_Rotate_Left();
 80026e2:	f7fe fdbb 	bl	800125c <Car_Rotate_Left>
			break;
 80026e6:	e00f      	b.n	8002708 <TASK_CarControl+0x148>
		case '4':
			Car_Move_Forward_High_Speed();
 80026e8:	f7fe fd2e 	bl	8001148 <Car_Move_Forward_High_Speed>
			break;
 80026ec:	e00c      	b.n	8002708 <TASK_CarControl+0x148>
		case '5':
			Car_Stop();
 80026ee:	f7fe fe3f 	bl	8001370 <Car_Stop>
			break;
 80026f2:	e009      	b.n	8002708 <TASK_CarControl+0x148>
		case '6':
			Car_Move_Backward();
 80026f4:	f7fe fd56 	bl	80011a4 <Car_Move_Backward>
			break;
 80026f8:	e006      	b.n	8002708 <TASK_CarControl+0x148>
		case '7':
			Car_Rotate_RightForward();
 80026fa:	f7fe fddd 	bl	80012b8 <Car_Rotate_RightForward>
			break;
 80026fe:	e003      	b.n	8002708 <TASK_CarControl+0x148>
		case '8':
			Car_Rotate_Right();
 8002700:	f7fe fd7e 	bl	8001200 <Car_Rotate_Right>
			break;
 8002704:	bf00      	nop
 8002706:	e75f      	b.n	80025c8 <TASK_CarControl+0x8>
		xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_Notification_Value,portMAX_DELAY);
 8002708:	e75e      	b.n	80025c8 <TASK_CarControl+0x8>
 800270a:	bf00      	nop
 800270c:	20000a60 	.word	0x20000a60

08002710 <TASK_LightSensor>:
		}
	}
}

void TASK_LightSensor(void *pvParameters)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af02      	add	r7, sp, #8
 8002716:	6078      	str	r0, [r7, #4]
	uint16_t Local_uint16LightSensor_Flux=0;
 8002718:	2300      	movs	r3, #0
 800271a:	81fb      	strh	r3, [r7, #14]

	while(1)
	{
		/*Read the intensity*/
		LightSensor_uint8ReadIntensity(&Local_uint16LightSensor_Flux);
 800271c:	f107 030e 	add.w	r3, r7, #14
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff f9b9 	bl	8001a98 <LightSensor_uint8ReadIntensity>

		if(Local_uint16LightSensor_Flux>MAX_LightIntensity)
 8002726:	89fb      	ldrh	r3, [r7, #14]
 8002728:	2b64      	cmp	r3, #100	; 0x64
 800272a:	d910      	bls.n	800274e <TASK_LightSensor+0x3e>
		{
			/*Update the status*/
			Light_Sensor_Status=1;
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <TASK_LightSensor+0x48>)
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]

			//Notify the ESPSendStatus task with problem in light
			xTaskNotify(Handle_ESP_Status,Notify_TASK_ESPSend_HighLight,eSetValueWithOverwrite);
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <TASK_LightSensor+0x4c>)
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	2300      	movs	r3, #0
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	2303      	movs	r3, #3
 800273c:	2205      	movs	r2, #5
 800273e:	2100      	movs	r1, #0
 8002740:	f007 faa2 	bl	8009c88 <xTaskGenericNotify>

			/*Delaying the task to free the processor*/
			vTaskDelay(pdMS_TO_TICKS(800));
 8002744:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002748:	f006 fc3c 	bl	8008fc4 <vTaskDelay>
 800274c:	e7e6      	b.n	800271c <TASK_LightSensor+0xc>
		}
		else
		{
			/*Delaying the task to free the processor*/
			vTaskDelay(pdMS_TO_TICKS(600));
 800274e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002752:	f006 fc37 	bl	8008fc4 <vTaskDelay>
		LightSensor_uint8ReadIntensity(&Local_uint16LightSensor_Flux);
 8002756:	e7e1      	b.n	800271c <TASK_LightSensor+0xc>
 8002758:	20000311 	.word	0x20000311
 800275c:	2000021c 	.word	0x2000021c

08002760 <TASK_ESPSend_PeriodicData>:
		}
	}
}

void TASK_ESPSend_PeriodicData(void *pvParameters)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

	while(1)
 8002768:	e7fe      	b.n	8002768 <TASK_ESPSend_PeriodicData+0x8>
	...

0800276c <TASK_ESP_SendStatus>:



}
void TASK_ESP_SendStatus (void *pvParameters)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af02      	add	r7, sp, #8
 8002772:	6078      	str	r0, [r7, #4]
	uint32_t Local_Notification_Value;

	BaseType_t Notify_Status;
	ESP_TX_Buffer_Status[0] = '%';
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <TASK_ESP_SendStatus+0x44>)
 8002776:	2225      	movs	r2, #37	; 0x25
 8002778:	701a      	strb	r2, [r3, #0]
	ESP_TX_Buffer_Status[3] = '$';
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <TASK_ESP_SendStatus+0x44>)
 800277c:	2224      	movs	r2, #36	; 0x24
 800277e:	70da      	strb	r2, [r3, #3]
	while(1)
	{

		/*Waiting to be notified from the TASK_LightSensor */
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,0xffffffff,&Local_Notification_Value,portMAX_DELAY);
 8002780:	f107 0308 	add.w	r3, r7, #8
 8002784:	f04f 32ff 	mov.w	r2, #4294967295
 8002788:	9200      	str	r2, [sp, #0]
 800278a:	f04f 32ff 	mov.w	r2, #4294967295
 800278e:	2100      	movs	r1, #0
 8002790:	2000      	movs	r0, #0
 8002792:	f007 f9f1 	bl	8009b78 <xTaskGenericNotifyWait>
 8002796:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE  )
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d1f0      	bne.n	8002780 <TASK_ESP_SendStatus+0x14>
		{

			// Read data from Light_Sensor_Task
			switch (Local_Notification_Value)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d1ed      	bne.n	8002780 <TASK_ESP_SendStatus+0x14>
			{
			case Notify_TASK_ESPSend_HighLight:

				ESP_TX_Buffer_Status[1] = Light_Sensor_Status;
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <TASK_ESP_SendStatus+0x48>)
 80027a6:	781a      	ldrb	r2, [r3, #0]
 80027a8:	4b01      	ldr	r3, [pc, #4]	; (80027b0 <TASK_ESP_SendStatus+0x44>)
 80027aa:	705a      	strb	r2, [r3, #1]

				break;
 80027ac:	bf00      	nop
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,0xffffffff,&Local_Notification_Value,portMAX_DELAY);
 80027ae:	e7e7      	b.n	8002780 <TASK_ESP_SendStatus+0x14>
 80027b0:	20000314 	.word	0x20000314
 80027b4:	20000311 	.word	0x20000311

080027b8 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
	/*Making the pointers points to the objects of the rx_buffer & tx_buffer instances*/
  _rx_buffer = &rx_buffer;
 80027bc:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <Ringbuf_init+0x3c>)
 80027be:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <Ringbuf_init+0x40>)
 80027c0:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <Ringbuf_init+0x44>)
 80027c4:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <Ringbuf_init+0x48>)
 80027c6:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <Ringbuf_init+0x4c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <Ringbuf_init+0x4c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <Ringbuf_init+0x4c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <Ringbuf_init+0x4c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0220 	orr.w	r2, r2, #32
 80027e6:	60da      	str	r2, [r3, #12]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	2000072c 	.word	0x2000072c
 80027f8:	2000031c 	.word	0x2000031c
 80027fc:	20000730 	.word	0x20000730
 8002800:	20000524 	.word	0x20000524
 8002804:	20000994 	.word	0x20000994

08002808 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	71fb      	strb	r3, [r7, #7]
	 * increments by 1 for future storing, it doesnt coincide with the tail
	 * the % UART_BUFFER_SIZE checking if the index of the next storing procedure
	 * is bigger than the buffer size(ex this iteration stores in 512 byte and the next one
	 * will be in the 513 so i should reset the (i) to zero to repeat again)*/

  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800281a:	3301      	adds	r3, #1
 800281c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002820:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	429a      	cmp	r2, r3
 800282c:	d009      	beq.n	8002842 <store_char+0x3a>
  {
	  /*Storing the charachter in the recent head pointed location*/
    buffer->buffer[buffer->head] = c;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	79f9      	ldrb	r1, [r7, #7]
 8002838:	54d1      	strb	r1, [r2, r3]

    /*After storing the character, incrementing the head for the next storing */
    buffer->head = i;
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <Uart_read+0x54>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <Uart_read+0x54>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002866:	429a      	cmp	r2, r3
 8002868:	d102      	bne.n	8002870 <Uart_read+0x20>
  {
    return -1;
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	e013      	b.n	8002898 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <Uart_read+0x54>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <Uart_read+0x54>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800287c:	5cd3      	ldrb	r3, [r2, r3]
 800287e:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <Uart_read+0x54>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <Uart_read+0x54>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002892:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8002896:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	2000072c 	.word	0x2000072c

080028a8 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80028ac:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <IsDataAvailable+0x30>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <IsDataAvailable+0x30>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028be:	b29b      	uxth	r3, r3
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	2000072c 	.word	0x2000072c

080028dc <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <Uart_peek+0x38>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <Uart_peek+0x38>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d102      	bne.n	80028fa <Uart_peek+0x1e>
  {
    return -1;
 80028f4:	f04f 33ff 	mov.w	r3, #4294967295
 80028f8:	e006      	b.n	8002908 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <Uart_peek+0x38>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <Uart_peek+0x38>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002906:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	2000072c 	.word	0x2000072c

08002918 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fd fd12 	bl	8000350 <strlen>
 800292c:	4603      	mov	r3, r0
 800292e:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002934:	e01e      	b.n	8002974 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8002936:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <Copy_upto+0xf8>)
 8002938:	6819      	ldr	r1, [r3, #0]
 800293a:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <Copy_upto+0xf8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	6838      	ldr	r0, [r7, #0]
 8002946:	4403      	add	r3, r0
 8002948:	5c8a      	ldrb	r2, [r1, r2]
 800294a:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800294c:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <Copy_upto+0xf8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <Copy_upto+0xf8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800295e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	3301      	adds	r3, #1
 8002966:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002968:	bf00      	nop
 800296a:	f7ff ff9d 	bl	80028a8 <IsDataAvailable>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0fa      	beq.n	800296a <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8002974:	f7ff ffb2 	bl	80028dc <Uart_peek>
 8002978:	4601      	mov	r1, r0
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	4299      	cmp	r1, r3
 8002984:	d1d7      	bne.n	8002936 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8002986:	e027      	b.n	80029d8 <Copy_upto+0xc0>
	{
		so_far++;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	3301      	adds	r3, #1
 800298c:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 800298e:	f7ff ff5f 	bl	8002850 <Uart_read>
 8002992:	4601      	mov	r1, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	613a      	str	r2, [r7, #16]
 800299a:	461a      	mov	r2, r3
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	b2ca      	uxtb	r2, r1
 80029a2:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d101      	bne.n	80029b0 <Copy_upto+0x98>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e02a      	b.n	8002a06 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 80029b0:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <Copy_upto+0xfc>)
 80029b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80029b6:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80029b8:	bf00      	nop
 80029ba:	f7ff ff75 	bl	80028a8 <IsDataAvailable>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d103      	bne.n	80029cc <Copy_upto+0xb4>
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <Copy_upto+0xfc>)
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f6      	bne.n	80029ba <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <Copy_upto+0xfc>)
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <Copy_upto+0xc0>
 80029d4:	2300      	movs	r3, #0
 80029d6:	e016      	b.n	8002a06 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 80029d8:	f7ff ff80 	bl	80028dc <Uart_peek>
 80029dc:	4601      	mov	r1, r0
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	4299      	cmp	r1, r3
 80029e8:	d0ce      	beq.n	8002988 <Copy_upto+0x70>
	}

	if (so_far != len)
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d002      	beq.n	80029f8 <Copy_upto+0xe0>
	{
		so_far = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
		goto again;
 80029f6:	e79d      	b.n	8002934 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d101      	bne.n	8002a04 <Copy_upto+0xec>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <Copy_upto+0xee>
	else return 0;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000072c 	.word	0x2000072c
 8002a14:	20000318 	.word	0x20000318

08002a18 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7fd fc93 	bl	8000350 <strlen>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <Wait_for+0x108>)
 8002a30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a34:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8002a36:	bf00      	nop
 8002a38:	f7ff ff36 	bl	80028a8 <IsDataAvailable>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d103      	bne.n	8002a4a <Wait_for+0x32>
 8002a42:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <Wait_for+0x108>)
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f6      	bne.n	8002a38 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8002a4a:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <Wait_for+0x108>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d119      	bne.n	8002a86 <Wait_for+0x6e>
 8002a52:	2300      	movs	r3, #0
 8002a54:	e060      	b.n	8002b18 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002a56:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <Wait_for+0x10c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a5e:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <Wait_for+0x10c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d00b      	beq.n	8002a82 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002a6a:	4b2e      	ldr	r3, [pc, #184]	; (8002b24 <Wait_for+0x10c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <Wait_for+0x10c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a80:	e001      	b.n	8002a86 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e048      	b.n	8002b18 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002a86:	f7ff ff29 	bl	80028dc <Uart_peek>
 8002a8a:	4601      	mov	r1, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4299      	cmp	r1, r3
 8002a96:	d1de      	bne.n	8002a56 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002a98:	e027      	b.n	8002aea <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002aa0:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <Wait_for+0x10c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <Wait_for+0x10c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ab2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d101      	bne.n	8002ac2 <Wait_for+0xaa>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e02a      	b.n	8002b18 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <Wait_for+0x108>)
 8002ac4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ac8:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002aca:	bf00      	nop
 8002acc:	f7ff feec 	bl	80028a8 <IsDataAvailable>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d103      	bne.n	8002ade <Wait_for+0xc6>
 8002ad6:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <Wait_for+0x108>)
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f6      	bne.n	8002acc <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <Wait_for+0x108>)
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <Wait_for+0xd2>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e016      	b.n	8002b18 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002aea:	f7ff fef7 	bl	80028dc <Uart_peek>
 8002aee:	4601      	mov	r1, r0
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4299      	cmp	r1, r3
 8002afa:	d0ce      	beq.n	8002a9a <Wait_for+0x82>
	}

	if (so_far != len)
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d002      	beq.n	8002b0a <Wait_for+0xf2>
	{
		so_far = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
		goto again;
 8002b08:	e791      	b.n	8002a2e <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d101      	bne.n	8002b16 <Wait_for+0xfe>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <Wait_for+0x100>
	else return 0;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000318 	.word	0x20000318
 8002b24:	2000072c 	.word	0x2000072c

08002b28 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d013      	beq.n	8002b72 <Uart_isr+0x4a>
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00e      	beq.n	8002b72 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <Uart_isr+0xb4>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fe4c 	bl	8002808 <store_char>
        return;
 8002b70:	e031      	b.n	8002bd6 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d02c      	beq.n	8002bd6 <Uart_isr+0xae>
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d027      	beq.n	8002bd6 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <Uart_isr+0xb8>)
 8002b88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <Uart_isr+0xb8>)
 8002b8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d108      	bne.n	8002ba8 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba4:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8002ba6:	e015      	b.n	8002bd4 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <Uart_isr+0xb8>)
 8002baa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bae:	4a0c      	ldr	r2, [pc, #48]	; (8002be0 <Uart_isr+0xb8>)
 8002bb0:	5cd3      	ldrb	r3, [r2, r3]
 8002bb2:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <Uart_isr+0xb8>)
 8002bb6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc0:	4a07      	ldr	r2, [pc, #28]	; (8002be0 <Uart_isr+0xb8>)
 8002bc2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	7bba      	ldrb	r2, [r7, #14]
 8002bd2:	605a      	str	r2, [r3, #4]
    	return;
 8002bd4:	bf00      	nop
    }
}
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	2000072c 	.word	0x2000072c
 8002be0:	20000524 	.word	0x20000524

08002be4 <Calculate_Car_Speed>:
#include "calculateSpeed.h"

extern uint32_t edges_counter;

float Calculate_Car_Speed()
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
	float Local_uint16Speed;
	Local_uint16Speed = (edges_counter/50)/(2000.0*60);
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <Calculate_Car_Speed+0x48>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a10      	ldr	r2, [pc, #64]	; (8002c30 <Calculate_Car_Speed+0x4c>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fcf4 	bl	80005e4 <__aeabi_ui2d>
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <Calculate_Car_Speed+0x50>)
 8002c02:	f7fd fe93 	bl	800092c <__aeabi_ddiv>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f7fe f85b 	bl	8000cc8 <__aeabi_d2f>
 8002c12:	4603      	mov	r3, r0
 8002c14:	607b      	str	r3, [r7, #4]
	edges_counter=0;
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <Calculate_Car_Speed+0x48>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
	return Local_uint16Speed;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	ee07 3a90 	vmov	s15, r3
}
 8002c22:	eeb0 0a67 	vmov.f32	s0, s15
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000224 	.word	0x20000224
 8002c30:	51eb851f 	.word	0x51eb851f
 8002c34:	40fd4c00 	.word	0x40fd4c00

08002c38 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b090      	sub	sp, #64	; 0x40
 8002c3c:	af02      	add	r7, sp, #8
	BaseType_t Status_ESP_Status;
	BaseType_t Status_LightSensor;

	/*Creating SW Timers handle and id*/
	TimerHandle_t Handle_Timer_LCDBuzzer;
	uint8_t ID_TImer_LCDBuzzer = 3;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	70fb      	strb	r3, [r7, #3]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002c42:	f001 f97f 	bl	8003f44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002c46:	f000 f901 	bl	8002e4c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002c4a:	f000 fbf5 	bl	8003438 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002c4e:	f000 f969 	bl	8002f24 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8002c52:	f000 fb73 	bl	800333c <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8002c56:	f000 fb9b 	bl	8003390 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8002c5a:	f000 f9ed 	bl	8003038 <MX_TIM2_Init>
	MX_I2C2_Init();
 8002c5e:	f000 f98f 	bl	8002f80 <MX_I2C2_Init>
	MX_I2C3_Init();
 8002c62:	f000 f9bb 	bl	8002fdc <MX_I2C3_Init>
	MX_TIM3_Init();
 8002c66:	f000 fa4b 	bl	8003100 <MX_TIM3_Init>
	MX_UART5_Init();
 8002c6a:	f000 fb3d 	bl	80032e8 <MX_UART5_Init>
	MX_TIM6_Init();
 8002c6e:	f000 fac1 	bl	80031f4 <MX_TIM6_Init>
	MX_TIM12_Init();
 8002c72:	f000 faf5 	bl	8003260 <MX_TIM12_Init>
	MX_USART6_UART_Init();
 8002c76:	f000 fbb5 	bl	80033e4 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */

	/********************************Hardware_Initializing*********************************************/
	GPS_voidInit(); //Note that LCD Init is included in this API
 8002c7a:	f7fe fc51 	bl	8001520 <GPS_voidInit>
	LightSensor_voidInit();
 8002c7e:	f7fe fefe 	bl	8001a7e <LightSensor_voidInit>

	/********************************Interrupts_Starting***********************************************/
	HAL_UART_Receive_IT(&huart3,&received_char , 1);
 8002c82:	2201      	movs	r2, #1
 8002c84:	495a      	ldr	r1, [pc, #360]	; (8002df0 <main+0x1b8>)
 8002c86:	485b      	ldr	r0, [pc, #364]	; (8002df4 <main+0x1bc>)
 8002c88:	f004 fd29 	bl	80076de <HAL_UART_Receive_IT>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8002c8c:	4b5a      	ldr	r3, [pc, #360]	; (8002df8 <main+0x1c0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <main+0x1c0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4856      	ldr	r0, [pc, #344]	; (8002df8 <main+0x1c0>)
 8002ca0:	f003 fe5e 	bl	8006960 <HAL_TIM_IC_Start_IT>
	//
	//	SEGGER_SYSVIEW_Start();
	//>>>>>>> Stashed change

	/************************************SW_Timers-Creation********************************************/
	Handle_Timer_LCDBuzzer= xTimerCreate("Timer_LCDBuzzer", pdMS_TO_TICKS(5000), pdFALSE, &ID_TImer_LCDBuzzer, CallBack_TimerLCDBuzzer);
 8002ca4:	1cfb      	adds	r3, r7, #3
 8002ca6:	4a55      	ldr	r2, [pc, #340]	; (8002dfc <main+0x1c4>)
 8002ca8:	9200      	str	r2, [sp, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f241 3188 	movw	r1, #5000	; 0x1388
 8002cb0:	4853      	ldr	r0, [pc, #332]	; (8002e00 <main+0x1c8>)
 8002cb2:	f007 fb3d 	bl	800a330 <xTimerCreate>
 8002cb6:	6378      	str	r0, [r7, #52]	; 0x34

	/************************************TASKS_Creation************************************************/
	Status_GPS = xTaskCreate(TASK_GPS, "GPS", 150, NULL, Priority_TASK_GPS, &Handle_GPS);
 8002cb8:	4b52      	ldr	r3, [pc, #328]	; (8002e04 <main+0x1cc>)
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	2296      	movs	r2, #150	; 0x96
 8002cc4:	4950      	ldr	r1, [pc, #320]	; (8002e08 <main+0x1d0>)
 8002cc6:	4851      	ldr	r0, [pc, #324]	; (8002e0c <main+0x1d4>)
 8002cc8:	f005 fff4 	bl	8008cb4 <xTaskCreate>
 8002ccc:	6338      	str	r0, [r7, #48]	; 0x30

	configASSERT(Status_GPS==pdPASS);
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d00a      	beq.n	8002cea <main+0xb2>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <main+0xb0>

	Status_LCDBuzzer = xTaskCreate(TASK_LCDBuzzer, "LCDBuzzer", 200, NULL, Priority_TASK_LCDBuzzer, &Handle_LCDBuzzer);
 8002cea:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <main+0x1d8>)
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	2302      	movs	r3, #2
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	22c8      	movs	r2, #200	; 0xc8
 8002cf6:	4947      	ldr	r1, [pc, #284]	; (8002e14 <main+0x1dc>)
 8002cf8:	4847      	ldr	r0, [pc, #284]	; (8002e18 <main+0x1e0>)
 8002cfa:	f005 ffdb 	bl	8008cb4 <xTaskCreate>
 8002cfe:	62f8      	str	r0, [r7, #44]	; 0x2c

	configASSERT(Status_LCDBuzzer==pdPASS);
 8002d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d00a      	beq.n	8002d1c <main+0xe4>
        __asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	617b      	str	r3, [r7, #20]
    }
 8002d18:	bf00      	nop
 8002d1a:	e7fe      	b.n	8002d1a <main+0xe2>

	Status_CarControl = xTaskCreate(TASK_CarControl, "CarControl", 200, NULL, Priority_TASK_CarControl, &Handle_CarControl);
 8002d1c:	4b3f      	ldr	r3, [pc, #252]	; (8002e1c <main+0x1e4>)
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	2302      	movs	r3, #2
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	2300      	movs	r3, #0
 8002d26:	22c8      	movs	r2, #200	; 0xc8
 8002d28:	493d      	ldr	r1, [pc, #244]	; (8002e20 <main+0x1e8>)
 8002d2a:	483e      	ldr	r0, [pc, #248]	; (8002e24 <main+0x1ec>)
 8002d2c:	f005 ffc2 	bl	8008cb4 <xTaskCreate>
 8002d30:	62b8      	str	r0, [r7, #40]	; 0x28

	configASSERT(Status_CarControl==pdPASS);
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d00a      	beq.n	8002d4e <main+0x116>
        __asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	613b      	str	r3, [r7, #16]
    }
 8002d4a:	bf00      	nop
 8002d4c:	e7fe      	b.n	8002d4c <main+0x114>

	Status_ESP_Periodic = xTaskCreate(TASK_ESPSend_PeriodicData, "ESP_Periodic", 200, NULL, Priority_TASK_ESP_Periodic, &Handle_ESP_Periodic);
 8002d4e:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <main+0x1f0>)
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	2302      	movs	r3, #2
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2300      	movs	r3, #0
 8002d58:	22c8      	movs	r2, #200	; 0xc8
 8002d5a:	4934      	ldr	r1, [pc, #208]	; (8002e2c <main+0x1f4>)
 8002d5c:	4834      	ldr	r0, [pc, #208]	; (8002e30 <main+0x1f8>)
 8002d5e:	f005 ffa9 	bl	8008cb4 <xTaskCreate>
 8002d62:	6278      	str	r0, [r7, #36]	; 0x24

	configASSERT(Status_ESP_Periodic==pdPASS);
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d00a      	beq.n	8002d80 <main+0x148>
        __asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	60fb      	str	r3, [r7, #12]
    }
 8002d7c:	bf00      	nop
 8002d7e:	e7fe      	b.n	8002d7e <main+0x146>

	Status_ESP_Status = xTaskCreate(TASK_ESP_SendStatus, "ESP_Status", 200, NULL, Priority_TASK_ESP_Status, &Handle_ESP_Status);
 8002d80:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <main+0x1fc>)
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	2301      	movs	r3, #1
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	22c8      	movs	r2, #200	; 0xc8
 8002d8c:	492a      	ldr	r1, [pc, #168]	; (8002e38 <main+0x200>)
 8002d8e:	482b      	ldr	r0, [pc, #172]	; (8002e3c <main+0x204>)
 8002d90:	f005 ff90 	bl	8008cb4 <xTaskCreate>
 8002d94:	6238      	str	r0, [r7, #32]

	configASSERT(Status_ESP_Status==pdPASS);
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d00a      	beq.n	8002db2 <main+0x17a>
        __asm volatile
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	60bb      	str	r3, [r7, #8]
    }
 8002dae:	bf00      	nop
 8002db0:	e7fe      	b.n	8002db0 <main+0x178>

	Status_LightSensor = xTaskCreate(TASK_LightSensor, "LightSensor", 200, NULL, Priority_TASK_LightSensor, &Handle_LightSensor);
 8002db2:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <main+0x208>)
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	2302      	movs	r3, #2
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	22c8      	movs	r2, #200	; 0xc8
 8002dbe:	4921      	ldr	r1, [pc, #132]	; (8002e44 <main+0x20c>)
 8002dc0:	4821      	ldr	r0, [pc, #132]	; (8002e48 <main+0x210>)
 8002dc2:	f005 ff77 	bl	8008cb4 <xTaskCreate>
 8002dc6:	61f8      	str	r0, [r7, #28]

	configASSERT(Status_LightSensor==pdPASS);
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d00a      	beq.n	8002de4 <main+0x1ac>
        __asm volatile
 8002dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	607b      	str	r3, [r7, #4]
    }
 8002de0:	bf00      	nop
 8002de2:	e7fe      	b.n	8002de2 <main+0x1aa>


	/**********************************Schedular_Starting********************************************/
	vTaskStartScheduler();
 8002de4:	f006 f926 	bl	8009034 <vTaskStartScheduler>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		Buzzer_voidHighSound();
 8002de8:	f7fe f93c 	bl	8001064 <Buzzer_voidHighSound>
 8002dec:	e7fc      	b.n	8002de8 <main+0x1b0>
 8002dee:	bf00      	nop
 8002df0:	20000a60 	.word	0x20000a60
 8002df4:	200009d8 	.word	0x200009d8
 8002df8:	20000830 	.word	0x20000830
 8002dfc:	08001131 	.word	0x08001131
 8002e00:	080104b4 	.word	0x080104b4
 8002e04:	20000214 	.word	0x20000214
 8002e08:	080104c4 	.word	0x080104c4
 8002e0c:	08002535 	.word	0x08002535
 8002e10:	2000020c 	.word	0x2000020c
 8002e14:	080104c8 	.word	0x080104c8
 8002e18:	0800258d 	.word	0x0800258d
 8002e1c:	20000210 	.word	0x20000210
 8002e20:	080104d4 	.word	0x080104d4
 8002e24:	080025c1 	.word	0x080025c1
 8002e28:	20000218 	.word	0x20000218
 8002e2c:	080104e0 	.word	0x080104e0
 8002e30:	08002761 	.word	0x08002761
 8002e34:	2000021c 	.word	0x2000021c
 8002e38:	080104f0 	.word	0x080104f0
 8002e3c:	0800276d 	.word	0x0800276d
 8002e40:	20000220 	.word	0x20000220
 8002e44:	080104fc 	.word	0x080104fc
 8002e48:	08002711 	.word	0x08002711

08002e4c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b094      	sub	sp, #80	; 0x50
 8002e50:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e52:	f107 031c 	add.w	r3, r7, #28
 8002e56:	2234      	movs	r2, #52	; 0x34
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f00a fbd1 	bl	800d602 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e60:	f107 0308 	add.w	r3, r7, #8
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002e70:	2300      	movs	r3, #0
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	4b29      	ldr	r3, [pc, #164]	; (8002f1c <SystemClock_Config+0xd0>)
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	4a28      	ldr	r2, [pc, #160]	; (8002f1c <SystemClock_Config+0xd0>)
 8002e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e80:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <SystemClock_Config+0xd0>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <SystemClock_Config+0xd4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e98:	4a21      	ldr	r2, [pc, #132]	; (8002f20 <SystemClock_Config+0xd4>)
 8002e9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <SystemClock_Config+0xd4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002eac:	2302      	movs	r3, #2
 8002eae:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 8002ec4:	2340      	movs	r3, #64	; 0x40
 8002ec6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed4:	f107 031c 	add.w	r3, r7, #28
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f003 f80d 	bl	8005ef8 <HAL_RCC_OscConfig>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8002ee4:	f000 fb32 	bl	800354c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ee8:	230f      	movs	r3, #15
 8002eea:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eec:	2302      	movs	r3, #2
 8002eee:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002efc:	f107 0308 	add.w	r3, r7, #8
 8002f00:	2101      	movs	r1, #1
 8002f02:	4618      	mov	r0, r3
 8002f04:	f002 fd02 	bl	800590c <HAL_RCC_ClockConfig>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8002f0e:	f000 fb1d 	bl	800354c <Error_Handler>
	}
}
 8002f12:	bf00      	nop
 8002f14:	3750      	adds	r7, #80	; 0x50
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40007000 	.word	0x40007000

08002f24 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <MX_I2C1_Init+0x54>)
 8002f2a:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <MX_I2C1_Init+0x58>)
 8002f2c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 1000;
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <MX_I2C1_Init+0x54>)
 8002f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f34:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <MX_I2C1_Init+0x54>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <MX_I2C1_Init+0x54>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f42:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <MX_I2C1_Init+0x54>)
 8002f44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f48:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <MX_I2C1_Init+0x54>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <MX_I2C1_Init+0x54>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <MX_I2C1_Init+0x54>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <MX_I2C1_Init+0x54>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f62:	4805      	ldr	r0, [pc, #20]	; (8002f78 <MX_I2C1_Init+0x54>)
 8002f64:	f001 fb76 	bl	8004654 <HAL_I2C_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_I2C1_Init+0x4e>
	{
		Error_Handler();
 8002f6e:	f000 faed 	bl	800354c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000734 	.word	0x20000734
 8002f7c:	40005400 	.word	0x40005400

08002f80 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <MX_I2C2_Init+0x54>)
 8002f86:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <MX_I2C2_Init+0x58>)
 8002f88:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 1000;
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <MX_I2C2_Init+0x54>)
 8002f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f90:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <MX_I2C2_Init+0x54>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 120;
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <MX_I2C2_Init+0x54>)
 8002f9a:	2278      	movs	r2, #120	; 0x78
 8002f9c:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <MX_I2C2_Init+0x54>)
 8002fa0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fa4:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <MX_I2C2_Init+0x54>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <MX_I2C2_Init+0x54>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <MX_I2C2_Init+0x54>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <MX_I2C2_Init+0x54>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002fbe:	4805      	ldr	r0, [pc, #20]	; (8002fd4 <MX_I2C2_Init+0x54>)
 8002fc0:	f001 fb48 	bl	8004654 <HAL_I2C_Init>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_I2C2_Init+0x4e>
	{
		Error_Handler();
 8002fca:	f000 fabf 	bl	800354c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000788 	.word	0x20000788
 8002fd8:	40005800 	.word	0x40005800

08002fdc <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <MX_I2C3_Init+0x50>)
 8002fe2:	4a13      	ldr	r2, [pc, #76]	; (8003030 <MX_I2C3_Init+0x54>)
 8002fe4:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <MX_I2C3_Init+0x50>)
 8002fe8:	4a12      	ldr	r2, [pc, #72]	; (8003034 <MX_I2C3_Init+0x58>)
 8002fea:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <MX_I2C3_Init+0x50>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <MX_I2C3_Init+0x50>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <MX_I2C3_Init+0x50>)
 8002ffa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ffe:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <MX_I2C3_Init+0x50>)
 8003002:	2200      	movs	r2, #0
 8003004:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <MX_I2C3_Init+0x50>)
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <MX_I2C3_Init+0x50>)
 800300e:	2200      	movs	r2, #0
 8003010:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <MX_I2C3_Init+0x50>)
 8003014:	2200      	movs	r2, #0
 8003016:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003018:	4804      	ldr	r0, [pc, #16]	; (800302c <MX_I2C3_Init+0x50>)
 800301a:	f001 fb1b 	bl	8004654 <HAL_I2C_Init>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 8003024:	f000 fa92 	bl	800354c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8003028:	bf00      	nop
 800302a:	bd80      	pop	{r7, pc}
 800302c:	200007dc 	.word	0x200007dc
 8003030:	40005c00 	.word	0x40005c00
 8003034:	000186a0 	.word	0x000186a0

08003038 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800303e:	f107 0320 	add.w	r3, r7, #32
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003048:	1d3b      	adds	r3, r7, #4
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	605a      	str	r2, [r3, #4]
 8003050:	609a      	str	r2, [r3, #8]
 8003052:	60da      	str	r2, [r3, #12]
 8003054:	611a      	str	r2, [r3, #16]
 8003056:	615a      	str	r2, [r3, #20]
 8003058:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800305a:	4b28      	ldr	r3, [pc, #160]	; (80030fc <MX_TIM2_Init+0xc4>)
 800305c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003060:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15999;
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <MX_TIM2_Init+0xc4>)
 8003064:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8003068:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306a:	4b24      	ldr	r3, [pc, #144]	; (80030fc <MX_TIM2_Init+0xc4>)
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 12000;
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <MX_TIM2_Init+0xc4>)
 8003072:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8003076:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003078:	4b20      	ldr	r3, [pc, #128]	; (80030fc <MX_TIM2_Init+0xc4>)
 800307a:	2200      	movs	r2, #0
 800307c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800307e:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <MX_TIM2_Init+0xc4>)
 8003080:	2200      	movs	r2, #0
 8003082:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003084:	481d      	ldr	r0, [pc, #116]	; (80030fc <MX_TIM2_Init+0xc4>)
 8003086:	f003 fa95 	bl	80065b4 <HAL_TIM_OC_Init>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8003090:	f000 fa5c 	bl	800354c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003094:	2300      	movs	r3, #0
 8003096:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003098:	2300      	movs	r3, #0
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800309c:	f107 0320 	add.w	r3, r7, #32
 80030a0:	4619      	mov	r1, r3
 80030a2:	4816      	ldr	r0, [pc, #88]	; (80030fc <MX_TIM2_Init+0xc4>)
 80030a4:	f004 fa3e 	bl	8007524 <HAL_TIMEx_MasterConfigSynchronization>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 80030ae:	f000 fa4d 	bl	800354c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030c2:	1d3b      	adds	r3, r7, #4
 80030c4:	2200      	movs	r2, #0
 80030c6:	4619      	mov	r1, r3
 80030c8:	480c      	ldr	r0, [pc, #48]	; (80030fc <MX_TIM2_Init+0xc4>)
 80030ca:	f003 fe79 	bl	8006dc0 <HAL_TIM_OC_ConfigChannel>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_TIM2_Init+0xa0>
	{
		Error_Handler();
 80030d4:	f000 fa3a 	bl	800354c <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	2204      	movs	r2, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4807      	ldr	r0, [pc, #28]	; (80030fc <MX_TIM2_Init+0xc4>)
 80030e0:	f003 fe6e 	bl	8006dc0 <HAL_TIM_OC_ConfigChannel>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_TIM2_Init+0xb6>
	{
		Error_Handler();
 80030ea:	f000 fa2f 	bl	800354c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80030ee:	4803      	ldr	r0, [pc, #12]	; (80030fc <MX_TIM2_Init+0xc4>)
 80030f0:	f000 fbac 	bl	800384c <HAL_TIM_MspPostInit>

}
 80030f4:	bf00      	nop
 80030f6:	3728      	adds	r7, #40	; 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000830 	.word	0x20000830

08003100 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003106:	f107 0320 	add.w	r3, r7, #32
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003110:	1d3b      	adds	r3, r7, #4
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	60da      	str	r2, [r3, #12]
 800311c:	611a      	str	r2, [r3, #16]
 800311e:	615a      	str	r2, [r3, #20]
 8003120:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003122:	4b32      	ldr	r3, [pc, #200]	; (80031ec <MX_TIM3_Init+0xec>)
 8003124:	4a32      	ldr	r2, [pc, #200]	; (80031f0 <MX_TIM3_Init+0xf0>)
 8003126:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 320-1;
 8003128:	4b30      	ldr	r3, [pc, #192]	; (80031ec <MX_TIM3_Init+0xec>)
 800312a:	f240 123f 	movw	r2, #319	; 0x13f
 800312e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003130:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <MX_TIM3_Init+0xec>)
 8003132:	2200      	movs	r2, #0
 8003134:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 8003136:	4b2d      	ldr	r3, [pc, #180]	; (80031ec <MX_TIM3_Init+0xec>)
 8003138:	2263      	movs	r2, #99	; 0x63
 800313a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800313c:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <MX_TIM3_Init+0xec>)
 800313e:	2200      	movs	r2, #0
 8003140:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003142:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <MX_TIM3_Init+0xec>)
 8003144:	2200      	movs	r2, #0
 8003146:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003148:	4828      	ldr	r0, [pc, #160]	; (80031ec <MX_TIM3_Init+0xec>)
 800314a:	f003 fa82 	bl	8006652 <HAL_TIM_PWM_Init>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 8003154:	f000 f9fa 	bl	800354c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003158:	2300      	movs	r3, #0
 800315a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003160:	f107 0320 	add.w	r3, r7, #32
 8003164:	4619      	mov	r1, r3
 8003166:	4821      	ldr	r0, [pc, #132]	; (80031ec <MX_TIM3_Init+0xec>)
 8003168:	f004 f9dc 	bl	8007524 <HAL_TIMEx_MasterConfigSynchronization>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 8003172:	f000 f9eb 	bl	800354c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003176:	2360      	movs	r3, #96	; 0x60
 8003178:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	2200      	movs	r2, #0
 800318a:	4619      	mov	r1, r3
 800318c:	4817      	ldr	r0, [pc, #92]	; (80031ec <MX_TIM3_Init+0xec>)
 800318e:	f003 fe73 	bl	8006e78 <HAL_TIM_PWM_ConfigChannel>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 8003198:	f000 f9d8 	bl	800354c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	2204      	movs	r2, #4
 80031a0:	4619      	mov	r1, r3
 80031a2:	4812      	ldr	r0, [pc, #72]	; (80031ec <MX_TIM3_Init+0xec>)
 80031a4:	f003 fe68 	bl	8006e78 <HAL_TIM_PWM_ConfigChannel>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 80031ae:	f000 f9cd 	bl	800354c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	2208      	movs	r2, #8
 80031b6:	4619      	mov	r1, r3
 80031b8:	480c      	ldr	r0, [pc, #48]	; (80031ec <MX_TIM3_Init+0xec>)
 80031ba:	f003 fe5d 	bl	8006e78 <HAL_TIM_PWM_ConfigChannel>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_TIM3_Init+0xc8>
	{
		Error_Handler();
 80031c4:	f000 f9c2 	bl	800354c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031c8:	1d3b      	adds	r3, r7, #4
 80031ca:	220c      	movs	r2, #12
 80031cc:	4619      	mov	r1, r3
 80031ce:	4807      	ldr	r0, [pc, #28]	; (80031ec <MX_TIM3_Init+0xec>)
 80031d0:	f003 fe52 	bl	8006e78 <HAL_TIM_PWM_ConfigChannel>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <MX_TIM3_Init+0xde>
	{
		Error_Handler();
 80031da:	f000 f9b7 	bl	800354c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80031de:	4803      	ldr	r0, [pc, #12]	; (80031ec <MX_TIM3_Init+0xec>)
 80031e0:	f000 fb34 	bl	800384c <HAL_TIM_MspPostInit>

}
 80031e4:	bf00      	nop
 80031e6:	3728      	adds	r7, #40	; 0x28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000878 	.word	0x20000878
 80031f0:	40000400 	.word	0x40000400

080031f4 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031fa:	463b      	mov	r3, r7
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <MX_TIM6_Init+0x64>)
 8003204:	4a15      	ldr	r2, [pc, #84]	; (800325c <MX_TIM6_Init+0x68>)
 8003206:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8003208:	4b13      	ldr	r3, [pc, #76]	; (8003258 <MX_TIM6_Init+0x64>)
 800320a:	2200      	movs	r2, #0
 800320c:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800320e:	4b12      	ldr	r3, [pc, #72]	; (8003258 <MX_TIM6_Init+0x64>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535;
 8003214:	4b10      	ldr	r3, [pc, #64]	; (8003258 <MX_TIM6_Init+0x64>)
 8003216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800321a:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <MX_TIM6_Init+0x64>)
 800321e:	2200      	movs	r2, #0
 8003220:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003222:	480d      	ldr	r0, [pc, #52]	; (8003258 <MX_TIM6_Init+0x64>)
 8003224:	f003 f906 	bl	8006434 <HAL_TIM_Base_Init>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 800322e:	f000 f98d 	bl	800354c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003232:	2300      	movs	r3, #0
 8003234:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003236:	2300      	movs	r3, #0
 8003238:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800323a:	463b      	mov	r3, r7
 800323c:	4619      	mov	r1, r3
 800323e:	4806      	ldr	r0, [pc, #24]	; (8003258 <MX_TIM6_Init+0x64>)
 8003240:	f004 f970 	bl	8007524 <HAL_TIMEx_MasterConfigSynchronization>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 800324a:	f000 f97f 	bl	800354c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200008c0 	.word	0x200008c0
 800325c:	40001000 	.word	0x40001000

08003260 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	611a      	str	r2, [r3, #16]
 8003274:	615a      	str	r2, [r3, #20]
 8003276:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <MX_TIM12_Init+0x80>)
 800327a:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <MX_TIM12_Init+0x84>)
 800327c:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 160-1;
 800327e:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <MX_TIM12_Init+0x80>)
 8003280:	229f      	movs	r2, #159	; 0x9f
 8003282:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003284:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <MX_TIM12_Init+0x80>)
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 100-1;
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <MX_TIM12_Init+0x80>)
 800328c:	2263      	movs	r2, #99	; 0x63
 800328e:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003290:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <MX_TIM12_Init+0x80>)
 8003292:	2200      	movs	r2, #0
 8003294:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <MX_TIM12_Init+0x80>)
 8003298:	2200      	movs	r2, #0
 800329a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800329c:	4810      	ldr	r0, [pc, #64]	; (80032e0 <MX_TIM12_Init+0x80>)
 800329e:	f003 f9d8 	bl	8006652 <HAL_TIM_PWM_Init>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <MX_TIM12_Init+0x4c>
	{
		Error_Handler();
 80032a8:	f000 f950 	bl	800354c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032ac:	2360      	movs	r3, #96	; 0x60
 80032ae:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	2200      	movs	r2, #0
 80032c0:	4619      	mov	r1, r3
 80032c2:	4807      	ldr	r0, [pc, #28]	; (80032e0 <MX_TIM12_Init+0x80>)
 80032c4:	f003 fdd8 	bl	8006e78 <HAL_TIM_PWM_ConfigChannel>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM12_Init+0x72>
	{
		Error_Handler();
 80032ce:	f000 f93d 	bl	800354c <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 80032d2:	4803      	ldr	r0, [pc, #12]	; (80032e0 <MX_TIM12_Init+0x80>)
 80032d4:	f000 faba 	bl	800384c <HAL_TIM_MspPostInit>

}
 80032d8:	bf00      	nop
 80032da:	3720      	adds	r7, #32
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000908 	.word	0x20000908
 80032e4:	40001800 	.word	0x40001800

080032e8 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <MX_UART5_Init+0x4c>)
 80032ee:	4a12      	ldr	r2, [pc, #72]	; (8003338 <MX_UART5_Init+0x50>)
 80032f0:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <MX_UART5_Init+0x4c>)
 80032f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032f8:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <MX_UART5_Init+0x4c>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <MX_UART5_Init+0x4c>)
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8003306:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <MX_UART5_Init+0x4c>)
 8003308:	2200      	movs	r2, #0
 800330a:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <MX_UART5_Init+0x4c>)
 800330e:	220c      	movs	r2, #12
 8003310:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <MX_UART5_Init+0x4c>)
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <MX_UART5_Init+0x4c>)
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 800331e:	4805      	ldr	r0, [pc, #20]	; (8003334 <MX_UART5_Init+0x4c>)
 8003320:	f004 f990 	bl	8007644 <HAL_UART_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_UART5_Init+0x46>
	{
		Error_Handler();
 800332a:	f000 f90f 	bl	800354c <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000950 	.word	0x20000950
 8003338:	40005000 	.word	0x40005000

0800333c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <MX_USART1_UART_Init+0x4c>)
 8003342:	4a12      	ldr	r2, [pc, #72]	; (800338c <MX_USART1_UART_Init+0x50>)
 8003344:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <MX_USART1_UART_Init+0x4c>)
 8003348:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800334c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800334e:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <MX_USART1_UART_Init+0x4c>)
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <MX_USART1_UART_Init+0x4c>)
 8003356:	2200      	movs	r2, #0
 8003358:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <MX_USART1_UART_Init+0x4c>)
 800335c:	2200      	movs	r2, #0
 800335e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003360:	4b09      	ldr	r3, [pc, #36]	; (8003388 <MX_USART1_UART_Init+0x4c>)
 8003362:	220c      	movs	r2, #12
 8003364:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003366:	4b08      	ldr	r3, [pc, #32]	; (8003388 <MX_USART1_UART_Init+0x4c>)
 8003368:	2200      	movs	r2, #0
 800336a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <MX_USART1_UART_Init+0x4c>)
 800336e:	2200      	movs	r2, #0
 8003370:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003372:	4805      	ldr	r0, [pc, #20]	; (8003388 <MX_USART1_UART_Init+0x4c>)
 8003374:	f004 f966 	bl	8007644 <HAL_UART_Init>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 800337e:	f000 f8e5 	bl	800354c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000994 	.word	0x20000994
 800338c:	40011000 	.word	0x40011000

08003390 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8003394:	4b11      	ldr	r3, [pc, #68]	; (80033dc <MX_USART3_UART_Init+0x4c>)
 8003396:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <MX_USART3_UART_Init+0x50>)
 8003398:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <MX_USART3_UART_Init+0x4c>)
 800339c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80033a0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033a2:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <MX_USART3_UART_Init+0x4c>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <MX_USART3_UART_Init+0x4c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <MX_USART3_UART_Init+0x4c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80033b4:	4b09      	ldr	r3, [pc, #36]	; (80033dc <MX_USART3_UART_Init+0x4c>)
 80033b6:	220c      	movs	r2, #12
 80033b8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <MX_USART3_UART_Init+0x4c>)
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <MX_USART3_UART_Init+0x4c>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80033c6:	4805      	ldr	r0, [pc, #20]	; (80033dc <MX_USART3_UART_Init+0x4c>)
 80033c8:	f004 f93c 	bl	8007644 <HAL_UART_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80033d2:	f000 f8bb 	bl	800354c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200009d8 	.word	0x200009d8
 80033e0:	40004800 	.word	0x40004800

080033e4 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <MX_USART6_UART_Init+0x4c>)
 80033ea:	4a12      	ldr	r2, [pc, #72]	; (8003434 <MX_USART6_UART_Init+0x50>)
 80033ec:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <MX_USART6_UART_Init+0x4c>)
 80033f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80033f4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80033f6:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <MX_USART6_UART_Init+0x4c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <MX_USART6_UART_Init+0x4c>)
 80033fe:	2200      	movs	r2, #0
 8003400:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <MX_USART6_UART_Init+0x4c>)
 8003404:	2200      	movs	r2, #0
 8003406:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <MX_USART6_UART_Init+0x4c>)
 800340a:	220c      	movs	r2, #12
 800340c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <MX_USART6_UART_Init+0x4c>)
 8003410:	2200      	movs	r2, #0
 8003412:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <MX_USART6_UART_Init+0x4c>)
 8003416:	2200      	movs	r2, #0
 8003418:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 800341a:	4805      	ldr	r0, [pc, #20]	; (8003430 <MX_USART6_UART_Init+0x4c>)
 800341c:	f004 f912 	bl	8007644 <HAL_UART_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 8003426:	f000 f891 	bl	800354c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000a1c 	.word	0x20000a1c
 8003434:	40011400 	.word	0x40011400

08003438 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343e:	f107 0314 	add.w	r3, r7, #20
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	60da      	str	r2, [r3, #12]
 800344c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	4b32      	ldr	r3, [pc, #200]	; (800351c <MX_GPIO_Init+0xe4>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a31      	ldr	r2, [pc, #196]	; (800351c <MX_GPIO_Init+0xe4>)
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b2f      	ldr	r3, [pc, #188]	; (800351c <MX_GPIO_Init+0xe4>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	4b2b      	ldr	r3, [pc, #172]	; (800351c <MX_GPIO_Init+0xe4>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4a2a      	ldr	r2, [pc, #168]	; (800351c <MX_GPIO_Init+0xe4>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
 800347a:	4b28      	ldr	r3, [pc, #160]	; (800351c <MX_GPIO_Init+0xe4>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	4b24      	ldr	r3, [pc, #144]	; (800351c <MX_GPIO_Init+0xe4>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a23      	ldr	r2, [pc, #140]	; (800351c <MX_GPIO_Init+0xe4>)
 8003490:	f043 0302 	orr.w	r3, r3, #2
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b21      	ldr	r3, [pc, #132]	; (800351c <MX_GPIO_Init+0xe4>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	4b1d      	ldr	r3, [pc, #116]	; (800351c <MX_GPIO_Init+0xe4>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a1c      	ldr	r2, [pc, #112]	; (800351c <MX_GPIO_Init+0xe4>)
 80034ac:	f043 0308 	orr.w	r3, r3, #8
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b1a      	ldr	r3, [pc, #104]	; (800351c <MX_GPIO_Init+0xe4>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	607b      	str	r3, [r7, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80034be:	2200      	movs	r2, #0
 80034c0:	f242 311c 	movw	r1, #8988	; 0x231c
 80034c4:	4816      	ldr	r0, [pc, #88]	; (8003520 <MX_GPIO_Init+0xe8>)
 80034c6:	f001 f8ab 	bl	8004620 <HAL_GPIO_WritePin>
			|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 80034ca:	2200      	movs	r2, #0
 80034cc:	f44f 7108 	mov.w	r1, #544	; 0x220
 80034d0:	4814      	ldr	r0, [pc, #80]	; (8003524 <MX_GPIO_Init+0xec>)
 80034d2:	f001 f8a5 	bl	8004620 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80034d6:	f242 331c 	movw	r3, #8988	; 0x231c
 80034da:	617b      	str	r3, [r7, #20]
			|GPIO_PIN_8|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034dc:	2301      	movs	r3, #1
 80034de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e4:	2300      	movs	r3, #0
 80034e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	4619      	mov	r1, r3
 80034ee:	480c      	ldr	r0, [pc, #48]	; (8003520 <MX_GPIO_Init+0xe8>)
 80034f0:	f000 ff02 	bl	80042f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 80034f4:	f44f 7308 	mov.w	r3, #544	; 0x220
 80034f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034fa:	2301      	movs	r3, #1
 80034fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003506:	f107 0314 	add.w	r3, r7, #20
 800350a:	4619      	mov	r1, r3
 800350c:	4805      	ldr	r0, [pc, #20]	; (8003524 <MX_GPIO_Init+0xec>)
 800350e:	f000 fef3 	bl	80042f8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003512:	bf00      	nop
 8003514:	3728      	adds	r7, #40	; 0x28
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	40020800 	.word	0x40020800
 8003524:	40020400 	.word	0x40020400

08003528 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a04      	ldr	r2, [pc, #16]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800353a:	f000 fd25 	bl	8003f88 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40001400 	.word	0x40001400

0800354c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003550:	b672      	cpsid	i
}
 8003552:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003554:	e7fe      	b.n	8003554 <Error_Handler+0x8>
	...

08003558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_MspInit+0x4c>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	4a0f      	ldr	r2, [pc, #60]	; (80035a4 <HAL_MspInit+0x4c>)
 8003568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800356c:	6453      	str	r3, [r2, #68]	; 0x44
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <HAL_MspInit+0x4c>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003576:	607b      	str	r3, [r7, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_MspInit+0x4c>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a08      	ldr	r2, [pc, #32]	; (80035a4 <HAL_MspInit+0x4c>)
 8003584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_MspInit+0x4c>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800

080035a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08e      	sub	sp, #56	; 0x38
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a5b      	ldr	r2, [pc, #364]	; (8003734 <HAL_I2C_MspInit+0x18c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d12c      	bne.n	8003624 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	623b      	str	r3, [r7, #32]
 80035ce:	4b5a      	ldr	r3, [pc, #360]	; (8003738 <HAL_I2C_MspInit+0x190>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a59      	ldr	r2, [pc, #356]	; (8003738 <HAL_I2C_MspInit+0x190>)
 80035d4:	f043 0302 	orr.w	r3, r3, #2
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b57      	ldr	r3, [pc, #348]	; (8003738 <HAL_I2C_MspInit+0x190>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	623b      	str	r3, [r7, #32]
 80035e4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035e6:	23c0      	movs	r3, #192	; 0xc0
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ea:	2312      	movs	r3, #18
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f2:	2303      	movs	r3, #3
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035f6:	2304      	movs	r3, #4
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035fe:	4619      	mov	r1, r3
 8003600:	484e      	ldr	r0, [pc, #312]	; (800373c <HAL_I2C_MspInit+0x194>)
 8003602:	f000 fe79 	bl	80042f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	4b4b      	ldr	r3, [pc, #300]	; (8003738 <HAL_I2C_MspInit+0x190>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	4a4a      	ldr	r2, [pc, #296]	; (8003738 <HAL_I2C_MspInit+0x190>)
 8003610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003614:	6413      	str	r3, [r2, #64]	; 0x40
 8003616:	4b48      	ldr	r3, [pc, #288]	; (8003738 <HAL_I2C_MspInit+0x190>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003622:	e082      	b.n	800372a <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a45      	ldr	r2, [pc, #276]	; (8003740 <HAL_I2C_MspInit+0x198>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d12d      	bne.n	800368a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	4b41      	ldr	r3, [pc, #260]	; (8003738 <HAL_I2C_MspInit+0x190>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4a40      	ldr	r2, [pc, #256]	; (8003738 <HAL_I2C_MspInit+0x190>)
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	6313      	str	r3, [r2, #48]	; 0x30
 800363e:	4b3e      	ldr	r3, [pc, #248]	; (8003738 <HAL_I2C_MspInit+0x190>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800364a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003650:	2312      	movs	r3, #18
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003658:	2303      	movs	r3, #3
 800365a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800365c:	2304      	movs	r3, #4
 800365e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003664:	4619      	mov	r1, r3
 8003666:	4835      	ldr	r0, [pc, #212]	; (800373c <HAL_I2C_MspInit+0x194>)
 8003668:	f000 fe46 	bl	80042f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	4b31      	ldr	r3, [pc, #196]	; (8003738 <HAL_I2C_MspInit+0x190>)
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	4a30      	ldr	r2, [pc, #192]	; (8003738 <HAL_I2C_MspInit+0x190>)
 8003676:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800367a:	6413      	str	r3, [r2, #64]	; 0x40
 800367c:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <HAL_I2C_MspInit+0x190>)
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	697b      	ldr	r3, [r7, #20]
}
 8003688:	e04f      	b.n	800372a <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2d      	ldr	r2, [pc, #180]	; (8003744 <HAL_I2C_MspInit+0x19c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d14a      	bne.n	800372a <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003694:	2300      	movs	r3, #0
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	4b27      	ldr	r3, [pc, #156]	; (8003738 <HAL_I2C_MspInit+0x190>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	4a26      	ldr	r2, [pc, #152]	; (8003738 <HAL_I2C_MspInit+0x190>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6313      	str	r3, [r2, #48]	; 0x30
 80036a4:	4b24      	ldr	r3, [pc, #144]	; (8003738 <HAL_I2C_MspInit+0x190>)
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_I2C_MspInit+0x190>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <HAL_I2C_MspInit+0x190>)
 80036ba:	f043 0302 	orr.w	r3, r3, #2
 80036be:	6313      	str	r3, [r2, #48]	; 0x30
 80036c0:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <HAL_I2C_MspInit+0x190>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036d2:	2312      	movs	r3, #18
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036da:	2303      	movs	r3, #3
 80036dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036de:	2304      	movs	r3, #4
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e6:	4619      	mov	r1, r3
 80036e8:	4817      	ldr	r0, [pc, #92]	; (8003748 <HAL_I2C_MspInit+0x1a0>)
 80036ea:	f000 fe05 	bl	80042f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80036ee:	2310      	movs	r3, #16
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036f2:	2312      	movs	r3, #18
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036fa:	2303      	movs	r3, #3
 80036fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036fe:	2304      	movs	r3, #4
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003706:	4619      	mov	r1, r3
 8003708:	480c      	ldr	r0, [pc, #48]	; (800373c <HAL_I2C_MspInit+0x194>)
 800370a:	f000 fdf5 	bl	80042f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_I2C_MspInit+0x190>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	4a08      	ldr	r2, [pc, #32]	; (8003738 <HAL_I2C_MspInit+0x190>)
 8003718:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800371c:	6413      	str	r3, [r2, #64]	; 0x40
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_I2C_MspInit+0x190>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
}
 800372a:	bf00      	nop
 800372c:	3738      	adds	r7, #56	; 0x38
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40005400 	.word	0x40005400
 8003738:	40023800 	.word	0x40023800
 800373c:	40020400 	.word	0x40020400
 8003740:	40005800 	.word	0x40005800
 8003744:	40005c00 	.word	0x40005c00
 8003748:	40020000 	.word	0x40020000

0800374c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375c:	d115      	bne.n	800378a <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_TIM_OC_MspInit+0x48>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <HAL_TIM_OC_MspInit+0x48>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	6413      	str	r3, [r2, #64]	; 0x40
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_TIM_OC_MspInit+0x48>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800377a:	2200      	movs	r2, #0
 800377c:	2100      	movs	r1, #0
 800377e:	201c      	movs	r0, #28
 8003780:	f000 fcfe 	bl	8004180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003784:	201c      	movs	r0, #28
 8003786:	f000 fd17 	bl	80041b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800

08003798 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a15      	ldr	r2, [pc, #84]	; (80037fc <HAL_TIM_PWM_MspInit+0x64>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10e      	bne.n	80037c8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	4b14      	ldr	r3, [pc, #80]	; (8003800 <HAL_TIM_PWM_MspInit+0x68>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a13      	ldr	r2, [pc, #76]	; (8003800 <HAL_TIM_PWM_MspInit+0x68>)
 80037b4:	f043 0302 	orr.w	r3, r3, #2
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ba:	4b11      	ldr	r3, [pc, #68]	; (8003800 <HAL_TIM_PWM_MspInit+0x68>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80037c6:	e012      	b.n	80037ee <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0d      	ldr	r2, [pc, #52]	; (8003804 <HAL_TIM_PWM_MspInit+0x6c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10d      	bne.n	80037ee <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <HAL_TIM_PWM_MspInit+0x68>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	4a09      	ldr	r2, [pc, #36]	; (8003800 <HAL_TIM_PWM_MspInit+0x68>)
 80037dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
 80037e2:	4b07      	ldr	r3, [pc, #28]	; (8003800 <HAL_TIM_PWM_MspInit+0x68>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40000400 	.word	0x40000400
 8003800:	40023800 	.word	0x40023800
 8003804:	40001800 	.word	0x40001800

08003808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a0b      	ldr	r2, [pc, #44]	; (8003844 <HAL_TIM_Base_MspInit+0x3c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d10d      	bne.n	8003836 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_TIM_Base_MspInit+0x40>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <HAL_TIM_Base_MspInit+0x40>)
 8003824:	f043 0310 	orr.w	r3, r3, #16
 8003828:	6413      	str	r3, [r2, #64]	; 0x40
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <HAL_TIM_Base_MspInit+0x40>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40001000 	.word	0x40001000
 8003848:	40023800 	.word	0x40023800

0800384c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08c      	sub	sp, #48	; 0x30
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003854:	f107 031c 	add.w	r3, r7, #28
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d11e      	bne.n	80038ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	4b43      	ldr	r3, [pc, #268]	; (8003980 <HAL_TIM_MspPostInit+0x134>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	4a42      	ldr	r2, [pc, #264]	; (8003980 <HAL_TIM_MspPostInit+0x134>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	6313      	str	r3, [r2, #48]	; 0x30
 800387e:	4b40      	ldr	r3, [pc, #256]	; (8003980 <HAL_TIM_MspPostInit+0x134>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800388a:	2303      	movs	r3, #3
 800388c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388e:	2302      	movs	r3, #2
 8003890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	2300      	movs	r3, #0
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003896:	2300      	movs	r3, #0
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800389a:	2301      	movs	r3, #1
 800389c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389e:	f107 031c 	add.w	r3, r7, #28
 80038a2:	4619      	mov	r1, r3
 80038a4:	4837      	ldr	r0, [pc, #220]	; (8003984 <HAL_TIM_MspPostInit+0x138>)
 80038a6:	f000 fd27 	bl	80042f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80038aa:	e065      	b.n	8003978 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a35      	ldr	r2, [pc, #212]	; (8003988 <HAL_TIM_MspPostInit+0x13c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d13c      	bne.n	8003930 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	4b31      	ldr	r3, [pc, #196]	; (8003980 <HAL_TIM_MspPostInit+0x134>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	4a30      	ldr	r2, [pc, #192]	; (8003980 <HAL_TIM_MspPostInit+0x134>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6313      	str	r3, [r2, #48]	; 0x30
 80038c6:	4b2e      	ldr	r3, [pc, #184]	; (8003980 <HAL_TIM_MspPostInit+0x134>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <HAL_TIM_MspPostInit+0x134>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	4a29      	ldr	r2, [pc, #164]	; (8003980 <HAL_TIM_MspPostInit+0x134>)
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	6313      	str	r3, [r2, #48]	; 0x30
 80038e2:	4b27      	ldr	r3, [pc, #156]	; (8003980 <HAL_TIM_MspPostInit+0x134>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038ee:	23c0      	movs	r3, #192	; 0xc0
 80038f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f2:	2302      	movs	r3, #2
 80038f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fa:	2300      	movs	r3, #0
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038fe:	2302      	movs	r3, #2
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003902:	f107 031c 	add.w	r3, r7, #28
 8003906:	4619      	mov	r1, r3
 8003908:	481e      	ldr	r0, [pc, #120]	; (8003984 <HAL_TIM_MspPostInit+0x138>)
 800390a:	f000 fcf5 	bl	80042f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800390e:	2303      	movs	r3, #3
 8003910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003912:	2302      	movs	r3, #2
 8003914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003916:	2300      	movs	r3, #0
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391a:	2300      	movs	r3, #0
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800391e:	2302      	movs	r3, #2
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003922:	f107 031c 	add.w	r3, r7, #28
 8003926:	4619      	mov	r1, r3
 8003928:	4818      	ldr	r0, [pc, #96]	; (800398c <HAL_TIM_MspPostInit+0x140>)
 800392a:	f000 fce5 	bl	80042f8 <HAL_GPIO_Init>
}
 800392e:	e023      	b.n	8003978 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM12)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a16      	ldr	r2, [pc, #88]	; (8003990 <HAL_TIM_MspPostInit+0x144>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d11e      	bne.n	8003978 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_TIM_MspPostInit+0x134>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a0f      	ldr	r2, [pc, #60]	; (8003980 <HAL_TIM_MspPostInit+0x134>)
 8003944:	f043 0302 	orr.w	r3, r3, #2
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <HAL_TIM_MspPostInit+0x134>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003956:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800395a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395c:	2302      	movs	r3, #2
 800395e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003964:	2300      	movs	r3, #0
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003968:	2309      	movs	r3, #9
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396c:	f107 031c 	add.w	r3, r7, #28
 8003970:	4619      	mov	r1, r3
 8003972:	4806      	ldr	r0, [pc, #24]	; (800398c <HAL_TIM_MspPostInit+0x140>)
 8003974:	f000 fcc0 	bl	80042f8 <HAL_GPIO_Init>
}
 8003978:	bf00      	nop
 800397a:	3730      	adds	r7, #48	; 0x30
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40023800 	.word	0x40023800
 8003984:	40020000 	.word	0x40020000
 8003988:	40000400 	.word	0x40000400
 800398c:	40020400 	.word	0x40020400
 8003990:	40001800 	.word	0x40001800

08003994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b090      	sub	sp, #64	; 0x40
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a80      	ldr	r2, [pc, #512]	; (8003bb4 <HAL_UART_MspInit+0x220>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d153      	bne.n	8003a5e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ba:	4b7f      	ldr	r3, [pc, #508]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	4a7e      	ldr	r2, [pc, #504]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 80039c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c4:	6413      	str	r3, [r2, #64]	; 0x40
 80039c6:	4b7c      	ldr	r3, [pc, #496]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
 80039d6:	4b78      	ldr	r3, [pc, #480]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	4a77      	ldr	r2, [pc, #476]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 80039dc:	f043 0304 	orr.w	r3, r3, #4
 80039e0:	6313      	str	r3, [r2, #48]	; 0x30
 80039e2:	4b75      	ldr	r3, [pc, #468]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	4b71      	ldr	r3, [pc, #452]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	4a70      	ldr	r2, [pc, #448]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 80039f8:	f043 0308 	orr.w	r3, r3, #8
 80039fc:	6313      	str	r3, [r2, #48]	; 0x30
 80039fe:	4b6e      	ldr	r3, [pc, #440]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	623b      	str	r3, [r7, #32]
 8003a08:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a10:	2302      	movs	r3, #2
 8003a12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003a1c:	2308      	movs	r3, #8
 8003a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a24:	4619      	mov	r1, r3
 8003a26:	4865      	ldr	r0, [pc, #404]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003a28:	f000 fc66 	bl	80042f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a30:	2302      	movs	r3, #2
 8003a32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003a3c:	2308      	movs	r3, #8
 8003a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a44:	4619      	mov	r1, r3
 8003a46:	485e      	ldr	r0, [pc, #376]	; (8003bc0 <HAL_UART_MspInit+0x22c>)
 8003a48:	f000 fc56 	bl	80042f8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2100      	movs	r1, #0
 8003a50:	2035      	movs	r0, #53	; 0x35
 8003a52:	f000 fb95 	bl	8004180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003a56:	2035      	movs	r0, #53	; 0x35
 8003a58:	f000 fbae 	bl	80041b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003a5c:	e0a6      	b.n	8003bac <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_UART_MspInit+0x230>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d135      	bne.n	8003ad4 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61fb      	str	r3, [r7, #28]
 8003a6c:	4b52      	ldr	r3, [pc, #328]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a70:	4a51      	ldr	r2, [pc, #324]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003a72:	f043 0310 	orr.w	r3, r3, #16
 8003a76:	6453      	str	r3, [r2, #68]	; 0x44
 8003a78:	4b4f      	ldr	r3, [pc, #316]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	4b4b      	ldr	r3, [pc, #300]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	4a4a      	ldr	r2, [pc, #296]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6313      	str	r3, [r2, #48]	; 0x30
 8003a94:	4b48      	ldr	r3, [pc, #288]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003aa0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ab2:	2307      	movs	r3, #7
 8003ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aba:	4619      	mov	r1, r3
 8003abc:	4842      	ldr	r0, [pc, #264]	; (8003bc8 <HAL_UART_MspInit+0x234>)
 8003abe:	f000 fc1b 	bl	80042f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2106      	movs	r1, #6
 8003ac6:	2025      	movs	r0, #37	; 0x25
 8003ac8:	f000 fb5a 	bl	8004180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003acc:	2025      	movs	r0, #37	; 0x25
 8003ace:	f000 fb73 	bl	80041b8 <HAL_NVIC_EnableIRQ>
}
 8003ad2:	e06b      	b.n	8003bac <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART3)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a3c      	ldr	r2, [pc, #240]	; (8003bcc <HAL_UART_MspInit+0x238>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d135      	bne.n	8003b4a <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	4b35      	ldr	r3, [pc, #212]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a34      	ldr	r2, [pc, #208]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b32      	ldr	r3, [pc, #200]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	4b2e      	ldr	r3, [pc, #184]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	4a2d      	ldr	r2, [pc, #180]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8003b16:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b24:	2303      	movs	r3, #3
 8003b26:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b28:	2307      	movs	r3, #7
 8003b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b30:	4619      	mov	r1, r3
 8003b32:	4822      	ldr	r0, [pc, #136]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003b34:	f000 fbe0 	bl	80042f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	2027      	movs	r0, #39	; 0x27
 8003b3e:	f000 fb1f 	bl	8004180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003b42:	2027      	movs	r0, #39	; 0x27
 8003b44:	f000 fb38 	bl	80041b8 <HAL_NVIC_EnableIRQ>
}
 8003b48:	e030      	b.n	8003bac <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART6)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <HAL_UART_MspInit+0x23c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d12b      	bne.n	8003bac <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003b5e:	f043 0320 	orr.w	r3, r3, #32
 8003b62:	6453      	str	r3, [r2, #68]	; 0x44
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b70:	2300      	movs	r3, #0
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	4a0f      	ldr	r2, [pc, #60]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003b7a:	f043 0304 	orr.w	r3, r3, #4
 8003b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b80:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <HAL_UART_MspInit+0x224>)
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b8c:	23c0      	movs	r3, #192	; 0xc0
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b90:	2302      	movs	r3, #2
 8003b92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4805      	ldr	r0, [pc, #20]	; (8003bbc <HAL_UART_MspInit+0x228>)
 8003ba8:	f000 fba6 	bl	80042f8 <HAL_GPIO_Init>
}
 8003bac:	bf00      	nop
 8003bae:	3740      	adds	r7, #64	; 0x40
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40005000 	.word	0x40005000
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	40020800 	.word	0x40020800
 8003bc0:	40020c00 	.word	0x40020c00
 8003bc4:	40011000 	.word	0x40011000
 8003bc8:	40020000 	.word	0x40020000
 8003bcc:	40004800 	.word	0x40004800
 8003bd0:	40011400 	.word	0x40011400

08003bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08e      	sub	sp, #56	; 0x38
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	4b33      	ldr	r3, [pc, #204]	; (8003cb8 <HAL_InitTick+0xe4>)
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	4a32      	ldr	r2, [pc, #200]	; (8003cb8 <HAL_InitTick+0xe4>)
 8003bee:	f043 0320 	orr.w	r3, r3, #32
 8003bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf4:	4b30      	ldr	r3, [pc, #192]	; (8003cb8 <HAL_InitTick+0xe4>)
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c00:	f107 0210 	add.w	r2, r7, #16
 8003c04:	f107 0314 	add.w	r3, r7, #20
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f001 ff98 	bl	8005b40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003c1a:	f001 ff69 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
 8003c1e:	6378      	str	r0, [r7, #52]	; 0x34
 8003c20:	e004      	b.n	8003c2c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003c22:	f001 ff65 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
 8003c26:	4603      	mov	r3, r0
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2e:	4a23      	ldr	r2, [pc, #140]	; (8003cbc <HAL_InitTick+0xe8>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	0c9b      	lsrs	r3, r3, #18
 8003c36:	3b01      	subs	r3, #1
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003c3a:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <HAL_InitTick+0xec>)
 8003c3c:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <HAL_InitTick+0xf0>)
 8003c3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8003c40:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <HAL_InitTick+0xec>)
 8003c42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c46:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003c48:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <HAL_InitTick+0xec>)
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003c4e:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <HAL_InitTick+0xec>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <HAL_InitTick+0xec>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c5a:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <HAL_InitTick+0xec>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8003c60:	4817      	ldr	r0, [pc, #92]	; (8003cc0 <HAL_InitTick+0xec>)
 8003c62:	f002 fbe7 	bl	8006434 <HAL_TIM_Base_Init>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003c6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d11b      	bne.n	8003cac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8003c74:	4812      	ldr	r0, [pc, #72]	; (8003cc0 <HAL_InitTick+0xec>)
 8003c76:	f002 fc2d 	bl	80064d4 <HAL_TIM_Base_Start_IT>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003c80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d111      	bne.n	8003cac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003c88:	2037      	movs	r0, #55	; 0x37
 8003c8a:	f000 fa95 	bl	80041b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b0f      	cmp	r3, #15
 8003c92:	d808      	bhi.n	8003ca6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8003c94:	2200      	movs	r2, #0
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	2037      	movs	r0, #55	; 0x37
 8003c9a:	f000 fa71 	bl	8004180 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <HAL_InitTick+0xf4>)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	e002      	b.n	8003cac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003cac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3738      	adds	r7, #56	; 0x38
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	431bde83 	.word	0x431bde83
 8003cc0:	20000a64 	.word	0x20000a64
 8003cc4:	40001400 	.word	0x40001400
 8003cc8:	20000008 	.word	0x20000008

08003ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cd0:	e7fe      	b.n	8003cd0 <NMI_Handler+0x4>

08003cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cd6:	e7fe      	b.n	8003cd6 <HardFault_Handler+0x4>

08003cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cdc:	e7fe      	b.n	8003cdc <MemManage_Handler+0x4>

08003cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ce2:	e7fe      	b.n	8003ce2 <BusFault_Handler+0x4>

08003ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ce8:	e7fe      	b.n	8003ce8 <UsageFault_Handler+0x4>
	...

08003cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 8003cf2:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <TIM2_IRQHandler+0x90>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d131      	bne.n	8003d64 <TIM2_IRQHandler+0x78>
		// Timer overflow interrupt
		Global_Speed = round(Calculate_Car_Speed());
 8003d00:	f7fe ff70 	bl	8002be4 <Calculate_Car_Speed>
 8003d04:	ee10 3a10 	vmov	r3, s0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fc fc8d 	bl	8000628 <__aeabi_f2d>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	ec43 2b10 	vmov	d0, r2, r3
 8003d16:	f00b fd0b 	bl	800f730 <round>
 8003d1a:	ec53 2b10 	vmov	r2, r3, d0
 8003d1e:	4610      	mov	r0, r2
 8003d20:	4619      	mov	r1, r3
 8003d22:	f7fc ffb1 	bl	8000c88 <__aeabi_d2uiz>
 8003d26:	4603      	mov	r3, r0
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <TIM2_IRQHandler+0x94>)
 8003d2c:	801a      	strh	r2, [r3, #0]

        if(Global_GPS_Speed_Completetion==Nothing_Completed)
 8003d2e:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <TIM2_IRQHandler+0x98>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <TIM2_IRQHandler+0x52>
        {
        	Global_GPS_Speed_Completetion=Half_Completed_Speed;
 8003d36:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <TIM2_IRQHandler+0x98>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	e017      	b.n	8003d6e <TIM2_IRQHandler+0x82>

        }
        else if(Global_GPS_Speed_Completetion==Half_Completed_GPS)
 8003d3e:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <TIM2_IRQHandler+0x98>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d113      	bne.n	8003d6e <TIM2_IRQHandler+0x82>
        {
        	Global_GPS_Speed_Completetion=Nothing_Completed;
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <TIM2_IRQHandler+0x98>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]

        	/*Notify the ESPPeriodicTask*/
        	xTaskNotifyFromISR(Handle_ESP_Periodic,0,eNoAction,NULL);
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <TIM2_IRQHandler+0x9c>)
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	2300      	movs	r3, #0
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	2300      	movs	r3, #0
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	f006 f8c7 	bl	8009ef0 <xTaskGenericNotifyFromISR>
 8003d62:	e004      	b.n	8003d6e <TIM2_IRQHandler+0x82>
        }

	}else {
		edges_counter++;
 8003d64:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <TIM2_IRQHandler+0xa0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	4a08      	ldr	r2, [pc, #32]	; (8003d8c <TIM2_IRQHandler+0xa0>)
 8003d6c:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d6e:	4803      	ldr	r0, [pc, #12]	; (8003d7c <TIM2_IRQHandler+0x90>)
 8003d70:	f002 ff1e 	bl	8006bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000830 	.word	0x20000830
 8003d80:	20000a62 	.word	0x20000a62
 8003d84:	20000310 	.word	0x20000310
 8003d88:	20000218 	.word	0x20000218
 8003d8c:	20000224 	.word	0x20000224

08003d90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8003d94:	4803      	ldr	r0, [pc, #12]	; (8003da4 <USART1_IRQHandler+0x14>)
 8003d96:	f7fe fec7 	bl	8002b28 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d9a:	4802      	ldr	r0, [pc, #8]	; (8003da4 <USART1_IRQHandler+0x14>)
 8003d9c:	f003 fcd0 	bl	8007740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003da0:	bf00      	nop
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20000994 	.word	0x20000994

08003da8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003dac:	4802      	ldr	r0, [pc, #8]	; (8003db8 <USART3_IRQHandler+0x10>)
 8003dae:	f003 fcc7 	bl	8007740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	200009d8 	.word	0x200009d8

08003dbc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003dc0:	4802      	ldr	r0, [pc, #8]	; (8003dcc <UART5_IRQHandler+0x10>)
 8003dc2:	f003 fcbd 	bl	8007740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000950 	.word	0x20000950

08003dd0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003dd4:	4802      	ldr	r0, [pc, #8]	; (8003de0 <TIM7_IRQHandler+0x10>)
 8003dd6:	f002 feeb 	bl	8006bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000a64 	.word	0x20000a64

08003de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return 1;
 8003de8:	2301      	movs	r3, #1
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <_kill>:

int _kill(int pid, int sig)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003dfe:	f009 fc41 	bl	800d684 <__errno>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2216      	movs	r2, #22
 8003e06:	601a      	str	r2, [r3, #0]
  return -1;
 8003e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_exit>:

void _exit (int status)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ffe7 	bl	8003df4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e26:	e7fe      	b.n	8003e26 <_exit+0x12>

08003e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e00a      	b.n	8003e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e3a:	f3af 8000 	nop.w
 8003e3e:	4601      	mov	r1, r0
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	60ba      	str	r2, [r7, #8]
 8003e46:	b2ca      	uxtb	r2, r1
 8003e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	dbf0      	blt.n	8003e3a <_read+0x12>
  }

  return len;
 8003e58:	687b      	ldr	r3, [r7, #4]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e8a:	605a      	str	r2, [r3, #4]
  return 0;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <_isatty>:

int _isatty(int file)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ea2:	2301      	movs	r3, #1
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <SystemInit+0x20>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	4a05      	ldr	r2, [pc, #20]	; (8003eec <SystemInit+0x20>)
 8003ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ef4:	480d      	ldr	r0, [pc, #52]	; (8003f2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ef6:	490e      	ldr	r1, [pc, #56]	; (8003f30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ef8:	4a0e      	ldr	r2, [pc, #56]	; (8003f34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003efc:	e002      	b.n	8003f04 <LoopCopyDataInit>

08003efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f02:	3304      	adds	r3, #4

08003f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f08:	d3f9      	bcc.n	8003efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f0a:	4a0b      	ldr	r2, [pc, #44]	; (8003f38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f0c:	4c0b      	ldr	r4, [pc, #44]	; (8003f3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f10:	e001      	b.n	8003f16 <LoopFillZerobss>

08003f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f14:	3204      	adds	r2, #4

08003f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f18:	d3fb      	bcc.n	8003f12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f1a:	f7ff ffd7 	bl	8003ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f1e:	f009 fbb7 	bl	800d690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f22:	f7fe fe89 	bl	8002c38 <main>
  bx  lr    
 8003f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f30:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003f34:	08010968 	.word	0x08010968
  ldr r2, =_sbss
 8003f38:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003f3c:	20014014 	.word	0x20014014

08003f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f40:	e7fe      	b.n	8003f40 <ADC_IRQHandler>
	...

08003f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f48:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <HAL_Init+0x40>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a0d      	ldr	r2, [pc, #52]	; (8003f84 <HAL_Init+0x40>)
 8003f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_Init+0x40>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <HAL_Init+0x40>)
 8003f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <HAL_Init+0x40>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a07      	ldr	r2, [pc, #28]	; (8003f84 <HAL_Init+0x40>)
 8003f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f6c:	2003      	movs	r0, #3
 8003f6e:	f000 f8fc 	bl	800416a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f72:	200f      	movs	r0, #15
 8003f74:	f7ff fe2e 	bl	8003bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f78:	f7ff faee 	bl	8003558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023c00 	.word	0x40023c00

08003f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_IncTick+0x20>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <HAL_IncTick+0x24>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4413      	add	r3, r2
 8003f98:	4a04      	ldr	r2, [pc, #16]	; (8003fac <HAL_IncTick+0x24>)
 8003f9a:	6013      	str	r3, [r2, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	2000000c 	.word	0x2000000c
 8003fac:	20000aac 	.word	0x20000aac

08003fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <HAL_GetTick+0x14>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20000aac 	.word	0x20000aac

08003fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fd0:	f7ff ffee 	bl	8003fb0 <HAL_GetTick>
 8003fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d005      	beq.n	8003fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <HAL_Delay+0x44>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fee:	bf00      	nop
 8003ff0:	f7ff ffde 	bl	8003fb0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d8f7      	bhi.n	8003ff0 <HAL_Delay+0x28>
  {
  }
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	2000000c 	.word	0x2000000c

08004010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <__NVIC_SetPriorityGrouping+0x44>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800402c:	4013      	ands	r3, r2
 800402e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800403c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004042:	4a04      	ldr	r2, [pc, #16]	; (8004054 <__NVIC_SetPriorityGrouping+0x44>)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	60d3      	str	r3, [r2, #12]
}
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	e000ed00 	.word	0xe000ed00

08004058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800405c:	4b04      	ldr	r3, [pc, #16]	; (8004070 <__NVIC_GetPriorityGrouping+0x18>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	f003 0307 	and.w	r3, r3, #7
}
 8004066:	4618      	mov	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	e000ed00 	.word	0xe000ed00

08004074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800407e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004082:	2b00      	cmp	r3, #0
 8004084:	db0b      	blt.n	800409e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	f003 021f 	and.w	r2, r3, #31
 800408c:	4907      	ldr	r1, [pc, #28]	; (80040ac <__NVIC_EnableIRQ+0x38>)
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	2001      	movs	r0, #1
 8004096:	fa00 f202 	lsl.w	r2, r0, r2
 800409a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	e000e100 	.word	0xe000e100

080040b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	6039      	str	r1, [r7, #0]
 80040ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	db0a      	blt.n	80040da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	490c      	ldr	r1, [pc, #48]	; (80040fc <__NVIC_SetPriority+0x4c>)
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	0112      	lsls	r2, r2, #4
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	440b      	add	r3, r1
 80040d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040d8:	e00a      	b.n	80040f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	4908      	ldr	r1, [pc, #32]	; (8004100 <__NVIC_SetPriority+0x50>)
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	3b04      	subs	r3, #4
 80040e8:	0112      	lsls	r2, r2, #4
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	440b      	add	r3, r1
 80040ee:	761a      	strb	r2, [r3, #24]
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	e000e100 	.word	0xe000e100
 8004100:	e000ed00 	.word	0xe000ed00

08004104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004104:	b480      	push	{r7}
 8004106:	b089      	sub	sp, #36	; 0x24
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f1c3 0307 	rsb	r3, r3, #7
 800411e:	2b04      	cmp	r3, #4
 8004120:	bf28      	it	cs
 8004122:	2304      	movcs	r3, #4
 8004124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	3304      	adds	r3, #4
 800412a:	2b06      	cmp	r3, #6
 800412c:	d902      	bls.n	8004134 <NVIC_EncodePriority+0x30>
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3b03      	subs	r3, #3
 8004132:	e000      	b.n	8004136 <NVIC_EncodePriority+0x32>
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004138:	f04f 32ff 	mov.w	r2, #4294967295
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43da      	mvns	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	401a      	ands	r2, r3
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800414c:	f04f 31ff 	mov.w	r1, #4294967295
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	fa01 f303 	lsl.w	r3, r1, r3
 8004156:	43d9      	mvns	r1, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800415c:	4313      	orrs	r3, r2
         );
}
 800415e:	4618      	mov	r0, r3
 8004160:	3724      	adds	r7, #36	; 0x24
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ff4c 	bl	8004010 <__NVIC_SetPriorityGrouping>
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004192:	f7ff ff61 	bl	8004058 <__NVIC_GetPriorityGrouping>
 8004196:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	6978      	ldr	r0, [r7, #20]
 800419e:	f7ff ffb1 	bl	8004104 <NVIC_EncodePriority>
 80041a2:	4602      	mov	r2, r0
 80041a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041a8:	4611      	mov	r1, r2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff ff80 	bl	80040b0 <__NVIC_SetPriority>
}
 80041b0:	bf00      	nop
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff ff54 	bl	8004074 <__NVIC_EnableIRQ>
}
 80041cc:	bf00      	nop
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041e2:	f7ff fee5 	bl	8003fb0 <HAL_GetTick>
 80041e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d008      	beq.n	8004206 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2280      	movs	r2, #128	; 0x80
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e052      	b.n	80042ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0216 	bic.w	r2, r2, #22
 8004214:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004224:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d103      	bne.n	8004236 <HAL_DMA_Abort+0x62>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004232:	2b00      	cmp	r3, #0
 8004234:	d007      	beq.n	8004246 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0208 	bic.w	r2, r2, #8
 8004244:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004256:	e013      	b.n	8004280 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004258:	f7ff feaa 	bl	8003fb0 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b05      	cmp	r3, #5
 8004264:	d90c      	bls.n	8004280 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2203      	movs	r2, #3
 8004270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e015      	b.n	80042ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e4      	bne.n	8004258 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004292:	223f      	movs	r2, #63	; 0x3f
 8004294:	409a      	lsls	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d004      	beq.n	80042d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2280      	movs	r2, #128	; 0x80
 80042cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e00c      	b.n	80042ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2205      	movs	r2, #5
 80042d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b089      	sub	sp, #36	; 0x24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	e165      	b.n	80045e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004314:	2201      	movs	r2, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	429a      	cmp	r2, r3
 800432e:	f040 8154 	bne.w	80045da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d005      	beq.n	800434a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004346:	2b02      	cmp	r3, #2
 8004348:	d130      	bne.n	80043ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	2203      	movs	r2, #3
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4013      	ands	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004380:	2201      	movs	r2, #1
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	f003 0201 	and.w	r2, r3, #1
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d017      	beq.n	80043e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d123      	bne.n	800443c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	08da      	lsrs	r2, r3, #3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3208      	adds	r2, #8
 80043fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	220f      	movs	r2, #15
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	08da      	lsrs	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3208      	adds	r2, #8
 8004436:	69b9      	ldr	r1, [r7, #24]
 8004438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	2203      	movs	r2, #3
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43db      	mvns	r3, r3
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4013      	ands	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0203 	and.w	r2, r3, #3
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4313      	orrs	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80ae 	beq.w	80045da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	4b5d      	ldr	r3, [pc, #372]	; (80045f8 <HAL_GPIO_Init+0x300>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	4a5c      	ldr	r2, [pc, #368]	; (80045f8 <HAL_GPIO_Init+0x300>)
 8004488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800448c:	6453      	str	r3, [r2, #68]	; 0x44
 800448e:	4b5a      	ldr	r3, [pc, #360]	; (80045f8 <HAL_GPIO_Init+0x300>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800449a:	4a58      	ldr	r2, [pc, #352]	; (80045fc <HAL_GPIO_Init+0x304>)
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	3302      	adds	r3, #2
 80044a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	220f      	movs	r2, #15
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a4f      	ldr	r2, [pc, #316]	; (8004600 <HAL_GPIO_Init+0x308>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d025      	beq.n	8004512 <HAL_GPIO_Init+0x21a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a4e      	ldr	r2, [pc, #312]	; (8004604 <HAL_GPIO_Init+0x30c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d01f      	beq.n	800450e <HAL_GPIO_Init+0x216>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a4d      	ldr	r2, [pc, #308]	; (8004608 <HAL_GPIO_Init+0x310>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d019      	beq.n	800450a <HAL_GPIO_Init+0x212>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a4c      	ldr	r2, [pc, #304]	; (800460c <HAL_GPIO_Init+0x314>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_GPIO_Init+0x20e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a4b      	ldr	r2, [pc, #300]	; (8004610 <HAL_GPIO_Init+0x318>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00d      	beq.n	8004502 <HAL_GPIO_Init+0x20a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a4a      	ldr	r2, [pc, #296]	; (8004614 <HAL_GPIO_Init+0x31c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <HAL_GPIO_Init+0x206>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a49      	ldr	r2, [pc, #292]	; (8004618 <HAL_GPIO_Init+0x320>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <HAL_GPIO_Init+0x202>
 80044f6:	2306      	movs	r3, #6
 80044f8:	e00c      	b.n	8004514 <HAL_GPIO_Init+0x21c>
 80044fa:	2307      	movs	r3, #7
 80044fc:	e00a      	b.n	8004514 <HAL_GPIO_Init+0x21c>
 80044fe:	2305      	movs	r3, #5
 8004500:	e008      	b.n	8004514 <HAL_GPIO_Init+0x21c>
 8004502:	2304      	movs	r3, #4
 8004504:	e006      	b.n	8004514 <HAL_GPIO_Init+0x21c>
 8004506:	2303      	movs	r3, #3
 8004508:	e004      	b.n	8004514 <HAL_GPIO_Init+0x21c>
 800450a:	2302      	movs	r3, #2
 800450c:	e002      	b.n	8004514 <HAL_GPIO_Init+0x21c>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <HAL_GPIO_Init+0x21c>
 8004512:	2300      	movs	r3, #0
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	f002 0203 	and.w	r2, r2, #3
 800451a:	0092      	lsls	r2, r2, #2
 800451c:	4093      	lsls	r3, r2
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4313      	orrs	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004524:	4935      	ldr	r1, [pc, #212]	; (80045fc <HAL_GPIO_Init+0x304>)
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	089b      	lsrs	r3, r3, #2
 800452a:	3302      	adds	r3, #2
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004532:	4b3a      	ldr	r3, [pc, #232]	; (800461c <HAL_GPIO_Init+0x324>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	43db      	mvns	r3, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4013      	ands	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004556:	4a31      	ldr	r2, [pc, #196]	; (800461c <HAL_GPIO_Init+0x324>)
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800455c:	4b2f      	ldr	r3, [pc, #188]	; (800461c <HAL_GPIO_Init+0x324>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004580:	4a26      	ldr	r2, [pc, #152]	; (800461c <HAL_GPIO_Init+0x324>)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004586:	4b25      	ldr	r3, [pc, #148]	; (800461c <HAL_GPIO_Init+0x324>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045aa:	4a1c      	ldr	r2, [pc, #112]	; (800461c <HAL_GPIO_Init+0x324>)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045b0:	4b1a      	ldr	r3, [pc, #104]	; (800461c <HAL_GPIO_Init+0x324>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045d4:	4a11      	ldr	r2, [pc, #68]	; (800461c <HAL_GPIO_Init+0x324>)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3301      	adds	r3, #1
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	2b0f      	cmp	r3, #15
 80045e4:	f67f ae96 	bls.w	8004314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	3724      	adds	r7, #36	; 0x24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40013800 	.word	0x40013800
 8004600:	40020000 	.word	0x40020000
 8004604:	40020400 	.word	0x40020400
 8004608:	40020800 	.word	0x40020800
 800460c:	40020c00 	.word	0x40020c00
 8004610:	40021000 	.word	0x40021000
 8004614:	40021400 	.word	0x40021400
 8004618:	40021800 	.word	0x40021800
 800461c:	40013c00 	.word	0x40013c00

08004620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	807b      	strh	r3, [r7, #2]
 800462c:	4613      	mov	r3, r2
 800462e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004630:	787b      	ldrb	r3, [r7, #1]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800463c:	e003      	b.n	8004646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800463e:	887b      	ldrh	r3, [r7, #2]
 8004640:	041a      	lsls	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	619a      	str	r2, [r3, #24]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e12b      	b.n	80048be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fe ff94 	bl	80035a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2224      	movs	r2, #36	; 0x24
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046b8:	f001 fa1a 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
 80046bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4a81      	ldr	r2, [pc, #516]	; (80048c8 <HAL_I2C_Init+0x274>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d807      	bhi.n	80046d8 <HAL_I2C_Init+0x84>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4a80      	ldr	r2, [pc, #512]	; (80048cc <HAL_I2C_Init+0x278>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	bf94      	ite	ls
 80046d0:	2301      	movls	r3, #1
 80046d2:	2300      	movhi	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e006      	b.n	80046e6 <HAL_I2C_Init+0x92>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4a7d      	ldr	r2, [pc, #500]	; (80048d0 <HAL_I2C_Init+0x27c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	bf94      	ite	ls
 80046e0:	2301      	movls	r3, #1
 80046e2:	2300      	movhi	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e0e7      	b.n	80048be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a78      	ldr	r2, [pc, #480]	; (80048d4 <HAL_I2C_Init+0x280>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	0c9b      	lsrs	r3, r3, #18
 80046f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a6a      	ldr	r2, [pc, #424]	; (80048c8 <HAL_I2C_Init+0x274>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d802      	bhi.n	8004728 <HAL_I2C_Init+0xd4>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	3301      	adds	r3, #1
 8004726:	e009      	b.n	800473c <HAL_I2C_Init+0xe8>
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	4a69      	ldr	r2, [pc, #420]	; (80048d8 <HAL_I2C_Init+0x284>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	099b      	lsrs	r3, r3, #6
 800473a:	3301      	adds	r3, #1
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	430b      	orrs	r3, r1
 8004742:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800474e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	495c      	ldr	r1, [pc, #368]	; (80048c8 <HAL_I2C_Init+0x274>)
 8004758:	428b      	cmp	r3, r1
 800475a:	d819      	bhi.n	8004790 <HAL_I2C_Init+0x13c>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	1e59      	subs	r1, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	fbb1 f3f3 	udiv	r3, r1, r3
 800476a:	1c59      	adds	r1, r3, #1
 800476c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004770:	400b      	ands	r3, r1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_I2C_Init+0x138>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1e59      	subs	r1, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	fbb1 f3f3 	udiv	r3, r1, r3
 8004784:	3301      	adds	r3, #1
 8004786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800478a:	e051      	b.n	8004830 <HAL_I2C_Init+0x1dc>
 800478c:	2304      	movs	r3, #4
 800478e:	e04f      	b.n	8004830 <HAL_I2C_Init+0x1dc>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d111      	bne.n	80047bc <HAL_I2C_Init+0x168>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1e58      	subs	r0, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6859      	ldr	r1, [r3, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	440b      	add	r3, r1
 80047a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047aa:	3301      	adds	r3, #1
 80047ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	e012      	b.n	80047e2 <HAL_I2C_Init+0x18e>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1e58      	subs	r0, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6859      	ldr	r1, [r3, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	0099      	lsls	r1, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80047d2:	3301      	adds	r3, #1
 80047d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_I2C_Init+0x196>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e022      	b.n	8004830 <HAL_I2C_Init+0x1dc>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10e      	bne.n	8004810 <HAL_I2C_Init+0x1bc>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1e58      	subs	r0, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6859      	ldr	r1, [r3, #4]
 80047fa:	460b      	mov	r3, r1
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	440b      	add	r3, r1
 8004800:	fbb0 f3f3 	udiv	r3, r0, r3
 8004804:	3301      	adds	r3, #1
 8004806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800480a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800480e:	e00f      	b.n	8004830 <HAL_I2C_Init+0x1dc>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1e58      	subs	r0, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	0099      	lsls	r1, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	fbb0 f3f3 	udiv	r3, r0, r3
 8004826:	3301      	adds	r3, #1
 8004828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800482c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	6809      	ldr	r1, [r1, #0]
 8004834:	4313      	orrs	r3, r2
 8004836:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800485e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6911      	ldr	r1, [r2, #16]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68d2      	ldr	r2, [r2, #12]
 800486a:	4311      	orrs	r1, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	430b      	orrs	r3, r1
 8004872:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	000186a0 	.word	0x000186a0
 80048cc:	001e847f 	.word	0x001e847f
 80048d0:	003d08ff 	.word	0x003d08ff
 80048d4:	431bde83 	.word	0x431bde83
 80048d8:	10624dd3 	.word	0x10624dd3

080048dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	461a      	mov	r2, r3
 80048e8:	460b      	mov	r3, r1
 80048ea:	817b      	strh	r3, [r7, #10]
 80048ec:	4613      	mov	r3, r2
 80048ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048f0:	f7ff fb5e 	bl	8003fb0 <HAL_GetTick>
 80048f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b20      	cmp	r3, #32
 8004900:	f040 80e0 	bne.w	8004ac4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2319      	movs	r3, #25
 800490a:	2201      	movs	r2, #1
 800490c:	4970      	ldr	r1, [pc, #448]	; (8004ad0 <HAL_I2C_Master_Transmit+0x1f4>)
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 fe02 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800491a:	2302      	movs	r3, #2
 800491c:	e0d3      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_I2C_Master_Transmit+0x50>
 8004928:	2302      	movs	r3, #2
 800492a:	e0cc      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1ea>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d007      	beq.n	8004952 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0201 	orr.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004960:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2221      	movs	r2, #33	; 0x21
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2210      	movs	r2, #16
 800496e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	893a      	ldrh	r2, [r7, #8]
 8004982:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a50      	ldr	r2, [pc, #320]	; (8004ad4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004992:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004994:	8979      	ldrh	r1, [r7, #10]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	6a3a      	ldr	r2, [r7, #32]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 fbbc 	bl	8005118 <I2C_MasterRequestWrite>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e08d      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049c0:	e066      	b.n	8004a90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	6a39      	ldr	r1, [r7, #32]
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fe7c 	bl	80056c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00d      	beq.n	80049ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d107      	bne.n	80049ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e06b      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	781a      	ldrb	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d11b      	bne.n	8004a64 <HAL_I2C_Master_Transmit+0x188>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d017      	beq.n	8004a64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	6a39      	ldr	r1, [r7, #32]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 fe6c 	bl	8005746 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00d      	beq.n	8004a90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d107      	bne.n	8004a8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e01a      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d194      	bne.n	80049c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e000      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ac4:	2302      	movs	r3, #2
  }
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	00100002 	.word	0x00100002
 8004ad4:	ffff0000 	.word	0xffff0000

08004ad8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	817b      	strh	r3, [r7, #10]
 8004aea:	460b      	mov	r3, r1
 8004aec:	813b      	strh	r3, [r7, #8]
 8004aee:	4613      	mov	r3, r2
 8004af0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004af2:	f7ff fa5d 	bl	8003fb0 <HAL_GetTick>
 8004af6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	f040 80d9 	bne.w	8004cb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	2319      	movs	r3, #25
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	496d      	ldr	r1, [pc, #436]	; (8004cc4 <HAL_I2C_Mem_Write+0x1ec>)
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fd01 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e0cc      	b.n	8004cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_I2C_Mem_Write+0x56>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e0c5      	b.n	8004cba <HAL_I2C_Mem_Write+0x1e2>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d007      	beq.n	8004b54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2221      	movs	r2, #33	; 0x21
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2240      	movs	r2, #64	; 0x40
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a3a      	ldr	r2, [r7, #32]
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a4d      	ldr	r2, [pc, #308]	; (8004cc8 <HAL_I2C_Mem_Write+0x1f0>)
 8004b94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b96:	88f8      	ldrh	r0, [r7, #6]
 8004b98:	893a      	ldrh	r2, [r7, #8]
 8004b9a:	8979      	ldrh	r1, [r7, #10]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	9301      	str	r3, [sp, #4]
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 fb38 	bl	800521c <I2C_RequestMemoryWrite>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d052      	beq.n	8004c58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e081      	b.n	8004cba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 fd82 	bl	80056c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00d      	beq.n	8004be2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d107      	bne.n	8004bde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e06b      	b.n	8004cba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	781a      	ldrb	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d11b      	bne.n	8004c58 <HAL_I2C_Mem_Write+0x180>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d017      	beq.n	8004c58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	781a      	ldrb	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1aa      	bne.n	8004bb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fd6e 	bl	8005746 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00d      	beq.n	8004c8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d107      	bne.n	8004c88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e016      	b.n	8004cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e000      	b.n	8004cba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
  }
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	00100002 	.word	0x00100002
 8004cc8:	ffff0000 	.word	0xffff0000

08004ccc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08c      	sub	sp, #48	; 0x30
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	817b      	strh	r3, [r7, #10]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	813b      	strh	r3, [r7, #8]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ce6:	f7ff f963 	bl	8003fb0 <HAL_GetTick>
 8004cea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	f040 8208 	bne.w	800510a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	2319      	movs	r3, #25
 8004d00:	2201      	movs	r2, #1
 8004d02:	497b      	ldr	r1, [pc, #492]	; (8004ef0 <HAL_I2C_Mem_Read+0x224>)
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 fc07 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
 8004d12:	e1fb      	b.n	800510c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_I2C_Mem_Read+0x56>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e1f4      	b.n	800510c <HAL_I2C_Mem_Read+0x440>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d007      	beq.n	8004d48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2222      	movs	r2, #34	; 0x22
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2240      	movs	r2, #64	; 0x40
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4a5b      	ldr	r2, [pc, #364]	; (8004ef4 <HAL_I2C_Mem_Read+0x228>)
 8004d88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d8a:	88f8      	ldrh	r0, [r7, #6]
 8004d8c:	893a      	ldrh	r2, [r7, #8]
 8004d8e:	8979      	ldrh	r1, [r7, #10]
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	9301      	str	r3, [sp, #4]
 8004d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	4603      	mov	r3, r0
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 fad4 	bl	8005348 <I2C_RequestMemoryRead>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e1b0      	b.n	800510c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d113      	bne.n	8004dda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db2:	2300      	movs	r3, #0
 8004db4:	623b      	str	r3, [r7, #32]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	623b      	str	r3, [r7, #32]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	623b      	str	r3, [r7, #32]
 8004dc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	e184      	b.n	80050e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d11b      	bne.n	8004e1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	e164      	b.n	80050e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d11b      	bne.n	8004e5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	e144      	b.n	80050e4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e70:	e138      	b.n	80050e4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	f200 80f1 	bhi.w	800505e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d123      	bne.n	8004ecc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 fc9d 	bl	80057c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e139      	b.n	800510c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eca:	e10b      	b.n	80050e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d14e      	bne.n	8004f72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eda:	2200      	movs	r2, #0
 8004edc:	4906      	ldr	r1, [pc, #24]	; (8004ef8 <HAL_I2C_Mem_Read+0x22c>)
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 fb1a 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e10e      	b.n	800510c <HAL_I2C_Mem_Read+0x440>
 8004eee:	bf00      	nop
 8004ef0:	00100002 	.word	0x00100002
 8004ef4:	ffff0000 	.word	0xffff0000
 8004ef8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f70:	e0b8      	b.n	80050e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	2200      	movs	r2, #0
 8004f7a:	4966      	ldr	r1, [pc, #408]	; (8005114 <HAL_I2C_Mem_Read+0x448>)
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 facb 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0bf      	b.n	800510c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	494f      	ldr	r1, [pc, #316]	; (8005114 <HAL_I2C_Mem_Read+0x448>)
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 fa9d 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e091      	b.n	800510c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800505c:	e042      	b.n	80050e4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800505e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fbb0 	bl	80057c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e04c      	b.n	800510c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d118      	bne.n	80050e4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f47f aec2 	bne.w	8004e72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	e000      	b.n	800510c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800510a:	2302      	movs	r3, #2
  }
}
 800510c:	4618      	mov	r0, r3
 800510e:	3728      	adds	r7, #40	; 0x28
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	00010004 	.word	0x00010004

08005118 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	460b      	mov	r3, r1
 8005126:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d006      	beq.n	8005142 <I2C_MasterRequestWrite+0x2a>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d003      	beq.n	8005142 <I2C_MasterRequestWrite+0x2a>
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005140:	d108      	bne.n	8005154 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e00b      	b.n	800516c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	2b12      	cmp	r3, #18
 800515a:	d107      	bne.n	800516c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800516a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f9cd 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00d      	beq.n	80051a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005192:	d103      	bne.n	800519c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e035      	b.n	800520c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051a8:	d108      	bne.n	80051bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051aa:	897b      	ldrh	r3, [r7, #10]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	461a      	mov	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051b8:	611a      	str	r2, [r3, #16]
 80051ba:	e01b      	b.n	80051f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051bc:	897b      	ldrh	r3, [r7, #10]
 80051be:	11db      	asrs	r3, r3, #7
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f003 0306 	and.w	r3, r3, #6
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f063 030f 	orn	r3, r3, #15
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	490e      	ldr	r1, [pc, #56]	; (8005214 <I2C_MasterRequestWrite+0xfc>)
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f9f3 	bl	80055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e010      	b.n	800520c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051ea:	897b      	ldrh	r3, [r7, #10]
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	4907      	ldr	r1, [pc, #28]	; (8005218 <I2C_MasterRequestWrite+0x100>)
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 f9e3 	bl	80055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	00010008 	.word	0x00010008
 8005218:	00010002 	.word	0x00010002

0800521c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	4608      	mov	r0, r1
 8005226:	4611      	mov	r1, r2
 8005228:	461a      	mov	r2, r3
 800522a:	4603      	mov	r3, r0
 800522c:	817b      	strh	r3, [r7, #10]
 800522e:	460b      	mov	r3, r1
 8005230:	813b      	strh	r3, [r7, #8]
 8005232:	4613      	mov	r3, r2
 8005234:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005244:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	2200      	movs	r2, #0
 800524e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 f960 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00d      	beq.n	800527a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800526c:	d103      	bne.n	8005276 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e05f      	b.n	800533a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800527a:	897b      	ldrh	r3, [r7, #10]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	461a      	mov	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005288:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	6a3a      	ldr	r2, [r7, #32]
 800528e:	492d      	ldr	r1, [pc, #180]	; (8005344 <I2C_RequestMemoryWrite+0x128>)
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f998 	bl	80055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e04c      	b.n	800533a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b8:	6a39      	ldr	r1, [r7, #32]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 fa02 	bl	80056c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00d      	beq.n	80052e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d107      	bne.n	80052de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e02b      	b.n	800533a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d105      	bne.n	80052f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052e8:	893b      	ldrh	r3, [r7, #8]
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	611a      	str	r2, [r3, #16]
 80052f2:	e021      	b.n	8005338 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052f4:	893b      	ldrh	r3, [r7, #8]
 80052f6:	0a1b      	lsrs	r3, r3, #8
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005304:	6a39      	ldr	r1, [r7, #32]
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 f9dc 	bl	80056c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00d      	beq.n	800532e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	2b04      	cmp	r3, #4
 8005318:	d107      	bne.n	800532a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005328:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e005      	b.n	800533a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800532e:	893b      	ldrh	r3, [r7, #8]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	00010002 	.word	0x00010002

08005348 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	4608      	mov	r0, r1
 8005352:	4611      	mov	r1, r2
 8005354:	461a      	mov	r2, r3
 8005356:	4603      	mov	r3, r0
 8005358:	817b      	strh	r3, [r7, #10]
 800535a:	460b      	mov	r3, r1
 800535c:	813b      	strh	r3, [r7, #8]
 800535e:	4613      	mov	r3, r2
 8005360:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005370:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005380:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	2200      	movs	r2, #0
 800538a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f8c2 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00d      	beq.n	80053b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a8:	d103      	bne.n	80053b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e0aa      	b.n	800550c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053b6:	897b      	ldrh	r3, [r7, #10]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	6a3a      	ldr	r2, [r7, #32]
 80053ca:	4952      	ldr	r1, [pc, #328]	; (8005514 <I2C_RequestMemoryRead+0x1cc>)
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f8fa 	bl	80055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e097      	b.n	800550c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f4:	6a39      	ldr	r1, [r7, #32]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f964 	bl	80056c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00d      	beq.n	800541e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	2b04      	cmp	r3, #4
 8005408:	d107      	bne.n	800541a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005418:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e076      	b.n	800550c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d105      	bne.n	8005430 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005424:	893b      	ldrh	r3, [r7, #8]
 8005426:	b2da      	uxtb	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	611a      	str	r2, [r3, #16]
 800542e:	e021      	b.n	8005474 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005430:	893b      	ldrh	r3, [r7, #8]
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	b29b      	uxth	r3, r3
 8005436:	b2da      	uxtb	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800543e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005440:	6a39      	ldr	r1, [r7, #32]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f93e 	bl	80056c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00d      	beq.n	800546a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	2b04      	cmp	r3, #4
 8005454:	d107      	bne.n	8005466 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005464:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e050      	b.n	800550c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800546a:	893b      	ldrh	r3, [r7, #8]
 800546c:	b2da      	uxtb	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005476:	6a39      	ldr	r1, [r7, #32]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f923 	bl	80056c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00d      	beq.n	80054a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	2b04      	cmp	r3, #4
 800548a:	d107      	bne.n	800549c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e035      	b.n	800550c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f82b 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00d      	beq.n	80054e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d6:	d103      	bne.n	80054e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e013      	b.n	800550c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054e4:	897b      	ldrh	r3, [r7, #10]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	6a3a      	ldr	r2, [r7, #32]
 80054f8:	4906      	ldr	r1, [pc, #24]	; (8005514 <I2C_RequestMemoryRead+0x1cc>)
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f863 	bl	80055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	00010002 	.word	0x00010002

08005518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	4613      	mov	r3, r2
 8005526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005528:	e025      	b.n	8005576 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d021      	beq.n	8005576 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005532:	f7fe fd3d 	bl	8003fb0 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d302      	bcc.n	8005548 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d116      	bne.n	8005576 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f043 0220 	orr.w	r2, r3, #32
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e023      	b.n	80055be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	0c1b      	lsrs	r3, r3, #16
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	d10d      	bne.n	800559c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	43da      	mvns	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4013      	ands	r3, r2
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	bf0c      	ite	eq
 8005592:	2301      	moveq	r3, #1
 8005594:	2300      	movne	r3, #0
 8005596:	b2db      	uxtb	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	e00c      	b.n	80055b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	43da      	mvns	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4013      	ands	r3, r2
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bf0c      	ite	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	2300      	movne	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d0b6      	beq.n	800552a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	607a      	str	r2, [r7, #4]
 80055d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055d4:	e051      	b.n	800567a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e4:	d123      	bne.n	800562e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	f043 0204 	orr.w	r2, r3, #4
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e046      	b.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005634:	d021      	beq.n	800567a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005636:	f7fe fcbb 	bl	8003fb0 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d116      	bne.n	800567a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f043 0220 	orr.w	r2, r3, #32
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e020      	b.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d10c      	bne.n	800569e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	43da      	mvns	r2, r3
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4013      	ands	r3, r2
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	bf14      	ite	ne
 8005696:	2301      	movne	r3, #1
 8005698:	2300      	moveq	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	e00b      	b.n	80056b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	43da      	mvns	r2, r3
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4013      	ands	r3, r2
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bf14      	ite	ne
 80056b0:	2301      	movne	r3, #1
 80056b2:	2300      	moveq	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d18d      	bne.n	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d0:	e02d      	b.n	800572e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f8ce 	bl	8005874 <I2C_IsAcknowledgeFailed>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e02d      	b.n	800573e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d021      	beq.n	800572e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ea:	f7fe fc61 	bl	8003fb0 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d302      	bcc.n	8005700 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d116      	bne.n	800572e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f043 0220 	orr.w	r2, r3, #32
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e007      	b.n	800573e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005738:	2b80      	cmp	r3, #128	; 0x80
 800573a:	d1ca      	bne.n	80056d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005752:	e02d      	b.n	80057b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f88d 	bl	8005874 <I2C_IsAcknowledgeFailed>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e02d      	b.n	80057c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d021      	beq.n	80057b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576c:	f7fe fc20 	bl	8003fb0 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	d302      	bcc.n	8005782 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d116      	bne.n	80057b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e007      	b.n	80057c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d1ca      	bne.n	8005754 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057d4:	e042      	b.n	800585c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b10      	cmp	r3, #16
 80057e2:	d119      	bne.n	8005818 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0210 	mvn.w	r2, #16
 80057ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e029      	b.n	800586c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005818:	f7fe fbca 	bl	8003fb0 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	429a      	cmp	r2, r3
 8005826:	d302      	bcc.n	800582e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d116      	bne.n	800585c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	f043 0220 	orr.w	r2, r3, #32
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e007      	b.n	800586c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005866:	2b40      	cmp	r3, #64	; 0x40
 8005868:	d1b5      	bne.n	80057d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800588a:	d11b      	bne.n	80058c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005894:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	f043 0204 	orr.w	r2, r3, #4
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80058e0:	4b09      	ldr	r3, [pc, #36]	; (8005908 <HAL_PWR_EnterSLEEPMode+0x34>)
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	4a08      	ldr	r2, [pc, #32]	; (8005908 <HAL_PWR_EnterSLEEPMode+0x34>)
 80058e6:	f023 0304 	bic.w	r3, r3, #4
 80058ea:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80058f2:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80058f4:	e002      	b.n	80058fc <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80058f6:	bf40      	sev
    __WFE();
 80058f8:	bf20      	wfe
    __WFE();
 80058fa:	bf20      	wfe
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	e000ed00 	.word	0xe000ed00

0800590c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e0cc      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005920:	4b68      	ldr	r3, [pc, #416]	; (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d90c      	bls.n	8005948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592e:	4b65      	ldr	r3, [pc, #404]	; (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005936:	4b63      	ldr	r3, [pc, #396]	; (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d001      	beq.n	8005948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e0b8      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d020      	beq.n	8005996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005960:	4b59      	ldr	r3, [pc, #356]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4a58      	ldr	r2, [pc, #352]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800596a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0308 	and.w	r3, r3, #8
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005978:	4b53      	ldr	r3, [pc, #332]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	4a52      	ldr	r2, [pc, #328]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005984:	4b50      	ldr	r3, [pc, #320]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	494d      	ldr	r1, [pc, #308]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d044      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d107      	bne.n	80059ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059aa:	4b47      	ldr	r3, [pc, #284]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d119      	bne.n	80059ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e07f      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d003      	beq.n	80059ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059c6:	2b03      	cmp	r3, #3
 80059c8:	d107      	bne.n	80059da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ca:	4b3f      	ldr	r3, [pc, #252]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d109      	bne.n	80059ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e06f      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059da:	4b3b      	ldr	r3, [pc, #236]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e067      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ea:	4b37      	ldr	r3, [pc, #220]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f023 0203 	bic.w	r2, r3, #3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	4934      	ldr	r1, [pc, #208]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059fc:	f7fe fad8 	bl	8003fb0 <HAL_GetTick>
 8005a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a02:	e00a      	b.n	8005a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a04:	f7fe fad4 	bl	8003fb0 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e04f      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a1a:	4b2b      	ldr	r3, [pc, #172]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 020c 	and.w	r2, r3, #12
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d1eb      	bne.n	8005a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a2c:	4b25      	ldr	r3, [pc, #148]	; (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d20c      	bcs.n	8005a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3a:	4b22      	ldr	r3, [pc, #136]	; (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a42:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d001      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e032      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a60:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4916      	ldr	r1, [pc, #88]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a7e:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	490e      	ldr	r1, [pc, #56]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a92:	f000 f887 	bl	8005ba4 <HAL_RCC_GetSysClockFreq>
 8005a96:	4602      	mov	r2, r0
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	091b      	lsrs	r3, r3, #4
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	490a      	ldr	r1, [pc, #40]	; (8005acc <HAL_RCC_ClockConfig+0x1c0>)
 8005aa4:	5ccb      	ldrb	r3, [r1, r3]
 8005aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aaa:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8005aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe f88e 	bl	8003bd4 <HAL_InitTick>

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40023c00 	.word	0x40023c00
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	08010590 	.word	0x08010590
 8005ad0:	20000004 	.word	0x20000004
 8005ad4:	20000008 	.word	0x20000008

08005ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005adc:	4b03      	ldr	r3, [pc, #12]	; (8005aec <HAL_RCC_GetHCLKFreq+0x14>)
 8005ade:	681b      	ldr	r3, [r3, #0]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20000004 	.word	0x20000004

08005af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005af4:	f7ff fff0 	bl	8005ad8 <HAL_RCC_GetHCLKFreq>
 8005af8:	4602      	mov	r2, r0
 8005afa:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	0a9b      	lsrs	r3, r3, #10
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	4903      	ldr	r1, [pc, #12]	; (8005b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b06:	5ccb      	ldrb	r3, [r1, r3]
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40023800 	.word	0x40023800
 8005b14:	080105a0 	.word	0x080105a0

08005b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b1c:	f7ff ffdc 	bl	8005ad8 <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0b5b      	lsrs	r3, r3, #13
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4903      	ldr	r1, [pc, #12]	; (8005b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	080105a0 	.word	0x080105a0

08005b40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	220f      	movs	r2, #15
 8005b4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b50:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <HAL_RCC_GetClockConfig+0x5c>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0203 	and.w	r2, r3, #3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <HAL_RCC_GetClockConfig+0x5c>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b68:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <HAL_RCC_GetClockConfig+0x5c>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b74:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <HAL_RCC_GetClockConfig+0x5c>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	08db      	lsrs	r3, r3, #3
 8005b7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b82:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <HAL_RCC_GetClockConfig+0x60>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 020f 	and.w	r2, r3, #15
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	601a      	str	r2, [r3, #0]
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40023800 	.word	0x40023800
 8005ba0:	40023c00 	.word	0x40023c00

08005ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba8:	b0a6      	sub	sp, #152	; 0x98
 8005baa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bca:	4bc8      	ldr	r3, [pc, #800]	; (8005eec <HAL_RCC_GetSysClockFreq+0x348>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 030c 	and.w	r3, r3, #12
 8005bd2:	2b0c      	cmp	r3, #12
 8005bd4:	f200 817e 	bhi.w	8005ed4 <HAL_RCC_GetSysClockFreq+0x330>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005c15 	.word	0x08005c15
 8005be4:	08005ed5 	.word	0x08005ed5
 8005be8:	08005ed5 	.word	0x08005ed5
 8005bec:	08005ed5 	.word	0x08005ed5
 8005bf0:	08005c1d 	.word	0x08005c1d
 8005bf4:	08005ed5 	.word	0x08005ed5
 8005bf8:	08005ed5 	.word	0x08005ed5
 8005bfc:	08005ed5 	.word	0x08005ed5
 8005c00:	08005c25 	.word	0x08005c25
 8005c04:	08005ed5 	.word	0x08005ed5
 8005c08:	08005ed5 	.word	0x08005ed5
 8005c0c:	08005ed5 	.word	0x08005ed5
 8005c10:	08005d8f 	.word	0x08005d8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c14:	4bb6      	ldr	r3, [pc, #728]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8005c1a:	e15f      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c1c:	4bb5      	ldr	r3, [pc, #724]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005c1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005c22:	e15b      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c24:	4bb1      	ldr	r3, [pc, #708]	; (8005eec <HAL_RCC_GetSysClockFreq+0x348>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c30:	4bae      	ldr	r3, [pc, #696]	; (8005eec <HAL_RCC_GetSysClockFreq+0x348>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d031      	beq.n	8005ca0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c3c:	4bab      	ldr	r3, [pc, #684]	; (8005eec <HAL_RCC_GetSysClockFreq+0x348>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	099b      	lsrs	r3, r3, #6
 8005c42:	2200      	movs	r2, #0
 8005c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4e:	663b      	str	r3, [r7, #96]	; 0x60
 8005c50:	2300      	movs	r3, #0
 8005c52:	667b      	str	r3, [r7, #100]	; 0x64
 8005c54:	4ba7      	ldr	r3, [pc, #668]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005c56:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005c5a:	462a      	mov	r2, r5
 8005c5c:	fb03 f202 	mul.w	r2, r3, r2
 8005c60:	2300      	movs	r3, #0
 8005c62:	4621      	mov	r1, r4
 8005c64:	fb01 f303 	mul.w	r3, r1, r3
 8005c68:	4413      	add	r3, r2
 8005c6a:	4aa2      	ldr	r2, [pc, #648]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	fba1 1202 	umull	r1, r2, r1, r2
 8005c72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c74:	460a      	mov	r2, r1
 8005c76:	67ba      	str	r2, [r7, #120]	; 0x78
 8005c78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005c7a:	4413      	add	r3, r2
 8005c7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c82:	2200      	movs	r2, #0
 8005c84:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c86:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005c88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c8c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005c90:	f7fb f86a 	bl	8000d68 <__aeabi_uldivmod>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4613      	mov	r3, r2
 8005c9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c9e:	e064      	b.n	8005d6a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ca0:	4b92      	ldr	r3, [pc, #584]	; (8005eec <HAL_RCC_GetSysClockFreq+0x348>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	099b      	lsrs	r3, r3, #6
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	653b      	str	r3, [r7, #80]	; 0x50
 8005caa:	657a      	str	r2, [r7, #84]	; 0x54
 8005cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005cbc:	4622      	mov	r2, r4
 8005cbe:	462b      	mov	r3, r5
 8005cc0:	f04f 0000 	mov.w	r0, #0
 8005cc4:	f04f 0100 	mov.w	r1, #0
 8005cc8:	0159      	lsls	r1, r3, #5
 8005cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cce:	0150      	lsls	r0, r2, #5
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	1a51      	subs	r1, r2, r1
 8005cd8:	6139      	str	r1, [r7, #16]
 8005cda:	4629      	mov	r1, r5
 8005cdc:	eb63 0301 	sbc.w	r3, r3, r1
 8005ce0:	617b      	str	r3, [r7, #20]
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cee:	4659      	mov	r1, fp
 8005cf0:	018b      	lsls	r3, r1, #6
 8005cf2:	4651      	mov	r1, sl
 8005cf4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cf8:	4651      	mov	r1, sl
 8005cfa:	018a      	lsls	r2, r1, #6
 8005cfc:	4651      	mov	r1, sl
 8005cfe:	ebb2 0801 	subs.w	r8, r2, r1
 8005d02:	4659      	mov	r1, fp
 8005d04:	eb63 0901 	sbc.w	r9, r3, r1
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d1c:	4690      	mov	r8, r2
 8005d1e:	4699      	mov	r9, r3
 8005d20:	4623      	mov	r3, r4
 8005d22:	eb18 0303 	adds.w	r3, r8, r3
 8005d26:	60bb      	str	r3, [r7, #8]
 8005d28:	462b      	mov	r3, r5
 8005d2a:	eb49 0303 	adc.w	r3, r9, r3
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	f04f 0300 	mov.w	r3, #0
 8005d38:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	028b      	lsls	r3, r1, #10
 8005d40:	4621      	mov	r1, r4
 8005d42:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d46:	4621      	mov	r1, r4
 8005d48:	028a      	lsls	r2, r1, #10
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d52:	2200      	movs	r2, #0
 8005d54:	643b      	str	r3, [r7, #64]	; 0x40
 8005d56:	647a      	str	r2, [r7, #68]	; 0x44
 8005d58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d5c:	f7fb f804 	bl	8000d68 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4613      	mov	r3, r2
 8005d66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d6a:	4b60      	ldr	r3, [pc, #384]	; (8005eec <HAL_RCC_GetSysClockFreq+0x348>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	0c1b      	lsrs	r3, r3, #16
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	3301      	adds	r3, #1
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8005d7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005d8c:	e0a6      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d8e:	4b57      	ldr	r3, [pc, #348]	; (8005eec <HAL_RCC_GetSysClockFreq+0x348>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d9a:	4b54      	ldr	r3, [pc, #336]	; (8005eec <HAL_RCC_GetSysClockFreq+0x348>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d02a      	beq.n	8005dfc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005da6:	4b51      	ldr	r3, [pc, #324]	; (8005eec <HAL_RCC_GetSysClockFreq+0x348>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	099b      	lsrs	r3, r3, #6
 8005dac:	2200      	movs	r2, #0
 8005dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005db0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005db8:	2100      	movs	r1, #0
 8005dba:	4b4e      	ldr	r3, [pc, #312]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005dbc:	fb03 f201 	mul.w	r2, r3, r1
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	fb00 f303 	mul.w	r3, r0, r3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	4a4a      	ldr	r2, [pc, #296]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005dca:	fba0 1202 	umull	r1, r2, r0, r2
 8005dce:	677a      	str	r2, [r7, #116]	; 0x74
 8005dd0:	460a      	mov	r2, r1
 8005dd2:	673a      	str	r2, [r7, #112]	; 0x70
 8005dd4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005dd6:	4413      	add	r3, r2
 8005dd8:	677b      	str	r3, [r7, #116]	; 0x74
 8005dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dde:	2200      	movs	r2, #0
 8005de0:	633b      	str	r3, [r7, #48]	; 0x30
 8005de2:	637a      	str	r2, [r7, #52]	; 0x34
 8005de4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005de8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005dec:	f7fa ffbc 	bl	8000d68 <__aeabi_uldivmod>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4613      	mov	r3, r2
 8005df6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dfa:	e05b      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dfc:	4b3b      	ldr	r3, [pc, #236]	; (8005eec <HAL_RCC_GetSysClockFreq+0x348>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	099b      	lsrs	r3, r3, #6
 8005e02:	2200      	movs	r2, #0
 8005e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0e:	623b      	str	r3, [r7, #32]
 8005e10:	2300      	movs	r3, #0
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
 8005e14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e18:	4642      	mov	r2, r8
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	f04f 0000 	mov.w	r0, #0
 8005e20:	f04f 0100 	mov.w	r1, #0
 8005e24:	0159      	lsls	r1, r3, #5
 8005e26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e2a:	0150      	lsls	r0, r2, #5
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4641      	mov	r1, r8
 8005e32:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e36:	4649      	mov	r1, r9
 8005e38:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e50:	ebb2 040a 	subs.w	r4, r2, sl
 8005e54:	eb63 050b 	sbc.w	r5, r3, fp
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	00eb      	lsls	r3, r5, #3
 8005e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e66:	00e2      	lsls	r2, r4, #3
 8005e68:	4614      	mov	r4, r2
 8005e6a:	461d      	mov	r5, r3
 8005e6c:	4643      	mov	r3, r8
 8005e6e:	18e3      	adds	r3, r4, r3
 8005e70:	603b      	str	r3, [r7, #0]
 8005e72:	464b      	mov	r3, r9
 8005e74:	eb45 0303 	adc.w	r3, r5, r3
 8005e78:	607b      	str	r3, [r7, #4]
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e86:	4629      	mov	r1, r5
 8005e88:	028b      	lsls	r3, r1, #10
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e90:	4621      	mov	r1, r4
 8005e92:	028a      	lsls	r2, r1, #10
 8005e94:	4610      	mov	r0, r2
 8005e96:	4619      	mov	r1, r3
 8005e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	61bb      	str	r3, [r7, #24]
 8005ea0:	61fa      	str	r2, [r7, #28]
 8005ea2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ea6:	f7fa ff5f 	bl	8000d68 <__aeabi_uldivmod>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	4613      	mov	r3, r2
 8005eb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005eb4:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <HAL_RCC_GetSysClockFreq+0x348>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	0f1b      	lsrs	r3, r3, #28
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8005ec2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005ed2:	e003      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005ed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005eda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005edc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3798      	adds	r7, #152	; 0x98
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eea:	bf00      	nop
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	00f42400 	.word	0x00f42400
 8005ef4:	017d7840 	.word	0x017d7840

08005ef8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e28d      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8083 	beq.w	800601e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f18:	4b94      	ldr	r3, [pc, #592]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f003 030c 	and.w	r3, r3, #12
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d019      	beq.n	8005f58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f24:	4b91      	ldr	r3, [pc, #580]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d106      	bne.n	8005f3e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f30:	4b8e      	ldr	r3, [pc, #568]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f3c:	d00c      	beq.n	8005f58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f3e:	4b8b      	ldr	r3, [pc, #556]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f46:	2b0c      	cmp	r3, #12
 8005f48:	d112      	bne.n	8005f70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f4a:	4b88      	ldr	r3, [pc, #544]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f56:	d10b      	bne.n	8005f70 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f58:	4b84      	ldr	r3, [pc, #528]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d05b      	beq.n	800601c <HAL_RCC_OscConfig+0x124>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d157      	bne.n	800601c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e25a      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f78:	d106      	bne.n	8005f88 <HAL_RCC_OscConfig+0x90>
 8005f7a:	4b7c      	ldr	r3, [pc, #496]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a7b      	ldr	r2, [pc, #492]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	e01d      	b.n	8005fc4 <HAL_RCC_OscConfig+0xcc>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f90:	d10c      	bne.n	8005fac <HAL_RCC_OscConfig+0xb4>
 8005f92:	4b76      	ldr	r3, [pc, #472]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a75      	ldr	r2, [pc, #468]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	4b73      	ldr	r3, [pc, #460]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a72      	ldr	r2, [pc, #456]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	e00b      	b.n	8005fc4 <HAL_RCC_OscConfig+0xcc>
 8005fac:	4b6f      	ldr	r3, [pc, #444]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a6e      	ldr	r2, [pc, #440]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	4b6c      	ldr	r3, [pc, #432]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a6b      	ldr	r2, [pc, #428]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d013      	beq.n	8005ff4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fcc:	f7fd fff0 	bl	8003fb0 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fd4:	f7fd ffec 	bl	8003fb0 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b64      	cmp	r3, #100	; 0x64
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e21f      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fe6:	4b61      	ldr	r3, [pc, #388]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f0      	beq.n	8005fd4 <HAL_RCC_OscConfig+0xdc>
 8005ff2:	e014      	b.n	800601e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff4:	f7fd ffdc 	bl	8003fb0 <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ffc:	f7fd ffd8 	bl	8003fb0 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b64      	cmp	r3, #100	; 0x64
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e20b      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800600e:	4b57      	ldr	r3, [pc, #348]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f0      	bne.n	8005ffc <HAL_RCC_OscConfig+0x104>
 800601a:	e000      	b.n	800601e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800601c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d06f      	beq.n	800610a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800602a:	4b50      	ldr	r3, [pc, #320]	; (800616c <HAL_RCC_OscConfig+0x274>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 030c 	and.w	r3, r3, #12
 8006032:	2b00      	cmp	r3, #0
 8006034:	d017      	beq.n	8006066 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006036:	4b4d      	ldr	r3, [pc, #308]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800603e:	2b08      	cmp	r3, #8
 8006040:	d105      	bne.n	800604e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006042:	4b4a      	ldr	r3, [pc, #296]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800604e:	4b47      	ldr	r3, [pc, #284]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006056:	2b0c      	cmp	r3, #12
 8006058:	d11c      	bne.n	8006094 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800605a:	4b44      	ldr	r3, [pc, #272]	; (800616c <HAL_RCC_OscConfig+0x274>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d116      	bne.n	8006094 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006066:	4b41      	ldr	r3, [pc, #260]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <HAL_RCC_OscConfig+0x186>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d001      	beq.n	800607e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e1d3      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800607e:	4b3b      	ldr	r3, [pc, #236]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4937      	ldr	r1, [pc, #220]	; (800616c <HAL_RCC_OscConfig+0x274>)
 800608e:	4313      	orrs	r3, r2
 8006090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006092:	e03a      	b.n	800610a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d020      	beq.n	80060de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800609c:	4b34      	ldr	r3, [pc, #208]	; (8006170 <HAL_RCC_OscConfig+0x278>)
 800609e:	2201      	movs	r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a2:	f7fd ff85 	bl	8003fb0 <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060a8:	e008      	b.n	80060bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060aa:	f7fd ff81 	bl	8003fb0 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e1b4      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060bc:	4b2b      	ldr	r3, [pc, #172]	; (800616c <HAL_RCC_OscConfig+0x274>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0f0      	beq.n	80060aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c8:	4b28      	ldr	r3, [pc, #160]	; (800616c <HAL_RCC_OscConfig+0x274>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	4925      	ldr	r1, [pc, #148]	; (800616c <HAL_RCC_OscConfig+0x274>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	600b      	str	r3, [r1, #0]
 80060dc:	e015      	b.n	800610a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060de:	4b24      	ldr	r3, [pc, #144]	; (8006170 <HAL_RCC_OscConfig+0x278>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e4:	f7fd ff64 	bl	8003fb0 <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ec:	f7fd ff60 	bl	8003fb0 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e193      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060fe:	4b1b      	ldr	r3, [pc, #108]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1f0      	bne.n	80060ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d036      	beq.n	8006184 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d016      	beq.n	800614c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800611e:	4b15      	ldr	r3, [pc, #84]	; (8006174 <HAL_RCC_OscConfig+0x27c>)
 8006120:	2201      	movs	r2, #1
 8006122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006124:	f7fd ff44 	bl	8003fb0 <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800612c:	f7fd ff40 	bl	8003fb0 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e173      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800613e:	4b0b      	ldr	r3, [pc, #44]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8006140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0f0      	beq.n	800612c <HAL_RCC_OscConfig+0x234>
 800614a:	e01b      	b.n	8006184 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800614c:	4b09      	ldr	r3, [pc, #36]	; (8006174 <HAL_RCC_OscConfig+0x27c>)
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006152:	f7fd ff2d 	bl	8003fb0 <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006158:	e00e      	b.n	8006178 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800615a:	f7fd ff29 	bl	8003fb0 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d907      	bls.n	8006178 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e15c      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
 800616c:	40023800 	.word	0x40023800
 8006170:	42470000 	.word	0x42470000
 8006174:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006178:	4b8a      	ldr	r3, [pc, #552]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 800617a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1ea      	bne.n	800615a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 8097 	beq.w	80062c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006192:	2300      	movs	r3, #0
 8006194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006196:	4b83      	ldr	r3, [pc, #524]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10f      	bne.n	80061c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061a2:	2300      	movs	r3, #0
 80061a4:	60bb      	str	r3, [r7, #8]
 80061a6:	4b7f      	ldr	r3, [pc, #508]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	4a7e      	ldr	r2, [pc, #504]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 80061ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b0:	6413      	str	r3, [r2, #64]	; 0x40
 80061b2:	4b7c      	ldr	r3, [pc, #496]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ba:	60bb      	str	r3, [r7, #8]
 80061bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061be:	2301      	movs	r3, #1
 80061c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061c2:	4b79      	ldr	r3, [pc, #484]	; (80063a8 <HAL_RCC_OscConfig+0x4b0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d118      	bne.n	8006200 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061ce:	4b76      	ldr	r3, [pc, #472]	; (80063a8 <HAL_RCC_OscConfig+0x4b0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a75      	ldr	r2, [pc, #468]	; (80063a8 <HAL_RCC_OscConfig+0x4b0>)
 80061d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061da:	f7fd fee9 	bl	8003fb0 <HAL_GetTick>
 80061de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e0:	e008      	b.n	80061f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061e2:	f7fd fee5 	bl	8003fb0 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e118      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f4:	4b6c      	ldr	r3, [pc, #432]	; (80063a8 <HAL_RCC_OscConfig+0x4b0>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0f0      	beq.n	80061e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d106      	bne.n	8006216 <HAL_RCC_OscConfig+0x31e>
 8006208:	4b66      	ldr	r3, [pc, #408]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 800620a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620c:	4a65      	ldr	r2, [pc, #404]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	6713      	str	r3, [r2, #112]	; 0x70
 8006214:	e01c      	b.n	8006250 <HAL_RCC_OscConfig+0x358>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	2b05      	cmp	r3, #5
 800621c:	d10c      	bne.n	8006238 <HAL_RCC_OscConfig+0x340>
 800621e:	4b61      	ldr	r3, [pc, #388]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 8006220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006222:	4a60      	ldr	r2, [pc, #384]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 8006224:	f043 0304 	orr.w	r3, r3, #4
 8006228:	6713      	str	r3, [r2, #112]	; 0x70
 800622a:	4b5e      	ldr	r3, [pc, #376]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622e:	4a5d      	ldr	r2, [pc, #372]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 8006230:	f043 0301 	orr.w	r3, r3, #1
 8006234:	6713      	str	r3, [r2, #112]	; 0x70
 8006236:	e00b      	b.n	8006250 <HAL_RCC_OscConfig+0x358>
 8006238:	4b5a      	ldr	r3, [pc, #360]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 800623a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623c:	4a59      	ldr	r2, [pc, #356]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 800623e:	f023 0301 	bic.w	r3, r3, #1
 8006242:	6713      	str	r3, [r2, #112]	; 0x70
 8006244:	4b57      	ldr	r3, [pc, #348]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 8006246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006248:	4a56      	ldr	r2, [pc, #344]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 800624a:	f023 0304 	bic.w	r3, r3, #4
 800624e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d015      	beq.n	8006284 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006258:	f7fd feaa 	bl	8003fb0 <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800625e:	e00a      	b.n	8006276 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006260:	f7fd fea6 	bl	8003fb0 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	f241 3288 	movw	r2, #5000	; 0x1388
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e0d7      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006276:	4b4b      	ldr	r3, [pc, #300]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0ee      	beq.n	8006260 <HAL_RCC_OscConfig+0x368>
 8006282:	e014      	b.n	80062ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006284:	f7fd fe94 	bl	8003fb0 <HAL_GetTick>
 8006288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800628a:	e00a      	b.n	80062a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800628c:	f7fd fe90 	bl	8003fb0 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	f241 3288 	movw	r2, #5000	; 0x1388
 800629a:	4293      	cmp	r3, r2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e0c1      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062a2:	4b40      	ldr	r3, [pc, #256]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 80062a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1ee      	bne.n	800628c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d105      	bne.n	80062c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b4:	4b3b      	ldr	r3, [pc, #236]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	4a3a      	ldr	r2, [pc, #232]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 80062ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80ad 	beq.w	8006424 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062ca:	4b36      	ldr	r3, [pc, #216]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 030c 	and.w	r3, r3, #12
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d060      	beq.n	8006398 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d145      	bne.n	800636a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062de:	4b33      	ldr	r3, [pc, #204]	; (80063ac <HAL_RCC_OscConfig+0x4b4>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e4:	f7fd fe64 	bl	8003fb0 <HAL_GetTick>
 80062e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ea:	e008      	b.n	80062fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ec:	f7fd fe60 	bl	8003fb0 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e093      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062fe:	4b29      	ldr	r3, [pc, #164]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1f0      	bne.n	80062ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69da      	ldr	r2, [r3, #28]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	019b      	lsls	r3, r3, #6
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	085b      	lsrs	r3, r3, #1
 8006322:	3b01      	subs	r3, #1
 8006324:	041b      	lsls	r3, r3, #16
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	061b      	lsls	r3, r3, #24
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006334:	071b      	lsls	r3, r3, #28
 8006336:	491b      	ldr	r1, [pc, #108]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 8006338:	4313      	orrs	r3, r2
 800633a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800633c:	4b1b      	ldr	r3, [pc, #108]	; (80063ac <HAL_RCC_OscConfig+0x4b4>)
 800633e:	2201      	movs	r2, #1
 8006340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006342:	f7fd fe35 	bl	8003fb0 <HAL_GetTick>
 8006346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006348:	e008      	b.n	800635c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800634a:	f7fd fe31 	bl	8003fb0 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d901      	bls.n	800635c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e064      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800635c:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0f0      	beq.n	800634a <HAL_RCC_OscConfig+0x452>
 8006368:	e05c      	b.n	8006424 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800636a:	4b10      	ldr	r3, [pc, #64]	; (80063ac <HAL_RCC_OscConfig+0x4b4>)
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006370:	f7fd fe1e 	bl	8003fb0 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006378:	f7fd fe1a 	bl	8003fb0 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e04d      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800638a:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <HAL_RCC_OscConfig+0x4ac>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1f0      	bne.n	8006378 <HAL_RCC_OscConfig+0x480>
 8006396:	e045      	b.n	8006424 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d107      	bne.n	80063b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e040      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
 80063a4:	40023800 	.word	0x40023800
 80063a8:	40007000 	.word	0x40007000
 80063ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063b0:	4b1f      	ldr	r3, [pc, #124]	; (8006430 <HAL_RCC_OscConfig+0x538>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d030      	beq.n	8006420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d129      	bne.n	8006420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d122      	bne.n	8006420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063e0:	4013      	ands	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d119      	bne.n	8006420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	3b01      	subs	r3, #1
 80063fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d10f      	bne.n	8006420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800640c:	429a      	cmp	r2, r3
 800640e:	d107      	bne.n	8006420 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800641c:	429a      	cmp	r2, r3
 800641e:	d001      	beq.n	8006424 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	40023800 	.word	0x40023800

08006434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e041      	b.n	80064ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fd f9d4 	bl	8003808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f000 fde0 	bl	8007038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d001      	beq.n	80064ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e04e      	b.n	800658a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0201 	orr.w	r2, r2, #1
 8006502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a23      	ldr	r2, [pc, #140]	; (8006598 <HAL_TIM_Base_Start_IT+0xc4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d022      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x80>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006516:	d01d      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x80>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1f      	ldr	r2, [pc, #124]	; (800659c <HAL_TIM_Base_Start_IT+0xc8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d018      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x80>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a1e      	ldr	r2, [pc, #120]	; (80065a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d013      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x80>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a1c      	ldr	r2, [pc, #112]	; (80065a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00e      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x80>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a1b      	ldr	r2, [pc, #108]	; (80065a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d009      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x80>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a19      	ldr	r2, [pc, #100]	; (80065ac <HAL_TIM_Base_Start_IT+0xd8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d004      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x80>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a18      	ldr	r2, [pc, #96]	; (80065b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d111      	bne.n	8006578 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b06      	cmp	r3, #6
 8006564:	d010      	beq.n	8006588 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0201 	orr.w	r2, r2, #1
 8006574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006576:	e007      	b.n	8006588 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40010000 	.word	0x40010000
 800659c:	40000400 	.word	0x40000400
 80065a0:	40000800 	.word	0x40000800
 80065a4:	40000c00 	.word	0x40000c00
 80065a8:	40010400 	.word	0x40010400
 80065ac:	40014000 	.word	0x40014000
 80065b0:	40001800 	.word	0x40001800

080065b4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e041      	b.n	800664a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d106      	bne.n	80065e0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fd f8b6 	bl	800374c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3304      	adds	r3, #4
 80065f0:	4619      	mov	r1, r3
 80065f2:	4610      	mov	r0, r2
 80065f4:	f000 fd20 	bl	8007038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e041      	b.n	80066e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d106      	bne.n	800667e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7fd f88d 	bl	8003798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2202      	movs	r2, #2
 8006682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3304      	adds	r3, #4
 800668e:	4619      	mov	r1, r3
 8006690:	4610      	mov	r0, r2
 8006692:	f000 fcd1 	bl	8007038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d109      	bne.n	8006714 <HAL_TIM_PWM_Start+0x24>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b01      	cmp	r3, #1
 800670a:	bf14      	ite	ne
 800670c:	2301      	movne	r3, #1
 800670e:	2300      	moveq	r3, #0
 8006710:	b2db      	uxtb	r3, r3
 8006712:	e022      	b.n	800675a <HAL_TIM_PWM_Start+0x6a>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b04      	cmp	r3, #4
 8006718:	d109      	bne.n	800672e <HAL_TIM_PWM_Start+0x3e>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b01      	cmp	r3, #1
 8006724:	bf14      	ite	ne
 8006726:	2301      	movne	r3, #1
 8006728:	2300      	moveq	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	e015      	b.n	800675a <HAL_TIM_PWM_Start+0x6a>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b08      	cmp	r3, #8
 8006732:	d109      	bne.n	8006748 <HAL_TIM_PWM_Start+0x58>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b01      	cmp	r3, #1
 800673e:	bf14      	ite	ne
 8006740:	2301      	movne	r3, #1
 8006742:	2300      	moveq	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	e008      	b.n	800675a <HAL_TIM_PWM_Start+0x6a>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b01      	cmp	r3, #1
 8006752:	bf14      	ite	ne
 8006754:	2301      	movne	r3, #1
 8006756:	2300      	moveq	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e07c      	b.n	800685c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d104      	bne.n	8006772 <HAL_TIM_PWM_Start+0x82>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006770:	e013      	b.n	800679a <HAL_TIM_PWM_Start+0xaa>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b04      	cmp	r3, #4
 8006776:	d104      	bne.n	8006782 <HAL_TIM_PWM_Start+0x92>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006780:	e00b      	b.n	800679a <HAL_TIM_PWM_Start+0xaa>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b08      	cmp	r3, #8
 8006786:	d104      	bne.n	8006792 <HAL_TIM_PWM_Start+0xa2>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006790:	e003      	b.n	800679a <HAL_TIM_PWM_Start+0xaa>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2202      	movs	r2, #2
 8006796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2201      	movs	r2, #1
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fe98 	bl	80074d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a2d      	ldr	r2, [pc, #180]	; (8006864 <HAL_TIM_PWM_Start+0x174>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d004      	beq.n	80067bc <HAL_TIM_PWM_Start+0xcc>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a2c      	ldr	r2, [pc, #176]	; (8006868 <HAL_TIM_PWM_Start+0x178>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d101      	bne.n	80067c0 <HAL_TIM_PWM_Start+0xd0>
 80067bc:	2301      	movs	r3, #1
 80067be:	e000      	b.n	80067c2 <HAL_TIM_PWM_Start+0xd2>
 80067c0:	2300      	movs	r3, #0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a22      	ldr	r2, [pc, #136]	; (8006864 <HAL_TIM_PWM_Start+0x174>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d022      	beq.n	8006826 <HAL_TIM_PWM_Start+0x136>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e8:	d01d      	beq.n	8006826 <HAL_TIM_PWM_Start+0x136>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1f      	ldr	r2, [pc, #124]	; (800686c <HAL_TIM_PWM_Start+0x17c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d018      	beq.n	8006826 <HAL_TIM_PWM_Start+0x136>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1d      	ldr	r2, [pc, #116]	; (8006870 <HAL_TIM_PWM_Start+0x180>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d013      	beq.n	8006826 <HAL_TIM_PWM_Start+0x136>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1c      	ldr	r2, [pc, #112]	; (8006874 <HAL_TIM_PWM_Start+0x184>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00e      	beq.n	8006826 <HAL_TIM_PWM_Start+0x136>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a16      	ldr	r2, [pc, #88]	; (8006868 <HAL_TIM_PWM_Start+0x178>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d009      	beq.n	8006826 <HAL_TIM_PWM_Start+0x136>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a18      	ldr	r2, [pc, #96]	; (8006878 <HAL_TIM_PWM_Start+0x188>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d004      	beq.n	8006826 <HAL_TIM_PWM_Start+0x136>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a16      	ldr	r2, [pc, #88]	; (800687c <HAL_TIM_PWM_Start+0x18c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d111      	bne.n	800684a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b06      	cmp	r3, #6
 8006836:	d010      	beq.n	800685a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0201 	orr.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006848:	e007      	b.n	800685a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f042 0201 	orr.w	r2, r2, #1
 8006858:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	40010000 	.word	0x40010000
 8006868:	40010400 	.word	0x40010400
 800686c:	40000400 	.word	0x40000400
 8006870:	40000800 	.word	0x40000800
 8006874:	40000c00 	.word	0x40000c00
 8006878:	40014000 	.word	0x40014000
 800687c:	40001800 	.word	0x40001800

08006880 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2200      	movs	r2, #0
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fe20 	bl	80074d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a2e      	ldr	r2, [pc, #184]	; (8006958 <HAL_TIM_PWM_Stop+0xd8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d004      	beq.n	80068ac <HAL_TIM_PWM_Stop+0x2c>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a2d      	ldr	r2, [pc, #180]	; (800695c <HAL_TIM_PWM_Stop+0xdc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d101      	bne.n	80068b0 <HAL_TIM_PWM_Stop+0x30>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <HAL_TIM_PWM_Stop+0x32>
 80068b0:	2300      	movs	r3, #0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d017      	beq.n	80068e6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6a1a      	ldr	r2, [r3, #32]
 80068bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80068c0:	4013      	ands	r3, r2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10f      	bne.n	80068e6 <HAL_TIM_PWM_Stop+0x66>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6a1a      	ldr	r2, [r3, #32]
 80068cc:	f240 4344 	movw	r3, #1092	; 0x444
 80068d0:	4013      	ands	r3, r2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d107      	bne.n	80068e6 <HAL_TIM_PWM_Stop+0x66>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6a1a      	ldr	r2, [r3, #32]
 80068ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80068f0:	4013      	ands	r3, r2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10f      	bne.n	8006916 <HAL_TIM_PWM_Stop+0x96>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6a1a      	ldr	r2, [r3, #32]
 80068fc:	f240 4344 	movw	r3, #1092	; 0x444
 8006900:	4013      	ands	r3, r2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d107      	bne.n	8006916 <HAL_TIM_PWM_Stop+0x96>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0201 	bic.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d104      	bne.n	8006926 <HAL_TIM_PWM_Stop+0xa6>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006924:	e013      	b.n	800694e <HAL_TIM_PWM_Stop+0xce>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b04      	cmp	r3, #4
 800692a:	d104      	bne.n	8006936 <HAL_TIM_PWM_Stop+0xb6>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006934:	e00b      	b.n	800694e <HAL_TIM_PWM_Stop+0xce>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b08      	cmp	r3, #8
 800693a:	d104      	bne.n	8006946 <HAL_TIM_PWM_Stop+0xc6>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006944:	e003      	b.n	800694e <HAL_TIM_PWM_Stop+0xce>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	40010000 	.word	0x40010000
 800695c:	40010400 	.word	0x40010400

08006960 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d104      	bne.n	800697e <HAL_TIM_IC_Start_IT+0x1e>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800697a:	b2db      	uxtb	r3, r3
 800697c:	e013      	b.n	80069a6 <HAL_TIM_IC_Start_IT+0x46>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b04      	cmp	r3, #4
 8006982:	d104      	bne.n	800698e <HAL_TIM_IC_Start_IT+0x2e>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800698a:	b2db      	uxtb	r3, r3
 800698c:	e00b      	b.n	80069a6 <HAL_TIM_IC_Start_IT+0x46>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b08      	cmp	r3, #8
 8006992:	d104      	bne.n	800699e <HAL_TIM_IC_Start_IT+0x3e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800699a:	b2db      	uxtb	r3, r3
 800699c:	e003      	b.n	80069a6 <HAL_TIM_IC_Start_IT+0x46>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d104      	bne.n	80069b8 <HAL_TIM_IC_Start_IT+0x58>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	e013      	b.n	80069e0 <HAL_TIM_IC_Start_IT+0x80>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	d104      	bne.n	80069c8 <HAL_TIM_IC_Start_IT+0x68>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	e00b      	b.n	80069e0 <HAL_TIM_IC_Start_IT+0x80>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d104      	bne.n	80069d8 <HAL_TIM_IC_Start_IT+0x78>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	e003      	b.n	80069e0 <HAL_TIM_IC_Start_IT+0x80>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d102      	bne.n	80069ee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80069e8:	7b7b      	ldrb	r3, [r7, #13]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d001      	beq.n	80069f2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e0cc      	b.n	8006b8c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d104      	bne.n	8006a02 <HAL_TIM_IC_Start_IT+0xa2>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a00:	e013      	b.n	8006a2a <HAL_TIM_IC_Start_IT+0xca>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d104      	bne.n	8006a12 <HAL_TIM_IC_Start_IT+0xb2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a10:	e00b      	b.n	8006a2a <HAL_TIM_IC_Start_IT+0xca>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d104      	bne.n	8006a22 <HAL_TIM_IC_Start_IT+0xc2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a20:	e003      	b.n	8006a2a <HAL_TIM_IC_Start_IT+0xca>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d104      	bne.n	8006a3a <HAL_TIM_IC_Start_IT+0xda>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a38:	e013      	b.n	8006a62 <HAL_TIM_IC_Start_IT+0x102>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d104      	bne.n	8006a4a <HAL_TIM_IC_Start_IT+0xea>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a48:	e00b      	b.n	8006a62 <HAL_TIM_IC_Start_IT+0x102>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d104      	bne.n	8006a5a <HAL_TIM_IC_Start_IT+0xfa>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a58:	e003      	b.n	8006a62 <HAL_TIM_IC_Start_IT+0x102>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b0c      	cmp	r3, #12
 8006a66:	d841      	bhi.n	8006aec <HAL_TIM_IC_Start_IT+0x18c>
 8006a68:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <HAL_TIM_IC_Start_IT+0x110>)
 8006a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6e:	bf00      	nop
 8006a70:	08006aa5 	.word	0x08006aa5
 8006a74:	08006aed 	.word	0x08006aed
 8006a78:	08006aed 	.word	0x08006aed
 8006a7c:	08006aed 	.word	0x08006aed
 8006a80:	08006ab7 	.word	0x08006ab7
 8006a84:	08006aed 	.word	0x08006aed
 8006a88:	08006aed 	.word	0x08006aed
 8006a8c:	08006aed 	.word	0x08006aed
 8006a90:	08006ac9 	.word	0x08006ac9
 8006a94:	08006aed 	.word	0x08006aed
 8006a98:	08006aed 	.word	0x08006aed
 8006a9c:	08006aed 	.word	0x08006aed
 8006aa0:	08006adb 	.word	0x08006adb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0202 	orr.w	r2, r2, #2
 8006ab2:	60da      	str	r2, [r3, #12]
      break;
 8006ab4:	e01d      	b.n	8006af2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f042 0204 	orr.w	r2, r2, #4
 8006ac4:	60da      	str	r2, [r3, #12]
      break;
 8006ac6:	e014      	b.n	8006af2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0208 	orr.w	r2, r2, #8
 8006ad6:	60da      	str	r2, [r3, #12]
      break;
 8006ad8:	e00b      	b.n	8006af2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0210 	orr.w	r2, r2, #16
 8006ae8:	60da      	str	r2, [r3, #12]
      break;
 8006aea:	e002      	b.n	8006af2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	73fb      	strb	r3, [r7, #15]
      break;
 8006af0:	bf00      	nop
  }

  if (status == HAL_OK)
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d148      	bne.n	8006b8a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2201      	movs	r2, #1
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fce9 	bl	80074d8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a22      	ldr	r2, [pc, #136]	; (8006b94 <HAL_TIM_IC_Start_IT+0x234>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d022      	beq.n	8006b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b18:	d01d      	beq.n	8006b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a1e      	ldr	r2, [pc, #120]	; (8006b98 <HAL_TIM_IC_Start_IT+0x238>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d018      	beq.n	8006b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a1c      	ldr	r2, [pc, #112]	; (8006b9c <HAL_TIM_IC_Start_IT+0x23c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d013      	beq.n	8006b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1b      	ldr	r2, [pc, #108]	; (8006ba0 <HAL_TIM_IC_Start_IT+0x240>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00e      	beq.n	8006b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a19      	ldr	r2, [pc, #100]	; (8006ba4 <HAL_TIM_IC_Start_IT+0x244>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d009      	beq.n	8006b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a18      	ldr	r2, [pc, #96]	; (8006ba8 <HAL_TIM_IC_Start_IT+0x248>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d004      	beq.n	8006b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a16      	ldr	r2, [pc, #88]	; (8006bac <HAL_TIM_IC_Start_IT+0x24c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d111      	bne.n	8006b7a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b06      	cmp	r3, #6
 8006b66:	d010      	beq.n	8006b8a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0201 	orr.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b78:	e007      	b.n	8006b8a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0201 	orr.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40010000 	.word	0x40010000
 8006b98:	40000400 	.word	0x40000400
 8006b9c:	40000800 	.word	0x40000800
 8006ba0:	40000c00 	.word	0x40000c00
 8006ba4:	40010400 	.word	0x40010400
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40001800 	.word	0x40001800

08006bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d122      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d11b      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f06f 0202 	mvn.w	r2, #2
 8006bdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	f003 0303 	and.w	r3, r3, #3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fa fa50 	bl	8001098 <HAL_TIM_IC_CaptureCallback>
 8006bf8:	e005      	b.n	8006c06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f9fe 	bl	8006ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fa05 	bl	8007010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d122      	bne.n	8006c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d11b      	bne.n	8006c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f06f 0204 	mvn.w	r2, #4
 8006c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2202      	movs	r2, #2
 8006c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fa fa26 	bl	8001098 <HAL_TIM_IC_CaptureCallback>
 8006c4c:	e005      	b.n	8006c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f9d4 	bl	8006ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f9db 	bl	8007010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b08      	cmp	r3, #8
 8006c6c:	d122      	bne.n	8006cb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d11b      	bne.n	8006cb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f06f 0208 	mvn.w	r2, #8
 8006c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2204      	movs	r2, #4
 8006c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fa f9fc 	bl	8001098 <HAL_TIM_IC_CaptureCallback>
 8006ca0:	e005      	b.n	8006cae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f9aa 	bl	8006ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f9b1 	bl	8007010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b10      	cmp	r3, #16
 8006cc0:	d122      	bne.n	8006d08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	2b10      	cmp	r3, #16
 8006cce:	d11b      	bne.n	8006d08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f06f 0210 	mvn.w	r2, #16
 8006cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2208      	movs	r2, #8
 8006cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fa f9d2 	bl	8001098 <HAL_TIM_IC_CaptureCallback>
 8006cf4:	e005      	b.n	8006d02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f980 	bl	8006ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f987 	bl	8007010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d10e      	bne.n	8006d34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d107      	bne.n	8006d34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f06f 0201 	mvn.w	r2, #1
 8006d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fc fbfa 	bl	8003528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3e:	2b80      	cmp	r3, #128	; 0x80
 8006d40:	d10e      	bne.n	8006d60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4c:	2b80      	cmp	r3, #128	; 0x80
 8006d4e:	d107      	bne.n	8006d60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fc68 	bl	8007630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6a:	2b40      	cmp	r3, #64	; 0x40
 8006d6c:	d10e      	bne.n	8006d8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b40      	cmp	r3, #64	; 0x40
 8006d7a:	d107      	bne.n	8006d8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f94c 	bl	8007024 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d10e      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d107      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f06f 0220 	mvn.w	r2, #32
 8006db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fc32 	bl	800761c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006db8:	bf00      	nop
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d101      	bne.n	8006dde <HAL_TIM_OC_ConfigChannel+0x1e>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	e048      	b.n	8006e70 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b0c      	cmp	r3, #12
 8006dea:	d839      	bhi.n	8006e60 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e29 	.word	0x08006e29
 8006df8:	08006e61 	.word	0x08006e61
 8006dfc:	08006e61 	.word	0x08006e61
 8006e00:	08006e61 	.word	0x08006e61
 8006e04:	08006e37 	.word	0x08006e37
 8006e08:	08006e61 	.word	0x08006e61
 8006e0c:	08006e61 	.word	0x08006e61
 8006e10:	08006e61 	.word	0x08006e61
 8006e14:	08006e45 	.word	0x08006e45
 8006e18:	08006e61 	.word	0x08006e61
 8006e1c:	08006e61 	.word	0x08006e61
 8006e20:	08006e61 	.word	0x08006e61
 8006e24:	08006e53 	.word	0x08006e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 f9a2 	bl	8007178 <TIM_OC1_SetConfig>
      break;
 8006e34:	e017      	b.n	8006e66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 fa0b 	bl	8007258 <TIM_OC2_SetConfig>
      break;
 8006e42:	e010      	b.n	8006e66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fa7a 	bl	8007344 <TIM_OC3_SetConfig>
      break;
 8006e50:	e009      	b.n	8006e66 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68b9      	ldr	r1, [r7, #8]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fae7 	bl	800742c <TIM_OC4_SetConfig>
      break;
 8006e5e:	e002      	b.n	8006e66 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	75fb      	strb	r3, [r7, #23]
      break;
 8006e64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d101      	bne.n	8006e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e92:	2302      	movs	r3, #2
 8006e94:	e0ae      	b.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b0c      	cmp	r3, #12
 8006ea2:	f200 809f 	bhi.w	8006fe4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ee1 	.word	0x08006ee1
 8006eb0:	08006fe5 	.word	0x08006fe5
 8006eb4:	08006fe5 	.word	0x08006fe5
 8006eb8:	08006fe5 	.word	0x08006fe5
 8006ebc:	08006f21 	.word	0x08006f21
 8006ec0:	08006fe5 	.word	0x08006fe5
 8006ec4:	08006fe5 	.word	0x08006fe5
 8006ec8:	08006fe5 	.word	0x08006fe5
 8006ecc:	08006f63 	.word	0x08006f63
 8006ed0:	08006fe5 	.word	0x08006fe5
 8006ed4:	08006fe5 	.word	0x08006fe5
 8006ed8:	08006fe5 	.word	0x08006fe5
 8006edc:	08006fa3 	.word	0x08006fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68b9      	ldr	r1, [r7, #8]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 f946 	bl	8007178 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0208 	orr.w	r2, r2, #8
 8006efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	699a      	ldr	r2, [r3, #24]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0204 	bic.w	r2, r2, #4
 8006f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6999      	ldr	r1, [r3, #24]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	691a      	ldr	r2, [r3, #16]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	619a      	str	r2, [r3, #24]
      break;
 8006f1e:	e064      	b.n	8006fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68b9      	ldr	r1, [r7, #8]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 f996 	bl	8007258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699a      	ldr	r2, [r3, #24]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6999      	ldr	r1, [r3, #24]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	021a      	lsls	r2, r3, #8
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	619a      	str	r2, [r3, #24]
      break;
 8006f60:	e043      	b.n	8006fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68b9      	ldr	r1, [r7, #8]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 f9eb 	bl	8007344 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69da      	ldr	r2, [r3, #28]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f042 0208 	orr.w	r2, r2, #8
 8006f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69da      	ldr	r2, [r3, #28]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 0204 	bic.w	r2, r2, #4
 8006f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69d9      	ldr	r1, [r3, #28]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	691a      	ldr	r2, [r3, #16]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	61da      	str	r2, [r3, #28]
      break;
 8006fa0:	e023      	b.n	8006fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68b9      	ldr	r1, [r7, #8]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 fa3f 	bl	800742c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69da      	ldr	r2, [r3, #28]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69da      	ldr	r2, [r3, #28]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	69d9      	ldr	r1, [r3, #28]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	021a      	lsls	r2, r3, #8
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	61da      	str	r2, [r3, #28]
      break;
 8006fe2:	e002      	b.n	8006fea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a40      	ldr	r2, [pc, #256]	; (800714c <TIM_Base_SetConfig+0x114>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d013      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007056:	d00f      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a3d      	ldr	r2, [pc, #244]	; (8007150 <TIM_Base_SetConfig+0x118>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00b      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a3c      	ldr	r2, [pc, #240]	; (8007154 <TIM_Base_SetConfig+0x11c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d007      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a3b      	ldr	r2, [pc, #236]	; (8007158 <TIM_Base_SetConfig+0x120>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d003      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a3a      	ldr	r2, [pc, #232]	; (800715c <TIM_Base_SetConfig+0x124>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d108      	bne.n	800708a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a2f      	ldr	r2, [pc, #188]	; (800714c <TIM_Base_SetConfig+0x114>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d02b      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007098:	d027      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a2c      	ldr	r2, [pc, #176]	; (8007150 <TIM_Base_SetConfig+0x118>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d023      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a2b      	ldr	r2, [pc, #172]	; (8007154 <TIM_Base_SetConfig+0x11c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d01f      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a2a      	ldr	r2, [pc, #168]	; (8007158 <TIM_Base_SetConfig+0x120>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d01b      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a29      	ldr	r2, [pc, #164]	; (800715c <TIM_Base_SetConfig+0x124>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d017      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a28      	ldr	r2, [pc, #160]	; (8007160 <TIM_Base_SetConfig+0x128>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d013      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a27      	ldr	r2, [pc, #156]	; (8007164 <TIM_Base_SetConfig+0x12c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00f      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a26      	ldr	r2, [pc, #152]	; (8007168 <TIM_Base_SetConfig+0x130>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00b      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a25      	ldr	r2, [pc, #148]	; (800716c <TIM_Base_SetConfig+0x134>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d007      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a24      	ldr	r2, [pc, #144]	; (8007170 <TIM_Base_SetConfig+0x138>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d003      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a23      	ldr	r2, [pc, #140]	; (8007174 <TIM_Base_SetConfig+0x13c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d108      	bne.n	80070fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a0a      	ldr	r2, [pc, #40]	; (800714c <TIM_Base_SetConfig+0x114>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_Base_SetConfig+0xf8>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a0c      	ldr	r2, [pc, #48]	; (800715c <TIM_Base_SetConfig+0x124>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d103      	bne.n	8007138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	615a      	str	r2, [r3, #20]
}
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40010000 	.word	0x40010000
 8007150:	40000400 	.word	0x40000400
 8007154:	40000800 	.word	0x40000800
 8007158:	40000c00 	.word	0x40000c00
 800715c:	40010400 	.word	0x40010400
 8007160:	40014000 	.word	0x40014000
 8007164:	40014400 	.word	0x40014400
 8007168:	40014800 	.word	0x40014800
 800716c:	40001800 	.word	0x40001800
 8007170:	40001c00 	.word	0x40001c00
 8007174:	40002000 	.word	0x40002000

08007178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	f023 0201 	bic.w	r2, r3, #1
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0303 	bic.w	r3, r3, #3
 80071ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f023 0302 	bic.w	r3, r3, #2
 80071c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a20      	ldr	r2, [pc, #128]	; (8007250 <TIM_OC1_SetConfig+0xd8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d003      	beq.n	80071dc <TIM_OC1_SetConfig+0x64>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a1f      	ldr	r2, [pc, #124]	; (8007254 <TIM_OC1_SetConfig+0xdc>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d10c      	bne.n	80071f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f023 0308 	bic.w	r3, r3, #8
 80071e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f023 0304 	bic.w	r3, r3, #4
 80071f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a15      	ldr	r2, [pc, #84]	; (8007250 <TIM_OC1_SetConfig+0xd8>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d003      	beq.n	8007206 <TIM_OC1_SetConfig+0x8e>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a14      	ldr	r2, [pc, #80]	; (8007254 <TIM_OC1_SetConfig+0xdc>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d111      	bne.n	800722a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800720c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	4313      	orrs	r3, r2
 800721e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	621a      	str	r2, [r3, #32]
}
 8007244:	bf00      	nop
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	40010000 	.word	0x40010000
 8007254:	40010400 	.word	0x40010400

08007258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	f023 0210 	bic.w	r2, r3, #16
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800728e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f023 0320 	bic.w	r3, r3, #32
 80072a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	011b      	lsls	r3, r3, #4
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a22      	ldr	r2, [pc, #136]	; (800733c <TIM_OC2_SetConfig+0xe4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d003      	beq.n	80072c0 <TIM_OC2_SetConfig+0x68>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a21      	ldr	r2, [pc, #132]	; (8007340 <TIM_OC2_SetConfig+0xe8>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d10d      	bne.n	80072dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a17      	ldr	r2, [pc, #92]	; (800733c <TIM_OC2_SetConfig+0xe4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d003      	beq.n	80072ec <TIM_OC2_SetConfig+0x94>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a16      	ldr	r2, [pc, #88]	; (8007340 <TIM_OC2_SetConfig+0xe8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d113      	bne.n	8007314 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4313      	orrs	r3, r2
 8007312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	621a      	str	r2, [r3, #32]
}
 800732e:	bf00      	nop
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	40010000 	.word	0x40010000
 8007340:	40010400 	.word	0x40010400

08007344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0303 	bic.w	r3, r3, #3
 800737a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800738c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a21      	ldr	r2, [pc, #132]	; (8007424 <TIM_OC3_SetConfig+0xe0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d003      	beq.n	80073aa <TIM_OC3_SetConfig+0x66>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a20      	ldr	r2, [pc, #128]	; (8007428 <TIM_OC3_SetConfig+0xe4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d10d      	bne.n	80073c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	021b      	lsls	r3, r3, #8
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a16      	ldr	r2, [pc, #88]	; (8007424 <TIM_OC3_SetConfig+0xe0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d003      	beq.n	80073d6 <TIM_OC3_SetConfig+0x92>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a15      	ldr	r2, [pc, #84]	; (8007428 <TIM_OC3_SetConfig+0xe4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d113      	bne.n	80073fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	011b      	lsls	r3, r3, #4
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	621a      	str	r2, [r3, #32]
}
 8007418:	bf00      	nop
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	40010000 	.word	0x40010000
 8007428:	40010400 	.word	0x40010400

0800742c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800745a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	021b      	lsls	r3, r3, #8
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	4313      	orrs	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	031b      	lsls	r3, r3, #12
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4313      	orrs	r3, r2
 8007482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a12      	ldr	r2, [pc, #72]	; (80074d0 <TIM_OC4_SetConfig+0xa4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d003      	beq.n	8007494 <TIM_OC4_SetConfig+0x68>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a11      	ldr	r2, [pc, #68]	; (80074d4 <TIM_OC4_SetConfig+0xa8>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d109      	bne.n	80074a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800749a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	019b      	lsls	r3, r3, #6
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	621a      	str	r2, [r3, #32]
}
 80074c2:	bf00      	nop
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	40010000 	.word	0x40010000
 80074d4:	40010400 	.word	0x40010400

080074d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f003 031f 	and.w	r3, r3, #31
 80074ea:	2201      	movs	r2, #1
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6a1a      	ldr	r2, [r3, #32]
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	43db      	mvns	r3, r3
 80074fa:	401a      	ands	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a1a      	ldr	r2, [r3, #32]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f003 031f 	and.w	r3, r3, #31
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	fa01 f303 	lsl.w	r3, r1, r3
 8007510:	431a      	orrs	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	621a      	str	r2, [r3, #32]
}
 8007516:	bf00      	nop
 8007518:	371c      	adds	r7, #28
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007538:	2302      	movs	r3, #2
 800753a:	e05a      	b.n	80075f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a21      	ldr	r2, [pc, #132]	; (8007600 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d022      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007588:	d01d      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1d      	ldr	r2, [pc, #116]	; (8007604 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d018      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1b      	ldr	r2, [pc, #108]	; (8007608 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d013      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1a      	ldr	r2, [pc, #104]	; (800760c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00e      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a18      	ldr	r2, [pc, #96]	; (8007610 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d009      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a17      	ldr	r2, [pc, #92]	; (8007614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d004      	beq.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a15      	ldr	r2, [pc, #84]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d10c      	bne.n	80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	40010000 	.word	0x40010000
 8007604:	40000400 	.word	0x40000400
 8007608:	40000800 	.word	0x40000800
 800760c:	40000c00 	.word	0x40000c00
 8007610:	40010400 	.word	0x40010400
 8007614:	40014000 	.word	0x40014000
 8007618:	40001800 	.word	0x40001800

0800761c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e03f      	b.n	80076d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d106      	bne.n	8007670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fc f992 	bl	8003994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2224      	movs	r2, #36	; 0x24
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fcdf 	bl	800804c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800769c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	695a      	ldr	r2, [r3, #20]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68da      	ldr	r2, [r3, #12]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2220      	movs	r2, #32
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	4613      	mov	r3, r2
 80076ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d11d      	bne.n	8007734 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <HAL_UART_Receive_IT+0x26>
 80076fe:	88fb      	ldrh	r3, [r7, #6]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e016      	b.n	8007736 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800770e:	2b01      	cmp	r3, #1
 8007710:	d101      	bne.n	8007716 <HAL_UART_Receive_IT+0x38>
 8007712:	2302      	movs	r3, #2
 8007714:	e00f      	b.n	8007736 <HAL_UART_Receive_IT+0x58>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007724:	88fb      	ldrh	r3, [r7, #6]
 8007726:	461a      	mov	r2, r3
 8007728:	68b9      	ldr	r1, [r7, #8]
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 fab6 	bl	8007c9c <UART_Start_Receive_IT>
 8007730:	4603      	mov	r3, r0
 8007732:	e000      	b.n	8007736 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007734:	2302      	movs	r3, #2
  }
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b0ba      	sub	sp, #232	; 0xe8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007766:	2300      	movs	r3, #0
 8007768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800776c:	2300      	movs	r3, #0
 800776e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007776:	f003 030f 	and.w	r3, r3, #15
 800777a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800777e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10f      	bne.n	80077a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <HAL_UART_IRQHandler+0x66>
 8007792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007796:	f003 0320 	and.w	r3, r3, #32
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fb99 	bl	8007ed6 <UART_Receive_IT>
      return;
 80077a4:	e256      	b.n	8007c54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 80de 	beq.w	800796c <HAL_UART_IRQHandler+0x22c>
 80077b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d106      	bne.n	80077ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80d1 	beq.w	800796c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00b      	beq.n	80077ee <HAL_UART_IRQHandler+0xae>
 80077d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d005      	beq.n	80077ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	f043 0201 	orr.w	r2, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f2:	f003 0304 	and.w	r3, r3, #4
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00b      	beq.n	8007812 <HAL_UART_IRQHandler+0xd2>
 80077fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d005      	beq.n	8007812 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	f043 0202 	orr.w	r2, r3, #2
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00b      	beq.n	8007836 <HAL_UART_IRQHandler+0xf6>
 800781e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	f043 0204 	orr.w	r2, r3, #4
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800783a:	f003 0308 	and.w	r3, r3, #8
 800783e:	2b00      	cmp	r3, #0
 8007840:	d011      	beq.n	8007866 <HAL_UART_IRQHandler+0x126>
 8007842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b00      	cmp	r3, #0
 800784c:	d105      	bne.n	800785a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800784e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	f043 0208 	orr.w	r2, r3, #8
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 81ed 	beq.w	8007c4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007874:	f003 0320 	and.w	r3, r3, #32
 8007878:	2b00      	cmp	r3, #0
 800787a:	d008      	beq.n	800788e <HAL_UART_IRQHandler+0x14e>
 800787c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007880:	f003 0320 	and.w	r3, r3, #32
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fb24 	bl	8007ed6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007898:	2b40      	cmp	r3, #64	; 0x40
 800789a:	bf0c      	ite	eq
 800789c:	2301      	moveq	r3, #1
 800789e:	2300      	movne	r3, #0
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	f003 0308 	and.w	r3, r3, #8
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d103      	bne.n	80078ba <HAL_UART_IRQHandler+0x17a>
 80078b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d04f      	beq.n	800795a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fa2c 	bl	8007d18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ca:	2b40      	cmp	r3, #64	; 0x40
 80078cc:	d141      	bne.n	8007952 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3314      	adds	r3, #20
 80078d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3314      	adds	r3, #20
 80078f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1d9      	bne.n	80078ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791e:	2b00      	cmp	r3, #0
 8007920:	d013      	beq.n	800794a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	4a7d      	ldr	r2, [pc, #500]	; (8007b1c <HAL_UART_IRQHandler+0x3dc>)
 8007928:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	4618      	mov	r0, r3
 8007930:	f7fc fcc0 	bl	80042b4 <HAL_DMA_Abort_IT>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d016      	beq.n	8007968 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007944:	4610      	mov	r0, r2
 8007946:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007948:	e00e      	b.n	8007968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f990 	bl	8007c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007950:	e00a      	b.n	8007968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f98c 	bl	8007c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	e006      	b.n	8007968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f988 	bl	8007c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007966:	e170      	b.n	8007c4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007968:	bf00      	nop
    return;
 800796a:	e16e      	b.n	8007c4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007970:	2b01      	cmp	r3, #1
 8007972:	f040 814a 	bne.w	8007c0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797a:	f003 0310 	and.w	r3, r3, #16
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 8143 	beq.w	8007c0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 813c 	beq.w	8007c0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007992:	2300      	movs	r3, #0
 8007994:	60bb      	str	r3, [r7, #8]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	60bb      	str	r3, [r7, #8]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	60bb      	str	r3, [r7, #8]
 80079a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b2:	2b40      	cmp	r3, #64	; 0x40
 80079b4:	f040 80b4 	bne.w	8007b20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 8140 	beq.w	8007c4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079d6:	429a      	cmp	r2, r3
 80079d8:	f080 8139 	bcs.w	8007c4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ee:	f000 8088 	beq.w	8007b02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	330c      	adds	r3, #12
 8007a1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1d9      	bne.n	80079f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3314      	adds	r3, #20
 8007a44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a50:	f023 0301 	bic.w	r3, r3, #1
 8007a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3314      	adds	r3, #20
 8007a5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e1      	bne.n	8007a3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3314      	adds	r3, #20
 8007a80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a84:	e853 3f00 	ldrex	r3, [r3]
 8007a88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3314      	adds	r3, #20
 8007a9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007aa0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007aa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e3      	bne.n	8007a7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	330c      	adds	r3, #12
 8007ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad2:	f023 0310 	bic.w	r3, r3, #16
 8007ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	330c      	adds	r3, #12
 8007ae0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ae4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ae6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007aea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e3      	bne.n	8007ac0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fc fb69 	bl	80041d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f8b6 	bl	8007c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b18:	e099      	b.n	8007c4e <HAL_UART_IRQHandler+0x50e>
 8007b1a:	bf00      	nop
 8007b1c:	08007ddf 	.word	0x08007ddf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 808b 	beq.w	8007c52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 8086 	beq.w	8007c52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	330c      	adds	r3, #12
 8007b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	330c      	adds	r3, #12
 8007b66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b6a:	647a      	str	r2, [r7, #68]	; 0x44
 8007b6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e3      	bne.n	8007b46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3314      	adds	r3, #20
 8007b84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	f023 0301 	bic.w	r3, r3, #1
 8007b94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3314      	adds	r3, #20
 8007b9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ba2:	633a      	str	r2, [r7, #48]	; 0x30
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e3      	bne.n	8007b7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	330c      	adds	r3, #12
 8007bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	e853 3f00 	ldrex	r3, [r3]
 8007bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 0310 	bic.w	r3, r3, #16
 8007bda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	330c      	adds	r3, #12
 8007be4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007be8:	61fa      	str	r2, [r7, #28]
 8007bea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bec:	69b9      	ldr	r1, [r7, #24]
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	e841 2300 	strex	r3, r2, [r1]
 8007bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e3      	bne.n	8007bc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f83e 	bl	8007c84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c08:	e023      	b.n	8007c52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d009      	beq.n	8007c2a <HAL_UART_IRQHandler+0x4ea>
 8007c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f8ef 	bl	8007e06 <UART_Transmit_IT>
    return;
 8007c28:	e014      	b.n	8007c54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00e      	beq.n	8007c54 <HAL_UART_IRQHandler+0x514>
 8007c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d008      	beq.n	8007c54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f92f 	bl	8007ea6 <UART_EndTransmit_IT>
    return;
 8007c48:	e004      	b.n	8007c54 <HAL_UART_IRQHandler+0x514>
    return;
 8007c4a:	bf00      	nop
 8007c4c:	e002      	b.n	8007c54 <HAL_UART_IRQHandler+0x514>
      return;
 8007c4e:	bf00      	nop
 8007c50:	e000      	b.n	8007c54 <HAL_UART_IRQHandler+0x514>
      return;
 8007c52:	bf00      	nop
  }
}
 8007c54:	37e8      	adds	r7, #232	; 0xe8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop

08007c5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	88fa      	ldrh	r2, [r7, #6]
 8007cb4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	88fa      	ldrh	r2, [r7, #6]
 8007cba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2222      	movs	r2, #34	; 0x22
 8007cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d007      	beq.n	8007cea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ce8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	695a      	ldr	r2, [r3, #20]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f042 0201 	orr.w	r2, r2, #1
 8007cf8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68da      	ldr	r2, [r3, #12]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f042 0220 	orr.w	r2, r2, #32
 8007d08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b095      	sub	sp, #84	; 0x54
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	330c      	adds	r3, #12
 8007d26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	330c      	adds	r3, #12
 8007d3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d40:	643a      	str	r2, [r7, #64]	; 0x40
 8007d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e5      	bne.n	8007d20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3314      	adds	r3, #20
 8007d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	f023 0301 	bic.w	r3, r3, #1
 8007d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3314      	adds	r3, #20
 8007d72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e5      	bne.n	8007d54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d119      	bne.n	8007dc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	330c      	adds	r3, #12
 8007d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f023 0310 	bic.w	r3, r3, #16
 8007da6:	647b      	str	r3, [r7, #68]	; 0x44
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	330c      	adds	r3, #12
 8007dae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007db0:	61ba      	str	r2, [r7, #24]
 8007db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db4:	6979      	ldr	r1, [r7, #20]
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	e841 2300 	strex	r3, r2, [r1]
 8007dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1e5      	bne.n	8007d90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007dd2:	bf00      	nop
 8007dd4:	3754      	adds	r7, #84	; 0x54
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7ff ff39 	bl	8007c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dfe:	bf00      	nop
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b085      	sub	sp, #20
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b21      	cmp	r3, #33	; 0x21
 8007e18:	d13e      	bne.n	8007e98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e22:	d114      	bne.n	8007e4e <UART_Transmit_IT+0x48>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d110      	bne.n	8007e4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	461a      	mov	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	1c9a      	adds	r2, r3, #2
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	621a      	str	r2, [r3, #32]
 8007e4c:	e008      	b.n	8007e60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	1c59      	adds	r1, r3, #1
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6211      	str	r1, [r2, #32]
 8007e58:	781a      	ldrb	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	3b01      	subs	r3, #1
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10f      	bne.n	8007e94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68da      	ldr	r2, [r3, #12]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68da      	ldr	r2, [r3, #12]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	e000      	b.n	8007e9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e98:	2302      	movs	r3, #2
  }
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b082      	sub	sp, #8
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ebc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7ff fec8 	bl	8007c5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b08c      	sub	sp, #48	; 0x30
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b22      	cmp	r3, #34	; 0x22
 8007ee8:	f040 80ab 	bne.w	8008042 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef4:	d117      	bne.n	8007f26 <UART_Receive_IT+0x50>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d113      	bne.n	8007f26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007efe:	2300      	movs	r3, #0
 8007f00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1e:	1c9a      	adds	r2, r3, #2
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	629a      	str	r2, [r3, #40]	; 0x28
 8007f24:	e026      	b.n	8007f74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f38:	d007      	beq.n	8007f4a <UART_Receive_IT+0x74>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10a      	bne.n	8007f58 <UART_Receive_IT+0x82>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d106      	bne.n	8007f58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	701a      	strb	r2, [r3, #0]
 8007f56:	e008      	b.n	8007f6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	4619      	mov	r1, r3
 8007f82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d15a      	bne.n	800803e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0220 	bic.w	r2, r2, #32
 8007f96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	695a      	ldr	r2, [r3, #20]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0201 	bic.w	r2, r2, #1
 8007fb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d135      	bne.n	8008034 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	330c      	adds	r3, #12
 8007fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f023 0310 	bic.w	r3, r3, #16
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	330c      	adds	r3, #12
 8007fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fee:	623a      	str	r2, [r7, #32]
 8007ff0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	69f9      	ldr	r1, [r7, #28]
 8007ff4:	6a3a      	ldr	r2, [r7, #32]
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e5      	bne.n	8007fce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0310 	and.w	r3, r3, #16
 800800c:	2b10      	cmp	r3, #16
 800800e:	d10a      	bne.n	8008026 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7ff fe29 	bl	8007c84 <HAL_UARTEx_RxEventCallback>
 8008032:	e002      	b.n	800803a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7f9 f84d 	bl	80010d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	e002      	b.n	8008044 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	e000      	b.n	8008044 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008042:	2302      	movs	r3, #2
  }
}
 8008044:	4618      	mov	r0, r3
 8008046:	3730      	adds	r7, #48	; 0x30
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800804c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008050:	b0c0      	sub	sp, #256	; 0x100
 8008052:	af00      	add	r7, sp, #0
 8008054:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008068:	68d9      	ldr	r1, [r3, #12]
 800806a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	ea40 0301 	orr.w	r3, r0, r1
 8008074:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	431a      	orrs	r2, r3
 8008084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	431a      	orrs	r2, r3
 800808c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	4313      	orrs	r3, r2
 8008094:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080a4:	f021 010c 	bic.w	r1, r1, #12
 80080a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080b2:	430b      	orrs	r3, r1
 80080b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80080c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c6:	6999      	ldr	r1, [r3, #24]
 80080c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	ea40 0301 	orr.w	r3, r0, r1
 80080d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	4b8f      	ldr	r3, [pc, #572]	; (8008318 <UART_SetConfig+0x2cc>)
 80080dc:	429a      	cmp	r2, r3
 80080de:	d005      	beq.n	80080ec <UART_SetConfig+0xa0>
 80080e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	4b8d      	ldr	r3, [pc, #564]	; (800831c <UART_SetConfig+0x2d0>)
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d104      	bne.n	80080f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080ec:	f7fd fd14 	bl	8005b18 <HAL_RCC_GetPCLK2Freq>
 80080f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80080f4:	e003      	b.n	80080fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080f6:	f7fd fcfb 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
 80080fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008108:	f040 810c 	bne.w	8008324 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800810c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008110:	2200      	movs	r2, #0
 8008112:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008116:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800811a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800811e:	4622      	mov	r2, r4
 8008120:	462b      	mov	r3, r5
 8008122:	1891      	adds	r1, r2, r2
 8008124:	65b9      	str	r1, [r7, #88]	; 0x58
 8008126:	415b      	adcs	r3, r3
 8008128:	65fb      	str	r3, [r7, #92]	; 0x5c
 800812a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800812e:	4621      	mov	r1, r4
 8008130:	eb12 0801 	adds.w	r8, r2, r1
 8008134:	4629      	mov	r1, r5
 8008136:	eb43 0901 	adc.w	r9, r3, r1
 800813a:	f04f 0200 	mov.w	r2, #0
 800813e:	f04f 0300 	mov.w	r3, #0
 8008142:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008146:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800814a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800814e:	4690      	mov	r8, r2
 8008150:	4699      	mov	r9, r3
 8008152:	4623      	mov	r3, r4
 8008154:	eb18 0303 	adds.w	r3, r8, r3
 8008158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800815c:	462b      	mov	r3, r5
 800815e:	eb49 0303 	adc.w	r3, r9, r3
 8008162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008172:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008176:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800817a:	460b      	mov	r3, r1
 800817c:	18db      	adds	r3, r3, r3
 800817e:	653b      	str	r3, [r7, #80]	; 0x50
 8008180:	4613      	mov	r3, r2
 8008182:	eb42 0303 	adc.w	r3, r2, r3
 8008186:	657b      	str	r3, [r7, #84]	; 0x54
 8008188:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800818c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008190:	f7f8 fdea 	bl	8000d68 <__aeabi_uldivmod>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4b61      	ldr	r3, [pc, #388]	; (8008320 <UART_SetConfig+0x2d4>)
 800819a:	fba3 2302 	umull	r2, r3, r3, r2
 800819e:	095b      	lsrs	r3, r3, #5
 80081a0:	011c      	lsls	r4, r3, #4
 80081a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80081b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80081b4:	4642      	mov	r2, r8
 80081b6:	464b      	mov	r3, r9
 80081b8:	1891      	adds	r1, r2, r2
 80081ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80081bc:	415b      	adcs	r3, r3
 80081be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80081c4:	4641      	mov	r1, r8
 80081c6:	eb12 0a01 	adds.w	sl, r2, r1
 80081ca:	4649      	mov	r1, r9
 80081cc:	eb43 0b01 	adc.w	fp, r3, r1
 80081d0:	f04f 0200 	mov.w	r2, #0
 80081d4:	f04f 0300 	mov.w	r3, #0
 80081d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80081dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80081e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081e4:	4692      	mov	sl, r2
 80081e6:	469b      	mov	fp, r3
 80081e8:	4643      	mov	r3, r8
 80081ea:	eb1a 0303 	adds.w	r3, sl, r3
 80081ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081f2:	464b      	mov	r3, r9
 80081f4:	eb4b 0303 	adc.w	r3, fp, r3
 80081f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008208:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800820c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008210:	460b      	mov	r3, r1
 8008212:	18db      	adds	r3, r3, r3
 8008214:	643b      	str	r3, [r7, #64]	; 0x40
 8008216:	4613      	mov	r3, r2
 8008218:	eb42 0303 	adc.w	r3, r2, r3
 800821c:	647b      	str	r3, [r7, #68]	; 0x44
 800821e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008222:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008226:	f7f8 fd9f 	bl	8000d68 <__aeabi_uldivmod>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4611      	mov	r1, r2
 8008230:	4b3b      	ldr	r3, [pc, #236]	; (8008320 <UART_SetConfig+0x2d4>)
 8008232:	fba3 2301 	umull	r2, r3, r3, r1
 8008236:	095b      	lsrs	r3, r3, #5
 8008238:	2264      	movs	r2, #100	; 0x64
 800823a:	fb02 f303 	mul.w	r3, r2, r3
 800823e:	1acb      	subs	r3, r1, r3
 8008240:	00db      	lsls	r3, r3, #3
 8008242:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008246:	4b36      	ldr	r3, [pc, #216]	; (8008320 <UART_SetConfig+0x2d4>)
 8008248:	fba3 2302 	umull	r2, r3, r3, r2
 800824c:	095b      	lsrs	r3, r3, #5
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008254:	441c      	add	r4, r3
 8008256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800825a:	2200      	movs	r2, #0
 800825c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008260:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008264:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008268:	4642      	mov	r2, r8
 800826a:	464b      	mov	r3, r9
 800826c:	1891      	adds	r1, r2, r2
 800826e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008270:	415b      	adcs	r3, r3
 8008272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008274:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008278:	4641      	mov	r1, r8
 800827a:	1851      	adds	r1, r2, r1
 800827c:	6339      	str	r1, [r7, #48]	; 0x30
 800827e:	4649      	mov	r1, r9
 8008280:	414b      	adcs	r3, r1
 8008282:	637b      	str	r3, [r7, #52]	; 0x34
 8008284:	f04f 0200 	mov.w	r2, #0
 8008288:	f04f 0300 	mov.w	r3, #0
 800828c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008290:	4659      	mov	r1, fp
 8008292:	00cb      	lsls	r3, r1, #3
 8008294:	4651      	mov	r1, sl
 8008296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800829a:	4651      	mov	r1, sl
 800829c:	00ca      	lsls	r2, r1, #3
 800829e:	4610      	mov	r0, r2
 80082a0:	4619      	mov	r1, r3
 80082a2:	4603      	mov	r3, r0
 80082a4:	4642      	mov	r2, r8
 80082a6:	189b      	adds	r3, r3, r2
 80082a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082ac:	464b      	mov	r3, r9
 80082ae:	460a      	mov	r2, r1
 80082b0:	eb42 0303 	adc.w	r3, r2, r3
 80082b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80082c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80082cc:	460b      	mov	r3, r1
 80082ce:	18db      	adds	r3, r3, r3
 80082d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80082d2:	4613      	mov	r3, r2
 80082d4:	eb42 0303 	adc.w	r3, r2, r3
 80082d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80082e2:	f7f8 fd41 	bl	8000d68 <__aeabi_uldivmod>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4b0d      	ldr	r3, [pc, #52]	; (8008320 <UART_SetConfig+0x2d4>)
 80082ec:	fba3 1302 	umull	r1, r3, r3, r2
 80082f0:	095b      	lsrs	r3, r3, #5
 80082f2:	2164      	movs	r1, #100	; 0x64
 80082f4:	fb01 f303 	mul.w	r3, r1, r3
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	3332      	adds	r3, #50	; 0x32
 80082fe:	4a08      	ldr	r2, [pc, #32]	; (8008320 <UART_SetConfig+0x2d4>)
 8008300:	fba2 2303 	umull	r2, r3, r2, r3
 8008304:	095b      	lsrs	r3, r3, #5
 8008306:	f003 0207 	and.w	r2, r3, #7
 800830a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4422      	add	r2, r4
 8008312:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008314:	e106      	b.n	8008524 <UART_SetConfig+0x4d8>
 8008316:	bf00      	nop
 8008318:	40011000 	.word	0x40011000
 800831c:	40011400 	.word	0x40011400
 8008320:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008328:	2200      	movs	r2, #0
 800832a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800832e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008332:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008336:	4642      	mov	r2, r8
 8008338:	464b      	mov	r3, r9
 800833a:	1891      	adds	r1, r2, r2
 800833c:	6239      	str	r1, [r7, #32]
 800833e:	415b      	adcs	r3, r3
 8008340:	627b      	str	r3, [r7, #36]	; 0x24
 8008342:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008346:	4641      	mov	r1, r8
 8008348:	1854      	adds	r4, r2, r1
 800834a:	4649      	mov	r1, r9
 800834c:	eb43 0501 	adc.w	r5, r3, r1
 8008350:	f04f 0200 	mov.w	r2, #0
 8008354:	f04f 0300 	mov.w	r3, #0
 8008358:	00eb      	lsls	r3, r5, #3
 800835a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800835e:	00e2      	lsls	r2, r4, #3
 8008360:	4614      	mov	r4, r2
 8008362:	461d      	mov	r5, r3
 8008364:	4643      	mov	r3, r8
 8008366:	18e3      	adds	r3, r4, r3
 8008368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800836c:	464b      	mov	r3, r9
 800836e:	eb45 0303 	adc.w	r3, r5, r3
 8008372:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008382:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008386:	f04f 0200 	mov.w	r2, #0
 800838a:	f04f 0300 	mov.w	r3, #0
 800838e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008392:	4629      	mov	r1, r5
 8008394:	008b      	lsls	r3, r1, #2
 8008396:	4621      	mov	r1, r4
 8008398:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800839c:	4621      	mov	r1, r4
 800839e:	008a      	lsls	r2, r1, #2
 80083a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80083a4:	f7f8 fce0 	bl	8000d68 <__aeabi_uldivmod>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	4b60      	ldr	r3, [pc, #384]	; (8008530 <UART_SetConfig+0x4e4>)
 80083ae:	fba3 2302 	umull	r2, r3, r3, r2
 80083b2:	095b      	lsrs	r3, r3, #5
 80083b4:	011c      	lsls	r4, r3, #4
 80083b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083ba:	2200      	movs	r2, #0
 80083bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80083c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80083c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80083c8:	4642      	mov	r2, r8
 80083ca:	464b      	mov	r3, r9
 80083cc:	1891      	adds	r1, r2, r2
 80083ce:	61b9      	str	r1, [r7, #24]
 80083d0:	415b      	adcs	r3, r3
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083d8:	4641      	mov	r1, r8
 80083da:	1851      	adds	r1, r2, r1
 80083dc:	6139      	str	r1, [r7, #16]
 80083de:	4649      	mov	r1, r9
 80083e0:	414b      	adcs	r3, r1
 80083e2:	617b      	str	r3, [r7, #20]
 80083e4:	f04f 0200 	mov.w	r2, #0
 80083e8:	f04f 0300 	mov.w	r3, #0
 80083ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083f0:	4659      	mov	r1, fp
 80083f2:	00cb      	lsls	r3, r1, #3
 80083f4:	4651      	mov	r1, sl
 80083f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083fa:	4651      	mov	r1, sl
 80083fc:	00ca      	lsls	r2, r1, #3
 80083fe:	4610      	mov	r0, r2
 8008400:	4619      	mov	r1, r3
 8008402:	4603      	mov	r3, r0
 8008404:	4642      	mov	r2, r8
 8008406:	189b      	adds	r3, r3, r2
 8008408:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800840c:	464b      	mov	r3, r9
 800840e:	460a      	mov	r2, r1
 8008410:	eb42 0303 	adc.w	r3, r2, r3
 8008414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	67bb      	str	r3, [r7, #120]	; 0x78
 8008422:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008424:	f04f 0200 	mov.w	r2, #0
 8008428:	f04f 0300 	mov.w	r3, #0
 800842c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008430:	4649      	mov	r1, r9
 8008432:	008b      	lsls	r3, r1, #2
 8008434:	4641      	mov	r1, r8
 8008436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800843a:	4641      	mov	r1, r8
 800843c:	008a      	lsls	r2, r1, #2
 800843e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008442:	f7f8 fc91 	bl	8000d68 <__aeabi_uldivmod>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4611      	mov	r1, r2
 800844c:	4b38      	ldr	r3, [pc, #224]	; (8008530 <UART_SetConfig+0x4e4>)
 800844e:	fba3 2301 	umull	r2, r3, r3, r1
 8008452:	095b      	lsrs	r3, r3, #5
 8008454:	2264      	movs	r2, #100	; 0x64
 8008456:	fb02 f303 	mul.w	r3, r2, r3
 800845a:	1acb      	subs	r3, r1, r3
 800845c:	011b      	lsls	r3, r3, #4
 800845e:	3332      	adds	r3, #50	; 0x32
 8008460:	4a33      	ldr	r2, [pc, #204]	; (8008530 <UART_SetConfig+0x4e4>)
 8008462:	fba2 2303 	umull	r2, r3, r2, r3
 8008466:	095b      	lsrs	r3, r3, #5
 8008468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800846c:	441c      	add	r4, r3
 800846e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008472:	2200      	movs	r2, #0
 8008474:	673b      	str	r3, [r7, #112]	; 0x70
 8008476:	677a      	str	r2, [r7, #116]	; 0x74
 8008478:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800847c:	4642      	mov	r2, r8
 800847e:	464b      	mov	r3, r9
 8008480:	1891      	adds	r1, r2, r2
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	415b      	adcs	r3, r3
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800848c:	4641      	mov	r1, r8
 800848e:	1851      	adds	r1, r2, r1
 8008490:	6039      	str	r1, [r7, #0]
 8008492:	4649      	mov	r1, r9
 8008494:	414b      	adcs	r3, r1
 8008496:	607b      	str	r3, [r7, #4]
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	f04f 0300 	mov.w	r3, #0
 80084a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80084a4:	4659      	mov	r1, fp
 80084a6:	00cb      	lsls	r3, r1, #3
 80084a8:	4651      	mov	r1, sl
 80084aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084ae:	4651      	mov	r1, sl
 80084b0:	00ca      	lsls	r2, r1, #3
 80084b2:	4610      	mov	r0, r2
 80084b4:	4619      	mov	r1, r3
 80084b6:	4603      	mov	r3, r0
 80084b8:	4642      	mov	r2, r8
 80084ba:	189b      	adds	r3, r3, r2
 80084bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80084be:	464b      	mov	r3, r9
 80084c0:	460a      	mov	r2, r1
 80084c2:	eb42 0303 	adc.w	r3, r2, r3
 80084c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	663b      	str	r3, [r7, #96]	; 0x60
 80084d2:	667a      	str	r2, [r7, #100]	; 0x64
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	f04f 0300 	mov.w	r3, #0
 80084dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80084e0:	4649      	mov	r1, r9
 80084e2:	008b      	lsls	r3, r1, #2
 80084e4:	4641      	mov	r1, r8
 80084e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084ea:	4641      	mov	r1, r8
 80084ec:	008a      	lsls	r2, r1, #2
 80084ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80084f2:	f7f8 fc39 	bl	8000d68 <__aeabi_uldivmod>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <UART_SetConfig+0x4e4>)
 80084fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008500:	095b      	lsrs	r3, r3, #5
 8008502:	2164      	movs	r1, #100	; 0x64
 8008504:	fb01 f303 	mul.w	r3, r1, r3
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	011b      	lsls	r3, r3, #4
 800850c:	3332      	adds	r3, #50	; 0x32
 800850e:	4a08      	ldr	r2, [pc, #32]	; (8008530 <UART_SetConfig+0x4e4>)
 8008510:	fba2 2303 	umull	r2, r3, r2, r3
 8008514:	095b      	lsrs	r3, r3, #5
 8008516:	f003 020f 	and.w	r2, r3, #15
 800851a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4422      	add	r2, r4
 8008522:	609a      	str	r2, [r3, #8]
}
 8008524:	bf00      	nop
 8008526:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800852a:	46bd      	mov	sp, r7
 800852c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008530:	51eb851f 	.word	0x51eb851f

08008534 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f103 0208 	add.w	r2, r3, #8
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f04f 32ff 	mov.w	r2, #4294967295
 800854c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f103 0208 	add.w	r2, r3, #8
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f103 0208 	add.w	r2, r3, #8
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800858e:	b480      	push	{r7}
 8008590:	b085      	sub	sp, #20
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a4:	d103      	bne.n	80085ae <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	e00c      	b.n	80085c8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3308      	adds	r3, #8
 80085b2:	60fb      	str	r3, [r7, #12]
 80085b4:	e002      	b.n	80085bc <vListInsert+0x2e>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d2f6      	bcs.n	80085b6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	601a      	str	r2, [r3, #0]
}
 80085f4:	bf00      	nop
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	6892      	ldr	r2, [r2, #8]
 8008616:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	6852      	ldr	r2, [r2, #4]
 8008620:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	429a      	cmp	r2, r3
 800862a:	d103      	bne.n	8008634 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	1e5a      	subs	r2, r3, #1
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800865e:	2301      	movs	r3, #1
 8008660:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10a      	bne.n	8008682 <xQueueGenericReset+0x2e>
        __asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	60fb      	str	r3, [r7, #12]
    }
 800867e:	bf00      	nop
 8008680:	e7fe      	b.n	8008680 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d05d      	beq.n	8008744 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800868c:	2b00      	cmp	r3, #0
 800868e:	d059      	beq.n	8008744 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008698:	2100      	movs	r1, #0
 800869a:	fba3 2302 	umull	r2, r3, r3, r2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d000      	beq.n	80086a4 <xQueueGenericReset+0x50>
 80086a2:	2101      	movs	r1, #1
 80086a4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d14c      	bne.n	8008744 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80086aa:	f002 fa1d 	bl	800aae8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b6:	6939      	ldr	r1, [r7, #16]
 80086b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086ba:	fb01 f303 	mul.w	r3, r1, r3
 80086be:	441a      	add	r2, r3
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2200      	movs	r2, #0
 80086c8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086da:	3b01      	subs	r3, #1
 80086dc:	6939      	ldr	r1, [r7, #16]
 80086de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086e0:	fb01 f303 	mul.w	r3, r1, r3
 80086e4:	441a      	add	r2, r3
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	22ff      	movs	r2, #255	; 0xff
 80086ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	22ff      	movs	r2, #255	; 0xff
 80086f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d114      	bne.n	800872a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01a      	beq.n	800873e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	3310      	adds	r3, #16
 800870c:	4618      	mov	r0, r3
 800870e:	f001 f801 	bl	8009714 <xTaskRemoveFromEventList>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d012      	beq.n	800873e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008718:	4b15      	ldr	r3, [pc, #84]	; (8008770 <xQueueGenericReset+0x11c>)
 800871a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800871e:	601a      	str	r2, [r3, #0]
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	e009      	b.n	800873e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	3310      	adds	r3, #16
 800872e:	4618      	mov	r0, r3
 8008730:	f7ff ff00 	bl	8008534 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	3324      	adds	r3, #36	; 0x24
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff fefb 	bl	8008534 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800873e:	f002 fa03 	bl	800ab48 <vPortExitCritical>
 8008742:	e001      	b.n	8008748 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8008744:	2300      	movs	r3, #0
 8008746:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10a      	bne.n	8008764 <xQueueGenericReset+0x110>
        __asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	60bb      	str	r3, [r7, #8]
    }
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8008764:	697b      	ldr	r3, [r7, #20]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	e000ed04 	.word	0xe000ed04

08008774 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008774:	b580      	push	{r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af02      	add	r7, sp, #8
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8008782:	2300      	movs	r3, #0
 8008784:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d02e      	beq.n	80087ea <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800878c:	2100      	movs	r1, #0
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	fba3 2302 	umull	r2, r3, r3, r2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d000      	beq.n	800879c <xQueueGenericCreate+0x28>
 800879a:	2101      	movs	r1, #1
 800879c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d123      	bne.n	80087ea <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80087aa:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80087ae:	d81c      	bhi.n	80087ea <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	fb02 f303 	mul.w	r3, r2, r3
 80087b8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	3350      	adds	r3, #80	; 0x50
 80087be:	4618      	mov	r0, r3
 80087c0:	f002 fabc 	bl	800ad3c <pvPortMalloc>
 80087c4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01c      	beq.n	8008806 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	3350      	adds	r3, #80	; 0x50
 80087d4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087d6:	79fa      	ldrb	r2, [r7, #7]
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	4613      	mov	r3, r2
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	68b9      	ldr	r1, [r7, #8]
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f000 f814 	bl	8008810 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80087e8:	e00d      	b.n	8008806 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10a      	bne.n	8008806 <xQueueGenericCreate+0x92>
        __asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	613b      	str	r3, [r7, #16]
    }
 8008802:	bf00      	nop
 8008804:	e7fe      	b.n	8008804 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008806:	69fb      	ldr	r3, [r7, #28]
    }
 8008808:	4618      	mov	r0, r3
 800880a:	3720      	adds	r7, #32
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
 800881c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d103      	bne.n	800882c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	69ba      	ldr	r2, [r7, #24]
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	e002      	b.n	8008832 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800883e:	2101      	movs	r1, #1
 8008840:	69b8      	ldr	r0, [r7, #24]
 8008842:	f7ff ff07 	bl	8008654 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	78fa      	ldrb	r2, [r7, #3]
 800884a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800884e:	78fb      	ldrb	r3, [r7, #3]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	68f9      	ldr	r1, [r7, #12]
 8008854:	2073      	movs	r0, #115	; 0x73
 8008856:	f003 f9b9 	bl	800bbcc <SEGGER_SYSVIEW_RecordU32x3>
}
 800885a:	bf00      	nop
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8008864:	b590      	push	{r4, r7, lr}
 8008866:	b08f      	sub	sp, #60	; 0x3c
 8008868:	af02      	add	r7, sp, #8
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8008870:	2300      	movs	r3, #0
 8008872:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8008878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10a      	bne.n	8008894 <xQueueReceive+0x30>
        __asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	623b      	str	r3, [r7, #32]
    }
 8008890:	bf00      	nop
 8008892:	e7fe      	b.n	8008892 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d103      	bne.n	80088a2 <xQueueReceive+0x3e>
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <xQueueReceive+0x42>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <xQueueReceive+0x44>
 80088a6:	2300      	movs	r3, #0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10a      	bne.n	80088c2 <xQueueReceive+0x5e>
        __asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	61fb      	str	r3, [r7, #28]
    }
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088c2:	f001 f93b 	bl	8009b3c <xTaskGetSchedulerState>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d102      	bne.n	80088d2 <xQueueReceive+0x6e>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <xQueueReceive+0x72>
 80088d2:	2301      	movs	r3, #1
 80088d4:	e000      	b.n	80088d8 <xQueueReceive+0x74>
 80088d6:	2300      	movs	r3, #0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <xQueueReceive+0x8e>
        __asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	61bb      	str	r3, [r7, #24]
    }
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80088f2:	f002 f8f9 	bl	800aae8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d02f      	beq.n	8008962 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008906:	f000 f8bd 	bl	8008a84 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	4618      	mov	r0, r3
 800890e:	f003 ff13 	bl	800c738 <SEGGER_SYSVIEW_ShrinkId>
 8008912:	4604      	mov	r4, r0
 8008914:	2000      	movs	r0, #0
 8008916:	f003 ff0f 	bl	800c738 <SEGGER_SYSVIEW_ShrinkId>
 800891a:	4602      	mov	r2, r0
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2101      	movs	r1, #1
 8008920:	9100      	str	r1, [sp, #0]
 8008922:	4621      	mov	r1, r4
 8008924:	205c      	movs	r0, #92	; 0x5c
 8008926:	f003 f9c7 	bl	800bcb8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	1e5a      	subs	r2, r3, #1
 800892e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008930:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00f      	beq.n	800895a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893c:	3310      	adds	r3, #16
 800893e:	4618      	mov	r0, r3
 8008940:	f000 fee8 	bl	8009714 <xTaskRemoveFromEventList>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d007      	beq.n	800895a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800894a:	4b4d      	ldr	r3, [pc, #308]	; (8008a80 <xQueueReceive+0x21c>)
 800894c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800895a:	f002 f8f5 	bl	800ab48 <vPortExitCritical>
                return pdPASS;
 800895e:	2301      	movs	r3, #1
 8008960:	e08a      	b.n	8008a78 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d113      	bne.n	8008990 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008968:	f002 f8ee 	bl	800ab48 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	4618      	mov	r0, r3
 8008970:	f003 fee2 	bl	800c738 <SEGGER_SYSVIEW_ShrinkId>
 8008974:	4604      	mov	r4, r0
 8008976:	2000      	movs	r0, #0
 8008978:	f003 fede 	bl	800c738 <SEGGER_SYSVIEW_ShrinkId>
 800897c:	4602      	mov	r2, r0
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2101      	movs	r1, #1
 8008982:	9100      	str	r1, [sp, #0]
 8008984:	4621      	mov	r1, r4
 8008986:	205c      	movs	r0, #92	; 0x5c
 8008988:	f003 f996 	bl	800bcb8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800898c:	2300      	movs	r3, #0
 800898e:	e073      	b.n	8008a78 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d106      	bne.n	80089a4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008996:	f107 0310 	add.w	r3, r7, #16
 800899a:	4618      	mov	r0, r3
 800899c:	f000 ff92 	bl	80098c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80089a0:	2301      	movs	r3, #1
 80089a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80089a4:	f002 f8d0 	bl	800ab48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80089a8:	f000 fba6 	bl	80090f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80089ac:	f002 f89c 	bl	800aae8 <vPortEnterCritical>
 80089b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089b6:	b25b      	sxtb	r3, r3
 80089b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089bc:	d103      	bne.n	80089c6 <xQueueReceive+0x162>
 80089be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089cc:	b25b      	sxtb	r3, r3
 80089ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d2:	d103      	bne.n	80089dc <xQueueReceive+0x178>
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089dc:	f002 f8b4 	bl	800ab48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089e0:	1d3a      	adds	r2, r7, #4
 80089e2:	f107 0310 	add.w	r3, r7, #16
 80089e6:	4611      	mov	r1, r2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 ff81 	bl	80098f0 <xTaskCheckForTimeOut>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d124      	bne.n	8008a3e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089f6:	f000 f8bd 	bl	8008b74 <prvIsQueueEmpty>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d018      	beq.n	8008a32 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	3324      	adds	r3, #36	; 0x24
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	4611      	mov	r1, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 fe17 	bl	800963c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a10:	f000 f85e 	bl	8008ad0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008a14:	f000 fb7e 	bl	8009114 <xTaskResumeAll>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f47f af69 	bne.w	80088f2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8008a20:	4b17      	ldr	r3, [pc, #92]	; (8008a80 <xQueueReceive+0x21c>)
 8008a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a26:	601a      	str	r2, [r3, #0]
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	e75f      	b.n	80088f2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a34:	f000 f84c 	bl	8008ad0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008a38:	f000 fb6c 	bl	8009114 <xTaskResumeAll>
 8008a3c:	e759      	b.n	80088f2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a40:	f000 f846 	bl	8008ad0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008a44:	f000 fb66 	bl	8009114 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a4a:	f000 f893 	bl	8008b74 <prvIsQueueEmpty>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f43f af4e 	beq.w	80088f2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f003 fe6d 	bl	800c738 <SEGGER_SYSVIEW_ShrinkId>
 8008a5e:	4604      	mov	r4, r0
 8008a60:	2000      	movs	r0, #0
 8008a62:	f003 fe69 	bl	800c738 <SEGGER_SYSVIEW_ShrinkId>
 8008a66:	4602      	mov	r2, r0
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2101      	movs	r1, #1
 8008a6c:	9100      	str	r1, [sp, #0]
 8008a6e:	4621      	mov	r1, r4
 8008a70:	205c      	movs	r0, #92	; 0x5c
 8008a72:	f003 f921 	bl	800bcb8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8008a76:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3734      	adds	r7, #52	; 0x34
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd90      	pop	{r4, r7, pc}
 8008a80:	e000ed04 	.word	0xe000ed04

08008a84 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d018      	beq.n	8008ac8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	441a      	add	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68da      	ldr	r2, [r3, #12]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d303      	bcc.n	8008ab8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68d9      	ldr	r1, [r3, #12]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	6838      	ldr	r0, [r7, #0]
 8008ac4:	f004 fe0b 	bl	800d6de <memcpy>
    }
}
 8008ac8:	bf00      	nop
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8008ad8:	f002 f806 	bl	800aae8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ae2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ae4:	e011      	b.n	8008b0a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d012      	beq.n	8008b14 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3324      	adds	r3, #36	; 0x24
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 fe0e 	bl	8009714 <xTaskRemoveFromEventList>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d001      	beq.n	8008b02 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8008afe:	f000 ff5d 	bl	80099bc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	dce9      	bgt.n	8008ae6 <prvUnlockQueue+0x16>
 8008b12:	e000      	b.n	8008b16 <prvUnlockQueue+0x46>
                    break;
 8008b14:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	22ff      	movs	r2, #255	; 0xff
 8008b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8008b1e:	f002 f813 	bl	800ab48 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8008b22:	f001 ffe1 	bl	800aae8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b2c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b2e:	e011      	b.n	8008b54 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d012      	beq.n	8008b5e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	3310      	adds	r3, #16
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 fde9 	bl	8009714 <xTaskRemoveFromEventList>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8008b48:	f000 ff38 	bl	80099bc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	dce9      	bgt.n	8008b30 <prvUnlockQueue+0x60>
 8008b5c:	e000      	b.n	8008b60 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8008b5e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	22ff      	movs	r2, #255	; 0xff
 8008b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8008b68:	f001 ffee 	bl	800ab48 <vPortExitCritical>
}
 8008b6c:	bf00      	nop
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008b7c:	f001 ffb4 	bl	800aae8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d102      	bne.n	8008b8e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	e001      	b.n	8008b92 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008b92:	f001 ffd9 	bl	800ab48 <vPortExitCritical>

    return xReturn;
 8008b96:	68fb      	ldr	r3, [r7, #12]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10a      	bne.n	8008bca <vQueueAddToRegistry+0x2a>
        __asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	60fb      	str	r3, [r7, #12]
    }
 8008bc6:	bf00      	nop
 8008bc8:	e7fe      	b.n	8008bc8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d024      	beq.n	8008c1a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	617b      	str	r3, [r7, #20]
 8008bd4:	e01e      	b.n	8008c14 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8008bd6:	4a1c      	ldr	r2, [pc, #112]	; (8008c48 <vQueueAddToRegistry+0xa8>)
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	00db      	lsls	r3, r3, #3
 8008bdc:	4413      	add	r3, r2
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d105      	bne.n	8008bf2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	00db      	lsls	r3, r3, #3
 8008bea:	4a17      	ldr	r2, [pc, #92]	; (8008c48 <vQueueAddToRegistry+0xa8>)
 8008bec:	4413      	add	r3, r2
 8008bee:	613b      	str	r3, [r7, #16]
                    break;
 8008bf0:	e013      	b.n	8008c1a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10a      	bne.n	8008c0e <vQueueAddToRegistry+0x6e>
 8008bf8:	4a13      	ldr	r2, [pc, #76]	; (8008c48 <vQueueAddToRegistry+0xa8>)
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d104      	bne.n	8008c0e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	4a0f      	ldr	r2, [pc, #60]	; (8008c48 <vQueueAddToRegistry+0xa8>)
 8008c0a:	4413      	add	r3, r2
 8008c0c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	3301      	adds	r3, #1
 8008c12:	617b      	str	r3, [r7, #20]
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	2b07      	cmp	r3, #7
 8008c18:	d9dd      	bls.n	8008bd6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00f      	beq.n	8008c40 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f003 fd82 	bl	800c738 <SEGGER_SYSVIEW_ShrinkId>
 8008c34:	4601      	mov	r1, r0
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	2071      	movs	r0, #113	; 0x71
 8008c3c:	f002 ff6c 	bl	800bb18 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8008c40:	bf00      	nop
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	20000ab0 	.word	0x20000ab0

08008c4c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8008c5c:	f001 ff44 	bl	800aae8 <vPortEnterCritical>
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c66:	b25b      	sxtb	r3, r3
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6c:	d103      	bne.n	8008c76 <vQueueWaitForMessageRestricted+0x2a>
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c7c:	b25b      	sxtb	r3, r3
 8008c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c82:	d103      	bne.n	8008c8c <vQueueWaitForMessageRestricted+0x40>
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c8c:	f001 ff5c 	bl	800ab48 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d106      	bne.n	8008ca6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	3324      	adds	r3, #36	; 0x24
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	68b9      	ldr	r1, [r7, #8]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 fcef 	bl	8009684 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8008ca6:	6978      	ldr	r0, [r7, #20]
 8008ca8:	f7ff ff12 	bl	8008ad0 <prvUnlockQueue>
    }
 8008cac:	bf00      	nop
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08c      	sub	sp, #48	; 0x30
 8008cb8:	af04      	add	r7, sp, #16
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cc4:	88fb      	ldrh	r3, [r7, #6]
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f002 f837 	bl	800ad3c <pvPortMalloc>
 8008cce:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d013      	beq.n	8008cfe <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cd6:	2058      	movs	r0, #88	; 0x58
 8008cd8:	f002 f830 	bl	800ad3c <pvPortMalloc>
 8008cdc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d008      	beq.n	8008cf6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008ce4:	2258      	movs	r2, #88	; 0x58
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	69f8      	ldr	r0, [r7, #28]
 8008cea:	f004 fc8a 	bl	800d602 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8008cf4:	e005      	b.n	8008d02 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8008cf6:	6978      	ldr	r0, [r7, #20]
 8008cf8:	f002 f8da 	bl	800aeb0 <vPortFree>
 8008cfc:	e001      	b.n	8008d02 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d013      	beq.n	8008d30 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d08:	88fa      	ldrh	r2, [r7, #6]
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	9303      	str	r3, [sp, #12]
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	9302      	str	r3, [sp, #8]
 8008d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d14:	9301      	str	r3, [sp, #4]
 8008d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	68b9      	ldr	r1, [r7, #8]
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f000 f80e 	bl	8008d40 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8008d24:	69f8      	ldr	r0, [r7, #28]
 8008d26:	f000 f899 	bl	8008e5c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	61bb      	str	r3, [r7, #24]
 8008d2e:	e002      	b.n	8008d36 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d30:	f04f 33ff 	mov.w	r3, #4294967295
 8008d34:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8008d36:	69bb      	ldr	r3, [r7, #24]
    }
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3720      	adds	r7, #32
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	461a      	mov	r2, r3
 8008d58:	21a5      	movs	r1, #165	; 0xa5
 8008d5a:	f004 fc52 	bl	800d602 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	f023 0307 	bic.w	r3, r3, #7
 8008d76:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	f003 0307 	and.w	r3, r3, #7
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00a      	beq.n	8008d98 <prvInitialiseNewTask+0x58>
        __asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	617b      	str	r3, [r7, #20]
    }
 8008d94:	bf00      	nop
 8008d96:	e7fe      	b.n	8008d96 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d01e      	beq.n	8008ddc <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d9e:	2300      	movs	r3, #0
 8008da0:	61fb      	str	r3, [r7, #28]
 8008da2:	e012      	b.n	8008dca <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	4413      	add	r3, r2
 8008daa:	7819      	ldrb	r1, [r3, #0]
 8008dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	4413      	add	r3, r2
 8008db2:	3334      	adds	r3, #52	; 0x34
 8008db4:	460a      	mov	r2, r1
 8008db6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d006      	beq.n	8008dd2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	61fb      	str	r3, [r7, #28]
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	2b09      	cmp	r3, #9
 8008dce:	d9e9      	bls.n	8008da4 <prvInitialiseNewTask+0x64>
 8008dd0:	e000      	b.n	8008dd4 <prvInitialiseNewTask+0x94>
            {
                break;
 8008dd2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d90a      	bls.n	8008df8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8008de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de6:	f383 8811 	msr	BASEPRI, r3
 8008dea:	f3bf 8f6f 	isb	sy
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	613b      	str	r3, [r7, #16]
    }
 8008df4:	bf00      	nop
 8008df6:	e7fe      	b.n	8008df6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d901      	bls.n	8008e02 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008dfe:	2304      	movs	r3, #4
 8008e00:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e06:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e0c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	3304      	adds	r3, #4
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff fbae 	bl	8008574 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1a:	3318      	adds	r3, #24
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7ff fba9 	bl	8008574 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e26:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2a:	f1c3 0205 	rsb	r2, r3, #5
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e36:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	68f9      	ldr	r1, [r7, #12]
 8008e3c:	69b8      	ldr	r0, [r7, #24]
 8008e3e:	f001 fd21 	bl	800a884 <pxPortInitialiseStack>
 8008e42:	4602      	mov	r2, r0
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8008e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e52:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008e54:	bf00      	nop
 8008e56:	3720      	adds	r7, #32
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8008e5c:	b5b0      	push	{r4, r5, r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af02      	add	r7, sp, #8
 8008e62:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8008e64:	f001 fe40 	bl	800aae8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8008e68:	4b4f      	ldr	r3, [pc, #316]	; (8008fa8 <prvAddNewTaskToReadyList+0x14c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	4a4e      	ldr	r2, [pc, #312]	; (8008fa8 <prvAddNewTaskToReadyList+0x14c>)
 8008e70:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8008e72:	4b4e      	ldr	r3, [pc, #312]	; (8008fac <prvAddNewTaskToReadyList+0x150>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d109      	bne.n	8008e8e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8008e7a:	4a4c      	ldr	r2, [pc, #304]	; (8008fac <prvAddNewTaskToReadyList+0x150>)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e80:	4b49      	ldr	r3, [pc, #292]	; (8008fa8 <prvAddNewTaskToReadyList+0x14c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d110      	bne.n	8008eaa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8008e88:	f000 fdbe 	bl	8009a08 <prvInitialiseTaskLists>
 8008e8c:	e00d      	b.n	8008eaa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8008e8e:	4b48      	ldr	r3, [pc, #288]	; (8008fb0 <prvAddNewTaskToReadyList+0x154>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d109      	bne.n	8008eaa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e96:	4b45      	ldr	r3, [pc, #276]	; (8008fac <prvAddNewTaskToReadyList+0x150>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d802      	bhi.n	8008eaa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8008ea4:	4a41      	ldr	r2, [pc, #260]	; (8008fac <prvAddNewTaskToReadyList+0x150>)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8008eaa:	4b42      	ldr	r3, [pc, #264]	; (8008fb4 <prvAddNewTaskToReadyList+0x158>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	4a40      	ldr	r2, [pc, #256]	; (8008fb4 <prvAddNewTaskToReadyList+0x158>)
 8008eb2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008eb4:	4b3f      	ldr	r3, [pc, #252]	; (8008fb4 <prvAddNewTaskToReadyList+0x158>)
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d016      	beq.n	8008ef0 <prvAddNewTaskToReadyList+0x94>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f003 fb71 	bl	800c5ac <SEGGER_SYSVIEW_OnTaskCreate>
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eda:	461d      	mov	r5, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	461c      	mov	r4, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee6:	1ae3      	subs	r3, r4, r3
 8008ee8:	9300      	str	r3, [sp, #0]
 8008eea:	462b      	mov	r3, r5
 8008eec:	f002 f8f2 	bl	800b0d4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f003 fbde 	bl	800c6b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	2201      	movs	r2, #1
 8008efe:	409a      	lsls	r2, r3
 8008f00:	4b2d      	ldr	r3, [pc, #180]	; (8008fb8 <prvAddNewTaskToReadyList+0x15c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	4a2c      	ldr	r2, [pc, #176]	; (8008fb8 <prvAddNewTaskToReadyList+0x15c>)
 8008f08:	6013      	str	r3, [r2, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0e:	492b      	ldr	r1, [pc, #172]	; (8008fbc <prvAddNewTaskToReadyList+0x160>)
 8008f10:	4613      	mov	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4413      	add	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	440b      	add	r3, r1
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	609a      	str	r2, [r3, #8]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	689a      	ldr	r2, [r3, #8]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60da      	str	r2, [r3, #12]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	3204      	adds	r2, #4
 8008f36:	605a      	str	r2, [r3, #4]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	1d1a      	adds	r2, r3, #4
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	609a      	str	r2, [r3, #8]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4a1b      	ldr	r2, [pc, #108]	; (8008fbc <prvAddNewTaskToReadyList+0x160>)
 8008f4e:	441a      	add	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	615a      	str	r2, [r3, #20]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f58:	4918      	ldr	r1, [pc, #96]	; (8008fbc <prvAddNewTaskToReadyList+0x160>)
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	440b      	add	r3, r1
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	1c59      	adds	r1, r3, #1
 8008f68:	4814      	ldr	r0, [pc, #80]	; (8008fbc <prvAddNewTaskToReadyList+0x160>)
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4403      	add	r3, r0
 8008f74:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8008f76:	f001 fde7 	bl	800ab48 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8008f7a:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <prvAddNewTaskToReadyList+0x154>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00e      	beq.n	8008fa0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f82:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <prvAddNewTaskToReadyList+0x150>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d207      	bcs.n	8008fa0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8008f90:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <prvAddNewTaskToReadyList+0x164>)
 8008f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008fa0:	bf00      	nop
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8008fa8:	20000bc8 	.word	0x20000bc8
 8008fac:	20000af0 	.word	0x20000af0
 8008fb0:	20000bd4 	.word	0x20000bd4
 8008fb4:	20000be4 	.word	0x20000be4
 8008fb8:	20000bd0 	.word	0x20000bd0
 8008fbc:	20000af4 	.word	0x20000af4
 8008fc0:	e000ed04 	.word	0xe000ed04

08008fc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d01b      	beq.n	800900e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8008fd6:	4b15      	ldr	r3, [pc, #84]	; (800902c <vTaskDelay+0x68>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00a      	beq.n	8008ff4 <vTaskDelay+0x30>
        __asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	60bb      	str	r3, [r7, #8]
    }
 8008ff0:	bf00      	nop
 8008ff2:	e7fe      	b.n	8008ff2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8008ff4:	f000 f880 	bl	80090f8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8008ff8:	6879      	ldr	r1, [r7, #4]
 8008ffa:	2023      	movs	r0, #35	; 0x23
 8008ffc:	f002 fd50 	bl	800baa0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009000:	2100      	movs	r1, #0
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f001 f8e2 	bl	800a1cc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009008:	f000 f884 	bl	8009114 <xTaskResumeAll>
 800900c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d107      	bne.n	8009024 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8009014:	4b06      	ldr	r3, [pc, #24]	; (8009030 <vTaskDelay+0x6c>)
 8009016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009024:	bf00      	nop
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	20000bf0 	.word	0x20000bf0
 8009030:	e000ed04 	.word	0xe000ed04

08009034 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800903a:	4b27      	ldr	r3, [pc, #156]	; (80090d8 <vTaskStartScheduler+0xa4>)
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	2300      	movs	r3, #0
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	2300      	movs	r3, #0
 8009044:	2282      	movs	r2, #130	; 0x82
 8009046:	4925      	ldr	r1, [pc, #148]	; (80090dc <vTaskStartScheduler+0xa8>)
 8009048:	4825      	ldr	r0, [pc, #148]	; (80090e0 <vTaskStartScheduler+0xac>)
 800904a:	f7ff fe33 	bl	8008cb4 <xTaskCreate>
 800904e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d102      	bne.n	800905c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8009056:	f001 f939 	bl	800a2cc <xTimerCreateTimerTask>
 800905a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d124      	bne.n	80090ac <vTaskStartScheduler+0x78>
        __asm volatile
 8009062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	60bb      	str	r3, [r7, #8]
    }
 8009074:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8009076:	4b1b      	ldr	r3, [pc, #108]	; (80090e4 <vTaskStartScheduler+0xb0>)
 8009078:	f04f 32ff 	mov.w	r2, #4294967295
 800907c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800907e:	4b1a      	ldr	r3, [pc, #104]	; (80090e8 <vTaskStartScheduler+0xb4>)
 8009080:	2201      	movs	r2, #1
 8009082:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009084:	4b19      	ldr	r3, [pc, #100]	; (80090ec <vTaskStartScheduler+0xb8>)
 8009086:	2200      	movs	r2, #0
 8009088:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800908a:	4b19      	ldr	r3, [pc, #100]	; (80090f0 <vTaskStartScheduler+0xbc>)
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	4b12      	ldr	r3, [pc, #72]	; (80090d8 <vTaskStartScheduler+0xa4>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	429a      	cmp	r2, r3
 8009094:	d102      	bne.n	800909c <vTaskStartScheduler+0x68>
 8009096:	f003 fa6d 	bl	800c574 <SEGGER_SYSVIEW_OnIdle>
 800909a:	e004      	b.n	80090a6 <vTaskStartScheduler+0x72>
 800909c:	4b14      	ldr	r3, [pc, #80]	; (80090f0 <vTaskStartScheduler+0xbc>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f003 fac5 	bl	800c630 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80090a6:	f001 fc7d 	bl	800a9a4 <xPortStartScheduler>
 80090aa:	e00e      	b.n	80090ca <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b2:	d10a      	bne.n	80090ca <vTaskStartScheduler+0x96>
        __asm volatile
 80090b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	607b      	str	r3, [r7, #4]
    }
 80090c6:	bf00      	nop
 80090c8:	e7fe      	b.n	80090c8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80090ca:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <vTaskStartScheduler+0xc0>)
 80090cc:	681b      	ldr	r3, [r3, #0]
}
 80090ce:	bf00      	nop
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	20000bec 	.word	0x20000bec
 80090dc:	08010508 	.word	0x08010508
 80090e0:	080099d5 	.word	0x080099d5
 80090e4:	20000be8 	.word	0x20000be8
 80090e8:	20000bd4 	.word	0x20000bd4
 80090ec:	20000bcc 	.word	0x20000bcc
 80090f0:	20000af0 	.word	0x20000af0
 80090f4:	20000010 	.word	0x20000010

080090f8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090f8:	b480      	push	{r7}
 80090fa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80090fc:	4b04      	ldr	r3, [pc, #16]	; (8009110 <vTaskSuspendAll+0x18>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3301      	adds	r3, #1
 8009102:	4a03      	ldr	r2, [pc, #12]	; (8009110 <vTaskSuspendAll+0x18>)
 8009104:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009106:	bf00      	nop
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	20000bf0 	.word	0x20000bf0

08009114 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800911a:	2300      	movs	r3, #0
 800911c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800911e:	2300      	movs	r3, #0
 8009120:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8009122:	4b73      	ldr	r3, [pc, #460]	; (80092f0 <xTaskResumeAll+0x1dc>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10a      	bne.n	8009140 <xTaskResumeAll+0x2c>
        __asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	607b      	str	r3, [r7, #4]
    }
 800913c:	bf00      	nop
 800913e:	e7fe      	b.n	800913e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009140:	f001 fcd2 	bl	800aae8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8009144:	4b6a      	ldr	r3, [pc, #424]	; (80092f0 <xTaskResumeAll+0x1dc>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3b01      	subs	r3, #1
 800914a:	4a69      	ldr	r2, [pc, #420]	; (80092f0 <xTaskResumeAll+0x1dc>)
 800914c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800914e:	4b68      	ldr	r3, [pc, #416]	; (80092f0 <xTaskResumeAll+0x1dc>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	f040 80c4 	bne.w	80092e0 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009158:	4b66      	ldr	r3, [pc, #408]	; (80092f4 <xTaskResumeAll+0x1e0>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 80bf 	beq.w	80092e0 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009162:	e08e      	b.n	8009282 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009164:	4b64      	ldr	r3, [pc, #400]	; (80092f8 <xTaskResumeAll+0x1e4>)
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009170:	613b      	str	r3, [r7, #16]
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	69fa      	ldr	r2, [r7, #28]
 8009178:	6a12      	ldr	r2, [r2, #32]
 800917a:	609a      	str	r2, [r3, #8]
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	69fa      	ldr	r2, [r7, #28]
 8009182:	69d2      	ldr	r2, [r2, #28]
 8009184:	605a      	str	r2, [r3, #4]
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	3318      	adds	r3, #24
 800918e:	429a      	cmp	r2, r3
 8009190:	d103      	bne.n	800919a <xTaskResumeAll+0x86>
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	6a1a      	ldr	r2, [r3, #32]
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	605a      	str	r2, [r3, #4]
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	2200      	movs	r2, #0
 800919e:	629a      	str	r2, [r3, #40]	; 0x28
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	1e5a      	subs	r2, r3, #1
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	60fb      	str	r3, [r7, #12]
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	69fa      	ldr	r2, [r7, #28]
 80091b6:	68d2      	ldr	r2, [r2, #12]
 80091b8:	609a      	str	r2, [r3, #8]
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	69fa      	ldr	r2, [r7, #28]
 80091c0:	6892      	ldr	r2, [r2, #8]
 80091c2:	605a      	str	r2, [r3, #4]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	3304      	adds	r3, #4
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d103      	bne.n	80091d8 <xTaskResumeAll+0xc4>
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	68da      	ldr	r2, [r3, #12]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	605a      	str	r2, [r3, #4]
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	2200      	movs	r2, #0
 80091dc:	615a      	str	r2, [r3, #20]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	1e5a      	subs	r2, r3, #1
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f003 fa62 	bl	800c6b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f4:	2201      	movs	r2, #1
 80091f6:	409a      	lsls	r2, r3
 80091f8:	4b40      	ldr	r3, [pc, #256]	; (80092fc <xTaskResumeAll+0x1e8>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	4a3f      	ldr	r2, [pc, #252]	; (80092fc <xTaskResumeAll+0x1e8>)
 8009200:	6013      	str	r3, [r2, #0]
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009206:	493e      	ldr	r1, [pc, #248]	; (8009300 <xTaskResumeAll+0x1ec>)
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	440b      	add	r3, r1
 8009212:	3304      	adds	r3, #4
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	60bb      	str	r3, [r7, #8]
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	609a      	str	r2, [r3, #8]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	689a      	ldr	r2, [r3, #8]
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	60da      	str	r2, [r3, #12]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	69fa      	ldr	r2, [r7, #28]
 800922c:	3204      	adds	r2, #4
 800922e:	605a      	str	r2, [r3, #4]
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	1d1a      	adds	r2, r3, #4
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	609a      	str	r2, [r3, #8]
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923c:	4613      	mov	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4413      	add	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4a2e      	ldr	r2, [pc, #184]	; (8009300 <xTaskResumeAll+0x1ec>)
 8009246:	441a      	add	r2, r3
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	615a      	str	r2, [r3, #20]
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009250:	492b      	ldr	r1, [pc, #172]	; (8009300 <xTaskResumeAll+0x1ec>)
 8009252:	4613      	mov	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	440b      	add	r3, r1
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	1c59      	adds	r1, r3, #1
 8009260:	4827      	ldr	r0, [pc, #156]	; (8009300 <xTaskResumeAll+0x1ec>)
 8009262:	4613      	mov	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4403      	add	r3, r0
 800926c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009272:	4b24      	ldr	r3, [pc, #144]	; (8009304 <xTaskResumeAll+0x1f0>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009278:	429a      	cmp	r2, r3
 800927a:	d302      	bcc.n	8009282 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 800927c:	4b22      	ldr	r3, [pc, #136]	; (8009308 <xTaskResumeAll+0x1f4>)
 800927e:	2201      	movs	r2, #1
 8009280:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009282:	4b1d      	ldr	r3, [pc, #116]	; (80092f8 <xTaskResumeAll+0x1e4>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	f47f af6c 	bne.w	8009164 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009292:	f000 fc37 	bl	8009b04 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009296:	4b1d      	ldr	r3, [pc, #116]	; (800930c <xTaskResumeAll+0x1f8>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d010      	beq.n	80092c4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80092a2:	f000 f847 	bl	8009334 <xTaskIncrementTick>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80092ac:	4b16      	ldr	r3, [pc, #88]	; (8009308 <xTaskResumeAll+0x1f4>)
 80092ae:	2201      	movs	r2, #1
 80092b0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1f1      	bne.n	80092a2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80092be:	4b13      	ldr	r3, [pc, #76]	; (800930c <xTaskResumeAll+0x1f8>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80092c4:	4b10      	ldr	r3, [pc, #64]	; (8009308 <xTaskResumeAll+0x1f4>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d009      	beq.n	80092e0 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80092cc:	2301      	movs	r3, #1
 80092ce:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80092d0:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <xTaskResumeAll+0x1fc>)
 80092d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80092e0:	f001 fc32 	bl	800ab48 <vPortExitCritical>

    return xAlreadyYielded;
 80092e4:	69bb      	ldr	r3, [r7, #24]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3720      	adds	r7, #32
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20000bf0 	.word	0x20000bf0
 80092f4:	20000bc8 	.word	0x20000bc8
 80092f8:	20000b88 	.word	0x20000b88
 80092fc:	20000bd0 	.word	0x20000bd0
 8009300:	20000af4 	.word	0x20000af4
 8009304:	20000af0 	.word	0x20000af0
 8009308:	20000bdc 	.word	0x20000bdc
 800930c:	20000bd8 	.word	0x20000bd8
 8009310:	e000ed04 	.word	0xe000ed04

08009314 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800931a:	4b05      	ldr	r3, [pc, #20]	; (8009330 <xTaskGetTickCount+0x1c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009320:	687b      	ldr	r3, [r7, #4]
}
 8009322:	4618      	mov	r0, r3
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	20000bcc 	.word	0x20000bcc

08009334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b08a      	sub	sp, #40	; 0x28
 8009338:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800933a:	2300      	movs	r3, #0
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800933e:	4b7f      	ldr	r3, [pc, #508]	; (800953c <xTaskIncrementTick+0x208>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	f040 80f0 	bne.w	8009528 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009348:	4b7d      	ldr	r3, [pc, #500]	; (8009540 <xTaskIncrementTick+0x20c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3301      	adds	r3, #1
 800934e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009350:	4a7b      	ldr	r2, [pc, #492]	; (8009540 <xTaskIncrementTick+0x20c>)
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d120      	bne.n	800939e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800935c:	4b79      	ldr	r3, [pc, #484]	; (8009544 <xTaskIncrementTick+0x210>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00a      	beq.n	800937c <xTaskIncrementTick+0x48>
        __asm volatile
 8009366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936a:	f383 8811 	msr	BASEPRI, r3
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f3bf 8f4f 	dsb	sy
 8009376:	607b      	str	r3, [r7, #4]
    }
 8009378:	bf00      	nop
 800937a:	e7fe      	b.n	800937a <xTaskIncrementTick+0x46>
 800937c:	4b71      	ldr	r3, [pc, #452]	; (8009544 <xTaskIncrementTick+0x210>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	4b71      	ldr	r3, [pc, #452]	; (8009548 <xTaskIncrementTick+0x214>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a6f      	ldr	r2, [pc, #444]	; (8009544 <xTaskIncrementTick+0x210>)
 8009388:	6013      	str	r3, [r2, #0]
 800938a:	4a6f      	ldr	r2, [pc, #444]	; (8009548 <xTaskIncrementTick+0x214>)
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	4b6e      	ldr	r3, [pc, #440]	; (800954c <xTaskIncrementTick+0x218>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3301      	adds	r3, #1
 8009396:	4a6d      	ldr	r2, [pc, #436]	; (800954c <xTaskIncrementTick+0x218>)
 8009398:	6013      	str	r3, [r2, #0]
 800939a:	f000 fbb3 	bl	8009b04 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800939e:	4b6c      	ldr	r3, [pc, #432]	; (8009550 <xTaskIncrementTick+0x21c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	6a3a      	ldr	r2, [r7, #32]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	f0c0 80aa 	bcc.w	80094fe <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093aa:	4b66      	ldr	r3, [pc, #408]	; (8009544 <xTaskIncrementTick+0x210>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d104      	bne.n	80093be <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093b4:	4b66      	ldr	r3, [pc, #408]	; (8009550 <xTaskIncrementTick+0x21c>)
 80093b6:	f04f 32ff 	mov.w	r2, #4294967295
 80093ba:	601a      	str	r2, [r3, #0]
                    break;
 80093bc:	e09f      	b.n	80094fe <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093be:	4b61      	ldr	r3, [pc, #388]	; (8009544 <xTaskIncrementTick+0x210>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80093ce:	6a3a      	ldr	r2, [r7, #32]
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d203      	bcs.n	80093de <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80093d6:	4a5e      	ldr	r2, [pc, #376]	; (8009550 <xTaskIncrementTick+0x21c>)
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80093dc:	e08f      	b.n	80094fe <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	613b      	str	r3, [r7, #16]
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	68d2      	ldr	r2, [r2, #12]
 80093ec:	609a      	str	r2, [r3, #8]
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	69ba      	ldr	r2, [r7, #24]
 80093f4:	6892      	ldr	r2, [r2, #8]
 80093f6:	605a      	str	r2, [r3, #4]
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	3304      	adds	r3, #4
 8009400:	429a      	cmp	r2, r3
 8009402:	d103      	bne.n	800940c <xTaskIncrementTick+0xd8>
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	68da      	ldr	r2, [r3, #12]
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	605a      	str	r2, [r3, #4]
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	2200      	movs	r2, #0
 8009410:	615a      	str	r2, [r3, #20]
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	1e5a      	subs	r2, r3, #1
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009420:	2b00      	cmp	r3, #0
 8009422:	d01e      	beq.n	8009462 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009428:	60fb      	str	r3, [r7, #12]
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	69ba      	ldr	r2, [r7, #24]
 8009430:	6a12      	ldr	r2, [r2, #32]
 8009432:	609a      	str	r2, [r3, #8]
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	6a1b      	ldr	r3, [r3, #32]
 8009438:	69ba      	ldr	r2, [r7, #24]
 800943a:	69d2      	ldr	r2, [r2, #28]
 800943c:	605a      	str	r2, [r3, #4]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	685a      	ldr	r2, [r3, #4]
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	3318      	adds	r3, #24
 8009446:	429a      	cmp	r2, r3
 8009448:	d103      	bne.n	8009452 <xTaskIncrementTick+0x11e>
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	6a1a      	ldr	r2, [r3, #32]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	605a      	str	r2, [r3, #4]
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	2200      	movs	r2, #0
 8009456:	629a      	str	r2, [r3, #40]	; 0x28
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	1e5a      	subs	r2, r3, #1
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	4618      	mov	r0, r3
 8009466:	f003 f925 	bl	800c6b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946e:	2201      	movs	r2, #1
 8009470:	409a      	lsls	r2, r3
 8009472:	4b38      	ldr	r3, [pc, #224]	; (8009554 <xTaskIncrementTick+0x220>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4313      	orrs	r3, r2
 8009478:	4a36      	ldr	r2, [pc, #216]	; (8009554 <xTaskIncrementTick+0x220>)
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009480:	4935      	ldr	r1, [pc, #212]	; (8009558 <xTaskIncrementTick+0x224>)
 8009482:	4613      	mov	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	440b      	add	r3, r1
 800948c:	3304      	adds	r3, #4
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60bb      	str	r3, [r7, #8]
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	609a      	str	r2, [r3, #8]
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	689a      	ldr	r2, [r3, #8]
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	60da      	str	r2, [r3, #12]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	3204      	adds	r2, #4
 80094a8:	605a      	str	r2, [r3, #4]
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	1d1a      	adds	r2, r3, #4
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	609a      	str	r2, [r3, #8]
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b6:	4613      	mov	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4a26      	ldr	r2, [pc, #152]	; (8009558 <xTaskIncrementTick+0x224>)
 80094c0:	441a      	add	r2, r3
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	615a      	str	r2, [r3, #20]
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ca:	4923      	ldr	r1, [pc, #140]	; (8009558 <xTaskIncrementTick+0x224>)
 80094cc:	4613      	mov	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	440b      	add	r3, r1
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	1c59      	adds	r1, r3, #1
 80094da:	481f      	ldr	r0, [pc, #124]	; (8009558 <xTaskIncrementTick+0x224>)
 80094dc:	4613      	mov	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4403      	add	r3, r0
 80094e6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ec:	4b1b      	ldr	r3, [pc, #108]	; (800955c <xTaskIncrementTick+0x228>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f2:	429a      	cmp	r2, r3
 80094f4:	f67f af59 	bls.w	80093aa <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80094f8:	2301      	movs	r3, #1
 80094fa:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094fc:	e755      	b.n	80093aa <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094fe:	4b17      	ldr	r3, [pc, #92]	; (800955c <xTaskIncrementTick+0x228>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009504:	4914      	ldr	r1, [pc, #80]	; (8009558 <xTaskIncrementTick+0x224>)
 8009506:	4613      	mov	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	440b      	add	r3, r1
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d901      	bls.n	800951a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8009516:	2301      	movs	r3, #1
 8009518:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800951a:	4b11      	ldr	r3, [pc, #68]	; (8009560 <xTaskIncrementTick+0x22c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d007      	beq.n	8009532 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8009522:	2301      	movs	r3, #1
 8009524:	627b      	str	r3, [r7, #36]	; 0x24
 8009526:	e004      	b.n	8009532 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8009528:	4b0e      	ldr	r3, [pc, #56]	; (8009564 <xTaskIncrementTick+0x230>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3301      	adds	r3, #1
 800952e:	4a0d      	ldr	r2, [pc, #52]	; (8009564 <xTaskIncrementTick+0x230>)
 8009530:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009534:	4618      	mov	r0, r3
 8009536:	3728      	adds	r7, #40	; 0x28
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	20000bf0 	.word	0x20000bf0
 8009540:	20000bcc 	.word	0x20000bcc
 8009544:	20000b80 	.word	0x20000b80
 8009548:	20000b84 	.word	0x20000b84
 800954c:	20000be0 	.word	0x20000be0
 8009550:	20000be8 	.word	0x20000be8
 8009554:	20000bd0 	.word	0x20000bd0
 8009558:	20000af4 	.word	0x20000af4
 800955c:	20000af0 	.word	0x20000af0
 8009560:	20000bdc 	.word	0x20000bdc
 8009564:	20000bd8 	.word	0x20000bd8

08009568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800956e:	4b2d      	ldr	r3, [pc, #180]	; (8009624 <vTaskSwitchContext+0xbc>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8009576:	4b2c      	ldr	r3, [pc, #176]	; (8009628 <vTaskSwitchContext+0xc0>)
 8009578:	2201      	movs	r2, #1
 800957a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800957c:	e04d      	b.n	800961a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800957e:	4b2a      	ldr	r3, [pc, #168]	; (8009628 <vTaskSwitchContext+0xc0>)
 8009580:	2200      	movs	r2, #0
 8009582:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009584:	4b29      	ldr	r3, [pc, #164]	; (800962c <vTaskSwitchContext+0xc4>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	fab3 f383 	clz	r3, r3
 8009590:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8009592:	7afb      	ldrb	r3, [r7, #11]
 8009594:	f1c3 031f 	rsb	r3, r3, #31
 8009598:	617b      	str	r3, [r7, #20]
 800959a:	4925      	ldr	r1, [pc, #148]	; (8009630 <vTaskSwitchContext+0xc8>)
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	4613      	mov	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	440b      	add	r3, r1
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10a      	bne.n	80095c4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	607b      	str	r3, [r7, #4]
    }
 80095c0:	bf00      	nop
 80095c2:	e7fe      	b.n	80095c2 <vTaskSwitchContext+0x5a>
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4a18      	ldr	r2, [pc, #96]	; (8009630 <vTaskSwitchContext+0xc8>)
 80095d0:	4413      	add	r3, r2
 80095d2:	613b      	str	r3, [r7, #16]
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	685a      	ldr	r2, [r3, #4]
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	605a      	str	r2, [r3, #4]
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	3308      	adds	r3, #8
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d104      	bne.n	80095f4 <vTaskSwitchContext+0x8c>
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	605a      	str	r2, [r3, #4]
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	4a0e      	ldr	r2, [pc, #56]	; (8009634 <vTaskSwitchContext+0xcc>)
 80095fc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80095fe:	4b0d      	ldr	r3, [pc, #52]	; (8009634 <vTaskSwitchContext+0xcc>)
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	4b0d      	ldr	r3, [pc, #52]	; (8009638 <vTaskSwitchContext+0xd0>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d102      	bne.n	8009610 <vTaskSwitchContext+0xa8>
 800960a:	f002 ffb3 	bl	800c574 <SEGGER_SYSVIEW_OnIdle>
}
 800960e:	e004      	b.n	800961a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8009610:	4b08      	ldr	r3, [pc, #32]	; (8009634 <vTaskSwitchContext+0xcc>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4618      	mov	r0, r3
 8009616:	f003 f80b 	bl	800c630 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800961a:	bf00      	nop
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20000bf0 	.word	0x20000bf0
 8009628:	20000bdc 	.word	0x20000bdc
 800962c:	20000bd0 	.word	0x20000bd0
 8009630:	20000af4 	.word	0x20000af4
 8009634:	20000af0 	.word	0x20000af0
 8009638:	20000bec 	.word	0x20000bec

0800963c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10a      	bne.n	8009662 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	60fb      	str	r3, [r7, #12]
    }
 800965e:	bf00      	nop
 8009660:	e7fe      	b.n	8009660 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009662:	4b07      	ldr	r3, [pc, #28]	; (8009680 <vTaskPlaceOnEventList+0x44>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3318      	adds	r3, #24
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7fe ff8f 	bl	800858e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009670:	2101      	movs	r1, #1
 8009672:	6838      	ldr	r0, [r7, #0]
 8009674:	f000 fdaa 	bl	800a1cc <prvAddCurrentTaskToDelayedList>
}
 8009678:	bf00      	nop
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	20000af0 	.word	0x20000af0

08009684 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10a      	bne.n	80096ac <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8009696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	613b      	str	r3, [r7, #16]
    }
 80096a8:	bf00      	nop
 80096aa:	e7fe      	b.n	80096aa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	617b      	str	r3, [r7, #20]
 80096b2:	4b17      	ldr	r3, [pc, #92]	; (8009710 <vTaskPlaceOnEventListRestricted+0x8c>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	61da      	str	r2, [r3, #28]
 80096ba:	4b15      	ldr	r3, [pc, #84]	; (8009710 <vTaskPlaceOnEventListRestricted+0x8c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	6892      	ldr	r2, [r2, #8]
 80096c2:	621a      	str	r2, [r3, #32]
 80096c4:	4b12      	ldr	r3, [pc, #72]	; (8009710 <vTaskPlaceOnEventListRestricted+0x8c>)
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	3218      	adds	r2, #24
 80096ce:	605a      	str	r2, [r3, #4]
 80096d0:	4b0f      	ldr	r3, [pc, #60]	; (8009710 <vTaskPlaceOnEventListRestricted+0x8c>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f103 0218 	add.w	r2, r3, #24
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	609a      	str	r2, [r3, #8]
 80096dc:	4b0c      	ldr	r3, [pc, #48]	; (8009710 <vTaskPlaceOnEventListRestricted+0x8c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	629a      	str	r2, [r3, #40]	; 0x28
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	1c5a      	adds	r2, r3, #1
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80096f4:	f04f 33ff 	mov.w	r3, #4294967295
 80096f8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80096fa:	2024      	movs	r0, #36	; 0x24
 80096fc:	f002 f9b2 	bl	800ba64 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	68b8      	ldr	r0, [r7, #8]
 8009704:	f000 fd62 	bl	800a1cc <prvAddCurrentTaskToDelayedList>
    }
 8009708:	bf00      	nop
 800970a:	3718      	adds	r7, #24
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	20000af0 	.word	0x20000af0

08009714 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b08a      	sub	sp, #40	; 0x28
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10a      	bne.n	8009740 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	60fb      	str	r3, [r7, #12]
    }
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8009740:	6a3b      	ldr	r3, [r7, #32]
 8009742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009744:	61fb      	str	r3, [r7, #28]
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	69db      	ldr	r3, [r3, #28]
 800974a:	6a3a      	ldr	r2, [r7, #32]
 800974c:	6a12      	ldr	r2, [r2, #32]
 800974e:	609a      	str	r2, [r3, #8]
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	6a1b      	ldr	r3, [r3, #32]
 8009754:	6a3a      	ldr	r2, [r7, #32]
 8009756:	69d2      	ldr	r2, [r2, #28]
 8009758:	605a      	str	r2, [r3, #4]
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	3318      	adds	r3, #24
 8009762:	429a      	cmp	r2, r3
 8009764:	d103      	bne.n	800976e <xTaskRemoveFromEventList+0x5a>
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	6a1a      	ldr	r2, [r3, #32]
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	605a      	str	r2, [r3, #4]
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	2200      	movs	r2, #0
 8009772:	629a      	str	r2, [r3, #40]	; 0x28
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	1e5a      	subs	r2, r3, #1
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800977e:	4b4b      	ldr	r3, [pc, #300]	; (80098ac <xTaskRemoveFromEventList+0x198>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d162      	bne.n	800984c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	6a3b      	ldr	r3, [r7, #32]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	6a3a      	ldr	r2, [r7, #32]
 8009792:	68d2      	ldr	r2, [r2, #12]
 8009794:	609a      	str	r2, [r3, #8]
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	6a3a      	ldr	r2, [r7, #32]
 800979c:	6892      	ldr	r2, [r2, #8]
 800979e:	605a      	str	r2, [r3, #4]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	3304      	adds	r3, #4
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d103      	bne.n	80097b4 <xTaskRemoveFromEventList+0xa0>
 80097ac:	6a3b      	ldr	r3, [r7, #32]
 80097ae:	68da      	ldr	r2, [r3, #12]
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	605a      	str	r2, [r3, #4]
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	2200      	movs	r2, #0
 80097b8:	615a      	str	r2, [r3, #20]
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	1e5a      	subs	r2, r3, #1
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f002 ff74 	bl	800c6b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d0:	2201      	movs	r2, #1
 80097d2:	409a      	lsls	r2, r3
 80097d4:	4b36      	ldr	r3, [pc, #216]	; (80098b0 <xTaskRemoveFromEventList+0x19c>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4313      	orrs	r3, r2
 80097da:	4a35      	ldr	r2, [pc, #212]	; (80098b0 <xTaskRemoveFromEventList+0x19c>)
 80097dc:	6013      	str	r3, [r2, #0]
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e2:	4934      	ldr	r1, [pc, #208]	; (80098b4 <xTaskRemoveFromEventList+0x1a0>)
 80097e4:	4613      	mov	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	440b      	add	r3, r1
 80097ee:	3304      	adds	r3, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	613b      	str	r3, [r7, #16]
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	609a      	str	r2, [r3, #8]
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	689a      	ldr	r2, [r3, #8]
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	60da      	str	r2, [r3, #12]
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	6a3a      	ldr	r2, [r7, #32]
 8009808:	3204      	adds	r2, #4
 800980a:	605a      	str	r2, [r3, #4]
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	1d1a      	adds	r2, r3, #4
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	609a      	str	r2, [r3, #8]
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009818:	4613      	mov	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4a24      	ldr	r2, [pc, #144]	; (80098b4 <xTaskRemoveFromEventList+0x1a0>)
 8009822:	441a      	add	r2, r3
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	615a      	str	r2, [r3, #20]
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800982c:	4921      	ldr	r1, [pc, #132]	; (80098b4 <xTaskRemoveFromEventList+0x1a0>)
 800982e:	4613      	mov	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	440b      	add	r3, r1
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	1c59      	adds	r1, r3, #1
 800983c:	481d      	ldr	r0, [pc, #116]	; (80098b4 <xTaskRemoveFromEventList+0x1a0>)
 800983e:	4613      	mov	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4403      	add	r3, r0
 8009848:	6019      	str	r1, [r3, #0]
 800984a:	e01b      	b.n	8009884 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800984c:	4b1a      	ldr	r3, [pc, #104]	; (80098b8 <xTaskRemoveFromEventList+0x1a4>)
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	61bb      	str	r3, [r7, #24]
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	69ba      	ldr	r2, [r7, #24]
 8009856:	61da      	str	r2, [r3, #28]
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	6a3b      	ldr	r3, [r7, #32]
 800985e:	621a      	str	r2, [r3, #32]
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	6a3a      	ldr	r2, [r7, #32]
 8009866:	3218      	adds	r2, #24
 8009868:	605a      	str	r2, [r3, #4]
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	f103 0218 	add.w	r2, r3, #24
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	609a      	str	r2, [r3, #8]
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	4a10      	ldr	r2, [pc, #64]	; (80098b8 <xTaskRemoveFromEventList+0x1a4>)
 8009878:	629a      	str	r2, [r3, #40]	; 0x28
 800987a:	4b0f      	ldr	r3, [pc, #60]	; (80098b8 <xTaskRemoveFromEventList+0x1a4>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3301      	adds	r3, #1
 8009880:	4a0d      	ldr	r2, [pc, #52]	; (80098b8 <xTaskRemoveFromEventList+0x1a4>)
 8009882:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009888:	4b0c      	ldr	r3, [pc, #48]	; (80098bc <xTaskRemoveFromEventList+0x1a8>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988e:	429a      	cmp	r2, r3
 8009890:	d905      	bls.n	800989e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8009892:	2301      	movs	r3, #1
 8009894:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8009896:	4b0a      	ldr	r3, [pc, #40]	; (80098c0 <xTaskRemoveFromEventList+0x1ac>)
 8009898:	2201      	movs	r2, #1
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	e001      	b.n	80098a2 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800989e:	2300      	movs	r3, #0
 80098a0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3728      	adds	r7, #40	; 0x28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	20000bf0 	.word	0x20000bf0
 80098b0:	20000bd0 	.word	0x20000bd0
 80098b4:	20000af4 	.word	0x20000af4
 80098b8:	20000b88 	.word	0x20000b88
 80098bc:	20000af0 	.word	0x20000af0
 80098c0:	20000bdc 	.word	0x20000bdc

080098c4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098cc:	4b06      	ldr	r3, [pc, #24]	; (80098e8 <vTaskInternalSetTimeOutState+0x24>)
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80098d4:	4b05      	ldr	r3, [pc, #20]	; (80098ec <vTaskInternalSetTimeOutState+0x28>)
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	605a      	str	r2, [r3, #4]
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	20000be0 	.word	0x20000be0
 80098ec:	20000bcc 	.word	0x20000bcc

080098f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b088      	sub	sp, #32
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10a      	bne.n	8009916 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	613b      	str	r3, [r7, #16]
    }
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10a      	bne.n	8009932 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	60fb      	str	r3, [r7, #12]
    }
 800992e:	bf00      	nop
 8009930:	e7fe      	b.n	8009930 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8009932:	f001 f8d9 	bl	800aae8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8009936:	4b1f      	ldr	r3, [pc, #124]	; (80099b4 <xTaskCheckForTimeOut+0xc4>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994e:	d102      	bne.n	8009956 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8009950:	2300      	movs	r3, #0
 8009952:	61fb      	str	r3, [r7, #28]
 8009954:	e026      	b.n	80099a4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	4b17      	ldr	r3, [pc, #92]	; (80099b8 <xTaskCheckForTimeOut+0xc8>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	429a      	cmp	r2, r3
 8009960:	d00a      	beq.n	8009978 <xTaskCheckForTimeOut+0x88>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	69ba      	ldr	r2, [r7, #24]
 8009968:	429a      	cmp	r2, r3
 800996a:	d305      	bcc.n	8009978 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800996c:	2301      	movs	r3, #1
 800996e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	e015      	b.n	80099a4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	697a      	ldr	r2, [r7, #20]
 800997e:	429a      	cmp	r2, r3
 8009980:	d20b      	bcs.n	800999a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	1ad2      	subs	r2, r2, r3
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff ff98 	bl	80098c4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009994:	2300      	movs	r3, #0
 8009996:	61fb      	str	r3, [r7, #28]
 8009998:	e004      	b.n	80099a4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2200      	movs	r2, #0
 800999e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80099a0:	2301      	movs	r3, #1
 80099a2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80099a4:	f001 f8d0 	bl	800ab48 <vPortExitCritical>

    return xReturn;
 80099a8:	69fb      	ldr	r3, [r7, #28]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3720      	adds	r7, #32
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20000bcc 	.word	0x20000bcc
 80099b8:	20000be0 	.word	0x20000be0

080099bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80099c0:	4b03      	ldr	r3, [pc, #12]	; (80099d0 <vTaskMissedYield+0x14>)
 80099c2:	2201      	movs	r2, #1
 80099c4:	601a      	str	r2, [r3, #0]
}
 80099c6:	bf00      	nop
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	20000bdc 	.word	0x20000bdc

080099d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80099dc:	f000 f854 	bl	8009a88 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099e0:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <prvIdleTask+0x2c>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d907      	bls.n	80099f8 <prvIdleTask+0x24>
            {
                taskYIELD();
 80099e8:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <prvIdleTask+0x30>)
 80099ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 80099f8:	f7f7 fb92 	bl	8001120 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 80099fc:	e7ee      	b.n	80099dc <prvIdleTask+0x8>
 80099fe:	bf00      	nop
 8009a00:	20000af4 	.word	0x20000af4
 8009a04:	e000ed04 	.word	0xe000ed04

08009a08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a0e:	2300      	movs	r3, #0
 8009a10:	607b      	str	r3, [r7, #4]
 8009a12:	e00c      	b.n	8009a2e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	4613      	mov	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4413      	add	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4a12      	ldr	r2, [pc, #72]	; (8009a68 <prvInitialiseTaskLists+0x60>)
 8009a20:	4413      	add	r3, r2
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fe fd86 	bl	8008534 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	607b      	str	r3, [r7, #4]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d9ef      	bls.n	8009a14 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009a34:	480d      	ldr	r0, [pc, #52]	; (8009a6c <prvInitialiseTaskLists+0x64>)
 8009a36:	f7fe fd7d 	bl	8008534 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8009a3a:	480d      	ldr	r0, [pc, #52]	; (8009a70 <prvInitialiseTaskLists+0x68>)
 8009a3c:	f7fe fd7a 	bl	8008534 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009a40:	480c      	ldr	r0, [pc, #48]	; (8009a74 <prvInitialiseTaskLists+0x6c>)
 8009a42:	f7fe fd77 	bl	8008534 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8009a46:	480c      	ldr	r0, [pc, #48]	; (8009a78 <prvInitialiseTaskLists+0x70>)
 8009a48:	f7fe fd74 	bl	8008534 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8009a4c:	480b      	ldr	r0, [pc, #44]	; (8009a7c <prvInitialiseTaskLists+0x74>)
 8009a4e:	f7fe fd71 	bl	8008534 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009a52:	4b0b      	ldr	r3, [pc, #44]	; (8009a80 <prvInitialiseTaskLists+0x78>)
 8009a54:	4a05      	ldr	r2, [pc, #20]	; (8009a6c <prvInitialiseTaskLists+0x64>)
 8009a56:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a58:	4b0a      	ldr	r3, [pc, #40]	; (8009a84 <prvInitialiseTaskLists+0x7c>)
 8009a5a:	4a05      	ldr	r2, [pc, #20]	; (8009a70 <prvInitialiseTaskLists+0x68>)
 8009a5c:	601a      	str	r2, [r3, #0]
}
 8009a5e:	bf00      	nop
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20000af4 	.word	0x20000af4
 8009a6c:	20000b58 	.word	0x20000b58
 8009a70:	20000b6c 	.word	0x20000b6c
 8009a74:	20000b88 	.word	0x20000b88
 8009a78:	20000b9c 	.word	0x20000b9c
 8009a7c:	20000bb4 	.word	0x20000bb4
 8009a80:	20000b80 	.word	0x20000b80
 8009a84:	20000b84 	.word	0x20000b84

08009a88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a8e:	e019      	b.n	8009ac4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8009a90:	f001 f82a 	bl	800aae8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a94:	4b10      	ldr	r3, [pc, #64]	; (8009ad8 <prvCheckTasksWaitingTermination+0x50>)
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fdad 	bl	8008600 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8009aa6:	4b0d      	ldr	r3, [pc, #52]	; (8009adc <prvCheckTasksWaitingTermination+0x54>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	4a0b      	ldr	r2, [pc, #44]	; (8009adc <prvCheckTasksWaitingTermination+0x54>)
 8009aae:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8009ab0:	4b0b      	ldr	r3, [pc, #44]	; (8009ae0 <prvCheckTasksWaitingTermination+0x58>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	4a0a      	ldr	r2, [pc, #40]	; (8009ae0 <prvCheckTasksWaitingTermination+0x58>)
 8009ab8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8009aba:	f001 f845 	bl	800ab48 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f810 	bl	8009ae4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ac4:	4b06      	ldr	r3, [pc, #24]	; (8009ae0 <prvCheckTasksWaitingTermination+0x58>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1e1      	bne.n	8009a90 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8009acc:	bf00      	nop
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20000b9c 	.word	0x20000b9c
 8009adc:	20000bc8 	.word	0x20000bc8
 8009ae0:	20000bb0 	.word	0x20000bb0

08009ae4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af0:	4618      	mov	r0, r3
 8009af2:	f001 f9dd 	bl	800aeb0 <vPortFree>
            vPortFree( pxTCB );
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f001 f9da 	bl	800aeb0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b04:	b480      	push	{r7}
 8009b06:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b08:	4b0a      	ldr	r3, [pc, #40]	; (8009b34 <prvResetNextTaskUnblockTime+0x30>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d104      	bne.n	8009b1c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009b12:	4b09      	ldr	r3, [pc, #36]	; (8009b38 <prvResetNextTaskUnblockTime+0x34>)
 8009b14:	f04f 32ff 	mov.w	r2, #4294967295
 8009b18:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8009b1a:	e005      	b.n	8009b28 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009b1c:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <prvResetNextTaskUnblockTime+0x30>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a04      	ldr	r2, [pc, #16]	; (8009b38 <prvResetNextTaskUnblockTime+0x34>)
 8009b26:	6013      	str	r3, [r2, #0]
}
 8009b28:	bf00      	nop
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	20000b80 	.word	0x20000b80
 8009b38:	20000be8 	.word	0x20000be8

08009b3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8009b42:	4b0b      	ldr	r3, [pc, #44]	; (8009b70 <xTaskGetSchedulerState+0x34>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d102      	bne.n	8009b50 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	607b      	str	r3, [r7, #4]
 8009b4e:	e008      	b.n	8009b62 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b50:	4b08      	ldr	r3, [pc, #32]	; (8009b74 <xTaskGetSchedulerState+0x38>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8009b58:	2302      	movs	r3, #2
 8009b5a:	607b      	str	r3, [r7, #4]
 8009b5c:	e001      	b.n	8009b62 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009b62:	687b      	ldr	r3, [r7, #4]
    }
 8009b64:	4618      	mov	r0, r3
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	20000bd4 	.word	0x20000bd4
 8009b74:	20000bf0 	.word	0x20000bf0

08009b78 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b088      	sub	sp, #32
 8009b7c:	af02      	add	r7, sp, #8
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
 8009b84:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00a      	beq.n	8009ba2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	613b      	str	r3, [r7, #16]
    }
 8009b9e:	bf00      	nop
 8009ba0:	e7fe      	b.n	8009ba0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8009ba2:	f000 ffa1 	bl	800aae8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8009ba6:	4b36      	ldr	r3, [pc, #216]	; (8009c80 <xTaskGenericNotifyWait+0x108>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	4413      	add	r3, r2
 8009bae:	3354      	adds	r3, #84	; 0x54
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d022      	beq.n	8009bfe <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8009bb8:	4b31      	ldr	r3, [pc, #196]	; (8009c80 <xTaskGenericNotifyWait+0x108>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	3214      	adds	r2, #20
 8009bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	43d2      	mvns	r2, r2
 8009bc8:	4011      	ands	r1, r2
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	3214      	adds	r2, #20
 8009bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8009bd2:	4b2b      	ldr	r3, [pc, #172]	; (8009c80 <xTaskGenericNotifyWait+0x108>)
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	4413      	add	r3, r2
 8009bda:	3354      	adds	r3, #84	; 0x54
 8009bdc:	2201      	movs	r2, #1
 8009bde:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00b      	beq.n	8009bfe <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009be6:	2101      	movs	r1, #1
 8009be8:	6a38      	ldr	r0, [r7, #32]
 8009bea:	f000 faef 	bl	800a1cc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8009bee:	4b25      	ldr	r3, [pc, #148]	; (8009c84 <xTaskGenericNotifyWait+0x10c>)
 8009bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009bfe:	f000 ffa3 	bl	800ab48 <vPortExitCritical>

        taskENTER_CRITICAL();
 8009c02:	f000 ff71 	bl	800aae8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	68b9      	ldr	r1, [r7, #8]
 8009c12:	2040      	movs	r0, #64	; 0x40
 8009c14:	f002 f850 	bl	800bcb8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d007      	beq.n	8009c2e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8009c1e:	4b18      	ldr	r3, [pc, #96]	; (8009c80 <xTaskGenericNotifyWait+0x108>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	3214      	adds	r2, #20
 8009c26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8009c2e:	4b14      	ldr	r3, [pc, #80]	; (8009c80 <xTaskGenericNotifyWait+0x108>)
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	4413      	add	r3, r2
 8009c36:	3354      	adds	r3, #84	; 0x54
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d002      	beq.n	8009c46 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8009c40:	2300      	movs	r3, #0
 8009c42:	617b      	str	r3, [r7, #20]
 8009c44:	e00e      	b.n	8009c64 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8009c46:	4b0e      	ldr	r3, [pc, #56]	; (8009c80 <xTaskGenericNotifyWait+0x108>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	3214      	adds	r2, #20
 8009c4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	43d2      	mvns	r2, r2
 8009c56:	4011      	ands	r1, r2
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	3214      	adds	r2, #20
 8009c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8009c60:	2301      	movs	r3, #1
 8009c62:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8009c64:	4b06      	ldr	r3, [pc, #24]	; (8009c80 <xTaskGenericNotifyWait+0x108>)
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	3354      	adds	r3, #84	; 0x54
 8009c6e:	2200      	movs	r2, #0
 8009c70:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8009c72:	f000 ff69 	bl	800ab48 <vPortExitCritical>

        return xReturn;
 8009c76:	697b      	ldr	r3, [r7, #20]
    }
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	20000af0 	.word	0x20000af0
 8009c84:	e000ed04 	.word	0xe000ed04

08009c88 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b090      	sub	sp, #64	; 0x40
 8009c8c:	af02      	add	r7, sp, #8
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
 8009c94:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8009c96:	2301      	movs	r3, #1
 8009c98:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00a      	beq.n	8009cb6 <xTaskGenericNotify+0x2e>
        __asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	623b      	str	r3, [r7, #32]
    }
 8009cb2:	bf00      	nop
 8009cb4:	e7fe      	b.n	8009cb4 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d10a      	bne.n	8009cd2 <xTaskGenericNotify+0x4a>
        __asm volatile
 8009cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc0:	f383 8811 	msr	BASEPRI, r3
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	61fb      	str	r3, [r7, #28]
    }
 8009cce:	bf00      	nop
 8009cd0:	e7fe      	b.n	8009cd0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8009cd6:	f000 ff07 	bl	800aae8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8009cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d006      	beq.n	8009cee <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8009ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	3214      	adds	r2, #20
 8009ce6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cec:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8009cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	3354      	adds	r3, #84	; 0x54
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8009cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	4413      	add	r3, r2
 8009d02:	3354      	adds	r3, #84	; 0x54
 8009d04:	2202      	movs	r2, #2
 8009d06:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8009d08:	78fb      	ldrb	r3, [r7, #3]
 8009d0a:	2b04      	cmp	r3, #4
 8009d0c:	d83b      	bhi.n	8009d86 <xTaskGenericNotify+0xfe>
 8009d0e:	a201      	add	r2, pc, #4	; (adr r2, 8009d14 <xTaskGenericNotify+0x8c>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009da5 	.word	0x08009da5
 8009d18:	08009d29 	.word	0x08009d29
 8009d1c:	08009d45 	.word	0x08009d45
 8009d20:	08009d5d 	.word	0x08009d5d
 8009d24:	08009d6b 	.word	0x08009d6b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8009d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	3214      	adds	r2, #20
 8009d2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	ea42 0103 	orr.w	r1, r2, r3
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	3214      	adds	r2, #20
 8009d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8009d42:	e032      	b.n	8009daa <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	3214      	adds	r2, #20
 8009d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4e:	1c59      	adds	r1, r3, #1
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	3214      	adds	r2, #20
 8009d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8009d5a:	e026      	b.n	8009daa <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	3214      	adds	r2, #20
 8009d62:	6879      	ldr	r1, [r7, #4]
 8009d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8009d68:	e01f      	b.n	8009daa <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d006      	beq.n	8009d80 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	3214      	adds	r2, #20
 8009d78:	6879      	ldr	r1, [r7, #4]
 8009d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8009d7e:	e014      	b.n	8009daa <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8009d84:	e011      	b.n	8009daa <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8009d86:	4b55      	ldr	r3, [pc, #340]	; (8009edc <xTaskGenericNotify+0x254>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00c      	beq.n	8009da8 <xTaskGenericNotify+0x120>
        __asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	61bb      	str	r3, [r7, #24]
    }
 8009da0:	bf00      	nop
 8009da2:	e7fe      	b.n	8009da2 <xTaskGenericNotify+0x11a>
                    break;
 8009da4:	bf00      	nop
 8009da6:	e000      	b.n	8009daa <xTaskGenericNotify+0x122>

                    break;
 8009da8:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8009daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dac:	4618      	mov	r0, r3
 8009dae:	f002 fcc3 	bl	800c738 <SEGGER_SYSVIEW_ShrinkId>
 8009db2:	4601      	mov	r1, r0
 8009db4:	78fa      	ldrb	r2, [r7, #3]
 8009db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	203e      	movs	r0, #62	; 0x3e
 8009dc0:	f001 ff7a 	bl	800bcb8 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009dc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d17f      	bne.n	8009ecc <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dd8:	68d2      	ldr	r2, [r2, #12]
 8009dda:	609a      	str	r2, [r3, #8]
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009de2:	6892      	ldr	r2, [r2, #8]
 8009de4:	605a      	str	r2, [r3, #4]
 8009de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de8:	685a      	ldr	r2, [r3, #4]
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	3304      	adds	r3, #4
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d103      	bne.n	8009dfa <xTaskGenericNotify+0x172>
 8009df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df4:	68da      	ldr	r2, [r3, #12]
 8009df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df8:	605a      	str	r2, [r3, #4]
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	615a      	str	r2, [r3, #20]
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	1e5a      	subs	r2, r3, #1
 8009e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e08:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f002 fc51 	bl	800c6b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e16:	2201      	movs	r2, #1
 8009e18:	409a      	lsls	r2, r3
 8009e1a:	4b31      	ldr	r3, [pc, #196]	; (8009ee0 <xTaskGenericNotify+0x258>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	4a2f      	ldr	r2, [pc, #188]	; (8009ee0 <xTaskGenericNotify+0x258>)
 8009e22:	6013      	str	r3, [r2, #0]
 8009e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e28:	492e      	ldr	r1, [pc, #184]	; (8009ee4 <xTaskGenericNotify+0x25c>)
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	440b      	add	r3, r1
 8009e34:	3304      	adds	r3, #4
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	627b      	str	r3, [r7, #36]	; 0x24
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e3e:	609a      	str	r2, [r3, #8]
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	689a      	ldr	r2, [r3, #8]
 8009e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e46:	60da      	str	r2, [r3, #12]
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e4e:	3204      	adds	r2, #4
 8009e50:	605a      	str	r2, [r3, #4]
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	1d1a      	adds	r2, r3, #4
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	609a      	str	r2, [r3, #8]
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e5e:	4613      	mov	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	4413      	add	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4a1f      	ldr	r2, [pc, #124]	; (8009ee4 <xTaskGenericNotify+0x25c>)
 8009e68:	441a      	add	r2, r3
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	615a      	str	r2, [r3, #20]
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e72:	491c      	ldr	r1, [pc, #112]	; (8009ee4 <xTaskGenericNotify+0x25c>)
 8009e74:	4613      	mov	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	440b      	add	r3, r1
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	1c59      	adds	r1, r3, #1
 8009e82:	4818      	ldr	r0, [pc, #96]	; (8009ee4 <xTaskGenericNotify+0x25c>)
 8009e84:	4613      	mov	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4403      	add	r3, r0
 8009e8e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00a      	beq.n	8009eae <xTaskGenericNotify+0x226>
        __asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	617b      	str	r3, [r7, #20]
    }
 8009eaa:	bf00      	nop
 8009eac:	e7fe      	b.n	8009eac <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb2:	4b0d      	ldr	r3, [pc, #52]	; (8009ee8 <xTaskGenericNotify+0x260>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d907      	bls.n	8009ecc <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8009ebc:	4b0b      	ldr	r3, [pc, #44]	; (8009eec <xTaskGenericNotify+0x264>)
 8009ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8009ecc:	f000 fe3c 	bl	800ab48 <vPortExitCritical>

        return xReturn;
 8009ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3738      	adds	r7, #56	; 0x38
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	20000bcc 	.word	0x20000bcc
 8009ee0:	20000bd0 	.word	0x20000bd0
 8009ee4:	20000af4 	.word	0x20000af4
 8009ee8:	20000af0 	.word	0x20000af0
 8009eec:	e000ed04 	.word	0xe000ed04

08009ef0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b094      	sub	sp, #80	; 0x50
 8009ef4:	af02      	add	r7, sp, #8
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
 8009efc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8009efe:	2301      	movs	r3, #1
 8009f00:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10a      	bne.n	8009f1e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8009f1a:	bf00      	nop
 8009f1c:	e7fe      	b.n	8009f1c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00a      	beq.n	8009f3a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f3a:	f000 febf 	bl	800acbc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8009f42:	f3ef 8211 	mrs	r2, BASEPRI
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	623a      	str	r2, [r7, #32]
 8009f58:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8009f5a:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8009f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d006      	beq.n	8009f72 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8009f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	3214      	adds	r2, #20
 8009f6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f70:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8009f72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	4413      	add	r3, r2
 8009f78:	3354      	adds	r3, #84	; 0x54
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8009f80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	4413      	add	r3, r2
 8009f86:	3354      	adds	r3, #84	; 0x54
 8009f88:	2202      	movs	r2, #2
 8009f8a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8009f8c:	78fb      	ldrb	r3, [r7, #3]
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d83b      	bhi.n	800a00a <xTaskGenericNotifyFromISR+0x11a>
 8009f92:	a201      	add	r2, pc, #4	; (adr r2, 8009f98 <xTaskGenericNotifyFromISR+0xa8>)
 8009f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f98:	0800a029 	.word	0x0800a029
 8009f9c:	08009fad 	.word	0x08009fad
 8009fa0:	08009fc9 	.word	0x08009fc9
 8009fa4:	08009fe1 	.word	0x08009fe1
 8009fa8:	08009fef 	.word	0x08009fef
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8009fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	3214      	adds	r2, #20
 8009fb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	ea42 0103 	orr.w	r1, r2, r3
 8009fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	3214      	adds	r2, #20
 8009fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8009fc6:	e032      	b.n	800a02e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8009fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	3214      	adds	r2, #20
 8009fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd2:	1c59      	adds	r1, r3, #1
 8009fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	3214      	adds	r2, #20
 8009fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8009fde:	e026      	b.n	800a02e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8009fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	3214      	adds	r2, #20
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8009fec:	e01f      	b.n	800a02e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009fee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d006      	beq.n	800a004 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8009ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	3214      	adds	r2, #20
 8009ffc:	6879      	ldr	r1, [r7, #4]
 8009ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800a002:	e014      	b.n	800a02e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800a004:	2300      	movs	r3, #0
 800a006:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800a008:	e011      	b.n	800a02e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800a00a:	4b69      	ldr	r3, [pc, #420]	; (800a1b0 <xTaskGenericNotifyFromISR+0x2c0>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00c      	beq.n	800a02c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	61bb      	str	r3, [r7, #24]
    }
 800a024:	bf00      	nop
 800a026:	e7fe      	b.n	800a026 <xTaskGenericNotifyFromISR+0x136>
                    break;
 800a028:	bf00      	nop
 800a02a:	e000      	b.n	800a02e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800a02c:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800a02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a030:	4618      	mov	r0, r3
 800a032:	f002 fb81 	bl	800c738 <SEGGER_SYSVIEW_ShrinkId>
 800a036:	78f9      	ldrb	r1, [r7, #3]
 800a038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a03a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a03c:	9201      	str	r2, [sp, #4]
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	460b      	mov	r3, r1
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	4601      	mov	r1, r0
 800a046:	203f      	movs	r0, #63	; 0x3f
 800a048:	f001 fec8 	bl	800bddc <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a04c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a050:	2b01      	cmp	r3, #1
 800a052:	f040 80a2 	bne.w	800a19a <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00a      	beq.n	800a074 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	617b      	str	r3, [r7, #20]
    }
 800a070:	bf00      	nop
 800a072:	e7fe      	b.n	800a072 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a074:	4b4f      	ldr	r3, [pc, #316]	; (800a1b4 <xTaskGenericNotifyFromISR+0x2c4>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d162      	bne.n	800a142 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a07c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	633b      	str	r3, [r7, #48]	; 0x30
 800a082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a088:	68d2      	ldr	r2, [r2, #12]
 800a08a:	609a      	str	r2, [r3, #8]
 800a08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a092:	6892      	ldr	r2, [r2, #8]
 800a094:	605a      	str	r2, [r3, #4]
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a09c:	3304      	adds	r3, #4
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d103      	bne.n	800a0aa <xTaskGenericNotifyFromISR+0x1ba>
 800a0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0a4:	68da      	ldr	r2, [r3, #12]
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a8:	605a      	str	r2, [r3, #4]
 800a0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	615a      	str	r2, [r3, #20]
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	1e5a      	subs	r2, r3, #1
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800a0ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f002 faf9 	bl	800c6b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a0c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	409a      	lsls	r2, r3
 800a0ca:	4b3b      	ldr	r3, [pc, #236]	; (800a1b8 <xTaskGenericNotifyFromISR+0x2c8>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	4a39      	ldr	r2, [pc, #228]	; (800a1b8 <xTaskGenericNotifyFromISR+0x2c8>)
 800a0d2:	6013      	str	r3, [r2, #0]
 800a0d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d8:	4938      	ldr	r1, [pc, #224]	; (800a1bc <xTaskGenericNotifyFromISR+0x2cc>)
 800a0da:	4613      	mov	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	440b      	add	r3, r1
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ee:	609a      	str	r2, [r3, #8]
 800a0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0f6:	60da      	str	r2, [r3, #12]
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0fe:	3204      	adds	r2, #4
 800a100:	605a      	str	r2, [r3, #4]
 800a102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a104:	1d1a      	adds	r2, r3, #4
 800a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a108:	609a      	str	r2, [r3, #8]
 800a10a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a10e:	4613      	mov	r3, r2
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4a29      	ldr	r2, [pc, #164]	; (800a1bc <xTaskGenericNotifyFromISR+0x2cc>)
 800a118:	441a      	add	r2, r3
 800a11a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a11c:	615a      	str	r2, [r3, #20]
 800a11e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a122:	4926      	ldr	r1, [pc, #152]	; (800a1bc <xTaskGenericNotifyFromISR+0x2cc>)
 800a124:	4613      	mov	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	440b      	add	r3, r1
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	1c59      	adds	r1, r3, #1
 800a132:	4822      	ldr	r0, [pc, #136]	; (800a1bc <xTaskGenericNotifyFromISR+0x2cc>)
 800a134:	4613      	mov	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4413      	add	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4403      	add	r3, r0
 800a13e:	6019      	str	r1, [r3, #0]
 800a140:	e01b      	b.n	800a17a <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a142:	4b1f      	ldr	r3, [pc, #124]	; (800a1c0 <xTaskGenericNotifyFromISR+0x2d0>)
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	637b      	str	r3, [r7, #52]	; 0x34
 800a148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a14a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a14c:	61da      	str	r2, [r3, #28]
 800a14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a150:	689a      	ldr	r2, [r3, #8]
 800a152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a154:	621a      	str	r2, [r3, #32]
 800a156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a15c:	3218      	adds	r2, #24
 800a15e:	605a      	str	r2, [r3, #4]
 800a160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a162:	f103 0218 	add.w	r2, r3, #24
 800a166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a168:	609a      	str	r2, [r3, #8]
 800a16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a16c:	4a14      	ldr	r2, [pc, #80]	; (800a1c0 <xTaskGenericNotifyFromISR+0x2d0>)
 800a16e:	629a      	str	r2, [r3, #40]	; 0x28
 800a170:	4b13      	ldr	r3, [pc, #76]	; (800a1c0 <xTaskGenericNotifyFromISR+0x2d0>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	3301      	adds	r3, #1
 800a176:	4a12      	ldr	r2, [pc, #72]	; (800a1c0 <xTaskGenericNotifyFromISR+0x2d0>)
 800a178:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a17a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a17e:	4b11      	ldr	r3, [pc, #68]	; (800a1c4 <xTaskGenericNotifyFromISR+0x2d4>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a184:	429a      	cmp	r2, r3
 800a186:	d908      	bls.n	800a19a <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800a188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d002      	beq.n	800a194 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800a18e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a190:	2201      	movs	r2, #1
 800a192:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800a194:	4b0c      	ldr	r3, [pc, #48]	; (800a1c8 <xTaskGenericNotifyFromISR+0x2d8>)
 800a196:	2201      	movs	r2, #1
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800a1a4:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800a1a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3748      	adds	r7, #72	; 0x48
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	20000bcc 	.word	0x20000bcc
 800a1b4:	20000bf0 	.word	0x20000bf0
 800a1b8:	20000bd0 	.word	0x20000bd0
 800a1bc:	20000af4 	.word	0x20000af4
 800a1c0:	20000b88 	.word	0x20000b88
 800a1c4:	20000af0 	.word	0x20000af0
 800a1c8:	20000bdc 	.word	0x20000bdc

0800a1cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800a1d6:	4b36      	ldr	r3, [pc, #216]	; (800a2b0 <prvAddCurrentTaskToDelayedList+0xe4>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1dc:	4b35      	ldr	r3, [pc, #212]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fe fa0c 	bl	8008600 <uxListRemove>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d10b      	bne.n	800a206 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a1ee:	4b31      	ldr	r3, [pc, #196]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fa:	43da      	mvns	r2, r3
 800a1fc:	4b2e      	ldr	r3, [pc, #184]	; (800a2b8 <prvAddCurrentTaskToDelayedList+0xec>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4013      	ands	r3, r2
 800a202:	4a2d      	ldr	r2, [pc, #180]	; (800a2b8 <prvAddCurrentTaskToDelayedList+0xec>)
 800a204:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20c:	d124      	bne.n	800a258 <prvAddCurrentTaskToDelayedList+0x8c>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d021      	beq.n	800a258 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a214:	4b29      	ldr	r3, [pc, #164]	; (800a2bc <prvAddCurrentTaskToDelayedList+0xf0>)
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	613b      	str	r3, [r7, #16]
 800a21a:	4b26      	ldr	r3, [pc, #152]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	609a      	str	r2, [r3, #8]
 800a222:	4b24      	ldr	r3, [pc, #144]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	6892      	ldr	r2, [r2, #8]
 800a22a:	60da      	str	r2, [r3, #12]
 800a22c:	4b21      	ldr	r3, [pc, #132]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	3204      	adds	r2, #4
 800a236:	605a      	str	r2, [r3, #4]
 800a238:	4b1e      	ldr	r3, [pc, #120]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	1d1a      	adds	r2, r3, #4
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	609a      	str	r2, [r3, #8]
 800a242:	4b1c      	ldr	r3, [pc, #112]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a1d      	ldr	r2, [pc, #116]	; (800a2bc <prvAddCurrentTaskToDelayedList+0xf0>)
 800a248:	615a      	str	r2, [r3, #20]
 800a24a:	4b1c      	ldr	r3, [pc, #112]	; (800a2bc <prvAddCurrentTaskToDelayedList+0xf0>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3301      	adds	r3, #1
 800a250:	4a1a      	ldr	r2, [pc, #104]	; (800a2bc <prvAddCurrentTaskToDelayedList+0xf0>)
 800a252:	6013      	str	r3, [r2, #0]
 800a254:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800a256:	e026      	b.n	800a2a6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4413      	add	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a260:	4b14      	ldr	r3, [pc, #80]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d209      	bcs.n	800a284 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a270:	4b13      	ldr	r3, [pc, #76]	; (800a2c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	4b0f      	ldr	r3, [pc, #60]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3304      	adds	r3, #4
 800a27a:	4619      	mov	r1, r3
 800a27c:	4610      	mov	r0, r2
 800a27e:	f7fe f986 	bl	800858e <vListInsert>
}
 800a282:	e010      	b.n	800a2a6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a284:	4b0f      	ldr	r3, [pc, #60]	; (800a2c4 <prvAddCurrentTaskToDelayedList+0xf8>)
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	4b0a      	ldr	r3, [pc, #40]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	3304      	adds	r3, #4
 800a28e:	4619      	mov	r1, r3
 800a290:	4610      	mov	r0, r2
 800a292:	f7fe f97c 	bl	800858e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800a296:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d202      	bcs.n	800a2a6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800a2a0:	4a09      	ldr	r2, [pc, #36]	; (800a2c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6013      	str	r3, [r2, #0]
}
 800a2a6:	bf00      	nop
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000bcc 	.word	0x20000bcc
 800a2b4:	20000af0 	.word	0x20000af0
 800a2b8:	20000bd0 	.word	0x20000bd0
 800a2bc:	20000bb4 	.word	0x20000bb4
 800a2c0:	20000b84 	.word	0x20000b84
 800a2c4:	20000b80 	.word	0x20000b80
 800a2c8:	20000be8 	.word	0x20000be8

0800a2cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800a2d6:	f000 fa9f 	bl	800a818 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800a2da:	4b11      	ldr	r3, [pc, #68]	; (800a320 <xTimerCreateTimerTask+0x54>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00b      	beq.n	800a2fa <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800a2e2:	4b10      	ldr	r3, [pc, #64]	; (800a324 <xTimerCreateTimerTask+0x58>)
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a2f0:	490d      	ldr	r1, [pc, #52]	; (800a328 <xTimerCreateTimerTask+0x5c>)
 800a2f2:	480e      	ldr	r0, [pc, #56]	; (800a32c <xTimerCreateTimerTask+0x60>)
 800a2f4:	f7fe fcde 	bl	8008cb4 <xTaskCreate>
 800a2f8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10a      	bne.n	800a316 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	603b      	str	r3, [r7, #0]
    }
 800a312:	bf00      	nop
 800a314:	e7fe      	b.n	800a314 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800a316:	687b      	ldr	r3, [r7, #4]
    }
 800a318:	4618      	mov	r0, r3
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20000c24 	.word	0x20000c24
 800a324:	20000c28 	.word	0x20000c28
 800a328:	08010510 	.word	0x08010510
 800a32c:	0800a485 	.word	0x0800a485

0800a330 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800a330:	b580      	push	{r7, lr}
 800a332:	b088      	sub	sp, #32
 800a334:	af02      	add	r7, sp, #8
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a33e:	202c      	movs	r0, #44	; 0x2c
 800a340:	f000 fcfc 	bl	800ad3c <pvPortMalloc>
 800a344:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00d      	beq.n	800a368 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	9301      	str	r3, [sp, #4]
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	68b9      	ldr	r1, [r7, #8]
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f000 f805 	bl	800a372 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800a368:	697b      	ldr	r3, [r7, #20]
        }
 800a36a:	4618      	mov	r0, r3
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800a372:	b580      	push	{r7, lr}
 800a374:	b086      	sub	sp, #24
 800a376:	af00      	add	r7, sp, #0
 800a378:	60f8      	str	r0, [r7, #12]
 800a37a:	60b9      	str	r1, [r7, #8]
 800a37c:	607a      	str	r2, [r7, #4]
 800a37e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10a      	bne.n	800a39c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	617b      	str	r3, [r7, #20]
    }
 800a398:	bf00      	nop
 800a39a:	e7fe      	b.n	800a39a <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800a39c:	f000 fa3c 	bl	800a818 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b4:	6a3a      	ldr	r2, [r7, #32]
 800a3b6:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7fe f8d9 	bl	8008574 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d008      	beq.n	800a3da <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3ce:	f043 0304 	orr.w	r3, r3, #4
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 800a3da:	bf00      	nop
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	60b9      	str	r1, [r7, #8]
 800a3ec:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a3ee:	e008      	b.n	800a402 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	699b      	ldr	r3, [r3, #24]
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	699a      	ldr	r2, [r3, #24]
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	18d1      	adds	r1, r2, r3
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 f8dc 	bl	800a5cc <prvInsertTimerInActiveList>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1ea      	bne.n	800a3f0 <prvReloadTimer+0xe>
        }
    }
 800a41a:	bf00      	nop
 800a41c:	bf00      	nop
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a42e:	4b14      	ldr	r3, [pc, #80]	; (800a480 <prvProcessExpiredTimer+0x5c>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3304      	adds	r3, #4
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fe f8df 	bl	8008600 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a448:	f003 0304 	and.w	r3, r3, #4
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d005      	beq.n	800a45c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800a450:	683a      	ldr	r2, [r7, #0]
 800a452:	6879      	ldr	r1, [r7, #4]
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f7ff ffc4 	bl	800a3e2 <prvReloadTimer>
 800a45a:	e008      	b.n	800a46e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a462:	f023 0301 	bic.w	r3, r3, #1
 800a466:	b2da      	uxtb	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	4798      	blx	r3
    }
 800a476:	bf00      	nop
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	20000c1c 	.word	0x20000c1c

0800a484 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a48c:	f107 0308 	add.w	r3, r7, #8
 800a490:	4618      	mov	r0, r3
 800a492:	f000 f857 	bl	800a544 <prvGetNextExpireTime>
 800a496:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	4619      	mov	r1, r3
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 f803 	bl	800a4a8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800a4a2:	f000 f8d5 	bl	800a650 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4a6:	e7f1      	b.n	800a48c <prvTimerTask+0x8>

0800a4a8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800a4b2:	f7fe fe21 	bl	80090f8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4b6:	f107 0308 	add.w	r3, r7, #8
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 f866 	bl	800a58c <prvSampleTimeNow>
 800a4c0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d130      	bne.n	800a52a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10a      	bne.n	800a4e4 <prvProcessTimerOrBlockTask+0x3c>
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d806      	bhi.n	800a4e4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800a4d6:	f7fe fe1d 	bl	8009114 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4da:	68f9      	ldr	r1, [r7, #12]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f7ff ffa1 	bl	800a424 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800a4e2:	e024      	b.n	800a52e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d008      	beq.n	800a4fc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4ea:	4b13      	ldr	r3, [pc, #76]	; (800a538 <prvProcessTimerOrBlockTask+0x90>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d101      	bne.n	800a4f8 <prvProcessTimerOrBlockTask+0x50>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e000      	b.n	800a4fa <prvProcessTimerOrBlockTask+0x52>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4fc:	4b0f      	ldr	r3, [pc, #60]	; (800a53c <prvProcessTimerOrBlockTask+0x94>)
 800a4fe:	6818      	ldr	r0, [r3, #0]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	4619      	mov	r1, r3
 800a50a:	f7fe fb9f 	bl	8008c4c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800a50e:	f7fe fe01 	bl	8009114 <xTaskResumeAll>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10a      	bne.n	800a52e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800a518:	4b09      	ldr	r3, [pc, #36]	; (800a540 <prvProcessTimerOrBlockTask+0x98>)
 800a51a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a51e:	601a      	str	r2, [r3, #0]
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	f3bf 8f6f 	isb	sy
    }
 800a528:	e001      	b.n	800a52e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800a52a:	f7fe fdf3 	bl	8009114 <xTaskResumeAll>
    }
 800a52e:	bf00      	nop
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	20000c20 	.word	0x20000c20
 800a53c:	20000c24 	.word	0x20000c24
 800a540:	e000ed04 	.word	0xe000ed04

0800a544 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a54c:	4b0e      	ldr	r3, [pc, #56]	; (800a588 <prvGetNextExpireTime+0x44>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <prvGetNextExpireTime+0x16>
 800a556:	2201      	movs	r2, #1
 800a558:	e000      	b.n	800a55c <prvGetNextExpireTime+0x18>
 800a55a:	2200      	movs	r2, #0
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d105      	bne.n	800a574 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a568:	4b07      	ldr	r3, [pc, #28]	; (800a588 <prvGetNextExpireTime+0x44>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	60fb      	str	r3, [r7, #12]
 800a572:	e001      	b.n	800a578 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800a574:	2300      	movs	r3, #0
 800a576:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800a578:	68fb      	ldr	r3, [r7, #12]
    }
 800a57a:	4618      	mov	r0, r3
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	20000c1c 	.word	0x20000c1c

0800a58c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800a594:	f7fe febe 	bl	8009314 <xTaskGetTickCount>
 800a598:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800a59a:	4b0b      	ldr	r3, [pc, #44]	; (800a5c8 <prvSampleTimeNow+0x3c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d205      	bcs.n	800a5b0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800a5a4:	f000 f912 	bl	800a7cc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	e002      	b.n	800a5b6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800a5b6:	4a04      	ldr	r2, [pc, #16]	; (800a5c8 <prvSampleTimeNow+0x3c>)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
    }
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	20000c2c 	.word	0x20000c2c

0800a5cc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d812      	bhi.n	800a618 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	1ad2      	subs	r2, r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d302      	bcc.n	800a606 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800a600:	2301      	movs	r3, #1
 800a602:	617b      	str	r3, [r7, #20]
 800a604:	e01b      	b.n	800a63e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a606:	4b10      	ldr	r3, [pc, #64]	; (800a648 <prvInsertTimerInActiveList+0x7c>)
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3304      	adds	r3, #4
 800a60e:	4619      	mov	r1, r3
 800a610:	4610      	mov	r0, r2
 800a612:	f7fd ffbc 	bl	800858e <vListInsert>
 800a616:	e012      	b.n	800a63e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d206      	bcs.n	800a62e <prvInsertTimerInActiveList+0x62>
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	429a      	cmp	r2, r3
 800a626:	d302      	bcc.n	800a62e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800a628:	2301      	movs	r3, #1
 800a62a:	617b      	str	r3, [r7, #20]
 800a62c:	e007      	b.n	800a63e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a62e:	4b07      	ldr	r3, [pc, #28]	; (800a64c <prvInsertTimerInActiveList+0x80>)
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3304      	adds	r3, #4
 800a636:	4619      	mov	r1, r3
 800a638:	4610      	mov	r0, r2
 800a63a:	f7fd ffa8 	bl	800858e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800a63e:	697b      	ldr	r3, [r7, #20]
    }
 800a640:	4618      	mov	r0, r3
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	20000c20 	.word	0x20000c20
 800a64c:	20000c1c 	.word	0x20000c1c

0800a650 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800a650:	b580      	push	{r7, lr}
 800a652:	b088      	sub	sp, #32
 800a654:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a656:	e0a6      	b.n	800a7a6 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f2c0 80a3 	blt.w	800a7a6 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	695b      	ldr	r3, [r3, #20]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d004      	beq.n	800a676 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	3304      	adds	r3, #4
 800a670:	4618      	mov	r0, r3
 800a672:	f7fd ffc5 	bl	8008600 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a676:	1d3b      	adds	r3, r7, #4
 800a678:	4618      	mov	r0, r3
 800a67a:	f7ff ff87 	bl	800a58c <prvSampleTimeNow>
 800a67e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	3b01      	subs	r3, #1
 800a684:	2b08      	cmp	r3, #8
 800a686:	f200 808d 	bhi.w	800a7a4 <prvProcessReceivedCommands+0x154>
 800a68a:	a201      	add	r2, pc, #4	; (adr r2, 800a690 <prvProcessReceivedCommands+0x40>)
 800a68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a690:	0800a6b5 	.word	0x0800a6b5
 800a694:	0800a6b5 	.word	0x0800a6b5
 800a698:	0800a71d 	.word	0x0800a71d
 800a69c:	0800a731 	.word	0x0800a731
 800a6a0:	0800a77b 	.word	0x0800a77b
 800a6a4:	0800a6b5 	.word	0x0800a6b5
 800a6a8:	0800a6b5 	.word	0x0800a6b5
 800a6ac:	0800a71d 	.word	0x0800a71d
 800a6b0:	0800a731 	.word	0x0800a731
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6ba:	f043 0301 	orr.w	r3, r3, #1
 800a6be:	b2da      	uxtb	r2, r3
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	18d1      	adds	r1, r2, r3
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	69ba      	ldr	r2, [r7, #24]
 800a6d2:	69f8      	ldr	r0, [r7, #28]
 800a6d4:	f7ff ff7a 	bl	800a5cc <prvInsertTimerInActiveList>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d063      	beq.n	800a7a6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e4:	f003 0304 	and.w	r3, r3, #4
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d009      	beq.n	800a700 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	699b      	ldr	r3, [r3, #24]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	69ba      	ldr	r2, [r7, #24]
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	69f8      	ldr	r0, [r7, #28]
 800a6fa:	f7ff fe72 	bl	800a3e2 <prvReloadTimer>
 800a6fe:	e008      	b.n	800a712 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a706:	f023 0301 	bic.w	r3, r3, #1
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	6a1b      	ldr	r3, [r3, #32]
 800a716:	69f8      	ldr	r0, [r7, #28]
 800a718:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800a71a:	e044      	b.n	800a7a6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a722:	f023 0301 	bic.w	r3, r3, #1
 800a726:	b2da      	uxtb	r2, r3
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800a72e:	e03a      	b.n	800a7a6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a736:	f043 0301 	orr.w	r3, r3, #1
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10a      	bne.n	800a766 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	617b      	str	r3, [r7, #20]
    }
 800a762:	bf00      	nop
 800a764:	e7fe      	b.n	800a764 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	699a      	ldr	r2, [r3, #24]
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	18d1      	adds	r1, r2, r3
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	69ba      	ldr	r2, [r7, #24]
 800a772:	69f8      	ldr	r0, [r7, #28]
 800a774:	f7ff ff2a 	bl	800a5cc <prvInsertTimerInActiveList>
                        break;
 800a778:	e015      	b.n	800a7a6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a780:	f003 0302 	and.w	r3, r3, #2
 800a784:	2b00      	cmp	r3, #0
 800a786:	d103      	bne.n	800a790 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800a788:	69f8      	ldr	r0, [r7, #28]
 800a78a:	f000 fb91 	bl	800aeb0 <vPortFree>
 800a78e:	e00a      	b.n	800a7a6 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a796:	f023 0301 	bic.w	r3, r3, #1
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800a7a2:	e000      	b.n	800a7a6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 800a7a4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7a6:	4b08      	ldr	r3, [pc, #32]	; (800a7c8 <prvProcessReceivedCommands+0x178>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f107 0108 	add.w	r1, r7, #8
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fe f857 	bl	8008864 <xQueueReceive>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f47f af4d 	bne.w	800a658 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800a7be:	bf00      	nop
 800a7c0:	bf00      	nop
 800a7c2:	3720      	adds	r7, #32
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	20000c24 	.word	0x20000c24

0800a7cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7d2:	e009      	b.n	800a7e8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7d4:	4b0e      	ldr	r3, [pc, #56]	; (800a810 <prvSwitchTimerLists+0x44>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800a7de:	f04f 31ff 	mov.w	r1, #4294967295
 800a7e2:	6838      	ldr	r0, [r7, #0]
 800a7e4:	f7ff fe1e 	bl	800a424 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7e8:	4b09      	ldr	r3, [pc, #36]	; (800a810 <prvSwitchTimerLists+0x44>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1f0      	bne.n	800a7d4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800a7f2:	4b07      	ldr	r3, [pc, #28]	; (800a810 <prvSwitchTimerLists+0x44>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800a7f8:	4b06      	ldr	r3, [pc, #24]	; (800a814 <prvSwitchTimerLists+0x48>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a04      	ldr	r2, [pc, #16]	; (800a810 <prvSwitchTimerLists+0x44>)
 800a7fe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800a800:	4a04      	ldr	r2, [pc, #16]	; (800a814 <prvSwitchTimerLists+0x48>)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6013      	str	r3, [r2, #0]
    }
 800a806:	bf00      	nop
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	20000c1c 	.word	0x20000c1c
 800a814:	20000c20 	.word	0x20000c20

0800a818 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800a818:	b580      	push	{r7, lr}
 800a81a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800a81c:	f000 f964 	bl	800aae8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800a820:	4b12      	ldr	r3, [pc, #72]	; (800a86c <prvCheckForValidListAndQueue+0x54>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d11d      	bne.n	800a864 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800a828:	4811      	ldr	r0, [pc, #68]	; (800a870 <prvCheckForValidListAndQueue+0x58>)
 800a82a:	f7fd fe83 	bl	8008534 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800a82e:	4811      	ldr	r0, [pc, #68]	; (800a874 <prvCheckForValidListAndQueue+0x5c>)
 800a830:	f7fd fe80 	bl	8008534 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800a834:	4b10      	ldr	r3, [pc, #64]	; (800a878 <prvCheckForValidListAndQueue+0x60>)
 800a836:	4a0e      	ldr	r2, [pc, #56]	; (800a870 <prvCheckForValidListAndQueue+0x58>)
 800a838:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800a83a:	4b10      	ldr	r3, [pc, #64]	; (800a87c <prvCheckForValidListAndQueue+0x64>)
 800a83c:	4a0d      	ldr	r2, [pc, #52]	; (800a874 <prvCheckForValidListAndQueue+0x5c>)
 800a83e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a840:	2200      	movs	r2, #0
 800a842:	210c      	movs	r1, #12
 800a844:	200a      	movs	r0, #10
 800a846:	f7fd ff95 	bl	8008774 <xQueueGenericCreate>
 800a84a:	4603      	mov	r3, r0
 800a84c:	4a07      	ldr	r2, [pc, #28]	; (800a86c <prvCheckForValidListAndQueue+0x54>)
 800a84e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800a850:	4b06      	ldr	r3, [pc, #24]	; (800a86c <prvCheckForValidListAndQueue+0x54>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d005      	beq.n	800a864 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a858:	4b04      	ldr	r3, [pc, #16]	; (800a86c <prvCheckForValidListAndQueue+0x54>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4908      	ldr	r1, [pc, #32]	; (800a880 <prvCheckForValidListAndQueue+0x68>)
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fe f99e 	bl	8008ba0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a864:	f000 f970 	bl	800ab48 <vPortExitCritical>
    }
 800a868:	bf00      	nop
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	20000c24 	.word	0x20000c24
 800a870:	20000bf4 	.word	0x20000bf4
 800a874:	20000c08 	.word	0x20000c08
 800a878:	20000c1c 	.word	0x20000c1c
 800a87c:	20000c20 	.word	0x20000c20
 800a880:	08010518 	.word	0x08010518

0800a884 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	3b04      	subs	r3, #4
 800a894:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a89c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3b04      	subs	r3, #4
 800a8a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	f023 0201 	bic.w	r2, r3, #1
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3b04      	subs	r3, #4
 800a8b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800a8b4:	4a0c      	ldr	r2, [pc, #48]	; (800a8e8 <pxPortInitialiseStack+0x64>)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	3b14      	subs	r3, #20
 800a8be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	3b04      	subs	r3, #4
 800a8ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f06f 0202 	mvn.w	r2, #2
 800a8d2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	3b20      	subs	r3, #32
 800a8d8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800a8da:	68fb      	ldr	r3, [r7, #12]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	0800a8ed 	.word	0x0800a8ed

0800a8ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800a8f6:	4b12      	ldr	r3, [pc, #72]	; (800a940 <prvTaskExitError+0x54>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8fe:	d00a      	beq.n	800a916 <prvTaskExitError+0x2a>
        __asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	60fb      	str	r3, [r7, #12]
    }
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <prvTaskExitError+0x28>
        __asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	60bb      	str	r3, [r7, #8]
    }
 800a928:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800a92a:	bf00      	nop
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d0fc      	beq.n	800a92c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800a932:	bf00      	nop
 800a934:	bf00      	nop
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr
 800a940:	20000014 	.word	0x20000014
	...

0800a950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800a950:	4b07      	ldr	r3, [pc, #28]	; (800a970 <pxCurrentTCBConst2>)
 800a952:	6819      	ldr	r1, [r3, #0]
 800a954:	6808      	ldr	r0, [r1, #0]
 800a956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95a:	f380 8809 	msr	PSP, r0
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f04f 0000 	mov.w	r0, #0
 800a966:	f380 8811 	msr	BASEPRI, r0
 800a96a:	4770      	bx	lr
 800a96c:	f3af 8000 	nop.w

0800a970 <pxCurrentTCBConst2>:
 800a970:	20000af0 	.word	0x20000af0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800a974:	bf00      	nop
 800a976:	bf00      	nop

0800a978 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800a978:	4808      	ldr	r0, [pc, #32]	; (800a99c <prvPortStartFirstTask+0x24>)
 800a97a:	6800      	ldr	r0, [r0, #0]
 800a97c:	6800      	ldr	r0, [r0, #0]
 800a97e:	f380 8808 	msr	MSP, r0
 800a982:	f04f 0000 	mov.w	r0, #0
 800a986:	f380 8814 	msr	CONTROL, r0
 800a98a:	b662      	cpsie	i
 800a98c:	b661      	cpsie	f
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	f3bf 8f6f 	isb	sy
 800a996:	df00      	svc	0
 800a998:	bf00      	nop
 800a99a:	0000      	.short	0x0000
 800a99c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800a9a0:	bf00      	nop
 800a9a2:	bf00      	nop

0800a9a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b086      	sub	sp, #24
 800a9a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a9aa:	4b46      	ldr	r3, [pc, #280]	; (800aac4 <xPortStartScheduler+0x120>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a46      	ldr	r2, [pc, #280]	; (800aac8 <xPortStartScheduler+0x124>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d10a      	bne.n	800a9ca <xPortStartScheduler+0x26>
        __asm volatile
 800a9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	613b      	str	r3, [r7, #16]
    }
 800a9c6:	bf00      	nop
 800a9c8:	e7fe      	b.n	800a9c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a9ca:	4b3e      	ldr	r3, [pc, #248]	; (800aac4 <xPortStartScheduler+0x120>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a3f      	ldr	r2, [pc, #252]	; (800aacc <xPortStartScheduler+0x128>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d10a      	bne.n	800a9ea <xPortStartScheduler+0x46>
        __asm volatile
 800a9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d8:	f383 8811 	msr	BASEPRI, r3
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	60fb      	str	r3, [r7, #12]
    }
 800a9e6:	bf00      	nop
 800a9e8:	e7fe      	b.n	800a9e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a9ea:	4b39      	ldr	r3, [pc, #228]	; (800aad0 <xPortStartScheduler+0x12c>)
 800a9ec:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	22ff      	movs	r2, #255	; 0xff
 800a9fa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	4b31      	ldr	r3, [pc, #196]	; (800aad4 <xPortStartScheduler+0x130>)
 800aa10:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa12:	4b31      	ldr	r3, [pc, #196]	; (800aad8 <xPortStartScheduler+0x134>)
 800aa14:	2207      	movs	r2, #7
 800aa16:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa18:	e009      	b.n	800aa2e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800aa1a:	4b2f      	ldr	r3, [pc, #188]	; (800aad8 <xPortStartScheduler+0x134>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	4a2d      	ldr	r2, [pc, #180]	; (800aad8 <xPortStartScheduler+0x134>)
 800aa22:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa24:	78fb      	ldrb	r3, [r7, #3]
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	005b      	lsls	r3, r3, #1
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa2e:	78fb      	ldrb	r3, [r7, #3]
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa36:	2b80      	cmp	r3, #128	; 0x80
 800aa38:	d0ef      	beq.n	800aa1a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa3a:	4b27      	ldr	r3, [pc, #156]	; (800aad8 <xPortStartScheduler+0x134>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f1c3 0307 	rsb	r3, r3, #7
 800aa42:	2b04      	cmp	r3, #4
 800aa44:	d00a      	beq.n	800aa5c <xPortStartScheduler+0xb8>
        __asm volatile
 800aa46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4a:	f383 8811 	msr	BASEPRI, r3
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	60bb      	str	r3, [r7, #8]
    }
 800aa58:	bf00      	nop
 800aa5a:	e7fe      	b.n	800aa5a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa5c:	4b1e      	ldr	r3, [pc, #120]	; (800aad8 <xPortStartScheduler+0x134>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	021b      	lsls	r3, r3, #8
 800aa62:	4a1d      	ldr	r2, [pc, #116]	; (800aad8 <xPortStartScheduler+0x134>)
 800aa64:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa66:	4b1c      	ldr	r3, [pc, #112]	; (800aad8 <xPortStartScheduler+0x134>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa6e:	4a1a      	ldr	r2, [pc, #104]	; (800aad8 <xPortStartScheduler+0x134>)
 800aa70:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800aa7a:	4b18      	ldr	r3, [pc, #96]	; (800aadc <xPortStartScheduler+0x138>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a17      	ldr	r2, [pc, #92]	; (800aadc <xPortStartScheduler+0x138>)
 800aa80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aa84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800aa86:	4b15      	ldr	r3, [pc, #84]	; (800aadc <xPortStartScheduler+0x138>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a14      	ldr	r2, [pc, #80]	; (800aadc <xPortStartScheduler+0x138>)
 800aa8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aa90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800aa92:	f000 f8e3 	bl	800ac5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800aa96:	4b12      	ldr	r3, [pc, #72]	; (800aae0 <xPortStartScheduler+0x13c>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800aa9c:	f000 f902 	bl	800aca4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aaa0:	4b10      	ldr	r3, [pc, #64]	; (800aae4 <xPortStartScheduler+0x140>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a0f      	ldr	r2, [pc, #60]	; (800aae4 <xPortStartScheduler+0x140>)
 800aaa6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aaaa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800aaac:	f7ff ff64 	bl	800a978 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800aab0:	f7fe fd5a 	bl	8009568 <vTaskSwitchContext>
    prvTaskExitError();
 800aab4:	f7ff ff1a 	bl	800a8ec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3718      	adds	r7, #24
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	e000ed00 	.word	0xe000ed00
 800aac8:	410fc271 	.word	0x410fc271
 800aacc:	410fc270 	.word	0x410fc270
 800aad0:	e000e400 	.word	0xe000e400
 800aad4:	20000c30 	.word	0x20000c30
 800aad8:	20000c34 	.word	0x20000c34
 800aadc:	e000ed20 	.word	0xe000ed20
 800aae0:	20000014 	.word	0x20000014
 800aae4:	e000ef34 	.word	0xe000ef34

0800aae8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
        __asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	607b      	str	r3, [r7, #4]
    }
 800ab00:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800ab02:	4b0f      	ldr	r3, [pc, #60]	; (800ab40 <vPortEnterCritical+0x58>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	3301      	adds	r3, #1
 800ab08:	4a0d      	ldr	r2, [pc, #52]	; (800ab40 <vPortEnterCritical+0x58>)
 800ab0a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800ab0c:	4b0c      	ldr	r3, [pc, #48]	; (800ab40 <vPortEnterCritical+0x58>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d10f      	bne.n	800ab34 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab14:	4b0b      	ldr	r3, [pc, #44]	; (800ab44 <vPortEnterCritical+0x5c>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00a      	beq.n	800ab34 <vPortEnterCritical+0x4c>
        __asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	603b      	str	r3, [r7, #0]
    }
 800ab30:	bf00      	nop
 800ab32:	e7fe      	b.n	800ab32 <vPortEnterCritical+0x4a>
    }
}
 800ab34:	bf00      	nop
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	20000014 	.word	0x20000014
 800ab44:	e000ed04 	.word	0xe000ed04

0800ab48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800ab4e:	4b12      	ldr	r3, [pc, #72]	; (800ab98 <vPortExitCritical+0x50>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10a      	bne.n	800ab6c <vPortExitCritical+0x24>
        __asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	607b      	str	r3, [r7, #4]
    }
 800ab68:	bf00      	nop
 800ab6a:	e7fe      	b.n	800ab6a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800ab6c:	4b0a      	ldr	r3, [pc, #40]	; (800ab98 <vPortExitCritical+0x50>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3b01      	subs	r3, #1
 800ab72:	4a09      	ldr	r2, [pc, #36]	; (800ab98 <vPortExitCritical+0x50>)
 800ab74:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800ab76:	4b08      	ldr	r3, [pc, #32]	; (800ab98 <vPortExitCritical+0x50>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d105      	bne.n	800ab8a <vPortExitCritical+0x42>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	603b      	str	r3, [r7, #0]
        __asm volatile
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	f383 8811 	msr	BASEPRI, r3
    }
 800ab88:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800ab8a:	bf00      	nop
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	20000014 	.word	0x20000014
 800ab9c:	00000000 	.word	0x00000000

0800aba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800aba0:	f3ef 8009 	mrs	r0, PSP
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	4b15      	ldr	r3, [pc, #84]	; (800ac00 <pxCurrentTCBConst>)
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	f01e 0f10 	tst.w	lr, #16
 800abb0:	bf08      	it	eq
 800abb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800abb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abba:	6010      	str	r0, [r2, #0]
 800abbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800abc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800abc4:	f380 8811 	msr	BASEPRI, r0
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f7fe fcca 	bl	8009568 <vTaskSwitchContext>
 800abd4:	f04f 0000 	mov.w	r0, #0
 800abd8:	f380 8811 	msr	BASEPRI, r0
 800abdc:	bc09      	pop	{r0, r3}
 800abde:	6819      	ldr	r1, [r3, #0]
 800abe0:	6808      	ldr	r0, [r1, #0]
 800abe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe6:	f01e 0f10 	tst.w	lr, #16
 800abea:	bf08      	it	eq
 800abec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800abf0:	f380 8809 	msr	PSP, r0
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	f3af 8000 	nop.w

0800ac00 <pxCurrentTCBConst>:
 800ac00:	20000af0 	.word	0x20000af0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800ac04:	bf00      	nop
 800ac06:	bf00      	nop

0800ac08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
        __asm volatile
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	f383 8811 	msr	BASEPRI, r3
 800ac16:	f3bf 8f6f 	isb	sy
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	607b      	str	r3, [r7, #4]
    }
 800ac20:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800ac22:	f001 fc2d 	bl	800c480 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800ac26:	f7fe fb85 	bl	8009334 <xTaskIncrementTick>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d006      	beq.n	800ac3e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800ac30:	f001 fc84 	bl	800c53c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac34:	4b08      	ldr	r3, [pc, #32]	; (800ac58 <SysTick_Handler+0x50>)
 800ac36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac3a:	601a      	str	r2, [r3, #0]
 800ac3c:	e001      	b.n	800ac42 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800ac3e:	f001 fc61 	bl	800c504 <SEGGER_SYSVIEW_RecordExitISR>
 800ac42:	2300      	movs	r3, #0
 800ac44:	603b      	str	r3, [r7, #0]
        __asm volatile
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	f383 8811 	msr	BASEPRI, r3
    }
 800ac4c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800ac4e:	bf00      	nop
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	e000ed04 	.word	0xe000ed04

0800ac5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac60:	4b0b      	ldr	r3, [pc, #44]	; (800ac90 <vPortSetupTimerInterrupt+0x34>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac66:	4b0b      	ldr	r3, [pc, #44]	; (800ac94 <vPortSetupTimerInterrupt+0x38>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac6c:	4b0a      	ldr	r3, [pc, #40]	; (800ac98 <vPortSetupTimerInterrupt+0x3c>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a0a      	ldr	r2, [pc, #40]	; (800ac9c <vPortSetupTimerInterrupt+0x40>)
 800ac72:	fba2 2303 	umull	r2, r3, r2, r3
 800ac76:	099b      	lsrs	r3, r3, #6
 800ac78:	4a09      	ldr	r2, [pc, #36]	; (800aca0 <vPortSetupTimerInterrupt+0x44>)
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac7e:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <vPortSetupTimerInterrupt+0x34>)
 800ac80:	2207      	movs	r2, #7
 800ac82:	601a      	str	r2, [r3, #0]
}
 800ac84:	bf00      	nop
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	e000e010 	.word	0xe000e010
 800ac94:	e000e018 	.word	0xe000e018
 800ac98:	20000004 	.word	0x20000004
 800ac9c:	10624dd3 	.word	0x10624dd3
 800aca0:	e000e014 	.word	0xe000e014

0800aca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800aca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800acb4 <vPortEnableVFP+0x10>
 800aca8:	6801      	ldr	r1, [r0, #0]
 800acaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800acae:	6001      	str	r1, [r0, #0]
 800acb0:	4770      	bx	lr
 800acb2:	0000      	.short	0x0000
 800acb4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800acb8:	bf00      	nop
 800acba:	bf00      	nop

0800acbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800acc2:	f3ef 8305 	mrs	r3, IPSR
 800acc6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2b0f      	cmp	r3, #15
 800accc:	d914      	bls.n	800acf8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800acce:	4a17      	ldr	r2, [pc, #92]	; (800ad2c <vPortValidateInterruptPriority+0x70>)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	4413      	add	r3, r2
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800acd8:	4b15      	ldr	r3, [pc, #84]	; (800ad30 <vPortValidateInterruptPriority+0x74>)
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	7afa      	ldrb	r2, [r7, #11]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d20a      	bcs.n	800acf8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800ace2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace6:	f383 8811 	msr	BASEPRI, r3
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	607b      	str	r3, [r7, #4]
    }
 800acf4:	bf00      	nop
 800acf6:	e7fe      	b.n	800acf6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800acf8:	4b0e      	ldr	r3, [pc, #56]	; (800ad34 <vPortValidateInterruptPriority+0x78>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad00:	4b0d      	ldr	r3, [pc, #52]	; (800ad38 <vPortValidateInterruptPriority+0x7c>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d90a      	bls.n	800ad1e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	603b      	str	r3, [r7, #0]
    }
 800ad1a:	bf00      	nop
 800ad1c:	e7fe      	b.n	800ad1c <vPortValidateInterruptPriority+0x60>
    }
 800ad1e:	bf00      	nop
 800ad20:	3714      	adds	r7, #20
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	e000e3f0 	.word	0xe000e3f0
 800ad30:	20000c30 	.word	0x20000c30
 800ad34:	e000ed0c 	.word	0xe000ed0c
 800ad38:	20000c34 	.word	0x20000c34

0800ad3c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08a      	sub	sp, #40	; 0x28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800ad44:	2300      	movs	r3, #0
 800ad46:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800ad48:	f7fe f9d6 	bl	80090f8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800ad4c:	4b53      	ldr	r3, [pc, #332]	; (800ae9c <pvPortMalloc+0x160>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d101      	bne.n	800ad58 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800ad54:	f000 f908 	bl	800af68 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d012      	beq.n	800ad84 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800ad5e:	2208      	movs	r2, #8
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f003 0307 	and.w	r3, r3, #7
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	3308      	adds	r3, #8
 800ad6a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	43db      	mvns	r3, r3
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d804      	bhi.n	800ad80 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	607b      	str	r3, [r7, #4]
 800ad7e:	e001      	b.n	800ad84 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	db70      	blt.n	800ae6c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d06d      	beq.n	800ae6c <pvPortMalloc+0x130>
 800ad90:	4b43      	ldr	r3, [pc, #268]	; (800aea0 <pvPortMalloc+0x164>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d868      	bhi.n	800ae6c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800ad9a:	4b42      	ldr	r3, [pc, #264]	; (800aea4 <pvPortMalloc+0x168>)
 800ad9c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800ad9e:	4b41      	ldr	r3, [pc, #260]	; (800aea4 <pvPortMalloc+0x168>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ada4:	e004      	b.n	800adb0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800adaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d903      	bls.n	800adc2 <pvPortMalloc+0x86>
 800adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1f1      	bne.n	800ada6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800adc2:	4b36      	ldr	r3, [pc, #216]	; (800ae9c <pvPortMalloc+0x160>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adc8:	429a      	cmp	r2, r3
 800adca:	d04f      	beq.n	800ae6c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800adcc:	6a3b      	ldr	r3, [r7, #32]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2208      	movs	r2, #8
 800add2:	4413      	add	r3, r2
 800add4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	6a3b      	ldr	r3, [r7, #32]
 800addc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	685a      	ldr	r2, [r3, #4]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	1ad2      	subs	r2, r2, r3
 800ade6:	2308      	movs	r3, #8
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	429a      	cmp	r2, r3
 800adec:	d91f      	bls.n	800ae2e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4413      	add	r3, r2
 800adf4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f003 0307 	and.w	r3, r3, #7
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00a      	beq.n	800ae16 <pvPortMalloc+0xda>
        __asm volatile
 800ae00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae04:	f383 8811 	msr	BASEPRI, r3
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	613b      	str	r3, [r7, #16]
    }
 800ae12:	bf00      	nop
 800ae14:	e7fe      	b.n	800ae14 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae18:	685a      	ldr	r2, [r3, #4]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	1ad2      	subs	r2, r2, r3
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800ae22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae28:	6978      	ldr	r0, [r7, #20]
 800ae2a:	f000 f8f9 	bl	800b020 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae2e:	4b1c      	ldr	r3, [pc, #112]	; (800aea0 <pvPortMalloc+0x164>)
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	4a19      	ldr	r2, [pc, #100]	; (800aea0 <pvPortMalloc+0x164>)
 800ae3a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae3c:	4b18      	ldr	r3, [pc, #96]	; (800aea0 <pvPortMalloc+0x164>)
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	4b19      	ldr	r3, [pc, #100]	; (800aea8 <pvPortMalloc+0x16c>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d203      	bcs.n	800ae50 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae48:	4b15      	ldr	r3, [pc, #84]	; (800aea0 <pvPortMalloc+0x164>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a16      	ldr	r2, [pc, #88]	; (800aea8 <pvPortMalloc+0x16c>)
 800ae4e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5e:	2200      	movs	r2, #0
 800ae60:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800ae62:	4b12      	ldr	r3, [pc, #72]	; (800aeac <pvPortMalloc+0x170>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3301      	adds	r3, #1
 800ae68:	4a10      	ldr	r2, [pc, #64]	; (800aeac <pvPortMalloc+0x170>)
 800ae6a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800ae6c:	f7fe f952 	bl	8009114 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	f003 0307 	and.w	r3, r3, #7
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00a      	beq.n	800ae90 <pvPortMalloc+0x154>
        __asm volatile
 800ae7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7e:	f383 8811 	msr	BASEPRI, r3
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	60fb      	str	r3, [r7, #12]
    }
 800ae8c:	bf00      	nop
 800ae8e:	e7fe      	b.n	800ae8e <pvPortMalloc+0x152>
    return pvReturn;
 800ae90:	69fb      	ldr	r3, [r7, #28]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3728      	adds	r7, #40	; 0x28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	20013840 	.word	0x20013840
 800aea0:	20013844 	.word	0x20013844
 800aea4:	20013838 	.word	0x20013838
 800aea8:	20013848 	.word	0x20013848
 800aeac:	2001384c 	.word	0x2001384c

0800aeb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d049      	beq.n	800af56 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800aec2:	2308      	movs	r3, #8
 800aec4:	425b      	negs	r3, r3
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	4413      	add	r3, r2
 800aeca:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	db0a      	blt.n	800aeee <vPortFree+0x3e>
        __asm volatile
 800aed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	60fb      	str	r3, [r7, #12]
    }
 800aeea:	bf00      	nop
 800aeec:	e7fe      	b.n	800aeec <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00a      	beq.n	800af0c <vPortFree+0x5c>
        __asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	60bb      	str	r3, [r7, #8]
    }
 800af08:	bf00      	nop
 800af0a:	e7fe      	b.n	800af0a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	0fdb      	lsrs	r3, r3, #31
 800af12:	f003 0301 	and.w	r3, r3, #1
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d01c      	beq.n	800af56 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d118      	bne.n	800af56 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800af30:	f7fe f8e2 	bl	80090f8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	4b09      	ldr	r3, [pc, #36]	; (800af60 <vPortFree+0xb0>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4413      	add	r3, r2
 800af3e:	4a08      	ldr	r2, [pc, #32]	; (800af60 <vPortFree+0xb0>)
 800af40:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af42:	6938      	ldr	r0, [r7, #16]
 800af44:	f000 f86c 	bl	800b020 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800af48:	4b06      	ldr	r3, [pc, #24]	; (800af64 <vPortFree+0xb4>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3301      	adds	r3, #1
 800af4e:	4a05      	ldr	r2, [pc, #20]	; (800af64 <vPortFree+0xb4>)
 800af50:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800af52:	f7fe f8df 	bl	8009114 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800af56:	bf00      	nop
 800af58:	3718      	adds	r7, #24
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	20013844 	.word	0x20013844
 800af64:	20013850 	.word	0x20013850

0800af68 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af6e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800af72:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800af74:	4b25      	ldr	r3, [pc, #148]	; (800b00c <prvHeapInit+0xa4>)
 800af76:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f003 0307 	and.w	r3, r3, #7
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00c      	beq.n	800af9c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	3307      	adds	r3, #7
 800af86:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f023 0307 	bic.w	r3, r3, #7
 800af8e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	1ad3      	subs	r3, r2, r3
 800af96:	4a1d      	ldr	r2, [pc, #116]	; (800b00c <prvHeapInit+0xa4>)
 800af98:	4413      	add	r3, r2
 800af9a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800afa0:	4a1b      	ldr	r2, [pc, #108]	; (800b010 <prvHeapInit+0xa8>)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800afa6:	4b1a      	ldr	r3, [pc, #104]	; (800b010 <prvHeapInit+0xa8>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	4413      	add	r3, r2
 800afb2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800afb4:	2208      	movs	r2, #8
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	1a9b      	subs	r3, r3, r2
 800afba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f023 0307 	bic.w	r3, r3, #7
 800afc2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4a13      	ldr	r2, [pc, #76]	; (800b014 <prvHeapInit+0xac>)
 800afc8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800afca:	4b12      	ldr	r3, [pc, #72]	; (800b014 <prvHeapInit+0xac>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2200      	movs	r2, #0
 800afd0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800afd2:	4b10      	ldr	r3, [pc, #64]	; (800b014 <prvHeapInit+0xac>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2200      	movs	r2, #0
 800afd8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	1ad2      	subs	r2, r2, r3
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afe8:	4b0a      	ldr	r3, [pc, #40]	; (800b014 <prvHeapInit+0xac>)
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	4a08      	ldr	r2, [pc, #32]	; (800b018 <prvHeapInit+0xb0>)
 800aff6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	4a07      	ldr	r2, [pc, #28]	; (800b01c <prvHeapInit+0xb4>)
 800affe:	6013      	str	r3, [r2, #0]
}
 800b000:	bf00      	nop
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	20000c38 	.word	0x20000c38
 800b010:	20013838 	.word	0x20013838
 800b014:	20013840 	.word	0x20013840
 800b018:	20013848 	.word	0x20013848
 800b01c:	20013844 	.word	0x20013844

0800b020 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b028:	4b28      	ldr	r3, [pc, #160]	; (800b0cc <prvInsertBlockIntoFreeList+0xac>)
 800b02a:	60fb      	str	r3, [r7, #12]
 800b02c:	e002      	b.n	800b034 <prvInsertBlockIntoFreeList+0x14>
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	60fb      	str	r3, [r7, #12]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d8f7      	bhi.n	800b02e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	68ba      	ldr	r2, [r7, #8]
 800b048:	4413      	add	r3, r2
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d108      	bne.n	800b062 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	685a      	ldr	r2, [r3, #4]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	441a      	add	r2, r3
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	441a      	add	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d118      	bne.n	800b0a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	4b15      	ldr	r3, [pc, #84]	; (800b0d0 <prvInsertBlockIntoFreeList+0xb0>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d00d      	beq.n	800b09e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685a      	ldr	r2, [r3, #4]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	441a      	add	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	e008      	b.n	800b0b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b09e:	4b0c      	ldr	r3, [pc, #48]	; (800b0d0 <prvInsertBlockIntoFreeList+0xb0>)
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	601a      	str	r2, [r3, #0]
 800b0a6:	e003      	b.n	800b0b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d002      	beq.n	800b0be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b0be:	bf00      	nop
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	20013838 	.word	0x20013838
 800b0d0:	20013840 	.word	0x20013840

0800b0d4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af02      	add	r7, sp, #8
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
 800b0e0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800b0e2:	2205      	movs	r2, #5
 800b0e4:	492b      	ldr	r1, [pc, #172]	; (800b194 <SYSVIEW_AddTask+0xc0>)
 800b0e6:	68b8      	ldr	r0, [r7, #8]
 800b0e8:	f002 fa7b 	bl	800d5e2 <memcmp>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d04b      	beq.n	800b18a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800b0f2:	4b29      	ldr	r3, [pc, #164]	; (800b198 <SYSVIEW_AddTask+0xc4>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b07      	cmp	r3, #7
 800b0f8:	d903      	bls.n	800b102 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800b0fa:	4828      	ldr	r0, [pc, #160]	; (800b19c <SYSVIEW_AddTask+0xc8>)
 800b0fc:	f001 fc08 	bl	800c910 <SEGGER_SYSVIEW_Warn>
    return;
 800b100:	e044      	b.n	800b18c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800b102:	4b25      	ldr	r3, [pc, #148]	; (800b198 <SYSVIEW_AddTask+0xc4>)
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	4926      	ldr	r1, [pc, #152]	; (800b1a0 <SYSVIEW_AddTask+0xcc>)
 800b108:	4613      	mov	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	4413      	add	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	440b      	add	r3, r1
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800b116:	4b20      	ldr	r3, [pc, #128]	; (800b198 <SYSVIEW_AddTask+0xc4>)
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	4921      	ldr	r1, [pc, #132]	; (800b1a0 <SYSVIEW_AddTask+0xcc>)
 800b11c:	4613      	mov	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	440b      	add	r3, r1
 800b126:	3304      	adds	r3, #4
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800b12c:	4b1a      	ldr	r3, [pc, #104]	; (800b198 <SYSVIEW_AddTask+0xc4>)
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	491b      	ldr	r1, [pc, #108]	; (800b1a0 <SYSVIEW_AddTask+0xcc>)
 800b132:	4613      	mov	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4413      	add	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	440b      	add	r3, r1
 800b13c:	3308      	adds	r3, #8
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800b142:	4b15      	ldr	r3, [pc, #84]	; (800b198 <SYSVIEW_AddTask+0xc4>)
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	4916      	ldr	r1, [pc, #88]	; (800b1a0 <SYSVIEW_AddTask+0xcc>)
 800b148:	4613      	mov	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	4413      	add	r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	440b      	add	r3, r1
 800b152:	330c      	adds	r3, #12
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800b158:	4b0f      	ldr	r3, [pc, #60]	; (800b198 <SYSVIEW_AddTask+0xc4>)
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	4910      	ldr	r1, [pc, #64]	; (800b1a0 <SYSVIEW_AddTask+0xcc>)
 800b15e:	4613      	mov	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4413      	add	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	440b      	add	r3, r1
 800b168:	3310      	adds	r3, #16
 800b16a:	69ba      	ldr	r2, [r7, #24]
 800b16c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800b16e:	4b0a      	ldr	r3, [pc, #40]	; (800b198 <SYSVIEW_AddTask+0xc4>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3301      	adds	r3, #1
 800b174:	4a08      	ldr	r2, [pc, #32]	; (800b198 <SYSVIEW_AddTask+0xc4>)
 800b176:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	68b9      	ldr	r1, [r7, #8]
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f000 f80e 	bl	800b1a4 <SYSVIEW_SendTaskInfo>
 800b188:	e000      	b.n	800b18c <SYSVIEW_AddTask+0xb8>
    return;
 800b18a:	bf00      	nop

}
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	08010520 	.word	0x08010520
 800b198:	200138f4 	.word	0x200138f4
 800b19c:	08010528 	.word	0x08010528
 800b1a0:	20013854 	.word	0x20013854

0800b1a4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b08a      	sub	sp, #40	; 0x28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
 800b1b0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800b1b2:	f107 0314 	add.w	r3, r7, #20
 800b1b6:	2214      	movs	r2, #20
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f002 fa21 	bl	800d602 <memset>
  TaskInfo.TaskID     = TaskID;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800b1d4:	f107 0314 	add.w	r3, r7, #20
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f001 f827 	bl	800c22c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800b1de:	bf00      	nop
 800b1e0:	3728      	adds	r7, #40	; 0x28
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
	...

0800b1e8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800b1ee:	4b24      	ldr	r3, [pc, #144]	; (800b280 <_DoInit+0x98>)
 800b1f0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2203      	movs	r2, #3
 800b1f6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2203      	movs	r2, #3
 800b1fc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a20      	ldr	r2, [pc, #128]	; (800b284 <_DoInit+0x9c>)
 800b202:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a20      	ldr	r2, [pc, #128]	; (800b288 <_DoInit+0xa0>)
 800b208:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b210:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a17      	ldr	r2, [pc, #92]	; (800b284 <_DoInit+0x9c>)
 800b228:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a17      	ldr	r2, [pc, #92]	; (800b28c <_DoInit+0xa4>)
 800b22e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2210      	movs	r2, #16
 800b234:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3307      	adds	r3, #7
 800b24c:	4a10      	ldr	r2, [pc, #64]	; (800b290 <_DoInit+0xa8>)
 800b24e:	6810      	ldr	r0, [r2, #0]
 800b250:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b252:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a0e      	ldr	r2, [pc, #56]	; (800b294 <_DoInit+0xac>)
 800b25a:	6810      	ldr	r0, [r2, #0]
 800b25c:	6018      	str	r0, [r3, #0]
 800b25e:	8891      	ldrh	r1, [r2, #4]
 800b260:	7992      	ldrb	r2, [r2, #6]
 800b262:	8099      	strh	r1, [r3, #4]
 800b264:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b266:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2220      	movs	r2, #32
 800b26e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b270:	f3bf 8f5f 	dmb	sy
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr
 800b280:	200138f8 	.word	0x200138f8
 800b284:	08010578 	.word	0x08010578
 800b288:	200139a0 	.word	0x200139a0
 800b28c:	20013da0 	.word	0x20013da0
 800b290:	08010584 	.word	0x08010584
 800b294:	08010588 	.word	0x08010588

0800b298 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08a      	sub	sp, #40	; 0x28
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800b2b4:	69ba      	ldr	r2, [r7, #24]
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d905      	bls.n	800b2c8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800b2bc:	69ba      	ldr	r2, [r7, #24]
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	1ad3      	subs	r3, r2, r3
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b2c6:	e007      	b.n	800b2d8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	689a      	ldr	r2, [r3, #8]
 800b2cc:	69b9      	ldr	r1, [r7, #24]
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	1acb      	subs	r3, r1, r3
 800b2d2:	4413      	add	r3, r2
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	689a      	ldr	r2, [r3, #8]
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	1ad3      	subs	r3, r2, r3
 800b2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	bf28      	it	cs
 800b2e6:	4613      	movcs	r3, r2
 800b2e8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800b2ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	bf28      	it	cs
 800b2f2:	4613      	movcs	r3, r2
 800b2f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	685a      	ldr	r2, [r3, #4]
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800b300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b302:	68b9      	ldr	r1, [r7, #8]
 800b304:	6978      	ldr	r0, [r7, #20]
 800b306:	f002 f9ea 	bl	800d6de <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800b30a:	6a3a      	ldr	r2, [r7, #32]
 800b30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30e:	4413      	add	r3, r2
 800b310:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800b312:	68ba      	ldr	r2, [r7, #8]
 800b314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b316:	4413      	add	r3, r2
 800b318:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	1ad3      	subs	r3, r2, r3
 800b320:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800b322:	69fa      	ldr	r2, [r7, #28]
 800b324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b326:	4413      	add	r3, r2
 800b328:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	69fa      	ldr	r2, [r7, #28]
 800b330:	429a      	cmp	r2, r3
 800b332:	d101      	bne.n	800b338 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800b334:	2300      	movs	r3, #0
 800b336:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b338:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	69fa      	ldr	r2, [r7, #28]
 800b340:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1b2      	bne.n	800b2ae <_WriteBlocking+0x16>
  return NumBytesWritten;
 800b348:	6a3b      	ldr	r3, [r7, #32]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3728      	adds	r7, #40	; 0x28
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800b352:	b580      	push	{r7, lr}
 800b354:	b088      	sub	sp, #32
 800b356:	af00      	add	r7, sp, #0
 800b358:	60f8      	str	r0, [r7, #12]
 800b35a:	60b9      	str	r1, [r7, #8]
 800b35c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	689a      	ldr	r2, [r3, #8]
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800b36e:	69ba      	ldr	r2, [r7, #24]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	429a      	cmp	r2, r3
 800b374:	d911      	bls.n	800b39a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	685a      	ldr	r2, [r3, #4]
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	4413      	add	r3, r2
 800b37e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	68b9      	ldr	r1, [r7, #8]
 800b384:	6938      	ldr	r0, [r7, #16]
 800b386:	f002 f9aa 	bl	800d6de <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b38a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800b38e:	69fa      	ldr	r2, [r7, #28]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	441a      	add	r2, r3
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800b398:	e01f      	b.n	800b3da <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800b3a8:	697a      	ldr	r2, [r7, #20]
 800b3aa:	68b9      	ldr	r1, [r7, #8]
 800b3ac:	6938      	ldr	r0, [r7, #16]
 800b3ae:	f002 f996 	bl	800d6de <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	697a      	ldr	r2, [r7, #20]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6938      	ldr	r0, [r7, #16]
 800b3cc:	f002 f987 	bl	800d6de <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b3d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	697a      	ldr	r2, [r7, #20]
 800b3d8:	60da      	str	r2, [r3, #12]
}
 800b3da:	bf00      	nop
 800b3dc:	3720      	adds	r7, #32
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800b3e2:	b480      	push	{r7}
 800b3e4:	b087      	sub	sp, #28
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800b3f6:	693a      	ldr	r2, [r7, #16]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d808      	bhi.n	800b410 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	689a      	ldr	r2, [r3, #8]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	1ad2      	subs	r2, r2, r3
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	4413      	add	r3, r2
 800b40a:	3b01      	subs	r3, #1
 800b40c:	617b      	str	r3, [r7, #20]
 800b40e:	e004      	b.n	800b41a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	3b01      	subs	r3, #1
 800b418:	617b      	str	r3, [r7, #20]
  }
  return r;
 800b41a:	697b      	ldr	r3, [r7, #20]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	371c      	adds	r7, #28
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800b428:	b580      	push	{r7, lr}
 800b42a:	b08c      	sub	sp, #48	; 0x30
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800b434:	4b3e      	ldr	r3, [pc, #248]	; (800b530 <SEGGER_RTT_ReadNoLock+0x108>)
 800b436:	623b      	str	r3, [r7, #32]
 800b438:	6a3b      	ldr	r3, [r7, #32]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d101      	bne.n	800b446 <SEGGER_RTT_ReadNoLock+0x1e>
 800b442:	f7ff fed1 	bl	800b1e8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	4613      	mov	r3, r2
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	4413      	add	r3, r2
 800b44e:	00db      	lsls	r3, r3, #3
 800b450:	3360      	adds	r3, #96	; 0x60
 800b452:	4a37      	ldr	r2, [pc, #220]	; (800b530 <SEGGER_RTT_ReadNoLock+0x108>)
 800b454:	4413      	add	r3, r2
 800b456:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800b468:	2300      	movs	r3, #0
 800b46a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800b46c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b46e:	69bb      	ldr	r3, [r7, #24]
 800b470:	429a      	cmp	r2, r3
 800b472:	d92b      	bls.n	800b4cc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	689a      	ldr	r2, [r3, #8]
 800b478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b47e:	697a      	ldr	r2, [r7, #20]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4293      	cmp	r3, r2
 800b484:	bf28      	it	cs
 800b486:	4613      	movcs	r3, r2
 800b488:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b490:	4413      	add	r3, r2
 800b492:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b494:	697a      	ldr	r2, [r7, #20]
 800b496:	6939      	ldr	r1, [r7, #16]
 800b498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b49a:	f002 f920 	bl	800d6de <memcpy>
    NumBytesRead += NumBytesRem;
 800b49e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b4a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b4b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d101      	bne.n	800b4cc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800b4cc:	69ba      	ldr	r2, [r7, #24]
 800b4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b4d4:	697a      	ldr	r2, [r7, #20]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	bf28      	it	cs
 800b4dc:	4613      	movcs	r3, r2
 800b4de:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d019      	beq.n	800b51a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ec:	4413      	add	r3, r2
 800b4ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	6939      	ldr	r1, [r7, #16]
 800b4f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4f6:	f002 f8f2 	bl	800d6de <memcpy>
    NumBytesRead += NumBytesRem;
 800b4fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	4413      	add	r3, r2
 800b500:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	4413      	add	r3, r2
 800b508:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	4413      	add	r3, r2
 800b518:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800b51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d002      	beq.n	800b526 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b524:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800b526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3730      	adds	r7, #48	; 0x30
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	200138f8 	.word	0x200138f8

0800b534 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800b534:	b580      	push	{r7, lr}
 800b536:	b088      	sub	sp, #32
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	4613      	mov	r3, r2
 800b54a:	005b      	lsls	r3, r3, #1
 800b54c:	4413      	add	r3, r2
 800b54e:	00db      	lsls	r3, r3, #3
 800b550:	4a1f      	ldr	r2, [pc, #124]	; (800b5d0 <SEGGER_RTT_WriteNoLock+0x9c>)
 800b552:	4413      	add	r3, r2
 800b554:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	695b      	ldr	r3, [r3, #20]
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d029      	beq.n	800b5b2 <SEGGER_RTT_WriteNoLock+0x7e>
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d82e      	bhi.n	800b5c0 <SEGGER_RTT_WriteNoLock+0x8c>
 800b562:	2b00      	cmp	r3, #0
 800b564:	d002      	beq.n	800b56c <SEGGER_RTT_WriteNoLock+0x38>
 800b566:	2b01      	cmp	r3, #1
 800b568:	d013      	beq.n	800b592 <SEGGER_RTT_WriteNoLock+0x5e>
 800b56a:	e029      	b.n	800b5c0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800b56c:	6978      	ldr	r0, [r7, #20]
 800b56e:	f7ff ff38 	bl	800b3e2 <_GetAvailWriteSpace>
 800b572:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800b574:	693a      	ldr	r2, [r7, #16]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d202      	bcs.n	800b582 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800b57c:	2300      	movs	r3, #0
 800b57e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800b580:	e021      	b.n	800b5c6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	69b9      	ldr	r1, [r7, #24]
 800b58a:	6978      	ldr	r0, [r7, #20]
 800b58c:	f7ff fee1 	bl	800b352 <_WriteNoCheck>
    break;
 800b590:	e019      	b.n	800b5c6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800b592:	6978      	ldr	r0, [r7, #20]
 800b594:	f7ff ff25 	bl	800b3e2 <_GetAvailWriteSpace>
 800b598:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	bf28      	it	cs
 800b5a2:	4613      	movcs	r3, r2
 800b5a4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800b5a6:	69fa      	ldr	r2, [r7, #28]
 800b5a8:	69b9      	ldr	r1, [r7, #24]
 800b5aa:	6978      	ldr	r0, [r7, #20]
 800b5ac:	f7ff fed1 	bl	800b352 <_WriteNoCheck>
    break;
 800b5b0:	e009      	b.n	800b5c6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	69b9      	ldr	r1, [r7, #24]
 800b5b6:	6978      	ldr	r0, [r7, #20]
 800b5b8:	f7ff fe6e 	bl	800b298 <_WriteBlocking>
 800b5bc:	61f8      	str	r0, [r7, #28]
    break;
 800b5be:	e002      	b.n	800b5c6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	61fb      	str	r3, [r7, #28]
    break;
 800b5c4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800b5c6:	69fb      	ldr	r3, [r7, #28]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3720      	adds	r7, #32
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	200138f8 	.word	0x200138f8

0800b5d4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b088      	sub	sp, #32
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800b5e0:	4b0e      	ldr	r3, [pc, #56]	; (800b61c <SEGGER_RTT_Write+0x48>)
 800b5e2:	61fb      	str	r3, [r7, #28]
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d101      	bne.n	800b5f2 <SEGGER_RTT_Write+0x1e>
 800b5ee:	f7ff fdfb 	bl	800b1e8 <_DoInit>
  SEGGER_RTT_LOCK();
 800b5f2:	f3ef 8311 	mrs	r3, BASEPRI
 800b5f6:	f04f 0120 	mov.w	r1, #32
 800b5fa:	f381 8811 	msr	BASEPRI, r1
 800b5fe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	68b9      	ldr	r1, [r7, #8]
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f7ff ff95 	bl	800b534 <SEGGER_RTT_WriteNoLock>
 800b60a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800b612:	697b      	ldr	r3, [r7, #20]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3720      	adds	r7, #32
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	200138f8 	.word	0x200138f8

0800b620 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800b620:	b480      	push	{r7}
 800b622:	b087      	sub	sp, #28
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800b630:	e002      	b.n	800b638 <_EncodeStr+0x18>
    Len++;
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	3301      	adds	r3, #1
 800b636:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	4413      	add	r3, r2
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d1f6      	bne.n	800b632 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d901      	bls.n	800b650 <_EncodeStr+0x30>
    Len = Limit;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	2bfe      	cmp	r3, #254	; 0xfe
 800b654:	d806      	bhi.n	800b664 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	1c5a      	adds	r2, r3, #1
 800b65a:	60fa      	str	r2, [r7, #12]
 800b65c:	693a      	ldr	r2, [r7, #16]
 800b65e:	b2d2      	uxtb	r2, r2
 800b660:	701a      	strb	r2, [r3, #0]
 800b662:	e011      	b.n	800b688 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	1c5a      	adds	r2, r3, #1
 800b668:	60fa      	str	r2, [r7, #12]
 800b66a:	22ff      	movs	r2, #255	; 0xff
 800b66c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	1c5a      	adds	r2, r3, #1
 800b672:	60fa      	str	r2, [r7, #12]
 800b674:	693a      	ldr	r2, [r7, #16]
 800b676:	b2d2      	uxtb	r2, r2
 800b678:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	0a19      	lsrs	r1, r3, #8
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	1c5a      	adds	r2, r3, #1
 800b682:	60fa      	str	r2, [r7, #12]
 800b684:	b2ca      	uxtb	r2, r1
 800b686:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800b688:	2300      	movs	r3, #0
 800b68a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b68c:	e00a      	b.n	800b6a4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	1c53      	adds	r3, r2, #1
 800b692:	60bb      	str	r3, [r7, #8]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	1c59      	adds	r1, r3, #1
 800b698:	60f9      	str	r1, [r7, #12]
 800b69a:	7812      	ldrb	r2, [r2, #0]
 800b69c:	701a      	strb	r2, [r3, #0]
    n++;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b6a4:	697a      	ldr	r2, [r7, #20]
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d3f0      	bcc.n	800b68e <_EncodeStr+0x6e>
  }
  return pPayload;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	371c      	adds	r7, #28
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800b6ba:	b480      	push	{r7}
 800b6bc:	b083      	sub	sp, #12
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	3304      	adds	r3, #4
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
	...

0800b6d4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b6da:	4b35      	ldr	r3, [pc, #212]	; (800b7b0 <_HandleIncomingPacket+0xdc>)
 800b6dc:	7e1b      	ldrb	r3, [r3, #24]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	1cfb      	adds	r3, r7, #3
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	f7ff fe9f 	bl	800b428 <SEGGER_RTT_ReadNoLock>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	dd59      	ble.n	800b7a8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800b6f4:	78fb      	ldrb	r3, [r7, #3]
 800b6f6:	2b80      	cmp	r3, #128	; 0x80
 800b6f8:	d032      	beq.n	800b760 <_HandleIncomingPacket+0x8c>
 800b6fa:	2b80      	cmp	r3, #128	; 0x80
 800b6fc:	dc42      	bgt.n	800b784 <_HandleIncomingPacket+0xb0>
 800b6fe:	2b07      	cmp	r3, #7
 800b700:	dc16      	bgt.n	800b730 <_HandleIncomingPacket+0x5c>
 800b702:	2b00      	cmp	r3, #0
 800b704:	dd3e      	ble.n	800b784 <_HandleIncomingPacket+0xb0>
 800b706:	3b01      	subs	r3, #1
 800b708:	2b06      	cmp	r3, #6
 800b70a:	d83b      	bhi.n	800b784 <_HandleIncomingPacket+0xb0>
 800b70c:	a201      	add	r2, pc, #4	; (adr r2, 800b714 <_HandleIncomingPacket+0x40>)
 800b70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b712:	bf00      	nop
 800b714:	0800b737 	.word	0x0800b737
 800b718:	0800b73d 	.word	0x0800b73d
 800b71c:	0800b743 	.word	0x0800b743
 800b720:	0800b749 	.word	0x0800b749
 800b724:	0800b74f 	.word	0x0800b74f
 800b728:	0800b755 	.word	0x0800b755
 800b72c:	0800b75b 	.word	0x0800b75b
 800b730:	2b7f      	cmp	r3, #127	; 0x7f
 800b732:	d034      	beq.n	800b79e <_HandleIncomingPacket+0xca>
 800b734:	e026      	b.n	800b784 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800b736:	f000 fbff 	bl	800bf38 <SEGGER_SYSVIEW_Start>
      break;
 800b73a:	e035      	b.n	800b7a8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800b73c:	f000 fcb6 	bl	800c0ac <SEGGER_SYSVIEW_Stop>
      break;
 800b740:	e032      	b.n	800b7a8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800b742:	f000 fe6b 	bl	800c41c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800b746:	e02f      	b.n	800b7a8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800b748:	f000 fe54 	bl	800c3f4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800b74c:	e02c      	b.n	800b7a8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800b74e:	f000 fcd3 	bl	800c0f8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800b752:	e029      	b.n	800b7a8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800b754:	f001 f89e 	bl	800c894 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800b758:	e026      	b.n	800b7a8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800b75a:	f001 f87d 	bl	800c858 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800b75e:	e023      	b.n	800b7a8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b760:	4b13      	ldr	r3, [pc, #76]	; (800b7b0 <_HandleIncomingPacket+0xdc>)
 800b762:	7e1b      	ldrb	r3, [r3, #24]
 800b764:	4618      	mov	r0, r3
 800b766:	1cfb      	adds	r3, r7, #3
 800b768:	2201      	movs	r2, #1
 800b76a:	4619      	mov	r1, r3
 800b76c:	f7ff fe5c 	bl	800b428 <SEGGER_RTT_ReadNoLock>
 800b770:	4603      	mov	r3, r0
 800b772:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2b00      	cmp	r3, #0
 800b778:	dd13      	ble.n	800b7a2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800b77a:	78fb      	ldrb	r3, [r7, #3]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f000 ffeb 	bl	800c758 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800b782:	e00e      	b.n	800b7a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800b784:	78fb      	ldrb	r3, [r7, #3]
 800b786:	b25b      	sxtb	r3, r3
 800b788:	2b00      	cmp	r3, #0
 800b78a:	da0c      	bge.n	800b7a6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b78c:	4b08      	ldr	r3, [pc, #32]	; (800b7b0 <_HandleIncomingPacket+0xdc>)
 800b78e:	7e1b      	ldrb	r3, [r3, #24]
 800b790:	4618      	mov	r0, r3
 800b792:	1cfb      	adds	r3, r7, #3
 800b794:	2201      	movs	r2, #1
 800b796:	4619      	mov	r1, r3
 800b798:	f7ff fe46 	bl	800b428 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800b79c:	e003      	b.n	800b7a6 <_HandleIncomingPacket+0xd2>
      break;
 800b79e:	bf00      	nop
 800b7a0:	e002      	b.n	800b7a8 <_HandleIncomingPacket+0xd4>
      break;
 800b7a2:	bf00      	nop
 800b7a4:	e000      	b.n	800b7a8 <_HandleIncomingPacket+0xd4>
      break;
 800b7a6:	bf00      	nop
    }
  }
}
 800b7a8:	bf00      	nop
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	20013db0 	.word	0x20013db0

0800b7b4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b08c      	sub	sp, #48	; 0x30
 800b7b8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800b7be:	1d3b      	adds	r3, r7, #4
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7c8:	4b31      	ldr	r3, [pc, #196]	; (800b890 <_TrySendOverflowPacket+0xdc>)
 800b7ca:	695b      	ldr	r3, [r3, #20]
 800b7cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7ce:	e00b      	b.n	800b7e8 <_TrySendOverflowPacket+0x34>
 800b7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d2:	b2da      	uxtb	r2, r3
 800b7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d6:	1c59      	adds	r1, r3, #1
 800b7d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b7da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b7de:	b2d2      	uxtb	r2, r2
 800b7e0:	701a      	strb	r2, [r3, #0]
 800b7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e4:	09db      	lsrs	r3, r3, #7
 800b7e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ea:	2b7f      	cmp	r3, #127	; 0x7f
 800b7ec:	d8f0      	bhi.n	800b7d0 <_TrySendOverflowPacket+0x1c>
 800b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f0:	1c5a      	adds	r2, r3, #1
 800b7f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b7f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7f6:	b2d2      	uxtb	r2, r2
 800b7f8:	701a      	strb	r2, [r3, #0]
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b7fe:	4b25      	ldr	r3, [pc, #148]	; (800b894 <_TrySendOverflowPacket+0xe0>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b804:	4b22      	ldr	r3, [pc, #136]	; (800b890 <_TrySendOverflowPacket+0xdc>)
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	69ba      	ldr	r2, [r7, #24]
 800b80a:	1ad3      	subs	r3, r2, r3
 800b80c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	627b      	str	r3, [r7, #36]	; 0x24
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	623b      	str	r3, [r7, #32]
 800b816:	e00b      	b.n	800b830 <_TrySendOverflowPacket+0x7c>
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81e:	1c59      	adds	r1, r3, #1
 800b820:	6279      	str	r1, [r7, #36]	; 0x24
 800b822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b826:	b2d2      	uxtb	r2, r2
 800b828:	701a      	strb	r2, [r3, #0]
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	09db      	lsrs	r3, r3, #7
 800b82e:	623b      	str	r3, [r7, #32]
 800b830:	6a3b      	ldr	r3, [r7, #32]
 800b832:	2b7f      	cmp	r3, #127	; 0x7f
 800b834:	d8f0      	bhi.n	800b818 <_TrySendOverflowPacket+0x64>
 800b836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b838:	1c5a      	adds	r2, r3, #1
 800b83a:	627a      	str	r2, [r7, #36]	; 0x24
 800b83c:	6a3a      	ldr	r2, [r7, #32]
 800b83e:	b2d2      	uxtb	r2, r2
 800b840:	701a      	strb	r2, [r3, #0]
 800b842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b844:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800b846:	4b12      	ldr	r3, [pc, #72]	; (800b890 <_TrySendOverflowPacket+0xdc>)
 800b848:	785b      	ldrb	r3, [r3, #1]
 800b84a:	4618      	mov	r0, r3
 800b84c:	1d3b      	adds	r3, r7, #4
 800b84e:	69fa      	ldr	r2, [r7, #28]
 800b850:	1ad3      	subs	r3, r2, r3
 800b852:	461a      	mov	r2, r3
 800b854:	1d3b      	adds	r3, r7, #4
 800b856:	4619      	mov	r1, r3
 800b858:	f7f4 fcda 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b85c:	4603      	mov	r3, r0
 800b85e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d009      	beq.n	800b87a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b866:	4a0a      	ldr	r2, [pc, #40]	; (800b890 <_TrySendOverflowPacket+0xdc>)
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800b86c:	4b08      	ldr	r3, [pc, #32]	; (800b890 <_TrySendOverflowPacket+0xdc>)
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	3b01      	subs	r3, #1
 800b872:	b2da      	uxtb	r2, r3
 800b874:	4b06      	ldr	r3, [pc, #24]	; (800b890 <_TrySendOverflowPacket+0xdc>)
 800b876:	701a      	strb	r2, [r3, #0]
 800b878:	e004      	b.n	800b884 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800b87a:	4b05      	ldr	r3, [pc, #20]	; (800b890 <_TrySendOverflowPacket+0xdc>)
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	3301      	adds	r3, #1
 800b880:	4a03      	ldr	r2, [pc, #12]	; (800b890 <_TrySendOverflowPacket+0xdc>)
 800b882:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800b884:	693b      	ldr	r3, [r7, #16]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3730      	adds	r7, #48	; 0x30
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	20013db0 	.word	0x20013db0
 800b894:	e0001004 	.word	0xe0001004

0800b898 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800b898:	b580      	push	{r7, lr}
 800b89a:	b08a      	sub	sp, #40	; 0x28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800b8a4:	4b6c      	ldr	r3, [pc, #432]	; (800ba58 <_SendPacket+0x1c0>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d010      	beq.n	800b8ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800b8ac:	4b6a      	ldr	r3, [pc, #424]	; (800ba58 <_SendPacket+0x1c0>)
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f000 80a3 	beq.w	800b9fc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800b8b6:	4b68      	ldr	r3, [pc, #416]	; (800ba58 <_SendPacket+0x1c0>)
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d109      	bne.n	800b8d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800b8be:	f7ff ff79 	bl	800b7b4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800b8c2:	4b65      	ldr	r3, [pc, #404]	; (800ba58 <_SendPacket+0x1c0>)
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	f040 809a 	bne.w	800ba00 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800b8cc:	e001      	b.n	800b8d2 <_SendPacket+0x3a>
    goto Send;
 800b8ce:	bf00      	nop
 800b8d0:	e000      	b.n	800b8d4 <_SendPacket+0x3c>
Send:
 800b8d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b1f      	cmp	r3, #31
 800b8d8:	d809      	bhi.n	800b8ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800b8da:	4b5f      	ldr	r3, [pc, #380]	; (800ba58 <_SendPacket+0x1c0>)
 800b8dc:	69da      	ldr	r2, [r3, #28]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b8e4:	f003 0301 	and.w	r3, r3, #1
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	f040 808b 	bne.w	800ba04 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b17      	cmp	r3, #23
 800b8f2:	d807      	bhi.n	800b904 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	60fb      	str	r3, [r7, #12]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	b2da      	uxtb	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	701a      	strb	r2, [r3, #0]
 800b902:	e03d      	b.n	800b980 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800b904:	68ba      	ldr	r2, [r7, #8]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	2b7f      	cmp	r3, #127	; 0x7f
 800b910:	d912      	bls.n	800b938 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	09da      	lsrs	r2, r3, #7
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	3b01      	subs	r3, #1
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	b2d2      	uxtb	r2, r2
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	b2db      	uxtb	r3, r3
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	3a01      	subs	r2, #1
 800b92a:	60fa      	str	r2, [r7, #12]
 800b92c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b930:	b2da      	uxtb	r2, r3
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	701a      	strb	r2, [r3, #0]
 800b936:	e006      	b.n	800b946 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	3b01      	subs	r3, #1
 800b93c:	60fb      	str	r3, [r7, #12]
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	b2da      	uxtb	r2, r3
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2b7f      	cmp	r3, #127	; 0x7f
 800b94a:	d912      	bls.n	800b972 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	09da      	lsrs	r2, r3, #7
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	3b01      	subs	r3, #1
 800b954:	60fb      	str	r3, [r7, #12]
 800b956:	b2d2      	uxtb	r2, r2
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	3a01      	subs	r2, #1
 800b964:	60fa      	str	r2, [r7, #12]
 800b966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b96a:	b2da      	uxtb	r2, r3
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	701a      	strb	r2, [r3, #0]
 800b970:	e006      	b.n	800b980 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	3b01      	subs	r3, #1
 800b976:	60fb      	str	r3, [r7, #12]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b980:	4b36      	ldr	r3, [pc, #216]	; (800ba5c <_SendPacket+0x1c4>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b986:	4b34      	ldr	r3, [pc, #208]	; (800ba58 <_SendPacket+0x1c0>)
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	69ba      	ldr	r2, [r7, #24]
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	627b      	str	r3, [r7, #36]	; 0x24
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	623b      	str	r3, [r7, #32]
 800b998:	e00b      	b.n	800b9b2 <_SendPacket+0x11a>
 800b99a:	6a3b      	ldr	r3, [r7, #32]
 800b99c:	b2da      	uxtb	r2, r3
 800b99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a0:	1c59      	adds	r1, r3, #1
 800b9a2:	6279      	str	r1, [r7, #36]	; 0x24
 800b9a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b9a8:	b2d2      	uxtb	r2, r2
 800b9aa:	701a      	strb	r2, [r3, #0]
 800b9ac:	6a3b      	ldr	r3, [r7, #32]
 800b9ae:	09db      	lsrs	r3, r3, #7
 800b9b0:	623b      	str	r3, [r7, #32]
 800b9b2:	6a3b      	ldr	r3, [r7, #32]
 800b9b4:	2b7f      	cmp	r3, #127	; 0x7f
 800b9b6:	d8f0      	bhi.n	800b99a <_SendPacket+0x102>
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	1c5a      	adds	r2, r3, #1
 800b9bc:	627a      	str	r2, [r7, #36]	; 0x24
 800b9be:	6a3a      	ldr	r2, [r7, #32]
 800b9c0:	b2d2      	uxtb	r2, r2
 800b9c2:	701a      	strb	r2, [r3, #0]
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800b9c8:	4b23      	ldr	r3, [pc, #140]	; (800ba58 <_SendPacket+0x1c0>)
 800b9ca:	785b      	ldrb	r3, [r3, #1]
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	68ba      	ldr	r2, [r7, #8]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	68f9      	ldr	r1, [r7, #12]
 800b9d8:	f7f4 fc1a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d003      	beq.n	800b9ee <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b9e6:	4a1c      	ldr	r2, [pc, #112]	; (800ba58 <_SendPacket+0x1c0>)
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	60d3      	str	r3, [r2, #12]
 800b9ec:	e00b      	b.n	800ba06 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800b9ee:	4b1a      	ldr	r3, [pc, #104]	; (800ba58 <_SendPacket+0x1c0>)
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	b2da      	uxtb	r2, r3
 800b9f6:	4b18      	ldr	r3, [pc, #96]	; (800ba58 <_SendPacket+0x1c0>)
 800b9f8:	701a      	strb	r2, [r3, #0]
 800b9fa:	e004      	b.n	800ba06 <_SendPacket+0x16e>
    goto SendDone;
 800b9fc:	bf00      	nop
 800b9fe:	e002      	b.n	800ba06 <_SendPacket+0x16e>
      goto SendDone;
 800ba00:	bf00      	nop
 800ba02:	e000      	b.n	800ba06 <_SendPacket+0x16e>
      goto SendDone;
 800ba04:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800ba06:	4b14      	ldr	r3, [pc, #80]	; (800ba58 <_SendPacket+0x1c0>)
 800ba08:	7e1b      	ldrb	r3, [r3, #24]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	4a14      	ldr	r2, [pc, #80]	; (800ba60 <_SendPacket+0x1c8>)
 800ba0e:	460b      	mov	r3, r1
 800ba10:	005b      	lsls	r3, r3, #1
 800ba12:	440b      	add	r3, r1
 800ba14:	00db      	lsls	r3, r3, #3
 800ba16:	4413      	add	r3, r2
 800ba18:	336c      	adds	r3, #108	; 0x6c
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	4b0e      	ldr	r3, [pc, #56]	; (800ba58 <_SendPacket+0x1c0>)
 800ba1e:	7e1b      	ldrb	r3, [r3, #24]
 800ba20:	4618      	mov	r0, r3
 800ba22:	490f      	ldr	r1, [pc, #60]	; (800ba60 <_SendPacket+0x1c8>)
 800ba24:	4603      	mov	r3, r0
 800ba26:	005b      	lsls	r3, r3, #1
 800ba28:	4403      	add	r3, r0
 800ba2a:	00db      	lsls	r3, r3, #3
 800ba2c:	440b      	add	r3, r1
 800ba2e:	3370      	adds	r3, #112	; 0x70
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d00b      	beq.n	800ba4e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800ba36:	4b08      	ldr	r3, [pc, #32]	; (800ba58 <_SendPacket+0x1c0>)
 800ba38:	789b      	ldrb	r3, [r3, #2]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d107      	bne.n	800ba4e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800ba3e:	4b06      	ldr	r3, [pc, #24]	; (800ba58 <_SendPacket+0x1c0>)
 800ba40:	2201      	movs	r2, #1
 800ba42:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800ba44:	f7ff fe46 	bl	800b6d4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800ba48:	4b03      	ldr	r3, [pc, #12]	; (800ba58 <_SendPacket+0x1c0>)
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800ba4e:	bf00      	nop
 800ba50:	3728      	adds	r7, #40	; 0x28
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	20013db0 	.word	0x20013db0
 800ba5c:	e0001004 	.word	0xe0001004
 800ba60:	200138f8 	.word	0x200138f8

0800ba64 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ba6c:	f3ef 8311 	mrs	r3, BASEPRI
 800ba70:	f04f 0120 	mov.w	r1, #32
 800ba74:	f381 8811 	msr	BASEPRI, r1
 800ba78:	60fb      	str	r3, [r7, #12]
 800ba7a:	4808      	ldr	r0, [pc, #32]	; (800ba9c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800ba7c:	f7ff fe1d 	bl	800b6ba <_PreparePacket>
 800ba80:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	68b9      	ldr	r1, [r7, #8]
 800ba86:	68b8      	ldr	r0, [r7, #8]
 800ba88:	f7ff ff06 	bl	800b898 <_SendPacket>
  RECORD_END();
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f383 8811 	msr	BASEPRI, r3
}
 800ba92:	bf00      	nop
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20013de0 	.word	0x20013de0

0800baa0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b088      	sub	sp, #32
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800baaa:	f3ef 8311 	mrs	r3, BASEPRI
 800baae:	f04f 0120 	mov.w	r1, #32
 800bab2:	f381 8811 	msr	BASEPRI, r1
 800bab6:	617b      	str	r3, [r7, #20]
 800bab8:	4816      	ldr	r0, [pc, #88]	; (800bb14 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800baba:	f7ff fdfe 	bl	800b6ba <_PreparePacket>
 800babe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	61fb      	str	r3, [r7, #28]
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	61bb      	str	r3, [r7, #24]
 800bacc:	e00b      	b.n	800bae6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	b2da      	uxtb	r2, r3
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	1c59      	adds	r1, r3, #1
 800bad6:	61f9      	str	r1, [r7, #28]
 800bad8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800badc:	b2d2      	uxtb	r2, r2
 800bade:	701a      	strb	r2, [r3, #0]
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	09db      	lsrs	r3, r3, #7
 800bae4:	61bb      	str	r3, [r7, #24]
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	2b7f      	cmp	r3, #127	; 0x7f
 800baea:	d8f0      	bhi.n	800bace <SEGGER_SYSVIEW_RecordU32+0x2e>
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	1c5a      	adds	r2, r3, #1
 800baf0:	61fa      	str	r2, [r7, #28]
 800baf2:	69ba      	ldr	r2, [r7, #24]
 800baf4:	b2d2      	uxtb	r2, r2
 800baf6:	701a      	strb	r2, [r3, #0]
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	68f9      	ldr	r1, [r7, #12]
 800bb00:	6938      	ldr	r0, [r7, #16]
 800bb02:	f7ff fec9 	bl	800b898 <_SendPacket>
  RECORD_END();
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	f383 8811 	msr	BASEPRI, r3
}
 800bb0c:	bf00      	nop
 800bb0e:	3720      	adds	r7, #32
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	20013de0 	.word	0x20013de0

0800bb18 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b08c      	sub	sp, #48	; 0x30
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800bb24:	f3ef 8311 	mrs	r3, BASEPRI
 800bb28:	f04f 0120 	mov.w	r1, #32
 800bb2c:	f381 8811 	msr	BASEPRI, r1
 800bb30:	61fb      	str	r3, [r7, #28]
 800bb32:	4825      	ldr	r0, [pc, #148]	; (800bbc8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800bb34:	f7ff fdc1 	bl	800b6ba <_PreparePacket>
 800bb38:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb46:	e00b      	b.n	800bb60 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4e:	1c59      	adds	r1, r3, #1
 800bb50:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bb52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bb56:	b2d2      	uxtb	r2, r2
 800bb58:	701a      	strb	r2, [r3, #0]
 800bb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5c:	09db      	lsrs	r3, r3, #7
 800bb5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb62:	2b7f      	cmp	r3, #127	; 0x7f
 800bb64:	d8f0      	bhi.n	800bb48 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800bb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb68:	1c5a      	adds	r2, r3, #1
 800bb6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb6e:	b2d2      	uxtb	r2, r2
 800bb70:	701a      	strb	r2, [r3, #0]
 800bb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb74:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	627b      	str	r3, [r7, #36]	; 0x24
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	623b      	str	r3, [r7, #32]
 800bb7e:	e00b      	b.n	800bb98 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb86:	1c59      	adds	r1, r3, #1
 800bb88:	6279      	str	r1, [r7, #36]	; 0x24
 800bb8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bb8e:	b2d2      	uxtb	r2, r2
 800bb90:	701a      	strb	r2, [r3, #0]
 800bb92:	6a3b      	ldr	r3, [r7, #32]
 800bb94:	09db      	lsrs	r3, r3, #7
 800bb96:	623b      	str	r3, [r7, #32]
 800bb98:	6a3b      	ldr	r3, [r7, #32]
 800bb9a:	2b7f      	cmp	r3, #127	; 0x7f
 800bb9c:	d8f0      	bhi.n	800bb80 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba0:	1c5a      	adds	r2, r3, #1
 800bba2:	627a      	str	r2, [r7, #36]	; 0x24
 800bba4:	6a3a      	ldr	r2, [r7, #32]
 800bba6:	b2d2      	uxtb	r2, r2
 800bba8:	701a      	strb	r2, [r3, #0]
 800bbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	6979      	ldr	r1, [r7, #20]
 800bbb2:	69b8      	ldr	r0, [r7, #24]
 800bbb4:	f7ff fe70 	bl	800b898 <_SendPacket>
  RECORD_END();
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	f383 8811 	msr	BASEPRI, r3
}
 800bbbe:	bf00      	nop
 800bbc0:	3730      	adds	r7, #48	; 0x30
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20013de0 	.word	0x20013de0

0800bbcc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b08e      	sub	sp, #56	; 0x38
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
 800bbd8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800bbda:	f3ef 8311 	mrs	r3, BASEPRI
 800bbde:	f04f 0120 	mov.w	r1, #32
 800bbe2:	f381 8811 	msr	BASEPRI, r1
 800bbe6:	61fb      	str	r3, [r7, #28]
 800bbe8:	4832      	ldr	r0, [pc, #200]	; (800bcb4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800bbea:	f7ff fd66 	bl	800b6ba <_PreparePacket>
 800bbee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	637b      	str	r3, [r7, #52]	; 0x34
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	633b      	str	r3, [r7, #48]	; 0x30
 800bbfc:	e00b      	b.n	800bc16 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc04:	1c59      	adds	r1, r3, #1
 800bc06:	6379      	str	r1, [r7, #52]	; 0x34
 800bc08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc0c:	b2d2      	uxtb	r2, r2
 800bc0e:	701a      	strb	r2, [r3, #0]
 800bc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc12:	09db      	lsrs	r3, r3, #7
 800bc14:	633b      	str	r3, [r7, #48]	; 0x30
 800bc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc18:	2b7f      	cmp	r3, #127	; 0x7f
 800bc1a:	d8f0      	bhi.n	800bbfe <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800bc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc1e:	1c5a      	adds	r2, r3, #1
 800bc20:	637a      	str	r2, [r7, #52]	; 0x34
 800bc22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc24:	b2d2      	uxtb	r2, r2
 800bc26:	701a      	strb	r2, [r3, #0]
 800bc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc34:	e00b      	b.n	800bc4e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800bc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc38:	b2da      	uxtb	r2, r3
 800bc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3c:	1c59      	adds	r1, r3, #1
 800bc3e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bc40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc44:	b2d2      	uxtb	r2, r2
 800bc46:	701a      	strb	r2, [r3, #0]
 800bc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4a:	09db      	lsrs	r3, r3, #7
 800bc4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc50:	2b7f      	cmp	r3, #127	; 0x7f
 800bc52:	d8f0      	bhi.n	800bc36 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800bc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc56:	1c5a      	adds	r2, r3, #1
 800bc58:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc5c:	b2d2      	uxtb	r2, r2
 800bc5e:	701a      	strb	r2, [r3, #0]
 800bc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	627b      	str	r3, [r7, #36]	; 0x24
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	623b      	str	r3, [r7, #32]
 800bc6c:	e00b      	b.n	800bc86 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800bc6e:	6a3b      	ldr	r3, [r7, #32]
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc74:	1c59      	adds	r1, r3, #1
 800bc76:	6279      	str	r1, [r7, #36]	; 0x24
 800bc78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc7c:	b2d2      	uxtb	r2, r2
 800bc7e:	701a      	strb	r2, [r3, #0]
 800bc80:	6a3b      	ldr	r3, [r7, #32]
 800bc82:	09db      	lsrs	r3, r3, #7
 800bc84:	623b      	str	r3, [r7, #32]
 800bc86:	6a3b      	ldr	r3, [r7, #32]
 800bc88:	2b7f      	cmp	r3, #127	; 0x7f
 800bc8a:	d8f0      	bhi.n	800bc6e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8e:	1c5a      	adds	r2, r3, #1
 800bc90:	627a      	str	r2, [r7, #36]	; 0x24
 800bc92:	6a3a      	ldr	r2, [r7, #32]
 800bc94:	b2d2      	uxtb	r2, r2
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	6979      	ldr	r1, [r7, #20]
 800bca0:	69b8      	ldr	r0, [r7, #24]
 800bca2:	f7ff fdf9 	bl	800b898 <_SendPacket>
  RECORD_END();
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	f383 8811 	msr	BASEPRI, r3
}
 800bcac:	bf00      	nop
 800bcae:	3738      	adds	r7, #56	; 0x38
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	20013de0 	.word	0x20013de0

0800bcb8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b090      	sub	sp, #64	; 0x40
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
 800bcc4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bcc6:	f3ef 8311 	mrs	r3, BASEPRI
 800bcca:	f04f 0120 	mov.w	r1, #32
 800bcce:	f381 8811 	msr	BASEPRI, r1
 800bcd2:	61fb      	str	r3, [r7, #28]
 800bcd4:	4840      	ldr	r0, [pc, #256]	; (800bdd8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800bcd6:	f7ff fcf0 	bl	800b6ba <_PreparePacket>
 800bcda:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bce8:	e00b      	b.n	800bd02 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800bcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf0:	1c59      	adds	r1, r3, #1
 800bcf2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800bcf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bcf8:	b2d2      	uxtb	r2, r2
 800bcfa:	701a      	strb	r2, [r3, #0]
 800bcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfe:	09db      	lsrs	r3, r3, #7
 800bd00:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd04:	2b7f      	cmp	r3, #127	; 0x7f
 800bd06:	d8f0      	bhi.n	800bcea <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800bd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd0a:	1c5a      	adds	r2, r3, #1
 800bd0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bd0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd10:	b2d2      	uxtb	r2, r2
 800bd12:	701a      	strb	r2, [r3, #0]
 800bd14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	637b      	str	r3, [r7, #52]	; 0x34
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	633b      	str	r3, [r7, #48]	; 0x30
 800bd20:	e00b      	b.n	800bd3a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	b2da      	uxtb	r2, r3
 800bd26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd28:	1c59      	adds	r1, r3, #1
 800bd2a:	6379      	str	r1, [r7, #52]	; 0x34
 800bd2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd30:	b2d2      	uxtb	r2, r2
 800bd32:	701a      	strb	r2, [r3, #0]
 800bd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd36:	09db      	lsrs	r3, r3, #7
 800bd38:	633b      	str	r3, [r7, #48]	; 0x30
 800bd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3c:	2b7f      	cmp	r3, #127	; 0x7f
 800bd3e:	d8f0      	bhi.n	800bd22 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800bd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd42:	1c5a      	adds	r2, r3, #1
 800bd44:	637a      	str	r2, [r7, #52]	; 0x34
 800bd46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd48:	b2d2      	uxtb	r2, r2
 800bd4a:	701a      	strb	r2, [r3, #0]
 800bd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd58:	e00b      	b.n	800bd72 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800bd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd60:	1c59      	adds	r1, r3, #1
 800bd62:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bd64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd68:	b2d2      	uxtb	r2, r2
 800bd6a:	701a      	strb	r2, [r3, #0]
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	09db      	lsrs	r3, r3, #7
 800bd70:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd74:	2b7f      	cmp	r3, #127	; 0x7f
 800bd76:	d8f0      	bhi.n	800bd5a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800bd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7a:	1c5a      	adds	r2, r3, #1
 800bd7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd80:	b2d2      	uxtb	r2, r2
 800bd82:	701a      	strb	r2, [r3, #0]
 800bd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd8e:	623b      	str	r3, [r7, #32]
 800bd90:	e00b      	b.n	800bdaa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800bd92:	6a3b      	ldr	r3, [r7, #32]
 800bd94:	b2da      	uxtb	r2, r3
 800bd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd98:	1c59      	adds	r1, r3, #1
 800bd9a:	6279      	str	r1, [r7, #36]	; 0x24
 800bd9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bda0:	b2d2      	uxtb	r2, r2
 800bda2:	701a      	strb	r2, [r3, #0]
 800bda4:	6a3b      	ldr	r3, [r7, #32]
 800bda6:	09db      	lsrs	r3, r3, #7
 800bda8:	623b      	str	r3, [r7, #32]
 800bdaa:	6a3b      	ldr	r3, [r7, #32]
 800bdac:	2b7f      	cmp	r3, #127	; 0x7f
 800bdae:	d8f0      	bhi.n	800bd92 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	1c5a      	adds	r2, r3, #1
 800bdb4:	627a      	str	r2, [r7, #36]	; 0x24
 800bdb6:	6a3a      	ldr	r2, [r7, #32]
 800bdb8:	b2d2      	uxtb	r2, r2
 800bdba:	701a      	strb	r2, [r3, #0]
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	6979      	ldr	r1, [r7, #20]
 800bdc4:	69b8      	ldr	r0, [r7, #24]
 800bdc6:	f7ff fd67 	bl	800b898 <_SendPacket>
  RECORD_END();
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	f383 8811 	msr	BASEPRI, r3
}
 800bdd0:	bf00      	nop
 800bdd2:	3740      	adds	r7, #64	; 0x40
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	20013de0 	.word	0x20013de0

0800bddc <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b092      	sub	sp, #72	; 0x48
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
 800bde8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800bdea:	f3ef 8311 	mrs	r3, BASEPRI
 800bdee:	f04f 0120 	mov.w	r1, #32
 800bdf2:	f381 8811 	msr	BASEPRI, r1
 800bdf6:	61fb      	str	r3, [r7, #28]
 800bdf8:	484e      	ldr	r0, [pc, #312]	; (800bf34 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800bdfa:	f7ff fc5e 	bl	800b6ba <_PreparePacket>
 800bdfe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	647b      	str	r3, [r7, #68]	; 0x44
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	643b      	str	r3, [r7, #64]	; 0x40
 800be0c:	e00b      	b.n	800be26 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800be0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be10:	b2da      	uxtb	r2, r3
 800be12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be14:	1c59      	adds	r1, r3, #1
 800be16:	6479      	str	r1, [r7, #68]	; 0x44
 800be18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be1c:	b2d2      	uxtb	r2, r2
 800be1e:	701a      	strb	r2, [r3, #0]
 800be20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be22:	09db      	lsrs	r3, r3, #7
 800be24:	643b      	str	r3, [r7, #64]	; 0x40
 800be26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be28:	2b7f      	cmp	r3, #127	; 0x7f
 800be2a:	d8f0      	bhi.n	800be0e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800be2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be2e:	1c5a      	adds	r2, r3, #1
 800be30:	647a      	str	r2, [r7, #68]	; 0x44
 800be32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be34:	b2d2      	uxtb	r2, r2
 800be36:	701a      	strb	r2, [r3, #0]
 800be38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	63bb      	str	r3, [r7, #56]	; 0x38
 800be44:	e00b      	b.n	800be5e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800be46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be4c:	1c59      	adds	r1, r3, #1
 800be4e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800be50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be54:	b2d2      	uxtb	r2, r2
 800be56:	701a      	strb	r2, [r3, #0]
 800be58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5a:	09db      	lsrs	r3, r3, #7
 800be5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800be5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be60:	2b7f      	cmp	r3, #127	; 0x7f
 800be62:	d8f0      	bhi.n	800be46 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 800be64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be66:	1c5a      	adds	r2, r3, #1
 800be68:	63fa      	str	r2, [r7, #60]	; 0x3c
 800be6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be6c:	b2d2      	uxtb	r2, r2
 800be6e:	701a      	strb	r2, [r3, #0]
 800be70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	637b      	str	r3, [r7, #52]	; 0x34
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	633b      	str	r3, [r7, #48]	; 0x30
 800be7c:	e00b      	b.n	800be96 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	b2da      	uxtb	r2, r3
 800be82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be84:	1c59      	adds	r1, r3, #1
 800be86:	6379      	str	r1, [r7, #52]	; 0x34
 800be88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be8c:	b2d2      	uxtb	r2, r2
 800be8e:	701a      	strb	r2, [r3, #0]
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	09db      	lsrs	r3, r3, #7
 800be94:	633b      	str	r3, [r7, #48]	; 0x30
 800be96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be98:	2b7f      	cmp	r3, #127	; 0x7f
 800be9a:	d8f0      	bhi.n	800be7e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800be9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be9e:	1c5a      	adds	r2, r3, #1
 800bea0:	637a      	str	r2, [r7, #52]	; 0x34
 800bea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bea4:	b2d2      	uxtb	r2, r2
 800bea6:	701a      	strb	r2, [r3, #0]
 800bea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beaa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800beb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800beb4:	e00b      	b.n	800bece <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800beb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebc:	1c59      	adds	r1, r3, #1
 800bebe:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bec0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bec4:	b2d2      	uxtb	r2, r2
 800bec6:	701a      	strb	r2, [r3, #0]
 800bec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beca:	09db      	lsrs	r3, r3, #7
 800becc:	62bb      	str	r3, [r7, #40]	; 0x28
 800bece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed0:	2b7f      	cmp	r3, #127	; 0x7f
 800bed2:	d8f0      	bhi.n	800beb6 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 800bed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed6:	1c5a      	adds	r2, r3, #1
 800bed8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800beda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bedc:	b2d2      	uxtb	r2, r2
 800bede:	701a      	strb	r2, [r3, #0]
 800bee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	627b      	str	r3, [r7, #36]	; 0x24
 800bee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beea:	623b      	str	r3, [r7, #32]
 800beec:	e00b      	b.n	800bf06 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800beee:	6a3b      	ldr	r3, [r7, #32]
 800bef0:	b2da      	uxtb	r2, r3
 800bef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef4:	1c59      	adds	r1, r3, #1
 800bef6:	6279      	str	r1, [r7, #36]	; 0x24
 800bef8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800befc:	b2d2      	uxtb	r2, r2
 800befe:	701a      	strb	r2, [r3, #0]
 800bf00:	6a3b      	ldr	r3, [r7, #32]
 800bf02:	09db      	lsrs	r3, r3, #7
 800bf04:	623b      	str	r3, [r7, #32]
 800bf06:	6a3b      	ldr	r3, [r7, #32]
 800bf08:	2b7f      	cmp	r3, #127	; 0x7f
 800bf0a:	d8f0      	bhi.n	800beee <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0e:	1c5a      	adds	r2, r3, #1
 800bf10:	627a      	str	r2, [r7, #36]	; 0x24
 800bf12:	6a3a      	ldr	r2, [r7, #32]
 800bf14:	b2d2      	uxtb	r2, r2
 800bf16:	701a      	strb	r2, [r3, #0]
 800bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	6979      	ldr	r1, [r7, #20]
 800bf20:	69b8      	ldr	r0, [r7, #24]
 800bf22:	f7ff fcb9 	bl	800b898 <_SendPacket>
  RECORD_END();
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	f383 8811 	msr	BASEPRI, r3
}
 800bf2c:	bf00      	nop
 800bf2e:	3748      	adds	r7, #72	; 0x48
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	20013de0 	.word	0x20013de0

0800bf38 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b08c      	sub	sp, #48	; 0x30
 800bf3c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800bf3e:	4b58      	ldr	r3, [pc, #352]	; (800c0a0 <SEGGER_SYSVIEW_Start+0x168>)
 800bf40:	2201      	movs	r2, #1
 800bf42:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800bf44:	f3ef 8311 	mrs	r3, BASEPRI
 800bf48:	f04f 0120 	mov.w	r1, #32
 800bf4c:	f381 8811 	msr	BASEPRI, r1
 800bf50:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800bf52:	4b53      	ldr	r3, [pc, #332]	; (800c0a0 <SEGGER_SYSVIEW_Start+0x168>)
 800bf54:	785b      	ldrb	r3, [r3, #1]
 800bf56:	220a      	movs	r2, #10
 800bf58:	4952      	ldr	r1, [pc, #328]	; (800c0a4 <SEGGER_SYSVIEW_Start+0x16c>)
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7f4 f958 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800bf66:	200a      	movs	r0, #10
 800bf68:	f7ff fd7c 	bl	800ba64 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bf6c:	f3ef 8311 	mrs	r3, BASEPRI
 800bf70:	f04f 0120 	mov.w	r1, #32
 800bf74:	f381 8811 	msr	BASEPRI, r1
 800bf78:	60bb      	str	r3, [r7, #8]
 800bf7a:	484b      	ldr	r0, [pc, #300]	; (800c0a8 <SEGGER_SYSVIEW_Start+0x170>)
 800bf7c:	f7ff fb9d 	bl	800b6ba <_PreparePacket>
 800bf80:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf8a:	4b45      	ldr	r3, [pc, #276]	; (800c0a0 <SEGGER_SYSVIEW_Start+0x168>)
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf90:	e00b      	b.n	800bfaa <SEGGER_SYSVIEW_Start+0x72>
 800bf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf94:	b2da      	uxtb	r2, r3
 800bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf98:	1c59      	adds	r1, r3, #1
 800bf9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bf9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bfa0:	b2d2      	uxtb	r2, r2
 800bfa2:	701a      	strb	r2, [r3, #0]
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	09db      	lsrs	r3, r3, #7
 800bfa8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfac:	2b7f      	cmp	r3, #127	; 0x7f
 800bfae:	d8f0      	bhi.n	800bf92 <SEGGER_SYSVIEW_Start+0x5a>
 800bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb2:	1c5a      	adds	r2, r3, #1
 800bfb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfb8:	b2d2      	uxtb	r2, r2
 800bfba:	701a      	strb	r2, [r3, #0]
 800bfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfbe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	627b      	str	r3, [r7, #36]	; 0x24
 800bfc4:	4b36      	ldr	r3, [pc, #216]	; (800c0a0 <SEGGER_SYSVIEW_Start+0x168>)
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	623b      	str	r3, [r7, #32]
 800bfca:	e00b      	b.n	800bfe4 <SEGGER_SYSVIEW_Start+0xac>
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	b2da      	uxtb	r2, r3
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd2:	1c59      	adds	r1, r3, #1
 800bfd4:	6279      	str	r1, [r7, #36]	; 0x24
 800bfd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bfda:	b2d2      	uxtb	r2, r2
 800bfdc:	701a      	strb	r2, [r3, #0]
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	09db      	lsrs	r3, r3, #7
 800bfe2:	623b      	str	r3, [r7, #32]
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	2b7f      	cmp	r3, #127	; 0x7f
 800bfe8:	d8f0      	bhi.n	800bfcc <SEGGER_SYSVIEW_Start+0x94>
 800bfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfec:	1c5a      	adds	r2, r3, #1
 800bfee:	627a      	str	r2, [r7, #36]	; 0x24
 800bff0:	6a3a      	ldr	r2, [r7, #32]
 800bff2:	b2d2      	uxtb	r2, r2
 800bff4:	701a      	strb	r2, [r3, #0]
 800bff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	61fb      	str	r3, [r7, #28]
 800bffe:	4b28      	ldr	r3, [pc, #160]	; (800c0a0 <SEGGER_SYSVIEW_Start+0x168>)
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	61bb      	str	r3, [r7, #24]
 800c004:	e00b      	b.n	800c01e <SEGGER_SYSVIEW_Start+0xe6>
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	b2da      	uxtb	r2, r3
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	1c59      	adds	r1, r3, #1
 800c00e:	61f9      	str	r1, [r7, #28]
 800c010:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c014:	b2d2      	uxtb	r2, r2
 800c016:	701a      	strb	r2, [r3, #0]
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	09db      	lsrs	r3, r3, #7
 800c01c:	61bb      	str	r3, [r7, #24]
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	2b7f      	cmp	r3, #127	; 0x7f
 800c022:	d8f0      	bhi.n	800c006 <SEGGER_SYSVIEW_Start+0xce>
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	1c5a      	adds	r2, r3, #1
 800c028:	61fa      	str	r2, [r7, #28]
 800c02a:	69ba      	ldr	r2, [r7, #24]
 800c02c:	b2d2      	uxtb	r2, r2
 800c02e:	701a      	strb	r2, [r3, #0]
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	617b      	str	r3, [r7, #20]
 800c038:	2300      	movs	r3, #0
 800c03a:	613b      	str	r3, [r7, #16]
 800c03c:	e00b      	b.n	800c056 <SEGGER_SYSVIEW_Start+0x11e>
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	b2da      	uxtb	r2, r3
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	1c59      	adds	r1, r3, #1
 800c046:	6179      	str	r1, [r7, #20]
 800c048:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c04c:	b2d2      	uxtb	r2, r2
 800c04e:	701a      	strb	r2, [r3, #0]
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	09db      	lsrs	r3, r3, #7
 800c054:	613b      	str	r3, [r7, #16]
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	2b7f      	cmp	r3, #127	; 0x7f
 800c05a:	d8f0      	bhi.n	800c03e <SEGGER_SYSVIEW_Start+0x106>
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	1c5a      	adds	r2, r3, #1
 800c060:	617a      	str	r2, [r7, #20]
 800c062:	693a      	ldr	r2, [r7, #16]
 800c064:	b2d2      	uxtb	r2, r2
 800c066:	701a      	strb	r2, [r3, #0]
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c06c:	2218      	movs	r2, #24
 800c06e:	6839      	ldr	r1, [r7, #0]
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7ff fc11 	bl	800b898 <_SendPacket>
      RECORD_END();
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c07c:	4b08      	ldr	r3, [pc, #32]	; (800c0a0 <SEGGER_SYSVIEW_Start+0x168>)
 800c07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c080:	2b00      	cmp	r3, #0
 800c082:	d002      	beq.n	800c08a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800c084:	4b06      	ldr	r3, [pc, #24]	; (800c0a0 <SEGGER_SYSVIEW_Start+0x168>)
 800c086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c088:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800c08a:	f000 f9c7 	bl	800c41c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800c08e:	f000 f9b1 	bl	800c3f4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800c092:	f000 fbff 	bl	800c894 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800c096:	bf00      	nop
 800c098:	3730      	adds	r7, #48	; 0x30
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	20013db0 	.word	0x20013db0
 800c0a4:	080105a8 	.word	0x080105a8
 800c0a8:	20013de0 	.word	0x20013de0

0800c0ac <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c0b2:	f3ef 8311 	mrs	r3, BASEPRI
 800c0b6:	f04f 0120 	mov.w	r1, #32
 800c0ba:	f381 8811 	msr	BASEPRI, r1
 800c0be:	607b      	str	r3, [r7, #4]
 800c0c0:	480b      	ldr	r0, [pc, #44]	; (800c0f0 <SEGGER_SYSVIEW_Stop+0x44>)
 800c0c2:	f7ff fafa 	bl	800b6ba <_PreparePacket>
 800c0c6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800c0c8:	4b0a      	ldr	r3, [pc, #40]	; (800c0f4 <SEGGER_SYSVIEW_Stop+0x48>)
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d007      	beq.n	800c0e0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800c0d0:	220b      	movs	r2, #11
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6838      	ldr	r0, [r7, #0]
 800c0d6:	f7ff fbdf 	bl	800b898 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800c0da:	4b06      	ldr	r3, [pc, #24]	; (800c0f4 <SEGGER_SYSVIEW_Stop+0x48>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f383 8811 	msr	BASEPRI, r3
}
 800c0e6:	bf00      	nop
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	20013de0 	.word	0x20013de0
 800c0f4:	20013db0 	.word	0x20013db0

0800c0f8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08c      	sub	sp, #48	; 0x30
 800c0fc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c0fe:	f3ef 8311 	mrs	r3, BASEPRI
 800c102:	f04f 0120 	mov.w	r1, #32
 800c106:	f381 8811 	msr	BASEPRI, r1
 800c10a:	60fb      	str	r3, [r7, #12]
 800c10c:	4845      	ldr	r0, [pc, #276]	; (800c224 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800c10e:	f7ff fad4 	bl	800b6ba <_PreparePacket>
 800c112:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c11c:	4b42      	ldr	r3, [pc, #264]	; (800c228 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	62bb      	str	r3, [r7, #40]	; 0x28
 800c122:	e00b      	b.n	800c13c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800c124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c126:	b2da      	uxtb	r2, r3
 800c128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12a:	1c59      	adds	r1, r3, #1
 800c12c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c12e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c132:	b2d2      	uxtb	r2, r2
 800c134:	701a      	strb	r2, [r3, #0]
 800c136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c138:	09db      	lsrs	r3, r3, #7
 800c13a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13e:	2b7f      	cmp	r3, #127	; 0x7f
 800c140:	d8f0      	bhi.n	800c124 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800c142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c144:	1c5a      	adds	r2, r3, #1
 800c146:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c14a:	b2d2      	uxtb	r2, r2
 800c14c:	701a      	strb	r2, [r3, #0]
 800c14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c150:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	627b      	str	r3, [r7, #36]	; 0x24
 800c156:	4b34      	ldr	r3, [pc, #208]	; (800c228 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	623b      	str	r3, [r7, #32]
 800c15c:	e00b      	b.n	800c176 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800c15e:	6a3b      	ldr	r3, [r7, #32]
 800c160:	b2da      	uxtb	r2, r3
 800c162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c164:	1c59      	adds	r1, r3, #1
 800c166:	6279      	str	r1, [r7, #36]	; 0x24
 800c168:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c16c:	b2d2      	uxtb	r2, r2
 800c16e:	701a      	strb	r2, [r3, #0]
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	09db      	lsrs	r3, r3, #7
 800c174:	623b      	str	r3, [r7, #32]
 800c176:	6a3b      	ldr	r3, [r7, #32]
 800c178:	2b7f      	cmp	r3, #127	; 0x7f
 800c17a:	d8f0      	bhi.n	800c15e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800c17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17e:	1c5a      	adds	r2, r3, #1
 800c180:	627a      	str	r2, [r7, #36]	; 0x24
 800c182:	6a3a      	ldr	r2, [r7, #32]
 800c184:	b2d2      	uxtb	r2, r2
 800c186:	701a      	strb	r2, [r3, #0]
 800c188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	61fb      	str	r3, [r7, #28]
 800c190:	4b25      	ldr	r3, [pc, #148]	; (800c228 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	61bb      	str	r3, [r7, #24]
 800c196:	e00b      	b.n	800c1b0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	b2da      	uxtb	r2, r3
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	1c59      	adds	r1, r3, #1
 800c1a0:	61f9      	str	r1, [r7, #28]
 800c1a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1a6:	b2d2      	uxtb	r2, r2
 800c1a8:	701a      	strb	r2, [r3, #0]
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	09db      	lsrs	r3, r3, #7
 800c1ae:	61bb      	str	r3, [r7, #24]
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	2b7f      	cmp	r3, #127	; 0x7f
 800c1b4:	d8f0      	bhi.n	800c198 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	1c5a      	adds	r2, r3, #1
 800c1ba:	61fa      	str	r2, [r7, #28]
 800c1bc:	69ba      	ldr	r2, [r7, #24]
 800c1be:	b2d2      	uxtb	r2, r2
 800c1c0:	701a      	strb	r2, [r3, #0]
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	617b      	str	r3, [r7, #20]
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	613b      	str	r3, [r7, #16]
 800c1ce:	e00b      	b.n	800c1e8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	1c59      	adds	r1, r3, #1
 800c1d8:	6179      	str	r1, [r7, #20]
 800c1da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1de:	b2d2      	uxtb	r2, r2
 800c1e0:	701a      	strb	r2, [r3, #0]
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	09db      	lsrs	r3, r3, #7
 800c1e6:	613b      	str	r3, [r7, #16]
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	2b7f      	cmp	r3, #127	; 0x7f
 800c1ec:	d8f0      	bhi.n	800c1d0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	1c5a      	adds	r2, r3, #1
 800c1f2:	617a      	str	r2, [r7, #20]
 800c1f4:	693a      	ldr	r2, [r7, #16]
 800c1f6:	b2d2      	uxtb	r2, r2
 800c1f8:	701a      	strb	r2, [r3, #0]
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c1fe:	2218      	movs	r2, #24
 800c200:	6879      	ldr	r1, [r7, #4]
 800c202:	68b8      	ldr	r0, [r7, #8]
 800c204:	f7ff fb48 	bl	800b898 <_SendPacket>
  RECORD_END();
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c20e:	4b06      	ldr	r3, [pc, #24]	; (800c228 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c212:	2b00      	cmp	r3, #0
 800c214:	d002      	beq.n	800c21c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800c216:	4b04      	ldr	r3, [pc, #16]	; (800c228 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21a:	4798      	blx	r3
  }
}
 800c21c:	bf00      	nop
 800c21e:	3730      	adds	r7, #48	; 0x30
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	20013de0 	.word	0x20013de0
 800c228:	20013db0 	.word	0x20013db0

0800c22c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b092      	sub	sp, #72	; 0x48
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800c234:	f3ef 8311 	mrs	r3, BASEPRI
 800c238:	f04f 0120 	mov.w	r1, #32
 800c23c:	f381 8811 	msr	BASEPRI, r1
 800c240:	617b      	str	r3, [r7, #20]
 800c242:	486a      	ldr	r0, [pc, #424]	; (800c3ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800c244:	f7ff fa39 	bl	800b6ba <_PreparePacket>
 800c248:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	647b      	str	r3, [r7, #68]	; 0x44
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	4b66      	ldr	r3, [pc, #408]	; (800c3f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	643b      	str	r3, [r7, #64]	; 0x40
 800c25e:	e00b      	b.n	800c278 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800c260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c262:	b2da      	uxtb	r2, r3
 800c264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c266:	1c59      	adds	r1, r3, #1
 800c268:	6479      	str	r1, [r7, #68]	; 0x44
 800c26a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c26e:	b2d2      	uxtb	r2, r2
 800c270:	701a      	strb	r2, [r3, #0]
 800c272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c274:	09db      	lsrs	r3, r3, #7
 800c276:	643b      	str	r3, [r7, #64]	; 0x40
 800c278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c27a:	2b7f      	cmp	r3, #127	; 0x7f
 800c27c:	d8f0      	bhi.n	800c260 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800c27e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c280:	1c5a      	adds	r2, r3, #1
 800c282:	647a      	str	r2, [r7, #68]	; 0x44
 800c284:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c286:	b2d2      	uxtb	r2, r2
 800c288:	701a      	strb	r2, [r3, #0]
 800c28a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c28c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	63bb      	str	r3, [r7, #56]	; 0x38
 800c298:	e00b      	b.n	800c2b2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800c29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2a0:	1c59      	adds	r1, r3, #1
 800c2a2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c2a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c2a8:	b2d2      	uxtb	r2, r2
 800c2aa:	701a      	strb	r2, [r3, #0]
 800c2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ae:	09db      	lsrs	r3, r3, #7
 800c2b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b4:	2b7f      	cmp	r3, #127	; 0x7f
 800c2b6:	d8f0      	bhi.n	800c29a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800c2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ba:	1c5a      	adds	r2, r3, #1
 800c2bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c2be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2c0:	b2d2      	uxtb	r2, r2
 800c2c2:	701a      	strb	r2, [r3, #0]
 800c2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2c6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	2220      	movs	r2, #32
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f7ff f9a5 	bl	800b620 <_EncodeStr>
 800c2d6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800c2d8:	2209      	movs	r2, #9
 800c2da:	68f9      	ldr	r1, [r7, #12]
 800c2dc:	6938      	ldr	r0, [r7, #16]
 800c2de:	f7ff fadb 	bl	800b898 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	637b      	str	r3, [r7, #52]	; 0x34
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681a      	ldr	r2, [r3, #0]
 800c2ee:	4b40      	ldr	r3, [pc, #256]	; (800c3f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c2f0:	691b      	ldr	r3, [r3, #16]
 800c2f2:	1ad3      	subs	r3, r2, r3
 800c2f4:	633b      	str	r3, [r7, #48]	; 0x30
 800c2f6:	e00b      	b.n	800c310 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fa:	b2da      	uxtb	r2, r3
 800c2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2fe:	1c59      	adds	r1, r3, #1
 800c300:	6379      	str	r1, [r7, #52]	; 0x34
 800c302:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c306:	b2d2      	uxtb	r2, r2
 800c308:	701a      	strb	r2, [r3, #0]
 800c30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30c:	09db      	lsrs	r3, r3, #7
 800c30e:	633b      	str	r3, [r7, #48]	; 0x30
 800c310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c312:	2b7f      	cmp	r3, #127	; 0x7f
 800c314:	d8f0      	bhi.n	800c2f8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800c316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c318:	1c5a      	adds	r2, r3, #1
 800c31a:	637a      	str	r2, [r7, #52]	; 0x34
 800c31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c31e:	b2d2      	uxtb	r2, r2
 800c320:	701a      	strb	r2, [r3, #0]
 800c322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c324:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c330:	e00b      	b.n	800c34a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800c332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c334:	b2da      	uxtb	r2, r3
 800c336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c338:	1c59      	adds	r1, r3, #1
 800c33a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c33c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c340:	b2d2      	uxtb	r2, r2
 800c342:	701a      	strb	r2, [r3, #0]
 800c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c346:	09db      	lsrs	r3, r3, #7
 800c348:	62bb      	str	r3, [r7, #40]	; 0x28
 800c34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34c:	2b7f      	cmp	r3, #127	; 0x7f
 800c34e:	d8f0      	bhi.n	800c332 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800c350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c352:	1c5a      	adds	r2, r3, #1
 800c354:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c358:	b2d2      	uxtb	r2, r2
 800c35a:	701a      	strb	r2, [r3, #0]
 800c35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	627b      	str	r3, [r7, #36]	; 0x24
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	623b      	str	r3, [r7, #32]
 800c36a:	e00b      	b.n	800c384 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800c36c:	6a3b      	ldr	r3, [r7, #32]
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c372:	1c59      	adds	r1, r3, #1
 800c374:	6279      	str	r1, [r7, #36]	; 0x24
 800c376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c37a:	b2d2      	uxtb	r2, r2
 800c37c:	701a      	strb	r2, [r3, #0]
 800c37e:	6a3b      	ldr	r3, [r7, #32]
 800c380:	09db      	lsrs	r3, r3, #7
 800c382:	623b      	str	r3, [r7, #32]
 800c384:	6a3b      	ldr	r3, [r7, #32]
 800c386:	2b7f      	cmp	r3, #127	; 0x7f
 800c388:	d8f0      	bhi.n	800c36c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38c:	1c5a      	adds	r2, r3, #1
 800c38e:	627a      	str	r2, [r7, #36]	; 0x24
 800c390:	6a3a      	ldr	r2, [r7, #32]
 800c392:	b2d2      	uxtb	r2, r2
 800c394:	701a      	strb	r2, [r3, #0]
 800c396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c398:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	61fb      	str	r3, [r7, #28]
 800c39e:	2300      	movs	r3, #0
 800c3a0:	61bb      	str	r3, [r7, #24]
 800c3a2:	e00b      	b.n	800c3bc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	b2da      	uxtb	r2, r3
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	1c59      	adds	r1, r3, #1
 800c3ac:	61f9      	str	r1, [r7, #28]
 800c3ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c3b2:	b2d2      	uxtb	r2, r2
 800c3b4:	701a      	strb	r2, [r3, #0]
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	09db      	lsrs	r3, r3, #7
 800c3ba:	61bb      	str	r3, [r7, #24]
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	2b7f      	cmp	r3, #127	; 0x7f
 800c3c0:	d8f0      	bhi.n	800c3a4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	1c5a      	adds	r2, r3, #1
 800c3c6:	61fa      	str	r2, [r7, #28]
 800c3c8:	69ba      	ldr	r2, [r7, #24]
 800c3ca:	b2d2      	uxtb	r2, r2
 800c3cc:	701a      	strb	r2, [r3, #0]
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800c3d2:	2215      	movs	r2, #21
 800c3d4:	68f9      	ldr	r1, [r7, #12]
 800c3d6:	6938      	ldr	r0, [r7, #16]
 800c3d8:	f7ff fa5e 	bl	800b898 <_SendPacket>
  RECORD_END();
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	f383 8811 	msr	BASEPRI, r3
}
 800c3e2:	bf00      	nop
 800c3e4:	3748      	adds	r7, #72	; 0x48
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20013de0 	.word	0x20013de0
 800c3f0:	20013db0 	.word	0x20013db0

0800c3f4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800c3f8:	4b07      	ldr	r3, [pc, #28]	; (800c418 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c3fa:	6a1b      	ldr	r3, [r3, #32]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d008      	beq.n	800c412 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800c400:	4b05      	ldr	r3, [pc, #20]	; (800c418 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c402:	6a1b      	ldr	r3, [r3, #32]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d003      	beq.n	800c412 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800c40a:	4b03      	ldr	r3, [pc, #12]	; (800c418 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c40c:	6a1b      	ldr	r3, [r3, #32]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	4798      	blx	r3
  }
}
 800c412:	bf00      	nop
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	20013db0 	.word	0x20013db0

0800c41c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800c41c:	b590      	push	{r4, r7, lr}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800c422:	4b15      	ldr	r3, [pc, #84]	; (800c478 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c424:	6a1b      	ldr	r3, [r3, #32]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d01a      	beq.n	800c460 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800c42a:	4b13      	ldr	r3, [pc, #76]	; (800c478 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c42c:	6a1b      	ldr	r3, [r3, #32]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d015      	beq.n	800c460 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800c434:	4b10      	ldr	r3, [pc, #64]	; (800c478 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c436:	6a1b      	ldr	r3, [r3, #32]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4798      	blx	r3
 800c43c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c440:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800c442:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c446:	f04f 0200 	mov.w	r2, #0
 800c44a:	f04f 0300 	mov.w	r3, #0
 800c44e:	000a      	movs	r2, r1
 800c450:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c452:	4613      	mov	r3, r2
 800c454:	461a      	mov	r2, r3
 800c456:	4621      	mov	r1, r4
 800c458:	200d      	movs	r0, #13
 800c45a:	f7ff fb5d 	bl	800bb18 <SEGGER_SYSVIEW_RecordU32x2>
 800c45e:	e006      	b.n	800c46e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800c460:	4b06      	ldr	r3, [pc, #24]	; (800c47c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4619      	mov	r1, r3
 800c466:	200c      	movs	r0, #12
 800c468:	f7ff fb1a 	bl	800baa0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800c46c:	bf00      	nop
 800c46e:	bf00      	nop
 800c470:	370c      	adds	r7, #12
 800c472:	46bd      	mov	sp, r7
 800c474:	bd90      	pop	{r4, r7, pc}
 800c476:	bf00      	nop
 800c478:	20013db0 	.word	0x20013db0
 800c47c:	e0001004 	.word	0xe0001004

0800c480 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c486:	f3ef 8311 	mrs	r3, BASEPRI
 800c48a:	f04f 0120 	mov.w	r1, #32
 800c48e:	f381 8811 	msr	BASEPRI, r1
 800c492:	60fb      	str	r3, [r7, #12]
 800c494:	4819      	ldr	r0, [pc, #100]	; (800c4fc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800c496:	f7ff f910 	bl	800b6ba <_PreparePacket>
 800c49a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800c4a0:	4b17      	ldr	r3, [pc, #92]	; (800c500 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4a8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	617b      	str	r3, [r7, #20]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	613b      	str	r3, [r7, #16]
 800c4b2:	e00b      	b.n	800c4cc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	b2da      	uxtb	r2, r3
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	1c59      	adds	r1, r3, #1
 800c4bc:	6179      	str	r1, [r7, #20]
 800c4be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c4c2:	b2d2      	uxtb	r2, r2
 800c4c4:	701a      	strb	r2, [r3, #0]
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	09db      	lsrs	r3, r3, #7
 800c4ca:	613b      	str	r3, [r7, #16]
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	2b7f      	cmp	r3, #127	; 0x7f
 800c4d0:	d8f0      	bhi.n	800c4b4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	1c5a      	adds	r2, r3, #1
 800c4d6:	617a      	str	r2, [r7, #20]
 800c4d8:	693a      	ldr	r2, [r7, #16]
 800c4da:	b2d2      	uxtb	r2, r2
 800c4dc:	701a      	strb	r2, [r3, #0]
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800c4e2:	2202      	movs	r2, #2
 800c4e4:	6879      	ldr	r1, [r7, #4]
 800c4e6:	68b8      	ldr	r0, [r7, #8]
 800c4e8:	f7ff f9d6 	bl	800b898 <_SendPacket>
  RECORD_END();
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	f383 8811 	msr	BASEPRI, r3
}
 800c4f2:	bf00      	nop
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	20013de0 	.word	0x20013de0
 800c500:	e000ed04 	.word	0xe000ed04

0800c504 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c50a:	f3ef 8311 	mrs	r3, BASEPRI
 800c50e:	f04f 0120 	mov.w	r1, #32
 800c512:	f381 8811 	msr	BASEPRI, r1
 800c516:	607b      	str	r3, [r7, #4]
 800c518:	4807      	ldr	r0, [pc, #28]	; (800c538 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800c51a:	f7ff f8ce 	bl	800b6ba <_PreparePacket>
 800c51e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800c520:	2203      	movs	r2, #3
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6838      	ldr	r0, [r7, #0]
 800c526:	f7ff f9b7 	bl	800b898 <_SendPacket>
  RECORD_END();
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f383 8811 	msr	BASEPRI, r3
}
 800c530:	bf00      	nop
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	20013de0 	.word	0x20013de0

0800c53c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c542:	f3ef 8311 	mrs	r3, BASEPRI
 800c546:	f04f 0120 	mov.w	r1, #32
 800c54a:	f381 8811 	msr	BASEPRI, r1
 800c54e:	607b      	str	r3, [r7, #4]
 800c550:	4807      	ldr	r0, [pc, #28]	; (800c570 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800c552:	f7ff f8b2 	bl	800b6ba <_PreparePacket>
 800c556:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800c558:	2212      	movs	r2, #18
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	6838      	ldr	r0, [r7, #0]
 800c55e:	f7ff f99b 	bl	800b898 <_SendPacket>
  RECORD_END();
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f383 8811 	msr	BASEPRI, r3
}
 800c568:	bf00      	nop
 800c56a:	3708      	adds	r7, #8
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	20013de0 	.word	0x20013de0

0800c574 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c57a:	f3ef 8311 	mrs	r3, BASEPRI
 800c57e:	f04f 0120 	mov.w	r1, #32
 800c582:	f381 8811 	msr	BASEPRI, r1
 800c586:	607b      	str	r3, [r7, #4]
 800c588:	4807      	ldr	r0, [pc, #28]	; (800c5a8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800c58a:	f7ff f896 	bl	800b6ba <_PreparePacket>
 800c58e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800c590:	2211      	movs	r2, #17
 800c592:	6839      	ldr	r1, [r7, #0]
 800c594:	6838      	ldr	r0, [r7, #0]
 800c596:	f7ff f97f 	bl	800b898 <_SendPacket>
  RECORD_END();
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f383 8811 	msr	BASEPRI, r3
}
 800c5a0:	bf00      	nop
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	20013de0 	.word	0x20013de0

0800c5ac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b088      	sub	sp, #32
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c5b4:	f3ef 8311 	mrs	r3, BASEPRI
 800c5b8:	f04f 0120 	mov.w	r1, #32
 800c5bc:	f381 8811 	msr	BASEPRI, r1
 800c5c0:	617b      	str	r3, [r7, #20]
 800c5c2:	4819      	ldr	r0, [pc, #100]	; (800c628 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800c5c4:	f7ff f879 	bl	800b6ba <_PreparePacket>
 800c5c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c5ce:	4b17      	ldr	r3, [pc, #92]	; (800c62c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	61fb      	str	r3, [r7, #28]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	61bb      	str	r3, [r7, #24]
 800c5e0:	e00b      	b.n	800c5fa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	b2da      	uxtb	r2, r3
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	1c59      	adds	r1, r3, #1
 800c5ea:	61f9      	str	r1, [r7, #28]
 800c5ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c5f0:	b2d2      	uxtb	r2, r2
 800c5f2:	701a      	strb	r2, [r3, #0]
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	09db      	lsrs	r3, r3, #7
 800c5f8:	61bb      	str	r3, [r7, #24]
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	2b7f      	cmp	r3, #127	; 0x7f
 800c5fe:	d8f0      	bhi.n	800c5e2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	1c5a      	adds	r2, r3, #1
 800c604:	61fa      	str	r2, [r7, #28]
 800c606:	69ba      	ldr	r2, [r7, #24]
 800c608:	b2d2      	uxtb	r2, r2
 800c60a:	701a      	strb	r2, [r3, #0]
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800c610:	2208      	movs	r2, #8
 800c612:	68f9      	ldr	r1, [r7, #12]
 800c614:	6938      	ldr	r0, [r7, #16]
 800c616:	f7ff f93f 	bl	800b898 <_SendPacket>
  RECORD_END();
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	f383 8811 	msr	BASEPRI, r3
}
 800c620:	bf00      	nop
 800c622:	3720      	adds	r7, #32
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	20013de0 	.word	0x20013de0
 800c62c:	20013db0 	.word	0x20013db0

0800c630 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800c630:	b580      	push	{r7, lr}
 800c632:	b088      	sub	sp, #32
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c638:	f3ef 8311 	mrs	r3, BASEPRI
 800c63c:	f04f 0120 	mov.w	r1, #32
 800c640:	f381 8811 	msr	BASEPRI, r1
 800c644:	617b      	str	r3, [r7, #20]
 800c646:	4819      	ldr	r0, [pc, #100]	; (800c6ac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800c648:	f7ff f837 	bl	800b6ba <_PreparePacket>
 800c64c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c652:	4b17      	ldr	r3, [pc, #92]	; (800c6b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800c654:	691b      	ldr	r3, [r3, #16]
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	1ad3      	subs	r3, r2, r3
 800c65a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	61fb      	str	r3, [r7, #28]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	61bb      	str	r3, [r7, #24]
 800c664:	e00b      	b.n	800c67e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	b2da      	uxtb	r2, r3
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	1c59      	adds	r1, r3, #1
 800c66e:	61f9      	str	r1, [r7, #28]
 800c670:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c674:	b2d2      	uxtb	r2, r2
 800c676:	701a      	strb	r2, [r3, #0]
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	09db      	lsrs	r3, r3, #7
 800c67c:	61bb      	str	r3, [r7, #24]
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	2b7f      	cmp	r3, #127	; 0x7f
 800c682:	d8f0      	bhi.n	800c666 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	1c5a      	adds	r2, r3, #1
 800c688:	61fa      	str	r2, [r7, #28]
 800c68a:	69ba      	ldr	r2, [r7, #24]
 800c68c:	b2d2      	uxtb	r2, r2
 800c68e:	701a      	strb	r2, [r3, #0]
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800c694:	2204      	movs	r2, #4
 800c696:	68f9      	ldr	r1, [r7, #12]
 800c698:	6938      	ldr	r0, [r7, #16]
 800c69a:	f7ff f8fd 	bl	800b898 <_SendPacket>
  RECORD_END();
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	f383 8811 	msr	BASEPRI, r3
}
 800c6a4:	bf00      	nop
 800c6a6:	3720      	adds	r7, #32
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	20013de0 	.word	0x20013de0
 800c6b0:	20013db0 	.word	0x20013db0

0800c6b4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b088      	sub	sp, #32
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c6bc:	f3ef 8311 	mrs	r3, BASEPRI
 800c6c0:	f04f 0120 	mov.w	r1, #32
 800c6c4:	f381 8811 	msr	BASEPRI, r1
 800c6c8:	617b      	str	r3, [r7, #20]
 800c6ca:	4819      	ldr	r0, [pc, #100]	; (800c730 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800c6cc:	f7fe fff5 	bl	800b6ba <_PreparePacket>
 800c6d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c6d6:	4b17      	ldr	r3, [pc, #92]	; (800c734 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	1ad3      	subs	r3, r2, r3
 800c6de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	61fb      	str	r3, [r7, #28]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	61bb      	str	r3, [r7, #24]
 800c6e8:	e00b      	b.n	800c702 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	b2da      	uxtb	r2, r3
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	1c59      	adds	r1, r3, #1
 800c6f2:	61f9      	str	r1, [r7, #28]
 800c6f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6f8:	b2d2      	uxtb	r2, r2
 800c6fa:	701a      	strb	r2, [r3, #0]
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	09db      	lsrs	r3, r3, #7
 800c700:	61bb      	str	r3, [r7, #24]
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	2b7f      	cmp	r3, #127	; 0x7f
 800c706:	d8f0      	bhi.n	800c6ea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	1c5a      	adds	r2, r3, #1
 800c70c:	61fa      	str	r2, [r7, #28]
 800c70e:	69ba      	ldr	r2, [r7, #24]
 800c710:	b2d2      	uxtb	r2, r2
 800c712:	701a      	strb	r2, [r3, #0]
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800c718:	2206      	movs	r2, #6
 800c71a:	68f9      	ldr	r1, [r7, #12]
 800c71c:	6938      	ldr	r0, [r7, #16]
 800c71e:	f7ff f8bb 	bl	800b898 <_SendPacket>
  RECORD_END();
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f383 8811 	msr	BASEPRI, r3
}
 800c728:	bf00      	nop
 800c72a:	3720      	adds	r7, #32
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	20013de0 	.word	0x20013de0
 800c734:	20013db0 	.word	0x20013db0

0800c738 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800c740:	4b04      	ldr	r3, [pc, #16]	; (800c754 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800c742:	691b      	ldr	r3, [r3, #16]
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	1ad3      	subs	r3, r2, r3
}
 800c748:	4618      	mov	r0, r3
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr
 800c754:	20013db0 	.word	0x20013db0

0800c758 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08c      	sub	sp, #48	; 0x30
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	4603      	mov	r3, r0
 800c760:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800c762:	4b3b      	ldr	r3, [pc, #236]	; (800c850 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d06d      	beq.n	800c846 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800c76a:	4b39      	ldr	r3, [pc, #228]	; (800c850 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800c770:	2300      	movs	r3, #0
 800c772:	62bb      	str	r3, [r7, #40]	; 0x28
 800c774:	e008      	b.n	800c788 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800c776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c778:	691b      	ldr	r3, [r3, #16]
 800c77a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d007      	beq.n	800c792 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c784:	3301      	adds	r3, #1
 800c786:	62bb      	str	r3, [r7, #40]	; 0x28
 800c788:	79fb      	ldrb	r3, [r7, #7]
 800c78a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d3f2      	bcc.n	800c776 <SEGGER_SYSVIEW_SendModule+0x1e>
 800c790:	e000      	b.n	800c794 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800c792:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	2b00      	cmp	r3, #0
 800c798:	d055      	beq.n	800c846 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c79a:	f3ef 8311 	mrs	r3, BASEPRI
 800c79e:	f04f 0120 	mov.w	r1, #32
 800c7a2:	f381 8811 	msr	BASEPRI, r1
 800c7a6:	617b      	str	r3, [r7, #20]
 800c7a8:	482a      	ldr	r0, [pc, #168]	; (800c854 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800c7aa:	f7fe ff86 	bl	800b6ba <_PreparePacket>
 800c7ae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c7b8:	79fb      	ldrb	r3, [r7, #7]
 800c7ba:	623b      	str	r3, [r7, #32]
 800c7bc:	e00b      	b.n	800c7d6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800c7be:	6a3b      	ldr	r3, [r7, #32]
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c4:	1c59      	adds	r1, r3, #1
 800c7c6:	6279      	str	r1, [r7, #36]	; 0x24
 800c7c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7cc:	b2d2      	uxtb	r2, r2
 800c7ce:	701a      	strb	r2, [r3, #0]
 800c7d0:	6a3b      	ldr	r3, [r7, #32]
 800c7d2:	09db      	lsrs	r3, r3, #7
 800c7d4:	623b      	str	r3, [r7, #32]
 800c7d6:	6a3b      	ldr	r3, [r7, #32]
 800c7d8:	2b7f      	cmp	r3, #127	; 0x7f
 800c7da:	d8f0      	bhi.n	800c7be <SEGGER_SYSVIEW_SendModule+0x66>
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7de:	1c5a      	adds	r2, r3, #1
 800c7e0:	627a      	str	r2, [r7, #36]	; 0x24
 800c7e2:	6a3a      	ldr	r2, [r7, #32]
 800c7e4:	b2d2      	uxtb	r2, r2
 800c7e6:	701a      	strb	r2, [r3, #0]
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	61fb      	str	r3, [r7, #28]
 800c7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	61bb      	str	r3, [r7, #24]
 800c7f6:	e00b      	b.n	800c810 <SEGGER_SYSVIEW_SendModule+0xb8>
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	1c59      	adds	r1, r3, #1
 800c800:	61f9      	str	r1, [r7, #28]
 800c802:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c806:	b2d2      	uxtb	r2, r2
 800c808:	701a      	strb	r2, [r3, #0]
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	09db      	lsrs	r3, r3, #7
 800c80e:	61bb      	str	r3, [r7, #24]
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	2b7f      	cmp	r3, #127	; 0x7f
 800c814:	d8f0      	bhi.n	800c7f8 <SEGGER_SYSVIEW_SendModule+0xa0>
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	1c5a      	adds	r2, r3, #1
 800c81a:	61fa      	str	r2, [r7, #28]
 800c81c:	69ba      	ldr	r2, [r7, #24]
 800c81e:	b2d2      	uxtb	r2, r2
 800c820:	701a      	strb	r2, [r3, #0]
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2280      	movs	r2, #128	; 0x80
 800c82c:	4619      	mov	r1, r3
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f7fe fef6 	bl	800b620 <_EncodeStr>
 800c834:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800c836:	2216      	movs	r2, #22
 800c838:	68f9      	ldr	r1, [r7, #12]
 800c83a:	6938      	ldr	r0, [r7, #16]
 800c83c:	f7ff f82c 	bl	800b898 <_SendPacket>
      RECORD_END();
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800c846:	bf00      	nop
 800c848:	3730      	adds	r7, #48	; 0x30
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	20013dd8 	.word	0x20013dd8
 800c854:	20013de0 	.word	0x20013de0

0800c858 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800c85e:	4b0c      	ldr	r3, [pc, #48]	; (800c890 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00f      	beq.n	800c886 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800c866:	4b0a      	ldr	r3, [pc, #40]	; (800c890 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d002      	beq.n	800c87a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1f2      	bne.n	800c86c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800c886:	bf00      	nop
 800c888:	3708      	adds	r7, #8
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	20013dd8 	.word	0x20013dd8

0800c894 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800c89a:	f3ef 8311 	mrs	r3, BASEPRI
 800c89e:	f04f 0120 	mov.w	r1, #32
 800c8a2:	f381 8811 	msr	BASEPRI, r1
 800c8a6:	60fb      	str	r3, [r7, #12]
 800c8a8:	4817      	ldr	r0, [pc, #92]	; (800c908 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800c8aa:	f7fe ff06 	bl	800b6ba <_PreparePacket>
 800c8ae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	617b      	str	r3, [r7, #20]
 800c8b8:	4b14      	ldr	r3, [pc, #80]	; (800c90c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	613b      	str	r3, [r7, #16]
 800c8be:	e00b      	b.n	800c8d8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	b2da      	uxtb	r2, r3
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	1c59      	adds	r1, r3, #1
 800c8c8:	6179      	str	r1, [r7, #20]
 800c8ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c8ce:	b2d2      	uxtb	r2, r2
 800c8d0:	701a      	strb	r2, [r3, #0]
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	09db      	lsrs	r3, r3, #7
 800c8d6:	613b      	str	r3, [r7, #16]
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	2b7f      	cmp	r3, #127	; 0x7f
 800c8dc:	d8f0      	bhi.n	800c8c0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	1c5a      	adds	r2, r3, #1
 800c8e2:	617a      	str	r2, [r7, #20]
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	b2d2      	uxtb	r2, r2
 800c8e8:	701a      	strb	r2, [r3, #0]
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800c8ee:	221b      	movs	r2, #27
 800c8f0:	6879      	ldr	r1, [r7, #4]
 800c8f2:	68b8      	ldr	r0, [r7, #8]
 800c8f4:	f7fe ffd0 	bl	800b898 <_SendPacket>
  RECORD_END();
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f383 8811 	msr	BASEPRI, r3
}
 800c8fe:	bf00      	nop
 800c900:	3718      	adds	r7, #24
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	20013de0 	.word	0x20013de0
 800c90c:	20013ddc 	.word	0x20013ddc

0800c910 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800c910:	b580      	push	{r7, lr}
 800c912:	b08a      	sub	sp, #40	; 0x28
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c918:	f3ef 8311 	mrs	r3, BASEPRI
 800c91c:	f04f 0120 	mov.w	r1, #32
 800c920:	f381 8811 	msr	BASEPRI, r1
 800c924:	617b      	str	r3, [r7, #20]
 800c926:	4827      	ldr	r0, [pc, #156]	; (800c9c4 <SEGGER_SYSVIEW_Warn+0xb4>)
 800c928:	f7fe fec7 	bl	800b6ba <_PreparePacket>
 800c92c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c92e:	2280      	movs	r2, #128	; 0x80
 800c930:	6879      	ldr	r1, [r7, #4]
 800c932:	6938      	ldr	r0, [r7, #16]
 800c934:	f7fe fe74 	bl	800b620 <_EncodeStr>
 800c938:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	627b      	str	r3, [r7, #36]	; 0x24
 800c93e:	2301      	movs	r3, #1
 800c940:	623b      	str	r3, [r7, #32]
 800c942:	e00b      	b.n	800c95c <SEGGER_SYSVIEW_Warn+0x4c>
 800c944:	6a3b      	ldr	r3, [r7, #32]
 800c946:	b2da      	uxtb	r2, r3
 800c948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94a:	1c59      	adds	r1, r3, #1
 800c94c:	6279      	str	r1, [r7, #36]	; 0x24
 800c94e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c952:	b2d2      	uxtb	r2, r2
 800c954:	701a      	strb	r2, [r3, #0]
 800c956:	6a3b      	ldr	r3, [r7, #32]
 800c958:	09db      	lsrs	r3, r3, #7
 800c95a:	623b      	str	r3, [r7, #32]
 800c95c:	6a3b      	ldr	r3, [r7, #32]
 800c95e:	2b7f      	cmp	r3, #127	; 0x7f
 800c960:	d8f0      	bhi.n	800c944 <SEGGER_SYSVIEW_Warn+0x34>
 800c962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c964:	1c5a      	adds	r2, r3, #1
 800c966:	627a      	str	r2, [r7, #36]	; 0x24
 800c968:	6a3a      	ldr	r2, [r7, #32]
 800c96a:	b2d2      	uxtb	r2, r2
 800c96c:	701a      	strb	r2, [r3, #0]
 800c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c970:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	61fb      	str	r3, [r7, #28]
 800c976:	2300      	movs	r3, #0
 800c978:	61bb      	str	r3, [r7, #24]
 800c97a:	e00b      	b.n	800c994 <SEGGER_SYSVIEW_Warn+0x84>
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	b2da      	uxtb	r2, r3
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	1c59      	adds	r1, r3, #1
 800c984:	61f9      	str	r1, [r7, #28]
 800c986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c98a:	b2d2      	uxtb	r2, r2
 800c98c:	701a      	strb	r2, [r3, #0]
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	09db      	lsrs	r3, r3, #7
 800c992:	61bb      	str	r3, [r7, #24]
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	2b7f      	cmp	r3, #127	; 0x7f
 800c998:	d8f0      	bhi.n	800c97c <SEGGER_SYSVIEW_Warn+0x6c>
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	1c5a      	adds	r2, r3, #1
 800c99e:	61fa      	str	r2, [r7, #28]
 800c9a0:	69ba      	ldr	r2, [r7, #24]
 800c9a2:	b2d2      	uxtb	r2, r2
 800c9a4:	701a      	strb	r2, [r3, #0]
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800c9aa:	221a      	movs	r2, #26
 800c9ac:	68f9      	ldr	r1, [r7, #12]
 800c9ae:	6938      	ldr	r0, [r7, #16]
 800c9b0:	f7fe ff72 	bl	800b898 <_SendPacket>
  RECORD_END();
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	f383 8811 	msr	BASEPRI, r3
}
 800c9ba:	bf00      	nop
 800c9bc:	3728      	adds	r7, #40	; 0x28
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	20013de0 	.word	0x20013de0

0800c9c8 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
 800c9d4:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800c9d6:	683a      	ldr	r2, [r7, #0]
 800c9d8:	6879      	ldr	r1, [r7, #4]
 800c9da:	2000      	movs	r0, #0
 800c9dc:	f7fe fdfa 	bl	800b5d4 <SEGGER_RTT_Write>
  return len;
 800c9e0:	683b      	ldr	r3, [r7, #0]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3710      	adds	r7, #16
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <atoi>:
 800c9ea:	220a      	movs	r2, #10
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	f000 b883 	b.w	800caf8 <strtol>
	...

0800c9f4 <_strtol_l.constprop.0>:
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9fa:	d001      	beq.n	800ca00 <_strtol_l.constprop.0+0xc>
 800c9fc:	2b24      	cmp	r3, #36	; 0x24
 800c9fe:	d906      	bls.n	800ca0e <_strtol_l.constprop.0+0x1a>
 800ca00:	f000 fe40 	bl	800d684 <__errno>
 800ca04:	2316      	movs	r3, #22
 800ca06:	6003      	str	r3, [r0, #0]
 800ca08:	2000      	movs	r0, #0
 800ca0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800caf4 <_strtol_l.constprop.0+0x100>
 800ca12:	460d      	mov	r5, r1
 800ca14:	462e      	mov	r6, r5
 800ca16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca1a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ca1e:	f017 0708 	ands.w	r7, r7, #8
 800ca22:	d1f7      	bne.n	800ca14 <_strtol_l.constprop.0+0x20>
 800ca24:	2c2d      	cmp	r4, #45	; 0x2d
 800ca26:	d132      	bne.n	800ca8e <_strtol_l.constprop.0+0x9a>
 800ca28:	782c      	ldrb	r4, [r5, #0]
 800ca2a:	2701      	movs	r7, #1
 800ca2c:	1cb5      	adds	r5, r6, #2
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d05b      	beq.n	800caea <_strtol_l.constprop.0+0xf6>
 800ca32:	2b10      	cmp	r3, #16
 800ca34:	d109      	bne.n	800ca4a <_strtol_l.constprop.0+0x56>
 800ca36:	2c30      	cmp	r4, #48	; 0x30
 800ca38:	d107      	bne.n	800ca4a <_strtol_l.constprop.0+0x56>
 800ca3a:	782c      	ldrb	r4, [r5, #0]
 800ca3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ca40:	2c58      	cmp	r4, #88	; 0x58
 800ca42:	d14d      	bne.n	800cae0 <_strtol_l.constprop.0+0xec>
 800ca44:	786c      	ldrb	r4, [r5, #1]
 800ca46:	2310      	movs	r3, #16
 800ca48:	3502      	adds	r5, #2
 800ca4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ca4e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca52:	f04f 0e00 	mov.w	lr, #0
 800ca56:	fbb8 f9f3 	udiv	r9, r8, r3
 800ca5a:	4676      	mov	r6, lr
 800ca5c:	fb03 8a19 	mls	sl, r3, r9, r8
 800ca60:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ca64:	f1bc 0f09 	cmp.w	ip, #9
 800ca68:	d816      	bhi.n	800ca98 <_strtol_l.constprop.0+0xa4>
 800ca6a:	4664      	mov	r4, ip
 800ca6c:	42a3      	cmp	r3, r4
 800ca6e:	dd24      	ble.n	800caba <_strtol_l.constprop.0+0xc6>
 800ca70:	f1be 3fff 	cmp.w	lr, #4294967295
 800ca74:	d008      	beq.n	800ca88 <_strtol_l.constprop.0+0x94>
 800ca76:	45b1      	cmp	r9, r6
 800ca78:	d31c      	bcc.n	800cab4 <_strtol_l.constprop.0+0xc0>
 800ca7a:	d101      	bne.n	800ca80 <_strtol_l.constprop.0+0x8c>
 800ca7c:	45a2      	cmp	sl, r4
 800ca7e:	db19      	blt.n	800cab4 <_strtol_l.constprop.0+0xc0>
 800ca80:	fb06 4603 	mla	r6, r6, r3, r4
 800ca84:	f04f 0e01 	mov.w	lr, #1
 800ca88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca8c:	e7e8      	b.n	800ca60 <_strtol_l.constprop.0+0x6c>
 800ca8e:	2c2b      	cmp	r4, #43	; 0x2b
 800ca90:	bf04      	itt	eq
 800ca92:	782c      	ldrbeq	r4, [r5, #0]
 800ca94:	1cb5      	addeq	r5, r6, #2
 800ca96:	e7ca      	b.n	800ca2e <_strtol_l.constprop.0+0x3a>
 800ca98:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ca9c:	f1bc 0f19 	cmp.w	ip, #25
 800caa0:	d801      	bhi.n	800caa6 <_strtol_l.constprop.0+0xb2>
 800caa2:	3c37      	subs	r4, #55	; 0x37
 800caa4:	e7e2      	b.n	800ca6c <_strtol_l.constprop.0+0x78>
 800caa6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800caaa:	f1bc 0f19 	cmp.w	ip, #25
 800caae:	d804      	bhi.n	800caba <_strtol_l.constprop.0+0xc6>
 800cab0:	3c57      	subs	r4, #87	; 0x57
 800cab2:	e7db      	b.n	800ca6c <_strtol_l.constprop.0+0x78>
 800cab4:	f04f 3eff 	mov.w	lr, #4294967295
 800cab8:	e7e6      	b.n	800ca88 <_strtol_l.constprop.0+0x94>
 800caba:	f1be 3fff 	cmp.w	lr, #4294967295
 800cabe:	d105      	bne.n	800cacc <_strtol_l.constprop.0+0xd8>
 800cac0:	2322      	movs	r3, #34	; 0x22
 800cac2:	6003      	str	r3, [r0, #0]
 800cac4:	4646      	mov	r6, r8
 800cac6:	b942      	cbnz	r2, 800cada <_strtol_l.constprop.0+0xe6>
 800cac8:	4630      	mov	r0, r6
 800caca:	e79e      	b.n	800ca0a <_strtol_l.constprop.0+0x16>
 800cacc:	b107      	cbz	r7, 800cad0 <_strtol_l.constprop.0+0xdc>
 800cace:	4276      	negs	r6, r6
 800cad0:	2a00      	cmp	r2, #0
 800cad2:	d0f9      	beq.n	800cac8 <_strtol_l.constprop.0+0xd4>
 800cad4:	f1be 0f00 	cmp.w	lr, #0
 800cad8:	d000      	beq.n	800cadc <_strtol_l.constprop.0+0xe8>
 800cada:	1e69      	subs	r1, r5, #1
 800cadc:	6011      	str	r1, [r2, #0]
 800cade:	e7f3      	b.n	800cac8 <_strtol_l.constprop.0+0xd4>
 800cae0:	2430      	movs	r4, #48	; 0x30
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1b1      	bne.n	800ca4a <_strtol_l.constprop.0+0x56>
 800cae6:	2308      	movs	r3, #8
 800cae8:	e7af      	b.n	800ca4a <_strtol_l.constprop.0+0x56>
 800caea:	2c30      	cmp	r4, #48	; 0x30
 800caec:	d0a5      	beq.n	800ca3a <_strtol_l.constprop.0+0x46>
 800caee:	230a      	movs	r3, #10
 800caf0:	e7ab      	b.n	800ca4a <_strtol_l.constprop.0+0x56>
 800caf2:	bf00      	nop
 800caf4:	080105b3 	.word	0x080105b3

0800caf8 <strtol>:
 800caf8:	4613      	mov	r3, r2
 800cafa:	460a      	mov	r2, r1
 800cafc:	4601      	mov	r1, r0
 800cafe:	4802      	ldr	r0, [pc, #8]	; (800cb08 <strtol+0x10>)
 800cb00:	6800      	ldr	r0, [r0, #0]
 800cb02:	f7ff bf77 	b.w	800c9f4 <_strtol_l.constprop.0>
 800cb06:	bf00      	nop
 800cb08:	200001dc 	.word	0x200001dc

0800cb0c <__cvt>:
 800cb0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb10:	ec55 4b10 	vmov	r4, r5, d0
 800cb14:	2d00      	cmp	r5, #0
 800cb16:	460e      	mov	r6, r1
 800cb18:	4619      	mov	r1, r3
 800cb1a:	462b      	mov	r3, r5
 800cb1c:	bfbb      	ittet	lt
 800cb1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cb22:	461d      	movlt	r5, r3
 800cb24:	2300      	movge	r3, #0
 800cb26:	232d      	movlt	r3, #45	; 0x2d
 800cb28:	700b      	strb	r3, [r1, #0]
 800cb2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cb30:	4691      	mov	r9, r2
 800cb32:	f023 0820 	bic.w	r8, r3, #32
 800cb36:	bfbc      	itt	lt
 800cb38:	4622      	movlt	r2, r4
 800cb3a:	4614      	movlt	r4, r2
 800cb3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb40:	d005      	beq.n	800cb4e <__cvt+0x42>
 800cb42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cb46:	d100      	bne.n	800cb4a <__cvt+0x3e>
 800cb48:	3601      	adds	r6, #1
 800cb4a:	2102      	movs	r1, #2
 800cb4c:	e000      	b.n	800cb50 <__cvt+0x44>
 800cb4e:	2103      	movs	r1, #3
 800cb50:	ab03      	add	r3, sp, #12
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	ab02      	add	r3, sp, #8
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	ec45 4b10 	vmov	d0, r4, r5
 800cb5c:	4653      	mov	r3, sl
 800cb5e:	4632      	mov	r2, r6
 800cb60:	f000 fe56 	bl	800d810 <_dtoa_r>
 800cb64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cb68:	4607      	mov	r7, r0
 800cb6a:	d102      	bne.n	800cb72 <__cvt+0x66>
 800cb6c:	f019 0f01 	tst.w	r9, #1
 800cb70:	d022      	beq.n	800cbb8 <__cvt+0xac>
 800cb72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb76:	eb07 0906 	add.w	r9, r7, r6
 800cb7a:	d110      	bne.n	800cb9e <__cvt+0x92>
 800cb7c:	783b      	ldrb	r3, [r7, #0]
 800cb7e:	2b30      	cmp	r3, #48	; 0x30
 800cb80:	d10a      	bne.n	800cb98 <__cvt+0x8c>
 800cb82:	2200      	movs	r2, #0
 800cb84:	2300      	movs	r3, #0
 800cb86:	4620      	mov	r0, r4
 800cb88:	4629      	mov	r1, r5
 800cb8a:	f7f4 f80d 	bl	8000ba8 <__aeabi_dcmpeq>
 800cb8e:	b918      	cbnz	r0, 800cb98 <__cvt+0x8c>
 800cb90:	f1c6 0601 	rsb	r6, r6, #1
 800cb94:	f8ca 6000 	str.w	r6, [sl]
 800cb98:	f8da 3000 	ldr.w	r3, [sl]
 800cb9c:	4499      	add	r9, r3
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2300      	movs	r3, #0
 800cba2:	4620      	mov	r0, r4
 800cba4:	4629      	mov	r1, r5
 800cba6:	f7f3 ffff 	bl	8000ba8 <__aeabi_dcmpeq>
 800cbaa:	b108      	cbz	r0, 800cbb0 <__cvt+0xa4>
 800cbac:	f8cd 900c 	str.w	r9, [sp, #12]
 800cbb0:	2230      	movs	r2, #48	; 0x30
 800cbb2:	9b03      	ldr	r3, [sp, #12]
 800cbb4:	454b      	cmp	r3, r9
 800cbb6:	d307      	bcc.n	800cbc8 <__cvt+0xbc>
 800cbb8:	9b03      	ldr	r3, [sp, #12]
 800cbba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbbc:	1bdb      	subs	r3, r3, r7
 800cbbe:	4638      	mov	r0, r7
 800cbc0:	6013      	str	r3, [r2, #0]
 800cbc2:	b004      	add	sp, #16
 800cbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc8:	1c59      	adds	r1, r3, #1
 800cbca:	9103      	str	r1, [sp, #12]
 800cbcc:	701a      	strb	r2, [r3, #0]
 800cbce:	e7f0      	b.n	800cbb2 <__cvt+0xa6>

0800cbd0 <__exponent>:
 800cbd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2900      	cmp	r1, #0
 800cbd6:	bfb8      	it	lt
 800cbd8:	4249      	neglt	r1, r1
 800cbda:	f803 2b02 	strb.w	r2, [r3], #2
 800cbde:	bfb4      	ite	lt
 800cbe0:	222d      	movlt	r2, #45	; 0x2d
 800cbe2:	222b      	movge	r2, #43	; 0x2b
 800cbe4:	2909      	cmp	r1, #9
 800cbe6:	7042      	strb	r2, [r0, #1]
 800cbe8:	dd2a      	ble.n	800cc40 <__exponent+0x70>
 800cbea:	f10d 0207 	add.w	r2, sp, #7
 800cbee:	4617      	mov	r7, r2
 800cbf0:	260a      	movs	r6, #10
 800cbf2:	4694      	mov	ip, r2
 800cbf4:	fb91 f5f6 	sdiv	r5, r1, r6
 800cbf8:	fb06 1415 	mls	r4, r6, r5, r1
 800cbfc:	3430      	adds	r4, #48	; 0x30
 800cbfe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cc02:	460c      	mov	r4, r1
 800cc04:	2c63      	cmp	r4, #99	; 0x63
 800cc06:	f102 32ff 	add.w	r2, r2, #4294967295
 800cc0a:	4629      	mov	r1, r5
 800cc0c:	dcf1      	bgt.n	800cbf2 <__exponent+0x22>
 800cc0e:	3130      	adds	r1, #48	; 0x30
 800cc10:	f1ac 0402 	sub.w	r4, ip, #2
 800cc14:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cc18:	1c41      	adds	r1, r0, #1
 800cc1a:	4622      	mov	r2, r4
 800cc1c:	42ba      	cmp	r2, r7
 800cc1e:	d30a      	bcc.n	800cc36 <__exponent+0x66>
 800cc20:	f10d 0209 	add.w	r2, sp, #9
 800cc24:	eba2 020c 	sub.w	r2, r2, ip
 800cc28:	42bc      	cmp	r4, r7
 800cc2a:	bf88      	it	hi
 800cc2c:	2200      	movhi	r2, #0
 800cc2e:	4413      	add	r3, r2
 800cc30:	1a18      	subs	r0, r3, r0
 800cc32:	b003      	add	sp, #12
 800cc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc36:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cc3a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cc3e:	e7ed      	b.n	800cc1c <__exponent+0x4c>
 800cc40:	2330      	movs	r3, #48	; 0x30
 800cc42:	3130      	adds	r1, #48	; 0x30
 800cc44:	7083      	strb	r3, [r0, #2]
 800cc46:	70c1      	strb	r1, [r0, #3]
 800cc48:	1d03      	adds	r3, r0, #4
 800cc4a:	e7f1      	b.n	800cc30 <__exponent+0x60>

0800cc4c <_printf_float>:
 800cc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc50:	ed2d 8b02 	vpush	{d8}
 800cc54:	b08d      	sub	sp, #52	; 0x34
 800cc56:	460c      	mov	r4, r1
 800cc58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cc5c:	4616      	mov	r6, r2
 800cc5e:	461f      	mov	r7, r3
 800cc60:	4605      	mov	r5, r0
 800cc62:	f000 fcd7 	bl	800d614 <_localeconv_r>
 800cc66:	f8d0 a000 	ldr.w	sl, [r0]
 800cc6a:	4650      	mov	r0, sl
 800cc6c:	f7f3 fb70 	bl	8000350 <strlen>
 800cc70:	2300      	movs	r3, #0
 800cc72:	930a      	str	r3, [sp, #40]	; 0x28
 800cc74:	6823      	ldr	r3, [r4, #0]
 800cc76:	9305      	str	r3, [sp, #20]
 800cc78:	f8d8 3000 	ldr.w	r3, [r8]
 800cc7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cc80:	3307      	adds	r3, #7
 800cc82:	f023 0307 	bic.w	r3, r3, #7
 800cc86:	f103 0208 	add.w	r2, r3, #8
 800cc8a:	f8c8 2000 	str.w	r2, [r8]
 800cc8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc96:	9307      	str	r3, [sp, #28]
 800cc98:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc9c:	ee08 0a10 	vmov	s16, r0
 800cca0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cca4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cca8:	4b9e      	ldr	r3, [pc, #632]	; (800cf24 <_printf_float+0x2d8>)
 800ccaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ccae:	f7f3 ffad 	bl	8000c0c <__aeabi_dcmpun>
 800ccb2:	bb88      	cbnz	r0, 800cd18 <_printf_float+0xcc>
 800ccb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccb8:	4b9a      	ldr	r3, [pc, #616]	; (800cf24 <_printf_float+0x2d8>)
 800ccba:	f04f 32ff 	mov.w	r2, #4294967295
 800ccbe:	f7f3 ff87 	bl	8000bd0 <__aeabi_dcmple>
 800ccc2:	bb48      	cbnz	r0, 800cd18 <_printf_float+0xcc>
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	4640      	mov	r0, r8
 800ccca:	4649      	mov	r1, r9
 800cccc:	f7f3 ff76 	bl	8000bbc <__aeabi_dcmplt>
 800ccd0:	b110      	cbz	r0, 800ccd8 <_printf_float+0x8c>
 800ccd2:	232d      	movs	r3, #45	; 0x2d
 800ccd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccd8:	4a93      	ldr	r2, [pc, #588]	; (800cf28 <_printf_float+0x2dc>)
 800ccda:	4b94      	ldr	r3, [pc, #592]	; (800cf2c <_printf_float+0x2e0>)
 800ccdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cce0:	bf94      	ite	ls
 800cce2:	4690      	movls	r8, r2
 800cce4:	4698      	movhi	r8, r3
 800cce6:	2303      	movs	r3, #3
 800cce8:	6123      	str	r3, [r4, #16]
 800ccea:	9b05      	ldr	r3, [sp, #20]
 800ccec:	f023 0304 	bic.w	r3, r3, #4
 800ccf0:	6023      	str	r3, [r4, #0]
 800ccf2:	f04f 0900 	mov.w	r9, #0
 800ccf6:	9700      	str	r7, [sp, #0]
 800ccf8:	4633      	mov	r3, r6
 800ccfa:	aa0b      	add	r2, sp, #44	; 0x2c
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	4628      	mov	r0, r5
 800cd00:	f000 f9da 	bl	800d0b8 <_printf_common>
 800cd04:	3001      	adds	r0, #1
 800cd06:	f040 8090 	bne.w	800ce2a <_printf_float+0x1de>
 800cd0a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd0e:	b00d      	add	sp, #52	; 0x34
 800cd10:	ecbd 8b02 	vpop	{d8}
 800cd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd18:	4642      	mov	r2, r8
 800cd1a:	464b      	mov	r3, r9
 800cd1c:	4640      	mov	r0, r8
 800cd1e:	4649      	mov	r1, r9
 800cd20:	f7f3 ff74 	bl	8000c0c <__aeabi_dcmpun>
 800cd24:	b140      	cbz	r0, 800cd38 <_printf_float+0xec>
 800cd26:	464b      	mov	r3, r9
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	bfbc      	itt	lt
 800cd2c:	232d      	movlt	r3, #45	; 0x2d
 800cd2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cd32:	4a7f      	ldr	r2, [pc, #508]	; (800cf30 <_printf_float+0x2e4>)
 800cd34:	4b7f      	ldr	r3, [pc, #508]	; (800cf34 <_printf_float+0x2e8>)
 800cd36:	e7d1      	b.n	800ccdc <_printf_float+0x90>
 800cd38:	6863      	ldr	r3, [r4, #4]
 800cd3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cd3e:	9206      	str	r2, [sp, #24]
 800cd40:	1c5a      	adds	r2, r3, #1
 800cd42:	d13f      	bne.n	800cdc4 <_printf_float+0x178>
 800cd44:	2306      	movs	r3, #6
 800cd46:	6063      	str	r3, [r4, #4]
 800cd48:	9b05      	ldr	r3, [sp, #20]
 800cd4a:	6861      	ldr	r1, [r4, #4]
 800cd4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cd50:	2300      	movs	r3, #0
 800cd52:	9303      	str	r3, [sp, #12]
 800cd54:	ab0a      	add	r3, sp, #40	; 0x28
 800cd56:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cd5a:	ab09      	add	r3, sp, #36	; 0x24
 800cd5c:	ec49 8b10 	vmov	d0, r8, r9
 800cd60:	9300      	str	r3, [sp, #0]
 800cd62:	6022      	str	r2, [r4, #0]
 800cd64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cd68:	4628      	mov	r0, r5
 800cd6a:	f7ff fecf 	bl	800cb0c <__cvt>
 800cd6e:	9b06      	ldr	r3, [sp, #24]
 800cd70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd72:	2b47      	cmp	r3, #71	; 0x47
 800cd74:	4680      	mov	r8, r0
 800cd76:	d108      	bne.n	800cd8a <_printf_float+0x13e>
 800cd78:	1cc8      	adds	r0, r1, #3
 800cd7a:	db02      	blt.n	800cd82 <_printf_float+0x136>
 800cd7c:	6863      	ldr	r3, [r4, #4]
 800cd7e:	4299      	cmp	r1, r3
 800cd80:	dd41      	ble.n	800ce06 <_printf_float+0x1ba>
 800cd82:	f1ab 0302 	sub.w	r3, fp, #2
 800cd86:	fa5f fb83 	uxtb.w	fp, r3
 800cd8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd8e:	d820      	bhi.n	800cdd2 <_printf_float+0x186>
 800cd90:	3901      	subs	r1, #1
 800cd92:	465a      	mov	r2, fp
 800cd94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd98:	9109      	str	r1, [sp, #36]	; 0x24
 800cd9a:	f7ff ff19 	bl	800cbd0 <__exponent>
 800cd9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cda0:	1813      	adds	r3, r2, r0
 800cda2:	2a01      	cmp	r2, #1
 800cda4:	4681      	mov	r9, r0
 800cda6:	6123      	str	r3, [r4, #16]
 800cda8:	dc02      	bgt.n	800cdb0 <_printf_float+0x164>
 800cdaa:	6822      	ldr	r2, [r4, #0]
 800cdac:	07d2      	lsls	r2, r2, #31
 800cdae:	d501      	bpl.n	800cdb4 <_printf_float+0x168>
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	6123      	str	r3, [r4, #16]
 800cdb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d09c      	beq.n	800ccf6 <_printf_float+0xaa>
 800cdbc:	232d      	movs	r3, #45	; 0x2d
 800cdbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdc2:	e798      	b.n	800ccf6 <_printf_float+0xaa>
 800cdc4:	9a06      	ldr	r2, [sp, #24]
 800cdc6:	2a47      	cmp	r2, #71	; 0x47
 800cdc8:	d1be      	bne.n	800cd48 <_printf_float+0xfc>
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1bc      	bne.n	800cd48 <_printf_float+0xfc>
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e7b9      	b.n	800cd46 <_printf_float+0xfa>
 800cdd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cdd6:	d118      	bne.n	800ce0a <_printf_float+0x1be>
 800cdd8:	2900      	cmp	r1, #0
 800cdda:	6863      	ldr	r3, [r4, #4]
 800cddc:	dd0b      	ble.n	800cdf6 <_printf_float+0x1aa>
 800cdde:	6121      	str	r1, [r4, #16]
 800cde0:	b913      	cbnz	r3, 800cde8 <_printf_float+0x19c>
 800cde2:	6822      	ldr	r2, [r4, #0]
 800cde4:	07d0      	lsls	r0, r2, #31
 800cde6:	d502      	bpl.n	800cdee <_printf_float+0x1a2>
 800cde8:	3301      	adds	r3, #1
 800cdea:	440b      	add	r3, r1
 800cdec:	6123      	str	r3, [r4, #16]
 800cdee:	65a1      	str	r1, [r4, #88]	; 0x58
 800cdf0:	f04f 0900 	mov.w	r9, #0
 800cdf4:	e7de      	b.n	800cdb4 <_printf_float+0x168>
 800cdf6:	b913      	cbnz	r3, 800cdfe <_printf_float+0x1b2>
 800cdf8:	6822      	ldr	r2, [r4, #0]
 800cdfa:	07d2      	lsls	r2, r2, #31
 800cdfc:	d501      	bpl.n	800ce02 <_printf_float+0x1b6>
 800cdfe:	3302      	adds	r3, #2
 800ce00:	e7f4      	b.n	800cdec <_printf_float+0x1a0>
 800ce02:	2301      	movs	r3, #1
 800ce04:	e7f2      	b.n	800cdec <_printf_float+0x1a0>
 800ce06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ce0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce0c:	4299      	cmp	r1, r3
 800ce0e:	db05      	blt.n	800ce1c <_printf_float+0x1d0>
 800ce10:	6823      	ldr	r3, [r4, #0]
 800ce12:	6121      	str	r1, [r4, #16]
 800ce14:	07d8      	lsls	r0, r3, #31
 800ce16:	d5ea      	bpl.n	800cdee <_printf_float+0x1a2>
 800ce18:	1c4b      	adds	r3, r1, #1
 800ce1a:	e7e7      	b.n	800cdec <_printf_float+0x1a0>
 800ce1c:	2900      	cmp	r1, #0
 800ce1e:	bfd4      	ite	le
 800ce20:	f1c1 0202 	rsble	r2, r1, #2
 800ce24:	2201      	movgt	r2, #1
 800ce26:	4413      	add	r3, r2
 800ce28:	e7e0      	b.n	800cdec <_printf_float+0x1a0>
 800ce2a:	6823      	ldr	r3, [r4, #0]
 800ce2c:	055a      	lsls	r2, r3, #21
 800ce2e:	d407      	bmi.n	800ce40 <_printf_float+0x1f4>
 800ce30:	6923      	ldr	r3, [r4, #16]
 800ce32:	4642      	mov	r2, r8
 800ce34:	4631      	mov	r1, r6
 800ce36:	4628      	mov	r0, r5
 800ce38:	47b8      	blx	r7
 800ce3a:	3001      	adds	r0, #1
 800ce3c:	d12c      	bne.n	800ce98 <_printf_float+0x24c>
 800ce3e:	e764      	b.n	800cd0a <_printf_float+0xbe>
 800ce40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce44:	f240 80e0 	bls.w	800d008 <_printf_float+0x3bc>
 800ce48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	2300      	movs	r3, #0
 800ce50:	f7f3 feaa 	bl	8000ba8 <__aeabi_dcmpeq>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d034      	beq.n	800cec2 <_printf_float+0x276>
 800ce58:	4a37      	ldr	r2, [pc, #220]	; (800cf38 <_printf_float+0x2ec>)
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	4631      	mov	r1, r6
 800ce5e:	4628      	mov	r0, r5
 800ce60:	47b8      	blx	r7
 800ce62:	3001      	adds	r0, #1
 800ce64:	f43f af51 	beq.w	800cd0a <_printf_float+0xbe>
 800ce68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	db02      	blt.n	800ce76 <_printf_float+0x22a>
 800ce70:	6823      	ldr	r3, [r4, #0]
 800ce72:	07d8      	lsls	r0, r3, #31
 800ce74:	d510      	bpl.n	800ce98 <_printf_float+0x24c>
 800ce76:	ee18 3a10 	vmov	r3, s16
 800ce7a:	4652      	mov	r2, sl
 800ce7c:	4631      	mov	r1, r6
 800ce7e:	4628      	mov	r0, r5
 800ce80:	47b8      	blx	r7
 800ce82:	3001      	adds	r0, #1
 800ce84:	f43f af41 	beq.w	800cd0a <_printf_float+0xbe>
 800ce88:	f04f 0800 	mov.w	r8, #0
 800ce8c:	f104 091a 	add.w	r9, r4, #26
 800ce90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce92:	3b01      	subs	r3, #1
 800ce94:	4543      	cmp	r3, r8
 800ce96:	dc09      	bgt.n	800ceac <_printf_float+0x260>
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	079b      	lsls	r3, r3, #30
 800ce9c:	f100 8107 	bmi.w	800d0ae <_printf_float+0x462>
 800cea0:	68e0      	ldr	r0, [r4, #12]
 800cea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cea4:	4298      	cmp	r0, r3
 800cea6:	bfb8      	it	lt
 800cea8:	4618      	movlt	r0, r3
 800ceaa:	e730      	b.n	800cd0e <_printf_float+0xc2>
 800ceac:	2301      	movs	r3, #1
 800ceae:	464a      	mov	r2, r9
 800ceb0:	4631      	mov	r1, r6
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	47b8      	blx	r7
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	f43f af27 	beq.w	800cd0a <_printf_float+0xbe>
 800cebc:	f108 0801 	add.w	r8, r8, #1
 800cec0:	e7e6      	b.n	800ce90 <_printf_float+0x244>
 800cec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	dc39      	bgt.n	800cf3c <_printf_float+0x2f0>
 800cec8:	4a1b      	ldr	r2, [pc, #108]	; (800cf38 <_printf_float+0x2ec>)
 800ceca:	2301      	movs	r3, #1
 800cecc:	4631      	mov	r1, r6
 800cece:	4628      	mov	r0, r5
 800ced0:	47b8      	blx	r7
 800ced2:	3001      	adds	r0, #1
 800ced4:	f43f af19 	beq.w	800cd0a <_printf_float+0xbe>
 800ced8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cedc:	4313      	orrs	r3, r2
 800cede:	d102      	bne.n	800cee6 <_printf_float+0x29a>
 800cee0:	6823      	ldr	r3, [r4, #0]
 800cee2:	07d9      	lsls	r1, r3, #31
 800cee4:	d5d8      	bpl.n	800ce98 <_printf_float+0x24c>
 800cee6:	ee18 3a10 	vmov	r3, s16
 800ceea:	4652      	mov	r2, sl
 800ceec:	4631      	mov	r1, r6
 800ceee:	4628      	mov	r0, r5
 800cef0:	47b8      	blx	r7
 800cef2:	3001      	adds	r0, #1
 800cef4:	f43f af09 	beq.w	800cd0a <_printf_float+0xbe>
 800cef8:	f04f 0900 	mov.w	r9, #0
 800cefc:	f104 0a1a 	add.w	sl, r4, #26
 800cf00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf02:	425b      	negs	r3, r3
 800cf04:	454b      	cmp	r3, r9
 800cf06:	dc01      	bgt.n	800cf0c <_printf_float+0x2c0>
 800cf08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf0a:	e792      	b.n	800ce32 <_printf_float+0x1e6>
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	4652      	mov	r2, sl
 800cf10:	4631      	mov	r1, r6
 800cf12:	4628      	mov	r0, r5
 800cf14:	47b8      	blx	r7
 800cf16:	3001      	adds	r0, #1
 800cf18:	f43f aef7 	beq.w	800cd0a <_printf_float+0xbe>
 800cf1c:	f109 0901 	add.w	r9, r9, #1
 800cf20:	e7ee      	b.n	800cf00 <_printf_float+0x2b4>
 800cf22:	bf00      	nop
 800cf24:	7fefffff 	.word	0x7fefffff
 800cf28:	080106b3 	.word	0x080106b3
 800cf2c:	080106b7 	.word	0x080106b7
 800cf30:	080106bb 	.word	0x080106bb
 800cf34:	080106bf 	.word	0x080106bf
 800cf38:	080106c3 	.word	0x080106c3
 800cf3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf40:	429a      	cmp	r2, r3
 800cf42:	bfa8      	it	ge
 800cf44:	461a      	movge	r2, r3
 800cf46:	2a00      	cmp	r2, #0
 800cf48:	4691      	mov	r9, r2
 800cf4a:	dc37      	bgt.n	800cfbc <_printf_float+0x370>
 800cf4c:	f04f 0b00 	mov.w	fp, #0
 800cf50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf54:	f104 021a 	add.w	r2, r4, #26
 800cf58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf5a:	9305      	str	r3, [sp, #20]
 800cf5c:	eba3 0309 	sub.w	r3, r3, r9
 800cf60:	455b      	cmp	r3, fp
 800cf62:	dc33      	bgt.n	800cfcc <_printf_float+0x380>
 800cf64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	db3b      	blt.n	800cfe4 <_printf_float+0x398>
 800cf6c:	6823      	ldr	r3, [r4, #0]
 800cf6e:	07da      	lsls	r2, r3, #31
 800cf70:	d438      	bmi.n	800cfe4 <_printf_float+0x398>
 800cf72:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cf76:	eba2 0903 	sub.w	r9, r2, r3
 800cf7a:	9b05      	ldr	r3, [sp, #20]
 800cf7c:	1ad2      	subs	r2, r2, r3
 800cf7e:	4591      	cmp	r9, r2
 800cf80:	bfa8      	it	ge
 800cf82:	4691      	movge	r9, r2
 800cf84:	f1b9 0f00 	cmp.w	r9, #0
 800cf88:	dc35      	bgt.n	800cff6 <_printf_float+0x3aa>
 800cf8a:	f04f 0800 	mov.w	r8, #0
 800cf8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf92:	f104 0a1a 	add.w	sl, r4, #26
 800cf96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf9a:	1a9b      	subs	r3, r3, r2
 800cf9c:	eba3 0309 	sub.w	r3, r3, r9
 800cfa0:	4543      	cmp	r3, r8
 800cfa2:	f77f af79 	ble.w	800ce98 <_printf_float+0x24c>
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	4652      	mov	r2, sl
 800cfaa:	4631      	mov	r1, r6
 800cfac:	4628      	mov	r0, r5
 800cfae:	47b8      	blx	r7
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	f43f aeaa 	beq.w	800cd0a <_printf_float+0xbe>
 800cfb6:	f108 0801 	add.w	r8, r8, #1
 800cfba:	e7ec      	b.n	800cf96 <_printf_float+0x34a>
 800cfbc:	4613      	mov	r3, r2
 800cfbe:	4631      	mov	r1, r6
 800cfc0:	4642      	mov	r2, r8
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	47b8      	blx	r7
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	d1c0      	bne.n	800cf4c <_printf_float+0x300>
 800cfca:	e69e      	b.n	800cd0a <_printf_float+0xbe>
 800cfcc:	2301      	movs	r3, #1
 800cfce:	4631      	mov	r1, r6
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	9205      	str	r2, [sp, #20]
 800cfd4:	47b8      	blx	r7
 800cfd6:	3001      	adds	r0, #1
 800cfd8:	f43f ae97 	beq.w	800cd0a <_printf_float+0xbe>
 800cfdc:	9a05      	ldr	r2, [sp, #20]
 800cfde:	f10b 0b01 	add.w	fp, fp, #1
 800cfe2:	e7b9      	b.n	800cf58 <_printf_float+0x30c>
 800cfe4:	ee18 3a10 	vmov	r3, s16
 800cfe8:	4652      	mov	r2, sl
 800cfea:	4631      	mov	r1, r6
 800cfec:	4628      	mov	r0, r5
 800cfee:	47b8      	blx	r7
 800cff0:	3001      	adds	r0, #1
 800cff2:	d1be      	bne.n	800cf72 <_printf_float+0x326>
 800cff4:	e689      	b.n	800cd0a <_printf_float+0xbe>
 800cff6:	9a05      	ldr	r2, [sp, #20]
 800cff8:	464b      	mov	r3, r9
 800cffa:	4442      	add	r2, r8
 800cffc:	4631      	mov	r1, r6
 800cffe:	4628      	mov	r0, r5
 800d000:	47b8      	blx	r7
 800d002:	3001      	adds	r0, #1
 800d004:	d1c1      	bne.n	800cf8a <_printf_float+0x33e>
 800d006:	e680      	b.n	800cd0a <_printf_float+0xbe>
 800d008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d00a:	2a01      	cmp	r2, #1
 800d00c:	dc01      	bgt.n	800d012 <_printf_float+0x3c6>
 800d00e:	07db      	lsls	r3, r3, #31
 800d010:	d53a      	bpl.n	800d088 <_printf_float+0x43c>
 800d012:	2301      	movs	r3, #1
 800d014:	4642      	mov	r2, r8
 800d016:	4631      	mov	r1, r6
 800d018:	4628      	mov	r0, r5
 800d01a:	47b8      	blx	r7
 800d01c:	3001      	adds	r0, #1
 800d01e:	f43f ae74 	beq.w	800cd0a <_printf_float+0xbe>
 800d022:	ee18 3a10 	vmov	r3, s16
 800d026:	4652      	mov	r2, sl
 800d028:	4631      	mov	r1, r6
 800d02a:	4628      	mov	r0, r5
 800d02c:	47b8      	blx	r7
 800d02e:	3001      	adds	r0, #1
 800d030:	f43f ae6b 	beq.w	800cd0a <_printf_float+0xbe>
 800d034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d038:	2200      	movs	r2, #0
 800d03a:	2300      	movs	r3, #0
 800d03c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d040:	f7f3 fdb2 	bl	8000ba8 <__aeabi_dcmpeq>
 800d044:	b9d8      	cbnz	r0, 800d07e <_printf_float+0x432>
 800d046:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d04a:	f108 0201 	add.w	r2, r8, #1
 800d04e:	4631      	mov	r1, r6
 800d050:	4628      	mov	r0, r5
 800d052:	47b8      	blx	r7
 800d054:	3001      	adds	r0, #1
 800d056:	d10e      	bne.n	800d076 <_printf_float+0x42a>
 800d058:	e657      	b.n	800cd0a <_printf_float+0xbe>
 800d05a:	2301      	movs	r3, #1
 800d05c:	4652      	mov	r2, sl
 800d05e:	4631      	mov	r1, r6
 800d060:	4628      	mov	r0, r5
 800d062:	47b8      	blx	r7
 800d064:	3001      	adds	r0, #1
 800d066:	f43f ae50 	beq.w	800cd0a <_printf_float+0xbe>
 800d06a:	f108 0801 	add.w	r8, r8, #1
 800d06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d070:	3b01      	subs	r3, #1
 800d072:	4543      	cmp	r3, r8
 800d074:	dcf1      	bgt.n	800d05a <_printf_float+0x40e>
 800d076:	464b      	mov	r3, r9
 800d078:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d07c:	e6da      	b.n	800ce34 <_printf_float+0x1e8>
 800d07e:	f04f 0800 	mov.w	r8, #0
 800d082:	f104 0a1a 	add.w	sl, r4, #26
 800d086:	e7f2      	b.n	800d06e <_printf_float+0x422>
 800d088:	2301      	movs	r3, #1
 800d08a:	4642      	mov	r2, r8
 800d08c:	e7df      	b.n	800d04e <_printf_float+0x402>
 800d08e:	2301      	movs	r3, #1
 800d090:	464a      	mov	r2, r9
 800d092:	4631      	mov	r1, r6
 800d094:	4628      	mov	r0, r5
 800d096:	47b8      	blx	r7
 800d098:	3001      	adds	r0, #1
 800d09a:	f43f ae36 	beq.w	800cd0a <_printf_float+0xbe>
 800d09e:	f108 0801 	add.w	r8, r8, #1
 800d0a2:	68e3      	ldr	r3, [r4, #12]
 800d0a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d0a6:	1a5b      	subs	r3, r3, r1
 800d0a8:	4543      	cmp	r3, r8
 800d0aa:	dcf0      	bgt.n	800d08e <_printf_float+0x442>
 800d0ac:	e6f8      	b.n	800cea0 <_printf_float+0x254>
 800d0ae:	f04f 0800 	mov.w	r8, #0
 800d0b2:	f104 0919 	add.w	r9, r4, #25
 800d0b6:	e7f4      	b.n	800d0a2 <_printf_float+0x456>

0800d0b8 <_printf_common>:
 800d0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0bc:	4616      	mov	r6, r2
 800d0be:	4699      	mov	r9, r3
 800d0c0:	688a      	ldr	r2, [r1, #8]
 800d0c2:	690b      	ldr	r3, [r1, #16]
 800d0c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	bfb8      	it	lt
 800d0cc:	4613      	movlt	r3, r2
 800d0ce:	6033      	str	r3, [r6, #0]
 800d0d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0d4:	4607      	mov	r7, r0
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	b10a      	cbz	r2, 800d0de <_printf_common+0x26>
 800d0da:	3301      	adds	r3, #1
 800d0dc:	6033      	str	r3, [r6, #0]
 800d0de:	6823      	ldr	r3, [r4, #0]
 800d0e0:	0699      	lsls	r1, r3, #26
 800d0e2:	bf42      	ittt	mi
 800d0e4:	6833      	ldrmi	r3, [r6, #0]
 800d0e6:	3302      	addmi	r3, #2
 800d0e8:	6033      	strmi	r3, [r6, #0]
 800d0ea:	6825      	ldr	r5, [r4, #0]
 800d0ec:	f015 0506 	ands.w	r5, r5, #6
 800d0f0:	d106      	bne.n	800d100 <_printf_common+0x48>
 800d0f2:	f104 0a19 	add.w	sl, r4, #25
 800d0f6:	68e3      	ldr	r3, [r4, #12]
 800d0f8:	6832      	ldr	r2, [r6, #0]
 800d0fa:	1a9b      	subs	r3, r3, r2
 800d0fc:	42ab      	cmp	r3, r5
 800d0fe:	dc26      	bgt.n	800d14e <_printf_common+0x96>
 800d100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d104:	1e13      	subs	r3, r2, #0
 800d106:	6822      	ldr	r2, [r4, #0]
 800d108:	bf18      	it	ne
 800d10a:	2301      	movne	r3, #1
 800d10c:	0692      	lsls	r2, r2, #26
 800d10e:	d42b      	bmi.n	800d168 <_printf_common+0xb0>
 800d110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d114:	4649      	mov	r1, r9
 800d116:	4638      	mov	r0, r7
 800d118:	47c0      	blx	r8
 800d11a:	3001      	adds	r0, #1
 800d11c:	d01e      	beq.n	800d15c <_printf_common+0xa4>
 800d11e:	6823      	ldr	r3, [r4, #0]
 800d120:	6922      	ldr	r2, [r4, #16]
 800d122:	f003 0306 	and.w	r3, r3, #6
 800d126:	2b04      	cmp	r3, #4
 800d128:	bf02      	ittt	eq
 800d12a:	68e5      	ldreq	r5, [r4, #12]
 800d12c:	6833      	ldreq	r3, [r6, #0]
 800d12e:	1aed      	subeq	r5, r5, r3
 800d130:	68a3      	ldr	r3, [r4, #8]
 800d132:	bf0c      	ite	eq
 800d134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d138:	2500      	movne	r5, #0
 800d13a:	4293      	cmp	r3, r2
 800d13c:	bfc4      	itt	gt
 800d13e:	1a9b      	subgt	r3, r3, r2
 800d140:	18ed      	addgt	r5, r5, r3
 800d142:	2600      	movs	r6, #0
 800d144:	341a      	adds	r4, #26
 800d146:	42b5      	cmp	r5, r6
 800d148:	d11a      	bne.n	800d180 <_printf_common+0xc8>
 800d14a:	2000      	movs	r0, #0
 800d14c:	e008      	b.n	800d160 <_printf_common+0xa8>
 800d14e:	2301      	movs	r3, #1
 800d150:	4652      	mov	r2, sl
 800d152:	4649      	mov	r1, r9
 800d154:	4638      	mov	r0, r7
 800d156:	47c0      	blx	r8
 800d158:	3001      	adds	r0, #1
 800d15a:	d103      	bne.n	800d164 <_printf_common+0xac>
 800d15c:	f04f 30ff 	mov.w	r0, #4294967295
 800d160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d164:	3501      	adds	r5, #1
 800d166:	e7c6      	b.n	800d0f6 <_printf_common+0x3e>
 800d168:	18e1      	adds	r1, r4, r3
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	2030      	movs	r0, #48	; 0x30
 800d16e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d172:	4422      	add	r2, r4
 800d174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d17c:	3302      	adds	r3, #2
 800d17e:	e7c7      	b.n	800d110 <_printf_common+0x58>
 800d180:	2301      	movs	r3, #1
 800d182:	4622      	mov	r2, r4
 800d184:	4649      	mov	r1, r9
 800d186:	4638      	mov	r0, r7
 800d188:	47c0      	blx	r8
 800d18a:	3001      	adds	r0, #1
 800d18c:	d0e6      	beq.n	800d15c <_printf_common+0xa4>
 800d18e:	3601      	adds	r6, #1
 800d190:	e7d9      	b.n	800d146 <_printf_common+0x8e>
	...

0800d194 <_printf_i>:
 800d194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d198:	7e0f      	ldrb	r7, [r1, #24]
 800d19a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d19c:	2f78      	cmp	r7, #120	; 0x78
 800d19e:	4691      	mov	r9, r2
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	469a      	mov	sl, r3
 800d1a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d1aa:	d807      	bhi.n	800d1bc <_printf_i+0x28>
 800d1ac:	2f62      	cmp	r7, #98	; 0x62
 800d1ae:	d80a      	bhi.n	800d1c6 <_printf_i+0x32>
 800d1b0:	2f00      	cmp	r7, #0
 800d1b2:	f000 80d4 	beq.w	800d35e <_printf_i+0x1ca>
 800d1b6:	2f58      	cmp	r7, #88	; 0x58
 800d1b8:	f000 80c0 	beq.w	800d33c <_printf_i+0x1a8>
 800d1bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1c4:	e03a      	b.n	800d23c <_printf_i+0xa8>
 800d1c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1ca:	2b15      	cmp	r3, #21
 800d1cc:	d8f6      	bhi.n	800d1bc <_printf_i+0x28>
 800d1ce:	a101      	add	r1, pc, #4	; (adr r1, 800d1d4 <_printf_i+0x40>)
 800d1d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1d4:	0800d22d 	.word	0x0800d22d
 800d1d8:	0800d241 	.word	0x0800d241
 800d1dc:	0800d1bd 	.word	0x0800d1bd
 800d1e0:	0800d1bd 	.word	0x0800d1bd
 800d1e4:	0800d1bd 	.word	0x0800d1bd
 800d1e8:	0800d1bd 	.word	0x0800d1bd
 800d1ec:	0800d241 	.word	0x0800d241
 800d1f0:	0800d1bd 	.word	0x0800d1bd
 800d1f4:	0800d1bd 	.word	0x0800d1bd
 800d1f8:	0800d1bd 	.word	0x0800d1bd
 800d1fc:	0800d1bd 	.word	0x0800d1bd
 800d200:	0800d345 	.word	0x0800d345
 800d204:	0800d26d 	.word	0x0800d26d
 800d208:	0800d2ff 	.word	0x0800d2ff
 800d20c:	0800d1bd 	.word	0x0800d1bd
 800d210:	0800d1bd 	.word	0x0800d1bd
 800d214:	0800d367 	.word	0x0800d367
 800d218:	0800d1bd 	.word	0x0800d1bd
 800d21c:	0800d26d 	.word	0x0800d26d
 800d220:	0800d1bd 	.word	0x0800d1bd
 800d224:	0800d1bd 	.word	0x0800d1bd
 800d228:	0800d307 	.word	0x0800d307
 800d22c:	682b      	ldr	r3, [r5, #0]
 800d22e:	1d1a      	adds	r2, r3, #4
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	602a      	str	r2, [r5, #0]
 800d234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d23c:	2301      	movs	r3, #1
 800d23e:	e09f      	b.n	800d380 <_printf_i+0x1ec>
 800d240:	6820      	ldr	r0, [r4, #0]
 800d242:	682b      	ldr	r3, [r5, #0]
 800d244:	0607      	lsls	r7, r0, #24
 800d246:	f103 0104 	add.w	r1, r3, #4
 800d24a:	6029      	str	r1, [r5, #0]
 800d24c:	d501      	bpl.n	800d252 <_printf_i+0xbe>
 800d24e:	681e      	ldr	r6, [r3, #0]
 800d250:	e003      	b.n	800d25a <_printf_i+0xc6>
 800d252:	0646      	lsls	r6, r0, #25
 800d254:	d5fb      	bpl.n	800d24e <_printf_i+0xba>
 800d256:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d25a:	2e00      	cmp	r6, #0
 800d25c:	da03      	bge.n	800d266 <_printf_i+0xd2>
 800d25e:	232d      	movs	r3, #45	; 0x2d
 800d260:	4276      	negs	r6, r6
 800d262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d266:	485a      	ldr	r0, [pc, #360]	; (800d3d0 <_printf_i+0x23c>)
 800d268:	230a      	movs	r3, #10
 800d26a:	e012      	b.n	800d292 <_printf_i+0xfe>
 800d26c:	682b      	ldr	r3, [r5, #0]
 800d26e:	6820      	ldr	r0, [r4, #0]
 800d270:	1d19      	adds	r1, r3, #4
 800d272:	6029      	str	r1, [r5, #0]
 800d274:	0605      	lsls	r5, r0, #24
 800d276:	d501      	bpl.n	800d27c <_printf_i+0xe8>
 800d278:	681e      	ldr	r6, [r3, #0]
 800d27a:	e002      	b.n	800d282 <_printf_i+0xee>
 800d27c:	0641      	lsls	r1, r0, #25
 800d27e:	d5fb      	bpl.n	800d278 <_printf_i+0xe4>
 800d280:	881e      	ldrh	r6, [r3, #0]
 800d282:	4853      	ldr	r0, [pc, #332]	; (800d3d0 <_printf_i+0x23c>)
 800d284:	2f6f      	cmp	r7, #111	; 0x6f
 800d286:	bf0c      	ite	eq
 800d288:	2308      	moveq	r3, #8
 800d28a:	230a      	movne	r3, #10
 800d28c:	2100      	movs	r1, #0
 800d28e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d292:	6865      	ldr	r5, [r4, #4]
 800d294:	60a5      	str	r5, [r4, #8]
 800d296:	2d00      	cmp	r5, #0
 800d298:	bfa2      	ittt	ge
 800d29a:	6821      	ldrge	r1, [r4, #0]
 800d29c:	f021 0104 	bicge.w	r1, r1, #4
 800d2a0:	6021      	strge	r1, [r4, #0]
 800d2a2:	b90e      	cbnz	r6, 800d2a8 <_printf_i+0x114>
 800d2a4:	2d00      	cmp	r5, #0
 800d2a6:	d04b      	beq.n	800d340 <_printf_i+0x1ac>
 800d2a8:	4615      	mov	r5, r2
 800d2aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800d2ae:	fb03 6711 	mls	r7, r3, r1, r6
 800d2b2:	5dc7      	ldrb	r7, [r0, r7]
 800d2b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d2b8:	4637      	mov	r7, r6
 800d2ba:	42bb      	cmp	r3, r7
 800d2bc:	460e      	mov	r6, r1
 800d2be:	d9f4      	bls.n	800d2aa <_printf_i+0x116>
 800d2c0:	2b08      	cmp	r3, #8
 800d2c2:	d10b      	bne.n	800d2dc <_printf_i+0x148>
 800d2c4:	6823      	ldr	r3, [r4, #0]
 800d2c6:	07de      	lsls	r6, r3, #31
 800d2c8:	d508      	bpl.n	800d2dc <_printf_i+0x148>
 800d2ca:	6923      	ldr	r3, [r4, #16]
 800d2cc:	6861      	ldr	r1, [r4, #4]
 800d2ce:	4299      	cmp	r1, r3
 800d2d0:	bfde      	ittt	le
 800d2d2:	2330      	movle	r3, #48	; 0x30
 800d2d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d2dc:	1b52      	subs	r2, r2, r5
 800d2de:	6122      	str	r2, [r4, #16]
 800d2e0:	f8cd a000 	str.w	sl, [sp]
 800d2e4:	464b      	mov	r3, r9
 800d2e6:	aa03      	add	r2, sp, #12
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	4640      	mov	r0, r8
 800d2ec:	f7ff fee4 	bl	800d0b8 <_printf_common>
 800d2f0:	3001      	adds	r0, #1
 800d2f2:	d14a      	bne.n	800d38a <_printf_i+0x1f6>
 800d2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f8:	b004      	add	sp, #16
 800d2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	f043 0320 	orr.w	r3, r3, #32
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	4833      	ldr	r0, [pc, #204]	; (800d3d4 <_printf_i+0x240>)
 800d308:	2778      	movs	r7, #120	; 0x78
 800d30a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d30e:	6823      	ldr	r3, [r4, #0]
 800d310:	6829      	ldr	r1, [r5, #0]
 800d312:	061f      	lsls	r7, r3, #24
 800d314:	f851 6b04 	ldr.w	r6, [r1], #4
 800d318:	d402      	bmi.n	800d320 <_printf_i+0x18c>
 800d31a:	065f      	lsls	r7, r3, #25
 800d31c:	bf48      	it	mi
 800d31e:	b2b6      	uxthmi	r6, r6
 800d320:	07df      	lsls	r7, r3, #31
 800d322:	bf48      	it	mi
 800d324:	f043 0320 	orrmi.w	r3, r3, #32
 800d328:	6029      	str	r1, [r5, #0]
 800d32a:	bf48      	it	mi
 800d32c:	6023      	strmi	r3, [r4, #0]
 800d32e:	b91e      	cbnz	r6, 800d338 <_printf_i+0x1a4>
 800d330:	6823      	ldr	r3, [r4, #0]
 800d332:	f023 0320 	bic.w	r3, r3, #32
 800d336:	6023      	str	r3, [r4, #0]
 800d338:	2310      	movs	r3, #16
 800d33a:	e7a7      	b.n	800d28c <_printf_i+0xf8>
 800d33c:	4824      	ldr	r0, [pc, #144]	; (800d3d0 <_printf_i+0x23c>)
 800d33e:	e7e4      	b.n	800d30a <_printf_i+0x176>
 800d340:	4615      	mov	r5, r2
 800d342:	e7bd      	b.n	800d2c0 <_printf_i+0x12c>
 800d344:	682b      	ldr	r3, [r5, #0]
 800d346:	6826      	ldr	r6, [r4, #0]
 800d348:	6961      	ldr	r1, [r4, #20]
 800d34a:	1d18      	adds	r0, r3, #4
 800d34c:	6028      	str	r0, [r5, #0]
 800d34e:	0635      	lsls	r5, r6, #24
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	d501      	bpl.n	800d358 <_printf_i+0x1c4>
 800d354:	6019      	str	r1, [r3, #0]
 800d356:	e002      	b.n	800d35e <_printf_i+0x1ca>
 800d358:	0670      	lsls	r0, r6, #25
 800d35a:	d5fb      	bpl.n	800d354 <_printf_i+0x1c0>
 800d35c:	8019      	strh	r1, [r3, #0]
 800d35e:	2300      	movs	r3, #0
 800d360:	6123      	str	r3, [r4, #16]
 800d362:	4615      	mov	r5, r2
 800d364:	e7bc      	b.n	800d2e0 <_printf_i+0x14c>
 800d366:	682b      	ldr	r3, [r5, #0]
 800d368:	1d1a      	adds	r2, r3, #4
 800d36a:	602a      	str	r2, [r5, #0]
 800d36c:	681d      	ldr	r5, [r3, #0]
 800d36e:	6862      	ldr	r2, [r4, #4]
 800d370:	2100      	movs	r1, #0
 800d372:	4628      	mov	r0, r5
 800d374:	f7f2 ff9c 	bl	80002b0 <memchr>
 800d378:	b108      	cbz	r0, 800d37e <_printf_i+0x1ea>
 800d37a:	1b40      	subs	r0, r0, r5
 800d37c:	6060      	str	r0, [r4, #4]
 800d37e:	6863      	ldr	r3, [r4, #4]
 800d380:	6123      	str	r3, [r4, #16]
 800d382:	2300      	movs	r3, #0
 800d384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d388:	e7aa      	b.n	800d2e0 <_printf_i+0x14c>
 800d38a:	6923      	ldr	r3, [r4, #16]
 800d38c:	462a      	mov	r2, r5
 800d38e:	4649      	mov	r1, r9
 800d390:	4640      	mov	r0, r8
 800d392:	47d0      	blx	sl
 800d394:	3001      	adds	r0, #1
 800d396:	d0ad      	beq.n	800d2f4 <_printf_i+0x160>
 800d398:	6823      	ldr	r3, [r4, #0]
 800d39a:	079b      	lsls	r3, r3, #30
 800d39c:	d413      	bmi.n	800d3c6 <_printf_i+0x232>
 800d39e:	68e0      	ldr	r0, [r4, #12]
 800d3a0:	9b03      	ldr	r3, [sp, #12]
 800d3a2:	4298      	cmp	r0, r3
 800d3a4:	bfb8      	it	lt
 800d3a6:	4618      	movlt	r0, r3
 800d3a8:	e7a6      	b.n	800d2f8 <_printf_i+0x164>
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	4632      	mov	r2, r6
 800d3ae:	4649      	mov	r1, r9
 800d3b0:	4640      	mov	r0, r8
 800d3b2:	47d0      	blx	sl
 800d3b4:	3001      	adds	r0, #1
 800d3b6:	d09d      	beq.n	800d2f4 <_printf_i+0x160>
 800d3b8:	3501      	adds	r5, #1
 800d3ba:	68e3      	ldr	r3, [r4, #12]
 800d3bc:	9903      	ldr	r1, [sp, #12]
 800d3be:	1a5b      	subs	r3, r3, r1
 800d3c0:	42ab      	cmp	r3, r5
 800d3c2:	dcf2      	bgt.n	800d3aa <_printf_i+0x216>
 800d3c4:	e7eb      	b.n	800d39e <_printf_i+0x20a>
 800d3c6:	2500      	movs	r5, #0
 800d3c8:	f104 0619 	add.w	r6, r4, #25
 800d3cc:	e7f5      	b.n	800d3ba <_printf_i+0x226>
 800d3ce:	bf00      	nop
 800d3d0:	080106c5 	.word	0x080106c5
 800d3d4:	080106d6 	.word	0x080106d6

0800d3d8 <std>:
 800d3d8:	2300      	movs	r3, #0
 800d3da:	b510      	push	{r4, lr}
 800d3dc:	4604      	mov	r4, r0
 800d3de:	e9c0 3300 	strd	r3, r3, [r0]
 800d3e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3e6:	6083      	str	r3, [r0, #8]
 800d3e8:	8181      	strh	r1, [r0, #12]
 800d3ea:	6643      	str	r3, [r0, #100]	; 0x64
 800d3ec:	81c2      	strh	r2, [r0, #14]
 800d3ee:	6183      	str	r3, [r0, #24]
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	2208      	movs	r2, #8
 800d3f4:	305c      	adds	r0, #92	; 0x5c
 800d3f6:	f000 f904 	bl	800d602 <memset>
 800d3fa:	4b0d      	ldr	r3, [pc, #52]	; (800d430 <std+0x58>)
 800d3fc:	6263      	str	r3, [r4, #36]	; 0x24
 800d3fe:	4b0d      	ldr	r3, [pc, #52]	; (800d434 <std+0x5c>)
 800d400:	62a3      	str	r3, [r4, #40]	; 0x28
 800d402:	4b0d      	ldr	r3, [pc, #52]	; (800d438 <std+0x60>)
 800d404:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d406:	4b0d      	ldr	r3, [pc, #52]	; (800d43c <std+0x64>)
 800d408:	6323      	str	r3, [r4, #48]	; 0x30
 800d40a:	4b0d      	ldr	r3, [pc, #52]	; (800d440 <std+0x68>)
 800d40c:	6224      	str	r4, [r4, #32]
 800d40e:	429c      	cmp	r4, r3
 800d410:	d006      	beq.n	800d420 <std+0x48>
 800d412:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d416:	4294      	cmp	r4, r2
 800d418:	d002      	beq.n	800d420 <std+0x48>
 800d41a:	33d0      	adds	r3, #208	; 0xd0
 800d41c:	429c      	cmp	r4, r3
 800d41e:	d105      	bne.n	800d42c <std+0x54>
 800d420:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d428:	f000 b956 	b.w	800d6d8 <__retarget_lock_init_recursive>
 800d42c:	bd10      	pop	{r4, pc}
 800d42e:	bf00      	nop
 800d430:	0800d55d 	.word	0x0800d55d
 800d434:	0800d57f 	.word	0x0800d57f
 800d438:	0800d5b7 	.word	0x0800d5b7
 800d43c:	0800d5db 	.word	0x0800d5db
 800d440:	20013ec4 	.word	0x20013ec4

0800d444 <stdio_exit_handler>:
 800d444:	4a02      	ldr	r2, [pc, #8]	; (800d450 <stdio_exit_handler+0xc>)
 800d446:	4903      	ldr	r1, [pc, #12]	; (800d454 <stdio_exit_handler+0x10>)
 800d448:	4803      	ldr	r0, [pc, #12]	; (800d458 <stdio_exit_handler+0x14>)
 800d44a:	f000 b869 	b.w	800d520 <_fwalk_sglue>
 800d44e:	bf00      	nop
 800d450:	20000018 	.word	0x20000018
 800d454:	0800ee39 	.word	0x0800ee39
 800d458:	20000190 	.word	0x20000190

0800d45c <cleanup_stdio>:
 800d45c:	6841      	ldr	r1, [r0, #4]
 800d45e:	4b0c      	ldr	r3, [pc, #48]	; (800d490 <cleanup_stdio+0x34>)
 800d460:	4299      	cmp	r1, r3
 800d462:	b510      	push	{r4, lr}
 800d464:	4604      	mov	r4, r0
 800d466:	d001      	beq.n	800d46c <cleanup_stdio+0x10>
 800d468:	f001 fce6 	bl	800ee38 <_fflush_r>
 800d46c:	68a1      	ldr	r1, [r4, #8]
 800d46e:	4b09      	ldr	r3, [pc, #36]	; (800d494 <cleanup_stdio+0x38>)
 800d470:	4299      	cmp	r1, r3
 800d472:	d002      	beq.n	800d47a <cleanup_stdio+0x1e>
 800d474:	4620      	mov	r0, r4
 800d476:	f001 fcdf 	bl	800ee38 <_fflush_r>
 800d47a:	68e1      	ldr	r1, [r4, #12]
 800d47c:	4b06      	ldr	r3, [pc, #24]	; (800d498 <cleanup_stdio+0x3c>)
 800d47e:	4299      	cmp	r1, r3
 800d480:	d004      	beq.n	800d48c <cleanup_stdio+0x30>
 800d482:	4620      	mov	r0, r4
 800d484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d488:	f001 bcd6 	b.w	800ee38 <_fflush_r>
 800d48c:	bd10      	pop	{r4, pc}
 800d48e:	bf00      	nop
 800d490:	20013ec4 	.word	0x20013ec4
 800d494:	20013f2c 	.word	0x20013f2c
 800d498:	20013f94 	.word	0x20013f94

0800d49c <global_stdio_init.part.0>:
 800d49c:	b510      	push	{r4, lr}
 800d49e:	4b0b      	ldr	r3, [pc, #44]	; (800d4cc <global_stdio_init.part.0+0x30>)
 800d4a0:	4c0b      	ldr	r4, [pc, #44]	; (800d4d0 <global_stdio_init.part.0+0x34>)
 800d4a2:	4a0c      	ldr	r2, [pc, #48]	; (800d4d4 <global_stdio_init.part.0+0x38>)
 800d4a4:	601a      	str	r2, [r3, #0]
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	2104      	movs	r1, #4
 800d4ac:	f7ff ff94 	bl	800d3d8 <std>
 800d4b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	2109      	movs	r1, #9
 800d4b8:	f7ff ff8e 	bl	800d3d8 <std>
 800d4bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d4c0:	2202      	movs	r2, #2
 800d4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4c6:	2112      	movs	r1, #18
 800d4c8:	f7ff bf86 	b.w	800d3d8 <std>
 800d4cc:	20013ffc 	.word	0x20013ffc
 800d4d0:	20013ec4 	.word	0x20013ec4
 800d4d4:	0800d445 	.word	0x0800d445

0800d4d8 <__sfp_lock_acquire>:
 800d4d8:	4801      	ldr	r0, [pc, #4]	; (800d4e0 <__sfp_lock_acquire+0x8>)
 800d4da:	f000 b8fe 	b.w	800d6da <__retarget_lock_acquire_recursive>
 800d4de:	bf00      	nop
 800d4e0:	20014005 	.word	0x20014005

0800d4e4 <__sfp_lock_release>:
 800d4e4:	4801      	ldr	r0, [pc, #4]	; (800d4ec <__sfp_lock_release+0x8>)
 800d4e6:	f000 b8f9 	b.w	800d6dc <__retarget_lock_release_recursive>
 800d4ea:	bf00      	nop
 800d4ec:	20014005 	.word	0x20014005

0800d4f0 <__sinit>:
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	f7ff fff0 	bl	800d4d8 <__sfp_lock_acquire>
 800d4f8:	6a23      	ldr	r3, [r4, #32]
 800d4fa:	b11b      	cbz	r3, 800d504 <__sinit+0x14>
 800d4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d500:	f7ff bff0 	b.w	800d4e4 <__sfp_lock_release>
 800d504:	4b04      	ldr	r3, [pc, #16]	; (800d518 <__sinit+0x28>)
 800d506:	6223      	str	r3, [r4, #32]
 800d508:	4b04      	ldr	r3, [pc, #16]	; (800d51c <__sinit+0x2c>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d1f5      	bne.n	800d4fc <__sinit+0xc>
 800d510:	f7ff ffc4 	bl	800d49c <global_stdio_init.part.0>
 800d514:	e7f2      	b.n	800d4fc <__sinit+0xc>
 800d516:	bf00      	nop
 800d518:	0800d45d 	.word	0x0800d45d
 800d51c:	20013ffc 	.word	0x20013ffc

0800d520 <_fwalk_sglue>:
 800d520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d524:	4607      	mov	r7, r0
 800d526:	4688      	mov	r8, r1
 800d528:	4614      	mov	r4, r2
 800d52a:	2600      	movs	r6, #0
 800d52c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d530:	f1b9 0901 	subs.w	r9, r9, #1
 800d534:	d505      	bpl.n	800d542 <_fwalk_sglue+0x22>
 800d536:	6824      	ldr	r4, [r4, #0]
 800d538:	2c00      	cmp	r4, #0
 800d53a:	d1f7      	bne.n	800d52c <_fwalk_sglue+0xc>
 800d53c:	4630      	mov	r0, r6
 800d53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d542:	89ab      	ldrh	r3, [r5, #12]
 800d544:	2b01      	cmp	r3, #1
 800d546:	d907      	bls.n	800d558 <_fwalk_sglue+0x38>
 800d548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d54c:	3301      	adds	r3, #1
 800d54e:	d003      	beq.n	800d558 <_fwalk_sglue+0x38>
 800d550:	4629      	mov	r1, r5
 800d552:	4638      	mov	r0, r7
 800d554:	47c0      	blx	r8
 800d556:	4306      	orrs	r6, r0
 800d558:	3568      	adds	r5, #104	; 0x68
 800d55a:	e7e9      	b.n	800d530 <_fwalk_sglue+0x10>

0800d55c <__sread>:
 800d55c:	b510      	push	{r4, lr}
 800d55e:	460c      	mov	r4, r1
 800d560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d564:	f000 f87c 	bl	800d660 <_read_r>
 800d568:	2800      	cmp	r0, #0
 800d56a:	bfab      	itete	ge
 800d56c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d56e:	89a3      	ldrhlt	r3, [r4, #12]
 800d570:	181b      	addge	r3, r3, r0
 800d572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d576:	bfac      	ite	ge
 800d578:	6563      	strge	r3, [r4, #84]	; 0x54
 800d57a:	81a3      	strhlt	r3, [r4, #12]
 800d57c:	bd10      	pop	{r4, pc}

0800d57e <__swrite>:
 800d57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d582:	461f      	mov	r7, r3
 800d584:	898b      	ldrh	r3, [r1, #12]
 800d586:	05db      	lsls	r3, r3, #23
 800d588:	4605      	mov	r5, r0
 800d58a:	460c      	mov	r4, r1
 800d58c:	4616      	mov	r6, r2
 800d58e:	d505      	bpl.n	800d59c <__swrite+0x1e>
 800d590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d594:	2302      	movs	r3, #2
 800d596:	2200      	movs	r2, #0
 800d598:	f000 f850 	bl	800d63c <_lseek_r>
 800d59c:	89a3      	ldrh	r3, [r4, #12]
 800d59e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5a6:	81a3      	strh	r3, [r4, #12]
 800d5a8:	4632      	mov	r2, r6
 800d5aa:	463b      	mov	r3, r7
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b2:	f7ff ba09 	b.w	800c9c8 <_write_r>

0800d5b6 <__sseek>:
 800d5b6:	b510      	push	{r4, lr}
 800d5b8:	460c      	mov	r4, r1
 800d5ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5be:	f000 f83d 	bl	800d63c <_lseek_r>
 800d5c2:	1c43      	adds	r3, r0, #1
 800d5c4:	89a3      	ldrh	r3, [r4, #12]
 800d5c6:	bf15      	itete	ne
 800d5c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5d2:	81a3      	strheq	r3, [r4, #12]
 800d5d4:	bf18      	it	ne
 800d5d6:	81a3      	strhne	r3, [r4, #12]
 800d5d8:	bd10      	pop	{r4, pc}

0800d5da <__sclose>:
 800d5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5de:	f000 b81d 	b.w	800d61c <_close_r>

0800d5e2 <memcmp>:
 800d5e2:	b510      	push	{r4, lr}
 800d5e4:	3901      	subs	r1, #1
 800d5e6:	4402      	add	r2, r0
 800d5e8:	4290      	cmp	r0, r2
 800d5ea:	d101      	bne.n	800d5f0 <memcmp+0xe>
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	e005      	b.n	800d5fc <memcmp+0x1a>
 800d5f0:	7803      	ldrb	r3, [r0, #0]
 800d5f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d5f6:	42a3      	cmp	r3, r4
 800d5f8:	d001      	beq.n	800d5fe <memcmp+0x1c>
 800d5fa:	1b18      	subs	r0, r3, r4
 800d5fc:	bd10      	pop	{r4, pc}
 800d5fe:	3001      	adds	r0, #1
 800d600:	e7f2      	b.n	800d5e8 <memcmp+0x6>

0800d602 <memset>:
 800d602:	4402      	add	r2, r0
 800d604:	4603      	mov	r3, r0
 800d606:	4293      	cmp	r3, r2
 800d608:	d100      	bne.n	800d60c <memset+0xa>
 800d60a:	4770      	bx	lr
 800d60c:	f803 1b01 	strb.w	r1, [r3], #1
 800d610:	e7f9      	b.n	800d606 <memset+0x4>
	...

0800d614 <_localeconv_r>:
 800d614:	4800      	ldr	r0, [pc, #0]	; (800d618 <_localeconv_r+0x4>)
 800d616:	4770      	bx	lr
 800d618:	20000114 	.word	0x20000114

0800d61c <_close_r>:
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	4d06      	ldr	r5, [pc, #24]	; (800d638 <_close_r+0x1c>)
 800d620:	2300      	movs	r3, #0
 800d622:	4604      	mov	r4, r0
 800d624:	4608      	mov	r0, r1
 800d626:	602b      	str	r3, [r5, #0]
 800d628:	f7f6 fc1b 	bl	8003e62 <_close>
 800d62c:	1c43      	adds	r3, r0, #1
 800d62e:	d102      	bne.n	800d636 <_close_r+0x1a>
 800d630:	682b      	ldr	r3, [r5, #0]
 800d632:	b103      	cbz	r3, 800d636 <_close_r+0x1a>
 800d634:	6023      	str	r3, [r4, #0]
 800d636:	bd38      	pop	{r3, r4, r5, pc}
 800d638:	20014000 	.word	0x20014000

0800d63c <_lseek_r>:
 800d63c:	b538      	push	{r3, r4, r5, lr}
 800d63e:	4d07      	ldr	r5, [pc, #28]	; (800d65c <_lseek_r+0x20>)
 800d640:	4604      	mov	r4, r0
 800d642:	4608      	mov	r0, r1
 800d644:	4611      	mov	r1, r2
 800d646:	2200      	movs	r2, #0
 800d648:	602a      	str	r2, [r5, #0]
 800d64a:	461a      	mov	r2, r3
 800d64c:	f7f6 fc30 	bl	8003eb0 <_lseek>
 800d650:	1c43      	adds	r3, r0, #1
 800d652:	d102      	bne.n	800d65a <_lseek_r+0x1e>
 800d654:	682b      	ldr	r3, [r5, #0]
 800d656:	b103      	cbz	r3, 800d65a <_lseek_r+0x1e>
 800d658:	6023      	str	r3, [r4, #0]
 800d65a:	bd38      	pop	{r3, r4, r5, pc}
 800d65c:	20014000 	.word	0x20014000

0800d660 <_read_r>:
 800d660:	b538      	push	{r3, r4, r5, lr}
 800d662:	4d07      	ldr	r5, [pc, #28]	; (800d680 <_read_r+0x20>)
 800d664:	4604      	mov	r4, r0
 800d666:	4608      	mov	r0, r1
 800d668:	4611      	mov	r1, r2
 800d66a:	2200      	movs	r2, #0
 800d66c:	602a      	str	r2, [r5, #0]
 800d66e:	461a      	mov	r2, r3
 800d670:	f7f6 fbda 	bl	8003e28 <_read>
 800d674:	1c43      	adds	r3, r0, #1
 800d676:	d102      	bne.n	800d67e <_read_r+0x1e>
 800d678:	682b      	ldr	r3, [r5, #0]
 800d67a:	b103      	cbz	r3, 800d67e <_read_r+0x1e>
 800d67c:	6023      	str	r3, [r4, #0]
 800d67e:	bd38      	pop	{r3, r4, r5, pc}
 800d680:	20014000 	.word	0x20014000

0800d684 <__errno>:
 800d684:	4b01      	ldr	r3, [pc, #4]	; (800d68c <__errno+0x8>)
 800d686:	6818      	ldr	r0, [r3, #0]
 800d688:	4770      	bx	lr
 800d68a:	bf00      	nop
 800d68c:	200001dc 	.word	0x200001dc

0800d690 <__libc_init_array>:
 800d690:	b570      	push	{r4, r5, r6, lr}
 800d692:	4d0d      	ldr	r5, [pc, #52]	; (800d6c8 <__libc_init_array+0x38>)
 800d694:	4c0d      	ldr	r4, [pc, #52]	; (800d6cc <__libc_init_array+0x3c>)
 800d696:	1b64      	subs	r4, r4, r5
 800d698:	10a4      	asrs	r4, r4, #2
 800d69a:	2600      	movs	r6, #0
 800d69c:	42a6      	cmp	r6, r4
 800d69e:	d109      	bne.n	800d6b4 <__libc_init_array+0x24>
 800d6a0:	4d0b      	ldr	r5, [pc, #44]	; (800d6d0 <__libc_init_array+0x40>)
 800d6a2:	4c0c      	ldr	r4, [pc, #48]	; (800d6d4 <__libc_init_array+0x44>)
 800d6a4:	f002 fe7c 	bl	80103a0 <_init>
 800d6a8:	1b64      	subs	r4, r4, r5
 800d6aa:	10a4      	asrs	r4, r4, #2
 800d6ac:	2600      	movs	r6, #0
 800d6ae:	42a6      	cmp	r6, r4
 800d6b0:	d105      	bne.n	800d6be <__libc_init_array+0x2e>
 800d6b2:	bd70      	pop	{r4, r5, r6, pc}
 800d6b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6b8:	4798      	blx	r3
 800d6ba:	3601      	adds	r6, #1
 800d6bc:	e7ee      	b.n	800d69c <__libc_init_array+0xc>
 800d6be:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6c2:	4798      	blx	r3
 800d6c4:	3601      	adds	r6, #1
 800d6c6:	e7f2      	b.n	800d6ae <__libc_init_array+0x1e>
 800d6c8:	08010960 	.word	0x08010960
 800d6cc:	08010960 	.word	0x08010960
 800d6d0:	08010960 	.word	0x08010960
 800d6d4:	08010964 	.word	0x08010964

0800d6d8 <__retarget_lock_init_recursive>:
 800d6d8:	4770      	bx	lr

0800d6da <__retarget_lock_acquire_recursive>:
 800d6da:	4770      	bx	lr

0800d6dc <__retarget_lock_release_recursive>:
 800d6dc:	4770      	bx	lr

0800d6de <memcpy>:
 800d6de:	440a      	add	r2, r1
 800d6e0:	4291      	cmp	r1, r2
 800d6e2:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6e6:	d100      	bne.n	800d6ea <memcpy+0xc>
 800d6e8:	4770      	bx	lr
 800d6ea:	b510      	push	{r4, lr}
 800d6ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6f4:	4291      	cmp	r1, r2
 800d6f6:	d1f9      	bne.n	800d6ec <memcpy+0xe>
 800d6f8:	bd10      	pop	{r4, pc}

0800d6fa <quorem>:
 800d6fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6fe:	6903      	ldr	r3, [r0, #16]
 800d700:	690c      	ldr	r4, [r1, #16]
 800d702:	42a3      	cmp	r3, r4
 800d704:	4607      	mov	r7, r0
 800d706:	db7e      	blt.n	800d806 <quorem+0x10c>
 800d708:	3c01      	subs	r4, #1
 800d70a:	f101 0814 	add.w	r8, r1, #20
 800d70e:	f100 0514 	add.w	r5, r0, #20
 800d712:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d716:	9301      	str	r3, [sp, #4]
 800d718:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d71c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d720:	3301      	adds	r3, #1
 800d722:	429a      	cmp	r2, r3
 800d724:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d728:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d72c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d730:	d331      	bcc.n	800d796 <quorem+0x9c>
 800d732:	f04f 0e00 	mov.w	lr, #0
 800d736:	4640      	mov	r0, r8
 800d738:	46ac      	mov	ip, r5
 800d73a:	46f2      	mov	sl, lr
 800d73c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d740:	b293      	uxth	r3, r2
 800d742:	fb06 e303 	mla	r3, r6, r3, lr
 800d746:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d74a:	0c1a      	lsrs	r2, r3, #16
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	ebaa 0303 	sub.w	r3, sl, r3
 800d752:	f8dc a000 	ldr.w	sl, [ip]
 800d756:	fa13 f38a 	uxtah	r3, r3, sl
 800d75a:	fb06 220e 	mla	r2, r6, lr, r2
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	9b00      	ldr	r3, [sp, #0]
 800d762:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d766:	b292      	uxth	r2, r2
 800d768:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d76c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d770:	f8bd 3000 	ldrh.w	r3, [sp]
 800d774:	4581      	cmp	r9, r0
 800d776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d77a:	f84c 3b04 	str.w	r3, [ip], #4
 800d77e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d782:	d2db      	bcs.n	800d73c <quorem+0x42>
 800d784:	f855 300b 	ldr.w	r3, [r5, fp]
 800d788:	b92b      	cbnz	r3, 800d796 <quorem+0x9c>
 800d78a:	9b01      	ldr	r3, [sp, #4]
 800d78c:	3b04      	subs	r3, #4
 800d78e:	429d      	cmp	r5, r3
 800d790:	461a      	mov	r2, r3
 800d792:	d32c      	bcc.n	800d7ee <quorem+0xf4>
 800d794:	613c      	str	r4, [r7, #16]
 800d796:	4638      	mov	r0, r7
 800d798:	f001 f9ba 	bl	800eb10 <__mcmp>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	db22      	blt.n	800d7e6 <quorem+0xec>
 800d7a0:	3601      	adds	r6, #1
 800d7a2:	4629      	mov	r1, r5
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	f858 2b04 	ldr.w	r2, [r8], #4
 800d7aa:	f8d1 c000 	ldr.w	ip, [r1]
 800d7ae:	b293      	uxth	r3, r2
 800d7b0:	1ac3      	subs	r3, r0, r3
 800d7b2:	0c12      	lsrs	r2, r2, #16
 800d7b4:	fa13 f38c 	uxtah	r3, r3, ip
 800d7b8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d7bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7c6:	45c1      	cmp	r9, r8
 800d7c8:	f841 3b04 	str.w	r3, [r1], #4
 800d7cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d7d0:	d2e9      	bcs.n	800d7a6 <quorem+0xac>
 800d7d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d7da:	b922      	cbnz	r2, 800d7e6 <quorem+0xec>
 800d7dc:	3b04      	subs	r3, #4
 800d7de:	429d      	cmp	r5, r3
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	d30a      	bcc.n	800d7fa <quorem+0x100>
 800d7e4:	613c      	str	r4, [r7, #16]
 800d7e6:	4630      	mov	r0, r6
 800d7e8:	b003      	add	sp, #12
 800d7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ee:	6812      	ldr	r2, [r2, #0]
 800d7f0:	3b04      	subs	r3, #4
 800d7f2:	2a00      	cmp	r2, #0
 800d7f4:	d1ce      	bne.n	800d794 <quorem+0x9a>
 800d7f6:	3c01      	subs	r4, #1
 800d7f8:	e7c9      	b.n	800d78e <quorem+0x94>
 800d7fa:	6812      	ldr	r2, [r2, #0]
 800d7fc:	3b04      	subs	r3, #4
 800d7fe:	2a00      	cmp	r2, #0
 800d800:	d1f0      	bne.n	800d7e4 <quorem+0xea>
 800d802:	3c01      	subs	r4, #1
 800d804:	e7eb      	b.n	800d7de <quorem+0xe4>
 800d806:	2000      	movs	r0, #0
 800d808:	e7ee      	b.n	800d7e8 <quorem+0xee>
 800d80a:	0000      	movs	r0, r0
 800d80c:	0000      	movs	r0, r0
	...

0800d810 <_dtoa_r>:
 800d810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d814:	ed2d 8b04 	vpush	{d8-d9}
 800d818:	69c5      	ldr	r5, [r0, #28]
 800d81a:	b093      	sub	sp, #76	; 0x4c
 800d81c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d820:	ec57 6b10 	vmov	r6, r7, d0
 800d824:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d828:	9107      	str	r1, [sp, #28]
 800d82a:	4604      	mov	r4, r0
 800d82c:	920a      	str	r2, [sp, #40]	; 0x28
 800d82e:	930d      	str	r3, [sp, #52]	; 0x34
 800d830:	b975      	cbnz	r5, 800d850 <_dtoa_r+0x40>
 800d832:	2010      	movs	r0, #16
 800d834:	f000 fe2a 	bl	800e48c <malloc>
 800d838:	4602      	mov	r2, r0
 800d83a:	61e0      	str	r0, [r4, #28]
 800d83c:	b920      	cbnz	r0, 800d848 <_dtoa_r+0x38>
 800d83e:	4bae      	ldr	r3, [pc, #696]	; (800daf8 <_dtoa_r+0x2e8>)
 800d840:	21ef      	movs	r1, #239	; 0xef
 800d842:	48ae      	ldr	r0, [pc, #696]	; (800dafc <_dtoa_r+0x2ec>)
 800d844:	f001 fb30 	bl	800eea8 <__assert_func>
 800d848:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d84c:	6005      	str	r5, [r0, #0]
 800d84e:	60c5      	str	r5, [r0, #12]
 800d850:	69e3      	ldr	r3, [r4, #28]
 800d852:	6819      	ldr	r1, [r3, #0]
 800d854:	b151      	cbz	r1, 800d86c <_dtoa_r+0x5c>
 800d856:	685a      	ldr	r2, [r3, #4]
 800d858:	604a      	str	r2, [r1, #4]
 800d85a:	2301      	movs	r3, #1
 800d85c:	4093      	lsls	r3, r2
 800d85e:	608b      	str	r3, [r1, #8]
 800d860:	4620      	mov	r0, r4
 800d862:	f000 ff19 	bl	800e698 <_Bfree>
 800d866:	69e3      	ldr	r3, [r4, #28]
 800d868:	2200      	movs	r2, #0
 800d86a:	601a      	str	r2, [r3, #0]
 800d86c:	1e3b      	subs	r3, r7, #0
 800d86e:	bfbb      	ittet	lt
 800d870:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d874:	9303      	strlt	r3, [sp, #12]
 800d876:	2300      	movge	r3, #0
 800d878:	2201      	movlt	r2, #1
 800d87a:	bfac      	ite	ge
 800d87c:	f8c8 3000 	strge.w	r3, [r8]
 800d880:	f8c8 2000 	strlt.w	r2, [r8]
 800d884:	4b9e      	ldr	r3, [pc, #632]	; (800db00 <_dtoa_r+0x2f0>)
 800d886:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d88a:	ea33 0308 	bics.w	r3, r3, r8
 800d88e:	d11b      	bne.n	800d8c8 <_dtoa_r+0xb8>
 800d890:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d892:	f242 730f 	movw	r3, #9999	; 0x270f
 800d896:	6013      	str	r3, [r2, #0]
 800d898:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d89c:	4333      	orrs	r3, r6
 800d89e:	f000 8593 	beq.w	800e3c8 <_dtoa_r+0xbb8>
 800d8a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8a4:	b963      	cbnz	r3, 800d8c0 <_dtoa_r+0xb0>
 800d8a6:	4b97      	ldr	r3, [pc, #604]	; (800db04 <_dtoa_r+0x2f4>)
 800d8a8:	e027      	b.n	800d8fa <_dtoa_r+0xea>
 800d8aa:	4b97      	ldr	r3, [pc, #604]	; (800db08 <_dtoa_r+0x2f8>)
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	3308      	adds	r3, #8
 800d8b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d8b2:	6013      	str	r3, [r2, #0]
 800d8b4:	9800      	ldr	r0, [sp, #0]
 800d8b6:	b013      	add	sp, #76	; 0x4c
 800d8b8:	ecbd 8b04 	vpop	{d8-d9}
 800d8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c0:	4b90      	ldr	r3, [pc, #576]	; (800db04 <_dtoa_r+0x2f4>)
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	3303      	adds	r3, #3
 800d8c6:	e7f3      	b.n	800d8b0 <_dtoa_r+0xa0>
 800d8c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	ec51 0b17 	vmov	r0, r1, d7
 800d8d2:	eeb0 8a47 	vmov.f32	s16, s14
 800d8d6:	eef0 8a67 	vmov.f32	s17, s15
 800d8da:	2300      	movs	r3, #0
 800d8dc:	f7f3 f964 	bl	8000ba8 <__aeabi_dcmpeq>
 800d8e0:	4681      	mov	r9, r0
 800d8e2:	b160      	cbz	r0, 800d8fe <_dtoa_r+0xee>
 800d8e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	6013      	str	r3, [r2, #0]
 800d8ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f000 8568 	beq.w	800e3c2 <_dtoa_r+0xbb2>
 800d8f2:	4b86      	ldr	r3, [pc, #536]	; (800db0c <_dtoa_r+0x2fc>)
 800d8f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d8f6:	6013      	str	r3, [r2, #0]
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	9300      	str	r3, [sp, #0]
 800d8fc:	e7da      	b.n	800d8b4 <_dtoa_r+0xa4>
 800d8fe:	aa10      	add	r2, sp, #64	; 0x40
 800d900:	a911      	add	r1, sp, #68	; 0x44
 800d902:	4620      	mov	r0, r4
 800d904:	eeb0 0a48 	vmov.f32	s0, s16
 800d908:	eef0 0a68 	vmov.f32	s1, s17
 800d90c:	f001 f9a6 	bl	800ec5c <__d2b>
 800d910:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d914:	4682      	mov	sl, r0
 800d916:	2d00      	cmp	r5, #0
 800d918:	d07f      	beq.n	800da1a <_dtoa_r+0x20a>
 800d91a:	ee18 3a90 	vmov	r3, s17
 800d91e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d922:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d926:	ec51 0b18 	vmov	r0, r1, d8
 800d92a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d92e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d932:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d936:	4619      	mov	r1, r3
 800d938:	2200      	movs	r2, #0
 800d93a:	4b75      	ldr	r3, [pc, #468]	; (800db10 <_dtoa_r+0x300>)
 800d93c:	f7f2 fd14 	bl	8000368 <__aeabi_dsub>
 800d940:	a367      	add	r3, pc, #412	; (adr r3, 800dae0 <_dtoa_r+0x2d0>)
 800d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d946:	f7f2 fec7 	bl	80006d8 <__aeabi_dmul>
 800d94a:	a367      	add	r3, pc, #412	; (adr r3, 800dae8 <_dtoa_r+0x2d8>)
 800d94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d950:	f7f2 fd0c 	bl	800036c <__adddf3>
 800d954:	4606      	mov	r6, r0
 800d956:	4628      	mov	r0, r5
 800d958:	460f      	mov	r7, r1
 800d95a:	f7f2 fe53 	bl	8000604 <__aeabi_i2d>
 800d95e:	a364      	add	r3, pc, #400	; (adr r3, 800daf0 <_dtoa_r+0x2e0>)
 800d960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d964:	f7f2 feb8 	bl	80006d8 <__aeabi_dmul>
 800d968:	4602      	mov	r2, r0
 800d96a:	460b      	mov	r3, r1
 800d96c:	4630      	mov	r0, r6
 800d96e:	4639      	mov	r1, r7
 800d970:	f7f2 fcfc 	bl	800036c <__adddf3>
 800d974:	4606      	mov	r6, r0
 800d976:	460f      	mov	r7, r1
 800d978:	f7f3 f95e 	bl	8000c38 <__aeabi_d2iz>
 800d97c:	2200      	movs	r2, #0
 800d97e:	4683      	mov	fp, r0
 800d980:	2300      	movs	r3, #0
 800d982:	4630      	mov	r0, r6
 800d984:	4639      	mov	r1, r7
 800d986:	f7f3 f919 	bl	8000bbc <__aeabi_dcmplt>
 800d98a:	b148      	cbz	r0, 800d9a0 <_dtoa_r+0x190>
 800d98c:	4658      	mov	r0, fp
 800d98e:	f7f2 fe39 	bl	8000604 <__aeabi_i2d>
 800d992:	4632      	mov	r2, r6
 800d994:	463b      	mov	r3, r7
 800d996:	f7f3 f907 	bl	8000ba8 <__aeabi_dcmpeq>
 800d99a:	b908      	cbnz	r0, 800d9a0 <_dtoa_r+0x190>
 800d99c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d9a0:	f1bb 0f16 	cmp.w	fp, #22
 800d9a4:	d857      	bhi.n	800da56 <_dtoa_r+0x246>
 800d9a6:	4b5b      	ldr	r3, [pc, #364]	; (800db14 <_dtoa_r+0x304>)
 800d9a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b0:	ec51 0b18 	vmov	r0, r1, d8
 800d9b4:	f7f3 f902 	bl	8000bbc <__aeabi_dcmplt>
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	d04e      	beq.n	800da5a <_dtoa_r+0x24a>
 800d9bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	930c      	str	r3, [sp, #48]	; 0x30
 800d9c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9c6:	1b5b      	subs	r3, r3, r5
 800d9c8:	1e5a      	subs	r2, r3, #1
 800d9ca:	bf45      	ittet	mi
 800d9cc:	f1c3 0301 	rsbmi	r3, r3, #1
 800d9d0:	9305      	strmi	r3, [sp, #20]
 800d9d2:	2300      	movpl	r3, #0
 800d9d4:	2300      	movmi	r3, #0
 800d9d6:	9206      	str	r2, [sp, #24]
 800d9d8:	bf54      	ite	pl
 800d9da:	9305      	strpl	r3, [sp, #20]
 800d9dc:	9306      	strmi	r3, [sp, #24]
 800d9de:	f1bb 0f00 	cmp.w	fp, #0
 800d9e2:	db3c      	blt.n	800da5e <_dtoa_r+0x24e>
 800d9e4:	9b06      	ldr	r3, [sp, #24]
 800d9e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d9ea:	445b      	add	r3, fp
 800d9ec:	9306      	str	r3, [sp, #24]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	9308      	str	r3, [sp, #32]
 800d9f2:	9b07      	ldr	r3, [sp, #28]
 800d9f4:	2b09      	cmp	r3, #9
 800d9f6:	d868      	bhi.n	800daca <_dtoa_r+0x2ba>
 800d9f8:	2b05      	cmp	r3, #5
 800d9fa:	bfc4      	itt	gt
 800d9fc:	3b04      	subgt	r3, #4
 800d9fe:	9307      	strgt	r3, [sp, #28]
 800da00:	9b07      	ldr	r3, [sp, #28]
 800da02:	f1a3 0302 	sub.w	r3, r3, #2
 800da06:	bfcc      	ite	gt
 800da08:	2500      	movgt	r5, #0
 800da0a:	2501      	movle	r5, #1
 800da0c:	2b03      	cmp	r3, #3
 800da0e:	f200 8085 	bhi.w	800db1c <_dtoa_r+0x30c>
 800da12:	e8df f003 	tbb	[pc, r3]
 800da16:	3b2e      	.short	0x3b2e
 800da18:	5839      	.short	0x5839
 800da1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800da1e:	441d      	add	r5, r3
 800da20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800da24:	2b20      	cmp	r3, #32
 800da26:	bfc1      	itttt	gt
 800da28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800da2c:	fa08 f803 	lslgt.w	r8, r8, r3
 800da30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800da34:	fa26 f303 	lsrgt.w	r3, r6, r3
 800da38:	bfd6      	itet	le
 800da3a:	f1c3 0320 	rsble	r3, r3, #32
 800da3e:	ea48 0003 	orrgt.w	r0, r8, r3
 800da42:	fa06 f003 	lslle.w	r0, r6, r3
 800da46:	f7f2 fdcd 	bl	80005e4 <__aeabi_ui2d>
 800da4a:	2201      	movs	r2, #1
 800da4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800da50:	3d01      	subs	r5, #1
 800da52:	920e      	str	r2, [sp, #56]	; 0x38
 800da54:	e76f      	b.n	800d936 <_dtoa_r+0x126>
 800da56:	2301      	movs	r3, #1
 800da58:	e7b3      	b.n	800d9c2 <_dtoa_r+0x1b2>
 800da5a:	900c      	str	r0, [sp, #48]	; 0x30
 800da5c:	e7b2      	b.n	800d9c4 <_dtoa_r+0x1b4>
 800da5e:	9b05      	ldr	r3, [sp, #20]
 800da60:	eba3 030b 	sub.w	r3, r3, fp
 800da64:	9305      	str	r3, [sp, #20]
 800da66:	f1cb 0300 	rsb	r3, fp, #0
 800da6a:	9308      	str	r3, [sp, #32]
 800da6c:	2300      	movs	r3, #0
 800da6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800da70:	e7bf      	b.n	800d9f2 <_dtoa_r+0x1e2>
 800da72:	2300      	movs	r3, #0
 800da74:	9309      	str	r3, [sp, #36]	; 0x24
 800da76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da78:	2b00      	cmp	r3, #0
 800da7a:	dc52      	bgt.n	800db22 <_dtoa_r+0x312>
 800da7c:	2301      	movs	r3, #1
 800da7e:	9301      	str	r3, [sp, #4]
 800da80:	9304      	str	r3, [sp, #16]
 800da82:	461a      	mov	r2, r3
 800da84:	920a      	str	r2, [sp, #40]	; 0x28
 800da86:	e00b      	b.n	800daa0 <_dtoa_r+0x290>
 800da88:	2301      	movs	r3, #1
 800da8a:	e7f3      	b.n	800da74 <_dtoa_r+0x264>
 800da8c:	2300      	movs	r3, #0
 800da8e:	9309      	str	r3, [sp, #36]	; 0x24
 800da90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da92:	445b      	add	r3, fp
 800da94:	9301      	str	r3, [sp, #4]
 800da96:	3301      	adds	r3, #1
 800da98:	2b01      	cmp	r3, #1
 800da9a:	9304      	str	r3, [sp, #16]
 800da9c:	bfb8      	it	lt
 800da9e:	2301      	movlt	r3, #1
 800daa0:	69e0      	ldr	r0, [r4, #28]
 800daa2:	2100      	movs	r1, #0
 800daa4:	2204      	movs	r2, #4
 800daa6:	f102 0614 	add.w	r6, r2, #20
 800daaa:	429e      	cmp	r6, r3
 800daac:	d93d      	bls.n	800db2a <_dtoa_r+0x31a>
 800daae:	6041      	str	r1, [r0, #4]
 800dab0:	4620      	mov	r0, r4
 800dab2:	f000 fdb1 	bl	800e618 <_Balloc>
 800dab6:	9000      	str	r0, [sp, #0]
 800dab8:	2800      	cmp	r0, #0
 800daba:	d139      	bne.n	800db30 <_dtoa_r+0x320>
 800dabc:	4b16      	ldr	r3, [pc, #88]	; (800db18 <_dtoa_r+0x308>)
 800dabe:	4602      	mov	r2, r0
 800dac0:	f240 11af 	movw	r1, #431	; 0x1af
 800dac4:	e6bd      	b.n	800d842 <_dtoa_r+0x32>
 800dac6:	2301      	movs	r3, #1
 800dac8:	e7e1      	b.n	800da8e <_dtoa_r+0x27e>
 800daca:	2501      	movs	r5, #1
 800dacc:	2300      	movs	r3, #0
 800dace:	9307      	str	r3, [sp, #28]
 800dad0:	9509      	str	r5, [sp, #36]	; 0x24
 800dad2:	f04f 33ff 	mov.w	r3, #4294967295
 800dad6:	9301      	str	r3, [sp, #4]
 800dad8:	9304      	str	r3, [sp, #16]
 800dada:	2200      	movs	r2, #0
 800dadc:	2312      	movs	r3, #18
 800dade:	e7d1      	b.n	800da84 <_dtoa_r+0x274>
 800dae0:	636f4361 	.word	0x636f4361
 800dae4:	3fd287a7 	.word	0x3fd287a7
 800dae8:	8b60c8b3 	.word	0x8b60c8b3
 800daec:	3fc68a28 	.word	0x3fc68a28
 800daf0:	509f79fb 	.word	0x509f79fb
 800daf4:	3fd34413 	.word	0x3fd34413
 800daf8:	080106fe 	.word	0x080106fe
 800dafc:	08010715 	.word	0x08010715
 800db00:	7ff00000 	.word	0x7ff00000
 800db04:	080106fa 	.word	0x080106fa
 800db08:	080106f1 	.word	0x080106f1
 800db0c:	080106c4 	.word	0x080106c4
 800db10:	3ff80000 	.word	0x3ff80000
 800db14:	08010800 	.word	0x08010800
 800db18:	0801076d 	.word	0x0801076d
 800db1c:	2301      	movs	r3, #1
 800db1e:	9309      	str	r3, [sp, #36]	; 0x24
 800db20:	e7d7      	b.n	800dad2 <_dtoa_r+0x2c2>
 800db22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db24:	9301      	str	r3, [sp, #4]
 800db26:	9304      	str	r3, [sp, #16]
 800db28:	e7ba      	b.n	800daa0 <_dtoa_r+0x290>
 800db2a:	3101      	adds	r1, #1
 800db2c:	0052      	lsls	r2, r2, #1
 800db2e:	e7ba      	b.n	800daa6 <_dtoa_r+0x296>
 800db30:	69e3      	ldr	r3, [r4, #28]
 800db32:	9a00      	ldr	r2, [sp, #0]
 800db34:	601a      	str	r2, [r3, #0]
 800db36:	9b04      	ldr	r3, [sp, #16]
 800db38:	2b0e      	cmp	r3, #14
 800db3a:	f200 80a8 	bhi.w	800dc8e <_dtoa_r+0x47e>
 800db3e:	2d00      	cmp	r5, #0
 800db40:	f000 80a5 	beq.w	800dc8e <_dtoa_r+0x47e>
 800db44:	f1bb 0f00 	cmp.w	fp, #0
 800db48:	dd38      	ble.n	800dbbc <_dtoa_r+0x3ac>
 800db4a:	4bc0      	ldr	r3, [pc, #768]	; (800de4c <_dtoa_r+0x63c>)
 800db4c:	f00b 020f 	and.w	r2, fp, #15
 800db50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800db58:	e9d3 6700 	ldrd	r6, r7, [r3]
 800db5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800db60:	d019      	beq.n	800db96 <_dtoa_r+0x386>
 800db62:	4bbb      	ldr	r3, [pc, #748]	; (800de50 <_dtoa_r+0x640>)
 800db64:	ec51 0b18 	vmov	r0, r1, d8
 800db68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800db6c:	f7f2 fede 	bl	800092c <__aeabi_ddiv>
 800db70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db74:	f008 080f 	and.w	r8, r8, #15
 800db78:	2503      	movs	r5, #3
 800db7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800de50 <_dtoa_r+0x640>
 800db7e:	f1b8 0f00 	cmp.w	r8, #0
 800db82:	d10a      	bne.n	800db9a <_dtoa_r+0x38a>
 800db84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db88:	4632      	mov	r2, r6
 800db8a:	463b      	mov	r3, r7
 800db8c:	f7f2 fece 	bl	800092c <__aeabi_ddiv>
 800db90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db94:	e02b      	b.n	800dbee <_dtoa_r+0x3de>
 800db96:	2502      	movs	r5, #2
 800db98:	e7ef      	b.n	800db7a <_dtoa_r+0x36a>
 800db9a:	f018 0f01 	tst.w	r8, #1
 800db9e:	d008      	beq.n	800dbb2 <_dtoa_r+0x3a2>
 800dba0:	4630      	mov	r0, r6
 800dba2:	4639      	mov	r1, r7
 800dba4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dba8:	f7f2 fd96 	bl	80006d8 <__aeabi_dmul>
 800dbac:	3501      	adds	r5, #1
 800dbae:	4606      	mov	r6, r0
 800dbb0:	460f      	mov	r7, r1
 800dbb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dbb6:	f109 0908 	add.w	r9, r9, #8
 800dbba:	e7e0      	b.n	800db7e <_dtoa_r+0x36e>
 800dbbc:	f000 809f 	beq.w	800dcfe <_dtoa_r+0x4ee>
 800dbc0:	f1cb 0600 	rsb	r6, fp, #0
 800dbc4:	4ba1      	ldr	r3, [pc, #644]	; (800de4c <_dtoa_r+0x63c>)
 800dbc6:	4fa2      	ldr	r7, [pc, #648]	; (800de50 <_dtoa_r+0x640>)
 800dbc8:	f006 020f 	and.w	r2, r6, #15
 800dbcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd4:	ec51 0b18 	vmov	r0, r1, d8
 800dbd8:	f7f2 fd7e 	bl	80006d8 <__aeabi_dmul>
 800dbdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbe0:	1136      	asrs	r6, r6, #4
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	2502      	movs	r5, #2
 800dbe6:	2e00      	cmp	r6, #0
 800dbe8:	d17e      	bne.n	800dce8 <_dtoa_r+0x4d8>
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d1d0      	bne.n	800db90 <_dtoa_r+0x380>
 800dbee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbf0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f000 8084 	beq.w	800dd02 <_dtoa_r+0x4f2>
 800dbfa:	4b96      	ldr	r3, [pc, #600]	; (800de54 <_dtoa_r+0x644>)
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	4640      	mov	r0, r8
 800dc00:	4649      	mov	r1, r9
 800dc02:	f7f2 ffdb 	bl	8000bbc <__aeabi_dcmplt>
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d07b      	beq.n	800dd02 <_dtoa_r+0x4f2>
 800dc0a:	9b04      	ldr	r3, [sp, #16]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d078      	beq.n	800dd02 <_dtoa_r+0x4f2>
 800dc10:	9b01      	ldr	r3, [sp, #4]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	dd39      	ble.n	800dc8a <_dtoa_r+0x47a>
 800dc16:	4b90      	ldr	r3, [pc, #576]	; (800de58 <_dtoa_r+0x648>)
 800dc18:	2200      	movs	r2, #0
 800dc1a:	4640      	mov	r0, r8
 800dc1c:	4649      	mov	r1, r9
 800dc1e:	f7f2 fd5b 	bl	80006d8 <__aeabi_dmul>
 800dc22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc26:	9e01      	ldr	r6, [sp, #4]
 800dc28:	f10b 37ff 	add.w	r7, fp, #4294967295
 800dc2c:	3501      	adds	r5, #1
 800dc2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dc32:	4628      	mov	r0, r5
 800dc34:	f7f2 fce6 	bl	8000604 <__aeabi_i2d>
 800dc38:	4642      	mov	r2, r8
 800dc3a:	464b      	mov	r3, r9
 800dc3c:	f7f2 fd4c 	bl	80006d8 <__aeabi_dmul>
 800dc40:	4b86      	ldr	r3, [pc, #536]	; (800de5c <_dtoa_r+0x64c>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	f7f2 fb92 	bl	800036c <__adddf3>
 800dc48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dc4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc50:	9303      	str	r3, [sp, #12]
 800dc52:	2e00      	cmp	r6, #0
 800dc54:	d158      	bne.n	800dd08 <_dtoa_r+0x4f8>
 800dc56:	4b82      	ldr	r3, [pc, #520]	; (800de60 <_dtoa_r+0x650>)
 800dc58:	2200      	movs	r2, #0
 800dc5a:	4640      	mov	r0, r8
 800dc5c:	4649      	mov	r1, r9
 800dc5e:	f7f2 fb83 	bl	8000368 <__aeabi_dsub>
 800dc62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc66:	4680      	mov	r8, r0
 800dc68:	4689      	mov	r9, r1
 800dc6a:	f7f2 ffc5 	bl	8000bf8 <__aeabi_dcmpgt>
 800dc6e:	2800      	cmp	r0, #0
 800dc70:	f040 8296 	bne.w	800e1a0 <_dtoa_r+0x990>
 800dc74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dc78:	4640      	mov	r0, r8
 800dc7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc7e:	4649      	mov	r1, r9
 800dc80:	f7f2 ff9c 	bl	8000bbc <__aeabi_dcmplt>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	f040 8289 	bne.w	800e19c <_dtoa_r+0x98c>
 800dc8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dc8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f2c0 814e 	blt.w	800df32 <_dtoa_r+0x722>
 800dc96:	f1bb 0f0e 	cmp.w	fp, #14
 800dc9a:	f300 814a 	bgt.w	800df32 <_dtoa_r+0x722>
 800dc9e:	4b6b      	ldr	r3, [pc, #428]	; (800de4c <_dtoa_r+0x63c>)
 800dca0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dca4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	f280 80dc 	bge.w	800de68 <_dtoa_r+0x658>
 800dcb0:	9b04      	ldr	r3, [sp, #16]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f300 80d8 	bgt.w	800de68 <_dtoa_r+0x658>
 800dcb8:	f040 826f 	bne.w	800e19a <_dtoa_r+0x98a>
 800dcbc:	4b68      	ldr	r3, [pc, #416]	; (800de60 <_dtoa_r+0x650>)
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	4640      	mov	r0, r8
 800dcc2:	4649      	mov	r1, r9
 800dcc4:	f7f2 fd08 	bl	80006d8 <__aeabi_dmul>
 800dcc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dccc:	f7f2 ff8a 	bl	8000be4 <__aeabi_dcmpge>
 800dcd0:	9e04      	ldr	r6, [sp, #16]
 800dcd2:	4637      	mov	r7, r6
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	f040 8245 	bne.w	800e164 <_dtoa_r+0x954>
 800dcda:	9d00      	ldr	r5, [sp, #0]
 800dcdc:	2331      	movs	r3, #49	; 0x31
 800dcde:	f805 3b01 	strb.w	r3, [r5], #1
 800dce2:	f10b 0b01 	add.w	fp, fp, #1
 800dce6:	e241      	b.n	800e16c <_dtoa_r+0x95c>
 800dce8:	07f2      	lsls	r2, r6, #31
 800dcea:	d505      	bpl.n	800dcf8 <_dtoa_r+0x4e8>
 800dcec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcf0:	f7f2 fcf2 	bl	80006d8 <__aeabi_dmul>
 800dcf4:	3501      	adds	r5, #1
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	1076      	asrs	r6, r6, #1
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	e773      	b.n	800dbe6 <_dtoa_r+0x3d6>
 800dcfe:	2502      	movs	r5, #2
 800dd00:	e775      	b.n	800dbee <_dtoa_r+0x3de>
 800dd02:	9e04      	ldr	r6, [sp, #16]
 800dd04:	465f      	mov	r7, fp
 800dd06:	e792      	b.n	800dc2e <_dtoa_r+0x41e>
 800dd08:	9900      	ldr	r1, [sp, #0]
 800dd0a:	4b50      	ldr	r3, [pc, #320]	; (800de4c <_dtoa_r+0x63c>)
 800dd0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd10:	4431      	add	r1, r6
 800dd12:	9102      	str	r1, [sp, #8]
 800dd14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd16:	eeb0 9a47 	vmov.f32	s18, s14
 800dd1a:	eef0 9a67 	vmov.f32	s19, s15
 800dd1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dd22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dd26:	2900      	cmp	r1, #0
 800dd28:	d044      	beq.n	800ddb4 <_dtoa_r+0x5a4>
 800dd2a:	494e      	ldr	r1, [pc, #312]	; (800de64 <_dtoa_r+0x654>)
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	f7f2 fdfd 	bl	800092c <__aeabi_ddiv>
 800dd32:	ec53 2b19 	vmov	r2, r3, d9
 800dd36:	f7f2 fb17 	bl	8000368 <__aeabi_dsub>
 800dd3a:	9d00      	ldr	r5, [sp, #0]
 800dd3c:	ec41 0b19 	vmov	d9, r0, r1
 800dd40:	4649      	mov	r1, r9
 800dd42:	4640      	mov	r0, r8
 800dd44:	f7f2 ff78 	bl	8000c38 <__aeabi_d2iz>
 800dd48:	4606      	mov	r6, r0
 800dd4a:	f7f2 fc5b 	bl	8000604 <__aeabi_i2d>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
 800dd52:	4640      	mov	r0, r8
 800dd54:	4649      	mov	r1, r9
 800dd56:	f7f2 fb07 	bl	8000368 <__aeabi_dsub>
 800dd5a:	3630      	adds	r6, #48	; 0x30
 800dd5c:	f805 6b01 	strb.w	r6, [r5], #1
 800dd60:	ec53 2b19 	vmov	r2, r3, d9
 800dd64:	4680      	mov	r8, r0
 800dd66:	4689      	mov	r9, r1
 800dd68:	f7f2 ff28 	bl	8000bbc <__aeabi_dcmplt>
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	d164      	bne.n	800de3a <_dtoa_r+0x62a>
 800dd70:	4642      	mov	r2, r8
 800dd72:	464b      	mov	r3, r9
 800dd74:	4937      	ldr	r1, [pc, #220]	; (800de54 <_dtoa_r+0x644>)
 800dd76:	2000      	movs	r0, #0
 800dd78:	f7f2 faf6 	bl	8000368 <__aeabi_dsub>
 800dd7c:	ec53 2b19 	vmov	r2, r3, d9
 800dd80:	f7f2 ff1c 	bl	8000bbc <__aeabi_dcmplt>
 800dd84:	2800      	cmp	r0, #0
 800dd86:	f040 80b6 	bne.w	800def6 <_dtoa_r+0x6e6>
 800dd8a:	9b02      	ldr	r3, [sp, #8]
 800dd8c:	429d      	cmp	r5, r3
 800dd8e:	f43f af7c 	beq.w	800dc8a <_dtoa_r+0x47a>
 800dd92:	4b31      	ldr	r3, [pc, #196]	; (800de58 <_dtoa_r+0x648>)
 800dd94:	ec51 0b19 	vmov	r0, r1, d9
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f7f2 fc9d 	bl	80006d8 <__aeabi_dmul>
 800dd9e:	4b2e      	ldr	r3, [pc, #184]	; (800de58 <_dtoa_r+0x648>)
 800dda0:	ec41 0b19 	vmov	d9, r0, r1
 800dda4:	2200      	movs	r2, #0
 800dda6:	4640      	mov	r0, r8
 800dda8:	4649      	mov	r1, r9
 800ddaa:	f7f2 fc95 	bl	80006d8 <__aeabi_dmul>
 800ddae:	4680      	mov	r8, r0
 800ddb0:	4689      	mov	r9, r1
 800ddb2:	e7c5      	b.n	800dd40 <_dtoa_r+0x530>
 800ddb4:	ec51 0b17 	vmov	r0, r1, d7
 800ddb8:	f7f2 fc8e 	bl	80006d8 <__aeabi_dmul>
 800ddbc:	9b02      	ldr	r3, [sp, #8]
 800ddbe:	9d00      	ldr	r5, [sp, #0]
 800ddc0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ddc2:	ec41 0b19 	vmov	d9, r0, r1
 800ddc6:	4649      	mov	r1, r9
 800ddc8:	4640      	mov	r0, r8
 800ddca:	f7f2 ff35 	bl	8000c38 <__aeabi_d2iz>
 800ddce:	4606      	mov	r6, r0
 800ddd0:	f7f2 fc18 	bl	8000604 <__aeabi_i2d>
 800ddd4:	3630      	adds	r6, #48	; 0x30
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	460b      	mov	r3, r1
 800ddda:	4640      	mov	r0, r8
 800dddc:	4649      	mov	r1, r9
 800ddde:	f7f2 fac3 	bl	8000368 <__aeabi_dsub>
 800dde2:	f805 6b01 	strb.w	r6, [r5], #1
 800dde6:	9b02      	ldr	r3, [sp, #8]
 800dde8:	429d      	cmp	r5, r3
 800ddea:	4680      	mov	r8, r0
 800ddec:	4689      	mov	r9, r1
 800ddee:	f04f 0200 	mov.w	r2, #0
 800ddf2:	d124      	bne.n	800de3e <_dtoa_r+0x62e>
 800ddf4:	4b1b      	ldr	r3, [pc, #108]	; (800de64 <_dtoa_r+0x654>)
 800ddf6:	ec51 0b19 	vmov	r0, r1, d9
 800ddfa:	f7f2 fab7 	bl	800036c <__adddf3>
 800ddfe:	4602      	mov	r2, r0
 800de00:	460b      	mov	r3, r1
 800de02:	4640      	mov	r0, r8
 800de04:	4649      	mov	r1, r9
 800de06:	f7f2 fef7 	bl	8000bf8 <__aeabi_dcmpgt>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	d173      	bne.n	800def6 <_dtoa_r+0x6e6>
 800de0e:	ec53 2b19 	vmov	r2, r3, d9
 800de12:	4914      	ldr	r1, [pc, #80]	; (800de64 <_dtoa_r+0x654>)
 800de14:	2000      	movs	r0, #0
 800de16:	f7f2 faa7 	bl	8000368 <__aeabi_dsub>
 800de1a:	4602      	mov	r2, r0
 800de1c:	460b      	mov	r3, r1
 800de1e:	4640      	mov	r0, r8
 800de20:	4649      	mov	r1, r9
 800de22:	f7f2 fecb 	bl	8000bbc <__aeabi_dcmplt>
 800de26:	2800      	cmp	r0, #0
 800de28:	f43f af2f 	beq.w	800dc8a <_dtoa_r+0x47a>
 800de2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800de2e:	1e6b      	subs	r3, r5, #1
 800de30:	930f      	str	r3, [sp, #60]	; 0x3c
 800de32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800de36:	2b30      	cmp	r3, #48	; 0x30
 800de38:	d0f8      	beq.n	800de2c <_dtoa_r+0x61c>
 800de3a:	46bb      	mov	fp, r7
 800de3c:	e04a      	b.n	800ded4 <_dtoa_r+0x6c4>
 800de3e:	4b06      	ldr	r3, [pc, #24]	; (800de58 <_dtoa_r+0x648>)
 800de40:	f7f2 fc4a 	bl	80006d8 <__aeabi_dmul>
 800de44:	4680      	mov	r8, r0
 800de46:	4689      	mov	r9, r1
 800de48:	e7bd      	b.n	800ddc6 <_dtoa_r+0x5b6>
 800de4a:	bf00      	nop
 800de4c:	08010800 	.word	0x08010800
 800de50:	080107d8 	.word	0x080107d8
 800de54:	3ff00000 	.word	0x3ff00000
 800de58:	40240000 	.word	0x40240000
 800de5c:	401c0000 	.word	0x401c0000
 800de60:	40140000 	.word	0x40140000
 800de64:	3fe00000 	.word	0x3fe00000
 800de68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800de6c:	9d00      	ldr	r5, [sp, #0]
 800de6e:	4642      	mov	r2, r8
 800de70:	464b      	mov	r3, r9
 800de72:	4630      	mov	r0, r6
 800de74:	4639      	mov	r1, r7
 800de76:	f7f2 fd59 	bl	800092c <__aeabi_ddiv>
 800de7a:	f7f2 fedd 	bl	8000c38 <__aeabi_d2iz>
 800de7e:	9001      	str	r0, [sp, #4]
 800de80:	f7f2 fbc0 	bl	8000604 <__aeabi_i2d>
 800de84:	4642      	mov	r2, r8
 800de86:	464b      	mov	r3, r9
 800de88:	f7f2 fc26 	bl	80006d8 <__aeabi_dmul>
 800de8c:	4602      	mov	r2, r0
 800de8e:	460b      	mov	r3, r1
 800de90:	4630      	mov	r0, r6
 800de92:	4639      	mov	r1, r7
 800de94:	f7f2 fa68 	bl	8000368 <__aeabi_dsub>
 800de98:	9e01      	ldr	r6, [sp, #4]
 800de9a:	9f04      	ldr	r7, [sp, #16]
 800de9c:	3630      	adds	r6, #48	; 0x30
 800de9e:	f805 6b01 	strb.w	r6, [r5], #1
 800dea2:	9e00      	ldr	r6, [sp, #0]
 800dea4:	1bae      	subs	r6, r5, r6
 800dea6:	42b7      	cmp	r7, r6
 800dea8:	4602      	mov	r2, r0
 800deaa:	460b      	mov	r3, r1
 800deac:	d134      	bne.n	800df18 <_dtoa_r+0x708>
 800deae:	f7f2 fa5d 	bl	800036c <__adddf3>
 800deb2:	4642      	mov	r2, r8
 800deb4:	464b      	mov	r3, r9
 800deb6:	4606      	mov	r6, r0
 800deb8:	460f      	mov	r7, r1
 800deba:	f7f2 fe9d 	bl	8000bf8 <__aeabi_dcmpgt>
 800debe:	b9c8      	cbnz	r0, 800def4 <_dtoa_r+0x6e4>
 800dec0:	4642      	mov	r2, r8
 800dec2:	464b      	mov	r3, r9
 800dec4:	4630      	mov	r0, r6
 800dec6:	4639      	mov	r1, r7
 800dec8:	f7f2 fe6e 	bl	8000ba8 <__aeabi_dcmpeq>
 800decc:	b110      	cbz	r0, 800ded4 <_dtoa_r+0x6c4>
 800dece:	9b01      	ldr	r3, [sp, #4]
 800ded0:	07db      	lsls	r3, r3, #31
 800ded2:	d40f      	bmi.n	800def4 <_dtoa_r+0x6e4>
 800ded4:	4651      	mov	r1, sl
 800ded6:	4620      	mov	r0, r4
 800ded8:	f000 fbde 	bl	800e698 <_Bfree>
 800dedc:	2300      	movs	r3, #0
 800dede:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dee0:	702b      	strb	r3, [r5, #0]
 800dee2:	f10b 0301 	add.w	r3, fp, #1
 800dee6:	6013      	str	r3, [r2, #0]
 800dee8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800deea:	2b00      	cmp	r3, #0
 800deec:	f43f ace2 	beq.w	800d8b4 <_dtoa_r+0xa4>
 800def0:	601d      	str	r5, [r3, #0]
 800def2:	e4df      	b.n	800d8b4 <_dtoa_r+0xa4>
 800def4:	465f      	mov	r7, fp
 800def6:	462b      	mov	r3, r5
 800def8:	461d      	mov	r5, r3
 800defa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800defe:	2a39      	cmp	r2, #57	; 0x39
 800df00:	d106      	bne.n	800df10 <_dtoa_r+0x700>
 800df02:	9a00      	ldr	r2, [sp, #0]
 800df04:	429a      	cmp	r2, r3
 800df06:	d1f7      	bne.n	800def8 <_dtoa_r+0x6e8>
 800df08:	9900      	ldr	r1, [sp, #0]
 800df0a:	2230      	movs	r2, #48	; 0x30
 800df0c:	3701      	adds	r7, #1
 800df0e:	700a      	strb	r2, [r1, #0]
 800df10:	781a      	ldrb	r2, [r3, #0]
 800df12:	3201      	adds	r2, #1
 800df14:	701a      	strb	r2, [r3, #0]
 800df16:	e790      	b.n	800de3a <_dtoa_r+0x62a>
 800df18:	4ba3      	ldr	r3, [pc, #652]	; (800e1a8 <_dtoa_r+0x998>)
 800df1a:	2200      	movs	r2, #0
 800df1c:	f7f2 fbdc 	bl	80006d8 <__aeabi_dmul>
 800df20:	2200      	movs	r2, #0
 800df22:	2300      	movs	r3, #0
 800df24:	4606      	mov	r6, r0
 800df26:	460f      	mov	r7, r1
 800df28:	f7f2 fe3e 	bl	8000ba8 <__aeabi_dcmpeq>
 800df2c:	2800      	cmp	r0, #0
 800df2e:	d09e      	beq.n	800de6e <_dtoa_r+0x65e>
 800df30:	e7d0      	b.n	800ded4 <_dtoa_r+0x6c4>
 800df32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df34:	2a00      	cmp	r2, #0
 800df36:	f000 80ca 	beq.w	800e0ce <_dtoa_r+0x8be>
 800df3a:	9a07      	ldr	r2, [sp, #28]
 800df3c:	2a01      	cmp	r2, #1
 800df3e:	f300 80ad 	bgt.w	800e09c <_dtoa_r+0x88c>
 800df42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df44:	2a00      	cmp	r2, #0
 800df46:	f000 80a5 	beq.w	800e094 <_dtoa_r+0x884>
 800df4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800df4e:	9e08      	ldr	r6, [sp, #32]
 800df50:	9d05      	ldr	r5, [sp, #20]
 800df52:	9a05      	ldr	r2, [sp, #20]
 800df54:	441a      	add	r2, r3
 800df56:	9205      	str	r2, [sp, #20]
 800df58:	9a06      	ldr	r2, [sp, #24]
 800df5a:	2101      	movs	r1, #1
 800df5c:	441a      	add	r2, r3
 800df5e:	4620      	mov	r0, r4
 800df60:	9206      	str	r2, [sp, #24]
 800df62:	f000 fc4f 	bl	800e804 <__i2b>
 800df66:	4607      	mov	r7, r0
 800df68:	b165      	cbz	r5, 800df84 <_dtoa_r+0x774>
 800df6a:	9b06      	ldr	r3, [sp, #24]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	dd09      	ble.n	800df84 <_dtoa_r+0x774>
 800df70:	42ab      	cmp	r3, r5
 800df72:	9a05      	ldr	r2, [sp, #20]
 800df74:	bfa8      	it	ge
 800df76:	462b      	movge	r3, r5
 800df78:	1ad2      	subs	r2, r2, r3
 800df7a:	9205      	str	r2, [sp, #20]
 800df7c:	9a06      	ldr	r2, [sp, #24]
 800df7e:	1aed      	subs	r5, r5, r3
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	9306      	str	r3, [sp, #24]
 800df84:	9b08      	ldr	r3, [sp, #32]
 800df86:	b1f3      	cbz	r3, 800dfc6 <_dtoa_r+0x7b6>
 800df88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	f000 80a3 	beq.w	800e0d6 <_dtoa_r+0x8c6>
 800df90:	2e00      	cmp	r6, #0
 800df92:	dd10      	ble.n	800dfb6 <_dtoa_r+0x7a6>
 800df94:	4639      	mov	r1, r7
 800df96:	4632      	mov	r2, r6
 800df98:	4620      	mov	r0, r4
 800df9a:	f000 fcf3 	bl	800e984 <__pow5mult>
 800df9e:	4652      	mov	r2, sl
 800dfa0:	4601      	mov	r1, r0
 800dfa2:	4607      	mov	r7, r0
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f000 fc43 	bl	800e830 <__multiply>
 800dfaa:	4651      	mov	r1, sl
 800dfac:	4680      	mov	r8, r0
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f000 fb72 	bl	800e698 <_Bfree>
 800dfb4:	46c2      	mov	sl, r8
 800dfb6:	9b08      	ldr	r3, [sp, #32]
 800dfb8:	1b9a      	subs	r2, r3, r6
 800dfba:	d004      	beq.n	800dfc6 <_dtoa_r+0x7b6>
 800dfbc:	4651      	mov	r1, sl
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f000 fce0 	bl	800e984 <__pow5mult>
 800dfc4:	4682      	mov	sl, r0
 800dfc6:	2101      	movs	r1, #1
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f000 fc1b 	bl	800e804 <__i2b>
 800dfce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	f340 8081 	ble.w	800e0da <_dtoa_r+0x8ca>
 800dfd8:	461a      	mov	r2, r3
 800dfda:	4601      	mov	r1, r0
 800dfdc:	4620      	mov	r0, r4
 800dfde:	f000 fcd1 	bl	800e984 <__pow5mult>
 800dfe2:	9b07      	ldr	r3, [sp, #28]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	4606      	mov	r6, r0
 800dfe8:	dd7a      	ble.n	800e0e0 <_dtoa_r+0x8d0>
 800dfea:	f04f 0800 	mov.w	r8, #0
 800dfee:	6933      	ldr	r3, [r6, #16]
 800dff0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dff4:	6918      	ldr	r0, [r3, #16]
 800dff6:	f000 fbb7 	bl	800e768 <__hi0bits>
 800dffa:	f1c0 0020 	rsb	r0, r0, #32
 800dffe:	9b06      	ldr	r3, [sp, #24]
 800e000:	4418      	add	r0, r3
 800e002:	f010 001f 	ands.w	r0, r0, #31
 800e006:	f000 8094 	beq.w	800e132 <_dtoa_r+0x922>
 800e00a:	f1c0 0320 	rsb	r3, r0, #32
 800e00e:	2b04      	cmp	r3, #4
 800e010:	f340 8085 	ble.w	800e11e <_dtoa_r+0x90e>
 800e014:	9b05      	ldr	r3, [sp, #20]
 800e016:	f1c0 001c 	rsb	r0, r0, #28
 800e01a:	4403      	add	r3, r0
 800e01c:	9305      	str	r3, [sp, #20]
 800e01e:	9b06      	ldr	r3, [sp, #24]
 800e020:	4403      	add	r3, r0
 800e022:	4405      	add	r5, r0
 800e024:	9306      	str	r3, [sp, #24]
 800e026:	9b05      	ldr	r3, [sp, #20]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	dd05      	ble.n	800e038 <_dtoa_r+0x828>
 800e02c:	4651      	mov	r1, sl
 800e02e:	461a      	mov	r2, r3
 800e030:	4620      	mov	r0, r4
 800e032:	f000 fd01 	bl	800ea38 <__lshift>
 800e036:	4682      	mov	sl, r0
 800e038:	9b06      	ldr	r3, [sp, #24]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	dd05      	ble.n	800e04a <_dtoa_r+0x83a>
 800e03e:	4631      	mov	r1, r6
 800e040:	461a      	mov	r2, r3
 800e042:	4620      	mov	r0, r4
 800e044:	f000 fcf8 	bl	800ea38 <__lshift>
 800e048:	4606      	mov	r6, r0
 800e04a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d072      	beq.n	800e136 <_dtoa_r+0x926>
 800e050:	4631      	mov	r1, r6
 800e052:	4650      	mov	r0, sl
 800e054:	f000 fd5c 	bl	800eb10 <__mcmp>
 800e058:	2800      	cmp	r0, #0
 800e05a:	da6c      	bge.n	800e136 <_dtoa_r+0x926>
 800e05c:	2300      	movs	r3, #0
 800e05e:	4651      	mov	r1, sl
 800e060:	220a      	movs	r2, #10
 800e062:	4620      	mov	r0, r4
 800e064:	f000 fb3a 	bl	800e6dc <__multadd>
 800e068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e06a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e06e:	4682      	mov	sl, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	f000 81b0 	beq.w	800e3d6 <_dtoa_r+0xbc6>
 800e076:	2300      	movs	r3, #0
 800e078:	4639      	mov	r1, r7
 800e07a:	220a      	movs	r2, #10
 800e07c:	4620      	mov	r0, r4
 800e07e:	f000 fb2d 	bl	800e6dc <__multadd>
 800e082:	9b01      	ldr	r3, [sp, #4]
 800e084:	2b00      	cmp	r3, #0
 800e086:	4607      	mov	r7, r0
 800e088:	f300 8096 	bgt.w	800e1b8 <_dtoa_r+0x9a8>
 800e08c:	9b07      	ldr	r3, [sp, #28]
 800e08e:	2b02      	cmp	r3, #2
 800e090:	dc59      	bgt.n	800e146 <_dtoa_r+0x936>
 800e092:	e091      	b.n	800e1b8 <_dtoa_r+0x9a8>
 800e094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e096:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e09a:	e758      	b.n	800df4e <_dtoa_r+0x73e>
 800e09c:	9b04      	ldr	r3, [sp, #16]
 800e09e:	1e5e      	subs	r6, r3, #1
 800e0a0:	9b08      	ldr	r3, [sp, #32]
 800e0a2:	42b3      	cmp	r3, r6
 800e0a4:	bfbf      	itttt	lt
 800e0a6:	9b08      	ldrlt	r3, [sp, #32]
 800e0a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e0aa:	9608      	strlt	r6, [sp, #32]
 800e0ac:	1af3      	sublt	r3, r6, r3
 800e0ae:	bfb4      	ite	lt
 800e0b0:	18d2      	addlt	r2, r2, r3
 800e0b2:	1b9e      	subge	r6, r3, r6
 800e0b4:	9b04      	ldr	r3, [sp, #16]
 800e0b6:	bfbc      	itt	lt
 800e0b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e0ba:	2600      	movlt	r6, #0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	bfb7      	itett	lt
 800e0c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e0c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e0c8:	1a9d      	sublt	r5, r3, r2
 800e0ca:	2300      	movlt	r3, #0
 800e0cc:	e741      	b.n	800df52 <_dtoa_r+0x742>
 800e0ce:	9e08      	ldr	r6, [sp, #32]
 800e0d0:	9d05      	ldr	r5, [sp, #20]
 800e0d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e0d4:	e748      	b.n	800df68 <_dtoa_r+0x758>
 800e0d6:	9a08      	ldr	r2, [sp, #32]
 800e0d8:	e770      	b.n	800dfbc <_dtoa_r+0x7ac>
 800e0da:	9b07      	ldr	r3, [sp, #28]
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	dc19      	bgt.n	800e114 <_dtoa_r+0x904>
 800e0e0:	9b02      	ldr	r3, [sp, #8]
 800e0e2:	b9bb      	cbnz	r3, 800e114 <_dtoa_r+0x904>
 800e0e4:	9b03      	ldr	r3, [sp, #12]
 800e0e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0ea:	b99b      	cbnz	r3, 800e114 <_dtoa_r+0x904>
 800e0ec:	9b03      	ldr	r3, [sp, #12]
 800e0ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0f2:	0d1b      	lsrs	r3, r3, #20
 800e0f4:	051b      	lsls	r3, r3, #20
 800e0f6:	b183      	cbz	r3, 800e11a <_dtoa_r+0x90a>
 800e0f8:	9b05      	ldr	r3, [sp, #20]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	9305      	str	r3, [sp, #20]
 800e0fe:	9b06      	ldr	r3, [sp, #24]
 800e100:	3301      	adds	r3, #1
 800e102:	9306      	str	r3, [sp, #24]
 800e104:	f04f 0801 	mov.w	r8, #1
 800e108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f47f af6f 	bne.w	800dfee <_dtoa_r+0x7de>
 800e110:	2001      	movs	r0, #1
 800e112:	e774      	b.n	800dffe <_dtoa_r+0x7ee>
 800e114:	f04f 0800 	mov.w	r8, #0
 800e118:	e7f6      	b.n	800e108 <_dtoa_r+0x8f8>
 800e11a:	4698      	mov	r8, r3
 800e11c:	e7f4      	b.n	800e108 <_dtoa_r+0x8f8>
 800e11e:	d082      	beq.n	800e026 <_dtoa_r+0x816>
 800e120:	9a05      	ldr	r2, [sp, #20]
 800e122:	331c      	adds	r3, #28
 800e124:	441a      	add	r2, r3
 800e126:	9205      	str	r2, [sp, #20]
 800e128:	9a06      	ldr	r2, [sp, #24]
 800e12a:	441a      	add	r2, r3
 800e12c:	441d      	add	r5, r3
 800e12e:	9206      	str	r2, [sp, #24]
 800e130:	e779      	b.n	800e026 <_dtoa_r+0x816>
 800e132:	4603      	mov	r3, r0
 800e134:	e7f4      	b.n	800e120 <_dtoa_r+0x910>
 800e136:	9b04      	ldr	r3, [sp, #16]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	dc37      	bgt.n	800e1ac <_dtoa_r+0x99c>
 800e13c:	9b07      	ldr	r3, [sp, #28]
 800e13e:	2b02      	cmp	r3, #2
 800e140:	dd34      	ble.n	800e1ac <_dtoa_r+0x99c>
 800e142:	9b04      	ldr	r3, [sp, #16]
 800e144:	9301      	str	r3, [sp, #4]
 800e146:	9b01      	ldr	r3, [sp, #4]
 800e148:	b963      	cbnz	r3, 800e164 <_dtoa_r+0x954>
 800e14a:	4631      	mov	r1, r6
 800e14c:	2205      	movs	r2, #5
 800e14e:	4620      	mov	r0, r4
 800e150:	f000 fac4 	bl	800e6dc <__multadd>
 800e154:	4601      	mov	r1, r0
 800e156:	4606      	mov	r6, r0
 800e158:	4650      	mov	r0, sl
 800e15a:	f000 fcd9 	bl	800eb10 <__mcmp>
 800e15e:	2800      	cmp	r0, #0
 800e160:	f73f adbb 	bgt.w	800dcda <_dtoa_r+0x4ca>
 800e164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e166:	9d00      	ldr	r5, [sp, #0]
 800e168:	ea6f 0b03 	mvn.w	fp, r3
 800e16c:	f04f 0800 	mov.w	r8, #0
 800e170:	4631      	mov	r1, r6
 800e172:	4620      	mov	r0, r4
 800e174:	f000 fa90 	bl	800e698 <_Bfree>
 800e178:	2f00      	cmp	r7, #0
 800e17a:	f43f aeab 	beq.w	800ded4 <_dtoa_r+0x6c4>
 800e17e:	f1b8 0f00 	cmp.w	r8, #0
 800e182:	d005      	beq.n	800e190 <_dtoa_r+0x980>
 800e184:	45b8      	cmp	r8, r7
 800e186:	d003      	beq.n	800e190 <_dtoa_r+0x980>
 800e188:	4641      	mov	r1, r8
 800e18a:	4620      	mov	r0, r4
 800e18c:	f000 fa84 	bl	800e698 <_Bfree>
 800e190:	4639      	mov	r1, r7
 800e192:	4620      	mov	r0, r4
 800e194:	f000 fa80 	bl	800e698 <_Bfree>
 800e198:	e69c      	b.n	800ded4 <_dtoa_r+0x6c4>
 800e19a:	2600      	movs	r6, #0
 800e19c:	4637      	mov	r7, r6
 800e19e:	e7e1      	b.n	800e164 <_dtoa_r+0x954>
 800e1a0:	46bb      	mov	fp, r7
 800e1a2:	4637      	mov	r7, r6
 800e1a4:	e599      	b.n	800dcda <_dtoa_r+0x4ca>
 800e1a6:	bf00      	nop
 800e1a8:	40240000 	.word	0x40240000
 800e1ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f000 80c8 	beq.w	800e344 <_dtoa_r+0xb34>
 800e1b4:	9b04      	ldr	r3, [sp, #16]
 800e1b6:	9301      	str	r3, [sp, #4]
 800e1b8:	2d00      	cmp	r5, #0
 800e1ba:	dd05      	ble.n	800e1c8 <_dtoa_r+0x9b8>
 800e1bc:	4639      	mov	r1, r7
 800e1be:	462a      	mov	r2, r5
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f000 fc39 	bl	800ea38 <__lshift>
 800e1c6:	4607      	mov	r7, r0
 800e1c8:	f1b8 0f00 	cmp.w	r8, #0
 800e1cc:	d05b      	beq.n	800e286 <_dtoa_r+0xa76>
 800e1ce:	6879      	ldr	r1, [r7, #4]
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f000 fa21 	bl	800e618 <_Balloc>
 800e1d6:	4605      	mov	r5, r0
 800e1d8:	b928      	cbnz	r0, 800e1e6 <_dtoa_r+0x9d6>
 800e1da:	4b83      	ldr	r3, [pc, #524]	; (800e3e8 <_dtoa_r+0xbd8>)
 800e1dc:	4602      	mov	r2, r0
 800e1de:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e1e2:	f7ff bb2e 	b.w	800d842 <_dtoa_r+0x32>
 800e1e6:	693a      	ldr	r2, [r7, #16]
 800e1e8:	3202      	adds	r2, #2
 800e1ea:	0092      	lsls	r2, r2, #2
 800e1ec:	f107 010c 	add.w	r1, r7, #12
 800e1f0:	300c      	adds	r0, #12
 800e1f2:	f7ff fa74 	bl	800d6de <memcpy>
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	4629      	mov	r1, r5
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f000 fc1c 	bl	800ea38 <__lshift>
 800e200:	9b00      	ldr	r3, [sp, #0]
 800e202:	3301      	adds	r3, #1
 800e204:	9304      	str	r3, [sp, #16]
 800e206:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e20a:	4413      	add	r3, r2
 800e20c:	9308      	str	r3, [sp, #32]
 800e20e:	9b02      	ldr	r3, [sp, #8]
 800e210:	f003 0301 	and.w	r3, r3, #1
 800e214:	46b8      	mov	r8, r7
 800e216:	9306      	str	r3, [sp, #24]
 800e218:	4607      	mov	r7, r0
 800e21a:	9b04      	ldr	r3, [sp, #16]
 800e21c:	4631      	mov	r1, r6
 800e21e:	3b01      	subs	r3, #1
 800e220:	4650      	mov	r0, sl
 800e222:	9301      	str	r3, [sp, #4]
 800e224:	f7ff fa69 	bl	800d6fa <quorem>
 800e228:	4641      	mov	r1, r8
 800e22a:	9002      	str	r0, [sp, #8]
 800e22c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e230:	4650      	mov	r0, sl
 800e232:	f000 fc6d 	bl	800eb10 <__mcmp>
 800e236:	463a      	mov	r2, r7
 800e238:	9005      	str	r0, [sp, #20]
 800e23a:	4631      	mov	r1, r6
 800e23c:	4620      	mov	r0, r4
 800e23e:	f000 fc83 	bl	800eb48 <__mdiff>
 800e242:	68c2      	ldr	r2, [r0, #12]
 800e244:	4605      	mov	r5, r0
 800e246:	bb02      	cbnz	r2, 800e28a <_dtoa_r+0xa7a>
 800e248:	4601      	mov	r1, r0
 800e24a:	4650      	mov	r0, sl
 800e24c:	f000 fc60 	bl	800eb10 <__mcmp>
 800e250:	4602      	mov	r2, r0
 800e252:	4629      	mov	r1, r5
 800e254:	4620      	mov	r0, r4
 800e256:	9209      	str	r2, [sp, #36]	; 0x24
 800e258:	f000 fa1e 	bl	800e698 <_Bfree>
 800e25c:	9b07      	ldr	r3, [sp, #28]
 800e25e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e260:	9d04      	ldr	r5, [sp, #16]
 800e262:	ea43 0102 	orr.w	r1, r3, r2
 800e266:	9b06      	ldr	r3, [sp, #24]
 800e268:	4319      	orrs	r1, r3
 800e26a:	d110      	bne.n	800e28e <_dtoa_r+0xa7e>
 800e26c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e270:	d029      	beq.n	800e2c6 <_dtoa_r+0xab6>
 800e272:	9b05      	ldr	r3, [sp, #20]
 800e274:	2b00      	cmp	r3, #0
 800e276:	dd02      	ble.n	800e27e <_dtoa_r+0xa6e>
 800e278:	9b02      	ldr	r3, [sp, #8]
 800e27a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e27e:	9b01      	ldr	r3, [sp, #4]
 800e280:	f883 9000 	strb.w	r9, [r3]
 800e284:	e774      	b.n	800e170 <_dtoa_r+0x960>
 800e286:	4638      	mov	r0, r7
 800e288:	e7ba      	b.n	800e200 <_dtoa_r+0x9f0>
 800e28a:	2201      	movs	r2, #1
 800e28c:	e7e1      	b.n	800e252 <_dtoa_r+0xa42>
 800e28e:	9b05      	ldr	r3, [sp, #20]
 800e290:	2b00      	cmp	r3, #0
 800e292:	db04      	blt.n	800e29e <_dtoa_r+0xa8e>
 800e294:	9907      	ldr	r1, [sp, #28]
 800e296:	430b      	orrs	r3, r1
 800e298:	9906      	ldr	r1, [sp, #24]
 800e29a:	430b      	orrs	r3, r1
 800e29c:	d120      	bne.n	800e2e0 <_dtoa_r+0xad0>
 800e29e:	2a00      	cmp	r2, #0
 800e2a0:	dded      	ble.n	800e27e <_dtoa_r+0xa6e>
 800e2a2:	4651      	mov	r1, sl
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	f000 fbc6 	bl	800ea38 <__lshift>
 800e2ac:	4631      	mov	r1, r6
 800e2ae:	4682      	mov	sl, r0
 800e2b0:	f000 fc2e 	bl	800eb10 <__mcmp>
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	dc03      	bgt.n	800e2c0 <_dtoa_r+0xab0>
 800e2b8:	d1e1      	bne.n	800e27e <_dtoa_r+0xa6e>
 800e2ba:	f019 0f01 	tst.w	r9, #1
 800e2be:	d0de      	beq.n	800e27e <_dtoa_r+0xa6e>
 800e2c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e2c4:	d1d8      	bne.n	800e278 <_dtoa_r+0xa68>
 800e2c6:	9a01      	ldr	r2, [sp, #4]
 800e2c8:	2339      	movs	r3, #57	; 0x39
 800e2ca:	7013      	strb	r3, [r2, #0]
 800e2cc:	462b      	mov	r3, r5
 800e2ce:	461d      	mov	r5, r3
 800e2d0:	3b01      	subs	r3, #1
 800e2d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e2d6:	2a39      	cmp	r2, #57	; 0x39
 800e2d8:	d06c      	beq.n	800e3b4 <_dtoa_r+0xba4>
 800e2da:	3201      	adds	r2, #1
 800e2dc:	701a      	strb	r2, [r3, #0]
 800e2de:	e747      	b.n	800e170 <_dtoa_r+0x960>
 800e2e0:	2a00      	cmp	r2, #0
 800e2e2:	dd07      	ble.n	800e2f4 <_dtoa_r+0xae4>
 800e2e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e2e8:	d0ed      	beq.n	800e2c6 <_dtoa_r+0xab6>
 800e2ea:	9a01      	ldr	r2, [sp, #4]
 800e2ec:	f109 0301 	add.w	r3, r9, #1
 800e2f0:	7013      	strb	r3, [r2, #0]
 800e2f2:	e73d      	b.n	800e170 <_dtoa_r+0x960>
 800e2f4:	9b04      	ldr	r3, [sp, #16]
 800e2f6:	9a08      	ldr	r2, [sp, #32]
 800e2f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d043      	beq.n	800e388 <_dtoa_r+0xb78>
 800e300:	4651      	mov	r1, sl
 800e302:	2300      	movs	r3, #0
 800e304:	220a      	movs	r2, #10
 800e306:	4620      	mov	r0, r4
 800e308:	f000 f9e8 	bl	800e6dc <__multadd>
 800e30c:	45b8      	cmp	r8, r7
 800e30e:	4682      	mov	sl, r0
 800e310:	f04f 0300 	mov.w	r3, #0
 800e314:	f04f 020a 	mov.w	r2, #10
 800e318:	4641      	mov	r1, r8
 800e31a:	4620      	mov	r0, r4
 800e31c:	d107      	bne.n	800e32e <_dtoa_r+0xb1e>
 800e31e:	f000 f9dd 	bl	800e6dc <__multadd>
 800e322:	4680      	mov	r8, r0
 800e324:	4607      	mov	r7, r0
 800e326:	9b04      	ldr	r3, [sp, #16]
 800e328:	3301      	adds	r3, #1
 800e32a:	9304      	str	r3, [sp, #16]
 800e32c:	e775      	b.n	800e21a <_dtoa_r+0xa0a>
 800e32e:	f000 f9d5 	bl	800e6dc <__multadd>
 800e332:	4639      	mov	r1, r7
 800e334:	4680      	mov	r8, r0
 800e336:	2300      	movs	r3, #0
 800e338:	220a      	movs	r2, #10
 800e33a:	4620      	mov	r0, r4
 800e33c:	f000 f9ce 	bl	800e6dc <__multadd>
 800e340:	4607      	mov	r7, r0
 800e342:	e7f0      	b.n	800e326 <_dtoa_r+0xb16>
 800e344:	9b04      	ldr	r3, [sp, #16]
 800e346:	9301      	str	r3, [sp, #4]
 800e348:	9d00      	ldr	r5, [sp, #0]
 800e34a:	4631      	mov	r1, r6
 800e34c:	4650      	mov	r0, sl
 800e34e:	f7ff f9d4 	bl	800d6fa <quorem>
 800e352:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e356:	9b00      	ldr	r3, [sp, #0]
 800e358:	f805 9b01 	strb.w	r9, [r5], #1
 800e35c:	1aea      	subs	r2, r5, r3
 800e35e:	9b01      	ldr	r3, [sp, #4]
 800e360:	4293      	cmp	r3, r2
 800e362:	dd07      	ble.n	800e374 <_dtoa_r+0xb64>
 800e364:	4651      	mov	r1, sl
 800e366:	2300      	movs	r3, #0
 800e368:	220a      	movs	r2, #10
 800e36a:	4620      	mov	r0, r4
 800e36c:	f000 f9b6 	bl	800e6dc <__multadd>
 800e370:	4682      	mov	sl, r0
 800e372:	e7ea      	b.n	800e34a <_dtoa_r+0xb3a>
 800e374:	9b01      	ldr	r3, [sp, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	bfc8      	it	gt
 800e37a:	461d      	movgt	r5, r3
 800e37c:	9b00      	ldr	r3, [sp, #0]
 800e37e:	bfd8      	it	le
 800e380:	2501      	movle	r5, #1
 800e382:	441d      	add	r5, r3
 800e384:	f04f 0800 	mov.w	r8, #0
 800e388:	4651      	mov	r1, sl
 800e38a:	2201      	movs	r2, #1
 800e38c:	4620      	mov	r0, r4
 800e38e:	f000 fb53 	bl	800ea38 <__lshift>
 800e392:	4631      	mov	r1, r6
 800e394:	4682      	mov	sl, r0
 800e396:	f000 fbbb 	bl	800eb10 <__mcmp>
 800e39a:	2800      	cmp	r0, #0
 800e39c:	dc96      	bgt.n	800e2cc <_dtoa_r+0xabc>
 800e39e:	d102      	bne.n	800e3a6 <_dtoa_r+0xb96>
 800e3a0:	f019 0f01 	tst.w	r9, #1
 800e3a4:	d192      	bne.n	800e2cc <_dtoa_r+0xabc>
 800e3a6:	462b      	mov	r3, r5
 800e3a8:	461d      	mov	r5, r3
 800e3aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3ae:	2a30      	cmp	r2, #48	; 0x30
 800e3b0:	d0fa      	beq.n	800e3a8 <_dtoa_r+0xb98>
 800e3b2:	e6dd      	b.n	800e170 <_dtoa_r+0x960>
 800e3b4:	9a00      	ldr	r2, [sp, #0]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d189      	bne.n	800e2ce <_dtoa_r+0xabe>
 800e3ba:	f10b 0b01 	add.w	fp, fp, #1
 800e3be:	2331      	movs	r3, #49	; 0x31
 800e3c0:	e796      	b.n	800e2f0 <_dtoa_r+0xae0>
 800e3c2:	4b0a      	ldr	r3, [pc, #40]	; (800e3ec <_dtoa_r+0xbdc>)
 800e3c4:	f7ff ba99 	b.w	800d8fa <_dtoa_r+0xea>
 800e3c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f47f aa6d 	bne.w	800d8aa <_dtoa_r+0x9a>
 800e3d0:	4b07      	ldr	r3, [pc, #28]	; (800e3f0 <_dtoa_r+0xbe0>)
 800e3d2:	f7ff ba92 	b.w	800d8fa <_dtoa_r+0xea>
 800e3d6:	9b01      	ldr	r3, [sp, #4]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	dcb5      	bgt.n	800e348 <_dtoa_r+0xb38>
 800e3dc:	9b07      	ldr	r3, [sp, #28]
 800e3de:	2b02      	cmp	r3, #2
 800e3e0:	f73f aeb1 	bgt.w	800e146 <_dtoa_r+0x936>
 800e3e4:	e7b0      	b.n	800e348 <_dtoa_r+0xb38>
 800e3e6:	bf00      	nop
 800e3e8:	0801076d 	.word	0x0801076d
 800e3ec:	080106c3 	.word	0x080106c3
 800e3f0:	080106f1 	.word	0x080106f1

0800e3f4 <_free_r>:
 800e3f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3f6:	2900      	cmp	r1, #0
 800e3f8:	d044      	beq.n	800e484 <_free_r+0x90>
 800e3fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3fe:	9001      	str	r0, [sp, #4]
 800e400:	2b00      	cmp	r3, #0
 800e402:	f1a1 0404 	sub.w	r4, r1, #4
 800e406:	bfb8      	it	lt
 800e408:	18e4      	addlt	r4, r4, r3
 800e40a:	f000 f8f9 	bl	800e600 <__malloc_lock>
 800e40e:	4a1e      	ldr	r2, [pc, #120]	; (800e488 <_free_r+0x94>)
 800e410:	9801      	ldr	r0, [sp, #4]
 800e412:	6813      	ldr	r3, [r2, #0]
 800e414:	b933      	cbnz	r3, 800e424 <_free_r+0x30>
 800e416:	6063      	str	r3, [r4, #4]
 800e418:	6014      	str	r4, [r2, #0]
 800e41a:	b003      	add	sp, #12
 800e41c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e420:	f000 b8f4 	b.w	800e60c <__malloc_unlock>
 800e424:	42a3      	cmp	r3, r4
 800e426:	d908      	bls.n	800e43a <_free_r+0x46>
 800e428:	6825      	ldr	r5, [r4, #0]
 800e42a:	1961      	adds	r1, r4, r5
 800e42c:	428b      	cmp	r3, r1
 800e42e:	bf01      	itttt	eq
 800e430:	6819      	ldreq	r1, [r3, #0]
 800e432:	685b      	ldreq	r3, [r3, #4]
 800e434:	1949      	addeq	r1, r1, r5
 800e436:	6021      	streq	r1, [r4, #0]
 800e438:	e7ed      	b.n	800e416 <_free_r+0x22>
 800e43a:	461a      	mov	r2, r3
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	b10b      	cbz	r3, 800e444 <_free_r+0x50>
 800e440:	42a3      	cmp	r3, r4
 800e442:	d9fa      	bls.n	800e43a <_free_r+0x46>
 800e444:	6811      	ldr	r1, [r2, #0]
 800e446:	1855      	adds	r5, r2, r1
 800e448:	42a5      	cmp	r5, r4
 800e44a:	d10b      	bne.n	800e464 <_free_r+0x70>
 800e44c:	6824      	ldr	r4, [r4, #0]
 800e44e:	4421      	add	r1, r4
 800e450:	1854      	adds	r4, r2, r1
 800e452:	42a3      	cmp	r3, r4
 800e454:	6011      	str	r1, [r2, #0]
 800e456:	d1e0      	bne.n	800e41a <_free_r+0x26>
 800e458:	681c      	ldr	r4, [r3, #0]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	6053      	str	r3, [r2, #4]
 800e45e:	440c      	add	r4, r1
 800e460:	6014      	str	r4, [r2, #0]
 800e462:	e7da      	b.n	800e41a <_free_r+0x26>
 800e464:	d902      	bls.n	800e46c <_free_r+0x78>
 800e466:	230c      	movs	r3, #12
 800e468:	6003      	str	r3, [r0, #0]
 800e46a:	e7d6      	b.n	800e41a <_free_r+0x26>
 800e46c:	6825      	ldr	r5, [r4, #0]
 800e46e:	1961      	adds	r1, r4, r5
 800e470:	428b      	cmp	r3, r1
 800e472:	bf04      	itt	eq
 800e474:	6819      	ldreq	r1, [r3, #0]
 800e476:	685b      	ldreq	r3, [r3, #4]
 800e478:	6063      	str	r3, [r4, #4]
 800e47a:	bf04      	itt	eq
 800e47c:	1949      	addeq	r1, r1, r5
 800e47e:	6021      	streq	r1, [r4, #0]
 800e480:	6054      	str	r4, [r2, #4]
 800e482:	e7ca      	b.n	800e41a <_free_r+0x26>
 800e484:	b003      	add	sp, #12
 800e486:	bd30      	pop	{r4, r5, pc}
 800e488:	20014008 	.word	0x20014008

0800e48c <malloc>:
 800e48c:	4b02      	ldr	r3, [pc, #8]	; (800e498 <malloc+0xc>)
 800e48e:	4601      	mov	r1, r0
 800e490:	6818      	ldr	r0, [r3, #0]
 800e492:	f000 b823 	b.w	800e4dc <_malloc_r>
 800e496:	bf00      	nop
 800e498:	200001dc 	.word	0x200001dc

0800e49c <sbrk_aligned>:
 800e49c:	b570      	push	{r4, r5, r6, lr}
 800e49e:	4e0e      	ldr	r6, [pc, #56]	; (800e4d8 <sbrk_aligned+0x3c>)
 800e4a0:	460c      	mov	r4, r1
 800e4a2:	6831      	ldr	r1, [r6, #0]
 800e4a4:	4605      	mov	r5, r0
 800e4a6:	b911      	cbnz	r1, 800e4ae <sbrk_aligned+0x12>
 800e4a8:	f000 fcee 	bl	800ee88 <_sbrk_r>
 800e4ac:	6030      	str	r0, [r6, #0]
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	f000 fce9 	bl	800ee88 <_sbrk_r>
 800e4b6:	1c43      	adds	r3, r0, #1
 800e4b8:	d00a      	beq.n	800e4d0 <sbrk_aligned+0x34>
 800e4ba:	1cc4      	adds	r4, r0, #3
 800e4bc:	f024 0403 	bic.w	r4, r4, #3
 800e4c0:	42a0      	cmp	r0, r4
 800e4c2:	d007      	beq.n	800e4d4 <sbrk_aligned+0x38>
 800e4c4:	1a21      	subs	r1, r4, r0
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	f000 fcde 	bl	800ee88 <_sbrk_r>
 800e4cc:	3001      	adds	r0, #1
 800e4ce:	d101      	bne.n	800e4d4 <sbrk_aligned+0x38>
 800e4d0:	f04f 34ff 	mov.w	r4, #4294967295
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	bd70      	pop	{r4, r5, r6, pc}
 800e4d8:	2001400c 	.word	0x2001400c

0800e4dc <_malloc_r>:
 800e4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4e0:	1ccd      	adds	r5, r1, #3
 800e4e2:	f025 0503 	bic.w	r5, r5, #3
 800e4e6:	3508      	adds	r5, #8
 800e4e8:	2d0c      	cmp	r5, #12
 800e4ea:	bf38      	it	cc
 800e4ec:	250c      	movcc	r5, #12
 800e4ee:	2d00      	cmp	r5, #0
 800e4f0:	4607      	mov	r7, r0
 800e4f2:	db01      	blt.n	800e4f8 <_malloc_r+0x1c>
 800e4f4:	42a9      	cmp	r1, r5
 800e4f6:	d905      	bls.n	800e504 <_malloc_r+0x28>
 800e4f8:	230c      	movs	r3, #12
 800e4fa:	603b      	str	r3, [r7, #0]
 800e4fc:	2600      	movs	r6, #0
 800e4fe:	4630      	mov	r0, r6
 800e500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e504:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e5d8 <_malloc_r+0xfc>
 800e508:	f000 f87a 	bl	800e600 <__malloc_lock>
 800e50c:	f8d8 3000 	ldr.w	r3, [r8]
 800e510:	461c      	mov	r4, r3
 800e512:	bb5c      	cbnz	r4, 800e56c <_malloc_r+0x90>
 800e514:	4629      	mov	r1, r5
 800e516:	4638      	mov	r0, r7
 800e518:	f7ff ffc0 	bl	800e49c <sbrk_aligned>
 800e51c:	1c43      	adds	r3, r0, #1
 800e51e:	4604      	mov	r4, r0
 800e520:	d155      	bne.n	800e5ce <_malloc_r+0xf2>
 800e522:	f8d8 4000 	ldr.w	r4, [r8]
 800e526:	4626      	mov	r6, r4
 800e528:	2e00      	cmp	r6, #0
 800e52a:	d145      	bne.n	800e5b8 <_malloc_r+0xdc>
 800e52c:	2c00      	cmp	r4, #0
 800e52e:	d048      	beq.n	800e5c2 <_malloc_r+0xe6>
 800e530:	6823      	ldr	r3, [r4, #0]
 800e532:	4631      	mov	r1, r6
 800e534:	4638      	mov	r0, r7
 800e536:	eb04 0903 	add.w	r9, r4, r3
 800e53a:	f000 fca5 	bl	800ee88 <_sbrk_r>
 800e53e:	4581      	cmp	r9, r0
 800e540:	d13f      	bne.n	800e5c2 <_malloc_r+0xe6>
 800e542:	6821      	ldr	r1, [r4, #0]
 800e544:	1a6d      	subs	r5, r5, r1
 800e546:	4629      	mov	r1, r5
 800e548:	4638      	mov	r0, r7
 800e54a:	f7ff ffa7 	bl	800e49c <sbrk_aligned>
 800e54e:	3001      	adds	r0, #1
 800e550:	d037      	beq.n	800e5c2 <_malloc_r+0xe6>
 800e552:	6823      	ldr	r3, [r4, #0]
 800e554:	442b      	add	r3, r5
 800e556:	6023      	str	r3, [r4, #0]
 800e558:	f8d8 3000 	ldr.w	r3, [r8]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d038      	beq.n	800e5d2 <_malloc_r+0xf6>
 800e560:	685a      	ldr	r2, [r3, #4]
 800e562:	42a2      	cmp	r2, r4
 800e564:	d12b      	bne.n	800e5be <_malloc_r+0xe2>
 800e566:	2200      	movs	r2, #0
 800e568:	605a      	str	r2, [r3, #4]
 800e56a:	e00f      	b.n	800e58c <_malloc_r+0xb0>
 800e56c:	6822      	ldr	r2, [r4, #0]
 800e56e:	1b52      	subs	r2, r2, r5
 800e570:	d41f      	bmi.n	800e5b2 <_malloc_r+0xd6>
 800e572:	2a0b      	cmp	r2, #11
 800e574:	d917      	bls.n	800e5a6 <_malloc_r+0xca>
 800e576:	1961      	adds	r1, r4, r5
 800e578:	42a3      	cmp	r3, r4
 800e57a:	6025      	str	r5, [r4, #0]
 800e57c:	bf18      	it	ne
 800e57e:	6059      	strne	r1, [r3, #4]
 800e580:	6863      	ldr	r3, [r4, #4]
 800e582:	bf08      	it	eq
 800e584:	f8c8 1000 	streq.w	r1, [r8]
 800e588:	5162      	str	r2, [r4, r5]
 800e58a:	604b      	str	r3, [r1, #4]
 800e58c:	4638      	mov	r0, r7
 800e58e:	f104 060b 	add.w	r6, r4, #11
 800e592:	f000 f83b 	bl	800e60c <__malloc_unlock>
 800e596:	f026 0607 	bic.w	r6, r6, #7
 800e59a:	1d23      	adds	r3, r4, #4
 800e59c:	1af2      	subs	r2, r6, r3
 800e59e:	d0ae      	beq.n	800e4fe <_malloc_r+0x22>
 800e5a0:	1b9b      	subs	r3, r3, r6
 800e5a2:	50a3      	str	r3, [r4, r2]
 800e5a4:	e7ab      	b.n	800e4fe <_malloc_r+0x22>
 800e5a6:	42a3      	cmp	r3, r4
 800e5a8:	6862      	ldr	r2, [r4, #4]
 800e5aa:	d1dd      	bne.n	800e568 <_malloc_r+0x8c>
 800e5ac:	f8c8 2000 	str.w	r2, [r8]
 800e5b0:	e7ec      	b.n	800e58c <_malloc_r+0xb0>
 800e5b2:	4623      	mov	r3, r4
 800e5b4:	6864      	ldr	r4, [r4, #4]
 800e5b6:	e7ac      	b.n	800e512 <_malloc_r+0x36>
 800e5b8:	4634      	mov	r4, r6
 800e5ba:	6876      	ldr	r6, [r6, #4]
 800e5bc:	e7b4      	b.n	800e528 <_malloc_r+0x4c>
 800e5be:	4613      	mov	r3, r2
 800e5c0:	e7cc      	b.n	800e55c <_malloc_r+0x80>
 800e5c2:	230c      	movs	r3, #12
 800e5c4:	603b      	str	r3, [r7, #0]
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	f000 f820 	bl	800e60c <__malloc_unlock>
 800e5cc:	e797      	b.n	800e4fe <_malloc_r+0x22>
 800e5ce:	6025      	str	r5, [r4, #0]
 800e5d0:	e7dc      	b.n	800e58c <_malloc_r+0xb0>
 800e5d2:	605b      	str	r3, [r3, #4]
 800e5d4:	deff      	udf	#255	; 0xff
 800e5d6:	bf00      	nop
 800e5d8:	20014008 	.word	0x20014008

0800e5dc <__ascii_mbtowc>:
 800e5dc:	b082      	sub	sp, #8
 800e5de:	b901      	cbnz	r1, 800e5e2 <__ascii_mbtowc+0x6>
 800e5e0:	a901      	add	r1, sp, #4
 800e5e2:	b142      	cbz	r2, 800e5f6 <__ascii_mbtowc+0x1a>
 800e5e4:	b14b      	cbz	r3, 800e5fa <__ascii_mbtowc+0x1e>
 800e5e6:	7813      	ldrb	r3, [r2, #0]
 800e5e8:	600b      	str	r3, [r1, #0]
 800e5ea:	7812      	ldrb	r2, [r2, #0]
 800e5ec:	1e10      	subs	r0, r2, #0
 800e5ee:	bf18      	it	ne
 800e5f0:	2001      	movne	r0, #1
 800e5f2:	b002      	add	sp, #8
 800e5f4:	4770      	bx	lr
 800e5f6:	4610      	mov	r0, r2
 800e5f8:	e7fb      	b.n	800e5f2 <__ascii_mbtowc+0x16>
 800e5fa:	f06f 0001 	mvn.w	r0, #1
 800e5fe:	e7f8      	b.n	800e5f2 <__ascii_mbtowc+0x16>

0800e600 <__malloc_lock>:
 800e600:	4801      	ldr	r0, [pc, #4]	; (800e608 <__malloc_lock+0x8>)
 800e602:	f7ff b86a 	b.w	800d6da <__retarget_lock_acquire_recursive>
 800e606:	bf00      	nop
 800e608:	20014004 	.word	0x20014004

0800e60c <__malloc_unlock>:
 800e60c:	4801      	ldr	r0, [pc, #4]	; (800e614 <__malloc_unlock+0x8>)
 800e60e:	f7ff b865 	b.w	800d6dc <__retarget_lock_release_recursive>
 800e612:	bf00      	nop
 800e614:	20014004 	.word	0x20014004

0800e618 <_Balloc>:
 800e618:	b570      	push	{r4, r5, r6, lr}
 800e61a:	69c6      	ldr	r6, [r0, #28]
 800e61c:	4604      	mov	r4, r0
 800e61e:	460d      	mov	r5, r1
 800e620:	b976      	cbnz	r6, 800e640 <_Balloc+0x28>
 800e622:	2010      	movs	r0, #16
 800e624:	f7ff ff32 	bl	800e48c <malloc>
 800e628:	4602      	mov	r2, r0
 800e62a:	61e0      	str	r0, [r4, #28]
 800e62c:	b920      	cbnz	r0, 800e638 <_Balloc+0x20>
 800e62e:	4b18      	ldr	r3, [pc, #96]	; (800e690 <_Balloc+0x78>)
 800e630:	4818      	ldr	r0, [pc, #96]	; (800e694 <_Balloc+0x7c>)
 800e632:	216b      	movs	r1, #107	; 0x6b
 800e634:	f000 fc38 	bl	800eea8 <__assert_func>
 800e638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e63c:	6006      	str	r6, [r0, #0]
 800e63e:	60c6      	str	r6, [r0, #12]
 800e640:	69e6      	ldr	r6, [r4, #28]
 800e642:	68f3      	ldr	r3, [r6, #12]
 800e644:	b183      	cbz	r3, 800e668 <_Balloc+0x50>
 800e646:	69e3      	ldr	r3, [r4, #28]
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e64e:	b9b8      	cbnz	r0, 800e680 <_Balloc+0x68>
 800e650:	2101      	movs	r1, #1
 800e652:	fa01 f605 	lsl.w	r6, r1, r5
 800e656:	1d72      	adds	r2, r6, #5
 800e658:	0092      	lsls	r2, r2, #2
 800e65a:	4620      	mov	r0, r4
 800e65c:	f000 fc42 	bl	800eee4 <_calloc_r>
 800e660:	b160      	cbz	r0, 800e67c <_Balloc+0x64>
 800e662:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e666:	e00e      	b.n	800e686 <_Balloc+0x6e>
 800e668:	2221      	movs	r2, #33	; 0x21
 800e66a:	2104      	movs	r1, #4
 800e66c:	4620      	mov	r0, r4
 800e66e:	f000 fc39 	bl	800eee4 <_calloc_r>
 800e672:	69e3      	ldr	r3, [r4, #28]
 800e674:	60f0      	str	r0, [r6, #12]
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1e4      	bne.n	800e646 <_Balloc+0x2e>
 800e67c:	2000      	movs	r0, #0
 800e67e:	bd70      	pop	{r4, r5, r6, pc}
 800e680:	6802      	ldr	r2, [r0, #0]
 800e682:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e686:	2300      	movs	r3, #0
 800e688:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e68c:	e7f7      	b.n	800e67e <_Balloc+0x66>
 800e68e:	bf00      	nop
 800e690:	080106fe 	.word	0x080106fe
 800e694:	0801077e 	.word	0x0801077e

0800e698 <_Bfree>:
 800e698:	b570      	push	{r4, r5, r6, lr}
 800e69a:	69c6      	ldr	r6, [r0, #28]
 800e69c:	4605      	mov	r5, r0
 800e69e:	460c      	mov	r4, r1
 800e6a0:	b976      	cbnz	r6, 800e6c0 <_Bfree+0x28>
 800e6a2:	2010      	movs	r0, #16
 800e6a4:	f7ff fef2 	bl	800e48c <malloc>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	61e8      	str	r0, [r5, #28]
 800e6ac:	b920      	cbnz	r0, 800e6b8 <_Bfree+0x20>
 800e6ae:	4b09      	ldr	r3, [pc, #36]	; (800e6d4 <_Bfree+0x3c>)
 800e6b0:	4809      	ldr	r0, [pc, #36]	; (800e6d8 <_Bfree+0x40>)
 800e6b2:	218f      	movs	r1, #143	; 0x8f
 800e6b4:	f000 fbf8 	bl	800eea8 <__assert_func>
 800e6b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6bc:	6006      	str	r6, [r0, #0]
 800e6be:	60c6      	str	r6, [r0, #12]
 800e6c0:	b13c      	cbz	r4, 800e6d2 <_Bfree+0x3a>
 800e6c2:	69eb      	ldr	r3, [r5, #28]
 800e6c4:	6862      	ldr	r2, [r4, #4]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e6cc:	6021      	str	r1, [r4, #0]
 800e6ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e6d2:	bd70      	pop	{r4, r5, r6, pc}
 800e6d4:	080106fe 	.word	0x080106fe
 800e6d8:	0801077e 	.word	0x0801077e

0800e6dc <__multadd>:
 800e6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6e0:	690d      	ldr	r5, [r1, #16]
 800e6e2:	4607      	mov	r7, r0
 800e6e4:	460c      	mov	r4, r1
 800e6e6:	461e      	mov	r6, r3
 800e6e8:	f101 0c14 	add.w	ip, r1, #20
 800e6ec:	2000      	movs	r0, #0
 800e6ee:	f8dc 3000 	ldr.w	r3, [ip]
 800e6f2:	b299      	uxth	r1, r3
 800e6f4:	fb02 6101 	mla	r1, r2, r1, r6
 800e6f8:	0c1e      	lsrs	r6, r3, #16
 800e6fa:	0c0b      	lsrs	r3, r1, #16
 800e6fc:	fb02 3306 	mla	r3, r2, r6, r3
 800e700:	b289      	uxth	r1, r1
 800e702:	3001      	adds	r0, #1
 800e704:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e708:	4285      	cmp	r5, r0
 800e70a:	f84c 1b04 	str.w	r1, [ip], #4
 800e70e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e712:	dcec      	bgt.n	800e6ee <__multadd+0x12>
 800e714:	b30e      	cbz	r6, 800e75a <__multadd+0x7e>
 800e716:	68a3      	ldr	r3, [r4, #8]
 800e718:	42ab      	cmp	r3, r5
 800e71a:	dc19      	bgt.n	800e750 <__multadd+0x74>
 800e71c:	6861      	ldr	r1, [r4, #4]
 800e71e:	4638      	mov	r0, r7
 800e720:	3101      	adds	r1, #1
 800e722:	f7ff ff79 	bl	800e618 <_Balloc>
 800e726:	4680      	mov	r8, r0
 800e728:	b928      	cbnz	r0, 800e736 <__multadd+0x5a>
 800e72a:	4602      	mov	r2, r0
 800e72c:	4b0c      	ldr	r3, [pc, #48]	; (800e760 <__multadd+0x84>)
 800e72e:	480d      	ldr	r0, [pc, #52]	; (800e764 <__multadd+0x88>)
 800e730:	21ba      	movs	r1, #186	; 0xba
 800e732:	f000 fbb9 	bl	800eea8 <__assert_func>
 800e736:	6922      	ldr	r2, [r4, #16]
 800e738:	3202      	adds	r2, #2
 800e73a:	f104 010c 	add.w	r1, r4, #12
 800e73e:	0092      	lsls	r2, r2, #2
 800e740:	300c      	adds	r0, #12
 800e742:	f7fe ffcc 	bl	800d6de <memcpy>
 800e746:	4621      	mov	r1, r4
 800e748:	4638      	mov	r0, r7
 800e74a:	f7ff ffa5 	bl	800e698 <_Bfree>
 800e74e:	4644      	mov	r4, r8
 800e750:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e754:	3501      	adds	r5, #1
 800e756:	615e      	str	r6, [r3, #20]
 800e758:	6125      	str	r5, [r4, #16]
 800e75a:	4620      	mov	r0, r4
 800e75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e760:	0801076d 	.word	0x0801076d
 800e764:	0801077e 	.word	0x0801077e

0800e768 <__hi0bits>:
 800e768:	0c03      	lsrs	r3, r0, #16
 800e76a:	041b      	lsls	r3, r3, #16
 800e76c:	b9d3      	cbnz	r3, 800e7a4 <__hi0bits+0x3c>
 800e76e:	0400      	lsls	r0, r0, #16
 800e770:	2310      	movs	r3, #16
 800e772:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e776:	bf04      	itt	eq
 800e778:	0200      	lsleq	r0, r0, #8
 800e77a:	3308      	addeq	r3, #8
 800e77c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e780:	bf04      	itt	eq
 800e782:	0100      	lsleq	r0, r0, #4
 800e784:	3304      	addeq	r3, #4
 800e786:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e78a:	bf04      	itt	eq
 800e78c:	0080      	lsleq	r0, r0, #2
 800e78e:	3302      	addeq	r3, #2
 800e790:	2800      	cmp	r0, #0
 800e792:	db05      	blt.n	800e7a0 <__hi0bits+0x38>
 800e794:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e798:	f103 0301 	add.w	r3, r3, #1
 800e79c:	bf08      	it	eq
 800e79e:	2320      	moveq	r3, #32
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	4770      	bx	lr
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	e7e4      	b.n	800e772 <__hi0bits+0xa>

0800e7a8 <__lo0bits>:
 800e7a8:	6803      	ldr	r3, [r0, #0]
 800e7aa:	f013 0207 	ands.w	r2, r3, #7
 800e7ae:	d00c      	beq.n	800e7ca <__lo0bits+0x22>
 800e7b0:	07d9      	lsls	r1, r3, #31
 800e7b2:	d422      	bmi.n	800e7fa <__lo0bits+0x52>
 800e7b4:	079a      	lsls	r2, r3, #30
 800e7b6:	bf49      	itett	mi
 800e7b8:	085b      	lsrmi	r3, r3, #1
 800e7ba:	089b      	lsrpl	r3, r3, #2
 800e7bc:	6003      	strmi	r3, [r0, #0]
 800e7be:	2201      	movmi	r2, #1
 800e7c0:	bf5c      	itt	pl
 800e7c2:	6003      	strpl	r3, [r0, #0]
 800e7c4:	2202      	movpl	r2, #2
 800e7c6:	4610      	mov	r0, r2
 800e7c8:	4770      	bx	lr
 800e7ca:	b299      	uxth	r1, r3
 800e7cc:	b909      	cbnz	r1, 800e7d2 <__lo0bits+0x2a>
 800e7ce:	0c1b      	lsrs	r3, r3, #16
 800e7d0:	2210      	movs	r2, #16
 800e7d2:	b2d9      	uxtb	r1, r3
 800e7d4:	b909      	cbnz	r1, 800e7da <__lo0bits+0x32>
 800e7d6:	3208      	adds	r2, #8
 800e7d8:	0a1b      	lsrs	r3, r3, #8
 800e7da:	0719      	lsls	r1, r3, #28
 800e7dc:	bf04      	itt	eq
 800e7de:	091b      	lsreq	r3, r3, #4
 800e7e0:	3204      	addeq	r2, #4
 800e7e2:	0799      	lsls	r1, r3, #30
 800e7e4:	bf04      	itt	eq
 800e7e6:	089b      	lsreq	r3, r3, #2
 800e7e8:	3202      	addeq	r2, #2
 800e7ea:	07d9      	lsls	r1, r3, #31
 800e7ec:	d403      	bmi.n	800e7f6 <__lo0bits+0x4e>
 800e7ee:	085b      	lsrs	r3, r3, #1
 800e7f0:	f102 0201 	add.w	r2, r2, #1
 800e7f4:	d003      	beq.n	800e7fe <__lo0bits+0x56>
 800e7f6:	6003      	str	r3, [r0, #0]
 800e7f8:	e7e5      	b.n	800e7c6 <__lo0bits+0x1e>
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	e7e3      	b.n	800e7c6 <__lo0bits+0x1e>
 800e7fe:	2220      	movs	r2, #32
 800e800:	e7e1      	b.n	800e7c6 <__lo0bits+0x1e>
	...

0800e804 <__i2b>:
 800e804:	b510      	push	{r4, lr}
 800e806:	460c      	mov	r4, r1
 800e808:	2101      	movs	r1, #1
 800e80a:	f7ff ff05 	bl	800e618 <_Balloc>
 800e80e:	4602      	mov	r2, r0
 800e810:	b928      	cbnz	r0, 800e81e <__i2b+0x1a>
 800e812:	4b05      	ldr	r3, [pc, #20]	; (800e828 <__i2b+0x24>)
 800e814:	4805      	ldr	r0, [pc, #20]	; (800e82c <__i2b+0x28>)
 800e816:	f240 1145 	movw	r1, #325	; 0x145
 800e81a:	f000 fb45 	bl	800eea8 <__assert_func>
 800e81e:	2301      	movs	r3, #1
 800e820:	6144      	str	r4, [r0, #20]
 800e822:	6103      	str	r3, [r0, #16]
 800e824:	bd10      	pop	{r4, pc}
 800e826:	bf00      	nop
 800e828:	0801076d 	.word	0x0801076d
 800e82c:	0801077e 	.word	0x0801077e

0800e830 <__multiply>:
 800e830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e834:	4691      	mov	r9, r2
 800e836:	690a      	ldr	r2, [r1, #16]
 800e838:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	bfb8      	it	lt
 800e840:	460b      	movlt	r3, r1
 800e842:	460c      	mov	r4, r1
 800e844:	bfbc      	itt	lt
 800e846:	464c      	movlt	r4, r9
 800e848:	4699      	movlt	r9, r3
 800e84a:	6927      	ldr	r7, [r4, #16]
 800e84c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e850:	68a3      	ldr	r3, [r4, #8]
 800e852:	6861      	ldr	r1, [r4, #4]
 800e854:	eb07 060a 	add.w	r6, r7, sl
 800e858:	42b3      	cmp	r3, r6
 800e85a:	b085      	sub	sp, #20
 800e85c:	bfb8      	it	lt
 800e85e:	3101      	addlt	r1, #1
 800e860:	f7ff feda 	bl	800e618 <_Balloc>
 800e864:	b930      	cbnz	r0, 800e874 <__multiply+0x44>
 800e866:	4602      	mov	r2, r0
 800e868:	4b44      	ldr	r3, [pc, #272]	; (800e97c <__multiply+0x14c>)
 800e86a:	4845      	ldr	r0, [pc, #276]	; (800e980 <__multiply+0x150>)
 800e86c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e870:	f000 fb1a 	bl	800eea8 <__assert_func>
 800e874:	f100 0514 	add.w	r5, r0, #20
 800e878:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e87c:	462b      	mov	r3, r5
 800e87e:	2200      	movs	r2, #0
 800e880:	4543      	cmp	r3, r8
 800e882:	d321      	bcc.n	800e8c8 <__multiply+0x98>
 800e884:	f104 0314 	add.w	r3, r4, #20
 800e888:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e88c:	f109 0314 	add.w	r3, r9, #20
 800e890:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e894:	9202      	str	r2, [sp, #8]
 800e896:	1b3a      	subs	r2, r7, r4
 800e898:	3a15      	subs	r2, #21
 800e89a:	f022 0203 	bic.w	r2, r2, #3
 800e89e:	3204      	adds	r2, #4
 800e8a0:	f104 0115 	add.w	r1, r4, #21
 800e8a4:	428f      	cmp	r7, r1
 800e8a6:	bf38      	it	cc
 800e8a8:	2204      	movcc	r2, #4
 800e8aa:	9201      	str	r2, [sp, #4]
 800e8ac:	9a02      	ldr	r2, [sp, #8]
 800e8ae:	9303      	str	r3, [sp, #12]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d80c      	bhi.n	800e8ce <__multiply+0x9e>
 800e8b4:	2e00      	cmp	r6, #0
 800e8b6:	dd03      	ble.n	800e8c0 <__multiply+0x90>
 800e8b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d05b      	beq.n	800e978 <__multiply+0x148>
 800e8c0:	6106      	str	r6, [r0, #16]
 800e8c2:	b005      	add	sp, #20
 800e8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8c8:	f843 2b04 	str.w	r2, [r3], #4
 800e8cc:	e7d8      	b.n	800e880 <__multiply+0x50>
 800e8ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800e8d2:	f1ba 0f00 	cmp.w	sl, #0
 800e8d6:	d024      	beq.n	800e922 <__multiply+0xf2>
 800e8d8:	f104 0e14 	add.w	lr, r4, #20
 800e8dc:	46a9      	mov	r9, r5
 800e8de:	f04f 0c00 	mov.w	ip, #0
 800e8e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e8e6:	f8d9 1000 	ldr.w	r1, [r9]
 800e8ea:	fa1f fb82 	uxth.w	fp, r2
 800e8ee:	b289      	uxth	r1, r1
 800e8f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e8f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e8f8:	f8d9 2000 	ldr.w	r2, [r9]
 800e8fc:	4461      	add	r1, ip
 800e8fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e902:	fb0a c20b 	mla	r2, sl, fp, ip
 800e906:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e90a:	b289      	uxth	r1, r1
 800e90c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e910:	4577      	cmp	r7, lr
 800e912:	f849 1b04 	str.w	r1, [r9], #4
 800e916:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e91a:	d8e2      	bhi.n	800e8e2 <__multiply+0xb2>
 800e91c:	9a01      	ldr	r2, [sp, #4]
 800e91e:	f845 c002 	str.w	ip, [r5, r2]
 800e922:	9a03      	ldr	r2, [sp, #12]
 800e924:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e928:	3304      	adds	r3, #4
 800e92a:	f1b9 0f00 	cmp.w	r9, #0
 800e92e:	d021      	beq.n	800e974 <__multiply+0x144>
 800e930:	6829      	ldr	r1, [r5, #0]
 800e932:	f104 0c14 	add.w	ip, r4, #20
 800e936:	46ae      	mov	lr, r5
 800e938:	f04f 0a00 	mov.w	sl, #0
 800e93c:	f8bc b000 	ldrh.w	fp, [ip]
 800e940:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e944:	fb09 220b 	mla	r2, r9, fp, r2
 800e948:	4452      	add	r2, sl
 800e94a:	b289      	uxth	r1, r1
 800e94c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e950:	f84e 1b04 	str.w	r1, [lr], #4
 800e954:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e958:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e95c:	f8be 1000 	ldrh.w	r1, [lr]
 800e960:	fb09 110a 	mla	r1, r9, sl, r1
 800e964:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e968:	4567      	cmp	r7, ip
 800e96a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e96e:	d8e5      	bhi.n	800e93c <__multiply+0x10c>
 800e970:	9a01      	ldr	r2, [sp, #4]
 800e972:	50a9      	str	r1, [r5, r2]
 800e974:	3504      	adds	r5, #4
 800e976:	e799      	b.n	800e8ac <__multiply+0x7c>
 800e978:	3e01      	subs	r6, #1
 800e97a:	e79b      	b.n	800e8b4 <__multiply+0x84>
 800e97c:	0801076d 	.word	0x0801076d
 800e980:	0801077e 	.word	0x0801077e

0800e984 <__pow5mult>:
 800e984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e988:	4615      	mov	r5, r2
 800e98a:	f012 0203 	ands.w	r2, r2, #3
 800e98e:	4606      	mov	r6, r0
 800e990:	460f      	mov	r7, r1
 800e992:	d007      	beq.n	800e9a4 <__pow5mult+0x20>
 800e994:	4c25      	ldr	r4, [pc, #148]	; (800ea2c <__pow5mult+0xa8>)
 800e996:	3a01      	subs	r2, #1
 800e998:	2300      	movs	r3, #0
 800e99a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e99e:	f7ff fe9d 	bl	800e6dc <__multadd>
 800e9a2:	4607      	mov	r7, r0
 800e9a4:	10ad      	asrs	r5, r5, #2
 800e9a6:	d03d      	beq.n	800ea24 <__pow5mult+0xa0>
 800e9a8:	69f4      	ldr	r4, [r6, #28]
 800e9aa:	b97c      	cbnz	r4, 800e9cc <__pow5mult+0x48>
 800e9ac:	2010      	movs	r0, #16
 800e9ae:	f7ff fd6d 	bl	800e48c <malloc>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	61f0      	str	r0, [r6, #28]
 800e9b6:	b928      	cbnz	r0, 800e9c4 <__pow5mult+0x40>
 800e9b8:	4b1d      	ldr	r3, [pc, #116]	; (800ea30 <__pow5mult+0xac>)
 800e9ba:	481e      	ldr	r0, [pc, #120]	; (800ea34 <__pow5mult+0xb0>)
 800e9bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e9c0:	f000 fa72 	bl	800eea8 <__assert_func>
 800e9c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e9c8:	6004      	str	r4, [r0, #0]
 800e9ca:	60c4      	str	r4, [r0, #12]
 800e9cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e9d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e9d4:	b94c      	cbnz	r4, 800e9ea <__pow5mult+0x66>
 800e9d6:	f240 2171 	movw	r1, #625	; 0x271
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f7ff ff12 	bl	800e804 <__i2b>
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	6003      	str	r3, [r0, #0]
 800e9ea:	f04f 0900 	mov.w	r9, #0
 800e9ee:	07eb      	lsls	r3, r5, #31
 800e9f0:	d50a      	bpl.n	800ea08 <__pow5mult+0x84>
 800e9f2:	4639      	mov	r1, r7
 800e9f4:	4622      	mov	r2, r4
 800e9f6:	4630      	mov	r0, r6
 800e9f8:	f7ff ff1a 	bl	800e830 <__multiply>
 800e9fc:	4639      	mov	r1, r7
 800e9fe:	4680      	mov	r8, r0
 800ea00:	4630      	mov	r0, r6
 800ea02:	f7ff fe49 	bl	800e698 <_Bfree>
 800ea06:	4647      	mov	r7, r8
 800ea08:	106d      	asrs	r5, r5, #1
 800ea0a:	d00b      	beq.n	800ea24 <__pow5mult+0xa0>
 800ea0c:	6820      	ldr	r0, [r4, #0]
 800ea0e:	b938      	cbnz	r0, 800ea20 <__pow5mult+0x9c>
 800ea10:	4622      	mov	r2, r4
 800ea12:	4621      	mov	r1, r4
 800ea14:	4630      	mov	r0, r6
 800ea16:	f7ff ff0b 	bl	800e830 <__multiply>
 800ea1a:	6020      	str	r0, [r4, #0]
 800ea1c:	f8c0 9000 	str.w	r9, [r0]
 800ea20:	4604      	mov	r4, r0
 800ea22:	e7e4      	b.n	800e9ee <__pow5mult+0x6a>
 800ea24:	4638      	mov	r0, r7
 800ea26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea2a:	bf00      	nop
 800ea2c:	080108c8 	.word	0x080108c8
 800ea30:	080106fe 	.word	0x080106fe
 800ea34:	0801077e 	.word	0x0801077e

0800ea38 <__lshift>:
 800ea38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea3c:	460c      	mov	r4, r1
 800ea3e:	6849      	ldr	r1, [r1, #4]
 800ea40:	6923      	ldr	r3, [r4, #16]
 800ea42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea46:	68a3      	ldr	r3, [r4, #8]
 800ea48:	4607      	mov	r7, r0
 800ea4a:	4691      	mov	r9, r2
 800ea4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea50:	f108 0601 	add.w	r6, r8, #1
 800ea54:	42b3      	cmp	r3, r6
 800ea56:	db0b      	blt.n	800ea70 <__lshift+0x38>
 800ea58:	4638      	mov	r0, r7
 800ea5a:	f7ff fddd 	bl	800e618 <_Balloc>
 800ea5e:	4605      	mov	r5, r0
 800ea60:	b948      	cbnz	r0, 800ea76 <__lshift+0x3e>
 800ea62:	4602      	mov	r2, r0
 800ea64:	4b28      	ldr	r3, [pc, #160]	; (800eb08 <__lshift+0xd0>)
 800ea66:	4829      	ldr	r0, [pc, #164]	; (800eb0c <__lshift+0xd4>)
 800ea68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ea6c:	f000 fa1c 	bl	800eea8 <__assert_func>
 800ea70:	3101      	adds	r1, #1
 800ea72:	005b      	lsls	r3, r3, #1
 800ea74:	e7ee      	b.n	800ea54 <__lshift+0x1c>
 800ea76:	2300      	movs	r3, #0
 800ea78:	f100 0114 	add.w	r1, r0, #20
 800ea7c:	f100 0210 	add.w	r2, r0, #16
 800ea80:	4618      	mov	r0, r3
 800ea82:	4553      	cmp	r3, sl
 800ea84:	db33      	blt.n	800eaee <__lshift+0xb6>
 800ea86:	6920      	ldr	r0, [r4, #16]
 800ea88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea8c:	f104 0314 	add.w	r3, r4, #20
 800ea90:	f019 091f 	ands.w	r9, r9, #31
 800ea94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ea9c:	d02b      	beq.n	800eaf6 <__lshift+0xbe>
 800ea9e:	f1c9 0e20 	rsb	lr, r9, #32
 800eaa2:	468a      	mov	sl, r1
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	6818      	ldr	r0, [r3, #0]
 800eaa8:	fa00 f009 	lsl.w	r0, r0, r9
 800eaac:	4310      	orrs	r0, r2
 800eaae:	f84a 0b04 	str.w	r0, [sl], #4
 800eab2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eab6:	459c      	cmp	ip, r3
 800eab8:	fa22 f20e 	lsr.w	r2, r2, lr
 800eabc:	d8f3      	bhi.n	800eaa6 <__lshift+0x6e>
 800eabe:	ebac 0304 	sub.w	r3, ip, r4
 800eac2:	3b15      	subs	r3, #21
 800eac4:	f023 0303 	bic.w	r3, r3, #3
 800eac8:	3304      	adds	r3, #4
 800eaca:	f104 0015 	add.w	r0, r4, #21
 800eace:	4584      	cmp	ip, r0
 800ead0:	bf38      	it	cc
 800ead2:	2304      	movcc	r3, #4
 800ead4:	50ca      	str	r2, [r1, r3]
 800ead6:	b10a      	cbz	r2, 800eadc <__lshift+0xa4>
 800ead8:	f108 0602 	add.w	r6, r8, #2
 800eadc:	3e01      	subs	r6, #1
 800eade:	4638      	mov	r0, r7
 800eae0:	612e      	str	r6, [r5, #16]
 800eae2:	4621      	mov	r1, r4
 800eae4:	f7ff fdd8 	bl	800e698 <_Bfree>
 800eae8:	4628      	mov	r0, r5
 800eaea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaee:	f842 0f04 	str.w	r0, [r2, #4]!
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	e7c5      	b.n	800ea82 <__lshift+0x4a>
 800eaf6:	3904      	subs	r1, #4
 800eaf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eafc:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb00:	459c      	cmp	ip, r3
 800eb02:	d8f9      	bhi.n	800eaf8 <__lshift+0xc0>
 800eb04:	e7ea      	b.n	800eadc <__lshift+0xa4>
 800eb06:	bf00      	nop
 800eb08:	0801076d 	.word	0x0801076d
 800eb0c:	0801077e 	.word	0x0801077e

0800eb10 <__mcmp>:
 800eb10:	b530      	push	{r4, r5, lr}
 800eb12:	6902      	ldr	r2, [r0, #16]
 800eb14:	690c      	ldr	r4, [r1, #16]
 800eb16:	1b12      	subs	r2, r2, r4
 800eb18:	d10e      	bne.n	800eb38 <__mcmp+0x28>
 800eb1a:	f100 0314 	add.w	r3, r0, #20
 800eb1e:	3114      	adds	r1, #20
 800eb20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eb24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eb28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eb2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eb30:	42a5      	cmp	r5, r4
 800eb32:	d003      	beq.n	800eb3c <__mcmp+0x2c>
 800eb34:	d305      	bcc.n	800eb42 <__mcmp+0x32>
 800eb36:	2201      	movs	r2, #1
 800eb38:	4610      	mov	r0, r2
 800eb3a:	bd30      	pop	{r4, r5, pc}
 800eb3c:	4283      	cmp	r3, r0
 800eb3e:	d3f3      	bcc.n	800eb28 <__mcmp+0x18>
 800eb40:	e7fa      	b.n	800eb38 <__mcmp+0x28>
 800eb42:	f04f 32ff 	mov.w	r2, #4294967295
 800eb46:	e7f7      	b.n	800eb38 <__mcmp+0x28>

0800eb48 <__mdiff>:
 800eb48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb4c:	460c      	mov	r4, r1
 800eb4e:	4606      	mov	r6, r0
 800eb50:	4611      	mov	r1, r2
 800eb52:	4620      	mov	r0, r4
 800eb54:	4690      	mov	r8, r2
 800eb56:	f7ff ffdb 	bl	800eb10 <__mcmp>
 800eb5a:	1e05      	subs	r5, r0, #0
 800eb5c:	d110      	bne.n	800eb80 <__mdiff+0x38>
 800eb5e:	4629      	mov	r1, r5
 800eb60:	4630      	mov	r0, r6
 800eb62:	f7ff fd59 	bl	800e618 <_Balloc>
 800eb66:	b930      	cbnz	r0, 800eb76 <__mdiff+0x2e>
 800eb68:	4b3a      	ldr	r3, [pc, #232]	; (800ec54 <__mdiff+0x10c>)
 800eb6a:	4602      	mov	r2, r0
 800eb6c:	f240 2137 	movw	r1, #567	; 0x237
 800eb70:	4839      	ldr	r0, [pc, #228]	; (800ec58 <__mdiff+0x110>)
 800eb72:	f000 f999 	bl	800eea8 <__assert_func>
 800eb76:	2301      	movs	r3, #1
 800eb78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb80:	bfa4      	itt	ge
 800eb82:	4643      	movge	r3, r8
 800eb84:	46a0      	movge	r8, r4
 800eb86:	4630      	mov	r0, r6
 800eb88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eb8c:	bfa6      	itte	ge
 800eb8e:	461c      	movge	r4, r3
 800eb90:	2500      	movge	r5, #0
 800eb92:	2501      	movlt	r5, #1
 800eb94:	f7ff fd40 	bl	800e618 <_Balloc>
 800eb98:	b920      	cbnz	r0, 800eba4 <__mdiff+0x5c>
 800eb9a:	4b2e      	ldr	r3, [pc, #184]	; (800ec54 <__mdiff+0x10c>)
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	f240 2145 	movw	r1, #581	; 0x245
 800eba2:	e7e5      	b.n	800eb70 <__mdiff+0x28>
 800eba4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eba8:	6926      	ldr	r6, [r4, #16]
 800ebaa:	60c5      	str	r5, [r0, #12]
 800ebac:	f104 0914 	add.w	r9, r4, #20
 800ebb0:	f108 0514 	add.w	r5, r8, #20
 800ebb4:	f100 0e14 	add.w	lr, r0, #20
 800ebb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ebbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ebc0:	f108 0210 	add.w	r2, r8, #16
 800ebc4:	46f2      	mov	sl, lr
 800ebc6:	2100      	movs	r1, #0
 800ebc8:	f859 3b04 	ldr.w	r3, [r9], #4
 800ebcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ebd0:	fa11 f88b 	uxtah	r8, r1, fp
 800ebd4:	b299      	uxth	r1, r3
 800ebd6:	0c1b      	lsrs	r3, r3, #16
 800ebd8:	eba8 0801 	sub.w	r8, r8, r1
 800ebdc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ebe0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ebe4:	fa1f f888 	uxth.w	r8, r8
 800ebe8:	1419      	asrs	r1, r3, #16
 800ebea:	454e      	cmp	r6, r9
 800ebec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ebf0:	f84a 3b04 	str.w	r3, [sl], #4
 800ebf4:	d8e8      	bhi.n	800ebc8 <__mdiff+0x80>
 800ebf6:	1b33      	subs	r3, r6, r4
 800ebf8:	3b15      	subs	r3, #21
 800ebfa:	f023 0303 	bic.w	r3, r3, #3
 800ebfe:	3304      	adds	r3, #4
 800ec00:	3415      	adds	r4, #21
 800ec02:	42a6      	cmp	r6, r4
 800ec04:	bf38      	it	cc
 800ec06:	2304      	movcc	r3, #4
 800ec08:	441d      	add	r5, r3
 800ec0a:	4473      	add	r3, lr
 800ec0c:	469e      	mov	lr, r3
 800ec0e:	462e      	mov	r6, r5
 800ec10:	4566      	cmp	r6, ip
 800ec12:	d30e      	bcc.n	800ec32 <__mdiff+0xea>
 800ec14:	f10c 0203 	add.w	r2, ip, #3
 800ec18:	1b52      	subs	r2, r2, r5
 800ec1a:	f022 0203 	bic.w	r2, r2, #3
 800ec1e:	3d03      	subs	r5, #3
 800ec20:	45ac      	cmp	ip, r5
 800ec22:	bf38      	it	cc
 800ec24:	2200      	movcc	r2, #0
 800ec26:	4413      	add	r3, r2
 800ec28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ec2c:	b17a      	cbz	r2, 800ec4e <__mdiff+0x106>
 800ec2e:	6107      	str	r7, [r0, #16]
 800ec30:	e7a4      	b.n	800eb7c <__mdiff+0x34>
 800ec32:	f856 8b04 	ldr.w	r8, [r6], #4
 800ec36:	fa11 f288 	uxtah	r2, r1, r8
 800ec3a:	1414      	asrs	r4, r2, #16
 800ec3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ec40:	b292      	uxth	r2, r2
 800ec42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ec46:	f84e 2b04 	str.w	r2, [lr], #4
 800ec4a:	1421      	asrs	r1, r4, #16
 800ec4c:	e7e0      	b.n	800ec10 <__mdiff+0xc8>
 800ec4e:	3f01      	subs	r7, #1
 800ec50:	e7ea      	b.n	800ec28 <__mdiff+0xe0>
 800ec52:	bf00      	nop
 800ec54:	0801076d 	.word	0x0801076d
 800ec58:	0801077e 	.word	0x0801077e

0800ec5c <__d2b>:
 800ec5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec60:	460f      	mov	r7, r1
 800ec62:	2101      	movs	r1, #1
 800ec64:	ec59 8b10 	vmov	r8, r9, d0
 800ec68:	4616      	mov	r6, r2
 800ec6a:	f7ff fcd5 	bl	800e618 <_Balloc>
 800ec6e:	4604      	mov	r4, r0
 800ec70:	b930      	cbnz	r0, 800ec80 <__d2b+0x24>
 800ec72:	4602      	mov	r2, r0
 800ec74:	4b24      	ldr	r3, [pc, #144]	; (800ed08 <__d2b+0xac>)
 800ec76:	4825      	ldr	r0, [pc, #148]	; (800ed0c <__d2b+0xb0>)
 800ec78:	f240 310f 	movw	r1, #783	; 0x30f
 800ec7c:	f000 f914 	bl	800eea8 <__assert_func>
 800ec80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ec84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec88:	bb2d      	cbnz	r5, 800ecd6 <__d2b+0x7a>
 800ec8a:	9301      	str	r3, [sp, #4]
 800ec8c:	f1b8 0300 	subs.w	r3, r8, #0
 800ec90:	d026      	beq.n	800ece0 <__d2b+0x84>
 800ec92:	4668      	mov	r0, sp
 800ec94:	9300      	str	r3, [sp, #0]
 800ec96:	f7ff fd87 	bl	800e7a8 <__lo0bits>
 800ec9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ec9e:	b1e8      	cbz	r0, 800ecdc <__d2b+0x80>
 800eca0:	f1c0 0320 	rsb	r3, r0, #32
 800eca4:	fa02 f303 	lsl.w	r3, r2, r3
 800eca8:	430b      	orrs	r3, r1
 800ecaa:	40c2      	lsrs	r2, r0
 800ecac:	6163      	str	r3, [r4, #20]
 800ecae:	9201      	str	r2, [sp, #4]
 800ecb0:	9b01      	ldr	r3, [sp, #4]
 800ecb2:	61a3      	str	r3, [r4, #24]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	bf14      	ite	ne
 800ecb8:	2202      	movne	r2, #2
 800ecba:	2201      	moveq	r2, #1
 800ecbc:	6122      	str	r2, [r4, #16]
 800ecbe:	b1bd      	cbz	r5, 800ecf0 <__d2b+0x94>
 800ecc0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ecc4:	4405      	add	r5, r0
 800ecc6:	603d      	str	r5, [r7, #0]
 800ecc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eccc:	6030      	str	r0, [r6, #0]
 800ecce:	4620      	mov	r0, r4
 800ecd0:	b003      	add	sp, #12
 800ecd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecda:	e7d6      	b.n	800ec8a <__d2b+0x2e>
 800ecdc:	6161      	str	r1, [r4, #20]
 800ecde:	e7e7      	b.n	800ecb0 <__d2b+0x54>
 800ece0:	a801      	add	r0, sp, #4
 800ece2:	f7ff fd61 	bl	800e7a8 <__lo0bits>
 800ece6:	9b01      	ldr	r3, [sp, #4]
 800ece8:	6163      	str	r3, [r4, #20]
 800ecea:	3020      	adds	r0, #32
 800ecec:	2201      	movs	r2, #1
 800ecee:	e7e5      	b.n	800ecbc <__d2b+0x60>
 800ecf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ecf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ecf8:	6038      	str	r0, [r7, #0]
 800ecfa:	6918      	ldr	r0, [r3, #16]
 800ecfc:	f7ff fd34 	bl	800e768 <__hi0bits>
 800ed00:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed04:	e7e2      	b.n	800eccc <__d2b+0x70>
 800ed06:	bf00      	nop
 800ed08:	0801076d 	.word	0x0801076d
 800ed0c:	0801077e 	.word	0x0801077e

0800ed10 <__ascii_wctomb>:
 800ed10:	b149      	cbz	r1, 800ed26 <__ascii_wctomb+0x16>
 800ed12:	2aff      	cmp	r2, #255	; 0xff
 800ed14:	bf85      	ittet	hi
 800ed16:	238a      	movhi	r3, #138	; 0x8a
 800ed18:	6003      	strhi	r3, [r0, #0]
 800ed1a:	700a      	strbls	r2, [r1, #0]
 800ed1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ed20:	bf98      	it	ls
 800ed22:	2001      	movls	r0, #1
 800ed24:	4770      	bx	lr
 800ed26:	4608      	mov	r0, r1
 800ed28:	4770      	bx	lr
	...

0800ed2c <__sflush_r>:
 800ed2c:	898a      	ldrh	r2, [r1, #12]
 800ed2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed32:	4605      	mov	r5, r0
 800ed34:	0710      	lsls	r0, r2, #28
 800ed36:	460c      	mov	r4, r1
 800ed38:	d458      	bmi.n	800edec <__sflush_r+0xc0>
 800ed3a:	684b      	ldr	r3, [r1, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	dc05      	bgt.n	800ed4c <__sflush_r+0x20>
 800ed40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	dc02      	bgt.n	800ed4c <__sflush_r+0x20>
 800ed46:	2000      	movs	r0, #0
 800ed48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed4e:	2e00      	cmp	r6, #0
 800ed50:	d0f9      	beq.n	800ed46 <__sflush_r+0x1a>
 800ed52:	2300      	movs	r3, #0
 800ed54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ed58:	682f      	ldr	r7, [r5, #0]
 800ed5a:	6a21      	ldr	r1, [r4, #32]
 800ed5c:	602b      	str	r3, [r5, #0]
 800ed5e:	d032      	beq.n	800edc6 <__sflush_r+0x9a>
 800ed60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ed62:	89a3      	ldrh	r3, [r4, #12]
 800ed64:	075a      	lsls	r2, r3, #29
 800ed66:	d505      	bpl.n	800ed74 <__sflush_r+0x48>
 800ed68:	6863      	ldr	r3, [r4, #4]
 800ed6a:	1ac0      	subs	r0, r0, r3
 800ed6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed6e:	b10b      	cbz	r3, 800ed74 <__sflush_r+0x48>
 800ed70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed72:	1ac0      	subs	r0, r0, r3
 800ed74:	2300      	movs	r3, #0
 800ed76:	4602      	mov	r2, r0
 800ed78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed7a:	6a21      	ldr	r1, [r4, #32]
 800ed7c:	4628      	mov	r0, r5
 800ed7e:	47b0      	blx	r6
 800ed80:	1c43      	adds	r3, r0, #1
 800ed82:	89a3      	ldrh	r3, [r4, #12]
 800ed84:	d106      	bne.n	800ed94 <__sflush_r+0x68>
 800ed86:	6829      	ldr	r1, [r5, #0]
 800ed88:	291d      	cmp	r1, #29
 800ed8a:	d82b      	bhi.n	800ede4 <__sflush_r+0xb8>
 800ed8c:	4a29      	ldr	r2, [pc, #164]	; (800ee34 <__sflush_r+0x108>)
 800ed8e:	410a      	asrs	r2, r1
 800ed90:	07d6      	lsls	r6, r2, #31
 800ed92:	d427      	bmi.n	800ede4 <__sflush_r+0xb8>
 800ed94:	2200      	movs	r2, #0
 800ed96:	6062      	str	r2, [r4, #4]
 800ed98:	04d9      	lsls	r1, r3, #19
 800ed9a:	6922      	ldr	r2, [r4, #16]
 800ed9c:	6022      	str	r2, [r4, #0]
 800ed9e:	d504      	bpl.n	800edaa <__sflush_r+0x7e>
 800eda0:	1c42      	adds	r2, r0, #1
 800eda2:	d101      	bne.n	800eda8 <__sflush_r+0x7c>
 800eda4:	682b      	ldr	r3, [r5, #0]
 800eda6:	b903      	cbnz	r3, 800edaa <__sflush_r+0x7e>
 800eda8:	6560      	str	r0, [r4, #84]	; 0x54
 800edaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edac:	602f      	str	r7, [r5, #0]
 800edae:	2900      	cmp	r1, #0
 800edb0:	d0c9      	beq.n	800ed46 <__sflush_r+0x1a>
 800edb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edb6:	4299      	cmp	r1, r3
 800edb8:	d002      	beq.n	800edc0 <__sflush_r+0x94>
 800edba:	4628      	mov	r0, r5
 800edbc:	f7ff fb1a 	bl	800e3f4 <_free_r>
 800edc0:	2000      	movs	r0, #0
 800edc2:	6360      	str	r0, [r4, #52]	; 0x34
 800edc4:	e7c0      	b.n	800ed48 <__sflush_r+0x1c>
 800edc6:	2301      	movs	r3, #1
 800edc8:	4628      	mov	r0, r5
 800edca:	47b0      	blx	r6
 800edcc:	1c41      	adds	r1, r0, #1
 800edce:	d1c8      	bne.n	800ed62 <__sflush_r+0x36>
 800edd0:	682b      	ldr	r3, [r5, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d0c5      	beq.n	800ed62 <__sflush_r+0x36>
 800edd6:	2b1d      	cmp	r3, #29
 800edd8:	d001      	beq.n	800edde <__sflush_r+0xb2>
 800edda:	2b16      	cmp	r3, #22
 800eddc:	d101      	bne.n	800ede2 <__sflush_r+0xb6>
 800edde:	602f      	str	r7, [r5, #0]
 800ede0:	e7b1      	b.n	800ed46 <__sflush_r+0x1a>
 800ede2:	89a3      	ldrh	r3, [r4, #12]
 800ede4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ede8:	81a3      	strh	r3, [r4, #12]
 800edea:	e7ad      	b.n	800ed48 <__sflush_r+0x1c>
 800edec:	690f      	ldr	r7, [r1, #16]
 800edee:	2f00      	cmp	r7, #0
 800edf0:	d0a9      	beq.n	800ed46 <__sflush_r+0x1a>
 800edf2:	0793      	lsls	r3, r2, #30
 800edf4:	680e      	ldr	r6, [r1, #0]
 800edf6:	bf08      	it	eq
 800edf8:	694b      	ldreq	r3, [r1, #20]
 800edfa:	600f      	str	r7, [r1, #0]
 800edfc:	bf18      	it	ne
 800edfe:	2300      	movne	r3, #0
 800ee00:	eba6 0807 	sub.w	r8, r6, r7
 800ee04:	608b      	str	r3, [r1, #8]
 800ee06:	f1b8 0f00 	cmp.w	r8, #0
 800ee0a:	dd9c      	ble.n	800ed46 <__sflush_r+0x1a>
 800ee0c:	6a21      	ldr	r1, [r4, #32]
 800ee0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee10:	4643      	mov	r3, r8
 800ee12:	463a      	mov	r2, r7
 800ee14:	4628      	mov	r0, r5
 800ee16:	47b0      	blx	r6
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	dc06      	bgt.n	800ee2a <__sflush_r+0xfe>
 800ee1c:	89a3      	ldrh	r3, [r4, #12]
 800ee1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee22:	81a3      	strh	r3, [r4, #12]
 800ee24:	f04f 30ff 	mov.w	r0, #4294967295
 800ee28:	e78e      	b.n	800ed48 <__sflush_r+0x1c>
 800ee2a:	4407      	add	r7, r0
 800ee2c:	eba8 0800 	sub.w	r8, r8, r0
 800ee30:	e7e9      	b.n	800ee06 <__sflush_r+0xda>
 800ee32:	bf00      	nop
 800ee34:	dfbffffe 	.word	0xdfbffffe

0800ee38 <_fflush_r>:
 800ee38:	b538      	push	{r3, r4, r5, lr}
 800ee3a:	690b      	ldr	r3, [r1, #16]
 800ee3c:	4605      	mov	r5, r0
 800ee3e:	460c      	mov	r4, r1
 800ee40:	b913      	cbnz	r3, 800ee48 <_fflush_r+0x10>
 800ee42:	2500      	movs	r5, #0
 800ee44:	4628      	mov	r0, r5
 800ee46:	bd38      	pop	{r3, r4, r5, pc}
 800ee48:	b118      	cbz	r0, 800ee52 <_fflush_r+0x1a>
 800ee4a:	6a03      	ldr	r3, [r0, #32]
 800ee4c:	b90b      	cbnz	r3, 800ee52 <_fflush_r+0x1a>
 800ee4e:	f7fe fb4f 	bl	800d4f0 <__sinit>
 800ee52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d0f3      	beq.n	800ee42 <_fflush_r+0xa>
 800ee5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ee5c:	07d0      	lsls	r0, r2, #31
 800ee5e:	d404      	bmi.n	800ee6a <_fflush_r+0x32>
 800ee60:	0599      	lsls	r1, r3, #22
 800ee62:	d402      	bmi.n	800ee6a <_fflush_r+0x32>
 800ee64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee66:	f7fe fc38 	bl	800d6da <__retarget_lock_acquire_recursive>
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	4621      	mov	r1, r4
 800ee6e:	f7ff ff5d 	bl	800ed2c <__sflush_r>
 800ee72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee74:	07da      	lsls	r2, r3, #31
 800ee76:	4605      	mov	r5, r0
 800ee78:	d4e4      	bmi.n	800ee44 <_fflush_r+0xc>
 800ee7a:	89a3      	ldrh	r3, [r4, #12]
 800ee7c:	059b      	lsls	r3, r3, #22
 800ee7e:	d4e1      	bmi.n	800ee44 <_fflush_r+0xc>
 800ee80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee82:	f7fe fc2b 	bl	800d6dc <__retarget_lock_release_recursive>
 800ee86:	e7dd      	b.n	800ee44 <_fflush_r+0xc>

0800ee88 <_sbrk_r>:
 800ee88:	b538      	push	{r3, r4, r5, lr}
 800ee8a:	4d06      	ldr	r5, [pc, #24]	; (800eea4 <_sbrk_r+0x1c>)
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	4604      	mov	r4, r0
 800ee90:	4608      	mov	r0, r1
 800ee92:	602b      	str	r3, [r5, #0]
 800ee94:	f001 fa76 	bl	8010384 <_sbrk>
 800ee98:	1c43      	adds	r3, r0, #1
 800ee9a:	d102      	bne.n	800eea2 <_sbrk_r+0x1a>
 800ee9c:	682b      	ldr	r3, [r5, #0]
 800ee9e:	b103      	cbz	r3, 800eea2 <_sbrk_r+0x1a>
 800eea0:	6023      	str	r3, [r4, #0]
 800eea2:	bd38      	pop	{r3, r4, r5, pc}
 800eea4:	20014000 	.word	0x20014000

0800eea8 <__assert_func>:
 800eea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eeaa:	4614      	mov	r4, r2
 800eeac:	461a      	mov	r2, r3
 800eeae:	4b09      	ldr	r3, [pc, #36]	; (800eed4 <__assert_func+0x2c>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4605      	mov	r5, r0
 800eeb4:	68d8      	ldr	r0, [r3, #12]
 800eeb6:	b14c      	cbz	r4, 800eecc <__assert_func+0x24>
 800eeb8:	4b07      	ldr	r3, [pc, #28]	; (800eed8 <__assert_func+0x30>)
 800eeba:	9100      	str	r1, [sp, #0]
 800eebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eec0:	4906      	ldr	r1, [pc, #24]	; (800eedc <__assert_func+0x34>)
 800eec2:	462b      	mov	r3, r5
 800eec4:	f000 f824 	bl	800ef10 <fiprintf>
 800eec8:	f000 f834 	bl	800ef34 <abort>
 800eecc:	4b04      	ldr	r3, [pc, #16]	; (800eee0 <__assert_func+0x38>)
 800eece:	461c      	mov	r4, r3
 800eed0:	e7f3      	b.n	800eeba <__assert_func+0x12>
 800eed2:	bf00      	nop
 800eed4:	200001dc 	.word	0x200001dc
 800eed8:	080108d4 	.word	0x080108d4
 800eedc:	080108e1 	.word	0x080108e1
 800eee0:	0801090f 	.word	0x0801090f

0800eee4 <_calloc_r>:
 800eee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eee6:	fba1 2402 	umull	r2, r4, r1, r2
 800eeea:	b94c      	cbnz	r4, 800ef00 <_calloc_r+0x1c>
 800eeec:	4611      	mov	r1, r2
 800eeee:	9201      	str	r2, [sp, #4]
 800eef0:	f7ff faf4 	bl	800e4dc <_malloc_r>
 800eef4:	9a01      	ldr	r2, [sp, #4]
 800eef6:	4605      	mov	r5, r0
 800eef8:	b930      	cbnz	r0, 800ef08 <_calloc_r+0x24>
 800eefa:	4628      	mov	r0, r5
 800eefc:	b003      	add	sp, #12
 800eefe:	bd30      	pop	{r4, r5, pc}
 800ef00:	220c      	movs	r2, #12
 800ef02:	6002      	str	r2, [r0, #0]
 800ef04:	2500      	movs	r5, #0
 800ef06:	e7f8      	b.n	800eefa <_calloc_r+0x16>
 800ef08:	4621      	mov	r1, r4
 800ef0a:	f7fe fb7a 	bl	800d602 <memset>
 800ef0e:	e7f4      	b.n	800eefa <_calloc_r+0x16>

0800ef10 <fiprintf>:
 800ef10:	b40e      	push	{r1, r2, r3}
 800ef12:	b503      	push	{r0, r1, lr}
 800ef14:	4601      	mov	r1, r0
 800ef16:	ab03      	add	r3, sp, #12
 800ef18:	4805      	ldr	r0, [pc, #20]	; (800ef30 <fiprintf+0x20>)
 800ef1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef1e:	6800      	ldr	r0, [r0, #0]
 800ef20:	9301      	str	r3, [sp, #4]
 800ef22:	f000 f837 	bl	800ef94 <_vfiprintf_r>
 800ef26:	b002      	add	sp, #8
 800ef28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef2c:	b003      	add	sp, #12
 800ef2e:	4770      	bx	lr
 800ef30:	200001dc 	.word	0x200001dc

0800ef34 <abort>:
 800ef34:	b508      	push	{r3, lr}
 800ef36:	2006      	movs	r0, #6
 800ef38:	f000 fa04 	bl	800f344 <raise>
 800ef3c:	2001      	movs	r0, #1
 800ef3e:	f7f4 ff69 	bl	8003e14 <_exit>

0800ef42 <__sfputc_r>:
 800ef42:	6893      	ldr	r3, [r2, #8]
 800ef44:	3b01      	subs	r3, #1
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	b410      	push	{r4}
 800ef4a:	6093      	str	r3, [r2, #8]
 800ef4c:	da08      	bge.n	800ef60 <__sfputc_r+0x1e>
 800ef4e:	6994      	ldr	r4, [r2, #24]
 800ef50:	42a3      	cmp	r3, r4
 800ef52:	db01      	blt.n	800ef58 <__sfputc_r+0x16>
 800ef54:	290a      	cmp	r1, #10
 800ef56:	d103      	bne.n	800ef60 <__sfputc_r+0x1e>
 800ef58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef5c:	f000 b934 	b.w	800f1c8 <__swbuf_r>
 800ef60:	6813      	ldr	r3, [r2, #0]
 800ef62:	1c58      	adds	r0, r3, #1
 800ef64:	6010      	str	r0, [r2, #0]
 800ef66:	7019      	strb	r1, [r3, #0]
 800ef68:	4608      	mov	r0, r1
 800ef6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef6e:	4770      	bx	lr

0800ef70 <__sfputs_r>:
 800ef70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef72:	4606      	mov	r6, r0
 800ef74:	460f      	mov	r7, r1
 800ef76:	4614      	mov	r4, r2
 800ef78:	18d5      	adds	r5, r2, r3
 800ef7a:	42ac      	cmp	r4, r5
 800ef7c:	d101      	bne.n	800ef82 <__sfputs_r+0x12>
 800ef7e:	2000      	movs	r0, #0
 800ef80:	e007      	b.n	800ef92 <__sfputs_r+0x22>
 800ef82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef86:	463a      	mov	r2, r7
 800ef88:	4630      	mov	r0, r6
 800ef8a:	f7ff ffda 	bl	800ef42 <__sfputc_r>
 800ef8e:	1c43      	adds	r3, r0, #1
 800ef90:	d1f3      	bne.n	800ef7a <__sfputs_r+0xa>
 800ef92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ef94 <_vfiprintf_r>:
 800ef94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef98:	460d      	mov	r5, r1
 800ef9a:	b09d      	sub	sp, #116	; 0x74
 800ef9c:	4614      	mov	r4, r2
 800ef9e:	4698      	mov	r8, r3
 800efa0:	4606      	mov	r6, r0
 800efa2:	b118      	cbz	r0, 800efac <_vfiprintf_r+0x18>
 800efa4:	6a03      	ldr	r3, [r0, #32]
 800efa6:	b90b      	cbnz	r3, 800efac <_vfiprintf_r+0x18>
 800efa8:	f7fe faa2 	bl	800d4f0 <__sinit>
 800efac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efae:	07d9      	lsls	r1, r3, #31
 800efb0:	d405      	bmi.n	800efbe <_vfiprintf_r+0x2a>
 800efb2:	89ab      	ldrh	r3, [r5, #12]
 800efb4:	059a      	lsls	r2, r3, #22
 800efb6:	d402      	bmi.n	800efbe <_vfiprintf_r+0x2a>
 800efb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efba:	f7fe fb8e 	bl	800d6da <__retarget_lock_acquire_recursive>
 800efbe:	89ab      	ldrh	r3, [r5, #12]
 800efc0:	071b      	lsls	r3, r3, #28
 800efc2:	d501      	bpl.n	800efc8 <_vfiprintf_r+0x34>
 800efc4:	692b      	ldr	r3, [r5, #16]
 800efc6:	b99b      	cbnz	r3, 800eff0 <_vfiprintf_r+0x5c>
 800efc8:	4629      	mov	r1, r5
 800efca:	4630      	mov	r0, r6
 800efcc:	f000 f93a 	bl	800f244 <__swsetup_r>
 800efd0:	b170      	cbz	r0, 800eff0 <_vfiprintf_r+0x5c>
 800efd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efd4:	07dc      	lsls	r4, r3, #31
 800efd6:	d504      	bpl.n	800efe2 <_vfiprintf_r+0x4e>
 800efd8:	f04f 30ff 	mov.w	r0, #4294967295
 800efdc:	b01d      	add	sp, #116	; 0x74
 800efde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe2:	89ab      	ldrh	r3, [r5, #12]
 800efe4:	0598      	lsls	r0, r3, #22
 800efe6:	d4f7      	bmi.n	800efd8 <_vfiprintf_r+0x44>
 800efe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efea:	f7fe fb77 	bl	800d6dc <__retarget_lock_release_recursive>
 800efee:	e7f3      	b.n	800efd8 <_vfiprintf_r+0x44>
 800eff0:	2300      	movs	r3, #0
 800eff2:	9309      	str	r3, [sp, #36]	; 0x24
 800eff4:	2320      	movs	r3, #32
 800eff6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800effa:	f8cd 800c 	str.w	r8, [sp, #12]
 800effe:	2330      	movs	r3, #48	; 0x30
 800f000:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f1b4 <_vfiprintf_r+0x220>
 800f004:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f008:	f04f 0901 	mov.w	r9, #1
 800f00c:	4623      	mov	r3, r4
 800f00e:	469a      	mov	sl, r3
 800f010:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f014:	b10a      	cbz	r2, 800f01a <_vfiprintf_r+0x86>
 800f016:	2a25      	cmp	r2, #37	; 0x25
 800f018:	d1f9      	bne.n	800f00e <_vfiprintf_r+0x7a>
 800f01a:	ebba 0b04 	subs.w	fp, sl, r4
 800f01e:	d00b      	beq.n	800f038 <_vfiprintf_r+0xa4>
 800f020:	465b      	mov	r3, fp
 800f022:	4622      	mov	r2, r4
 800f024:	4629      	mov	r1, r5
 800f026:	4630      	mov	r0, r6
 800f028:	f7ff ffa2 	bl	800ef70 <__sfputs_r>
 800f02c:	3001      	adds	r0, #1
 800f02e:	f000 80a9 	beq.w	800f184 <_vfiprintf_r+0x1f0>
 800f032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f034:	445a      	add	r2, fp
 800f036:	9209      	str	r2, [sp, #36]	; 0x24
 800f038:	f89a 3000 	ldrb.w	r3, [sl]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	f000 80a1 	beq.w	800f184 <_vfiprintf_r+0x1f0>
 800f042:	2300      	movs	r3, #0
 800f044:	f04f 32ff 	mov.w	r2, #4294967295
 800f048:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f04c:	f10a 0a01 	add.w	sl, sl, #1
 800f050:	9304      	str	r3, [sp, #16]
 800f052:	9307      	str	r3, [sp, #28]
 800f054:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f058:	931a      	str	r3, [sp, #104]	; 0x68
 800f05a:	4654      	mov	r4, sl
 800f05c:	2205      	movs	r2, #5
 800f05e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f062:	4854      	ldr	r0, [pc, #336]	; (800f1b4 <_vfiprintf_r+0x220>)
 800f064:	f7f1 f924 	bl	80002b0 <memchr>
 800f068:	9a04      	ldr	r2, [sp, #16]
 800f06a:	b9d8      	cbnz	r0, 800f0a4 <_vfiprintf_r+0x110>
 800f06c:	06d1      	lsls	r1, r2, #27
 800f06e:	bf44      	itt	mi
 800f070:	2320      	movmi	r3, #32
 800f072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f076:	0713      	lsls	r3, r2, #28
 800f078:	bf44      	itt	mi
 800f07a:	232b      	movmi	r3, #43	; 0x2b
 800f07c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f080:	f89a 3000 	ldrb.w	r3, [sl]
 800f084:	2b2a      	cmp	r3, #42	; 0x2a
 800f086:	d015      	beq.n	800f0b4 <_vfiprintf_r+0x120>
 800f088:	9a07      	ldr	r2, [sp, #28]
 800f08a:	4654      	mov	r4, sl
 800f08c:	2000      	movs	r0, #0
 800f08e:	f04f 0c0a 	mov.w	ip, #10
 800f092:	4621      	mov	r1, r4
 800f094:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f098:	3b30      	subs	r3, #48	; 0x30
 800f09a:	2b09      	cmp	r3, #9
 800f09c:	d94d      	bls.n	800f13a <_vfiprintf_r+0x1a6>
 800f09e:	b1b0      	cbz	r0, 800f0ce <_vfiprintf_r+0x13a>
 800f0a0:	9207      	str	r2, [sp, #28]
 800f0a2:	e014      	b.n	800f0ce <_vfiprintf_r+0x13a>
 800f0a4:	eba0 0308 	sub.w	r3, r0, r8
 800f0a8:	fa09 f303 	lsl.w	r3, r9, r3
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	9304      	str	r3, [sp, #16]
 800f0b0:	46a2      	mov	sl, r4
 800f0b2:	e7d2      	b.n	800f05a <_vfiprintf_r+0xc6>
 800f0b4:	9b03      	ldr	r3, [sp, #12]
 800f0b6:	1d19      	adds	r1, r3, #4
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	9103      	str	r1, [sp, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	bfbb      	ittet	lt
 800f0c0:	425b      	neglt	r3, r3
 800f0c2:	f042 0202 	orrlt.w	r2, r2, #2
 800f0c6:	9307      	strge	r3, [sp, #28]
 800f0c8:	9307      	strlt	r3, [sp, #28]
 800f0ca:	bfb8      	it	lt
 800f0cc:	9204      	strlt	r2, [sp, #16]
 800f0ce:	7823      	ldrb	r3, [r4, #0]
 800f0d0:	2b2e      	cmp	r3, #46	; 0x2e
 800f0d2:	d10c      	bne.n	800f0ee <_vfiprintf_r+0x15a>
 800f0d4:	7863      	ldrb	r3, [r4, #1]
 800f0d6:	2b2a      	cmp	r3, #42	; 0x2a
 800f0d8:	d134      	bne.n	800f144 <_vfiprintf_r+0x1b0>
 800f0da:	9b03      	ldr	r3, [sp, #12]
 800f0dc:	1d1a      	adds	r2, r3, #4
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	9203      	str	r2, [sp, #12]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	bfb8      	it	lt
 800f0e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f0ea:	3402      	adds	r4, #2
 800f0ec:	9305      	str	r3, [sp, #20]
 800f0ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f1c4 <_vfiprintf_r+0x230>
 800f0f2:	7821      	ldrb	r1, [r4, #0]
 800f0f4:	2203      	movs	r2, #3
 800f0f6:	4650      	mov	r0, sl
 800f0f8:	f7f1 f8da 	bl	80002b0 <memchr>
 800f0fc:	b138      	cbz	r0, 800f10e <_vfiprintf_r+0x17a>
 800f0fe:	9b04      	ldr	r3, [sp, #16]
 800f100:	eba0 000a 	sub.w	r0, r0, sl
 800f104:	2240      	movs	r2, #64	; 0x40
 800f106:	4082      	lsls	r2, r0
 800f108:	4313      	orrs	r3, r2
 800f10a:	3401      	adds	r4, #1
 800f10c:	9304      	str	r3, [sp, #16]
 800f10e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f112:	4829      	ldr	r0, [pc, #164]	; (800f1b8 <_vfiprintf_r+0x224>)
 800f114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f118:	2206      	movs	r2, #6
 800f11a:	f7f1 f8c9 	bl	80002b0 <memchr>
 800f11e:	2800      	cmp	r0, #0
 800f120:	d03f      	beq.n	800f1a2 <_vfiprintf_r+0x20e>
 800f122:	4b26      	ldr	r3, [pc, #152]	; (800f1bc <_vfiprintf_r+0x228>)
 800f124:	bb1b      	cbnz	r3, 800f16e <_vfiprintf_r+0x1da>
 800f126:	9b03      	ldr	r3, [sp, #12]
 800f128:	3307      	adds	r3, #7
 800f12a:	f023 0307 	bic.w	r3, r3, #7
 800f12e:	3308      	adds	r3, #8
 800f130:	9303      	str	r3, [sp, #12]
 800f132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f134:	443b      	add	r3, r7
 800f136:	9309      	str	r3, [sp, #36]	; 0x24
 800f138:	e768      	b.n	800f00c <_vfiprintf_r+0x78>
 800f13a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f13e:	460c      	mov	r4, r1
 800f140:	2001      	movs	r0, #1
 800f142:	e7a6      	b.n	800f092 <_vfiprintf_r+0xfe>
 800f144:	2300      	movs	r3, #0
 800f146:	3401      	adds	r4, #1
 800f148:	9305      	str	r3, [sp, #20]
 800f14a:	4619      	mov	r1, r3
 800f14c:	f04f 0c0a 	mov.w	ip, #10
 800f150:	4620      	mov	r0, r4
 800f152:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f156:	3a30      	subs	r2, #48	; 0x30
 800f158:	2a09      	cmp	r2, #9
 800f15a:	d903      	bls.n	800f164 <_vfiprintf_r+0x1d0>
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d0c6      	beq.n	800f0ee <_vfiprintf_r+0x15a>
 800f160:	9105      	str	r1, [sp, #20]
 800f162:	e7c4      	b.n	800f0ee <_vfiprintf_r+0x15a>
 800f164:	fb0c 2101 	mla	r1, ip, r1, r2
 800f168:	4604      	mov	r4, r0
 800f16a:	2301      	movs	r3, #1
 800f16c:	e7f0      	b.n	800f150 <_vfiprintf_r+0x1bc>
 800f16e:	ab03      	add	r3, sp, #12
 800f170:	9300      	str	r3, [sp, #0]
 800f172:	462a      	mov	r2, r5
 800f174:	4b12      	ldr	r3, [pc, #72]	; (800f1c0 <_vfiprintf_r+0x22c>)
 800f176:	a904      	add	r1, sp, #16
 800f178:	4630      	mov	r0, r6
 800f17a:	f7fd fd67 	bl	800cc4c <_printf_float>
 800f17e:	4607      	mov	r7, r0
 800f180:	1c78      	adds	r0, r7, #1
 800f182:	d1d6      	bne.n	800f132 <_vfiprintf_r+0x19e>
 800f184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f186:	07d9      	lsls	r1, r3, #31
 800f188:	d405      	bmi.n	800f196 <_vfiprintf_r+0x202>
 800f18a:	89ab      	ldrh	r3, [r5, #12]
 800f18c:	059a      	lsls	r2, r3, #22
 800f18e:	d402      	bmi.n	800f196 <_vfiprintf_r+0x202>
 800f190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f192:	f7fe faa3 	bl	800d6dc <__retarget_lock_release_recursive>
 800f196:	89ab      	ldrh	r3, [r5, #12]
 800f198:	065b      	lsls	r3, r3, #25
 800f19a:	f53f af1d 	bmi.w	800efd8 <_vfiprintf_r+0x44>
 800f19e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1a0:	e71c      	b.n	800efdc <_vfiprintf_r+0x48>
 800f1a2:	ab03      	add	r3, sp, #12
 800f1a4:	9300      	str	r3, [sp, #0]
 800f1a6:	462a      	mov	r2, r5
 800f1a8:	4b05      	ldr	r3, [pc, #20]	; (800f1c0 <_vfiprintf_r+0x22c>)
 800f1aa:	a904      	add	r1, sp, #16
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	f7fd fff1 	bl	800d194 <_printf_i>
 800f1b2:	e7e4      	b.n	800f17e <_vfiprintf_r+0x1ea>
 800f1b4:	08010910 	.word	0x08010910
 800f1b8:	0801091a 	.word	0x0801091a
 800f1bc:	0800cc4d 	.word	0x0800cc4d
 800f1c0:	0800ef71 	.word	0x0800ef71
 800f1c4:	08010916 	.word	0x08010916

0800f1c8 <__swbuf_r>:
 800f1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ca:	460e      	mov	r6, r1
 800f1cc:	4614      	mov	r4, r2
 800f1ce:	4605      	mov	r5, r0
 800f1d0:	b118      	cbz	r0, 800f1da <__swbuf_r+0x12>
 800f1d2:	6a03      	ldr	r3, [r0, #32]
 800f1d4:	b90b      	cbnz	r3, 800f1da <__swbuf_r+0x12>
 800f1d6:	f7fe f98b 	bl	800d4f0 <__sinit>
 800f1da:	69a3      	ldr	r3, [r4, #24]
 800f1dc:	60a3      	str	r3, [r4, #8]
 800f1de:	89a3      	ldrh	r3, [r4, #12]
 800f1e0:	071a      	lsls	r2, r3, #28
 800f1e2:	d525      	bpl.n	800f230 <__swbuf_r+0x68>
 800f1e4:	6923      	ldr	r3, [r4, #16]
 800f1e6:	b31b      	cbz	r3, 800f230 <__swbuf_r+0x68>
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	6922      	ldr	r2, [r4, #16]
 800f1ec:	1a98      	subs	r0, r3, r2
 800f1ee:	6963      	ldr	r3, [r4, #20]
 800f1f0:	b2f6      	uxtb	r6, r6
 800f1f2:	4283      	cmp	r3, r0
 800f1f4:	4637      	mov	r7, r6
 800f1f6:	dc04      	bgt.n	800f202 <__swbuf_r+0x3a>
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	f7ff fe1c 	bl	800ee38 <_fflush_r>
 800f200:	b9e0      	cbnz	r0, 800f23c <__swbuf_r+0x74>
 800f202:	68a3      	ldr	r3, [r4, #8]
 800f204:	3b01      	subs	r3, #1
 800f206:	60a3      	str	r3, [r4, #8]
 800f208:	6823      	ldr	r3, [r4, #0]
 800f20a:	1c5a      	adds	r2, r3, #1
 800f20c:	6022      	str	r2, [r4, #0]
 800f20e:	701e      	strb	r6, [r3, #0]
 800f210:	6962      	ldr	r2, [r4, #20]
 800f212:	1c43      	adds	r3, r0, #1
 800f214:	429a      	cmp	r2, r3
 800f216:	d004      	beq.n	800f222 <__swbuf_r+0x5a>
 800f218:	89a3      	ldrh	r3, [r4, #12]
 800f21a:	07db      	lsls	r3, r3, #31
 800f21c:	d506      	bpl.n	800f22c <__swbuf_r+0x64>
 800f21e:	2e0a      	cmp	r6, #10
 800f220:	d104      	bne.n	800f22c <__swbuf_r+0x64>
 800f222:	4621      	mov	r1, r4
 800f224:	4628      	mov	r0, r5
 800f226:	f7ff fe07 	bl	800ee38 <_fflush_r>
 800f22a:	b938      	cbnz	r0, 800f23c <__swbuf_r+0x74>
 800f22c:	4638      	mov	r0, r7
 800f22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f230:	4621      	mov	r1, r4
 800f232:	4628      	mov	r0, r5
 800f234:	f000 f806 	bl	800f244 <__swsetup_r>
 800f238:	2800      	cmp	r0, #0
 800f23a:	d0d5      	beq.n	800f1e8 <__swbuf_r+0x20>
 800f23c:	f04f 37ff 	mov.w	r7, #4294967295
 800f240:	e7f4      	b.n	800f22c <__swbuf_r+0x64>
	...

0800f244 <__swsetup_r>:
 800f244:	b538      	push	{r3, r4, r5, lr}
 800f246:	4b2a      	ldr	r3, [pc, #168]	; (800f2f0 <__swsetup_r+0xac>)
 800f248:	4605      	mov	r5, r0
 800f24a:	6818      	ldr	r0, [r3, #0]
 800f24c:	460c      	mov	r4, r1
 800f24e:	b118      	cbz	r0, 800f258 <__swsetup_r+0x14>
 800f250:	6a03      	ldr	r3, [r0, #32]
 800f252:	b90b      	cbnz	r3, 800f258 <__swsetup_r+0x14>
 800f254:	f7fe f94c 	bl	800d4f0 <__sinit>
 800f258:	89a3      	ldrh	r3, [r4, #12]
 800f25a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f25e:	0718      	lsls	r0, r3, #28
 800f260:	d422      	bmi.n	800f2a8 <__swsetup_r+0x64>
 800f262:	06d9      	lsls	r1, r3, #27
 800f264:	d407      	bmi.n	800f276 <__swsetup_r+0x32>
 800f266:	2309      	movs	r3, #9
 800f268:	602b      	str	r3, [r5, #0]
 800f26a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f26e:	81a3      	strh	r3, [r4, #12]
 800f270:	f04f 30ff 	mov.w	r0, #4294967295
 800f274:	e034      	b.n	800f2e0 <__swsetup_r+0x9c>
 800f276:	0758      	lsls	r0, r3, #29
 800f278:	d512      	bpl.n	800f2a0 <__swsetup_r+0x5c>
 800f27a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f27c:	b141      	cbz	r1, 800f290 <__swsetup_r+0x4c>
 800f27e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f282:	4299      	cmp	r1, r3
 800f284:	d002      	beq.n	800f28c <__swsetup_r+0x48>
 800f286:	4628      	mov	r0, r5
 800f288:	f7ff f8b4 	bl	800e3f4 <_free_r>
 800f28c:	2300      	movs	r3, #0
 800f28e:	6363      	str	r3, [r4, #52]	; 0x34
 800f290:	89a3      	ldrh	r3, [r4, #12]
 800f292:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f296:	81a3      	strh	r3, [r4, #12]
 800f298:	2300      	movs	r3, #0
 800f29a:	6063      	str	r3, [r4, #4]
 800f29c:	6923      	ldr	r3, [r4, #16]
 800f29e:	6023      	str	r3, [r4, #0]
 800f2a0:	89a3      	ldrh	r3, [r4, #12]
 800f2a2:	f043 0308 	orr.w	r3, r3, #8
 800f2a6:	81a3      	strh	r3, [r4, #12]
 800f2a8:	6923      	ldr	r3, [r4, #16]
 800f2aa:	b94b      	cbnz	r3, 800f2c0 <__swsetup_r+0x7c>
 800f2ac:	89a3      	ldrh	r3, [r4, #12]
 800f2ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f2b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2b6:	d003      	beq.n	800f2c0 <__swsetup_r+0x7c>
 800f2b8:	4621      	mov	r1, r4
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	f000 f884 	bl	800f3c8 <__smakebuf_r>
 800f2c0:	89a0      	ldrh	r0, [r4, #12]
 800f2c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2c6:	f010 0301 	ands.w	r3, r0, #1
 800f2ca:	d00a      	beq.n	800f2e2 <__swsetup_r+0x9e>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	60a3      	str	r3, [r4, #8]
 800f2d0:	6963      	ldr	r3, [r4, #20]
 800f2d2:	425b      	negs	r3, r3
 800f2d4:	61a3      	str	r3, [r4, #24]
 800f2d6:	6923      	ldr	r3, [r4, #16]
 800f2d8:	b943      	cbnz	r3, 800f2ec <__swsetup_r+0xa8>
 800f2da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f2de:	d1c4      	bne.n	800f26a <__swsetup_r+0x26>
 800f2e0:	bd38      	pop	{r3, r4, r5, pc}
 800f2e2:	0781      	lsls	r1, r0, #30
 800f2e4:	bf58      	it	pl
 800f2e6:	6963      	ldrpl	r3, [r4, #20]
 800f2e8:	60a3      	str	r3, [r4, #8]
 800f2ea:	e7f4      	b.n	800f2d6 <__swsetup_r+0x92>
 800f2ec:	2000      	movs	r0, #0
 800f2ee:	e7f7      	b.n	800f2e0 <__swsetup_r+0x9c>
 800f2f0:	200001dc 	.word	0x200001dc

0800f2f4 <_raise_r>:
 800f2f4:	291f      	cmp	r1, #31
 800f2f6:	b538      	push	{r3, r4, r5, lr}
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	460d      	mov	r5, r1
 800f2fc:	d904      	bls.n	800f308 <_raise_r+0x14>
 800f2fe:	2316      	movs	r3, #22
 800f300:	6003      	str	r3, [r0, #0]
 800f302:	f04f 30ff 	mov.w	r0, #4294967295
 800f306:	bd38      	pop	{r3, r4, r5, pc}
 800f308:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f30a:	b112      	cbz	r2, 800f312 <_raise_r+0x1e>
 800f30c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f310:	b94b      	cbnz	r3, 800f326 <_raise_r+0x32>
 800f312:	4620      	mov	r0, r4
 800f314:	f000 f830 	bl	800f378 <_getpid_r>
 800f318:	462a      	mov	r2, r5
 800f31a:	4601      	mov	r1, r0
 800f31c:	4620      	mov	r0, r4
 800f31e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f322:	f000 b817 	b.w	800f354 <_kill_r>
 800f326:	2b01      	cmp	r3, #1
 800f328:	d00a      	beq.n	800f340 <_raise_r+0x4c>
 800f32a:	1c59      	adds	r1, r3, #1
 800f32c:	d103      	bne.n	800f336 <_raise_r+0x42>
 800f32e:	2316      	movs	r3, #22
 800f330:	6003      	str	r3, [r0, #0]
 800f332:	2001      	movs	r0, #1
 800f334:	e7e7      	b.n	800f306 <_raise_r+0x12>
 800f336:	2400      	movs	r4, #0
 800f338:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f33c:	4628      	mov	r0, r5
 800f33e:	4798      	blx	r3
 800f340:	2000      	movs	r0, #0
 800f342:	e7e0      	b.n	800f306 <_raise_r+0x12>

0800f344 <raise>:
 800f344:	4b02      	ldr	r3, [pc, #8]	; (800f350 <raise+0xc>)
 800f346:	4601      	mov	r1, r0
 800f348:	6818      	ldr	r0, [r3, #0]
 800f34a:	f7ff bfd3 	b.w	800f2f4 <_raise_r>
 800f34e:	bf00      	nop
 800f350:	200001dc 	.word	0x200001dc

0800f354 <_kill_r>:
 800f354:	b538      	push	{r3, r4, r5, lr}
 800f356:	4d07      	ldr	r5, [pc, #28]	; (800f374 <_kill_r+0x20>)
 800f358:	2300      	movs	r3, #0
 800f35a:	4604      	mov	r4, r0
 800f35c:	4608      	mov	r0, r1
 800f35e:	4611      	mov	r1, r2
 800f360:	602b      	str	r3, [r5, #0]
 800f362:	f7f4 fd47 	bl	8003df4 <_kill>
 800f366:	1c43      	adds	r3, r0, #1
 800f368:	d102      	bne.n	800f370 <_kill_r+0x1c>
 800f36a:	682b      	ldr	r3, [r5, #0]
 800f36c:	b103      	cbz	r3, 800f370 <_kill_r+0x1c>
 800f36e:	6023      	str	r3, [r4, #0]
 800f370:	bd38      	pop	{r3, r4, r5, pc}
 800f372:	bf00      	nop
 800f374:	20014000 	.word	0x20014000

0800f378 <_getpid_r>:
 800f378:	f7f4 bd34 	b.w	8003de4 <_getpid>

0800f37c <__swhatbuf_r>:
 800f37c:	b570      	push	{r4, r5, r6, lr}
 800f37e:	460c      	mov	r4, r1
 800f380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f384:	2900      	cmp	r1, #0
 800f386:	b096      	sub	sp, #88	; 0x58
 800f388:	4615      	mov	r5, r2
 800f38a:	461e      	mov	r6, r3
 800f38c:	da0d      	bge.n	800f3aa <__swhatbuf_r+0x2e>
 800f38e:	89a3      	ldrh	r3, [r4, #12]
 800f390:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f394:	f04f 0100 	mov.w	r1, #0
 800f398:	bf0c      	ite	eq
 800f39a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f39e:	2340      	movne	r3, #64	; 0x40
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	6031      	str	r1, [r6, #0]
 800f3a4:	602b      	str	r3, [r5, #0]
 800f3a6:	b016      	add	sp, #88	; 0x58
 800f3a8:	bd70      	pop	{r4, r5, r6, pc}
 800f3aa:	466a      	mov	r2, sp
 800f3ac:	f000 f848 	bl	800f440 <_fstat_r>
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	dbec      	blt.n	800f38e <__swhatbuf_r+0x12>
 800f3b4:	9901      	ldr	r1, [sp, #4]
 800f3b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f3ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f3be:	4259      	negs	r1, r3
 800f3c0:	4159      	adcs	r1, r3
 800f3c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3c6:	e7eb      	b.n	800f3a0 <__swhatbuf_r+0x24>

0800f3c8 <__smakebuf_r>:
 800f3c8:	898b      	ldrh	r3, [r1, #12]
 800f3ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f3cc:	079d      	lsls	r5, r3, #30
 800f3ce:	4606      	mov	r6, r0
 800f3d0:	460c      	mov	r4, r1
 800f3d2:	d507      	bpl.n	800f3e4 <__smakebuf_r+0x1c>
 800f3d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f3d8:	6023      	str	r3, [r4, #0]
 800f3da:	6123      	str	r3, [r4, #16]
 800f3dc:	2301      	movs	r3, #1
 800f3de:	6163      	str	r3, [r4, #20]
 800f3e0:	b002      	add	sp, #8
 800f3e2:	bd70      	pop	{r4, r5, r6, pc}
 800f3e4:	ab01      	add	r3, sp, #4
 800f3e6:	466a      	mov	r2, sp
 800f3e8:	f7ff ffc8 	bl	800f37c <__swhatbuf_r>
 800f3ec:	9900      	ldr	r1, [sp, #0]
 800f3ee:	4605      	mov	r5, r0
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	f7ff f873 	bl	800e4dc <_malloc_r>
 800f3f6:	b948      	cbnz	r0, 800f40c <__smakebuf_r+0x44>
 800f3f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3fc:	059a      	lsls	r2, r3, #22
 800f3fe:	d4ef      	bmi.n	800f3e0 <__smakebuf_r+0x18>
 800f400:	f023 0303 	bic.w	r3, r3, #3
 800f404:	f043 0302 	orr.w	r3, r3, #2
 800f408:	81a3      	strh	r3, [r4, #12]
 800f40a:	e7e3      	b.n	800f3d4 <__smakebuf_r+0xc>
 800f40c:	89a3      	ldrh	r3, [r4, #12]
 800f40e:	6020      	str	r0, [r4, #0]
 800f410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f414:	81a3      	strh	r3, [r4, #12]
 800f416:	9b00      	ldr	r3, [sp, #0]
 800f418:	6163      	str	r3, [r4, #20]
 800f41a:	9b01      	ldr	r3, [sp, #4]
 800f41c:	6120      	str	r0, [r4, #16]
 800f41e:	b15b      	cbz	r3, 800f438 <__smakebuf_r+0x70>
 800f420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f424:	4630      	mov	r0, r6
 800f426:	f000 f81d 	bl	800f464 <_isatty_r>
 800f42a:	b128      	cbz	r0, 800f438 <__smakebuf_r+0x70>
 800f42c:	89a3      	ldrh	r3, [r4, #12]
 800f42e:	f023 0303 	bic.w	r3, r3, #3
 800f432:	f043 0301 	orr.w	r3, r3, #1
 800f436:	81a3      	strh	r3, [r4, #12]
 800f438:	89a3      	ldrh	r3, [r4, #12]
 800f43a:	431d      	orrs	r5, r3
 800f43c:	81a5      	strh	r5, [r4, #12]
 800f43e:	e7cf      	b.n	800f3e0 <__smakebuf_r+0x18>

0800f440 <_fstat_r>:
 800f440:	b538      	push	{r3, r4, r5, lr}
 800f442:	4d07      	ldr	r5, [pc, #28]	; (800f460 <_fstat_r+0x20>)
 800f444:	2300      	movs	r3, #0
 800f446:	4604      	mov	r4, r0
 800f448:	4608      	mov	r0, r1
 800f44a:	4611      	mov	r1, r2
 800f44c:	602b      	str	r3, [r5, #0]
 800f44e:	f7f4 fd14 	bl	8003e7a <_fstat>
 800f452:	1c43      	adds	r3, r0, #1
 800f454:	d102      	bne.n	800f45c <_fstat_r+0x1c>
 800f456:	682b      	ldr	r3, [r5, #0]
 800f458:	b103      	cbz	r3, 800f45c <_fstat_r+0x1c>
 800f45a:	6023      	str	r3, [r4, #0]
 800f45c:	bd38      	pop	{r3, r4, r5, pc}
 800f45e:	bf00      	nop
 800f460:	20014000 	.word	0x20014000

0800f464 <_isatty_r>:
 800f464:	b538      	push	{r3, r4, r5, lr}
 800f466:	4d06      	ldr	r5, [pc, #24]	; (800f480 <_isatty_r+0x1c>)
 800f468:	2300      	movs	r3, #0
 800f46a:	4604      	mov	r4, r0
 800f46c:	4608      	mov	r0, r1
 800f46e:	602b      	str	r3, [r5, #0]
 800f470:	f7f4 fd13 	bl	8003e9a <_isatty>
 800f474:	1c43      	adds	r3, r0, #1
 800f476:	d102      	bne.n	800f47e <_isatty_r+0x1a>
 800f478:	682b      	ldr	r3, [r5, #0]
 800f47a:	b103      	cbz	r3, 800f47e <_isatty_r+0x1a>
 800f47c:	6023      	str	r3, [r4, #0]
 800f47e:	bd38      	pop	{r3, r4, r5, pc}
 800f480:	20014000 	.word	0x20014000

0800f484 <pow>:
 800f484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f486:	ed2d 8b02 	vpush	{d8}
 800f48a:	eeb0 8a40 	vmov.f32	s16, s0
 800f48e:	eef0 8a60 	vmov.f32	s17, s1
 800f492:	ec55 4b11 	vmov	r4, r5, d1
 800f496:	f000 f993 	bl	800f7c0 <__ieee754_pow>
 800f49a:	4622      	mov	r2, r4
 800f49c:	462b      	mov	r3, r5
 800f49e:	4620      	mov	r0, r4
 800f4a0:	4629      	mov	r1, r5
 800f4a2:	ec57 6b10 	vmov	r6, r7, d0
 800f4a6:	f7f1 fbb1 	bl	8000c0c <__aeabi_dcmpun>
 800f4aa:	2800      	cmp	r0, #0
 800f4ac:	d13b      	bne.n	800f526 <pow+0xa2>
 800f4ae:	ec51 0b18 	vmov	r0, r1, d8
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	f7f1 fb77 	bl	8000ba8 <__aeabi_dcmpeq>
 800f4ba:	b1b8      	cbz	r0, 800f4ec <pow+0x68>
 800f4bc:	2200      	movs	r2, #0
 800f4be:	2300      	movs	r3, #0
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	4629      	mov	r1, r5
 800f4c4:	f7f1 fb70 	bl	8000ba8 <__aeabi_dcmpeq>
 800f4c8:	2800      	cmp	r0, #0
 800f4ca:	d146      	bne.n	800f55a <pow+0xd6>
 800f4cc:	ec45 4b10 	vmov	d0, r4, r5
 800f4d0:	f000 f848 	bl	800f564 <finite>
 800f4d4:	b338      	cbz	r0, 800f526 <pow+0xa2>
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	2300      	movs	r3, #0
 800f4da:	4620      	mov	r0, r4
 800f4dc:	4629      	mov	r1, r5
 800f4de:	f7f1 fb6d 	bl	8000bbc <__aeabi_dcmplt>
 800f4e2:	b300      	cbz	r0, 800f526 <pow+0xa2>
 800f4e4:	f7fe f8ce 	bl	800d684 <__errno>
 800f4e8:	2322      	movs	r3, #34	; 0x22
 800f4ea:	e01b      	b.n	800f524 <pow+0xa0>
 800f4ec:	ec47 6b10 	vmov	d0, r6, r7
 800f4f0:	f000 f838 	bl	800f564 <finite>
 800f4f4:	b9e0      	cbnz	r0, 800f530 <pow+0xac>
 800f4f6:	eeb0 0a48 	vmov.f32	s0, s16
 800f4fa:	eef0 0a68 	vmov.f32	s1, s17
 800f4fe:	f000 f831 	bl	800f564 <finite>
 800f502:	b1a8      	cbz	r0, 800f530 <pow+0xac>
 800f504:	ec45 4b10 	vmov	d0, r4, r5
 800f508:	f000 f82c 	bl	800f564 <finite>
 800f50c:	b180      	cbz	r0, 800f530 <pow+0xac>
 800f50e:	4632      	mov	r2, r6
 800f510:	463b      	mov	r3, r7
 800f512:	4630      	mov	r0, r6
 800f514:	4639      	mov	r1, r7
 800f516:	f7f1 fb79 	bl	8000c0c <__aeabi_dcmpun>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d0e2      	beq.n	800f4e4 <pow+0x60>
 800f51e:	f7fe f8b1 	bl	800d684 <__errno>
 800f522:	2321      	movs	r3, #33	; 0x21
 800f524:	6003      	str	r3, [r0, #0]
 800f526:	ecbd 8b02 	vpop	{d8}
 800f52a:	ec47 6b10 	vmov	d0, r6, r7
 800f52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f530:	2200      	movs	r2, #0
 800f532:	2300      	movs	r3, #0
 800f534:	4630      	mov	r0, r6
 800f536:	4639      	mov	r1, r7
 800f538:	f7f1 fb36 	bl	8000ba8 <__aeabi_dcmpeq>
 800f53c:	2800      	cmp	r0, #0
 800f53e:	d0f2      	beq.n	800f526 <pow+0xa2>
 800f540:	eeb0 0a48 	vmov.f32	s0, s16
 800f544:	eef0 0a68 	vmov.f32	s1, s17
 800f548:	f000 f80c 	bl	800f564 <finite>
 800f54c:	2800      	cmp	r0, #0
 800f54e:	d0ea      	beq.n	800f526 <pow+0xa2>
 800f550:	ec45 4b10 	vmov	d0, r4, r5
 800f554:	f000 f806 	bl	800f564 <finite>
 800f558:	e7c3      	b.n	800f4e2 <pow+0x5e>
 800f55a:	4f01      	ldr	r7, [pc, #4]	; (800f560 <pow+0xdc>)
 800f55c:	2600      	movs	r6, #0
 800f55e:	e7e2      	b.n	800f526 <pow+0xa2>
 800f560:	3ff00000 	.word	0x3ff00000

0800f564 <finite>:
 800f564:	b082      	sub	sp, #8
 800f566:	ed8d 0b00 	vstr	d0, [sp]
 800f56a:	9801      	ldr	r0, [sp, #4]
 800f56c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f570:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f574:	0fc0      	lsrs	r0, r0, #31
 800f576:	b002      	add	sp, #8
 800f578:	4770      	bx	lr
	...

0800f57c <__ieee754_sqrt>:
 800f57c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f580:	ec55 4b10 	vmov	r4, r5, d0
 800f584:	4e67      	ldr	r6, [pc, #412]	; (800f724 <__ieee754_sqrt+0x1a8>)
 800f586:	43ae      	bics	r6, r5
 800f588:	ee10 0a10 	vmov	r0, s0
 800f58c:	ee10 2a10 	vmov	r2, s0
 800f590:	4629      	mov	r1, r5
 800f592:	462b      	mov	r3, r5
 800f594:	d10d      	bne.n	800f5b2 <__ieee754_sqrt+0x36>
 800f596:	f7f1 f89f 	bl	80006d8 <__aeabi_dmul>
 800f59a:	4602      	mov	r2, r0
 800f59c:	460b      	mov	r3, r1
 800f59e:	4620      	mov	r0, r4
 800f5a0:	4629      	mov	r1, r5
 800f5a2:	f7f0 fee3 	bl	800036c <__adddf3>
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	460d      	mov	r5, r1
 800f5aa:	ec45 4b10 	vmov	d0, r4, r5
 800f5ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b2:	2d00      	cmp	r5, #0
 800f5b4:	dc0b      	bgt.n	800f5ce <__ieee754_sqrt+0x52>
 800f5b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f5ba:	4326      	orrs	r6, r4
 800f5bc:	d0f5      	beq.n	800f5aa <__ieee754_sqrt+0x2e>
 800f5be:	b135      	cbz	r5, 800f5ce <__ieee754_sqrt+0x52>
 800f5c0:	f7f0 fed2 	bl	8000368 <__aeabi_dsub>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	460b      	mov	r3, r1
 800f5c8:	f7f1 f9b0 	bl	800092c <__aeabi_ddiv>
 800f5cc:	e7eb      	b.n	800f5a6 <__ieee754_sqrt+0x2a>
 800f5ce:	1509      	asrs	r1, r1, #20
 800f5d0:	f000 808d 	beq.w	800f6ee <__ieee754_sqrt+0x172>
 800f5d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5d8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f5dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f5e0:	07c9      	lsls	r1, r1, #31
 800f5e2:	bf5c      	itt	pl
 800f5e4:	005b      	lslpl	r3, r3, #1
 800f5e6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f5ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f5ee:	bf58      	it	pl
 800f5f0:	0052      	lslpl	r2, r2, #1
 800f5f2:	2500      	movs	r5, #0
 800f5f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f5f8:	1076      	asrs	r6, r6, #1
 800f5fa:	0052      	lsls	r2, r2, #1
 800f5fc:	f04f 0e16 	mov.w	lr, #22
 800f600:	46ac      	mov	ip, r5
 800f602:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f606:	eb0c 0001 	add.w	r0, ip, r1
 800f60a:	4298      	cmp	r0, r3
 800f60c:	bfde      	ittt	le
 800f60e:	1a1b      	suble	r3, r3, r0
 800f610:	eb00 0c01 	addle.w	ip, r0, r1
 800f614:	186d      	addle	r5, r5, r1
 800f616:	005b      	lsls	r3, r3, #1
 800f618:	f1be 0e01 	subs.w	lr, lr, #1
 800f61c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f620:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f624:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f628:	d1ed      	bne.n	800f606 <__ieee754_sqrt+0x8a>
 800f62a:	4674      	mov	r4, lr
 800f62c:	2720      	movs	r7, #32
 800f62e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f632:	4563      	cmp	r3, ip
 800f634:	eb01 000e 	add.w	r0, r1, lr
 800f638:	dc02      	bgt.n	800f640 <__ieee754_sqrt+0xc4>
 800f63a:	d113      	bne.n	800f664 <__ieee754_sqrt+0xe8>
 800f63c:	4290      	cmp	r0, r2
 800f63e:	d811      	bhi.n	800f664 <__ieee754_sqrt+0xe8>
 800f640:	2800      	cmp	r0, #0
 800f642:	eb00 0e01 	add.w	lr, r0, r1
 800f646:	da57      	bge.n	800f6f8 <__ieee754_sqrt+0x17c>
 800f648:	f1be 0f00 	cmp.w	lr, #0
 800f64c:	db54      	blt.n	800f6f8 <__ieee754_sqrt+0x17c>
 800f64e:	f10c 0801 	add.w	r8, ip, #1
 800f652:	eba3 030c 	sub.w	r3, r3, ip
 800f656:	4290      	cmp	r0, r2
 800f658:	bf88      	it	hi
 800f65a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f65e:	1a12      	subs	r2, r2, r0
 800f660:	440c      	add	r4, r1
 800f662:	46c4      	mov	ip, r8
 800f664:	005b      	lsls	r3, r3, #1
 800f666:	3f01      	subs	r7, #1
 800f668:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f66c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f670:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f674:	d1dd      	bne.n	800f632 <__ieee754_sqrt+0xb6>
 800f676:	4313      	orrs	r3, r2
 800f678:	d01b      	beq.n	800f6b2 <__ieee754_sqrt+0x136>
 800f67a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f728 <__ieee754_sqrt+0x1ac>
 800f67e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f72c <__ieee754_sqrt+0x1b0>
 800f682:	e9da 0100 	ldrd	r0, r1, [sl]
 800f686:	e9db 2300 	ldrd	r2, r3, [fp]
 800f68a:	f7f0 fe6d 	bl	8000368 <__aeabi_dsub>
 800f68e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f692:	4602      	mov	r2, r0
 800f694:	460b      	mov	r3, r1
 800f696:	4640      	mov	r0, r8
 800f698:	4649      	mov	r1, r9
 800f69a:	f7f1 fa99 	bl	8000bd0 <__aeabi_dcmple>
 800f69e:	b140      	cbz	r0, 800f6b2 <__ieee754_sqrt+0x136>
 800f6a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f6a4:	e9da 0100 	ldrd	r0, r1, [sl]
 800f6a8:	e9db 2300 	ldrd	r2, r3, [fp]
 800f6ac:	d126      	bne.n	800f6fc <__ieee754_sqrt+0x180>
 800f6ae:	3501      	adds	r5, #1
 800f6b0:	463c      	mov	r4, r7
 800f6b2:	106a      	asrs	r2, r5, #1
 800f6b4:	0863      	lsrs	r3, r4, #1
 800f6b6:	07e9      	lsls	r1, r5, #31
 800f6b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f6bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f6c0:	bf48      	it	mi
 800f6c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f6c6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f6ca:	461c      	mov	r4, r3
 800f6cc:	e76d      	b.n	800f5aa <__ieee754_sqrt+0x2e>
 800f6ce:	0ad3      	lsrs	r3, r2, #11
 800f6d0:	3815      	subs	r0, #21
 800f6d2:	0552      	lsls	r2, r2, #21
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d0fa      	beq.n	800f6ce <__ieee754_sqrt+0x152>
 800f6d8:	02dc      	lsls	r4, r3, #11
 800f6da:	d50a      	bpl.n	800f6f2 <__ieee754_sqrt+0x176>
 800f6dc:	f1c1 0420 	rsb	r4, r1, #32
 800f6e0:	fa22 f404 	lsr.w	r4, r2, r4
 800f6e4:	1e4d      	subs	r5, r1, #1
 800f6e6:	408a      	lsls	r2, r1
 800f6e8:	4323      	orrs	r3, r4
 800f6ea:	1b41      	subs	r1, r0, r5
 800f6ec:	e772      	b.n	800f5d4 <__ieee754_sqrt+0x58>
 800f6ee:	4608      	mov	r0, r1
 800f6f0:	e7f0      	b.n	800f6d4 <__ieee754_sqrt+0x158>
 800f6f2:	005b      	lsls	r3, r3, #1
 800f6f4:	3101      	adds	r1, #1
 800f6f6:	e7ef      	b.n	800f6d8 <__ieee754_sqrt+0x15c>
 800f6f8:	46e0      	mov	r8, ip
 800f6fa:	e7aa      	b.n	800f652 <__ieee754_sqrt+0xd6>
 800f6fc:	f7f0 fe36 	bl	800036c <__adddf3>
 800f700:	e9da 8900 	ldrd	r8, r9, [sl]
 800f704:	4602      	mov	r2, r0
 800f706:	460b      	mov	r3, r1
 800f708:	4640      	mov	r0, r8
 800f70a:	4649      	mov	r1, r9
 800f70c:	f7f1 fa56 	bl	8000bbc <__aeabi_dcmplt>
 800f710:	b120      	cbz	r0, 800f71c <__ieee754_sqrt+0x1a0>
 800f712:	1ca0      	adds	r0, r4, #2
 800f714:	bf08      	it	eq
 800f716:	3501      	addeq	r5, #1
 800f718:	3402      	adds	r4, #2
 800f71a:	e7ca      	b.n	800f6b2 <__ieee754_sqrt+0x136>
 800f71c:	3401      	adds	r4, #1
 800f71e:	f024 0401 	bic.w	r4, r4, #1
 800f722:	e7c6      	b.n	800f6b2 <__ieee754_sqrt+0x136>
 800f724:	7ff00000 	.word	0x7ff00000
 800f728:	200001e0 	.word	0x200001e0
 800f72c:	200001e8 	.word	0x200001e8

0800f730 <round>:
 800f730:	ec53 2b10 	vmov	r2, r3, d0
 800f734:	b570      	push	{r4, r5, r6, lr}
 800f736:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800f73a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800f73e:	2813      	cmp	r0, #19
 800f740:	ee10 5a10 	vmov	r5, s0
 800f744:	4619      	mov	r1, r3
 800f746:	dc18      	bgt.n	800f77a <round+0x4a>
 800f748:	2800      	cmp	r0, #0
 800f74a:	da09      	bge.n	800f760 <round+0x30>
 800f74c:	3001      	adds	r0, #1
 800f74e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800f752:	d103      	bne.n	800f75c <round+0x2c>
 800f754:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800f758:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f75c:	2300      	movs	r3, #0
 800f75e:	e02a      	b.n	800f7b6 <round+0x86>
 800f760:	4c16      	ldr	r4, [pc, #88]	; (800f7bc <round+0x8c>)
 800f762:	4104      	asrs	r4, r0
 800f764:	ea03 0604 	and.w	r6, r3, r4
 800f768:	4316      	orrs	r6, r2
 800f76a:	d011      	beq.n	800f790 <round+0x60>
 800f76c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f770:	4103      	asrs	r3, r0
 800f772:	440b      	add	r3, r1
 800f774:	ea23 0104 	bic.w	r1, r3, r4
 800f778:	e7f0      	b.n	800f75c <round+0x2c>
 800f77a:	2833      	cmp	r0, #51	; 0x33
 800f77c:	dd0b      	ble.n	800f796 <round+0x66>
 800f77e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800f782:	d105      	bne.n	800f790 <round+0x60>
 800f784:	ee10 0a10 	vmov	r0, s0
 800f788:	f7f0 fdf0 	bl	800036c <__adddf3>
 800f78c:	4602      	mov	r2, r0
 800f78e:	460b      	mov	r3, r1
 800f790:	ec43 2b10 	vmov	d0, r2, r3
 800f794:	bd70      	pop	{r4, r5, r6, pc}
 800f796:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800f79a:	f04f 34ff 	mov.w	r4, #4294967295
 800f79e:	40f4      	lsrs	r4, r6
 800f7a0:	4214      	tst	r4, r2
 800f7a2:	d0f5      	beq.n	800f790 <round+0x60>
 800f7a4:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	4083      	lsls	r3, r0
 800f7ac:	195b      	adds	r3, r3, r5
 800f7ae:	bf28      	it	cs
 800f7b0:	3101      	addcs	r1, #1
 800f7b2:	ea23 0304 	bic.w	r3, r3, r4
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	e7e9      	b.n	800f790 <round+0x60>
 800f7bc:	000fffff 	.word	0x000fffff

0800f7c0 <__ieee754_pow>:
 800f7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c4:	ed2d 8b06 	vpush	{d8-d10}
 800f7c8:	b089      	sub	sp, #36	; 0x24
 800f7ca:	ed8d 1b00 	vstr	d1, [sp]
 800f7ce:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f7d2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f7d6:	ea58 0102 	orrs.w	r1, r8, r2
 800f7da:	ec57 6b10 	vmov	r6, r7, d0
 800f7de:	d115      	bne.n	800f80c <__ieee754_pow+0x4c>
 800f7e0:	19b3      	adds	r3, r6, r6
 800f7e2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f7e6:	4152      	adcs	r2, r2
 800f7e8:	4299      	cmp	r1, r3
 800f7ea:	4b89      	ldr	r3, [pc, #548]	; (800fa10 <__ieee754_pow+0x250>)
 800f7ec:	4193      	sbcs	r3, r2
 800f7ee:	f080 84d1 	bcs.w	8010194 <__ieee754_pow+0x9d4>
 800f7f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7f6:	4630      	mov	r0, r6
 800f7f8:	4639      	mov	r1, r7
 800f7fa:	f7f0 fdb7 	bl	800036c <__adddf3>
 800f7fe:	ec41 0b10 	vmov	d0, r0, r1
 800f802:	b009      	add	sp, #36	; 0x24
 800f804:	ecbd 8b06 	vpop	{d8-d10}
 800f808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f80c:	4b81      	ldr	r3, [pc, #516]	; (800fa14 <__ieee754_pow+0x254>)
 800f80e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f812:	429c      	cmp	r4, r3
 800f814:	ee10 aa10 	vmov	sl, s0
 800f818:	463d      	mov	r5, r7
 800f81a:	dc06      	bgt.n	800f82a <__ieee754_pow+0x6a>
 800f81c:	d101      	bne.n	800f822 <__ieee754_pow+0x62>
 800f81e:	2e00      	cmp	r6, #0
 800f820:	d1e7      	bne.n	800f7f2 <__ieee754_pow+0x32>
 800f822:	4598      	cmp	r8, r3
 800f824:	dc01      	bgt.n	800f82a <__ieee754_pow+0x6a>
 800f826:	d10f      	bne.n	800f848 <__ieee754_pow+0x88>
 800f828:	b172      	cbz	r2, 800f848 <__ieee754_pow+0x88>
 800f82a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f82e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f832:	ea55 050a 	orrs.w	r5, r5, sl
 800f836:	d1dc      	bne.n	800f7f2 <__ieee754_pow+0x32>
 800f838:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f83c:	18db      	adds	r3, r3, r3
 800f83e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f842:	4152      	adcs	r2, r2
 800f844:	429d      	cmp	r5, r3
 800f846:	e7d0      	b.n	800f7ea <__ieee754_pow+0x2a>
 800f848:	2d00      	cmp	r5, #0
 800f84a:	da3b      	bge.n	800f8c4 <__ieee754_pow+0x104>
 800f84c:	4b72      	ldr	r3, [pc, #456]	; (800fa18 <__ieee754_pow+0x258>)
 800f84e:	4598      	cmp	r8, r3
 800f850:	dc51      	bgt.n	800f8f6 <__ieee754_pow+0x136>
 800f852:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f856:	4598      	cmp	r8, r3
 800f858:	f340 84ab 	ble.w	80101b2 <__ieee754_pow+0x9f2>
 800f85c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f860:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f864:	2b14      	cmp	r3, #20
 800f866:	dd0f      	ble.n	800f888 <__ieee754_pow+0xc8>
 800f868:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f86c:	fa22 f103 	lsr.w	r1, r2, r3
 800f870:	fa01 f303 	lsl.w	r3, r1, r3
 800f874:	4293      	cmp	r3, r2
 800f876:	f040 849c 	bne.w	80101b2 <__ieee754_pow+0x9f2>
 800f87a:	f001 0101 	and.w	r1, r1, #1
 800f87e:	f1c1 0302 	rsb	r3, r1, #2
 800f882:	9304      	str	r3, [sp, #16]
 800f884:	b182      	cbz	r2, 800f8a8 <__ieee754_pow+0xe8>
 800f886:	e05f      	b.n	800f948 <__ieee754_pow+0x188>
 800f888:	2a00      	cmp	r2, #0
 800f88a:	d15b      	bne.n	800f944 <__ieee754_pow+0x184>
 800f88c:	f1c3 0314 	rsb	r3, r3, #20
 800f890:	fa48 f103 	asr.w	r1, r8, r3
 800f894:	fa01 f303 	lsl.w	r3, r1, r3
 800f898:	4543      	cmp	r3, r8
 800f89a:	f040 8487 	bne.w	80101ac <__ieee754_pow+0x9ec>
 800f89e:	f001 0101 	and.w	r1, r1, #1
 800f8a2:	f1c1 0302 	rsb	r3, r1, #2
 800f8a6:	9304      	str	r3, [sp, #16]
 800f8a8:	4b5c      	ldr	r3, [pc, #368]	; (800fa1c <__ieee754_pow+0x25c>)
 800f8aa:	4598      	cmp	r8, r3
 800f8ac:	d132      	bne.n	800f914 <__ieee754_pow+0x154>
 800f8ae:	f1b9 0f00 	cmp.w	r9, #0
 800f8b2:	f280 8477 	bge.w	80101a4 <__ieee754_pow+0x9e4>
 800f8b6:	4959      	ldr	r1, [pc, #356]	; (800fa1c <__ieee754_pow+0x25c>)
 800f8b8:	4632      	mov	r2, r6
 800f8ba:	463b      	mov	r3, r7
 800f8bc:	2000      	movs	r0, #0
 800f8be:	f7f1 f835 	bl	800092c <__aeabi_ddiv>
 800f8c2:	e79c      	b.n	800f7fe <__ieee754_pow+0x3e>
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	9304      	str	r3, [sp, #16]
 800f8c8:	2a00      	cmp	r2, #0
 800f8ca:	d13d      	bne.n	800f948 <__ieee754_pow+0x188>
 800f8cc:	4b51      	ldr	r3, [pc, #324]	; (800fa14 <__ieee754_pow+0x254>)
 800f8ce:	4598      	cmp	r8, r3
 800f8d0:	d1ea      	bne.n	800f8a8 <__ieee754_pow+0xe8>
 800f8d2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f8d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f8da:	ea53 030a 	orrs.w	r3, r3, sl
 800f8de:	f000 8459 	beq.w	8010194 <__ieee754_pow+0x9d4>
 800f8e2:	4b4f      	ldr	r3, [pc, #316]	; (800fa20 <__ieee754_pow+0x260>)
 800f8e4:	429c      	cmp	r4, r3
 800f8e6:	dd08      	ble.n	800f8fa <__ieee754_pow+0x13a>
 800f8e8:	f1b9 0f00 	cmp.w	r9, #0
 800f8ec:	f2c0 8456 	blt.w	801019c <__ieee754_pow+0x9dc>
 800f8f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8f4:	e783      	b.n	800f7fe <__ieee754_pow+0x3e>
 800f8f6:	2302      	movs	r3, #2
 800f8f8:	e7e5      	b.n	800f8c6 <__ieee754_pow+0x106>
 800f8fa:	f1b9 0f00 	cmp.w	r9, #0
 800f8fe:	f04f 0000 	mov.w	r0, #0
 800f902:	f04f 0100 	mov.w	r1, #0
 800f906:	f6bf af7a 	bge.w	800f7fe <__ieee754_pow+0x3e>
 800f90a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f90e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f912:	e774      	b.n	800f7fe <__ieee754_pow+0x3e>
 800f914:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f918:	d106      	bne.n	800f928 <__ieee754_pow+0x168>
 800f91a:	4632      	mov	r2, r6
 800f91c:	463b      	mov	r3, r7
 800f91e:	4630      	mov	r0, r6
 800f920:	4639      	mov	r1, r7
 800f922:	f7f0 fed9 	bl	80006d8 <__aeabi_dmul>
 800f926:	e76a      	b.n	800f7fe <__ieee754_pow+0x3e>
 800f928:	4b3e      	ldr	r3, [pc, #248]	; (800fa24 <__ieee754_pow+0x264>)
 800f92a:	4599      	cmp	r9, r3
 800f92c:	d10c      	bne.n	800f948 <__ieee754_pow+0x188>
 800f92e:	2d00      	cmp	r5, #0
 800f930:	db0a      	blt.n	800f948 <__ieee754_pow+0x188>
 800f932:	ec47 6b10 	vmov	d0, r6, r7
 800f936:	b009      	add	sp, #36	; 0x24
 800f938:	ecbd 8b06 	vpop	{d8-d10}
 800f93c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f940:	f7ff be1c 	b.w	800f57c <__ieee754_sqrt>
 800f944:	2300      	movs	r3, #0
 800f946:	9304      	str	r3, [sp, #16]
 800f948:	ec47 6b10 	vmov	d0, r6, r7
 800f94c:	f000 fc62 	bl	8010214 <fabs>
 800f950:	ec51 0b10 	vmov	r0, r1, d0
 800f954:	f1ba 0f00 	cmp.w	sl, #0
 800f958:	d129      	bne.n	800f9ae <__ieee754_pow+0x1ee>
 800f95a:	b124      	cbz	r4, 800f966 <__ieee754_pow+0x1a6>
 800f95c:	4b2f      	ldr	r3, [pc, #188]	; (800fa1c <__ieee754_pow+0x25c>)
 800f95e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f962:	429a      	cmp	r2, r3
 800f964:	d123      	bne.n	800f9ae <__ieee754_pow+0x1ee>
 800f966:	f1b9 0f00 	cmp.w	r9, #0
 800f96a:	da05      	bge.n	800f978 <__ieee754_pow+0x1b8>
 800f96c:	4602      	mov	r2, r0
 800f96e:	460b      	mov	r3, r1
 800f970:	2000      	movs	r0, #0
 800f972:	492a      	ldr	r1, [pc, #168]	; (800fa1c <__ieee754_pow+0x25c>)
 800f974:	f7f0 ffda 	bl	800092c <__aeabi_ddiv>
 800f978:	2d00      	cmp	r5, #0
 800f97a:	f6bf af40 	bge.w	800f7fe <__ieee754_pow+0x3e>
 800f97e:	9b04      	ldr	r3, [sp, #16]
 800f980:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f984:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f988:	431c      	orrs	r4, r3
 800f98a:	d108      	bne.n	800f99e <__ieee754_pow+0x1de>
 800f98c:	4602      	mov	r2, r0
 800f98e:	460b      	mov	r3, r1
 800f990:	4610      	mov	r0, r2
 800f992:	4619      	mov	r1, r3
 800f994:	f7f0 fce8 	bl	8000368 <__aeabi_dsub>
 800f998:	4602      	mov	r2, r0
 800f99a:	460b      	mov	r3, r1
 800f99c:	e78f      	b.n	800f8be <__ieee754_pow+0xfe>
 800f99e:	9b04      	ldr	r3, [sp, #16]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	f47f af2c 	bne.w	800f7fe <__ieee754_pow+0x3e>
 800f9a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	e727      	b.n	800f7fe <__ieee754_pow+0x3e>
 800f9ae:	0feb      	lsrs	r3, r5, #31
 800f9b0:	3b01      	subs	r3, #1
 800f9b2:	9306      	str	r3, [sp, #24]
 800f9b4:	9a06      	ldr	r2, [sp, #24]
 800f9b6:	9b04      	ldr	r3, [sp, #16]
 800f9b8:	4313      	orrs	r3, r2
 800f9ba:	d102      	bne.n	800f9c2 <__ieee754_pow+0x202>
 800f9bc:	4632      	mov	r2, r6
 800f9be:	463b      	mov	r3, r7
 800f9c0:	e7e6      	b.n	800f990 <__ieee754_pow+0x1d0>
 800f9c2:	4b19      	ldr	r3, [pc, #100]	; (800fa28 <__ieee754_pow+0x268>)
 800f9c4:	4598      	cmp	r8, r3
 800f9c6:	f340 80fb 	ble.w	800fbc0 <__ieee754_pow+0x400>
 800f9ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f9ce:	4598      	cmp	r8, r3
 800f9d0:	4b13      	ldr	r3, [pc, #76]	; (800fa20 <__ieee754_pow+0x260>)
 800f9d2:	dd0c      	ble.n	800f9ee <__ieee754_pow+0x22e>
 800f9d4:	429c      	cmp	r4, r3
 800f9d6:	dc0f      	bgt.n	800f9f8 <__ieee754_pow+0x238>
 800f9d8:	f1b9 0f00 	cmp.w	r9, #0
 800f9dc:	da0f      	bge.n	800f9fe <__ieee754_pow+0x23e>
 800f9de:	2000      	movs	r0, #0
 800f9e0:	b009      	add	sp, #36	; 0x24
 800f9e2:	ecbd 8b06 	vpop	{d8-d10}
 800f9e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ea:	f000 bcc2 	b.w	8010372 <__math_oflow>
 800f9ee:	429c      	cmp	r4, r3
 800f9f0:	dbf2      	blt.n	800f9d8 <__ieee754_pow+0x218>
 800f9f2:	4b0a      	ldr	r3, [pc, #40]	; (800fa1c <__ieee754_pow+0x25c>)
 800f9f4:	429c      	cmp	r4, r3
 800f9f6:	dd19      	ble.n	800fa2c <__ieee754_pow+0x26c>
 800f9f8:	f1b9 0f00 	cmp.w	r9, #0
 800f9fc:	dcef      	bgt.n	800f9de <__ieee754_pow+0x21e>
 800f9fe:	2000      	movs	r0, #0
 800fa00:	b009      	add	sp, #36	; 0x24
 800fa02:	ecbd 8b06 	vpop	{d8-d10}
 800fa06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa0a:	f000 bca9 	b.w	8010360 <__math_uflow>
 800fa0e:	bf00      	nop
 800fa10:	fff00000 	.word	0xfff00000
 800fa14:	7ff00000 	.word	0x7ff00000
 800fa18:	433fffff 	.word	0x433fffff
 800fa1c:	3ff00000 	.word	0x3ff00000
 800fa20:	3fefffff 	.word	0x3fefffff
 800fa24:	3fe00000 	.word	0x3fe00000
 800fa28:	41e00000 	.word	0x41e00000
 800fa2c:	4b60      	ldr	r3, [pc, #384]	; (800fbb0 <__ieee754_pow+0x3f0>)
 800fa2e:	2200      	movs	r2, #0
 800fa30:	f7f0 fc9a 	bl	8000368 <__aeabi_dsub>
 800fa34:	a354      	add	r3, pc, #336	; (adr r3, 800fb88 <__ieee754_pow+0x3c8>)
 800fa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3a:	4604      	mov	r4, r0
 800fa3c:	460d      	mov	r5, r1
 800fa3e:	f7f0 fe4b 	bl	80006d8 <__aeabi_dmul>
 800fa42:	a353      	add	r3, pc, #332	; (adr r3, 800fb90 <__ieee754_pow+0x3d0>)
 800fa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa48:	4606      	mov	r6, r0
 800fa4a:	460f      	mov	r7, r1
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	4629      	mov	r1, r5
 800fa50:	f7f0 fe42 	bl	80006d8 <__aeabi_dmul>
 800fa54:	4b57      	ldr	r3, [pc, #348]	; (800fbb4 <__ieee754_pow+0x3f4>)
 800fa56:	4682      	mov	sl, r0
 800fa58:	468b      	mov	fp, r1
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	4629      	mov	r1, r5
 800fa60:	f7f0 fe3a 	bl	80006d8 <__aeabi_dmul>
 800fa64:	4602      	mov	r2, r0
 800fa66:	460b      	mov	r3, r1
 800fa68:	a14b      	add	r1, pc, #300	; (adr r1, 800fb98 <__ieee754_pow+0x3d8>)
 800fa6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa6e:	f7f0 fc7b 	bl	8000368 <__aeabi_dsub>
 800fa72:	4622      	mov	r2, r4
 800fa74:	462b      	mov	r3, r5
 800fa76:	f7f0 fe2f 	bl	80006d8 <__aeabi_dmul>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	2000      	movs	r0, #0
 800fa80:	494d      	ldr	r1, [pc, #308]	; (800fbb8 <__ieee754_pow+0x3f8>)
 800fa82:	f7f0 fc71 	bl	8000368 <__aeabi_dsub>
 800fa86:	4622      	mov	r2, r4
 800fa88:	4680      	mov	r8, r0
 800fa8a:	4689      	mov	r9, r1
 800fa8c:	462b      	mov	r3, r5
 800fa8e:	4620      	mov	r0, r4
 800fa90:	4629      	mov	r1, r5
 800fa92:	f7f0 fe21 	bl	80006d8 <__aeabi_dmul>
 800fa96:	4602      	mov	r2, r0
 800fa98:	460b      	mov	r3, r1
 800fa9a:	4640      	mov	r0, r8
 800fa9c:	4649      	mov	r1, r9
 800fa9e:	f7f0 fe1b 	bl	80006d8 <__aeabi_dmul>
 800faa2:	a33f      	add	r3, pc, #252	; (adr r3, 800fba0 <__ieee754_pow+0x3e0>)
 800faa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa8:	f7f0 fe16 	bl	80006d8 <__aeabi_dmul>
 800faac:	4602      	mov	r2, r0
 800faae:	460b      	mov	r3, r1
 800fab0:	4650      	mov	r0, sl
 800fab2:	4659      	mov	r1, fp
 800fab4:	f7f0 fc58 	bl	8000368 <__aeabi_dsub>
 800fab8:	4602      	mov	r2, r0
 800faba:	460b      	mov	r3, r1
 800fabc:	4680      	mov	r8, r0
 800fabe:	4689      	mov	r9, r1
 800fac0:	4630      	mov	r0, r6
 800fac2:	4639      	mov	r1, r7
 800fac4:	f7f0 fc52 	bl	800036c <__adddf3>
 800fac8:	2000      	movs	r0, #0
 800faca:	4632      	mov	r2, r6
 800facc:	463b      	mov	r3, r7
 800face:	4604      	mov	r4, r0
 800fad0:	460d      	mov	r5, r1
 800fad2:	f7f0 fc49 	bl	8000368 <__aeabi_dsub>
 800fad6:	4602      	mov	r2, r0
 800fad8:	460b      	mov	r3, r1
 800fada:	4640      	mov	r0, r8
 800fadc:	4649      	mov	r1, r9
 800fade:	f7f0 fc43 	bl	8000368 <__aeabi_dsub>
 800fae2:	9b04      	ldr	r3, [sp, #16]
 800fae4:	9a06      	ldr	r2, [sp, #24]
 800fae6:	3b01      	subs	r3, #1
 800fae8:	4313      	orrs	r3, r2
 800faea:	4682      	mov	sl, r0
 800faec:	468b      	mov	fp, r1
 800faee:	f040 81e7 	bne.w	800fec0 <__ieee754_pow+0x700>
 800faf2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fba8 <__ieee754_pow+0x3e8>
 800faf6:	eeb0 8a47 	vmov.f32	s16, s14
 800fafa:	eef0 8a67 	vmov.f32	s17, s15
 800fafe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fb02:	2600      	movs	r6, #0
 800fb04:	4632      	mov	r2, r6
 800fb06:	463b      	mov	r3, r7
 800fb08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb0c:	f7f0 fc2c 	bl	8000368 <__aeabi_dsub>
 800fb10:	4622      	mov	r2, r4
 800fb12:	462b      	mov	r3, r5
 800fb14:	f7f0 fde0 	bl	80006d8 <__aeabi_dmul>
 800fb18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb1c:	4680      	mov	r8, r0
 800fb1e:	4689      	mov	r9, r1
 800fb20:	4650      	mov	r0, sl
 800fb22:	4659      	mov	r1, fp
 800fb24:	f7f0 fdd8 	bl	80006d8 <__aeabi_dmul>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	4640      	mov	r0, r8
 800fb2e:	4649      	mov	r1, r9
 800fb30:	f7f0 fc1c 	bl	800036c <__adddf3>
 800fb34:	4632      	mov	r2, r6
 800fb36:	463b      	mov	r3, r7
 800fb38:	4680      	mov	r8, r0
 800fb3a:	4689      	mov	r9, r1
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	4629      	mov	r1, r5
 800fb40:	f7f0 fdca 	bl	80006d8 <__aeabi_dmul>
 800fb44:	460b      	mov	r3, r1
 800fb46:	4604      	mov	r4, r0
 800fb48:	460d      	mov	r5, r1
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	4649      	mov	r1, r9
 800fb4e:	4640      	mov	r0, r8
 800fb50:	f7f0 fc0c 	bl	800036c <__adddf3>
 800fb54:	4b19      	ldr	r3, [pc, #100]	; (800fbbc <__ieee754_pow+0x3fc>)
 800fb56:	4299      	cmp	r1, r3
 800fb58:	ec45 4b19 	vmov	d9, r4, r5
 800fb5c:	4606      	mov	r6, r0
 800fb5e:	460f      	mov	r7, r1
 800fb60:	468b      	mov	fp, r1
 800fb62:	f340 82f0 	ble.w	8010146 <__ieee754_pow+0x986>
 800fb66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fb6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fb6e:	4303      	orrs	r3, r0
 800fb70:	f000 81e4 	beq.w	800ff3c <__ieee754_pow+0x77c>
 800fb74:	ec51 0b18 	vmov	r0, r1, d8
 800fb78:	2200      	movs	r2, #0
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	f7f1 f81e 	bl	8000bbc <__aeabi_dcmplt>
 800fb80:	3800      	subs	r0, #0
 800fb82:	bf18      	it	ne
 800fb84:	2001      	movne	r0, #1
 800fb86:	e72b      	b.n	800f9e0 <__ieee754_pow+0x220>
 800fb88:	60000000 	.word	0x60000000
 800fb8c:	3ff71547 	.word	0x3ff71547
 800fb90:	f85ddf44 	.word	0xf85ddf44
 800fb94:	3e54ae0b 	.word	0x3e54ae0b
 800fb98:	55555555 	.word	0x55555555
 800fb9c:	3fd55555 	.word	0x3fd55555
 800fba0:	652b82fe 	.word	0x652b82fe
 800fba4:	3ff71547 	.word	0x3ff71547
 800fba8:	00000000 	.word	0x00000000
 800fbac:	bff00000 	.word	0xbff00000
 800fbb0:	3ff00000 	.word	0x3ff00000
 800fbb4:	3fd00000 	.word	0x3fd00000
 800fbb8:	3fe00000 	.word	0x3fe00000
 800fbbc:	408fffff 	.word	0x408fffff
 800fbc0:	4bd5      	ldr	r3, [pc, #852]	; (800ff18 <__ieee754_pow+0x758>)
 800fbc2:	402b      	ands	r3, r5
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	b92b      	cbnz	r3, 800fbd4 <__ieee754_pow+0x414>
 800fbc8:	4bd4      	ldr	r3, [pc, #848]	; (800ff1c <__ieee754_pow+0x75c>)
 800fbca:	f7f0 fd85 	bl	80006d8 <__aeabi_dmul>
 800fbce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fbd2:	460c      	mov	r4, r1
 800fbd4:	1523      	asrs	r3, r4, #20
 800fbd6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fbda:	4413      	add	r3, r2
 800fbdc:	9305      	str	r3, [sp, #20]
 800fbde:	4bd0      	ldr	r3, [pc, #832]	; (800ff20 <__ieee754_pow+0x760>)
 800fbe0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fbe4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fbe8:	429c      	cmp	r4, r3
 800fbea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fbee:	dd08      	ble.n	800fc02 <__ieee754_pow+0x442>
 800fbf0:	4bcc      	ldr	r3, [pc, #816]	; (800ff24 <__ieee754_pow+0x764>)
 800fbf2:	429c      	cmp	r4, r3
 800fbf4:	f340 8162 	ble.w	800febc <__ieee754_pow+0x6fc>
 800fbf8:	9b05      	ldr	r3, [sp, #20]
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	9305      	str	r3, [sp, #20]
 800fbfe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fc02:	2400      	movs	r4, #0
 800fc04:	00e3      	lsls	r3, r4, #3
 800fc06:	9307      	str	r3, [sp, #28]
 800fc08:	4bc7      	ldr	r3, [pc, #796]	; (800ff28 <__ieee754_pow+0x768>)
 800fc0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fc0e:	ed93 7b00 	vldr	d7, [r3]
 800fc12:	4629      	mov	r1, r5
 800fc14:	ec53 2b17 	vmov	r2, r3, d7
 800fc18:	eeb0 9a47 	vmov.f32	s18, s14
 800fc1c:	eef0 9a67 	vmov.f32	s19, s15
 800fc20:	4682      	mov	sl, r0
 800fc22:	f7f0 fba1 	bl	8000368 <__aeabi_dsub>
 800fc26:	4652      	mov	r2, sl
 800fc28:	4606      	mov	r6, r0
 800fc2a:	460f      	mov	r7, r1
 800fc2c:	462b      	mov	r3, r5
 800fc2e:	ec51 0b19 	vmov	r0, r1, d9
 800fc32:	f7f0 fb9b 	bl	800036c <__adddf3>
 800fc36:	4602      	mov	r2, r0
 800fc38:	460b      	mov	r3, r1
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	49bb      	ldr	r1, [pc, #748]	; (800ff2c <__ieee754_pow+0x76c>)
 800fc3e:	f7f0 fe75 	bl	800092c <__aeabi_ddiv>
 800fc42:	ec41 0b1a 	vmov	d10, r0, r1
 800fc46:	4602      	mov	r2, r0
 800fc48:	460b      	mov	r3, r1
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	4639      	mov	r1, r7
 800fc4e:	f7f0 fd43 	bl	80006d8 <__aeabi_dmul>
 800fc52:	2300      	movs	r3, #0
 800fc54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc58:	9302      	str	r3, [sp, #8]
 800fc5a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fc5e:	46ab      	mov	fp, r5
 800fc60:	106d      	asrs	r5, r5, #1
 800fc62:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fc66:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fc6a:	ec41 0b18 	vmov	d8, r0, r1
 800fc6e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fc72:	2200      	movs	r2, #0
 800fc74:	4640      	mov	r0, r8
 800fc76:	4649      	mov	r1, r9
 800fc78:	4614      	mov	r4, r2
 800fc7a:	461d      	mov	r5, r3
 800fc7c:	f7f0 fd2c 	bl	80006d8 <__aeabi_dmul>
 800fc80:	4602      	mov	r2, r0
 800fc82:	460b      	mov	r3, r1
 800fc84:	4630      	mov	r0, r6
 800fc86:	4639      	mov	r1, r7
 800fc88:	f7f0 fb6e 	bl	8000368 <__aeabi_dsub>
 800fc8c:	ec53 2b19 	vmov	r2, r3, d9
 800fc90:	4606      	mov	r6, r0
 800fc92:	460f      	mov	r7, r1
 800fc94:	4620      	mov	r0, r4
 800fc96:	4629      	mov	r1, r5
 800fc98:	f7f0 fb66 	bl	8000368 <__aeabi_dsub>
 800fc9c:	4602      	mov	r2, r0
 800fc9e:	460b      	mov	r3, r1
 800fca0:	4650      	mov	r0, sl
 800fca2:	4659      	mov	r1, fp
 800fca4:	f7f0 fb60 	bl	8000368 <__aeabi_dsub>
 800fca8:	4642      	mov	r2, r8
 800fcaa:	464b      	mov	r3, r9
 800fcac:	f7f0 fd14 	bl	80006d8 <__aeabi_dmul>
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	460b      	mov	r3, r1
 800fcb4:	4630      	mov	r0, r6
 800fcb6:	4639      	mov	r1, r7
 800fcb8:	f7f0 fb56 	bl	8000368 <__aeabi_dsub>
 800fcbc:	ec53 2b1a 	vmov	r2, r3, d10
 800fcc0:	f7f0 fd0a 	bl	80006d8 <__aeabi_dmul>
 800fcc4:	ec53 2b18 	vmov	r2, r3, d8
 800fcc8:	ec41 0b19 	vmov	d9, r0, r1
 800fccc:	ec51 0b18 	vmov	r0, r1, d8
 800fcd0:	f7f0 fd02 	bl	80006d8 <__aeabi_dmul>
 800fcd4:	a37c      	add	r3, pc, #496	; (adr r3, 800fec8 <__ieee754_pow+0x708>)
 800fcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcda:	4604      	mov	r4, r0
 800fcdc:	460d      	mov	r5, r1
 800fcde:	f7f0 fcfb 	bl	80006d8 <__aeabi_dmul>
 800fce2:	a37b      	add	r3, pc, #492	; (adr r3, 800fed0 <__ieee754_pow+0x710>)
 800fce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce8:	f7f0 fb40 	bl	800036c <__adddf3>
 800fcec:	4622      	mov	r2, r4
 800fcee:	462b      	mov	r3, r5
 800fcf0:	f7f0 fcf2 	bl	80006d8 <__aeabi_dmul>
 800fcf4:	a378      	add	r3, pc, #480	; (adr r3, 800fed8 <__ieee754_pow+0x718>)
 800fcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfa:	f7f0 fb37 	bl	800036c <__adddf3>
 800fcfe:	4622      	mov	r2, r4
 800fd00:	462b      	mov	r3, r5
 800fd02:	f7f0 fce9 	bl	80006d8 <__aeabi_dmul>
 800fd06:	a376      	add	r3, pc, #472	; (adr r3, 800fee0 <__ieee754_pow+0x720>)
 800fd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0c:	f7f0 fb2e 	bl	800036c <__adddf3>
 800fd10:	4622      	mov	r2, r4
 800fd12:	462b      	mov	r3, r5
 800fd14:	f7f0 fce0 	bl	80006d8 <__aeabi_dmul>
 800fd18:	a373      	add	r3, pc, #460	; (adr r3, 800fee8 <__ieee754_pow+0x728>)
 800fd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1e:	f7f0 fb25 	bl	800036c <__adddf3>
 800fd22:	4622      	mov	r2, r4
 800fd24:	462b      	mov	r3, r5
 800fd26:	f7f0 fcd7 	bl	80006d8 <__aeabi_dmul>
 800fd2a:	a371      	add	r3, pc, #452	; (adr r3, 800fef0 <__ieee754_pow+0x730>)
 800fd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd30:	f7f0 fb1c 	bl	800036c <__adddf3>
 800fd34:	4622      	mov	r2, r4
 800fd36:	4606      	mov	r6, r0
 800fd38:	460f      	mov	r7, r1
 800fd3a:	462b      	mov	r3, r5
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	4629      	mov	r1, r5
 800fd40:	f7f0 fcca 	bl	80006d8 <__aeabi_dmul>
 800fd44:	4602      	mov	r2, r0
 800fd46:	460b      	mov	r3, r1
 800fd48:	4630      	mov	r0, r6
 800fd4a:	4639      	mov	r1, r7
 800fd4c:	f7f0 fcc4 	bl	80006d8 <__aeabi_dmul>
 800fd50:	4642      	mov	r2, r8
 800fd52:	4604      	mov	r4, r0
 800fd54:	460d      	mov	r5, r1
 800fd56:	464b      	mov	r3, r9
 800fd58:	ec51 0b18 	vmov	r0, r1, d8
 800fd5c:	f7f0 fb06 	bl	800036c <__adddf3>
 800fd60:	ec53 2b19 	vmov	r2, r3, d9
 800fd64:	f7f0 fcb8 	bl	80006d8 <__aeabi_dmul>
 800fd68:	4622      	mov	r2, r4
 800fd6a:	462b      	mov	r3, r5
 800fd6c:	f7f0 fafe 	bl	800036c <__adddf3>
 800fd70:	4642      	mov	r2, r8
 800fd72:	4682      	mov	sl, r0
 800fd74:	468b      	mov	fp, r1
 800fd76:	464b      	mov	r3, r9
 800fd78:	4640      	mov	r0, r8
 800fd7a:	4649      	mov	r1, r9
 800fd7c:	f7f0 fcac 	bl	80006d8 <__aeabi_dmul>
 800fd80:	4b6b      	ldr	r3, [pc, #428]	; (800ff30 <__ieee754_pow+0x770>)
 800fd82:	2200      	movs	r2, #0
 800fd84:	4606      	mov	r6, r0
 800fd86:	460f      	mov	r7, r1
 800fd88:	f7f0 faf0 	bl	800036c <__adddf3>
 800fd8c:	4652      	mov	r2, sl
 800fd8e:	465b      	mov	r3, fp
 800fd90:	f7f0 faec 	bl	800036c <__adddf3>
 800fd94:	2000      	movs	r0, #0
 800fd96:	4604      	mov	r4, r0
 800fd98:	460d      	mov	r5, r1
 800fd9a:	4602      	mov	r2, r0
 800fd9c:	460b      	mov	r3, r1
 800fd9e:	4640      	mov	r0, r8
 800fda0:	4649      	mov	r1, r9
 800fda2:	f7f0 fc99 	bl	80006d8 <__aeabi_dmul>
 800fda6:	4b62      	ldr	r3, [pc, #392]	; (800ff30 <__ieee754_pow+0x770>)
 800fda8:	4680      	mov	r8, r0
 800fdaa:	4689      	mov	r9, r1
 800fdac:	2200      	movs	r2, #0
 800fdae:	4620      	mov	r0, r4
 800fdb0:	4629      	mov	r1, r5
 800fdb2:	f7f0 fad9 	bl	8000368 <__aeabi_dsub>
 800fdb6:	4632      	mov	r2, r6
 800fdb8:	463b      	mov	r3, r7
 800fdba:	f7f0 fad5 	bl	8000368 <__aeabi_dsub>
 800fdbe:	4602      	mov	r2, r0
 800fdc0:	460b      	mov	r3, r1
 800fdc2:	4650      	mov	r0, sl
 800fdc4:	4659      	mov	r1, fp
 800fdc6:	f7f0 facf 	bl	8000368 <__aeabi_dsub>
 800fdca:	ec53 2b18 	vmov	r2, r3, d8
 800fdce:	f7f0 fc83 	bl	80006d8 <__aeabi_dmul>
 800fdd2:	4622      	mov	r2, r4
 800fdd4:	4606      	mov	r6, r0
 800fdd6:	460f      	mov	r7, r1
 800fdd8:	462b      	mov	r3, r5
 800fdda:	ec51 0b19 	vmov	r0, r1, d9
 800fdde:	f7f0 fc7b 	bl	80006d8 <__aeabi_dmul>
 800fde2:	4602      	mov	r2, r0
 800fde4:	460b      	mov	r3, r1
 800fde6:	4630      	mov	r0, r6
 800fde8:	4639      	mov	r1, r7
 800fdea:	f7f0 fabf 	bl	800036c <__adddf3>
 800fdee:	4606      	mov	r6, r0
 800fdf0:	460f      	mov	r7, r1
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	4640      	mov	r0, r8
 800fdf8:	4649      	mov	r1, r9
 800fdfa:	f7f0 fab7 	bl	800036c <__adddf3>
 800fdfe:	a33e      	add	r3, pc, #248	; (adr r3, 800fef8 <__ieee754_pow+0x738>)
 800fe00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe04:	2000      	movs	r0, #0
 800fe06:	4604      	mov	r4, r0
 800fe08:	460d      	mov	r5, r1
 800fe0a:	f7f0 fc65 	bl	80006d8 <__aeabi_dmul>
 800fe0e:	4642      	mov	r2, r8
 800fe10:	ec41 0b18 	vmov	d8, r0, r1
 800fe14:	464b      	mov	r3, r9
 800fe16:	4620      	mov	r0, r4
 800fe18:	4629      	mov	r1, r5
 800fe1a:	f7f0 faa5 	bl	8000368 <__aeabi_dsub>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	460b      	mov	r3, r1
 800fe22:	4630      	mov	r0, r6
 800fe24:	4639      	mov	r1, r7
 800fe26:	f7f0 fa9f 	bl	8000368 <__aeabi_dsub>
 800fe2a:	a335      	add	r3, pc, #212	; (adr r3, 800ff00 <__ieee754_pow+0x740>)
 800fe2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe30:	f7f0 fc52 	bl	80006d8 <__aeabi_dmul>
 800fe34:	a334      	add	r3, pc, #208	; (adr r3, 800ff08 <__ieee754_pow+0x748>)
 800fe36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3a:	4606      	mov	r6, r0
 800fe3c:	460f      	mov	r7, r1
 800fe3e:	4620      	mov	r0, r4
 800fe40:	4629      	mov	r1, r5
 800fe42:	f7f0 fc49 	bl	80006d8 <__aeabi_dmul>
 800fe46:	4602      	mov	r2, r0
 800fe48:	460b      	mov	r3, r1
 800fe4a:	4630      	mov	r0, r6
 800fe4c:	4639      	mov	r1, r7
 800fe4e:	f7f0 fa8d 	bl	800036c <__adddf3>
 800fe52:	9a07      	ldr	r2, [sp, #28]
 800fe54:	4b37      	ldr	r3, [pc, #220]	; (800ff34 <__ieee754_pow+0x774>)
 800fe56:	4413      	add	r3, r2
 800fe58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5c:	f7f0 fa86 	bl	800036c <__adddf3>
 800fe60:	4682      	mov	sl, r0
 800fe62:	9805      	ldr	r0, [sp, #20]
 800fe64:	468b      	mov	fp, r1
 800fe66:	f7f0 fbcd 	bl	8000604 <__aeabi_i2d>
 800fe6a:	9a07      	ldr	r2, [sp, #28]
 800fe6c:	4b32      	ldr	r3, [pc, #200]	; (800ff38 <__ieee754_pow+0x778>)
 800fe6e:	4413      	add	r3, r2
 800fe70:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fe74:	4606      	mov	r6, r0
 800fe76:	460f      	mov	r7, r1
 800fe78:	4652      	mov	r2, sl
 800fe7a:	465b      	mov	r3, fp
 800fe7c:	ec51 0b18 	vmov	r0, r1, d8
 800fe80:	f7f0 fa74 	bl	800036c <__adddf3>
 800fe84:	4642      	mov	r2, r8
 800fe86:	464b      	mov	r3, r9
 800fe88:	f7f0 fa70 	bl	800036c <__adddf3>
 800fe8c:	4632      	mov	r2, r6
 800fe8e:	463b      	mov	r3, r7
 800fe90:	f7f0 fa6c 	bl	800036c <__adddf3>
 800fe94:	2000      	movs	r0, #0
 800fe96:	4632      	mov	r2, r6
 800fe98:	463b      	mov	r3, r7
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	460d      	mov	r5, r1
 800fe9e:	f7f0 fa63 	bl	8000368 <__aeabi_dsub>
 800fea2:	4642      	mov	r2, r8
 800fea4:	464b      	mov	r3, r9
 800fea6:	f7f0 fa5f 	bl	8000368 <__aeabi_dsub>
 800feaa:	ec53 2b18 	vmov	r2, r3, d8
 800feae:	f7f0 fa5b 	bl	8000368 <__aeabi_dsub>
 800feb2:	4602      	mov	r2, r0
 800feb4:	460b      	mov	r3, r1
 800feb6:	4650      	mov	r0, sl
 800feb8:	4659      	mov	r1, fp
 800feba:	e610      	b.n	800fade <__ieee754_pow+0x31e>
 800febc:	2401      	movs	r4, #1
 800febe:	e6a1      	b.n	800fc04 <__ieee754_pow+0x444>
 800fec0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ff10 <__ieee754_pow+0x750>
 800fec4:	e617      	b.n	800faf6 <__ieee754_pow+0x336>
 800fec6:	bf00      	nop
 800fec8:	4a454eef 	.word	0x4a454eef
 800fecc:	3fca7e28 	.word	0x3fca7e28
 800fed0:	93c9db65 	.word	0x93c9db65
 800fed4:	3fcd864a 	.word	0x3fcd864a
 800fed8:	a91d4101 	.word	0xa91d4101
 800fedc:	3fd17460 	.word	0x3fd17460
 800fee0:	518f264d 	.word	0x518f264d
 800fee4:	3fd55555 	.word	0x3fd55555
 800fee8:	db6fabff 	.word	0xdb6fabff
 800feec:	3fdb6db6 	.word	0x3fdb6db6
 800fef0:	33333303 	.word	0x33333303
 800fef4:	3fe33333 	.word	0x3fe33333
 800fef8:	e0000000 	.word	0xe0000000
 800fefc:	3feec709 	.word	0x3feec709
 800ff00:	dc3a03fd 	.word	0xdc3a03fd
 800ff04:	3feec709 	.word	0x3feec709
 800ff08:	145b01f5 	.word	0x145b01f5
 800ff0c:	be3e2fe0 	.word	0xbe3e2fe0
 800ff10:	00000000 	.word	0x00000000
 800ff14:	3ff00000 	.word	0x3ff00000
 800ff18:	7ff00000 	.word	0x7ff00000
 800ff1c:	43400000 	.word	0x43400000
 800ff20:	0003988e 	.word	0x0003988e
 800ff24:	000bb679 	.word	0x000bb679
 800ff28:	08010928 	.word	0x08010928
 800ff2c:	3ff00000 	.word	0x3ff00000
 800ff30:	40080000 	.word	0x40080000
 800ff34:	08010948 	.word	0x08010948
 800ff38:	08010938 	.word	0x08010938
 800ff3c:	a3b3      	add	r3, pc, #716	; (adr r3, 801020c <__ieee754_pow+0xa4c>)
 800ff3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff42:	4640      	mov	r0, r8
 800ff44:	4649      	mov	r1, r9
 800ff46:	f7f0 fa11 	bl	800036c <__adddf3>
 800ff4a:	4622      	mov	r2, r4
 800ff4c:	ec41 0b1a 	vmov	d10, r0, r1
 800ff50:	462b      	mov	r3, r5
 800ff52:	4630      	mov	r0, r6
 800ff54:	4639      	mov	r1, r7
 800ff56:	f7f0 fa07 	bl	8000368 <__aeabi_dsub>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	ec51 0b1a 	vmov	r0, r1, d10
 800ff62:	f7f0 fe49 	bl	8000bf8 <__aeabi_dcmpgt>
 800ff66:	2800      	cmp	r0, #0
 800ff68:	f47f ae04 	bne.w	800fb74 <__ieee754_pow+0x3b4>
 800ff6c:	4aa2      	ldr	r2, [pc, #648]	; (80101f8 <__ieee754_pow+0xa38>)
 800ff6e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ff72:	4293      	cmp	r3, r2
 800ff74:	f340 8107 	ble.w	8010186 <__ieee754_pow+0x9c6>
 800ff78:	151b      	asrs	r3, r3, #20
 800ff7a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ff7e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ff82:	fa4a fa03 	asr.w	sl, sl, r3
 800ff86:	44da      	add	sl, fp
 800ff88:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ff8c:	489b      	ldr	r0, [pc, #620]	; (80101fc <__ieee754_pow+0xa3c>)
 800ff8e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ff92:	4108      	asrs	r0, r1
 800ff94:	ea00 030a 	and.w	r3, r0, sl
 800ff98:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ff9c:	f1c1 0114 	rsb	r1, r1, #20
 800ffa0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ffa4:	fa4a fa01 	asr.w	sl, sl, r1
 800ffa8:	f1bb 0f00 	cmp.w	fp, #0
 800ffac:	f04f 0200 	mov.w	r2, #0
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	4629      	mov	r1, r5
 800ffb4:	bfb8      	it	lt
 800ffb6:	f1ca 0a00 	rsblt	sl, sl, #0
 800ffba:	f7f0 f9d5 	bl	8000368 <__aeabi_dsub>
 800ffbe:	ec41 0b19 	vmov	d9, r0, r1
 800ffc2:	4642      	mov	r2, r8
 800ffc4:	464b      	mov	r3, r9
 800ffc6:	ec51 0b19 	vmov	r0, r1, d9
 800ffca:	f7f0 f9cf 	bl	800036c <__adddf3>
 800ffce:	a37a      	add	r3, pc, #488	; (adr r3, 80101b8 <__ieee754_pow+0x9f8>)
 800ffd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd4:	2000      	movs	r0, #0
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	460d      	mov	r5, r1
 800ffda:	f7f0 fb7d 	bl	80006d8 <__aeabi_dmul>
 800ffde:	ec53 2b19 	vmov	r2, r3, d9
 800ffe2:	4606      	mov	r6, r0
 800ffe4:	460f      	mov	r7, r1
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	4629      	mov	r1, r5
 800ffea:	f7f0 f9bd 	bl	8000368 <__aeabi_dsub>
 800ffee:	4602      	mov	r2, r0
 800fff0:	460b      	mov	r3, r1
 800fff2:	4640      	mov	r0, r8
 800fff4:	4649      	mov	r1, r9
 800fff6:	f7f0 f9b7 	bl	8000368 <__aeabi_dsub>
 800fffa:	a371      	add	r3, pc, #452	; (adr r3, 80101c0 <__ieee754_pow+0xa00>)
 800fffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010000:	f7f0 fb6a 	bl	80006d8 <__aeabi_dmul>
 8010004:	a370      	add	r3, pc, #448	; (adr r3, 80101c8 <__ieee754_pow+0xa08>)
 8010006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000a:	4680      	mov	r8, r0
 801000c:	4689      	mov	r9, r1
 801000e:	4620      	mov	r0, r4
 8010010:	4629      	mov	r1, r5
 8010012:	f7f0 fb61 	bl	80006d8 <__aeabi_dmul>
 8010016:	4602      	mov	r2, r0
 8010018:	460b      	mov	r3, r1
 801001a:	4640      	mov	r0, r8
 801001c:	4649      	mov	r1, r9
 801001e:	f7f0 f9a5 	bl	800036c <__adddf3>
 8010022:	4604      	mov	r4, r0
 8010024:	460d      	mov	r5, r1
 8010026:	4602      	mov	r2, r0
 8010028:	460b      	mov	r3, r1
 801002a:	4630      	mov	r0, r6
 801002c:	4639      	mov	r1, r7
 801002e:	f7f0 f99d 	bl	800036c <__adddf3>
 8010032:	4632      	mov	r2, r6
 8010034:	463b      	mov	r3, r7
 8010036:	4680      	mov	r8, r0
 8010038:	4689      	mov	r9, r1
 801003a:	f7f0 f995 	bl	8000368 <__aeabi_dsub>
 801003e:	4602      	mov	r2, r0
 8010040:	460b      	mov	r3, r1
 8010042:	4620      	mov	r0, r4
 8010044:	4629      	mov	r1, r5
 8010046:	f7f0 f98f 	bl	8000368 <__aeabi_dsub>
 801004a:	4642      	mov	r2, r8
 801004c:	4606      	mov	r6, r0
 801004e:	460f      	mov	r7, r1
 8010050:	464b      	mov	r3, r9
 8010052:	4640      	mov	r0, r8
 8010054:	4649      	mov	r1, r9
 8010056:	f7f0 fb3f 	bl	80006d8 <__aeabi_dmul>
 801005a:	a35d      	add	r3, pc, #372	; (adr r3, 80101d0 <__ieee754_pow+0xa10>)
 801005c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010060:	4604      	mov	r4, r0
 8010062:	460d      	mov	r5, r1
 8010064:	f7f0 fb38 	bl	80006d8 <__aeabi_dmul>
 8010068:	a35b      	add	r3, pc, #364	; (adr r3, 80101d8 <__ieee754_pow+0xa18>)
 801006a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801006e:	f7f0 f97b 	bl	8000368 <__aeabi_dsub>
 8010072:	4622      	mov	r2, r4
 8010074:	462b      	mov	r3, r5
 8010076:	f7f0 fb2f 	bl	80006d8 <__aeabi_dmul>
 801007a:	a359      	add	r3, pc, #356	; (adr r3, 80101e0 <__ieee754_pow+0xa20>)
 801007c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010080:	f7f0 f974 	bl	800036c <__adddf3>
 8010084:	4622      	mov	r2, r4
 8010086:	462b      	mov	r3, r5
 8010088:	f7f0 fb26 	bl	80006d8 <__aeabi_dmul>
 801008c:	a356      	add	r3, pc, #344	; (adr r3, 80101e8 <__ieee754_pow+0xa28>)
 801008e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010092:	f7f0 f969 	bl	8000368 <__aeabi_dsub>
 8010096:	4622      	mov	r2, r4
 8010098:	462b      	mov	r3, r5
 801009a:	f7f0 fb1d 	bl	80006d8 <__aeabi_dmul>
 801009e:	a354      	add	r3, pc, #336	; (adr r3, 80101f0 <__ieee754_pow+0xa30>)
 80100a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a4:	f7f0 f962 	bl	800036c <__adddf3>
 80100a8:	4622      	mov	r2, r4
 80100aa:	462b      	mov	r3, r5
 80100ac:	f7f0 fb14 	bl	80006d8 <__aeabi_dmul>
 80100b0:	4602      	mov	r2, r0
 80100b2:	460b      	mov	r3, r1
 80100b4:	4640      	mov	r0, r8
 80100b6:	4649      	mov	r1, r9
 80100b8:	f7f0 f956 	bl	8000368 <__aeabi_dsub>
 80100bc:	4604      	mov	r4, r0
 80100be:	460d      	mov	r5, r1
 80100c0:	4602      	mov	r2, r0
 80100c2:	460b      	mov	r3, r1
 80100c4:	4640      	mov	r0, r8
 80100c6:	4649      	mov	r1, r9
 80100c8:	f7f0 fb06 	bl	80006d8 <__aeabi_dmul>
 80100cc:	2200      	movs	r2, #0
 80100ce:	ec41 0b19 	vmov	d9, r0, r1
 80100d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80100d6:	4620      	mov	r0, r4
 80100d8:	4629      	mov	r1, r5
 80100da:	f7f0 f945 	bl	8000368 <__aeabi_dsub>
 80100de:	4602      	mov	r2, r0
 80100e0:	460b      	mov	r3, r1
 80100e2:	ec51 0b19 	vmov	r0, r1, d9
 80100e6:	f7f0 fc21 	bl	800092c <__aeabi_ddiv>
 80100ea:	4632      	mov	r2, r6
 80100ec:	4604      	mov	r4, r0
 80100ee:	460d      	mov	r5, r1
 80100f0:	463b      	mov	r3, r7
 80100f2:	4640      	mov	r0, r8
 80100f4:	4649      	mov	r1, r9
 80100f6:	f7f0 faef 	bl	80006d8 <__aeabi_dmul>
 80100fa:	4632      	mov	r2, r6
 80100fc:	463b      	mov	r3, r7
 80100fe:	f7f0 f935 	bl	800036c <__adddf3>
 8010102:	4602      	mov	r2, r0
 8010104:	460b      	mov	r3, r1
 8010106:	4620      	mov	r0, r4
 8010108:	4629      	mov	r1, r5
 801010a:	f7f0 f92d 	bl	8000368 <__aeabi_dsub>
 801010e:	4642      	mov	r2, r8
 8010110:	464b      	mov	r3, r9
 8010112:	f7f0 f929 	bl	8000368 <__aeabi_dsub>
 8010116:	460b      	mov	r3, r1
 8010118:	4602      	mov	r2, r0
 801011a:	4939      	ldr	r1, [pc, #228]	; (8010200 <__ieee754_pow+0xa40>)
 801011c:	2000      	movs	r0, #0
 801011e:	f7f0 f923 	bl	8000368 <__aeabi_dsub>
 8010122:	ec41 0b10 	vmov	d0, r0, r1
 8010126:	ee10 3a90 	vmov	r3, s1
 801012a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801012e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010132:	da2b      	bge.n	801018c <__ieee754_pow+0x9cc>
 8010134:	4650      	mov	r0, sl
 8010136:	f000 f877 	bl	8010228 <scalbn>
 801013a:	ec51 0b10 	vmov	r0, r1, d0
 801013e:	ec53 2b18 	vmov	r2, r3, d8
 8010142:	f7ff bbee 	b.w	800f922 <__ieee754_pow+0x162>
 8010146:	4b2f      	ldr	r3, [pc, #188]	; (8010204 <__ieee754_pow+0xa44>)
 8010148:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801014c:	429e      	cmp	r6, r3
 801014e:	f77f af0d 	ble.w	800ff6c <__ieee754_pow+0x7ac>
 8010152:	4b2d      	ldr	r3, [pc, #180]	; (8010208 <__ieee754_pow+0xa48>)
 8010154:	440b      	add	r3, r1
 8010156:	4303      	orrs	r3, r0
 8010158:	d009      	beq.n	801016e <__ieee754_pow+0x9ae>
 801015a:	ec51 0b18 	vmov	r0, r1, d8
 801015e:	2200      	movs	r2, #0
 8010160:	2300      	movs	r3, #0
 8010162:	f7f0 fd2b 	bl	8000bbc <__aeabi_dcmplt>
 8010166:	3800      	subs	r0, #0
 8010168:	bf18      	it	ne
 801016a:	2001      	movne	r0, #1
 801016c:	e448      	b.n	800fa00 <__ieee754_pow+0x240>
 801016e:	4622      	mov	r2, r4
 8010170:	462b      	mov	r3, r5
 8010172:	f7f0 f8f9 	bl	8000368 <__aeabi_dsub>
 8010176:	4642      	mov	r2, r8
 8010178:	464b      	mov	r3, r9
 801017a:	f7f0 fd33 	bl	8000be4 <__aeabi_dcmpge>
 801017e:	2800      	cmp	r0, #0
 8010180:	f43f aef4 	beq.w	800ff6c <__ieee754_pow+0x7ac>
 8010184:	e7e9      	b.n	801015a <__ieee754_pow+0x99a>
 8010186:	f04f 0a00 	mov.w	sl, #0
 801018a:	e71a      	b.n	800ffc2 <__ieee754_pow+0x802>
 801018c:	ec51 0b10 	vmov	r0, r1, d0
 8010190:	4619      	mov	r1, r3
 8010192:	e7d4      	b.n	801013e <__ieee754_pow+0x97e>
 8010194:	491a      	ldr	r1, [pc, #104]	; (8010200 <__ieee754_pow+0xa40>)
 8010196:	2000      	movs	r0, #0
 8010198:	f7ff bb31 	b.w	800f7fe <__ieee754_pow+0x3e>
 801019c:	2000      	movs	r0, #0
 801019e:	2100      	movs	r1, #0
 80101a0:	f7ff bb2d 	b.w	800f7fe <__ieee754_pow+0x3e>
 80101a4:	4630      	mov	r0, r6
 80101a6:	4639      	mov	r1, r7
 80101a8:	f7ff bb29 	b.w	800f7fe <__ieee754_pow+0x3e>
 80101ac:	9204      	str	r2, [sp, #16]
 80101ae:	f7ff bb7b 	b.w	800f8a8 <__ieee754_pow+0xe8>
 80101b2:	2300      	movs	r3, #0
 80101b4:	f7ff bb65 	b.w	800f882 <__ieee754_pow+0xc2>
 80101b8:	00000000 	.word	0x00000000
 80101bc:	3fe62e43 	.word	0x3fe62e43
 80101c0:	fefa39ef 	.word	0xfefa39ef
 80101c4:	3fe62e42 	.word	0x3fe62e42
 80101c8:	0ca86c39 	.word	0x0ca86c39
 80101cc:	be205c61 	.word	0xbe205c61
 80101d0:	72bea4d0 	.word	0x72bea4d0
 80101d4:	3e663769 	.word	0x3e663769
 80101d8:	c5d26bf1 	.word	0xc5d26bf1
 80101dc:	3ebbbd41 	.word	0x3ebbbd41
 80101e0:	af25de2c 	.word	0xaf25de2c
 80101e4:	3f11566a 	.word	0x3f11566a
 80101e8:	16bebd93 	.word	0x16bebd93
 80101ec:	3f66c16c 	.word	0x3f66c16c
 80101f0:	5555553e 	.word	0x5555553e
 80101f4:	3fc55555 	.word	0x3fc55555
 80101f8:	3fe00000 	.word	0x3fe00000
 80101fc:	fff00000 	.word	0xfff00000
 8010200:	3ff00000 	.word	0x3ff00000
 8010204:	4090cbff 	.word	0x4090cbff
 8010208:	3f6f3400 	.word	0x3f6f3400
 801020c:	652b82fe 	.word	0x652b82fe
 8010210:	3c971547 	.word	0x3c971547

08010214 <fabs>:
 8010214:	ec51 0b10 	vmov	r0, r1, d0
 8010218:	ee10 2a10 	vmov	r2, s0
 801021c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010220:	ec43 2b10 	vmov	d0, r2, r3
 8010224:	4770      	bx	lr
	...

08010228 <scalbn>:
 8010228:	b570      	push	{r4, r5, r6, lr}
 801022a:	ec55 4b10 	vmov	r4, r5, d0
 801022e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010232:	4606      	mov	r6, r0
 8010234:	462b      	mov	r3, r5
 8010236:	b999      	cbnz	r1, 8010260 <scalbn+0x38>
 8010238:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801023c:	4323      	orrs	r3, r4
 801023e:	d03f      	beq.n	80102c0 <scalbn+0x98>
 8010240:	4b35      	ldr	r3, [pc, #212]	; (8010318 <scalbn+0xf0>)
 8010242:	4629      	mov	r1, r5
 8010244:	ee10 0a10 	vmov	r0, s0
 8010248:	2200      	movs	r2, #0
 801024a:	f7f0 fa45 	bl	80006d8 <__aeabi_dmul>
 801024e:	4b33      	ldr	r3, [pc, #204]	; (801031c <scalbn+0xf4>)
 8010250:	429e      	cmp	r6, r3
 8010252:	4604      	mov	r4, r0
 8010254:	460d      	mov	r5, r1
 8010256:	da10      	bge.n	801027a <scalbn+0x52>
 8010258:	a327      	add	r3, pc, #156	; (adr r3, 80102f8 <scalbn+0xd0>)
 801025a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025e:	e01f      	b.n	80102a0 <scalbn+0x78>
 8010260:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010264:	4291      	cmp	r1, r2
 8010266:	d10c      	bne.n	8010282 <scalbn+0x5a>
 8010268:	ee10 2a10 	vmov	r2, s0
 801026c:	4620      	mov	r0, r4
 801026e:	4629      	mov	r1, r5
 8010270:	f7f0 f87c 	bl	800036c <__adddf3>
 8010274:	4604      	mov	r4, r0
 8010276:	460d      	mov	r5, r1
 8010278:	e022      	b.n	80102c0 <scalbn+0x98>
 801027a:	460b      	mov	r3, r1
 801027c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010280:	3936      	subs	r1, #54	; 0x36
 8010282:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010286:	4296      	cmp	r6, r2
 8010288:	dd0d      	ble.n	80102a6 <scalbn+0x7e>
 801028a:	2d00      	cmp	r5, #0
 801028c:	a11c      	add	r1, pc, #112	; (adr r1, 8010300 <scalbn+0xd8>)
 801028e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010292:	da02      	bge.n	801029a <scalbn+0x72>
 8010294:	a11c      	add	r1, pc, #112	; (adr r1, 8010308 <scalbn+0xe0>)
 8010296:	e9d1 0100 	ldrd	r0, r1, [r1]
 801029a:	a319      	add	r3, pc, #100	; (adr r3, 8010300 <scalbn+0xd8>)
 801029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a0:	f7f0 fa1a 	bl	80006d8 <__aeabi_dmul>
 80102a4:	e7e6      	b.n	8010274 <scalbn+0x4c>
 80102a6:	1872      	adds	r2, r6, r1
 80102a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80102ac:	428a      	cmp	r2, r1
 80102ae:	dcec      	bgt.n	801028a <scalbn+0x62>
 80102b0:	2a00      	cmp	r2, #0
 80102b2:	dd08      	ble.n	80102c6 <scalbn+0x9e>
 80102b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80102b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80102bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80102c0:	ec45 4b10 	vmov	d0, r4, r5
 80102c4:	bd70      	pop	{r4, r5, r6, pc}
 80102c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80102ca:	da08      	bge.n	80102de <scalbn+0xb6>
 80102cc:	2d00      	cmp	r5, #0
 80102ce:	a10a      	add	r1, pc, #40	; (adr r1, 80102f8 <scalbn+0xd0>)
 80102d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102d4:	dac0      	bge.n	8010258 <scalbn+0x30>
 80102d6:	a10e      	add	r1, pc, #56	; (adr r1, 8010310 <scalbn+0xe8>)
 80102d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102dc:	e7bc      	b.n	8010258 <scalbn+0x30>
 80102de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80102e2:	3236      	adds	r2, #54	; 0x36
 80102e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80102e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80102ec:	4620      	mov	r0, r4
 80102ee:	4b0c      	ldr	r3, [pc, #48]	; (8010320 <scalbn+0xf8>)
 80102f0:	2200      	movs	r2, #0
 80102f2:	e7d5      	b.n	80102a0 <scalbn+0x78>
 80102f4:	f3af 8000 	nop.w
 80102f8:	c2f8f359 	.word	0xc2f8f359
 80102fc:	01a56e1f 	.word	0x01a56e1f
 8010300:	8800759c 	.word	0x8800759c
 8010304:	7e37e43c 	.word	0x7e37e43c
 8010308:	8800759c 	.word	0x8800759c
 801030c:	fe37e43c 	.word	0xfe37e43c
 8010310:	c2f8f359 	.word	0xc2f8f359
 8010314:	81a56e1f 	.word	0x81a56e1f
 8010318:	43500000 	.word	0x43500000
 801031c:	ffff3cb0 	.word	0xffff3cb0
 8010320:	3c900000 	.word	0x3c900000

08010324 <with_errno>:
 8010324:	b570      	push	{r4, r5, r6, lr}
 8010326:	4604      	mov	r4, r0
 8010328:	460d      	mov	r5, r1
 801032a:	4616      	mov	r6, r2
 801032c:	f7fd f9aa 	bl	800d684 <__errno>
 8010330:	4629      	mov	r1, r5
 8010332:	6006      	str	r6, [r0, #0]
 8010334:	4620      	mov	r0, r4
 8010336:	bd70      	pop	{r4, r5, r6, pc}

08010338 <xflow>:
 8010338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801033a:	4614      	mov	r4, r2
 801033c:	461d      	mov	r5, r3
 801033e:	b108      	cbz	r0, 8010344 <xflow+0xc>
 8010340:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010344:	e9cd 2300 	strd	r2, r3, [sp]
 8010348:	e9dd 2300 	ldrd	r2, r3, [sp]
 801034c:	4620      	mov	r0, r4
 801034e:	4629      	mov	r1, r5
 8010350:	f7f0 f9c2 	bl	80006d8 <__aeabi_dmul>
 8010354:	2222      	movs	r2, #34	; 0x22
 8010356:	b003      	add	sp, #12
 8010358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801035c:	f7ff bfe2 	b.w	8010324 <with_errno>

08010360 <__math_uflow>:
 8010360:	b508      	push	{r3, lr}
 8010362:	2200      	movs	r2, #0
 8010364:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010368:	f7ff ffe6 	bl	8010338 <xflow>
 801036c:	ec41 0b10 	vmov	d0, r0, r1
 8010370:	bd08      	pop	{r3, pc}

08010372 <__math_oflow>:
 8010372:	b508      	push	{r3, lr}
 8010374:	2200      	movs	r2, #0
 8010376:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801037a:	f7ff ffdd 	bl	8010338 <xflow>
 801037e:	ec41 0b10 	vmov	d0, r0, r1
 8010382:	bd08      	pop	{r3, pc}

08010384 <_sbrk>:
 8010384:	4a04      	ldr	r2, [pc, #16]	; (8010398 <_sbrk+0x14>)
 8010386:	6811      	ldr	r1, [r2, #0]
 8010388:	4603      	mov	r3, r0
 801038a:	b909      	cbnz	r1, 8010390 <_sbrk+0xc>
 801038c:	4903      	ldr	r1, [pc, #12]	; (801039c <_sbrk+0x18>)
 801038e:	6011      	str	r1, [r2, #0]
 8010390:	6810      	ldr	r0, [r2, #0]
 8010392:	4403      	add	r3, r0
 8010394:	6013      	str	r3, [r2, #0]
 8010396:	4770      	bx	lr
 8010398:	20014010 	.word	0x20014010
 801039c:	20014018 	.word	0x20014018

080103a0 <_init>:
 80103a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103a2:	bf00      	nop
 80103a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103a6:	bc08      	pop	{r3}
 80103a8:	469e      	mov	lr, r3
 80103aa:	4770      	bx	lr

080103ac <_fini>:
 80103ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ae:	bf00      	nop
 80103b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103b2:	bc08      	pop	{r3}
 80103b4:	469e      	mov	lr, r3
 80103b6:	4770      	bx	lr
