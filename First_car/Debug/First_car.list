
First_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012058  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08012228  08012228  00022228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012810  08012810  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08012810  08012810  00022810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012818  08012818  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012818  08012818  00022818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801281c  0801281c  0002281c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08012820  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a270  200001f8  08012a18  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2001a468  08012a18  0003a468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022cf3  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000551f  00000000  00000000  00052f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e78  00000000  00000000  00058480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001793  00000000  00000000  0005a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002857e  00000000  00000000  0005ba8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000285e3  00000000  00000000  00084009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e705d  00000000  00000000  000ac5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009238  00000000  00000000  0019364c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0019c884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012210 	.word	0x08012210

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08012210 	.word	0x08012210

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20019d4c 	.word	0x20019d4c
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <strlen>:
 8000350:	4603      	mov	r3, r0
 8000352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000356:	2a00      	cmp	r2, #0
 8000358:	d1fb      	bne.n	8000352 <strlen+0x2>
 800035a:	1a18      	subs	r0, r3, r0
 800035c:	3801      	subs	r0, #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	; 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2iz>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c40:	d215      	bcs.n	8000c6e <__aeabi_d2iz+0x36>
 8000c42:	d511      	bpl.n	8000c68 <__aeabi_d2iz+0x30>
 8000c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d912      	bls.n	8000c74 <__aeabi_d2iz+0x3c>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	4770      	bx	lr
 8000c68:	f04f 0000 	mov.w	r0, #0
 8000c6c:	4770      	bx	lr
 8000c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c72:	d105      	bne.n	8000c80 <__aeabi_d2iz+0x48>
 8000c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	bf08      	it	eq
 8000c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2uiz>:
 8000c88:	004a      	lsls	r2, r1, #1
 8000c8a:	d211      	bcs.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c90:	d211      	bcs.n	8000cb6 <__aeabi_d2uiz+0x2e>
 8000c92:	d50d      	bpl.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c9c:	d40e      	bmi.n	8000cbc <__aeabi_d2uiz+0x34>
 8000c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000caa:	fa23 f002 	lsr.w	r0, r3, r2
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cba:	d102      	bne.n	8000cc2 <__aeabi_d2uiz+0x3a>
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	4770      	bx	lr
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2f>:
 8000cc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ccc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cd0:	bf24      	itt	cs
 8000cd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cda:	d90d      	bls.n	8000cf8 <__aeabi_d2f+0x30>
 8000cdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ce0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ce4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ce8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cfc:	d121      	bne.n	8000d42 <__aeabi_d2f+0x7a>
 8000cfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d02:	bfbc      	itt	lt
 8000d04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d08:	4770      	bxlt	lr
 8000d0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d12:	f1c2 0218 	rsb	r2, r2, #24
 8000d16:	f1c2 0c20 	rsb	ip, r2, #32
 8000d1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d22:	bf18      	it	ne
 8000d24:	f040 0001 	orrne.w	r0, r0, #1
 8000d28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d34:	ea40 000c 	orr.w	r0, r0, ip
 8000d38:	fa23 f302 	lsr.w	r3, r3, r2
 8000d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d40:	e7cc      	b.n	8000cdc <__aeabi_d2f+0x14>
 8000d42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d46:	d107      	bne.n	8000d58 <__aeabi_d2f+0x90>
 8000d48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d56:	4770      	bxne	lr
 8000d58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b970 	b.w	8001060 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f806 	bl	8000d98 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__udivmoddi4>:
 8000d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d9c:	9e08      	ldr	r6, [sp, #32]
 8000d9e:	460d      	mov	r5, r1
 8000da0:	4604      	mov	r4, r0
 8000da2:	460f      	mov	r7, r1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d14a      	bne.n	8000e3e <__udivmoddi4+0xa6>
 8000da8:	428a      	cmp	r2, r1
 8000daa:	4694      	mov	ip, r2
 8000dac:	d965      	bls.n	8000e7a <__udivmoddi4+0xe2>
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	b143      	cbz	r3, 8000dc6 <__udivmoddi4+0x2e>
 8000db4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db8:	f1c3 0220 	rsb	r2, r3, #32
 8000dbc:	409f      	lsls	r7, r3
 8000dbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	409c      	lsls	r4, r3
 8000dc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dca:	fa1f f58c 	uxth.w	r5, ip
 8000dce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dd2:	0c22      	lsrs	r2, r4, #16
 8000dd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ddc:	fb01 f005 	mul.w	r0, r1, r5
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x62>
 8000de4:	eb1c 0202 	adds.w	r2, ip, r2
 8000de8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dec:	f080 811c 	bcs.w	8001028 <__udivmoddi4+0x290>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f240 8119 	bls.w	8001028 <__udivmoddi4+0x290>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a12      	subs	r2, r2, r0
 8000dfc:	b2a4      	uxth	r4, r4
 8000dfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0a:	fb00 f505 	mul.w	r5, r0, r5
 8000e0e:	42a5      	cmp	r5, r4
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x90>
 8000e12:	eb1c 0404 	adds.w	r4, ip, r4
 8000e16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x294>
 8000e1e:	42a5      	cmp	r5, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x294>
 8000e24:	4464      	add	r4, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11e      	cbz	r6, 8000e3a <__udivmoddi4+0xa2>
 8000e32:	40dc      	lsrs	r4, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0xbc>
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	f000 80ed 	beq.w	8001022 <__udivmoddi4+0x28a>
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e54:	fab3 f183 	clz	r1, r3
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d149      	bne.n	8000ef0 <__udivmoddi4+0x158>
 8000e5c:	42ab      	cmp	r3, r5
 8000e5e:	d302      	bcc.n	8000e66 <__udivmoddi4+0xce>
 8000e60:	4282      	cmp	r2, r0
 8000e62:	f200 80f8 	bhi.w	8001056 <__udivmoddi4+0x2be>
 8000e66:	1a84      	subs	r4, r0, r2
 8000e68:	eb65 0203 	sbc.w	r2, r5, r3
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4617      	mov	r7, r2
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d0e2      	beq.n	8000e3a <__udivmoddi4+0xa2>
 8000e74:	e9c6 4700 	strd	r4, r7, [r6]
 8000e78:	e7df      	b.n	8000e3a <__udivmoddi4+0xa2>
 8000e7a:	b902      	cbnz	r2, 8000e7e <__udivmoddi4+0xe6>
 8000e7c:	deff      	udf	#255	; 0xff
 8000e7e:	fab2 f382 	clz	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8090 	bne.w	8000fa8 <__udivmoddi4+0x210>
 8000e88:	1a8a      	subs	r2, r1, r2
 8000e8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	2101      	movs	r1, #1
 8000e94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e98:	fb07 2015 	mls	r0, r7, r5, r2
 8000e9c:	0c22      	lsrs	r2, r4, #16
 8000e9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ea2:	fb0e f005 	mul.w	r0, lr, r5
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x124>
 8000eaa:	eb1c 0202 	adds.w	r2, ip, r2
 8000eae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x122>
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	f200 80cb 	bhi.w	8001050 <__udivmoddi4+0x2b8>
 8000eba:	4645      	mov	r5, r8
 8000ebc:	1a12      	subs	r2, r2, r0
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ec4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ecc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed0:	45a6      	cmp	lr, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x14e>
 8000ed4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000edc:	d202      	bcs.n	8000ee4 <__udivmoddi4+0x14c>
 8000ede:	45a6      	cmp	lr, r4
 8000ee0:	f200 80bb 	bhi.w	800105a <__udivmoddi4+0x2c2>
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	eba4 040e 	sub.w	r4, r4, lr
 8000eea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eee:	e79f      	b.n	8000e30 <__udivmoddi4+0x98>
 8000ef0:	f1c1 0720 	rsb	r7, r1, #32
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000efe:	fa05 f401 	lsl.w	r4, r5, r1
 8000f02:	fa20 f307 	lsr.w	r3, r0, r7
 8000f06:	40fd      	lsrs	r5, r7
 8000f08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	fb09 5518 	mls	r5, r9, r8, r5
 8000f1a:	0c1c      	lsrs	r4, r3, #16
 8000f1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f20:	fb08 f50e 	mul.w	r5, r8, lr
 8000f24:	42a5      	cmp	r5, r4
 8000f26:	fa02 f201 	lsl.w	r2, r2, r1
 8000f2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f2e:	d90b      	bls.n	8000f48 <__udivmoddi4+0x1b0>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f38:	f080 8088 	bcs.w	800104c <__udivmoddi4+0x2b4>
 8000f3c:	42a5      	cmp	r5, r4
 8000f3e:	f240 8085 	bls.w	800104c <__udivmoddi4+0x2b4>
 8000f42:	f1a8 0802 	sub.w	r8, r8, #2
 8000f46:	4464      	add	r4, ip
 8000f48:	1b64      	subs	r4, r4, r5
 8000f4a:	b29d      	uxth	r5, r3
 8000f4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f50:	fb09 4413 	mls	r4, r9, r3, r4
 8000f54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x1da>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f68:	d26c      	bcs.n	8001044 <__udivmoddi4+0x2ac>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	d96a      	bls.n	8001044 <__udivmoddi4+0x2ac>
 8000f6e:	3b02      	subs	r3, #2
 8000f70:	4464      	add	r4, ip
 8000f72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f76:	fba3 9502 	umull	r9, r5, r3, r2
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	42ac      	cmp	r4, r5
 8000f80:	46c8      	mov	r8, r9
 8000f82:	46ae      	mov	lr, r5
 8000f84:	d356      	bcc.n	8001034 <__udivmoddi4+0x29c>
 8000f86:	d053      	beq.n	8001030 <__udivmoddi4+0x298>
 8000f88:	b156      	cbz	r6, 8000fa0 <__udivmoddi4+0x208>
 8000f8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f92:	fa04 f707 	lsl.w	r7, r4, r7
 8000f96:	40ca      	lsrs	r2, r1
 8000f98:	40cc      	lsrs	r4, r1
 8000f9a:	4317      	orrs	r7, r2
 8000f9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa8:	f1c3 0120 	rsb	r1, r3, #32
 8000fac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000fb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000fb8:	409d      	lsls	r5, r3
 8000fba:	432a      	orrs	r2, r5
 8000fbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc0:	fa1f fe8c 	uxth.w	lr, ip
 8000fc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fcc:	0c11      	lsrs	r1, r2, #16
 8000fce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fd2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fd6:	428d      	cmp	r5, r1
 8000fd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x258>
 8000fde:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fe6:	d22f      	bcs.n	8001048 <__udivmoddi4+0x2b0>
 8000fe8:	428d      	cmp	r5, r1
 8000fea:	d92d      	bls.n	8001048 <__udivmoddi4+0x2b0>
 8000fec:	3802      	subs	r0, #2
 8000fee:	4461      	add	r1, ip
 8000ff0:	1b49      	subs	r1, r1, r5
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ff8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	fb05 f10e 	mul.w	r1, r5, lr
 8001004:	4291      	cmp	r1, r2
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x282>
 8001008:	eb1c 0202 	adds.w	r2, ip, r2
 800100c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001010:	d216      	bcs.n	8001040 <__udivmoddi4+0x2a8>
 8001012:	4291      	cmp	r1, r2
 8001014:	d914      	bls.n	8001040 <__udivmoddi4+0x2a8>
 8001016:	3d02      	subs	r5, #2
 8001018:	4462      	add	r2, ip
 800101a:	1a52      	subs	r2, r2, r1
 800101c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001020:	e738      	b.n	8000e94 <__udivmoddi4+0xfc>
 8001022:	4631      	mov	r1, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e708      	b.n	8000e3a <__udivmoddi4+0xa2>
 8001028:	4639      	mov	r1, r7
 800102a:	e6e6      	b.n	8000dfa <__udivmoddi4+0x62>
 800102c:	4610      	mov	r0, r2
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x90>
 8001030:	4548      	cmp	r0, r9
 8001032:	d2a9      	bcs.n	8000f88 <__udivmoddi4+0x1f0>
 8001034:	ebb9 0802 	subs.w	r8, r9, r2
 8001038:	eb65 0e0c 	sbc.w	lr, r5, ip
 800103c:	3b01      	subs	r3, #1
 800103e:	e7a3      	b.n	8000f88 <__udivmoddi4+0x1f0>
 8001040:	4645      	mov	r5, r8
 8001042:	e7ea      	b.n	800101a <__udivmoddi4+0x282>
 8001044:	462b      	mov	r3, r5
 8001046:	e794      	b.n	8000f72 <__udivmoddi4+0x1da>
 8001048:	4640      	mov	r0, r8
 800104a:	e7d1      	b.n	8000ff0 <__udivmoddi4+0x258>
 800104c:	46d0      	mov	r8, sl
 800104e:	e77b      	b.n	8000f48 <__udivmoddi4+0x1b0>
 8001050:	3d02      	subs	r5, #2
 8001052:	4462      	add	r2, ip
 8001054:	e732      	b.n	8000ebc <__udivmoddi4+0x124>
 8001056:	4608      	mov	r0, r1
 8001058:	e70a      	b.n	8000e70 <__udivmoddi4+0xd8>
 800105a:	4464      	add	r4, ip
 800105c:	3802      	subs	r0, #2
 800105e:	e742      	b.n	8000ee6 <__udivmoddi4+0x14e>

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <GPSSPEED_voidBuildMsg>:
#include <stdio.h>
#include "Build_msg.h"


void GPSSPEED_voidBuildMsg(uint8_t* Msg_Array,double Copy_doubleGPS_Longitude,double Copy_doubleGPS_Latitude,uint16_t Copy_uint16Speed)
{
 8001064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001068:	b092      	sub	sp, #72	; 0x48
 800106a:	af02      	add	r7, sp, #8
 800106c:	6178      	str	r0, [r7, #20]
 800106e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001072:	ed87 1b00 	vstr	d1, [r7]
 8001076:	460b      	mov	r3, r1
 8001078:	827b      	strh	r3, [r7, #18]
 800107a:	466b      	mov	r3, sp
 800107c:	469a      	mov	sl, r3

	uint8_t Local_uint8LatitudeArr[11];
	uint8_t Local_uint8LongitudeArr[11];
	uint8_t Local_uint8SpeedElements;

	uint8_t Local_uint8Counter=0;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if(Copy_uint16Speed<10)
 8001084:	8a7b      	ldrh	r3, [r7, #18]
 8001086:	2b09      	cmp	r3, #9
 8001088:	d803      	bhi.n	8001092 <GPSSPEED_voidBuildMsg+0x2e>
	{
		Local_uint8SpeedElements=1;
 800108a:	2301      	movs	r3, #1
 800108c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001090:	e014      	b.n	80010bc <GPSSPEED_voidBuildMsg+0x58>
	}
	else if(Copy_uint16Speed<100)
 8001092:	8a7b      	ldrh	r3, [r7, #18]
 8001094:	2b63      	cmp	r3, #99	; 0x63
 8001096:	d803      	bhi.n	80010a0 <GPSSPEED_voidBuildMsg+0x3c>
	{
		Local_uint8SpeedElements=2;
 8001098:	2302      	movs	r3, #2
 800109a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800109e:	e00d      	b.n	80010bc <GPSSPEED_voidBuildMsg+0x58>
	}
	else if((Copy_uint16Speed>100) && (Copy_uint16Speed<1000))
 80010a0:	8a7b      	ldrh	r3, [r7, #18]
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d907      	bls.n	80010b6 <GPSSPEED_voidBuildMsg+0x52>
 80010a6:	8a7b      	ldrh	r3, [r7, #18]
 80010a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ac:	d203      	bcs.n	80010b6 <GPSSPEED_voidBuildMsg+0x52>
	{
		Local_uint8SpeedElements=3;
 80010ae:	2303      	movs	r3, #3
 80010b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80010b4:	e002      	b.n	80010bc <GPSSPEED_voidBuildMsg+0x58>
	}
	else
	{
		Local_uint8SpeedElements=4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	uint8_t Local_uint8SpeedArr[Local_uint8SpeedElements+1];
 80010bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010c0:	1c5e      	adds	r6, r3, #1
 80010c2:	1e73      	subs	r3, r6, #1
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80010c6:	4632      	mov	r2, r6
 80010c8:	2300      	movs	r3, #0
 80010ca:	4690      	mov	r8, r2
 80010cc:	4699      	mov	r9, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010e2:	4632      	mov	r2, r6
 80010e4:	2300      	movs	r3, #0
 80010e6:	4614      	mov	r4, r2
 80010e8:	461d      	mov	r5, r3
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	00eb      	lsls	r3, r5, #3
 80010f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010f8:	00e2      	lsls	r2, r4, #3
 80010fa:	4633      	mov	r3, r6
 80010fc:	3307      	adds	r3, #7
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	ebad 0d03 	sub.w	sp, sp, r3
 8001106:	ab02      	add	r3, sp, #8
 8001108:	3300      	adds	r3, #0
 800110a:	637b      	str	r3, [r7, #52]	; 0x34

	/*Putting the lat and lon in a string form to be sent to the esp*/
	snprintf(&Local_uint8LongitudeArr,sizeof(Local_uint8LongitudeArr),"%.6f",Copy_doubleGPS_Longitude);
 800110c:	f107 001c 	add.w	r0, r7, #28
 8001110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001114:	e9cd 2300 	strd	r2, r3, [sp]
 8001118:	4a50      	ldr	r2, [pc, #320]	; (800125c <GPSSPEED_voidBuildMsg+0x1f8>)
 800111a:	210b      	movs	r1, #11
 800111c:	f00d ff76 	bl	800f00c <sniprintf>
	snprintf(&Local_uint8LatitudeArr,sizeof(Local_uint8LatitudeArr),"%.6f",Copy_doubleGPS_Latitude);
 8001120:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001128:	e9cd 2300 	strd	r2, r3, [sp]
 800112c:	4a4b      	ldr	r2, [pc, #300]	; (800125c <GPSSPEED_voidBuildMsg+0x1f8>)
 800112e:	210b      	movs	r1, #11
 8001130:	f00d ff6c 	bl	800f00c <sniprintf>

	snprintf(&Local_uint8SpeedArr,sizeof(Local_uint8SpeedArr),"%d",Copy_uint16Speed);
 8001134:	4631      	mov	r1, r6
 8001136:	8a7b      	ldrh	r3, [r7, #18]
 8001138:	4a49      	ldr	r2, [pc, #292]	; (8001260 <GPSSPEED_voidBuildMsg+0x1fc>)
 800113a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800113c:	f00d ff66 	bl	800f00c <sniprintf>

	Msg_Array[0]='#';
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2223      	movs	r2, #35	; 0x23
 8001144:	701a      	strb	r2, [r3, #0]
	Msg_Array[1]=Local_uint8LongitudeArr[0];
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	7f3a      	ldrb	r2, [r7, #28]
 800114c:	701a      	strb	r2, [r3, #0]
	Msg_Array[2]=Local_uint8LongitudeArr[1];
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3302      	adds	r3, #2
 8001152:	7f7a      	ldrb	r2, [r7, #29]
 8001154:	701a      	strb	r2, [r3, #0]
	Msg_Array[3]=Local_uint8LongitudeArr[2];
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3303      	adds	r3, #3
 800115a:	7fba      	ldrb	r2, [r7, #30]
 800115c:	701a      	strb	r2, [r3, #0]
	Msg_Array[4]=Local_uint8LongitudeArr[3];
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3304      	adds	r3, #4
 8001162:	7ffa      	ldrb	r2, [r7, #31]
 8001164:	701a      	strb	r2, [r3, #0]

	Msg_Array[5]=Local_uint8LongitudeArr[4];
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3305      	adds	r3, #5
 800116a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800116e:	701a      	strb	r2, [r3, #0]
	Msg_Array[6]=Local_uint8LongitudeArr[5];
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3306      	adds	r3, #6
 8001174:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001178:	701a      	strb	r2, [r3, #0]
	Msg_Array[7]=Local_uint8LongitudeArr[6];
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3307      	adds	r3, #7
 800117e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001182:	701a      	strb	r2, [r3, #0]
	Msg_Array[8]=Local_uint8LongitudeArr[7];
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3308      	adds	r3, #8
 8001188:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800118c:	701a      	strb	r2, [r3, #0]
	Msg_Array[9]=Local_uint8LongitudeArr[8];
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3309      	adds	r3, #9
 8001192:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001196:	701a      	strb	r2, [r3, #0]

	Msg_Array[10]='*';
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	330a      	adds	r3, #10
 800119c:	222a      	movs	r2, #42	; 0x2a
 800119e:	701a      	strb	r2, [r3, #0]

	Msg_Array[11]= Local_uint8LatitudeArr[0];
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	330b      	adds	r3, #11
 80011a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80011a8:	701a      	strb	r2, [r3, #0]
	Msg_Array[12]= Local_uint8LatitudeArr[1];
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	330c      	adds	r3, #12
 80011ae:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80011b2:	701a      	strb	r2, [r3, #0]
	Msg_Array[13]= Local_uint8LatitudeArr[2];
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	330d      	adds	r3, #13
 80011b8:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80011bc:	701a      	strb	r2, [r3, #0]
	Msg_Array[14]= Local_uint8LatitudeArr[3];
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	330e      	adds	r3, #14
 80011c2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80011c6:	701a      	strb	r2, [r3, #0]
	Msg_Array[15]= Local_uint8LatitudeArr[4];
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	330f      	adds	r3, #15
 80011cc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80011d0:	701a      	strb	r2, [r3, #0]
	Msg_Array[16]= Local_uint8LatitudeArr[5];
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3310      	adds	r3, #16
 80011d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80011da:	701a      	strb	r2, [r3, #0]
	Msg_Array[17]= Local_uint8LatitudeArr[6];
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3311      	adds	r3, #17
 80011e0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80011e4:	701a      	strb	r2, [r3, #0]
	Msg_Array[18]= Local_uint8LatitudeArr[7];
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3312      	adds	r3, #18
 80011ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80011ee:	701a      	strb	r2, [r3, #0]
	Msg_Array[19]= Local_uint8LatitudeArr[8];
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3313      	adds	r3, #19
 80011f4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80011f8:	701a      	strb	r2, [r3, #0]

	Msg_Array[20]= '&';
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3314      	adds	r3, #20
 80011fe:	2226      	movs	r2, #38	; 0x26
 8001200:	701a      	strb	r2, [r3, #0]


	for(Local_uint8Counter;Local_uint8Counter<Local_uint8SpeedElements;Local_uint8Counter++)
 8001202:	e00f      	b.n	8001224 <GPSSPEED_voidBuildMsg+0x1c0>
	{
		Msg_Array[21+Local_uint8Counter]=Local_uint8SpeedArr[Local_uint8Counter];
 8001204:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001208:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800120c:	3315      	adds	r3, #21
 800120e:	4619      	mov	r1, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	440b      	add	r3, r1
 8001214:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001216:	5c8a      	ldrb	r2, [r1, r2]
 8001218:	701a      	strb	r2, [r3, #0]
	for(Local_uint8Counter;Local_uint8Counter<Local_uint8SpeedElements;Local_uint8Counter++)
 800121a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800121e:	3301      	adds	r3, #1
 8001220:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001224:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001228:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800122c:	429a      	cmp	r2, r3
 800122e:	d3e9      	bcc.n	8001204 <GPSSPEED_voidBuildMsg+0x1a0>
	}

	Msg_Array[21+Local_uint8Counter]='^';
 8001230:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001234:	3315      	adds	r3, #21
 8001236:	461a      	mov	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	4413      	add	r3, r2
 800123c:	225e      	movs	r2, #94	; 0x5e
 800123e:	701a      	strb	r2, [r3, #0]
	Msg_Array[22+Local_uint8Counter]='!';
 8001240:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001244:	3316      	adds	r3, #22
 8001246:	461a      	mov	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	4413      	add	r3, r2
 800124c:	2221      	movs	r2, #33	; 0x21
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	46d5      	mov	sp, sl

}
 8001252:	bf00      	nop
 8001254:	3740      	adds	r7, #64	; 0x40
 8001256:	46bd      	mov	sp, r7
 8001258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125c:	08012228 	.word	0x08012228
 8001260:	08012230 	.word	0x08012230

08001264 <Buzzer_voidMidSound>:


#endif
}
void Buzzer_voidMidSound(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0

#endif

#elif Buzzer_Timer_Connected == TIMER12
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1
	TIM12->CCR1=50;
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <Buzzer_voidMidSound+0x18>)
 800126a:	2232      	movs	r2, #50	; 0x32
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 800126e:	2100      	movs	r1, #0
 8001270:	4803      	ldr	r0, [pc, #12]	; (8001280 <Buzzer_voidMidSound+0x1c>)
 8001272:	f005 ff6f 	bl	8007154 <HAL_TIM_PWM_Start>


#endif


}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40001800 	.word	0x40001800
 8001280:	2000090c 	.word	0x2000090c

08001284 <Buzzer_voidHighSound>:
void Buzzer_voidHighSound(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0


#endif
#elif Buzzer_Timer_Connected == TIMER12
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1
	TIM12->CCR1=90;
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <Buzzer_voidHighSound+0x18>)
 800128a:	225a      	movs	r2, #90	; 0x5a
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 800128e:	2100      	movs	r1, #0
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <Buzzer_voidHighSound+0x1c>)
 8001292:	f005 ff5f 	bl	8007154 <HAL_TIM_PWM_Start>

#endif



}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40001800 	.word	0x40001800
 80012a0:	2000090c 	.word	0x2000090c

080012a4 <Buzzer_voidStop>:

void Buzzer_voidStop(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
#endif

#elif Buzzer_Timer_Connected == TIMER12
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1

	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 80012a8:	2100      	movs	r1, #0
 80012aa:	4802      	ldr	r0, [pc, #8]	; (80012b4 <Buzzer_voidStop+0x10>)
 80012ac:	f006 f81a 	bl	80072e4 <HAL_TIM_PWM_Stop>




#endif
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000090c 	.word	0x2000090c

080012b8 <HAL_TIM_IC_CaptureCallback>:


/***************************************Interrupts_Call_Backs********************************************************/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c8:	d10c      	bne.n	80012e4 <HAL_TIM_IC_CaptureCallback+0x2c>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7f1b      	ldrb	r3, [r3, #28]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d003      	beq.n	80012da <HAL_TIM_IC_CaptureCallback+0x22>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7f1b      	ldrb	r3, [r3, #28]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d104      	bne.n	80012e4 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		edges_counter++;
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_TIM_IC_CaptureCallback+0x38>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <HAL_TIM_IC_CaptureCallback+0x38>)
 80012e2:	6013      	str	r3, [r2, #0]
	}
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	20000214 	.word	0x20000214

080012f4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
	/* ESP Interrupt */
	if(huart->Instance==UART4)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a2c      	ldr	r2, [pc, #176]	; (80013b4 <HAL_UART_RxCpltCallback+0xc0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d126      	bne.n	8001354 <HAL_UART_RxCpltCallback+0x60>
	{
		HAL_UART_Receive_IT(&huart4,&ESP_Recieved_Char,2);
 8001306:	2202      	movs	r2, #2
 8001308:	492b      	ldr	r1, [pc, #172]	; (80013b8 <HAL_UART_RxCpltCallback+0xc4>)
 800130a:	482c      	ldr	r0, [pc, #176]	; (80013bc <HAL_UART_RxCpltCallback+0xc8>)
 800130c:	f007 f965 	bl	80085da <HAL_UART_Receive_IT>

		if((ESP_Recieved_Char == Notify_TASK_RaspSend_Overtake_Clear) || (ESP_Recieved_Char == Notify_TASK_RaspSend_Overtake_NotClear))
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <HAL_UART_RxCpltCallback+0xc4>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b4f      	cmp	r3, #79	; 0x4f
 8001316:	d003      	beq.n	8001320 <HAL_UART_RxCpltCallback+0x2c>
 8001318:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <HAL_UART_RxCpltCallback+0xc4>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b4e      	cmp	r3, #78	; 0x4e
 800131e:	d10d      	bne.n	800133c <HAL_UART_RxCpltCallback+0x48>
		{
			/* Give the Notification to the Raspberry send task is it Clear or Not CLear to overtake */
			xTaskNotifyFromISR(Handle_Rasp_SendData,ESP_Recieved_Char,eSetValueWithOverwrite,NULL);
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <HAL_UART_RxCpltCallback+0xcc>)
 8001322:	6818      	ldr	r0, [r3, #0]
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_UART_RxCpltCallback+0xc4>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	2300      	movs	r3, #0
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	2300      	movs	r3, #0
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2303      	movs	r3, #3
 8001334:	2100      	movs	r1, #0
 8001336:	f00a fa83 	bl	800b840 <xTaskGenericNotifyFromISR>

		/*Give the Notification to the Receive Raspberry task*/
		xTaskNotifyFromISR(Handle_Rasp_ReceiveData,NULL,eNoAction,NULL);
	}

}
 800133a:	e036      	b.n	80013aa <HAL_UART_RxCpltCallback+0xb6>
			xTaskNotifyFromISR(Handle_ESP_Receive,NULL,eNoAction,NULL);
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <HAL_UART_RxCpltCallback+0xd0>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	2300      	movs	r3, #0
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	2300      	movs	r3, #0
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2300      	movs	r3, #0
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	f00a fa77 	bl	800b840 <xTaskGenericNotifyFromISR>
}
 8001352:	e02a      	b.n	80013aa <HAL_UART_RxCpltCallback+0xb6>
	else if(huart->Instance==USART3)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <HAL_UART_RxCpltCallback+0xd4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d110      	bne.n	8001380 <HAL_UART_RxCpltCallback+0x8c>
		HAL_UART_Receive_IT(&huart3, &received_char, 1);
 800135e:	2201      	movs	r2, #1
 8001360:	491a      	ldr	r1, [pc, #104]	; (80013cc <HAL_UART_RxCpltCallback+0xd8>)
 8001362:	481b      	ldr	r0, [pc, #108]	; (80013d0 <HAL_UART_RxCpltCallback+0xdc>)
 8001364:	f007 f939 	bl	80085da <HAL_UART_Receive_IT>
		xTaskNotifyFromISR(Handle_CarControl,NULL,eNoAction,NULL);
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_UART_RxCpltCallback+0xe0>)
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	2300      	movs	r3, #0
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	2300      	movs	r3, #0
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2300      	movs	r3, #0
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	f00a fa61 	bl	800b840 <xTaskGenericNotifyFromISR>
}
 800137e:	e014      	b.n	80013aa <HAL_UART_RxCpltCallback+0xb6>
	else if (huart->Instance==USART6)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_UART_RxCpltCallback+0xe4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d10f      	bne.n	80013aa <HAL_UART_RxCpltCallback+0xb6>
		HAL_UART_Receive_IT(&huart6,&Rasp_Recieved_Char,2);
 800138a:	2202      	movs	r2, #2
 800138c:	4913      	ldr	r1, [pc, #76]	; (80013dc <HAL_UART_RxCpltCallback+0xe8>)
 800138e:	4814      	ldr	r0, [pc, #80]	; (80013e0 <HAL_UART_RxCpltCallback+0xec>)
 8001390:	f007 f923 	bl	80085da <HAL_UART_Receive_IT>
		xTaskNotifyFromISR(Handle_Rasp_ReceiveData,NULL,eNoAction,NULL);
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_UART_RxCpltCallback+0xf0>)
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	2300      	movs	r3, #0
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	2300      	movs	r3, #0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2300      	movs	r3, #0
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	f00a fa4b 	bl	800b840 <xTaskGenericNotifyFromISR>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40004c00 	.word	0x40004c00
 80013b8:	20000a65 	.word	0x20000a65
 80013bc:	20000954 	.word	0x20000954
 80013c0:	20000a88 	.word	0x20000a88
 80013c4:	20000a78 	.word	0x20000a78
 80013c8:	40004800 	.word	0x40004800
 80013cc:	20000a64 	.word	0x20000a64
 80013d0:	200009dc 	.word	0x200009dc
 80013d4:	20000a68 	.word	0x20000a68
 80013d8:	40011400 	.word	0x40011400
 80013dc:	20000a66 	.word	0x20000a66
 80013e0:	20000a20 	.word	0x20000a20
 80013e4:	20000a84 	.word	0x20000a84

080013e8 <vApplicationIdleHook>:

/*********************************************Application_Hook*************************************************************/
void vApplicationIdleHook(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	/* The processor will go to sleep in the IDLE Task */
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80013ec:	2101      	movs	r1, #1
 80013ee:	2000      	movs	r0, #0
 80013f0:	f004 ff60 	bl	80062b4 <HAL_PWR_EnterSLEEPMode>

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <CallBack_TimerLCDBuzzer>:

/*********************************************SW_Timers_CallBacks*********************************************************/
void CallBack_TimerLCDBuzzer(TimerHandle_t xTimer)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	/* When the LCDBuzzer task starts the timer it should turn off the buzzer and clear the LCD */

	/* Stopping the buzzer */
	Buzzer_voidStop();
 8001400:	f7ff ff50 	bl	80012a4 <Buzzer_voidStop>

	/* Clearing the LCD */
	LCD_voidClearDisplay();
 8001404:	f000 fcb6 	bl	8001d74 <LCD_voidClearDisplay>

	/* Resseting the global warning status */
	Global_Break_Warning_On_Status = Warning_OFF;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <CallBack_TimerLCDBuzzer+0x20>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000324 	.word	0x20000324

0800141c <CallBack_TimerBreakingStatus>:

void CallBack_TimerBreakingStatus(TimerHandle_t xTimer){Global_Breaking_Status = Warning_OFF;}
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <CallBack_TimerBreakingStatus+0x1c>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000323 	.word	0x20000323

0800143c <Car_Move_Forward_High_Speed>:

void Motor4_Rotate_CW(void);
void Motor4_Rotate_CCW(void);


void Car_Move_Forward_High_Speed(void){
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 8001440:	f000 f928 	bl	8001694 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <Car_Move_Forward_High_Speed+0x54>)
 8001446:	2263      	movs	r2, #99	; 0x63
 8001448:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <Car_Move_Forward_High_Speed+0x54>)
 800144c:	2263      	movs	r2, #99	; 0x63
 800144e:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <Car_Move_Forward_High_Speed+0x54>)
 8001452:	2263      	movs	r2, #99	; 0x63
 8001454:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <Car_Move_Forward_High_Speed+0x54>)
 8001458:	2263      	movs	r2, #99	; 0x63
 800145a:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 800145c:	2100      	movs	r1, #0
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <Car_Move_Forward_High_Speed+0x58>)
 8001460:	f005 fe78 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001464:	2104      	movs	r1, #4
 8001466:	480b      	ldr	r0, [pc, #44]	; (8001494 <Car_Move_Forward_High_Speed+0x58>)
 8001468:	f005 fe74 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 800146c:	2108      	movs	r1, #8
 800146e:	4809      	ldr	r0, [pc, #36]	; (8001494 <Car_Move_Forward_High_Speed+0x58>)
 8001470:	f005 fe70 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001474:	210c      	movs	r1, #12
 8001476:	4807      	ldr	r0, [pc, #28]	; (8001494 <Car_Move_Forward_High_Speed+0x58>)
 8001478:	f005 fe6c 	bl	8007154 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at the same direction*/
	Motor1_Rotate_CW();
 800147c:	f000 f93e 	bl	80016fc <Motor1_Rotate_CW>
	Motor2_Rotate_CW();
 8001480:	f000 f960 	bl	8001744 <Motor2_Rotate_CW>
	Motor3_Rotate_CW();
 8001484:	f000 f97e 	bl	8001784 <Motor3_Rotate_CW>
	Motor4_Rotate_CW();
 8001488:	f000 f9a0 	bl	80017cc <Motor4_Rotate_CW>
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40000400 	.word	0x40000400
 8001494:	20000834 	.word	0x20000834

08001498 <Car_Move_Backward>:
	Motor2_Rotate_CW();
	Motor3_Rotate_CW();
	Motor4_Rotate_CW();
}
void Car_Move_Backward(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 800149c:	f000 f8fa 	bl	8001694 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <Car_Move_Backward+0x54>)
 80014a2:	2263      	movs	r2, #99	; 0x63
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <Car_Move_Backward+0x54>)
 80014a8:	2263      	movs	r2, #99	; 0x63
 80014aa:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <Car_Move_Backward+0x54>)
 80014ae:	2263      	movs	r2, #99	; 0x63
 80014b0:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <Car_Move_Backward+0x54>)
 80014b4:	2263      	movs	r2, #99	; 0x63
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 80014b8:	2100      	movs	r1, #0
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <Car_Move_Backward+0x58>)
 80014bc:	f005 fe4a 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 80014c0:	2104      	movs	r1, #4
 80014c2:	480b      	ldr	r0, [pc, #44]	; (80014f0 <Car_Move_Backward+0x58>)
 80014c4:	f005 fe46 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 80014c8:	2108      	movs	r1, #8
 80014ca:	4809      	ldr	r0, [pc, #36]	; (80014f0 <Car_Move_Backward+0x58>)
 80014cc:	f005 fe42 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 80014d0:	210c      	movs	r1, #12
 80014d2:	4807      	ldr	r0, [pc, #28]	; (80014f0 <Car_Move_Backward+0x58>)
 80014d4:	f005 fe3e 	bl	8007154 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at the same  direction*/
	Motor1_Rotate_CCW();
 80014d8:	f000 f922 	bl	8001720 <Motor1_Rotate_CCW>
	Motor2_Rotate_CCW();
 80014dc:	f000 f942 	bl	8001764 <Motor2_Rotate_CCW>
	Motor3_Rotate_CCW();
 80014e0:	f000 f962 	bl	80017a8 <Motor3_Rotate_CCW>
	Motor4_Rotate_CCW();
 80014e4:	f000 f984 	bl	80017f0 <Motor4_Rotate_CCW>
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40000400 	.word	0x40000400
 80014f0:	20000834 	.word	0x20000834

080014f4 <Car_Rotate_Right>:

void Car_Rotate_Right(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 80014f8:	f000 f8cc 	bl	8001694 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <Car_Rotate_Right+0x54>)
 80014fe:	2263      	movs	r2, #99	; 0x63
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <Car_Rotate_Right+0x54>)
 8001504:	2263      	movs	r2, #99	; 0x63
 8001506:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <Car_Rotate_Right+0x54>)
 800150a:	2263      	movs	r2, #99	; 0x63
 800150c:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <Car_Rotate_Right+0x54>)
 8001510:	2263      	movs	r2, #99	; 0x63
 8001512:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001514:	2100      	movs	r1, #0
 8001516:	480d      	ldr	r0, [pc, #52]	; (800154c <Car_Rotate_Right+0x58>)
 8001518:	f005 fe1c 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 800151c:	2104      	movs	r1, #4
 800151e:	480b      	ldr	r0, [pc, #44]	; (800154c <Car_Rotate_Right+0x58>)
 8001520:	f005 fe18 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001524:	2108      	movs	r1, #8
 8001526:	4809      	ldr	r0, [pc, #36]	; (800154c <Car_Rotate_Right+0x58>)
 8001528:	f005 fe14 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 800152c:	210c      	movs	r1, #12
 800152e:	4807      	ldr	r0, [pc, #28]	; (800154c <Car_Rotate_Right+0x58>)
 8001530:	f005 fe10 	bl	8007154 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at opposite direction*/
	Motor1_Rotate_CW();
 8001534:	f000 f8e2 	bl	80016fc <Motor1_Rotate_CW>
	Motor2_Rotate_CCW();
 8001538:	f000 f914 	bl	8001764 <Motor2_Rotate_CCW>
	Motor3_Rotate_CW();
 800153c:	f000 f922 	bl	8001784 <Motor3_Rotate_CW>
	Motor4_Rotate_CCW();
 8001540:	f000 f956 	bl	80017f0 <Motor4_Rotate_CCW>
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40000400 	.word	0x40000400
 800154c:	20000834 	.word	0x20000834

08001550 <Car_Rotate_Left>:
void Car_Rotate_Left(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 8001554:	f000 f89e 	bl	8001694 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=LOW_SPEED;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <Car_Rotate_Left+0x54>)
 800155a:	2246      	movs	r2, #70	; 0x46
 800155c:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=LOW_SPEED;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <Car_Rotate_Left+0x54>)
 8001560:	2246      	movs	r2, #70	; 0x46
 8001562:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=LOW_SPEED;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <Car_Rotate_Left+0x54>)
 8001566:	2246      	movs	r2, #70	; 0x46
 8001568:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=LOW_SPEED;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <Car_Rotate_Left+0x54>)
 800156c:	2246      	movs	r2, #70	; 0x46
 800156e:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001570:	2100      	movs	r1, #0
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <Car_Rotate_Left+0x58>)
 8001574:	f005 fdee 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001578:	2104      	movs	r1, #4
 800157a:	480b      	ldr	r0, [pc, #44]	; (80015a8 <Car_Rotate_Left+0x58>)
 800157c:	f005 fdea 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001580:	2108      	movs	r1, #8
 8001582:	4809      	ldr	r0, [pc, #36]	; (80015a8 <Car_Rotate_Left+0x58>)
 8001584:	f005 fde6 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001588:	210c      	movs	r1, #12
 800158a:	4807      	ldr	r0, [pc, #28]	; (80015a8 <Car_Rotate_Left+0x58>)
 800158c:	f005 fde2 	bl	8007154 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at opposite direction*/
	Motor1_Rotate_CCW();
 8001590:	f000 f8c6 	bl	8001720 <Motor1_Rotate_CCW>
	Motor2_Rotate_CW();
 8001594:	f000 f8d6 	bl	8001744 <Motor2_Rotate_CW>
	Motor3_Rotate_CCW();
 8001598:	f000 f906 	bl	80017a8 <Motor3_Rotate_CCW>
	Motor4_Rotate_CW();
 800159c:	f000 f916 	bl	80017cc <Motor4_Rotate_CW>

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40000400 	.word	0x40000400
 80015a8:	20000834 	.word	0x20000834

080015ac <Car_Rotate_RightForward>:
void Car_Rotate_RightForward(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	/*First Disabling the Four motors*/
	Motors_Disabling();
 80015b0:	f000 f870 	bl	8001694 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Right motors rotate high speed and the Left with low speed*/
	/*Assigning the duty cycle*/

	PWM_Motor_1=LOW_SPEED;
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <Car_Rotate_RightForward+0x54>)
 80015b6:	2246      	movs	r2, #70	; 0x46
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <Car_Rotate_RightForward+0x54>)
 80015bc:	2263      	movs	r2, #99	; 0x63
 80015be:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=LOW_SPEED;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <Car_Rotate_RightForward+0x54>)
 80015c2:	2246      	movs	r2, #70	; 0x46
 80015c4:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <Car_Rotate_RightForward+0x54>)
 80015c8:	2263      	movs	r2, #99	; 0x63
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/

	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 80015cc:	2100      	movs	r1, #0
 80015ce:	480d      	ldr	r0, [pc, #52]	; (8001604 <Car_Rotate_RightForward+0x58>)
 80015d0:	f005 fdc0 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 80015d4:	2104      	movs	r1, #4
 80015d6:	480b      	ldr	r0, [pc, #44]	; (8001604 <Car_Rotate_RightForward+0x58>)
 80015d8:	f005 fdbc 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 80015dc:	2108      	movs	r1, #8
 80015de:	4809      	ldr	r0, [pc, #36]	; (8001604 <Car_Rotate_RightForward+0x58>)
 80015e0:	f005 fdb8 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 80015e4:	210c      	movs	r1, #12
 80015e6:	4807      	ldr	r0, [pc, #28]	; (8001604 <Car_Rotate_RightForward+0x58>)
 80015e8:	f005 fdb4 	bl	8007154 <HAL_TIM_PWM_Start>

	/*Making  motors rotate at opposite direction*/
		Motor1_Rotate_CW();
 80015ec:	f000 f886 	bl	80016fc <Motor1_Rotate_CW>
		Motor2_Rotate_CW();
 80015f0:	f000 f8a8 	bl	8001744 <Motor2_Rotate_CW>
		Motor3_Rotate_CW();
 80015f4:	f000 f8c6 	bl	8001784 <Motor3_Rotate_CW>
		Motor4_Rotate_CW();
 80015f8:	f000 f8e8 	bl	80017cc <Motor4_Rotate_CW>



}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40000400 	.word	0x40000400
 8001604:	20000834 	.word	0x20000834

08001608 <Car_Rotate_LeftForward>:
void Car_Rotate_LeftForward(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0

	/*First Disabling the Four motors*/
	Motors_Disabling();
 800160c:	f000 f842 	bl	8001694 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Right motors rotate high speed and the Left with low speed*/
	/*Assigning the duty cycle*/

	PWM_Motor_1=HIGH_SPEED;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <Car_Rotate_LeftForward+0x54>)
 8001612:	2263      	movs	r2, #99	; 0x63
 8001614:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=LOW_SPEED;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <Car_Rotate_LeftForward+0x54>)
 8001618:	2246      	movs	r2, #70	; 0x46
 800161a:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <Car_Rotate_LeftForward+0x54>)
 800161e:	2263      	movs	r2, #99	; 0x63
 8001620:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=LOW_SPEED;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <Car_Rotate_LeftForward+0x54>)
 8001624:	2246      	movs	r2, #70	; 0x46
 8001626:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/

	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001628:	2100      	movs	r1, #0
 800162a:	480d      	ldr	r0, [pc, #52]	; (8001660 <Car_Rotate_LeftForward+0x58>)
 800162c:	f005 fd92 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001630:	2104      	movs	r1, #4
 8001632:	480b      	ldr	r0, [pc, #44]	; (8001660 <Car_Rotate_LeftForward+0x58>)
 8001634:	f005 fd8e 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001638:	2108      	movs	r1, #8
 800163a:	4809      	ldr	r0, [pc, #36]	; (8001660 <Car_Rotate_LeftForward+0x58>)
 800163c:	f005 fd8a 	bl	8007154 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001640:	210c      	movs	r1, #12
 8001642:	4807      	ldr	r0, [pc, #28]	; (8001660 <Car_Rotate_LeftForward+0x58>)
 8001644:	f005 fd86 	bl	8007154 <HAL_TIM_PWM_Start>

	/*Making  motors rotate at opposite direction*/
		Motor1_Rotate_CW();
 8001648:	f000 f858 	bl	80016fc <Motor1_Rotate_CW>
		Motor2_Rotate_CW();
 800164c:	f000 f87a 	bl	8001744 <Motor2_Rotate_CW>
		Motor3_Rotate_CW();
 8001650:	f000 f898 	bl	8001784 <Motor3_Rotate_CW>
		Motor4_Rotate_CW();
 8001654:	f000 f8ba 	bl	80017cc <Motor4_Rotate_CW>




}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40000400 	.word	0x40000400
 8001660:	20000834 	.word	0x20000834

08001664 <Car_Stop>:
void Car_Stop(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
    /*Stopping the PWM generation on both motors*/
	HAL_TIM_PWM_Stop(Motor1_Timer, Motor1_Channel);
 8001668:	2100      	movs	r1, #0
 800166a:	4809      	ldr	r0, [pc, #36]	; (8001690 <Car_Stop+0x2c>)
 800166c:	f005 fe3a 	bl	80072e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor2_Timer, Motor2_Channel);
 8001670:	2104      	movs	r1, #4
 8001672:	4807      	ldr	r0, [pc, #28]	; (8001690 <Car_Stop+0x2c>)
 8001674:	f005 fe36 	bl	80072e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor3_Timer, Motor3_Channel);
 8001678:	2108      	movs	r1, #8
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <Car_Stop+0x2c>)
 800167c:	f005 fe32 	bl	80072e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor4_Timer, Motor4_Channel);
 8001680:	210c      	movs	r1, #12
 8001682:	4803      	ldr	r0, [pc, #12]	; (8001690 <Car_Stop+0x2c>)
 8001684:	f005 fe2e 	bl	80072e4 <HAL_TIM_PWM_Stop>
	/*Disabling both motors*/
	Motors_Disabling();
 8001688:	f000 f804 	bl	8001694 <Motors_Disabling>

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000834 	.word	0x20000834

08001694 <Motors_Disabling>:
static void Motors_Disabling(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port, IN1, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169e:	4815      	ldr	r0, [pc, #84]	; (80016f4 <Motors_Disabling+0x60>)
 80016a0:	f003 fcae 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port, IN2, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016aa:	4812      	ldr	r0, [pc, #72]	; (80016f4 <Motors_Disabling+0x60>)
 80016ac:	f003 fca8 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port, IN3, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2104      	movs	r1, #4
 80016b4:	480f      	ldr	r0, [pc, #60]	; (80016f4 <Motors_Disabling+0x60>)
 80016b6:	f003 fca3 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port, IN4, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2108      	movs	r1, #8
 80016be:	480d      	ldr	r0, [pc, #52]	; (80016f4 <Motors_Disabling+0x60>)
 80016c0:	f003 fc9e 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port, IN5, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ca:	480a      	ldr	r0, [pc, #40]	; (80016f4 <Motors_Disabling+0x60>)
 80016cc:	f003 fc98 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port, IN6, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2110      	movs	r1, #16
 80016d4:	4807      	ldr	r0, [pc, #28]	; (80016f4 <Motors_Disabling+0x60>)
 80016d6:	f003 fc93 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port, IN7, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2120      	movs	r1, #32
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <Motors_Disabling+0x64>)
 80016e0:	f003 fc8e 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port, IN8, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ea:	4803      	ldr	r0, [pc, #12]	; (80016f8 <Motors_Disabling+0x64>)
 80016ec:	f003 fc88 	bl	8005000 <HAL_GPIO_WritePin>
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020400 	.word	0x40020400

080016fc <Motor1_Rotate_CW>:
 void Motor1_Rotate_CW(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor1_Port,IN1, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <Motor1_Rotate_CW+0x20>)
 8001708:	f003 fc7a 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port,IN2, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001712:	4802      	ldr	r0, [pc, #8]	; (800171c <Motor1_Rotate_CW+0x20>)
 8001714:	f003 fc74 	bl	8005000 <HAL_GPIO_WritePin>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40020800 	.word	0x40020800

08001720 <Motor1_Rotate_CCW>:
 void Motor1_Rotate_CCW(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port,IN1, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 7180 	mov.w	r1, #256	; 0x100
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <Motor1_Rotate_CCW+0x20>)
 800172c:	f003 fc68 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port,IN2, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001736:	4802      	ldr	r0, [pc, #8]	; (8001740 <Motor1_Rotate_CCW+0x20>)
 8001738:	f003 fc62 	bl	8005000 <HAL_GPIO_WritePin>
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40020800 	.word	0x40020800

08001744 <Motor2_Rotate_CW>:
void Motor2_Rotate_CW(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor2_Port,IN3, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2104      	movs	r1, #4
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <Motor2_Rotate_CW+0x1c>)
 800174e:	f003 fc57 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port,IN4, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	2108      	movs	r1, #8
 8001756:	4802      	ldr	r0, [pc, #8]	; (8001760 <Motor2_Rotate_CW+0x1c>)
 8001758:	f003 fc52 	bl	8005000 <HAL_GPIO_WritePin>
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40020800 	.word	0x40020800

08001764 <Motor2_Rotate_CCW>:
void Motor2_Rotate_CCW(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor2_Port,IN3, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	2104      	movs	r1, #4
 800176c:	4804      	ldr	r0, [pc, #16]	; (8001780 <Motor2_Rotate_CCW+0x1c>)
 800176e:	f003 fc47 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port,IN4, GPIO_PIN_SET);
 8001772:	2201      	movs	r2, #1
 8001774:	2108      	movs	r1, #8
 8001776:	4802      	ldr	r0, [pc, #8]	; (8001780 <Motor2_Rotate_CCW+0x1c>)
 8001778:	f003 fc42 	bl	8005000 <HAL_GPIO_WritePin>
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40020800 	.word	0x40020800

08001784 <Motor3_Rotate_CW>:




 void Motor3_Rotate_CW(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor3_Port,IN5, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <Motor3_Rotate_CW+0x20>)
 8001790:	f003 fc36 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port,IN6, GPIO_PIN_SET);
 8001794:	2201      	movs	r2, #1
 8001796:	2110      	movs	r1, #16
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <Motor3_Rotate_CW+0x20>)
 800179a:	f003 fc31 	bl	8005000 <HAL_GPIO_WritePin>
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40020800 	.word	0x40020800

080017a8 <Motor3_Rotate_CCW>:
 void Motor3_Rotate_CCW(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor3_Port,IN5, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <Motor3_Rotate_CCW+0x20>)
 80017b4:	f003 fc24 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port,IN6, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2110      	movs	r1, #16
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <Motor3_Rotate_CCW+0x20>)
 80017be:	f003 fc1f 	bl	8005000 <HAL_GPIO_WritePin>
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40020800 	.word	0x40020800

080017cc <Motor4_Rotate_CW>:



 void Motor4_Rotate_CW(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor4_Port,IN7, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2120      	movs	r1, #32
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <Motor4_Rotate_CW+0x20>)
 80017d6:	f003 fc13 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port,IN8, GPIO_PIN_SET);
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <Motor4_Rotate_CW+0x20>)
 80017e2:	f003 fc0d 	bl	8005000 <HAL_GPIO_WritePin>
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40020400 	.word	0x40020400

080017f0 <Motor4_Rotate_CCW>:
 void Motor4_Rotate_CCW(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor4_Port,IN7, GPIO_PIN_SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	2120      	movs	r1, #32
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <Motor4_Rotate_CCW+0x20>)
 80017fa:	f003 fc01 	bl	8005000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port,IN8, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <Motor4_Rotate_CCW+0x20>)
 8001806:	f003 fbfb 	bl	8005000 <HAL_GPIO_WritePin>
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40020400 	.word	0x40020400

08001814 <GPS_voidInit>:
/*This is the object of our struct*/
GPS_Data_t GPS_Data;

/*Waits till the gps gets right information and its done*/
void GPS_voidInit(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	/*Ring Buffer initialization*/
	Ringbuf_init();
 8001818:	f001 fb4c 	bl	8002eb4 <Ringbuf_init>
	HAL_Delay(500);
 800181c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001820:	f003 f8aa 	bl	8004978 <HAL_Delay>

	/* LCD clear */
	LCD_voidClearDisplay();
 8001824:	f000 faa6 	bl	8001d74 <LCD_voidClearDisplay>

	/*Writing on LCD that the gps still warming up*/
	LCD_voidSetPositionXY(0,2);
 8001828:	2102      	movs	r1, #2
 800182a:	2000      	movs	r0, #0
 800182c:	f000 fa5c 	bl	8001ce8 <LCD_voidSetPositionXY>
	LCD_voidSendString("Waiting for GPS");
 8001830:	481d      	ldr	r0, [pc, #116]	; (80018a8 <GPS_voidInit+0x94>)
 8001832:	f000 fa3d 	bl	8001cb0 <LCD_voidSendString>

	/*waiting till the GGA data is valid*/
	while(flagGGA!=Valid_Data)
 8001836:	e017      	b.n	8001868 <GPS_voidInit+0x54>
	{
		if (Wait_for("GGA") == 1)
 8001838:	481c      	ldr	r0, [pc, #112]	; (80018ac <GPS_voidInit+0x98>)
 800183a:	f001 fc6b 	bl	8003114 <Wait_for>
 800183e:	4603      	mov	r3, r0
 8001840:	2b01      	cmp	r3, #1
 8001842:	d111      	bne.n	8001868 <GPS_voidInit+0x54>
		{
			Copy_upto("*", GGA);
 8001844:	491a      	ldr	r1, [pc, #104]	; (80018b0 <GPS_voidInit+0x9c>)
 8001846:	481b      	ldr	r0, [pc, #108]	; (80018b4 <GPS_voidInit+0xa0>)
 8001848:	f001 fbe4 	bl	8003014 <Copy_upto>
			if (decodeGGA(GGA, &GPS_NMEA_DATA.ggastruct) == 0) flagGGA = Valid_Data;  // 2 indicates the data is valid
 800184c:	491a      	ldr	r1, [pc, #104]	; (80018b8 <GPS_voidInit+0xa4>)
 800184e:	4818      	ldr	r0, [pc, #96]	; (80018b0 <GPS_voidInit+0x9c>)
 8001850:	f000 fc86 	bl	8002160 <decodeGGA>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d103      	bne.n	8001862 <GPS_voidInit+0x4e>
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <GPS_voidInit+0xa8>)
 800185c:	2202      	movs	r2, #2
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e002      	b.n	8001868 <GPS_voidInit+0x54>
			else flagGGA = unValid_Data;  // 1 indicates the data is invalid
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <GPS_voidInit+0xa8>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
	while(flagGGA!=Valid_Data)
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <GPS_voidInit+0xa8>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d1e3      	bne.n	8001838 <GPS_voidInit+0x24>
		}
	}

	/*Clearing the LCD and telling the user to start the project */
	LCD_voidClearDisplay();
 8001870:	f000 fa80 	bl	8001d74 <LCD_voidClearDisplay>
	LCD_voidSetPositionXY(0,4);
 8001874:	2104      	movs	r1, #4
 8001876:	2000      	movs	r0, #0
 8001878:	f000 fa36 	bl	8001ce8 <LCD_voidSetPositionXY>
	LCD_voidSendString("GPS is done");
 800187c:	4810      	ldr	r0, [pc, #64]	; (80018c0 <GPS_voidInit+0xac>)
 800187e:	f000 fa17 	bl	8001cb0 <LCD_voidSendString>
	LCD_voidSetPositionXY(1,4);
 8001882:	2104      	movs	r1, #4
 8001884:	2001      	movs	r0, #1
 8001886:	f000 fa2f 	bl	8001ce8 <LCD_voidSetPositionXY>
	LCD_voidSendString("good 2 go");
 800188a:	480e      	ldr	r0, [pc, #56]	; (80018c4 <GPS_voidInit+0xb0>)
 800188c:	f000 fa10 	bl	8001cb0 <LCD_voidSendString>

	/*Clearing the flag*/
	flagGGA=0;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <GPS_voidInit+0xa8>)
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 8001896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800189a:	f003 f86d 	bl	8004978 <HAL_Delay>

	/*Clearing the LCD*/
	LCD_voidClearDisplay();
 800189e:	f000 fa69 	bl	8001d74 <LCD_voidClearDisplay>

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	08012234 	.word	0x08012234
 80018ac:	08012244 	.word	0x08012244
 80018b0:	20000218 	.word	0x20000218
 80018b4:	08012248 	.word	0x08012248
 80018b8:	20000280 	.word	0x20000280
 80018bc:	200002e0 	.word	0x200002e0
 80018c0:	0801224c 	.word	0x0801224c
 80018c4:	08012258 	.word	0x08012258

080018c8 <GPS_uint8DecodeGGAData>:
/*Decode the message and puts the important information in the global variables
 * like: longitude, latitude, North/south , East/west*/

/*Returns 1 in success and 2 if the decoding process failed*/
uint8_t GPS_uint8DecodeGGAData()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
	uint8_t Local_uint8ErrorCode=0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	71fb      	strb	r3, [r7, #7]

	if (Wait_for("GGA") == 1)
 80018d2:	4829      	ldr	r0, [pc, #164]	; (8001978 <GPS_uint8DecodeGGAData+0xb0>)
 80018d4:	f001 fc1e 	bl	8003114 <Wait_for>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d111      	bne.n	8001902 <GPS_uint8DecodeGGAData+0x3a>
	{
		Copy_upto("*", GGA);
 80018de:	4927      	ldr	r1, [pc, #156]	; (800197c <GPS_uint8DecodeGGAData+0xb4>)
 80018e0:	4827      	ldr	r0, [pc, #156]	; (8001980 <GPS_uint8DecodeGGAData+0xb8>)
 80018e2:	f001 fb97 	bl	8003014 <Copy_upto>
		if (decodeGGA(GGA, &GPS_NMEA_DATA.ggastruct) == 0) flagGGA = Valid_Data;  // 2 indicates the data is valid
 80018e6:	4927      	ldr	r1, [pc, #156]	; (8001984 <GPS_uint8DecodeGGAData+0xbc>)
 80018e8:	4824      	ldr	r0, [pc, #144]	; (800197c <GPS_uint8DecodeGGAData+0xb4>)
 80018ea:	f000 fc39 	bl	8002160 <decodeGGA>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d103      	bne.n	80018fc <GPS_uint8DecodeGGAData+0x34>
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <GPS_uint8DecodeGGAData+0xc0>)
 80018f6:	2202      	movs	r2, #2
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	e002      	b.n	8001902 <GPS_uint8DecodeGGAData+0x3a>
		else flagGGA = unValid_Data;  // 1 indicates the data is invalid
 80018fc:	4b22      	ldr	r3, [pc, #136]	; (8001988 <GPS_uint8DecodeGGAData+0xc0>)
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
	}

	if(flagGGA==Valid_Data)
 8001902:	4b21      	ldr	r3, [pc, #132]	; (8001988 <GPS_uint8DecodeGGAData+0xc0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d12e      	bne.n	8001968 <GPS_uint8DecodeGGAData+0xa0>
	{
		Local_uint8ErrorCode=Decode_Success;
 800190a:	2301      	movs	r3, #1
 800190c:	71fb      	strb	r3, [r7, #7]
		GPS_Data.Latitude    =    GPS_doubleLongLat_Calculation(GPS_NMEA_DATA.ggastruct.lcation.latitude);
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <GPS_uint8DecodeGGAData+0xbc>)
 8001910:	ed93 7b00 	vldr	d7, [r3]
 8001914:	eeb0 0a47 	vmov.f32	s0, s14
 8001918:	eef0 0a67 	vmov.f32	s1, s15
 800191c:	f000 f838 	bl	8001990 <GPS_doubleLongLat_Calculation>
 8001920:	ec53 2b10 	vmov	r2, r3, d0
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f9ce 	bl	8000cc8 <__aeabi_d2f>
 800192c:	4603      	mov	r3, r0
 800192e:	4a17      	ldr	r2, [pc, #92]	; (800198c <GPS_uint8DecodeGGAData+0xc4>)
 8001930:	6013      	str	r3, [r2, #0]
		GPS_Data.Longitude   =    GPS_doubleLongLat_Calculation(GPS_NMEA_DATA.ggastruct.lcation.longitude);
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <GPS_uint8DecodeGGAData+0xbc>)
 8001934:	ed93 7b04 	vldr	d7, [r3, #16]
 8001938:	eeb0 0a47 	vmov.f32	s0, s14
 800193c:	eef0 0a67 	vmov.f32	s1, s15
 8001940:	f000 f826 	bl	8001990 <GPS_doubleLongLat_Calculation>
 8001944:	ec53 2b10 	vmov	r2, r3, d0
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f9bc 	bl	8000cc8 <__aeabi_d2f>
 8001950:	4603      	mov	r3, r0
 8001952:	4a0e      	ldr	r2, [pc, #56]	; (800198c <GPS_uint8DecodeGGAData+0xc4>)
 8001954:	6053      	str	r3, [r2, #4]

		GPS_Data.East_West = GPS_NMEA_DATA.ggastruct.lcation.EW;
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <GPS_uint8DecodeGGAData+0xbc>)
 8001958:	7e1a      	ldrb	r2, [r3, #24]
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <GPS_uint8DecodeGGAData+0xc4>)
 800195c:	721a      	strb	r2, [r3, #8]
		GPS_Data.North_South = GPS_NMEA_DATA.ggastruct.lcation.NS;
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <GPS_uint8DecodeGGAData+0xbc>)
 8001960:	7a1a      	ldrb	r2, [r3, #8]
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <GPS_uint8DecodeGGAData+0xc4>)
 8001964:	725a      	strb	r2, [r3, #9]
 8001966:	e001      	b.n	800196c <GPS_uint8DecodeGGAData+0xa4>
	}
	else
	{
		Local_uint8ErrorCode=Decode_Failed;
 8001968:	2302      	movs	r3, #2
 800196a:	71fb      	strb	r3, [r7, #7]
	}


	return Local_uint8ErrorCode;
 800196c:	79fb      	ldrb	r3, [r7, #7]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	08012244 	.word	0x08012244
 800197c:	20000218 	.word	0x20000218
 8001980:	08012248 	.word	0x08012248
 8001984:	20000280 	.word	0x20000280
 8001988:	200002e0 	.word	0x200002e0
 800198c:	200002e4 	.word	0x200002e4

08001990 <GPS_doubleLongLat_Calculation>:


}

double GPS_doubleLongLat_Calculation(double lat)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	ed87 0b00 	vstr	d0, [r7]
	uint8_t intValue ;
	double fraction;
	intValue = lat; //intValue = 31 instead of 31.39049
 800199a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800199e:	f7ff f973 	bl	8000c88 <__aeabi_d2uiz>
 80019a2:	4603      	mov	r3, r0
 80019a4:	75fb      	strb	r3, [r7, #23]
	fraction = lat - intValue; // fraction = 0.39049
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fe2b 	bl	8000604 <__aeabi_i2d>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019b6:	f7fe fcd7 	bl	8000368 <__aeabi_dsub>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	e9c7 2302 	strd	r2, r3, [r7, #8]
	fraction = (double) ((fraction * 100.0) / 60.0) ; //fraction = (39.049)/60 = 0.6532
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <GPS_doubleLongLat_Calculation+0x80>)
 80019c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019cc:	f7fe fe84 	bl	80006d8 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <GPS_doubleLongLat_Calculation+0x84>)
 80019de:	f7fe ffa5 	bl	800092c <__aeabi_ddiv>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return (double) (intValue + fraction); // return value = 31 + 0.6532 = 31.6532
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fe09 	bl	8000604 <__aeabi_i2d>
 80019f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019f6:	f7fe fcb9 	bl	800036c <__adddf3>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a02:	eeb0 0a47 	vmov.f32	s0, s14
 8001a06:	eef0 0a67 	vmov.f32	s1, s15
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40590000 	.word	0x40590000
 8001a14:	404e0000 	.word	0x404e0000

08001a18 <LCD_AvoidHardBraking>:

}


void LCD_AvoidHardBraking(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	/* Printing the warning sign */
	LCD_Print_WarningSign();
 8001a1c:	f000 f814 	bl	8001a48 <LCD_Print_WarningSign>

	/* Printing the warning message to the driver */
	LCD_voidSetPositionXY(1,0);
 8001a20:	2100      	movs	r1, #0
 8001a22:	2001      	movs	r0, #1
 8001a24:	f000 f960 	bl	8001ce8 <LCD_voidSetPositionXY>
	LCD_voidSendString("Hit Brakes");
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <LCD_AvoidHardBraking+0x28>)
 8001a2a:	f000 f941 	bl	8001cb0 <LCD_voidSendString>

	LCD_voidSetPositionXY(2,3);
 8001a2e:	2103      	movs	r1, #3
 8001a30:	2002      	movs	r0, #2
 8001a32:	f000 f959 	bl	8001ce8 <LCD_voidSetPositionXY>
	LCD_voidSendString("ASAP!!!");
 8001a36:	4803      	ldr	r0, [pc, #12]	; (8001a44 <LCD_AvoidHardBraking+0x2c>)
 8001a38:	f000 f93a 	bl	8001cb0 <LCD_voidSendString>

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	0801229c 	.word	0x0801229c
 8001a44:	080122a8 	.word	0x080122a8

08001a48 <LCD_Print_WarningSign>:
	LCD_voidSendString("Slow Down");


}
static void LCD_Print_WarningSign(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b094      	sub	sp, #80	; 0x50
 8001a4c:	af00      	add	r7, sp, #0
	/* Saving the elements of each block of the LCD in multiple arrays to be sent to the special character function */

	uint8_t LCD_R1_C16_Array[8] =
 8001a4e:	4a40      	ldr	r2, [pc, #256]	; (8001b50 <LCD_Print_WarningSign+0x108>)
 8001a50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a58:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001110,
			0b00001110,
			0b00001110
	};

	uint8_t LCD_R1_C17_Array[8] =
 8001a5c:	4a3d      	ldr	r2, [pc, #244]	; (8001b54 <LCD_Print_WarningSign+0x10c>)
 8001a5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a66:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00000100,
			0b00000010,
			0b00000001
	};
	uint8_t LCD_R1_C15_Array[8] =
 8001a6a:	4a3b      	ldr	r2, [pc, #236]	; (8001b58 <LCD_Print_WarningSign+0x110>)
 8001a6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a74:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000100,
			0b00001000,
			0b00010000
	};

	uint8_t LCD_R2_C14_Array[8] =
 8001a78:	4a38      	ldr	r2, [pc, #224]	; (8001b5c <LCD_Print_WarningSign+0x114>)
 8001a7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a82:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	uint8_t LCD_R2_C18_Array[8] =
 8001a86:	4a36      	ldr	r2, [pc, #216]	; (8001b60 <LCD_Print_WarningSign+0x118>)
 8001a88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a90:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C13_Array[8] =
 8001a94:	4a33      	ldr	r2, [pc, #204]	; (8001b64 <LCD_Print_WarningSign+0x11c>)
 8001a96:	f107 0320 	add.w	r3, r7, #32
 8001a9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a9e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000001,
			0b00000010,
			0b00000100,
			0b00011111
	};
	uint8_t LCD_R2_C19_Array[8] =
 8001aa2:	4a31      	ldr	r2, [pc, #196]	; (8001b68 <LCD_Print_WarningSign+0x120>)
 8001aa4:	f107 0318 	add.w	r3, r7, #24
 8001aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aac:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00000100,
			0b00000010,
			0b00011111
	};
	uint8_t LCD_R2_C15_Array[8] =
 8001ab0:	4a2e      	ldr	r2, [pc, #184]	; (8001b6c <LCD_Print_WarningSign+0x124>)
 8001ab2:	f107 0310 	add.w	r3, r7, #16
 8001ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aba:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C17_Array[8] =
 8001abe:	4a2b      	ldr	r2, [pc, #172]	; (8001b6c <LCD_Print_WarningSign+0x124>)
 8001ac0:	f107 0308 	add.w	r3, r7, #8
 8001ac4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ac8:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C16_Array[8] =
 8001acc:	4a28      	ldr	r2, [pc, #160]	; (8001b70 <LCD_Print_WarningSign+0x128>)
 8001ace:	463b      	mov	r3, r7
 8001ad0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad4:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00011111
	};


	LCD_voidDrawSpecialCharachter(&LCD_R1_C15_Array, 0, 1, 15);
 8001ad8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001adc:	230f      	movs	r3, #15
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	f000 f94e 	bl	8001d82 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C16_Array, 1, 1, 16);
 8001ae6:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001aea:	2310      	movs	r3, #16
 8001aec:	2201      	movs	r2, #1
 8001aee:	2101      	movs	r1, #1
 8001af0:	f000 f947 	bl	8001d82 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C17_Array, 2, 1, 17);
 8001af4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001af8:	2311      	movs	r3, #17
 8001afa:	2201      	movs	r2, #1
 8001afc:	2102      	movs	r1, #2
 8001afe:	f000 f940 	bl	8001d82 <LCD_voidDrawSpecialCharachter>

	LCD_voidDrawSpecialCharachter(&LCD_R2_C14_Array, 3, 2, 14);
 8001b02:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001b06:	230e      	movs	r3, #14
 8001b08:	2202      	movs	r2, #2
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	f000 f939 	bl	8001d82 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C15_Array, 4, 2, 15);
 8001b10:	f107 0010 	add.w	r0, r7, #16
 8001b14:	230f      	movs	r3, #15
 8001b16:	2202      	movs	r2, #2
 8001b18:	2104      	movs	r1, #4
 8001b1a:	f000 f932 	bl	8001d82 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C16_Array, 5, 2, 16);
 8001b1e:	4638      	mov	r0, r7
 8001b20:	2310      	movs	r3, #16
 8001b22:	2202      	movs	r2, #2
 8001b24:	2105      	movs	r1, #5
 8001b26:	f000 f92c 	bl	8001d82 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C17_Array, 6, 2, 17);
 8001b2a:	f107 0008 	add.w	r0, r7, #8
 8001b2e:	2311      	movs	r3, #17
 8001b30:	2202      	movs	r2, #2
 8001b32:	2106      	movs	r1, #6
 8001b34:	f000 f925 	bl	8001d82 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C18_Array, 7, 2, 18);
 8001b38:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001b3c:	2312      	movs	r3, #18
 8001b3e:	2202      	movs	r2, #2
 8001b40:	2107      	movs	r1, #7
 8001b42:	f000 f91e 	bl	8001d82 <LCD_voidDrawSpecialCharachter>




}
 8001b46:	bf00      	nop
 8001b48:	3750      	adds	r7, #80	; 0x50
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	080122d0 	.word	0x080122d0
 8001b54:	080122d8 	.word	0x080122d8
 8001b58:	080122e0 	.word	0x080122e0
 8001b5c:	080122e8 	.word	0x080122e8
 8001b60:	080122f0 	.word	0x080122f0
 8001b64:	080122f8 	.word	0x080122f8
 8001b68:	08012300 	.word	0x08012300
 8001b6c:	08012308 	.word	0x08012308
 8001b70:	08012310 	.word	0x08012310

08001b74 <LCD_Normal_Alert>:

void LCD_Normal_Alert(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	/*Printing the warning message to the driver*/
	LCD_voidSetPositionXY(1,0);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f000 f8b4 	bl	8001ce8 <LCD_voidSetPositionXY>
	LCD_voidSendString("Watch Ahead");
 8001b80:	4803      	ldr	r0, [pc, #12]	; (8001b90 <LCD_Normal_Alert+0x1c>)
 8001b82:	f000 f895 	bl	8001cb0 <LCD_voidSendString>

	/*Printing the warning sign*/
	LCD_Print_WarningSign();
 8001b86:	f7ff ff5f 	bl	8001a48 <LCD_Print_WarningSign>



}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	08012318 	.word	0x08012318

08001b94 <LCD_voidInit>:
#define LCD_SLAVE_ADDRESS 0b01001110

extern I2C_HandleTypeDef hi2c1;

void LCD_voidInit(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	/*Setting 4 bits interface(Twice as the datasheet specefies)*/
	LCD_voidSendCommand(0b00110011);
 8001b98:	2033      	movs	r0, #51	; 0x33
 8001b9a:	f000 f829 	bl	8001bf0 <LCD_voidSendCommand>
	LCD_voidSendCommand(0b00110010);
 8001b9e:	2032      	movs	r0, #50	; 0x32
 8001ba0:	f000 f826 	bl	8001bf0 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001ba4:	2032      	movs	r0, #50	; 0x32
 8001ba6:	f002 fee7 	bl	8004978 <HAL_Delay>
	/*Setting the LCD Function*/
	LCD_voidSendCommand(0b00101000);
 8001baa:	2028      	movs	r0, #40	; 0x28
 8001bac:	f000 f820 	bl	8001bf0 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001bb0:	2032      	movs	r0, #50	; 0x32
 8001bb2:	f002 fee1 	bl	8004978 <HAL_Delay>
	/*Clearing the display*/
	LCD_voidSendCommand(0b00000001);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f000 f81a 	bl	8001bf0 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001bbc:	2032      	movs	r0, #50	; 0x32
 8001bbe:	f002 fedb 	bl	8004978 <HAL_Delay>
	/*Set the entry mode*/
	LCD_voidSendCommand(0b00000110);
 8001bc2:	2006      	movs	r0, #6
 8001bc4:	f000 f814 	bl	8001bf0 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001bc8:	2032      	movs	r0, #50	; 0x32
 8001bca:	f002 fed5 	bl	8004978 <HAL_Delay>
	/*Set the display to on*/
	LCD_voidSendCommand(0b00001100);
 8001bce:	200c      	movs	r0, #12
 8001bd0:	f000 f80e 	bl	8001bf0 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001bd4:	2032      	movs	r0, #50	; 0x32
 8001bd6:	f002 fecf 	bl	8004978 <HAL_Delay>
	/*Set the cursor to home */
	LCD_voidSendCommand(0b00000010);
 8001bda:	2002      	movs	r0, #2
 8001bdc:	f000 f808 	bl	8001bf0 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001be0:	2032      	movs	r0, #50	; 0x32
 8001be2:	f002 fec9 	bl	8004978 <HAL_Delay>
	/*and the Data address to 0*/
	LCD_voidSendCommand(0b10000000);
 8001be6:	2080      	movs	r0, #128	; 0x80
 8001be8:	f000 f802 	bl	8001bf0 <LCD_voidSendCommand>

}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8_t Copy_uint8Command)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
 *
 *
 * 0b00000001 --> DataU --> 0b000000000-->0b00000001100
 *
 * */
	Local_uint8Local_uint8DataU=(Copy_uint8Command&0b11110000);
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f023 030f 	bic.w	r3, r3, #15
 8001c00:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Command<<4)&0b11110000);
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001100; //EN=1 RS=0
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	f043 030c 	orr.w	r3, r3, #12
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001000; //EN=0 RS=0
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	f043 0308 	orr.w	r3, r3, #8
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001100; //EN=1 RS=0
 8001c1c:	7bbb      	ldrb	r3, [r7, #14]
 8001c1e:	f043 030c 	orr.w	r3, r3, #12
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001000; //EN=0 RS=0
 8001c26:	7bbb      	ldrb	r3, [r7, #14]
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001c30:	f107 0208 	add.w	r2, r7, #8
 8001c34:	2364      	movs	r3, #100	; 0x64
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2304      	movs	r3, #4
 8001c3a:	214e      	movs	r1, #78	; 0x4e
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <LCD_voidSendCommand+0x5c>)
 8001c3e:	f003 fb3d 	bl	80052bc <HAL_I2C_Master_Transmit>
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000744 	.word	0x20000744

08001c50 <LCD_voidSendCharachter>:

void LCD_voidSendCharachter(uint8_t Copy_uint8Charachter)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_uint8Local_uint8DataU,Local_uint8Local_uint8DataL;
	uint8_t Local_uint8Local_uint8DataT[4];
	Local_uint8Local_uint8DataU=(Copy_uint8Charachter&0b11110000);
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f023 030f 	bic.w	r3, r3, #15
 8001c60:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Charachter<<4)&0b11110000);
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001101; //EN=1 RS=0
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	f043 030d 	orr.w	r3, r3, #13
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001001; //EN=0 RS=0
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	f043 0309 	orr.w	r3, r3, #9
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001101; //EN=1 RS=0
 8001c7c:	7bbb      	ldrb	r3, [r7, #14]
 8001c7e:	f043 030d 	orr.w	r3, r3, #13
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001001; //EN=0 RS=0
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
 8001c88:	f043 0309 	orr.w	r3, r3, #9
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001c90:	f107 0208 	add.w	r2, r7, #8
 8001c94:	2364      	movs	r3, #100	; 0x64
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2304      	movs	r3, #4
 8001c9a:	214e      	movs	r1, #78	; 0x4e
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <LCD_voidSendCharachter+0x5c>)
 8001c9e:	f003 fb0d 	bl	80052bc <HAL_I2C_Master_Transmit>

}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000744 	.word	0x20000744

08001cb0 <LCD_voidSendString>:

void LCD_voidSendString (uint8_t *Copy_pu8StringOfCharachters)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8Counter=0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 8001cbc:	e009      	b.n	8001cd2 <LCD_voidSendString+0x22>
	{
		LCD_voidSendCharachter(Copy_pu8StringOfCharachters[Local_uint8Counter]);
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ffc2 	bl	8001c50 <LCD_voidSendCharachter>
		Local_uint8Counter++;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ef      	bne.n	8001cbe <LCD_voidSendString+0xe>
	}


}
 8001cde:	bf00      	nop
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <LCD_voidSetPositionXY>:
void LCD_voidSetPositionXY(uint8_t Copy_uint8Row,uint8_t Copy_uint8Column)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	71bb      	strb	r3, [r7, #6]
	//1,add,add,add,add,add,add,add,0,0
	uint8_t Local_uint8PositionAddress = 0b10000000;
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	73fb      	strb	r3, [r7, #15]
	switch(Copy_uint8Row){
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d82d      	bhi.n	8001d5e <LCD_voidSetPositionXY+0x76>
 8001d02:	a201      	add	r2, pc, #4	; (adr r2, 8001d08 <LCD_voidSetPositionXY+0x20>)
 8001d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d08:	08001d19 	.word	0x08001d19
 8001d0c:	08001d23 	.word	0x08001d23
 8001d10:	08001d37 	.word	0x08001d37
 8001d14:	08001d4b 	.word	0x08001d4b
	case 0:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 0);
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	79bb      	ldrb	r3, [r7, #6]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	73fb      	strb	r3, [r7, #15]
		break;
 8001d20:	e01d      	b.n	8001d5e <LCD_voidSetPositionXY+0x76>
	case 1:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 64);
 8001d22:	79bb      	ldrb	r3, [r7, #6]
 8001d24:	3340      	adds	r3, #64	; 0x40
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	b25a      	sxtb	r2, r3
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	b25b      	sxtb	r3, r3
 8001d32:	73fb      	strb	r3, [r7, #15]
		break;
 8001d34:	e013      	b.n	8001d5e <LCD_voidSetPositionXY+0x76>
	case 2:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 20);
 8001d36:	79bb      	ldrb	r3, [r7, #6]
 8001d38:	3314      	adds	r3, #20
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	b25a      	sxtb	r2, r3
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	73fb      	strb	r3, [r7, #15]
		break;
 8001d48:	e009      	b.n	8001d5e <LCD_voidSetPositionXY+0x76>
	case 3:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 84);
 8001d4a:	79bb      	ldrb	r3, [r7, #6]
 8001d4c:	3354      	adds	r3, #84	; 0x54
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	b25a      	sxtb	r2, r3
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b25b      	sxtb	r3, r3
 8001d5a:	73fb      	strb	r3, [r7, #15]
		break;
 8001d5c:	bf00      	nop
	}
		LCD_voidSendCommand(Local_uint8PositionAddress);
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff45 	bl	8001bf0 <LCD_voidSendCommand>
		HAL_Delay(1);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f002 fe06 	bl	8004978 <HAL_Delay>

}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	/*Clearing the display by command 0b00000001*/
	LCD_voidSendCommand(0b00000001);
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f7ff ff39 	bl	8001bf0 <LCD_voidSendCommand>
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <LCD_voidDrawSpecialCharachter>:
		}
	}
}

void LCD_voidDrawSpecialCharachter(uint8_t*Copy_puint8Pattern,uint8_t Copy_uint8LocationNum,uint8_t Copy_uint8RowNum,uint8_t Copy_uint8ColNum)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	4608      	mov	r0, r1
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4603      	mov	r3, r0
 8001d92:	70fb      	strb	r3, [r7, #3]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70bb      	strb	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	707b      	strb	r3, [r7, #1]
	/*Accessing the CGRAM address*/
	uint8_t Local_uint8CGRAMAddress,Local_uint8Counter;
	Local_uint8CGRAMAddress=Copy_uint8LocationNum*8;
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	73bb      	strb	r3, [r7, #14]
	/*Accessing CGRAM of lcd by command 0b01xxxxxx*/
	LCD_voidSendCommand(Local_uint8CGRAMAddress+64);
 8001da2:	7bbb      	ldrb	r3, [r7, #14]
 8001da4:	3340      	adds	r3, #64	; 0x40
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff21 	bl	8001bf0 <LCD_voidSendCommand>
	/*Write the pattern on CGRAM*/
	/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes
	 * in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	e009      	b.n	8001dc8 <LCD_voidDrawSpecialCharachter+0x46>
	{
		LCD_voidSendCharachter(Copy_puint8Pattern[Local_uint8Counter]);
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff47 	bl	8001c50 <LCD_voidSendCharachter>
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b07      	cmp	r3, #7
 8001dcc:	d9f2      	bls.n	8001db4 <LCD_voidDrawSpecialCharachter+0x32>
	}
	/*Keda e7na 7atena al pattern fe location mo3yn fel CGRAM, fa na2esna bas neb3at al pattern lel DDRAM 34an n7oto fel LCD */
	/*kona fo2 3malna command 34an ne access al CGRAM 34an ne access al DDRAM lazem command tany
	 * wel set position feha asln al command dah*/
	LCD_voidSetPositionXY(Copy_uint8RowNum,Copy_uint8ColNum);
 8001dce:	787a      	ldrb	r2, [r7, #1]
 8001dd0:	78bb      	ldrb	r3, [r7, #2]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff87 	bl	8001ce8 <LCD_voidSetPositionXY>
	LCD_voidSendCharachter(Copy_uint8LocationNum);
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff37 	bl	8001c50 <LCD_voidSendCharachter>
}
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <LightSensor_voidInit>:
static void TSL2561_GetChannelsReadings(uint16_t* Copy_uint16Data0Val, uint16_t* Copy_uint16Data1Val);
static void TSL2561_WriteByte(uint8_t Copy_uint8RegisterAddress, uint8_t Copy_uint8RegisterValue);
static void TSL2561_ReadByte(uint8_t Copy_uint8RegisterAddress, uint8_t *Copy_puinit8RecivingVariable);

void LightSensor_voidInit(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	af00      	add	r7, sp, #0

	/*Powering up the module*/

	/*1-first element is the command -> Address of control register
	 * 2-Second element is the 0b00000011 which power up the module */
	TSL2561_WriteByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_CONTROL),0b00000011);
 8001dee:	2103      	movs	r1, #3
 8001df0:	2080      	movs	r0, #128	; 0x80
 8001df2:	f000 f97f 	bl	80020f4 <TSL2561_WriteByte>

	/*1- first element is the command -> Address of timing register
	 *2- Second element is the 0b00010010 which makes the gain = 1 and the integration time
	 *2- =402ms which is the default value*/

	TSL2561_WriteByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_TIMING),0b00000010);
 8001df6:	2102      	movs	r1, #2
 8001df8:	2081      	movs	r0, #129	; 0x81
 8001dfa:	f000 f97b 	bl	80020f4 <TSL2561_WriteByte>


}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	0000      	movs	r0, r0
 8001e04:	0000      	movs	r0, r0
	...

08001e08 <LightSensor_uint8ReadIntensity>:

void LightSensor_uint8ReadIntensity(uint16_t *Copy_puint16LuxValue)
{
 8001e08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
	//Variables for storing Data registers
	uint16_t Local_uint16Channel0Val, Local_uint16Channel1Val,flux_integar=0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	827b      	strh	r3, [r7, #18]
	float flux=0;
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

	//Get the values from the data registers
	TSL2561_GetChannelsReadings(&Local_uint16Channel0Val, &Local_uint16Channel1Val);
 8001e1c:	f107 0208 	add.w	r2, r7, #8
 8001e20:	f107 030a 	add.w	r3, r7, #10
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f92e 	bl	8002088 <TSL2561_GetChannelsReadings>
	/*Calculating the lux for T, FN, and CL Package of the sensor*/

	//Calculate the ratio of the PhotoDiodes
	float Ratio = ((float)Local_uint16Channel1Val) / ((float)Local_uint16Channel0Val);
 8001e2c:	893b      	ldrh	r3, [r7, #8]
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e36:	897b      	ldrh	r3, [r7, #10]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e44:	edc7 7a03 	vstr	s15, [r7, #12]

	//Calculating Lux
	//Ratio between 0 and 0.50

	if(Ratio <= 0.50)
 8001e48:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e58:	d839      	bhi.n	8001ece <LightSensor_uint8ReadIntensity+0xc6>
	{
		flux= (0.0304 * Local_uint16Channel0Val) - (0.062* Local_uint16Channel0Val * pow(Ratio, 1.4));
 8001e5a:	897b      	ldrh	r3, [r7, #10]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fbd1 	bl	8000604 <__aeabi_i2d>
 8001e62:	a373      	add	r3, pc, #460	; (adr r3, 8002030 <LightSensor_uint8ReadIntensity+0x228>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	f7fe fc36 	bl	80006d8 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4614      	mov	r4, r2
 8001e72:	461d      	mov	r5, r3
 8001e74:	897b      	ldrh	r3, [r7, #10]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fbc4 	bl	8000604 <__aeabi_i2d>
 8001e7c:	a36e      	add	r3, pc, #440	; (adr r3, 8002038 <LightSensor_uint8ReadIntensity+0x230>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	f7fe fc29 	bl	80006d8 <__aeabi_dmul>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4690      	mov	r8, r2
 8001e8c:	4699      	mov	r9, r3
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f7fe fbca 	bl	8000628 <__aeabi_f2d>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8002028 <LightSensor_uint8ReadIntensity+0x220>
 8001e9c:	ec43 2b10 	vmov	d0, r2, r3
 8001ea0:	f00f fa26 	bl	80112f0 <pow>
 8001ea4:	ec53 2b10 	vmov	r2, r3, d0
 8001ea8:	4640      	mov	r0, r8
 8001eaa:	4649      	mov	r1, r9
 8001eac:	f7fe fc14 	bl	80006d8 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	f7fe fa56 	bl	8000368 <__aeabi_dsub>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7fe ff00 	bl	8000cc8 <__aeabi_d2f>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	e092      	b.n	8001ff4 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the ratio is between 0.51 and 0.61
	else if(Ratio <= 0.61)
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7fe fbaa 	bl	8000628 <__aeabi_f2d>
 8001ed4:	a35a      	add	r3, pc, #360	; (adr r3, 8002040 <LightSensor_uint8ReadIntensity+0x238>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	f7fe fe79 	bl	8000bd0 <__aeabi_dcmple>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d024      	beq.n	8001f2e <LightSensor_uint8ReadIntensity+0x126>
	{
		flux = (0.0224 * Local_uint16Channel0Val) - (0.031 * Local_uint16Channel1Val);
 8001ee4:	897b      	ldrh	r3, [r7, #10]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fb8c 	bl	8000604 <__aeabi_i2d>
 8001eec:	a356      	add	r3, pc, #344	; (adr r3, 8002048 <LightSensor_uint8ReadIntensity+0x240>)
 8001eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef2:	f7fe fbf1 	bl	80006d8 <__aeabi_dmul>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4614      	mov	r4, r2
 8001efc:	461d      	mov	r5, r3
 8001efe:	893b      	ldrh	r3, [r7, #8]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb7f 	bl	8000604 <__aeabi_i2d>
 8001f06:	a352      	add	r3, pc, #328	; (adr r3, 8002050 <LightSensor_uint8ReadIntensity+0x248>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fbe4 	bl	80006d8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fa26 	bl	8000368 <__aeabi_dsub>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fed0 	bl	8000cc8 <__aeabi_d2f>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e062      	b.n	8001ff4 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the Ratio is between 0.62 and 0.81
	else if(Ratio <= 0.80)
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7fe fb7a 	bl	8000628 <__aeabi_f2d>
 8001f34:	a348      	add	r3, pc, #288	; (adr r3, 8002058 <LightSensor_uint8ReadIntensity+0x250>)
 8001f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3a:	f7fe fe49 	bl	8000bd0 <__aeabi_dcmple>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d024      	beq.n	8001f8e <LightSensor_uint8ReadIntensity+0x186>
	{
		flux = (0.0128 * Local_uint16Channel0Val) - (0.0153 * Local_uint16Channel1Val);
 8001f44:	897b      	ldrh	r3, [r7, #10]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fb5c 	bl	8000604 <__aeabi_i2d>
 8001f4c:	a344      	add	r3, pc, #272	; (adr r3, 8002060 <LightSensor_uint8ReadIntensity+0x258>)
 8001f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f52:	f7fe fbc1 	bl	80006d8 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4614      	mov	r4, r2
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	893b      	ldrh	r3, [r7, #8]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fb4f 	bl	8000604 <__aeabi_i2d>
 8001f66:	a340      	add	r3, pc, #256	; (adr r3, 8002068 <LightSensor_uint8ReadIntensity+0x260>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fbb4 	bl	80006d8 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4620      	mov	r0, r4
 8001f76:	4629      	mov	r1, r5
 8001f78:	f7fe f9f6 	bl	8000368 <__aeabi_dsub>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7fe fea0 	bl	8000cc8 <__aeabi_d2f>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	e032      	b.n	8001ff4 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the Ratio is between 0.82 and 1.39
	else if(Ratio <= 1.30)
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f7fe fb4a 	bl	8000628 <__aeabi_f2d>
 8001f94:	a336      	add	r3, pc, #216	; (adr r3, 8002070 <LightSensor_uint8ReadIntensity+0x268>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe fe19 	bl	8000bd0 <__aeabi_dcmple>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d024      	beq.n	8001fee <LightSensor_uint8ReadIntensity+0x1e6>
	{
		flux = (0.00146 * Local_uint16Channel0Val) - (0.00112 * Local_uint16Channel1Val);
 8001fa4:	897b      	ldrh	r3, [r7, #10]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fb2c 	bl	8000604 <__aeabi_i2d>
 8001fac:	a332      	add	r3, pc, #200	; (adr r3, 8002078 <LightSensor_uint8ReadIntensity+0x270>)
 8001fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb2:	f7fe fb91 	bl	80006d8 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4614      	mov	r4, r2
 8001fbc:	461d      	mov	r5, r3
 8001fbe:	893b      	ldrh	r3, [r7, #8]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fb1f 	bl	8000604 <__aeabi_i2d>
 8001fc6:	a32e      	add	r3, pc, #184	; (adr r3, 8002080 <LightSensor_uint8ReadIntensity+0x278>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe fb84 	bl	80006d8 <__aeabi_dmul>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	f7fe f9c6 	bl	8000368 <__aeabi_dsub>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f7fe fe70 	bl	8000cc8 <__aeabi_d2f>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	e002      	b.n	8001ff4 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the Ratio is bigger than 1.30
	else
	{
		flux = 0;
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
	}

	flux_integar=round(flux);
 8001ff4:	6978      	ldr	r0, [r7, #20]
 8001ff6:	f7fe fb17 	bl	8000628 <__aeabi_f2d>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	ec43 2b10 	vmov	d0, r2, r3
 8002002:	f00f facb 	bl	801159c <round>
 8002006:	ec53 2b10 	vmov	r2, r3, d0
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	f7fe fe3b 	bl	8000c88 <__aeabi_d2uiz>
 8002012:	4603      	mov	r3, r0
 8002014:	827b      	strh	r3, [r7, #18]

	/*Update the user variable*/
	*Copy_puint16LuxValue=flux_integar;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	8a7a      	ldrh	r2, [r7, #18]
 800201a:	801a      	strh	r2, [r3, #0]
	{
      TSL2561_Reset();
	}
	 */

}
 800201c:	bf00      	nop
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002026:	bf00      	nop
 8002028:	66666666 	.word	0x66666666
 800202c:	3ff66666 	.word	0x3ff66666
 8002030:	77318fc5 	.word	0x77318fc5
 8002034:	3f9f212d 	.word	0x3f9f212d
 8002038:	c8b43958 	.word	0xc8b43958
 800203c:	3fafbe76 	.word	0x3fafbe76
 8002040:	b851eb85 	.word	0xb851eb85
 8002044:	3fe3851e 	.word	0x3fe3851e
 8002048:	8db8bac7 	.word	0x8db8bac7
 800204c:	3f96f006 	.word	0x3f96f006
 8002050:	c8b43958 	.word	0xc8b43958
 8002054:	3f9fbe76 	.word	0x3f9fbe76
 8002058:	9999999a 	.word	0x9999999a
 800205c:	3fe99999 	.word	0x3fe99999
 8002060:	eb1c432d 	.word	0xeb1c432d
 8002064:	3f8a36e2 	.word	0x3f8a36e2
 8002068:	3d07c84b 	.word	0x3d07c84b
 800206c:	3f8f559b 	.word	0x3f8f559b
 8002070:	cccccccd 	.word	0xcccccccd
 8002074:	3ff4cccc 	.word	0x3ff4cccc
 8002078:	102363b2 	.word	0x102363b2
 800207c:	3f57ebaf 	.word	0x3f57ebaf
 8002080:	d7c6fbd2 	.word	0xd7c6fbd2
 8002084:	3f52599e 	.word	0x3f52599e

08002088 <TSL2561_GetChannelsReadings>:
	TSL2561_WriteByte((TSL2561_COMMAND_NORMAL | TSL2561_REG_INTERRUPT), 0b00000000);

}

static void TSL2561_GetChannelsReadings(uint16_t* Copy_uint16Data0Val, uint16_t* Copy_uint16Data1Val)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
	//Variables for storing received data
	uint8_t data0Low, data0High, data1Low, data1High;

	//Read Data0 registers
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA0LOW),	&data0Low);
 8002092:	f107 030f 	add.w	r3, r7, #15
 8002096:	4619      	mov	r1, r3
 8002098:	208c      	movs	r0, #140	; 0x8c
 800209a:	f000 f847 	bl	800212c <TSL2561_ReadByte>
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA0HIGH), &data0High);
 800209e:	f107 030e 	add.w	r3, r7, #14
 80020a2:	4619      	mov	r1, r3
 80020a4:	208d      	movs	r0, #141	; 0x8d
 80020a6:	f000 f841 	bl	800212c <TSL2561_ReadByte>

	//Read Data1 registers
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA1LOW),	&data1Low);
 80020aa:	f107 030d 	add.w	r3, r7, #13
 80020ae:	4619      	mov	r1, r3
 80020b0:	208e      	movs	r0, #142	; 0x8e
 80020b2:	f000 f83b 	bl	800212c <TSL2561_ReadByte>
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA1HIGH), &data1High);
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	4619      	mov	r1, r3
 80020bc:	208f      	movs	r0, #143	; 0x8f
 80020be:	f000 f835 	bl	800212c <TSL2561_ReadByte>

	//Combine Data register values into single 16 bit variable
	*Copy_uint16Data0Val = data0High * 256 + data0Low;
 80020c2:	7bbb      	ldrb	r3, [r7, #14]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	801a      	strh	r2, [r3, #0]
	*Copy_uint16Data1Val = data1High * 256 + data1Low;
 80020d6:	7b3b      	ldrb	r3, [r7, #12]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	b29a      	uxth	r2, r3
 80020de:	7b7b      	ldrb	r3, [r7, #13]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	801a      	strh	r2, [r3, #0]

}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <TSL2561_WriteByte>:
	LightSensor_voidInit();

}

static void TSL2561_WriteByte(uint8_t Copy_uint8RegisterAddress, uint8_t Copy_uint8RegisterValue)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af04      	add	r7, sp, #16
 80020fa:	4603      	mov	r3, r0
 80020fc:	460a      	mov	r2, r1
 80020fe:	71fb      	strb	r3, [r7, #7]
 8002100:	4613      	mov	r3, r2
 8002102:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(LightSensor_I2CChannel, LightSensor_SLAVE_ADDRESS,Copy_uint8RegisterAddress, 1, &Copy_uint8RegisterValue,1,TSL2561_Max_Delay);
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	b29a      	uxth	r2, r3
 8002108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210c:	9302      	str	r3, [sp, #8]
 800210e:	2301      	movs	r3, #1
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	1dbb      	adds	r3, r7, #6
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2301      	movs	r3, #1
 8002118:	2172      	movs	r1, #114	; 0x72
 800211a:	4803      	ldr	r0, [pc, #12]	; (8002128 <TSL2561_WriteByte+0x34>)
 800211c:	f003 f9cc 	bl	80054b8 <HAL_I2C_Mem_Write>
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000798 	.word	0x20000798

0800212c <TSL2561_ReadByte>:

static void TSL2561_ReadByte(uint8_t Copy_uint8RegisterAddress, uint8_t *Copy_puinit8RecivingVariable)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af04      	add	r7, sp, #16
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(LightSensor_I2CChannel, LightSensor_SLAVE_ADDRESS,Copy_uint8RegisterAddress, 1, Copy_puinit8RecivingVariable, 1,TSL2561_Max_Delay);
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	b29a      	uxth	r2, r3
 800213c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002140:	9302      	str	r3, [sp, #8]
 8002142:	2301      	movs	r3, #1
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2301      	movs	r3, #1
 800214c:	2172      	movs	r1, #114	; 0x72
 800214e:	4803      	ldr	r0, [pc, #12]	; (800215c <TSL2561_ReadByte+0x30>)
 8002150:	f003 faac 	bl	80056ac <HAL_I2C_Mem_Read>
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000798 	.word	0x20000798

08002160 <decodeGGA>:
 GGAbuffer is the buffer which stores the GGA Data
 GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
 Returns 0 on success
 */

int decodeGGA(char *GGAbuffer, GGASTRUCT *gga) {
 8002160:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002164:	b08e      	sub	sp, #56	; 0x38
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
	inx = 0;
 800216c:	4b5b      	ldr	r3, [pc, #364]	; (80022dc <decodeGGA+0x17c>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')
 8002176:	e004      	b.n	8002182 <decodeGGA+0x22>
		inx++;  // 1st ','
 8002178:	4b58      	ldr	r3, [pc, #352]	; (80022dc <decodeGGA+0x17c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	4a57      	ldr	r2, [pc, #348]	; (80022dc <decodeGGA+0x17c>)
 8002180:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002182:	4b56      	ldr	r3, [pc, #344]	; (80022dc <decodeGGA+0x17c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4413      	add	r3, r2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b2c      	cmp	r3, #44	; 0x2c
 8002190:	d1f2      	bne.n	8002178 <decodeGGA+0x18>
	inx++;
 8002192:	4b52      	ldr	r3, [pc, #328]	; (80022dc <decodeGGA+0x17c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	4a50      	ldr	r2, [pc, #320]	; (80022dc <decodeGGA+0x17c>)
 800219a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800219c:	e004      	b.n	80021a8 <decodeGGA+0x48>
		inx++;  // After time ','
 800219e:	4b4f      	ldr	r3, [pc, #316]	; (80022dc <decodeGGA+0x17c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	4a4d      	ldr	r2, [pc, #308]	; (80022dc <decodeGGA+0x17c>)
 80021a6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80021a8:	4b4c      	ldr	r3, [pc, #304]	; (80022dc <decodeGGA+0x17c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b2c      	cmp	r3, #44	; 0x2c
 80021b6:	d1f2      	bne.n	800219e <decodeGGA+0x3e>
	inx++;
 80021b8:	4b48      	ldr	r3, [pc, #288]	; (80022dc <decodeGGA+0x17c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	4a47      	ldr	r2, [pc, #284]	; (80022dc <decodeGGA+0x17c>)
 80021c0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80021c2:	e004      	b.n	80021ce <decodeGGA+0x6e>
		inx++;  // after latitude ','
 80021c4:	4b45      	ldr	r3, [pc, #276]	; (80022dc <decodeGGA+0x17c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4a44      	ldr	r2, [pc, #272]	; (80022dc <decodeGGA+0x17c>)
 80021cc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80021ce:	4b43      	ldr	r3, [pc, #268]	; (80022dc <decodeGGA+0x17c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b2c      	cmp	r3, #44	; 0x2c
 80021dc:	d1f2      	bne.n	80021c4 <decodeGGA+0x64>
	inx++;
 80021de:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <decodeGGA+0x17c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	4a3d      	ldr	r2, [pc, #244]	; (80022dc <decodeGGA+0x17c>)
 80021e6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80021e8:	e004      	b.n	80021f4 <decodeGGA+0x94>
		inx++;  // after NS ','
 80021ea:	4b3c      	ldr	r3, [pc, #240]	; (80022dc <decodeGGA+0x17c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	4a3a      	ldr	r2, [pc, #232]	; (80022dc <decodeGGA+0x17c>)
 80021f2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80021f4:	4b39      	ldr	r3, [pc, #228]	; (80022dc <decodeGGA+0x17c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b2c      	cmp	r3, #44	; 0x2c
 8002202:	d1f2      	bne.n	80021ea <decodeGGA+0x8a>
	inx++;
 8002204:	4b35      	ldr	r3, [pc, #212]	; (80022dc <decodeGGA+0x17c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	4a34      	ldr	r2, [pc, #208]	; (80022dc <decodeGGA+0x17c>)
 800220c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800220e:	e004      	b.n	800221a <decodeGGA+0xba>
		inx++;  // after longitude ','
 8002210:	4b32      	ldr	r3, [pc, #200]	; (80022dc <decodeGGA+0x17c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	4a31      	ldr	r2, [pc, #196]	; (80022dc <decodeGGA+0x17c>)
 8002218:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800221a:	4b30      	ldr	r3, [pc, #192]	; (80022dc <decodeGGA+0x17c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b2c      	cmp	r3, #44	; 0x2c
 8002228:	d1f2      	bne.n	8002210 <decodeGGA+0xb0>
	inx++;
 800222a:	4b2c      	ldr	r3, [pc, #176]	; (80022dc <decodeGGA+0x17c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	4a2a      	ldr	r2, [pc, #168]	; (80022dc <decodeGGA+0x17c>)
 8002232:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002234:	e004      	b.n	8002240 <decodeGGA+0xe0>
		inx++;  // after EW ','
 8002236:	4b29      	ldr	r3, [pc, #164]	; (80022dc <decodeGGA+0x17c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	4a27      	ldr	r2, [pc, #156]	; (80022dc <decodeGGA+0x17c>)
 800223e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002240:	4b26      	ldr	r3, [pc, #152]	; (80022dc <decodeGGA+0x17c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b2c      	cmp	r3, #44	; 0x2c
 800224e:	d1f2      	bne.n	8002236 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8002250:	4b22      	ldr	r3, [pc, #136]	; (80022dc <decodeGGA+0x17c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	4a21      	ldr	r2, [pc, #132]	; (80022dc <decodeGGA+0x17c>)
 8002258:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2')
 800225a:	4b20      	ldr	r3, [pc, #128]	; (80022dc <decodeGGA+0x17c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b31      	cmp	r3, #49	; 0x31
 8002268:	d00f      	beq.n	800228a <decodeGGA+0x12a>
 800226a:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <decodeGGA+0x17c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b32      	cmp	r3, #50	; 0x32
 8002278:	d007      	beq.n	800228a <decodeGGA+0x12a>
			|| (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <decodeGGA+0x17c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4413      	add	r3, r2
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b36      	cmp	r3, #54	; 0x36
 8002288:	d106      	bne.n	8002298 <decodeGGA+0x138>
			{
		gga->isfixValid = 1;   // fix available
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2201      	movs	r2, #1
 800228e:	62da      	str	r2, [r3, #44]	; 0x2c
		inx = 0; // reset the index. We will start from the inx=0 and extract information now
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <decodeGGA+0x17c>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
	} else {
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',')
 8002296:	e009      	b.n	80022ac <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2200      	movs	r2, #0
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
		return 1;  // return error
 800229e:	2301      	movs	r3, #1
 80022a0:	e2f3      	b.n	800288a <decodeGGA+0x72a>
		inx++;  // 1st ','
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <decodeGGA+0x17c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <decodeGGA+0x17c>)
 80022aa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <decodeGGA+0x17c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b2c      	cmp	r3, #44	; 0x2c
 80022ba:	d1f2      	bne.n	80022a2 <decodeGGA+0x142>

	/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)
	inx++;   // reach the first number in time
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <decodeGGA+0x17c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	4a06      	ldr	r2, [pc, #24]	; (80022dc <decodeGGA+0x17c>)
 80022c4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	220c      	movs	r2, #12
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f00c ff23 	bl	800f11a <memset>
	i = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80022d8:	e016      	b.n	8002308 <decodeGGA+0x1a8>
 80022da:	bf00      	nop
 80022dc:	200002f0 	.word	0x200002f0
	{
		buffer[i] = GGAbuffer[inx];
 80022e0:	4ba9      	ldr	r3, [pc, #676]	; (8002588 <decodeGGA+0x428>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	7819      	ldrb	r1, [r3, #0]
 80022ec:	f107 020c 	add.w	r2, r7, #12
 80022f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f2:	4413      	add	r3, r2
 80022f4:	460a      	mov	r2, r1
 80022f6:	701a      	strb	r2, [r3, #0]
		i++;
 80022f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fa:	3301      	adds	r3, #1
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 80022fe:	4ba2      	ldr	r3, [pc, #648]	; (8002588 <decodeGGA+0x428>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3301      	adds	r3, #1
 8002304:	4aa0      	ldr	r2, [pc, #640]	; (8002588 <decodeGGA+0x428>)
 8002306:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8002308:	4b9f      	ldr	r3, [pc, #636]	; (8002588 <decodeGGA+0x428>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b2c      	cmp	r3, #44	; 0x2c
 8002316:	d1e3      	bne.n	80022e0 <decodeGGA+0x180>
	}

	hr = (atoi(buffer) / 10000) + GMT / 100; // get the hours from the 6 digit number
 8002318:	f107 030c 	add.w	r3, r7, #12
 800231c:	4618      	mov	r0, r3
 800231e:	f00c f8bc 	bl	800e49a <atoi>
 8002322:	4603      	mov	r3, r0
 8002324:	4a99      	ldr	r2, [pc, #612]	; (800258c <decodeGGA+0x42c>)
 8002326:	fb82 1203 	smull	r1, r2, r2, r3
 800232a:	1312      	asrs	r2, r2, #12
 800232c:	17db      	asrs	r3, r3, #31
 800232e:	1ad2      	subs	r2, r2, r3
 8002330:	4b97      	ldr	r3, [pc, #604]	; (8002590 <decodeGGA+0x430>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4997      	ldr	r1, [pc, #604]	; (8002594 <decodeGGA+0x434>)
 8002336:	fb81 0103 	smull	r0, r1, r1, r3
 800233a:	1149      	asrs	r1, r1, #5
 800233c:	17db      	asrs	r3, r3, #31
 800233e:	1acb      	subs	r3, r1, r3
 8002340:	4413      	add	r3, r2
 8002342:	4a95      	ldr	r2, [pc, #596]	; (8002598 <decodeGGA+0x438>)
 8002344:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer) / 100) % 100) + GMT % 100; // get the minutes from the 6 digit number
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	4618      	mov	r0, r3
 800234c:	f00c f8a5 	bl	800e49a <atoi>
 8002350:	4603      	mov	r3, r0
 8002352:	4a90      	ldr	r2, [pc, #576]	; (8002594 <decodeGGA+0x434>)
 8002354:	fb82 1203 	smull	r1, r2, r2, r3
 8002358:	1152      	asrs	r2, r2, #5
 800235a:	17db      	asrs	r3, r3, #31
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	4a8d      	ldr	r2, [pc, #564]	; (8002594 <decodeGGA+0x434>)
 8002360:	fb82 1203 	smull	r1, r2, r2, r3
 8002364:	1151      	asrs	r1, r2, #5
 8002366:	17da      	asrs	r2, r3, #31
 8002368:	1a8a      	subs	r2, r1, r2
 800236a:	2164      	movs	r1, #100	; 0x64
 800236c:	fb01 f202 	mul.w	r2, r1, r2
 8002370:	1a9a      	subs	r2, r3, r2
 8002372:	4b87      	ldr	r3, [pc, #540]	; (8002590 <decodeGGA+0x430>)
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	4b87      	ldr	r3, [pc, #540]	; (8002594 <decodeGGA+0x434>)
 8002378:	fb83 0301 	smull	r0, r3, r3, r1
 800237c:	1158      	asrs	r0, r3, #5
 800237e:	17cb      	asrs	r3, r1, #31
 8002380:	1ac3      	subs	r3, r0, r3
 8002382:	2064      	movs	r0, #100	; 0x64
 8002384:	fb00 f303 	mul.w	r3, r0, r3
 8002388:	1acb      	subs	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	4a83      	ldr	r2, [pc, #524]	; (800259c <decodeGGA+0x43c>)
 800238e:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) {
 8002390:	4b82      	ldr	r3, [pc, #520]	; (800259c <decodeGGA+0x43c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b3b      	cmp	r3, #59	; 0x3b
 8002396:	dd09      	ble.n	80023ac <decodeGGA+0x24c>
		min = min - 60;
 8002398:	4b80      	ldr	r3, [pc, #512]	; (800259c <decodeGGA+0x43c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3b3c      	subs	r3, #60	; 0x3c
 800239e:	4a7f      	ldr	r2, [pc, #508]	; (800259c <decodeGGA+0x43c>)
 80023a0:	6013      	str	r3, [r2, #0]
		hr++;
 80023a2:	4b7d      	ldr	r3, [pc, #500]	; (8002598 <decodeGGA+0x438>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	4a7b      	ldr	r2, [pc, #492]	; (8002598 <decodeGGA+0x438>)
 80023aa:	6013      	str	r3, [r2, #0]
	}
	if (hr < 0) {
 80023ac:	4b7a      	ldr	r3, [pc, #488]	; (8002598 <decodeGGA+0x438>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	da09      	bge.n	80023c8 <decodeGGA+0x268>
		hr = 24 + hr;
 80023b4:	4b78      	ldr	r3, [pc, #480]	; (8002598 <decodeGGA+0x438>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3318      	adds	r3, #24
 80023ba:	4a77      	ldr	r2, [pc, #476]	; (8002598 <decodeGGA+0x438>)
 80023bc:	6013      	str	r3, [r2, #0]
		daychange--;
 80023be:	4b78      	ldr	r3, [pc, #480]	; (80025a0 <decodeGGA+0x440>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	4a76      	ldr	r2, [pc, #472]	; (80025a0 <decodeGGA+0x440>)
 80023c6:	6013      	str	r3, [r2, #0]
	}
	if (hr >= 24) {
 80023c8:	4b73      	ldr	r3, [pc, #460]	; (8002598 <decodeGGA+0x438>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b17      	cmp	r3, #23
 80023ce:	dd09      	ble.n	80023e4 <decodeGGA+0x284>
		hr = hr - 24;
 80023d0:	4b71      	ldr	r3, [pc, #452]	; (8002598 <decodeGGA+0x438>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3b18      	subs	r3, #24
 80023d6:	4a70      	ldr	r2, [pc, #448]	; (8002598 <decodeGGA+0x438>)
 80023d8:	6013      	str	r3, [r2, #0]
		daychange++;
 80023da:	4b71      	ldr	r3, [pc, #452]	; (80025a0 <decodeGGA+0x440>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3301      	adds	r3, #1
 80023e0:	4a6f      	ldr	r2, [pc, #444]	; (80025a0 <decodeGGA+0x440>)
 80023e2:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80023e4:	4b6c      	ldr	r3, [pc, #432]	; (8002598 <decodeGGA+0x438>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	621a      	str	r2, [r3, #32]
	gga->tim.min = min;
 80023ec:	4b6b      	ldr	r3, [pc, #428]	; (800259c <decodeGGA+0x43c>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
	gga->tim.sec = atoi(buffer) % 100;
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	4618      	mov	r0, r3
 80023fa:	f00c f84e 	bl	800e49a <atoi>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b64      	ldr	r3, [pc, #400]	; (8002594 <decodeGGA+0x434>)
 8002402:	fb83 1302 	smull	r1, r3, r3, r2
 8002406:	1159      	asrs	r1, r3, #5
 8002408:	17d3      	asrs	r3, r2, #31
 800240a:	1acb      	subs	r3, r1, r3
 800240c:	2164      	movs	r1, #100	; 0x64
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	6293      	str	r3, [r2, #40]	; 0x28

	/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8002418:	4b5b      	ldr	r3, [pc, #364]	; (8002588 <decodeGGA+0x428>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3301      	adds	r3, #1
 800241e:	4a5a      	ldr	r2, [pc, #360]	; (8002588 <decodeGGA+0x428>)
 8002420:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	220c      	movs	r2, #12
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f00c fe75 	bl	800f11a <memset>
	i = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 8002434:	e013      	b.n	800245e <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8002436:	4b54      	ldr	r3, [pc, #336]	; (8002588 <decodeGGA+0x428>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4413      	add	r3, r2
 8002440:	7819      	ldrb	r1, [r3, #0]
 8002442:	f107 020c 	add.w	r2, r7, #12
 8002446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002448:	4413      	add	r3, r2
 800244a:	460a      	mov	r2, r1
 800244c:	701a      	strb	r2, [r3, #0]
		i++;
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002450:	3301      	adds	r3, #1
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8002454:	4b4c      	ldr	r3, [pc, #304]	; (8002588 <decodeGGA+0x428>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	3301      	adds	r3, #1
 800245a:	4a4b      	ldr	r2, [pc, #300]	; (8002588 <decodeGGA+0x428>)
 800245c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 800245e:	4b4a      	ldr	r3, [pc, #296]	; (8002588 <decodeGGA+0x428>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4413      	add	r3, r2
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b2c      	cmp	r3, #44	; 0x2c
 800246c:	d1e3      	bne.n	8002436 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6)
 800246e:	f107 030c 	add.w	r3, r7, #12
 8002472:	4618      	mov	r0, r3
 8002474:	f7fd ff6c 	bl	8000350 <strlen>
 8002478:	4603      	mov	r3, r0
 800247a:	2b05      	cmp	r3, #5
 800247c:	d801      	bhi.n	8002482 <decodeGGA+0x322>
		return 2;  // If the buffer length is not appropriate, return error
 800247e:	2302      	movs	r3, #2
 8002480:	e203      	b.n	800288a <decodeGGA+0x72a>
	int16_t num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	4618      	mov	r0, r3
 8002488:	f00c f807 	bl	800e49a <atoi>
 800248c:	4603      	mov	r3, r0
 800248e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int j = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8002494:	e002      	b.n	800249c <decodeGGA+0x33c>
		j++;   // Figure out how many digits before the decimal
 8002496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002498:	3301      	adds	r3, #1
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800249c:	f107 020c 	add.w	r2, r7, #12
 80024a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a2:	4413      	add	r3, r2
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b2e      	cmp	r3, #46	; 0x2e
 80024a8:	d1f5      	bne.n	8002496 <decodeGGA+0x336>
	j++;
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	3301      	adds	r3, #1
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
	int declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 80024b0:	f107 030c 	add.w	r3, r7, #12
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fd ff4b 	bl	8000350 <strlen>
 80024ba:	4602      	mov	r2, r0
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
	int dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	f107 020c 	add.w	r2, r7, #12
 80024c8:	4413      	add	r3, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f00b ffe5 	bl	800e49a <atoi>
 80024d0:	6278      	str	r0, [r7, #36]	; 0x24
	double lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 80024d2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f894 	bl	8000604 <__aeabi_i2d>
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <decodeGGA+0x444>)
 80024e2:	f7fe fa23 	bl	800092c <__aeabi_ddiv>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4690      	mov	r8, r2
 80024ec:	4699      	mov	r9, r3
 80024ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024f0:	f7fe f888 	bl	8000604 <__aeabi_i2d>
 80024f4:	4604      	mov	r4, r0
 80024f6:	460d      	mov	r5, r1
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	3302      	adds	r3, #2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe f881 	bl	8000604 <__aeabi_i2d>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	ec43 2b11 	vmov	d1, r2, r3
 800250a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8002580 <decodeGGA+0x420>
 800250e:	f00e feef 	bl	80112f0 <pow>
 8002512:	ec53 2b10 	vmov	r2, r3, d0
 8002516:	4620      	mov	r0, r4
 8002518:	4629      	mov	r1, r5
 800251a:	f7fe fa07 	bl	800092c <__aeabi_ddiv>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4640      	mov	r0, r8
 8002524:	4649      	mov	r1, r9
 8002526:	f7fd ff21 	bl	800036c <__adddf3>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8002532:	6839      	ldr	r1, [r7, #0]
 8002534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002538:	e9c1 2300 	strd	r2, r3, [r1]
	inx++;
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <decodeGGA+0x428>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	4a11      	ldr	r2, [pc, #68]	; (8002588 <decodeGGA+0x428>)
 8002544:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <decodeGGA+0x428>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	781a      	ldrb	r2, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	721a      	strb	r2, [r3, #8]

	/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <decodeGGA+0x428>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3301      	adds	r3, #1
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <decodeGGA+0x428>)
 800255e:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <decodeGGA+0x428>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	4a08      	ldr	r2, [pc, #32]	; (8002588 <decodeGGA+0x428>)
 8002568:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800256a:	f107 030c 	add.w	r3, r7, #12
 800256e:	220c      	movs	r2, #12
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f00c fdd1 	bl	800f11a <memset>
	i = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 800257c:	e028      	b.n	80025d0 <decodeGGA+0x470>
 800257e:	bf00      	nop
 8002580:	00000000 	.word	0x00000000
 8002584:	40240000 	.word	0x40240000
 8002588:	200002f0 	.word	0x200002f0
 800258c:	68db8bad 	.word	0x68db8bad
 8002590:	20000000 	.word	0x20000000
 8002594:	51eb851f 	.word	0x51eb851f
 8002598:	200002f4 	.word	0x200002f4
 800259c:	200002f8 	.word	0x200002f8
 80025a0:	200002fc 	.word	0x200002fc
 80025a4:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 80025a8:	4b89      	ldr	r3, [pc, #548]	; (80027d0 <decodeGGA+0x670>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	7819      	ldrb	r1, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ba:	4413      	add	r3, r2
 80025bc:	460a      	mov	r2, r1
 80025be:	701a      	strb	r2, [r3, #0]
		i++;
 80025c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c2:	3301      	adds	r3, #1
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <decodeGGA+0x670>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	4a80      	ldr	r2, [pc, #512]	; (80027d0 <decodeGGA+0x670>)
 80025ce:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 80025d0:	4b7f      	ldr	r3, [pc, #508]	; (80027d0 <decodeGGA+0x670>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b2c      	cmp	r3, #44	; 0x2c
 80025de:	d1e3      	bne.n	80025a8 <decodeGGA+0x448>
	}
	num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 80025e0:	f107 030c 	add.w	r3, r7, #12
 80025e4:	4618      	mov	r0, r3
 80025e6:	f00b ff58 	bl	800e49a <atoi>
 80025ea:	4603      	mov	r3, r0
 80025ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 80025f2:	e002      	b.n	80025fa <decodeGGA+0x49a>
		j++;  // Figure out how many digits before the decimal
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	3301      	adds	r3, #1
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 80025fa:	f107 020c 	add.w	r2, r7, #12
 80025fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002600:	4413      	add	r3, r2
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b2e      	cmp	r3, #46	; 0x2e
 8002606:	d1f5      	bne.n	80025f4 <decodeGGA+0x494>
	j++;
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	3301      	adds	r3, #1
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 800260e:	f107 030c 	add.w	r3, r7, #12
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd fe9c 	bl	8000350 <strlen>
 8002618:	4602      	mov	r2, r0
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	f107 020c 	add.w	r2, r7, #12
 8002626:	4413      	add	r3, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f00b ff36 	bl	800e49a <atoi>
 800262e:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 8002630:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002634:	4618      	mov	r0, r3
 8002636:	f7fd ffe5 	bl	8000604 <__aeabi_i2d>
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <decodeGGA+0x674>)
 8002640:	f7fe f974 	bl	800092c <__aeabi_ddiv>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4690      	mov	r8, r2
 800264a:	4699      	mov	r9, r3
 800264c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800264e:	f7fd ffd9 	bl	8000604 <__aeabi_i2d>
 8002652:	4604      	mov	r4, r0
 8002654:	460d      	mov	r5, r1
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	3302      	adds	r3, #2
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd ffd2 	bl	8000604 <__aeabi_i2d>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	ec43 2b11 	vmov	d1, r2, r3
 8002668:	ed9f 0b57 	vldr	d0, [pc, #348]	; 80027c8 <decodeGGA+0x668>
 800266c:	f00e fe40 	bl	80112f0 <pow>
 8002670:	ec53 2b10 	vmov	r2, r3, d0
 8002674:	4620      	mov	r0, r4
 8002676:	4629      	mov	r1, r5
 8002678:	f7fe f958 	bl	800092c <__aeabi_ddiv>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4640      	mov	r0, r8
 8002682:	4649      	mov	r1, r9
 8002684:	f7fd fe72 	bl	800036c <__adddf3>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8002690:	6839      	ldr	r1, [r7, #0]
 8002692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002696:	e9c1 2304 	strd	r2, r3, [r1, #16]
	inx++;
 800269a:	4b4d      	ldr	r3, [pc, #308]	; (80027d0 <decodeGGA+0x670>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	4a4b      	ldr	r2, [pc, #300]	; (80027d0 <decodeGGA+0x670>)
 80026a2:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 80026a4:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <decodeGGA+0x670>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	761a      	strb	r2, [r3, #24]

	/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 80026b4:	4b46      	ldr	r3, [pc, #280]	; (80027d0 <decodeGGA+0x670>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	4a45      	ldr	r2, [pc, #276]	; (80027d0 <decodeGGA+0x670>)
 80026bc:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 80026be:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <decodeGGA+0x670>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3301      	adds	r3, #1
 80026c4:	4a42      	ldr	r2, [pc, #264]	; (80027d0 <decodeGGA+0x670>)
 80026c6:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80026c8:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <decodeGGA+0x670>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	4a40      	ldr	r2, [pc, #256]	; (80027d0 <decodeGGA+0x670>)
 80026d0:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 80026d2:	4b3f      	ldr	r3, [pc, #252]	; (80027d0 <decodeGGA+0x670>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	4a3d      	ldr	r2, [pc, #244]	; (80027d0 <decodeGGA+0x670>)
 80026da:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	220c      	movs	r2, #12
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f00c fd18 	bl	800f11a <memset>
	i = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 80026ee:	e013      	b.n	8002718 <decodeGGA+0x5b8>
	{
		buffer[i] = GGAbuffer[inx];
 80026f0:	4b37      	ldr	r3, [pc, #220]	; (80027d0 <decodeGGA+0x670>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	7819      	ldrb	r1, [r3, #0]
 80026fc:	f107 020c 	add.w	r2, r7, #12
 8002700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002702:	4413      	add	r3, r2
 8002704:	460a      	mov	r2, r1
 8002706:	701a      	strb	r2, [r3, #0]
		i++;
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	3301      	adds	r3, #1
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800270e:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <decodeGGA+0x670>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3301      	adds	r3, #1
 8002714:	4a2e      	ldr	r2, [pc, #184]	; (80027d0 <decodeGGA+0x670>)
 8002716:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 8002718:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <decodeGGA+0x670>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b2c      	cmp	r3, #44	; 0x2c
 8002726:	d1e3      	bne.n	80026f0 <decodeGGA+0x590>
	}
	gga->numofsat = atoi(buffer); // convert the buffer to number and save into the structure
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	4618      	mov	r0, r3
 800272e:	f00b feb4 	bl	800e49a <atoi>
 8002732:	4602      	mov	r2, r0
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40

	/***************** skip HDOP  *********************/
	inx++;
 8002738:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <decodeGGA+0x670>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	4a24      	ldr	r2, [pc, #144]	; (80027d0 <decodeGGA+0x670>)
 8002740:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002742:	e004      	b.n	800274e <decodeGGA+0x5ee>
		inx++;
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <decodeGGA+0x670>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	4a21      	ldr	r2, [pc, #132]	; (80027d0 <decodeGGA+0x670>)
 800274c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800274e:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <decodeGGA+0x670>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b2c      	cmp	r3, #44	; 0x2c
 800275c:	d1f2      	bne.n	8002744 <decodeGGA+0x5e4>

	/*************** Altitude calculation ********************/
	inx++;
 800275e:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <decodeGGA+0x670>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	4a1a      	ldr	r2, [pc, #104]	; (80027d0 <decodeGGA+0x670>)
 8002766:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	220c      	movs	r2, #12
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f00c fcd2 	bl	800f11a <memset>
	i = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') {
 800277a:	e013      	b.n	80027a4 <decodeGGA+0x644>
		buffer[i] = GGAbuffer[inx];
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <decodeGGA+0x670>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	7819      	ldrb	r1, [r3, #0]
 8002788:	f107 020c 	add.w	r2, r7, #12
 800278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278e:	4413      	add	r3, r2
 8002790:	460a      	mov	r2, r1
 8002792:	701a      	strb	r2, [r3, #0]
		i++;
 8002794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002796:	3301      	adds	r3, #1
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800279a:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <decodeGGA+0x670>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <decodeGGA+0x670>)
 80027a2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <decodeGGA+0x670>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b2c      	cmp	r3, #44	; 0x2c
 80027b2:	d1e3      	bne.n	800277c <decodeGGA+0x61c>
	}
	num = (atoi(buffer));
 80027b4:	f107 030c 	add.w	r3, r7, #12
 80027b8:	4618      	mov	r0, r3
 80027ba:	f00b fe6e 	bl	800e49a <atoi>
 80027be:	4603      	mov	r3, r0
 80027c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 80027c6:	e00a      	b.n	80027de <decodeGGA+0x67e>
 80027c8:	00000000 	.word	0x00000000
 80027cc:	40240000 	.word	0x40240000
 80027d0:	200002f0 	.word	0x200002f0
 80027d4:	40590000 	.word	0x40590000
		j++;
 80027d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027da:	3301      	adds	r3, #1
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 80027de:	f107 020c 	add.w	r2, r7, #12
 80027e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e4:	4413      	add	r3, r2
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b2e      	cmp	r3, #46	; 0x2e
 80027ea:	d1f5      	bne.n	80027d8 <decodeGGA+0x678>
	j++;
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	3301      	adds	r3, #1
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j;
 80027f2:	f107 030c 	add.w	r3, r7, #12
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fdaa 	bl	8000350 <strlen>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j);
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	f107 020c 	add.w	r2, r7, #12
 800280a:	4413      	add	r3, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f00b fe44 	bl	800e49a <atoi>
 8002812:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num) + (dec / pow(10, (declen)));
 8002814:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd fef3 	bl	8000604 <__aeabi_i2d>
 800281e:	4604      	mov	r4, r0
 8002820:	460d      	mov	r5, r1
 8002822:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002824:	f7fd feee 	bl	8000604 <__aeabi_i2d>
 8002828:	4680      	mov	r8, r0
 800282a:	4689      	mov	r9, r1
 800282c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800282e:	f7fd fee9 	bl	8000604 <__aeabi_i2d>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	ec43 2b11 	vmov	d1, r2, r3
 800283a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002898 <decodeGGA+0x738>
 800283e:	f00e fd57 	bl	80112f0 <pow>
 8002842:	ec53 2b10 	vmov	r2, r3, d0
 8002846:	4640      	mov	r0, r8
 8002848:	4649      	mov	r1, r9
 800284a:	f7fe f86f 	bl	800092c <__aeabi_ddiv>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4620      	mov	r0, r4
 8002854:	4629      	mov	r1, r5
 8002856:	f7fd fd89 	bl	800036c <__adddf3>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->alt.altitude = lat;
 8002862:	6839      	ldr	r1, [r7, #0]
 8002864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002868:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	inx++;
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <decodeGGA+0x740>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	4a0b      	ldr	r2, [pc, #44]	; (80028a0 <decodeGGA+0x740>)
 8002874:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <decodeGGA+0x740>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	return 0;
 8002888:	2300      	movs	r3, #0

}
 800288a:	4618      	mov	r0, r3
 800288c:	3738      	adds	r7, #56	; 0x38
 800288e:	46bd      	mov	sp, r7
 8002890:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002894:	f3af 8000 	nop.w
 8002898:	00000000 	.word	0x00000000
 800289c:	40240000 	.word	0x40240000
 80028a0:	200002f0 	.word	0x200002f0

080028a4 <TASK_GPS>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart6;

void TASK_GPS(void *pvParameters)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	6078      	str	r0, [r7, #4]
	uint8_t Decode_Error_Code;
	while(1)
	{
		/*Update the GPS Data*/
		Decode_Error_Code = GPS_uint8DecodeGGAData();
 80028ac:	f7ff f80c 	bl	80018c8 <GPS_uint8DecodeGGAData>
 80028b0:	4603      	mov	r3, r0
 80028b2:	73fb      	strb	r3, [r7, #15]

		if(Decode_Error_Code==Decode_Success)
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d1f8      	bne.n	80028ac <TASK_GPS+0x8>
		{
			/*Update the completion flag to activate the sendESP_Periodic task*/
			if(Global_GPS_Speed_Completetion==Nothing_Completed)
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <TASK_GPS+0x50>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <TASK_GPS+0x26>
			{
				/* Updating the variable to notify the speed algorithm that the gps has
				 * done decoding and it can puplish the periodic data to the WIFI module */
				Global_GPS_Speed_Completetion=Half_Completed_GPS;
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <TASK_GPS+0x50>)
 80028c4:	2202      	movs	r2, #2
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	e00f      	b.n	80028ea <TASK_GPS+0x46>

			}
			else if(Global_GPS_Speed_Completetion==Half_Completed_Speed)
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <TASK_GPS+0x50>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d10b      	bne.n	80028ea <TASK_GPS+0x46>
			{
				/* Reseting the variable for the next update cycle */
				Global_GPS_Speed_Completetion=Nothing_Completed;
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <TASK_GPS+0x50>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]


				/*Activate the ESPTask*/
				xTaskNotify(Handle_ESP_Periodic,0,eNoAction);
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <TASK_GPS+0x54>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	2300      	movs	r3, #0
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2300      	movs	r3, #0
 80028e2:	2200      	movs	r2, #0
 80028e4:	2100      	movs	r1, #0
 80028e6:	f008 fe77 	bl	800b5d8 <xTaskGenericNotify>
			}
			/*Stopping the task for 1 second to free the processor*/
			vTaskDelay(pdMS_TO_TICKS(1000));
 80028ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ee:	f007 fde7 	bl	800a4c0 <vTaskDelay>
		Decode_Error_Code = GPS_uint8DecodeGGAData();
 80028f2:	e7db      	b.n	80028ac <TASK_GPS+0x8>
 80028f4:	20000300 	.word	0x20000300
 80028f8:	20000a70 	.word	0x20000a70

080028fc <TASK_CarControl>:

}


void TASK_CarControl(void *pvParameters)
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b087      	sub	sp, #28
 8002900:	af02      	add	r7, sp, #8
 8002902:	6078      	str	r0, [r7, #4]
	uint32_t Local_Notification_Value;
	BaseType_t Notify_Status;
	for (;;) {

		/*Waiting to be notified from the BT ISR */
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_Notification_Value,portMAX_DELAY);
 8002904:	f107 0308 	add.w	r3, r7, #8
 8002908:	f04f 32ff 	mov.w	r2, #4294967295
 800290c:	9200      	str	r2, [sp, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	2000      	movs	r0, #0
 8002914:	f008 fdd8 	bl	800b4c8 <xTaskGenericNotifyWait>
 8002918:	60f8      	str	r0, [r7, #12]

		if(Notify_Status == pdTRUE)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d1f1      	bne.n	8002904 <TASK_CarControl+0x8>
		{
			// Read data from UART
			switch (received_char)
 8002920:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <TASK_CarControl+0x18c>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	3b31      	subs	r3, #49	; 0x31
 8002926:	2b3b      	cmp	r3, #59	; 0x3b
 8002928:	d8ec      	bhi.n	8002904 <TASK_CarControl+0x8>
 800292a:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <TASK_CarControl+0x34>)
 800292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002930:	08002a21 	.word	0x08002a21
 8002934:	08002a27 	.word	0x08002a27
 8002938:	08002905 	.word	0x08002905
 800293c:	08002a2d 	.word	0x08002a2d
 8002940:	08002a33 	.word	0x08002a33
 8002944:	08002a6f 	.word	0x08002a6f
 8002948:	08002a75 	.word	0x08002a75
 800294c:	08002a7b 	.word	0x08002a7b
 8002950:	08002905 	.word	0x08002905
 8002954:	08002905 	.word	0x08002905
 8002958:	08002905 	.word	0x08002905
 800295c:	08002905 	.word	0x08002905
 8002960:	08002905 	.word	0x08002905
 8002964:	08002905 	.word	0x08002905
 8002968:	08002905 	.word	0x08002905
 800296c:	08002905 	.word	0x08002905
 8002970:	08002905 	.word	0x08002905
 8002974:	08002905 	.word	0x08002905
 8002978:	08002905 	.word	0x08002905
 800297c:	08002905 	.word	0x08002905
 8002980:	08002905 	.word	0x08002905
 8002984:	08002905 	.word	0x08002905
 8002988:	08002905 	.word	0x08002905
 800298c:	08002905 	.word	0x08002905
 8002990:	08002905 	.word	0x08002905
 8002994:	08002905 	.word	0x08002905
 8002998:	08002905 	.word	0x08002905
 800299c:	08002905 	.word	0x08002905
 80029a0:	08002905 	.word	0x08002905
 80029a4:	08002905 	.word	0x08002905
 80029a8:	08002905 	.word	0x08002905
 80029ac:	08002905 	.word	0x08002905
 80029b0:	08002905 	.word	0x08002905
 80029b4:	08002905 	.word	0x08002905
 80029b8:	08002905 	.word	0x08002905
 80029bc:	08002905 	.word	0x08002905
 80029c0:	08002905 	.word	0x08002905
 80029c4:	08002905 	.word	0x08002905
 80029c8:	08002905 	.word	0x08002905
 80029cc:	08002905 	.word	0x08002905
 80029d0:	08002905 	.word	0x08002905
 80029d4:	08002905 	.word	0x08002905
 80029d8:	08002905 	.word	0x08002905
 80029dc:	08002905 	.word	0x08002905
 80029e0:	08002905 	.word	0x08002905
 80029e4:	08002905 	.word	0x08002905
 80029e8:	08002905 	.word	0x08002905
 80029ec:	08002905 	.word	0x08002905
 80029f0:	08002905 	.word	0x08002905
 80029f4:	08002905 	.word	0x08002905
 80029f8:	08002905 	.word	0x08002905
 80029fc:	08002905 	.word	0x08002905
 8002a00:	08002905 	.word	0x08002905
 8002a04:	08002905 	.word	0x08002905
 8002a08:	08002905 	.word	0x08002905
 8002a0c:	08002905 	.word	0x08002905
 8002a10:	08002905 	.word	0x08002905
 8002a14:	08002905 	.word	0x08002905
 8002a18:	08002905 	.word	0x08002905
 8002a1c:	08002905 	.word	0x08002905
			{
			case '1':
				Car_Rotate_LeftForward();
 8002a20:	f7fe fdf2 	bl	8001608 <Car_Rotate_LeftForward>
				break;
 8002a24:	e02e      	b.n	8002a84 <TASK_CarControl+0x188>
			case '2':
				Car_Rotate_Left();
 8002a26:	f7fe fd93 	bl	8001550 <Car_Rotate_Left>
				break;
 8002a2a:	e02b      	b.n	8002a84 <TASK_CarControl+0x188>
			case '4':
				Car_Move_Forward_High_Speed();
 8002a2c:	f7fe fd06 	bl	800143c <Car_Move_Forward_High_Speed>
				break;
 8002a30:	e028      	b.n	8002a84 <TASK_CarControl+0x188>
			case '5':
				Car_Stop();
 8002a32:	f7fe fe17 	bl	8001664 <Car_Stop>

				/* Updating the breaking variable to eliminate unnecessary autonomous breaking events could occur*/
				Global_Breaking_Status =Breaking_ON;
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <TASK_CarControl+0x190>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]

				/* This timer will reset the above variable every 1.5second to allow autonomous breaking events */
				xTimerStart(Handle_Timer_Breaking_Status,1000);
 8002a3c:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <TASK_CarControl+0x194>)
 8002a3e:	681c      	ldr	r4, [r3, #0]
 8002a40:	f008 f858 	bl	800aaf4 <xTaskGetTickCount>
 8002a44:	4602      	mov	r2, r0
 8002a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4620      	mov	r0, r4
 8002a52:	f009 f96f 	bl	800bd34 <xTimerGenericCommand>

				/* Checking if a braking warning is already on to turn it off */
				if(Global_Break_Warning_On_Status == Warning_ON)
 8002a56:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <TASK_CarControl+0x198>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <TASK_CarControl+0x184>
				{
					/*Stopping the buzzer*/
					Buzzer_voidStop();
 8002a5e:	f7fe fc21 	bl	80012a4 <Buzzer_voidStop>

					/*Clearing the LCD*/
					LCD_voidClearDisplay();
 8002a62:	f7ff f987 	bl	8001d74 <LCD_voidClearDisplay>

					/* Resetting the warning status */
					Global_Break_Warning_On_Status = Warning_OFF;
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <TASK_CarControl+0x198>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002a6c:	e008      	b.n	8002a80 <TASK_CarControl+0x184>
			case '6':
				Car_Move_Backward();
 8002a6e:	f7fe fd13 	bl	8001498 <Car_Move_Backward>
				break;
 8002a72:	e007      	b.n	8002a84 <TASK_CarControl+0x188>
			case '7':
				Car_Rotate_RightForward();
 8002a74:	f7fe fd9a 	bl	80015ac <Car_Rotate_RightForward>
				break;
 8002a78:	e004      	b.n	8002a84 <TASK_CarControl+0x188>
			case '8':
				Car_Rotate_Right();
 8002a7a:	f7fe fd3b 	bl	80014f4 <Car_Rotate_Right>
				break;
 8002a7e:	e001      	b.n	8002a84 <TASK_CarControl+0x188>
				break;
 8002a80:	bf00      	nop
 8002a82:	e73f      	b.n	8002904 <TASK_CarControl+0x8>
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_Notification_Value,portMAX_DELAY);
 8002a84:	e73e      	b.n	8002904 <TASK_CarControl+0x8>
 8002a86:	bf00      	nop
 8002a88:	20000a64 	.word	0x20000a64
 8002a8c:	20000323 	.word	0x20000323
 8002a90:	20000ab4 	.word	0x20000ab4
 8002a94:	20000324 	.word	0x20000324

08002a98 <TASK_LightSensor>:
		}
	}
}

void TASK_LightSensor(void *pvParameters)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	6078      	str	r0, [r7, #4]
	uint16_t Local_uint16LightSensor_Flux=0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	81fb      	strh	r3, [r7, #14]

	while(1)
	{
		/*Read the intensity*/
		LightSensor_uint8ReadIntensity(&Local_uint16LightSensor_Flux);
 8002aa4:	f107 030e 	add.w	r3, r7, #14
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff f9ad 	bl	8001e08 <LightSensor_uint8ReadIntensity>

		if(Local_uint16LightSensor_Flux>MAX_LightIntensity)
 8002aae:	89fb      	ldrh	r3, [r7, #14]
 8002ab0:	2b14      	cmp	r3, #20
 8002ab2:	d90d      	bls.n	8002ad0 <TASK_LightSensor+0x38>
		{
			//Notify the ESPSendStatus task with problem in light
			xTaskNotify(Handle_ESP_Status,Notify_TASK_ESPSend_HighLight,eSetValueWithOverwrite);
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <TASK_LightSensor+0x44>)
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2303      	movs	r3, #3
 8002abe:	2205      	movs	r2, #5
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	f008 fd89 	bl	800b5d8 <xTaskGenericNotify>

			/*Delaying the task to free the processor*/
			vTaskDelay(pdMS_TO_TICKS(3300));
 8002ac6:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002aca:	f007 fcf9 	bl	800a4c0 <vTaskDelay>
 8002ace:	e7e9      	b.n	8002aa4 <TASK_LightSensor+0xc>
		}
		else
		{

			/*Delaying the task to free the processor*/
			vTaskDelay(pdMS_TO_TICKS(300));
 8002ad0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ad4:	f007 fcf4 	bl	800a4c0 <vTaskDelay>
		LightSensor_uint8ReadIntensity(&Local_uint16LightSensor_Flux);
 8002ad8:	e7e4      	b.n	8002aa4 <TASK_LightSensor+0xc>
 8002ada:	bf00      	nop
 8002adc:	20000a74 	.word	0x20000a74

08002ae0 <TASK_ESPSend_PeriodicData>:
		}
	}
}

void TASK_ESPSend_PeriodicData(void *pvParameters)
{
 8002ae0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af02      	add	r7, sp, #8
 8002ae8:	6078      	str	r0, [r7, #4]
	uint32_t Local_uint32NotificationValue;
	while(1)
	{

		/*Reading done from GPS and Speed sensor*/
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint32NotificationValue, portMAX_DELAY);
 8002aea:	f107 0308 	add.w	r3, r7, #8
 8002aee:	f04f 32ff 	mov.w	r2, #4294967295
 8002af2:	9200      	str	r2, [sp, #0]
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295
 8002af8:	2100      	movs	r1, #0
 8002afa:	2000      	movs	r0, #0
 8002afc:	f008 fce4 	bl	800b4c8 <xTaskGenericNotifyWait>
 8002b00:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d1f0      	bne.n	8002aea <TASK_ESPSend_PeriodicData+0xa>
		{
			/*Updating the transmission buffer*/
			GPSSPEED_voidBuildMsg(ESP_TX_Buffer_Periodic, GPS_Data.Longitude,GPS_Data.Latitude , Global_Speed);
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <TASK_ESPSend_PeriodicData+0x68>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fd8b 	bl	8000628 <__aeabi_f2d>
 8002b12:	4604      	mov	r4, r0
 8002b14:	460d      	mov	r5, r1
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <TASK_ESPSend_PeriodicData+0x68>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fd fd84 	bl	8000628 <__aeabi_f2d>
 8002b20:	4680      	mov	r8, r0
 8002b22:	4689      	mov	r9, r1
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <TASK_ESPSend_PeriodicData+0x6c>)
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	ec49 8b11 	vmov	d1, r8, r9
 8002b2e:	ec45 4b10 	vmov	d0, r4, r5
 8002b32:	4807      	ldr	r0, [pc, #28]	; (8002b50 <TASK_ESPSend_PeriodicData+0x70>)
 8002b34:	f7fe fa96 	bl	8001064 <GPSSPEED_voidBuildMsg>

			/*Transmitting the GPS, SPEED elements */
			HAL_UART_Transmit(&huart4,ESP_TX_Buffer_Periodic, sizeof(ESP_TX_Buffer_Periodic), 1500);
 8002b38:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002b3c:	221b      	movs	r2, #27
 8002b3e:	4904      	ldr	r1, [pc, #16]	; (8002b50 <TASK_ESPSend_PeriodicData+0x70>)
 8002b40:	4804      	ldr	r0, [pc, #16]	; (8002b54 <TASK_ESPSend_PeriodicData+0x74>)
 8002b42:	f005 fcb8 	bl	80084b6 <HAL_UART_Transmit>
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint32NotificationValue, portMAX_DELAY);
 8002b46:	e7d0      	b.n	8002aea <TASK_ESPSend_PeriodicData+0xa>
 8002b48:	200002e4 	.word	0x200002e4
 8002b4c:	20000326 	.word	0x20000326
 8002b50:	20000308 	.word	0x20000308
 8002b54:	20000954 	.word	0x20000954

08002b58 <TASK_ESP_SendStatus>:
	}


}
void TASK_ESP_SendStatus (void *pvParameters)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	6078      	str	r0, [r7, #4]
	uint32_t Local_Notification_Value;

	BaseType_t Notify_Status;
	ESP_TX_Buffer_Status[0] = '%';
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <TASK_ESP_SendStatus+0x74>)
 8002b62:	2225      	movs	r2, #37	; 0x25
 8002b64:	701a      	strb	r2, [r3, #0]
	ESP_TX_Buffer_Status[2] = '^';
 8002b66:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <TASK_ESP_SendStatus+0x74>)
 8002b68:	225e      	movs	r2, #94	; 0x5e
 8002b6a:	709a      	strb	r2, [r3, #2]
	ESP_TX_Buffer_Status[3] = '!';
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <TASK_ESP_SendStatus+0x74>)
 8002b6e:	2221      	movs	r2, #33	; 0x21
 8002b70:	70da      	strb	r2, [r3, #3]
	while(1)
	{
		/*Waiting to be notified from the TASK_LightSensor */
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,0xffffffff,&Local_Notification_Value,portMAX_DELAY);
 8002b72:	f107 0308 	add.w	r3, r7, #8
 8002b76:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7a:	9200      	str	r2, [sp, #0]
 8002b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b80:	2100      	movs	r1, #0
 8002b82:	2000      	movs	r0, #0
 8002b84:	f008 fca0 	bl	800b4c8 <xTaskGenericNotifyWait>
 8002b88:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d1f0      	bne.n	8002b72 <TASK_ESP_SendStatus+0x1a>
		{

			/* Read data from Light_Sensor_Task */
			switch (Local_Notification_Value)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b05      	cmp	r3, #5
 8002b94:	d002      	beq.n	8002b9c <TASK_ESP_SendStatus+0x44>
 8002b96:	2b76      	cmp	r3, #118	; 0x76
 8002b98:	d00b      	beq.n	8002bb2 <TASK_ESP_SendStatus+0x5a>
 8002b9a:	e015      	b.n	8002bc8 <TASK_ESP_SendStatus+0x70>
			{
			case Notify_TASK_ESPSend_HighLight:

				/*Updating the TX buffer with the problem of the high Light intensity*/
				ESP_TX_Buffer_Status[1] = 'L';
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <TASK_ESP_SendStatus+0x74>)
 8002b9e:	224c      	movs	r2, #76	; 0x4c
 8002ba0:	705a      	strb	r2, [r3, #1]

				/*Transmitting the Car status to the Esp */
				HAL_UART_Transmit(&huart4,ESP_TX_Buffer_Status, sizeof(ESP_TX_Buffer_Status), 1500);
 8002ba2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	4908      	ldr	r1, [pc, #32]	; (8002bcc <TASK_ESP_SendStatus+0x74>)
 8002baa:	4809      	ldr	r0, [pc, #36]	; (8002bd0 <TASK_ESP_SendStatus+0x78>)
 8002bac:	f005 fc83 	bl	80084b6 <HAL_UART_Transmit>
				break;
 8002bb0:	e00a      	b.n	8002bc8 <TASK_ESP_SendStatus+0x70>

			case Notify_TASK_ESPSend_RequestOvertake:

				/* Updating the TX buffer with the avoid Overtaking */
				ESP_TX_Buffer_Status[1] = 'K';
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <TASK_ESP_SendStatus+0x74>)
 8002bb4:	224b      	movs	r2, #75	; 0x4b
 8002bb6:	705a      	strb	r2, [r3, #1]

				/*Transmitting the Car status to the Esp */
				HAL_UART_Transmit(&huart4,ESP_TX_Buffer_Status, sizeof(ESP_TX_Buffer_Status), 1500);
 8002bb8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	4903      	ldr	r1, [pc, #12]	; (8002bcc <TASK_ESP_SendStatus+0x74>)
 8002bc0:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <TASK_ESP_SendStatus+0x78>)
 8002bc2:	f005 fc78 	bl	80084b6 <HAL_UART_Transmit>
				break;
 8002bc6:	bf00      	nop
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,0xffffffff,&Local_Notification_Value,portMAX_DELAY);
 8002bc8:	e7d3      	b.n	8002b72 <TASK_ESP_SendStatus+0x1a>
 8002bca:	bf00      	nop
 8002bcc:	20000304 	.word	0x20000304
 8002bd0:	20000954 	.word	0x20000954

08002bd4 <TASK_ESP_Receive>:
		}
	}
}

void TASK_ESP_Receive (void *pvParameters)
{
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b089      	sub	sp, #36	; 0x24
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	6078      	str	r0, [r7, #4]
	BaseType_t Notify_Status;
	uint32_t Local_uint32NotificationValue;
	uint16_t Local_uint16Distance = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	817b      	strh	r3, [r7, #10]
	uint8_t Local_Ultrasonic_ErrorCode = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	75fb      	strb	r3, [r7, #23]
	while(1)
	{
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 8002be4:	f107 030c 	add.w	r3, r7, #12
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	9200      	str	r2, [sp, #0]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f008 fc68 	bl	800b4c8 <xTaskGenericNotifyWait>
 8002bf8:	6138      	str	r0, [r7, #16]
		if(Notify_Status == pdTRUE)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d1f1      	bne.n	8002be4 <TASK_ESP_Receive+0x10>
		{
			switch(ESP_Recieved_Char)
 8002c00:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <TASK_ESP_Receive+0x110>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b42      	cmp	r3, #66	; 0x42
 8002c06:	d168      	bne.n	8002cda <TASK_ESP_Receive+0x106>
			{
			case Notify_TASK_ESPRecieve_Break:

				/* Stopping preemption of other tasks in this critical section */
				vTaskSuspendAll();
 8002c08:	f007 fe66 	bl	800a8d8 <vTaskSuspendAll>

				/* Calculating the car distance */
				Local_Ultrasonic_ErrorCode = Ultrasonic_uint8Get_Distance_In_Cm(&Local_uint16Distance);
 8002c0c:	f107 030a 	add.w	r3, r7, #10
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fb77 	bl	8003304 <Ultrasonic_uint8Get_Distance_In_Cm>
 8002c16:	4603      	mov	r3, r0
 8002c18:	75fb      	strb	r3, [r7, #23]

				/* Checking the Car Infront distance value & the error code to take the appropriate action */
				if((Local_Ultrasonic_ErrorCode == Calculation_Success) && (Local_uint16Distance <= THRESHOLD_DISTANCE_INFRONT_IN_CENTIMETER))
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d11b      	bne.n	8002c58 <TASK_ESP_Receive+0x84>
 8002c20:	897b      	ldrh	r3, [r7, #10]
 8002c22:	2b3c      	cmp	r3, #60	; 0x3c
 8002c24:	d818      	bhi.n	8002c58 <TASK_ESP_Receive+0x84>
				{
					/* Taking the action of breaking */
					Car_Stop();
 8002c26:	f7fe fd1d 	bl	8001664 <Car_Stop>

					/* Presenting the warning to the driver in sort of buzzer sound & display warning */
					Buzzer_voidHighSound();
 8002c2a:	f7fe fb2b 	bl	8001284 <Buzzer_voidHighSound>
					LCD_AvoidHardBraking();
 8002c2e:	f7fe fef3 	bl	8001a18 <LCD_AvoidHardBraking>

					/* Updating Warning Status, so if the user uses brakes the visual and audio warning stops */
					Global_Break_Warning_On_Status = Warning_ON;
 8002c32:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <TASK_ESP_Receive+0x114>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]

					/* Resuming the tasks */
					xTaskResumeAll();
 8002c38:	f007 fe5c 	bl	800a8f4 <xTaskResumeAll>

					/* Start the timer to stop the buzzer and clear LCD after period of specified time */
					xTimerStart(Handle_Timer_RecieveESP,1000);
 8002c3c:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <TASK_ESP_Receive+0x118>)
 8002c3e:	681c      	ldr	r4, [r3, #0]
 8002c40:	f007 ff58 	bl	800aaf4 <xTaskGetTickCount>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4620      	mov	r0, r4
 8002c52:	f009 f86f 	bl	800bd34 <xTimerGenericCommand>
 8002c56:	e03f      	b.n	8002cd8 <TASK_ESP_Receive+0x104>
				}
				else if((Local_Ultrasonic_ErrorCode == Calculation_Success) && (Local_uint16Distance > THRESHOLD_DISTANCE_INFRONT_IN_CENTIMETER))
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d122      	bne.n	8002ca4 <TASK_ESP_Receive+0xd0>
 8002c5e:	897b      	ldrh	r3, [r7, #10]
 8002c60:	2b3c      	cmp	r3, #60	; 0x3c
 8002c62:	d91f      	bls.n	8002ca4 <TASK_ESP_Receive+0xd0>
				{
					/* No Breaking */

					/* Presenting the warning to the driver in sort of buzzer sound & display warning */
					Buzzer_voidHighSound();
 8002c64:	f7fe fb0e 	bl	8001284 <Buzzer_voidHighSound>
					LCD_AvoidHardBraking();
 8002c68:	f7fe fed6 	bl	8001a18 <LCD_AvoidHardBraking>

					/* Updating Warning Status, so if the user uses brakes the visual and audio warning stops */
					Global_Break_Warning_On_Status = Warning_ON;
 8002c6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <TASK_ESP_Receive+0x114>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]

					/* Resuming the tasks */
					xTaskResumeAll();
 8002c72:	f007 fe3f 	bl	800a8f4 <xTaskResumeAll>

					/* Start the timer to stop the buzzer and clear LCD after period of specified time */
					xTimerStart(Handle_Timer_RecieveESP,1000);
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <TASK_ESP_Receive+0x118>)
 8002c78:	681c      	ldr	r4, [r3, #0]
 8002c7a:	f007 ff3b 	bl	800aaf4 <xTaskGetTickCount>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2300      	movs	r3, #0
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f009 f852 	bl	800bd34 <xTimerGenericCommand>

					/* Notify a task to handle if the user didnt stop after the warning till the distance reaches the threshold*/
					xTaskNotify(Handle_Distance_AboveThreshold,NULL,eNoAction);
 8002c90:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <TASK_ESP_Receive+0x11c>)
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	2300      	movs	r3, #0
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	f008 fc9b 	bl	800b5d8 <xTaskGenericNotify>
 8002ca2:	e019      	b.n	8002cd8 <TASK_ESP_Receive+0x104>

				}
				else if((Local_Ultrasonic_ErrorCode == Calculation_Failed) || (Local_Ultrasonic_ErrorCode == TIMEOUT_ECHO_OCCURED) )
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <TASK_ESP_Receive+0xdc>
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d116      	bne.n	8002cde <TASK_ESP_Receive+0x10a>
				{
					/* Calculation failed means that most probably the front car is farther than 4 meters so just a visual alert
					 * and a weak audio alert is enough */
					LCD_Normal_Alert();
 8002cb0:	f7fe ff60 	bl	8001b74 <LCD_Normal_Alert>
					Buzzer_voidMidSound();
 8002cb4:	f7fe fad6 	bl	8001264 <Buzzer_voidMidSound>

					/* Start the timer to stop the buzzer and clear LCD after period of specified time */
					xTimerStart(Handle_Timer_RecieveESP,1000);
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <TASK_ESP_Receive+0x118>)
 8002cba:	681c      	ldr	r4, [r3, #0]
 8002cbc:	f007 ff1a 	bl	800aaf4 <xTaskGetTickCount>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f009 f831 	bl	800bd34 <xTimerGenericCommand>

					/* Resuming the tasks */
					xTaskResumeAll();
 8002cd2:	f007 fe0f 	bl	800a8f4 <xTaskResumeAll>
					/* Do Nothing */
				}



				break;
 8002cd6:	e002      	b.n	8002cde <TASK_ESP_Receive+0x10a>
 8002cd8:	e001      	b.n	8002cde <TASK_ESP_Receive+0x10a>

			default:
				break;
 8002cda:	bf00      	nop
 8002cdc:	e782      	b.n	8002be4 <TASK_ESP_Receive+0x10>
				break;
 8002cde:	bf00      	nop
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 8002ce0:	e780      	b.n	8002be4 <TASK_ESP_Receive+0x10>
 8002ce2:	bf00      	nop
 8002ce4:	20000a65 	.word	0x20000a65
 8002ce8:	20000324 	.word	0x20000324
 8002cec:	20000ab0 	.word	0x20000ab0
 8002cf0:	20000a80 	.word	0x20000a80

08002cf4 <TASK_Distance_AboveThreshold>:


}

void TASK_Distance_AboveThreshold(void *pvParameters)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	6078      	str	r0, [r7, #4]
	BaseType_t Notify_Status;
	uint32_t Local_uint32NotificationValue;
	TickType_t Local_TickTypeTicks_Now = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
	uint16_t Local_uint16Distance = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	81fb      	strh	r3, [r7, #14]
	uint8_t  Local_Ultrasonic_Error_Code = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	76fb      	strb	r3, [r7, #27]
	while(1)
	{
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d10:	9200      	str	r2, [sp, #0]
 8002d12:	2200      	movs	r2, #0
 8002d14:	2100      	movs	r1, #0
 8002d16:	2000      	movs	r0, #0
 8002d18:	f008 fbd6 	bl	800b4c8 <xTaskGenericNotifyWait>
 8002d1c:	6178      	str	r0, [r7, #20]
		if( (Notify_Status == pdTRUE) && (Global_Breaking_Status == Breaking_OFF))
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d1f1      	bne.n	8002d08 <TASK_Distance_AboveThreshold+0x14>
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <TASK_Distance_AboveThreshold+0xa0>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ed      	bne.n	8002d08 <TASK_Distance_AboveThreshold+0x14>
		{
			Local_TickTypeTicks_Now = xTaskGetTickCount();
 8002d2c:	f007 fee2 	bl	800aaf4 <xTaskGetTickCount>
 8002d30:	61f8      	str	r0, [r7, #28]
			while(((xTaskGetTickCount() - Local_TickTypeTicks_Now) < 1700) && (Global_Breaking_Status == Breaking_OFF))
 8002d32:	e020      	b.n	8002d76 <TASK_Distance_AboveThreshold+0x82>
			{
				Local_Ultrasonic_Error_Code = Ultrasonic_uint8Get_Distance_In_Cm(&Local_uint16Distance);
 8002d34:	f107 030e 	add.w	r3, r7, #14
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fae3 	bl	8003304 <Ultrasonic_uint8Get_Distance_In_Cm>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	76fb      	strb	r3, [r7, #27]

				if((Local_Ultrasonic_Error_Code == Calculation_Success) && (Local_uint16Distance <= THRESHOLD_DISTANCE_INFRONT_IN_CENTIMETER))
 8002d42:	7efb      	ldrb	r3, [r7, #27]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d116      	bne.n	8002d76 <TASK_Distance_AboveThreshold+0x82>
 8002d48:	89fb      	ldrh	r3, [r7, #14]
 8002d4a:	2b3c      	cmp	r3, #60	; 0x3c
 8002d4c:	d813      	bhi.n	8002d76 <TASK_Distance_AboveThreshold+0x82>
				{
					/* Stopping the car */
					Car_Stop();
 8002d4e:	f7fe fc89 	bl	8001664 <Car_Stop>

					/* Stopping the unnecessary warning */
					Buzzer_voidStop();
 8002d52:	f7fe faa7 	bl	80012a4 <Buzzer_voidStop>
					LCD_voidClearDisplay();
 8002d56:	f7ff f80d 	bl	8001d74 <LCD_voidClearDisplay>

					/* Reseting the warning status */
					Global_Break_Warning_On_Status = Warning_OFF;
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <TASK_Distance_AboveThreshold+0xa4>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]

					/* Stopping the unnecessary timer */
					xTimerStop(Handle_Timer_RecieveESP,1000);
 8002d60:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <TASK_Distance_AboveThreshold+0xa8>)
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2103      	movs	r1, #3
 8002d70:	f008 ffe0 	bl	800bd34 <xTimerGenericCommand>

					/* Breaking out of the loop to get the task in the blocking mode to free up the processor */
					break;
 8002d74:	e00c      	b.n	8002d90 <TASK_Distance_AboveThreshold+0x9c>
			while(((xTaskGetTickCount() - Local_TickTypeTicks_Now) < 1700) && (Global_Breaking_Status == Breaking_OFF))
 8002d76:	f007 febd 	bl	800aaf4 <xTaskGetTickCount>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d8bf      	bhi.n	8002d08 <TASK_Distance_AboveThreshold+0x14>
 8002d88:	4b02      	ldr	r3, [pc, #8]	; (8002d94 <TASK_Distance_AboveThreshold+0xa0>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0d1      	beq.n	8002d34 <TASK_Distance_AboveThreshold+0x40>
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 8002d90:	e7ba      	b.n	8002d08 <TASK_Distance_AboveThreshold+0x14>
 8002d92:	bf00      	nop
 8002d94:	20000323 	.word	0x20000323
 8002d98:	20000324 	.word	0x20000324
 8002d9c:	20000ab0 	.word	0x20000ab0

08002da0 <TASK_Rasp_Receive>:


}

void TASK_Rasp_Receive(void *pvParameters)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	6078      	str	r0, [r7, #4]
	BaseType_t Notify_Status;
	uint32_t Local_uint32NotificationValue;
	uint32_t Local_uint32Timeout = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
	while(1)
	{
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 8002dac:	f107 030c 	add.w	r3, r7, #12
 8002db0:	f04f 32ff 	mov.w	r2, #4294967295
 8002db4:	9200      	str	r2, [sp, #0]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f008 fb84 	bl	800b4c8 <xTaskGenericNotifyWait>
 8002dc0:	6138      	str	r0, [r7, #16]
		if(Notify_Status == pdTRUE)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d1f1      	bne.n	8002dac <TASK_Rasp_Receive+0xc>
		{
			if((Rasp_Recieved_Char == Notify_TASK_RaspRecieve_pass_RightLane)||(Rasp_Recieved_Char == Notify_TASK_RaspRecieve_pass_LeftLane))
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <TASK_Rasp_Receive+0xc8>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b92      	cmp	r3, #146	; 0x92
 8002dce:	d003      	beq.n	8002dd8 <TASK_Rasp_Receive+0x38>
 8002dd0:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <TASK_Rasp_Receive+0xc8>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b9e      	cmp	r3, #158	; 0x9e
 8002dd6:	d109      	bne.n	8002dec <TASK_Rasp_Receive+0x4c>
			{
				xTaskNotify(Handle_ESP_Status,Notify_TASK_ESPSend_RequestOvertake,eSetValueWithOverwrite);
 8002dd8:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <TASK_Rasp_Receive+0xcc>)
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2303      	movs	r3, #3
 8002de2:	2276      	movs	r2, #118	; 0x76
 8002de4:	2100      	movs	r1, #0
 8002de6:	f008 fbf7 	bl	800b5d8 <xTaskGenericNotify>
 8002dea:	e03c      	b.n	8002e66 <TASK_Rasp_Receive+0xc6>

			}
			else if((Rasp_Recieved_Char == Notify_TASK_RaspRecieve_TurnRight))
 8002dec:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <TASK_Rasp_Receive+0xc8>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b41      	cmp	r3, #65	; 0x41
 8002df2:	d11a      	bne.n	8002e2a <TASK_Rasp_Receive+0x8a>
			{
				/* Suspending the carcontrol task to ignore the life threatening wrong user decision */
				vTaskSuspend(Handle_CarControl);
 8002df4:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <TASK_Rasp_Receive+0xd0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f007 fb99 	bl	800a530 <vTaskSuspend>

				while((Rasp_Recieved_Char != 'Z') &&(Local_uint32Timeout< TIMEOUT_INSTRUCTIONS_TO_2500_Millis) )
 8002dfe:	e004      	b.n	8002e0a <TASK_Rasp_Receive+0x6a>
				{
					/* Rotating right till receiving the approval of the raspberry */
					Car_Rotate_RightForward();
 8002e00:	f7fe fbd4 	bl	80015ac <Car_Rotate_RightForward>

					/* Increasing the timeout in case of an issue with the raspberry */
					Local_uint32Timeout++;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	3301      	adds	r3, #1
 8002e08:	617b      	str	r3, [r7, #20]
				while((Rasp_Recieved_Char != 'Z') &&(Local_uint32Timeout< TIMEOUT_INSTRUCTIONS_TO_2500_Millis) )
 8002e0a:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <TASK_Rasp_Receive+0xc8>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b5a      	cmp	r3, #90	; 0x5a
 8002e10:	d003      	beq.n	8002e1a <TASK_Rasp_Receive+0x7a>
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	4a17      	ldr	r2, [pc, #92]	; (8002e74 <TASK_Rasp_Receive+0xd4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d3f2      	bcc.n	8002e00 <TASK_Rasp_Receive+0x60>
				}

				/* After the raspberry approval, giving the control back to the user */
				vTaskResume(Handle_CarControl);
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <TASK_Rasp_Receive+0xd0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f007 fc66 	bl	800a6f0 <vTaskResume>

				/* Resseting the timeout */
				Local_uint32Timeout = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	e7c0      	b.n	8002dac <TASK_Rasp_Receive+0xc>
			}
			else if((Rasp_Recieved_Char == Notify_TASK_RaspRecieve_TurnLeft))
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <TASK_Rasp_Receive+0xc8>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b5a      	cmp	r3, #90	; 0x5a
 8002e30:	d1bc      	bne.n	8002dac <TASK_Rasp_Receive+0xc>
			{
				/* Suspending the carcontrol task to ignore the life threatening wrong user decision */
				vTaskSuspend(Handle_CarControl);
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <TASK_Rasp_Receive+0xd0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f007 fb7a 	bl	800a530 <vTaskSuspend>

				while((Rasp_Recieved_Char != 'Z') &&(Local_uint32Timeout< TIMEOUT_INSTRUCTIONS_TO_2500_Millis) )
 8002e3c:	e004      	b.n	8002e48 <TASK_Rasp_Receive+0xa8>
				{
					/* Rotating right till receiving the approval of the raspberry */
					Car_Rotate_LeftForward();
 8002e3e:	f7fe fbe3 	bl	8001608 <Car_Rotate_LeftForward>

					/* Increasing the timeout in case of an issue with the raspberry */
					Local_uint32Timeout++;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	3301      	adds	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
				while((Rasp_Recieved_Char != 'Z') &&(Local_uint32Timeout< TIMEOUT_INSTRUCTIONS_TO_2500_Millis) )
 8002e48:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <TASK_Rasp_Receive+0xc8>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b5a      	cmp	r3, #90	; 0x5a
 8002e4e:	d003      	beq.n	8002e58 <TASK_Rasp_Receive+0xb8>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	4a08      	ldr	r2, [pc, #32]	; (8002e74 <TASK_Rasp_Receive+0xd4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d3f2      	bcc.n	8002e3e <TASK_Rasp_Receive+0x9e>
				}

				/* After the raspberry approval, giving the control back to the user */
				vTaskResume(Handle_CarControl);
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <TASK_Rasp_Receive+0xd0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f007 fc47 	bl	800a6f0 <vTaskResume>

				/* Reseting the timeout */
				Local_uint32Timeout = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 8002e66:	e7a1      	b.n	8002dac <TASK_Rasp_Receive+0xc>
 8002e68:	20000a66 	.word	0x20000a66
 8002e6c:	20000a74 	.word	0x20000a74
 8002e70:	20000a68 	.word	0x20000a68
 8002e74:	02625a00 	.word	0x02625a00

08002e78 <TASK_Rasp_Send>:
	}

}

void TASK_Rasp_Send(void *pvParameters)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	6078      	str	r0, [r7, #4]
	BaseType_t Notify_Status;
	uint32_t Local_uint32NotificationValue;
	while(1)
	{
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 8002e80:	f107 0308 	add.w	r3, r7, #8
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295
 8002e88:	9200      	str	r2, [sp, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f008 fb1a 	bl	800b4c8 <xTaskGenericNotifyWait>
 8002e94:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d1f1      	bne.n	8002e80 <TASK_Rasp_Send+0x8>
		{
			/* sending the Clear_to_Overtake or NotClear_to_overtake to the Raspberry after receiving it from the ESP */
			HAL_UART_Transmit(&huart6,&Local_uint32NotificationValue, sizeof(Local_uint32NotificationValue), 1500);
 8002e9c:	f107 0108 	add.w	r1, r7, #8
 8002ea0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <TASK_Rasp_Send+0x38>)
 8002ea8:	f005 fb05 	bl	80084b6 <HAL_UART_Transmit>
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_uint32NotificationValue, portMAX_DELAY);
 8002eac:	e7e8      	b.n	8002e80 <TASK_Rasp_Send+0x8>
 8002eae:	bf00      	nop
 8002eb0:	20000a20 	.word	0x20000a20

08002eb4 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
	/*Making the pointers points to the objects of the rx_buffer & tx_buffer instances*/
  _rx_buffer = &rx_buffer;
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <Ringbuf_init+0x3c>)
 8002eba:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <Ringbuf_init+0x40>)
 8002ebc:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <Ringbuf_init+0x44>)
 8002ec0:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <Ringbuf_init+0x48>)
 8002ec2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <Ringbuf_init+0x4c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <Ringbuf_init+0x4c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <Ringbuf_init+0x4c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <Ringbuf_init+0x4c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0220 	orr.w	r2, r2, #32
 8002ee2:	60da      	str	r2, [r3, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	2000073c 	.word	0x2000073c
 8002ef4:	2000032c 	.word	0x2000032c
 8002ef8:	20000740 	.word	0x20000740
 8002efc:	20000534 	.word	0x20000534
 8002f00:	20000998 	.word	0x20000998

08002f04 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	71fb      	strb	r3, [r7, #7]
	 * increments by 1 for future storing, it doesnt coincide with the tail
	 * the % UART_BUFFER_SIZE checking if the index of the next storing procedure
	 * is bigger than the buffer size(ex this iteration stores in 512 byte and the next one
	 * will be in the 513 so i should reset the (i) to zero to repeat again)*/

  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f16:	3301      	adds	r3, #1
 8002f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d009      	beq.n	8002f3e <store_char+0x3a>
  {
	  /*Storing the charachter in the recent head pointed location*/
    buffer->buffer[buffer->head] = c;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	79f9      	ldrb	r1, [r7, #7]
 8002f34:	54d1      	strb	r1, [r2, r3]

    /*After storing the character, incrementing the head for the next storing */
    buffer->head = i;
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <Uart_read+0x54>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002f5a:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <Uart_read+0x54>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d102      	bne.n	8002f6c <Uart_read+0x20>
  {
    return -1;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	e013      	b.n	8002f94 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <Uart_read+0x54>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <Uart_read+0x54>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f78:	5cd3      	ldrb	r3, [r2, r3]
 8002f7a:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <Uart_read+0x54>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <Uart_read+0x54>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8002f92:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	2000073c 	.word	0x2000073c

08002fa4 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <IsDataAvailable+0x30>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <IsDataAvailable+0x30>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	2000073c 	.word	0x2000073c

08002fd8 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <Uart_peek+0x38>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <Uart_peek+0x38>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d102      	bne.n	8002ff6 <Uart_peek+0x1e>
  {
    return -1;
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff4:	e006      	b.n	8003004 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <Uart_peek+0x38>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <Uart_peek+0x38>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003002:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	2000073c 	.word	0x2000073c

08003014 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd f994 	bl	8000350 <strlen>
 8003028:	4603      	mov	r3, r0
 800302a:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8003030:	e01e      	b.n	8003070 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8003032:	4b36      	ldr	r3, [pc, #216]	; (800310c <Copy_upto+0xf8>)
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	4b35      	ldr	r3, [pc, #212]	; (800310c <Copy_upto+0xf8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6838      	ldr	r0, [r7, #0]
 8003042:	4403      	add	r3, r0
 8003044:	5c8a      	ldrb	r2, [r1, r2]
 8003046:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8003048:	4b30      	ldr	r3, [pc, #192]	; (800310c <Copy_upto+0xf8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	4b2e      	ldr	r3, [pc, #184]	; (800310c <Copy_upto+0xf8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800305a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	3301      	adds	r3, #1
 8003062:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8003064:	bf00      	nop
 8003066:	f7ff ff9d 	bl	8002fa4 <IsDataAvailable>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0fa      	beq.n	8003066 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8003070:	f7ff ffb2 	bl	8002fd8 <Uart_peek>
 8003074:	4601      	mov	r1, r0
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	4299      	cmp	r1, r3
 8003080:	d1d7      	bne.n	8003032 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8003082:	e027      	b.n	80030d4 <Copy_upto+0xc0>
	{
		so_far++;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3301      	adds	r3, #1
 8003088:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 800308a:	f7ff ff5f 	bl	8002f4c <Uart_read>
 800308e:	4601      	mov	r1, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	613a      	str	r2, [r7, #16]
 8003096:	461a      	mov	r2, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	4413      	add	r3, r2
 800309c:	b2ca      	uxtb	r2, r1
 800309e:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d101      	bne.n	80030ac <Copy_upto+0x98>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e02a      	b.n	8003102 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 80030ac:	4b18      	ldr	r3, [pc, #96]	; (8003110 <Copy_upto+0xfc>)
 80030ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80030b2:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80030b4:	bf00      	nop
 80030b6:	f7ff ff75 	bl	8002fa4 <IsDataAvailable>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <Copy_upto+0xb4>
 80030c0:	4b13      	ldr	r3, [pc, #76]	; (8003110 <Copy_upto+0xfc>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f6      	bne.n	80030b6 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <Copy_upto+0xfc>)
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <Copy_upto+0xc0>
 80030d0:	2300      	movs	r3, #0
 80030d2:	e016      	b.n	8003102 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 80030d4:	f7ff ff80 	bl	8002fd8 <Uart_peek>
 80030d8:	4601      	mov	r1, r0
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4413      	add	r3, r2
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	4299      	cmp	r1, r3
 80030e4:	d0ce      	beq.n	8003084 <Copy_upto+0x70>
	}

	if (so_far != len)
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d002      	beq.n	80030f4 <Copy_upto+0xe0>
	{
		so_far = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
		goto again;
 80030f2:	e79d      	b.n	8003030 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d101      	bne.n	8003100 <Copy_upto+0xec>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <Copy_upto+0xee>
	else return 0;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	2000073c 	.word	0x2000073c
 8003110:	20000328 	.word	0x20000328

08003114 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fd f915 	bl	8000350 <strlen>
 8003126:	4603      	mov	r3, r0
 8003128:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 800312a:	4b3c      	ldr	r3, [pc, #240]	; (800321c <Wait_for+0x108>)
 800312c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003130:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8003132:	bf00      	nop
 8003134:	f7ff ff36 	bl	8002fa4 <IsDataAvailable>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <Wait_for+0x32>
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <Wait_for+0x108>)
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f6      	bne.n	8003134 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8003146:	4b35      	ldr	r3, [pc, #212]	; (800321c <Wait_for+0x108>)
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d119      	bne.n	8003182 <Wait_for+0x6e>
 800314e:	2300      	movs	r3, #0
 8003150:	e060      	b.n	8003214 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8003152:	4b33      	ldr	r3, [pc, #204]	; (8003220 <Wait_for+0x10c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800315a:	4b31      	ldr	r3, [pc, #196]	; (8003220 <Wait_for+0x10c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003162:	429a      	cmp	r2, r3
 8003164:	d00b      	beq.n	800317e <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8003166:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <Wait_for+0x10c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	4b2b      	ldr	r3, [pc, #172]	; (8003220 <Wait_for+0x10c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003178:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800317c:	e001      	b.n	8003182 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 800317e:	2300      	movs	r3, #0
 8003180:	e048      	b.n	8003214 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8003182:	f7ff ff29 	bl	8002fd8 <Uart_peek>
 8003186:	4601      	mov	r1, r0
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	4299      	cmp	r1, r3
 8003192:	d1de      	bne.n	8003152 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8003194:	e027      	b.n	80031e6 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3301      	adds	r3, #1
 800319a:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800319c:	4b20      	ldr	r3, [pc, #128]	; (8003220 <Wait_for+0x10c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <Wait_for+0x10c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d101      	bne.n	80031be <Wait_for+0xaa>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e02a      	b.n	8003214 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <Wait_for+0x108>)
 80031c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80031c4:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80031c6:	bf00      	nop
 80031c8:	f7ff feec 	bl	8002fa4 <IsDataAvailable>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d103      	bne.n	80031da <Wait_for+0xc6>
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <Wait_for+0x108>)
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f6      	bne.n	80031c8 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <Wait_for+0x108>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <Wait_for+0xd2>
 80031e2:	2300      	movs	r3, #0
 80031e4:	e016      	b.n	8003214 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80031e6:	f7ff fef7 	bl	8002fd8 <Uart_peek>
 80031ea:	4601      	mov	r1, r0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	4299      	cmp	r1, r3
 80031f6:	d0ce      	beq.n	8003196 <Wait_for+0x82>
	}

	if (so_far != len)
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d002      	beq.n	8003206 <Wait_for+0xf2>
	{
		so_far = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
		goto again;
 8003204:	e791      	b.n	800312a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	d101      	bne.n	8003212 <Wait_for+0xfe>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <Wait_for+0x100>
	else return 0;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000328 	.word	0x20000328
 8003220:	2000073c 	.word	0x2000073c

08003224 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d013      	beq.n	800326e <Uart_isr+0x4a>
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800325e:	4b1e      	ldr	r3, [pc, #120]	; (80032d8 <Uart_isr+0xb4>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fe4c 	bl	8002f04 <store_char>
        return;
 800326c:	e031      	b.n	80032d2 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	2b00      	cmp	r3, #0
 8003276:	d02c      	beq.n	80032d2 <Uart_isr+0xae>
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d027      	beq.n	80032d2 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8003282:	4b16      	ldr	r3, [pc, #88]	; (80032dc <Uart_isr+0xb8>)
 8003284:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003288:	4b14      	ldr	r3, [pc, #80]	; (80032dc <Uart_isr+0xb8>)
 800328a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800328e:	429a      	cmp	r2, r3
 8003290:	d108      	bne.n	80032a4 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80032a2:	e015      	b.n	80032d0 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80032a4:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <Uart_isr+0xb8>)
 80032a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80032aa:	4a0c      	ldr	r2, [pc, #48]	; (80032dc <Uart_isr+0xb8>)
 80032ac:	5cd3      	ldrb	r3, [r2, r3]
 80032ae:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <Uart_isr+0xb8>)
 80032b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80032b6:	3301      	adds	r3, #1
 80032b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032bc:	4a07      	ldr	r2, [pc, #28]	; (80032dc <Uart_isr+0xb8>)
 80032be:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	7bba      	ldrb	r2, [r7, #14]
 80032ce:	605a      	str	r2, [r3, #4]
    	return;
 80032d0:	bf00      	nop
    }
}
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	2000073c 	.word	0x2000073c
 80032dc:	20000534 	.word	0x20000534

080032e0 <Ultasonic_voidInit>:
extern TIM_HandleTypeDef htim10;

const char Global_Inverse_Sound_Speed_In_MicroSecond_Centimeter = 58;

void Ultasonic_voidInit(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
	/* Making sure that the TRIG pin is LOW*/
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80032e4:	2200      	movs	r2, #0
 80032e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ea:	4804      	ldr	r0, [pc, #16]	; (80032fc <Ultasonic_voidInit+0x1c>)
 80032ec:	f001 fe88 	bl	8005000 <HAL_GPIO_WritePin>

	/* Making Sure that the Ultrasionic base timer is stopped */
	HAL_TIM_Base_Stop(Ultasonic_BASE_TIMER);
 80032f0:	4803      	ldr	r0, [pc, #12]	; (8003300 <Ultasonic_voidInit+0x20>)
 80032f2:	f003 fe47 	bl	8006f84 <HAL_TIM_Base_Stop>

}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40020400 	.word	0x40020400
 8003300:	200008c4 	.word	0x200008c4

08003304 <Ultrasonic_uint8Get_Distance_In_Cm>:

uint8_t Ultrasonic_uint8Get_Distance_In_Cm(uint16_t *Copy_Puint16Distance_Infront)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

	uint8_t  Local_uint8ErrorCode = Calculation_Failed;
 800330c:	2300      	movs	r3, #0
 800330e:	74fb      	strb	r3, [r7, #19]
	uint16_t Local_uint16Counts_Before = 0,Local_uint16Counts_After = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	823b      	strh	r3, [r7, #16]
 8003314:	2300      	movs	r3, #0
 8003316:	81fb      	strh	r3, [r7, #14]
	uint16_t Local_uint16Echo_ELapsed_Time_In_Micros = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	81bb      	strh	r3, [r7, #12]
	uint32_t Local_uint32Timeout = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]

	/* First is to Start the timer */
	HAL_TIM_Base_Start(Ultasonic_BASE_TIMER);
 8003320:	4835      	ldr	r0, [pc, #212]	; (80033f8 <Ultrasonic_uint8Get_Distance_In_Cm+0xf4>)
 8003322:	f003 fdc7 	bl	8006eb4 <HAL_TIM_Base_Start>

	/* For Synchronization, reseting the Counter by setting it to zero */
	__HAL_TIM_SET_COUNTER(Ultasonic_BASE_TIMER,0);
 8003326:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <Ultrasonic_uint8Get_Distance_In_Cm+0xf4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2200      	movs	r2, #0
 800332c:	625a      	str	r2, [r3, #36]	; 0x24

	/* Starting the TRIGGER to send the sound wave */
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 800332e:	2201      	movs	r2, #1
 8003330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003334:	4831      	ldr	r0, [pc, #196]	; (80033fc <Ultrasonic_uint8Get_Distance_In_Cm+0xf8>)
 8003336:	f001 fe63 	bl	8005000 <HAL_GPIO_WritePin>

	/* Waiting for 10Micro Seconds specified in the datasheet */
	while(__HAL_TIM_GET_COUNTER(Ultasonic_BASE_TIMER) < TRIG_PULSE_TIME_IN_MICROS);
 800333a:	bf00      	nop
 800333c:	4b2e      	ldr	r3, [pc, #184]	; (80033f8 <Ultrasonic_uint8Get_Distance_In_Cm+0xf4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b09      	cmp	r3, #9
 8003344:	d9fa      	bls.n	800333c <Ultrasonic_uint8Get_Distance_In_Cm+0x38>

	/* Setting the TRIG PIN as LOW */
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8003346:	2200      	movs	r2, #0
 8003348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800334c:	482b      	ldr	r0, [pc, #172]	; (80033fc <Ultrasonic_uint8Get_Distance_In_Cm+0xf8>)
 800334e:	f001 fe57 	bl	8005000 <HAL_GPIO_WritePin>

	/* Waiting till the ECHO PIN is HIGH or a timeout occurred at 10 milliseconds*/
	while(!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && (Local_uint32Timeout < TIMEOUT_INSTRUCTIONS_TO_10_Millis)) Local_uint32Timeout++;
 8003352:	e002      	b.n	800335a <Ultrasonic_uint8Get_Distance_In_Cm+0x56>
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	3301      	adds	r3, #1
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	2104      	movs	r1, #4
 800335c:	4828      	ldr	r0, [pc, #160]	; (8003400 <Ultrasonic_uint8Get_Distance_In_Cm+0xfc>)
 800335e:	f001 fe37 	bl	8004fd0 <HAL_GPIO_ReadPin>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d103      	bne.n	8003370 <Ultrasonic_uint8Get_Distance_In_Cm+0x6c>
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	4a26      	ldr	r2, [pc, #152]	; (8003404 <Ultrasonic_uint8Get_Distance_In_Cm+0x100>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d9f1      	bls.n	8003354 <Ultrasonic_uint8Get_Distance_In_Cm+0x50>

	/* Getting the start value which the ECHO is triggered*/
	Local_uint16Counts_Before = __HAL_TIM_GET_COUNTER(Ultasonic_BASE_TIMER);
 8003370:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <Ultrasonic_uint8Get_Distance_In_Cm+0xf4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	823b      	strh	r3, [r7, #16]

	if(Local_uint32Timeout == TIMEOUT_INSTRUCTIONS_TO_10_Millis)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	4a23      	ldr	r2, [pc, #140]	; (8003408 <Ultrasonic_uint8Get_Distance_In_Cm+0x104>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d106      	bne.n	800338e <Ultrasonic_uint8Get_Distance_In_Cm+0x8a>
	{
		/* Stopping the timer after completing the operation */
		HAL_TIM_Base_Stop(Ultasonic_BASE_TIMER);
 8003380:	481d      	ldr	r0, [pc, #116]	; (80033f8 <Ultrasonic_uint8Get_Distance_In_Cm+0xf4>)
 8003382:	f003 fdff 	bl	8006f84 <HAL_TIM_Base_Stop>

		/* Alert the user that something is wrong*/
		Local_uint8ErrorCode = Calculation_Failed;
 8003386:	2300      	movs	r3, #0
 8003388:	74fb      	strb	r3, [r7, #19]

		return Local_uint8ErrorCode;
 800338a:	7cfb      	ldrb	r3, [r7, #19]
 800338c:	e030      	b.n	80033f0 <Ultrasonic_uint8Get_Distance_In_Cm+0xec>
	}
	else
	{
		/* Resetting the timeout variable */
		Local_uint32Timeout = 0 ;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]

		/* Waiting till the ECHO is LOW to calculate the distance */
		while((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && (Local_uint32Timeout < TIMEOUT_INSTRUCTIONS_TO_25_Millis)) Local_uint32Timeout++;
 8003392:	e002      	b.n	800339a <Ultrasonic_uint8Get_Distance_In_Cm+0x96>
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3301      	adds	r3, #1
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	2104      	movs	r1, #4
 800339c:	4818      	ldr	r0, [pc, #96]	; (8003400 <Ultrasonic_uint8Get_Distance_In_Cm+0xfc>)
 800339e:	f001 fe17 	bl	8004fd0 <HAL_GPIO_ReadPin>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <Ultrasonic_uint8Get_Distance_In_Cm+0xac>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	4a18      	ldr	r2, [pc, #96]	; (800340c <Ultrasonic_uint8Get_Distance_In_Cm+0x108>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d9f1      	bls.n	8003394 <Ultrasonic_uint8Get_Distance_In_Cm+0x90>

		/* Getting the end value after the ECHO is back to reset */
		Local_uint16Counts_After = __HAL_TIM_GET_COUNTER(Ultasonic_BASE_TIMER);
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <Ultrasonic_uint8Get_Distance_In_Cm+0xf4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	81fb      	strh	r3, [r7, #14]

		if(Local_uint32Timeout == TIMEOUT_INSTRUCTIONS_TO_25_Millis)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	4a15      	ldr	r2, [pc, #84]	; (8003410 <Ultrasonic_uint8Get_Distance_In_Cm+0x10c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d106      	bne.n	80033ce <Ultrasonic_uint8Get_Distance_In_Cm+0xca>
		{
			/* Stopping the timer after completing the operation */
			HAL_TIM_Base_Stop(Ultasonic_BASE_TIMER);
 80033c0:	480d      	ldr	r0, [pc, #52]	; (80033f8 <Ultrasonic_uint8Get_Distance_In_Cm+0xf4>)
 80033c2:	f003 fddf 	bl	8006f84 <HAL_TIM_Base_Stop>

			/* Alert the user that something is wrong*/
			Local_uint8ErrorCode = TIMEOUT_ECHO_OCCURED;
 80033c6:	2302      	movs	r3, #2
 80033c8:	74fb      	strb	r3, [r7, #19]

			return Local_uint8ErrorCode;
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	e010      	b.n	80033f0 <Ultrasonic_uint8Get_Distance_In_Cm+0xec>

		}
		else
		{
			/* Calculating the time which the ECHO pin is high for */
			Local_uint16Echo_ELapsed_Time_In_Micros = Local_uint16Counts_After - Local_uint16Counts_Before;
 80033ce:	89fa      	ldrh	r2, [r7, #14]
 80033d0:	8a3b      	ldrh	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	81bb      	strh	r3, [r7, #12]

			/* Calculating the Distance in centimeters & Change the user distance variable with the calculated one*/
			*Copy_Puint16Distance_Infront =(Local_uint16Echo_ELapsed_Time_In_Micros / Global_Inverse_Sound_Speed_In_MicroSecond_Centimeter );
 80033d6:	89bb      	ldrh	r3, [r7, #12]
 80033d8:	223a      	movs	r2, #58	; 0x3a
 80033da:	fb93 f3f2 	sdiv	r3, r3, r2
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	801a      	strh	r2, [r3, #0]

			/* Stopping the timer after completing the operation */
			HAL_TIM_Base_Stop(Ultasonic_BASE_TIMER);
 80033e4:	4804      	ldr	r0, [pc, #16]	; (80033f8 <Ultrasonic_uint8Get_Distance_In_Cm+0xf4>)
 80033e6:	f003 fdcd 	bl	8006f84 <HAL_TIM_Base_Stop>

			/* Updating the Error code to alert the user with the calculation success*/
			Local_uint8ErrorCode = Calculation_Success;
 80033ea:	2301      	movs	r3, #1
 80033ec:	74fb      	strb	r3, [r7, #19]

			return Local_uint8ErrorCode;
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
		}

	}

}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	200008c4 	.word	0x200008c4
 80033fc:	40020400 	.word	0x40020400
 8003400:	40020c00 	.word	0x40020c00
 8003404:	000270ff 	.word	0x000270ff
 8003408:	00027100 	.word	0x00027100
 800340c:	00061a7f 	.word	0x00061a7f
 8003410:	00061a80 	.word	0x00061a80
 8003414:	00000000 	.word	0x00000000

08003418 <Calculate_Car_Speed>:
#include "calculateSpeed.h"

extern uint32_t edges_counter;

float Calculate_Car_Speed()
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
	float Local_uint16Speed;
	Local_uint16Speed = (edges_counter * 360 /50) * 2 * 3.14 * 0.03;
 800341e:	4b1c      	ldr	r3, [pc, #112]	; (8003490 <Calculate_Car_Speed+0x78>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <Calculate_Car_Speed+0x7c>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd f8d5 	bl	80005e4 <__aeabi_ui2d>
 800343a:	a311      	add	r3, pc, #68	; (adr r3, 8003480 <Calculate_Car_Speed+0x68>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	f7fd f94a 	bl	80006d8 <__aeabi_dmul>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4610      	mov	r0, r2
 800344a:	4619      	mov	r1, r3
 800344c:	a30e      	add	r3, pc, #56	; (adr r3, 8003488 <Calculate_Car_Speed+0x70>)
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	f7fd f941 	bl	80006d8 <__aeabi_dmul>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4610      	mov	r0, r2
 800345c:	4619      	mov	r1, r3
 800345e:	f7fd fc33 	bl	8000cc8 <__aeabi_d2f>
 8003462:	4603      	mov	r3, r0
 8003464:	607b      	str	r3, [r7, #4]
	edges_counter=0;
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <Calculate_Car_Speed+0x78>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
	return Local_uint16Speed;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	ee07 3a90 	vmov	s15, r3
}
 8003472:	eeb0 0a67 	vmov.f32	s0, s15
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	f3af 8000 	nop.w
 8003480:	51eb851f 	.word	0x51eb851f
 8003484:	40091eb8 	.word	0x40091eb8
 8003488:	eb851eb8 	.word	0xeb851eb8
 800348c:	3f9eb851 	.word	0x3f9eb851
 8003490:	20000214 	.word	0x20000214
 8003494:	51eb851f 	.word	0x51eb851f

08003498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08c      	sub	sp, #48	; 0x30
 800349c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800349e:	f001 fa29 	bl	80048f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034a2:	f000 f9bd 	bl	8003820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034a6:	f000 fc95 	bl	8003dd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80034aa:	f000 fa19 	bl	80038e0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80034ae:	f000 fc13 	bl	8003cd8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80034b2:	f000 fc3b 	bl	8003d2c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80034b6:	f000 fa6f 	bl	8003998 <MX_TIM2_Init>
  MX_I2C2_Init();
 80034ba:	f000 fa3f 	bl	800393c <MX_I2C2_Init>
  MX_TIM3_Init();
 80034be:	f000 fac9 	bl	8003a54 <MX_TIM3_Init>
  MX_TIM6_Init();
 80034c2:	f000 fb41 	bl	8003b48 <MX_TIM6_Init>
  MX_TIM12_Init();
 80034c6:	f000 fb99 	bl	8003bfc <MX_TIM12_Init>
  MX_USART6_UART_Init();
 80034ca:	f000 fc59 	bl	8003d80 <MX_USART6_UART_Init>
  MX_UART4_Init();
 80034ce:	f000 fbd9 	bl	8003c84 <MX_UART4_Init>
  MX_TIM10_Init();
 80034d2:	f000 fb6f 	bl	8003bb4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	/********************************Hardware_Initializing*********************************************/
	LCD_voidInit();
 80034d6:	f7fe fb5d 	bl	8001b94 <LCD_voidInit>
    Ultasonic_voidInit();
 80034da:	f7ff ff01 	bl	80032e0 <Ultasonic_voidInit>
    GPS_voidInit();
 80034de:	f7fe f999 	bl	8001814 <GPS_voidInit>
	LightSensor_voidInit();
 80034e2:	f7fe fc82 	bl	8001dea <LightSensor_voidInit>

	/********************************Interrupts_Starting***********************************************/
	HAL_UART_Receive_IT(&huart4,&ESP_Recieved_Char ,2);              //ESP
 80034e6:	2202      	movs	r2, #2
 80034e8:	499a      	ldr	r1, [pc, #616]	; (8003754 <main+0x2bc>)
 80034ea:	489b      	ldr	r0, [pc, #620]	; (8003758 <main+0x2c0>)
 80034ec:	f005 f875 	bl	80085da <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6,&Rasp_Recieved_Char,2);				 //Raspberry Recieve
 80034f0:	2202      	movs	r2, #2
 80034f2:	499a      	ldr	r1, [pc, #616]	; (800375c <main+0x2c4>)
 80034f4:	489a      	ldr	r0, [pc, #616]	; (8003760 <main+0x2c8>)
 80034f6:	f005 f870 	bl	80085da <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3,&received_char , 1);                 //Bluetooth
 80034fa:	2201      	movs	r2, #1
 80034fc:	4999      	ldr	r1, [pc, #612]	; (8003764 <main+0x2cc>)
 80034fe:	489a      	ldr	r0, [pc, #616]	; (8003768 <main+0x2d0>)
 8003500:	f005 f86b 	bl	80085da <HAL_UART_Receive_IT>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);                      //Speed
 8003504:	4b99      	ldr	r3, [pc, #612]	; (800376c <main+0x2d4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	4b98      	ldr	r3, [pc, #608]	; (800376c <main+0x2d4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	60da      	str	r2, [r3, #12]
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);                      //Speed
 8003514:	2100      	movs	r1, #0
 8003516:	4895      	ldr	r0, [pc, #596]	; (800376c <main+0x2d4>)
 8003518:	f003 ffa4 	bl	8007464 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);                      //Speed
 800351c:	2104      	movs	r1, #4
 800351e:	4893      	ldr	r0, [pc, #588]	; (800376c <main+0x2d4>)
 8003520:	f003 ffa0 	bl	8007464 <HAL_TIM_IC_Start_IT>
	//
	//	SEGGER_SYSVIEW_Start();
	//>>>>>>> Stashed change

	/************************************SW_Timers_Creation********************************************/
	Handle_Timer_RecieveESP= xTimerCreate("Timer_RecieveEsp", pdMS_TO_TICKS(7000), pdFALSE, &ID_TImer_RecieveESP, CallBack_TimerLCDBuzzer);
 8003524:	4b92      	ldr	r3, [pc, #584]	; (8003770 <main+0x2d8>)
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	4b92      	ldr	r3, [pc, #584]	; (8003774 <main+0x2dc>)
 800352a:	2200      	movs	r2, #0
 800352c:	f641 3158 	movw	r1, #7000	; 0x1b58
 8003530:	4891      	ldr	r0, [pc, #580]	; (8003778 <main+0x2e0>)
 8003532:	f008 fba5 	bl	800bc80 <xTimerCreate>
 8003536:	4603      	mov	r3, r0
 8003538:	4a90      	ldr	r2, [pc, #576]	; (800377c <main+0x2e4>)
 800353a:	6013      	str	r3, [r2, #0]
	Handle_Timer_Breaking_Status = xTimerCreate("Breaking_Status_Elimination", pdMS_TO_TICKS(1500), pdFALSE, &ID_TImer_Breaking_Status, CallBack_TimerBreakingStatus);
 800353c:	4b90      	ldr	r3, [pc, #576]	; (8003780 <main+0x2e8>)
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	4b90      	ldr	r3, [pc, #576]	; (8003784 <main+0x2ec>)
 8003542:	2200      	movs	r2, #0
 8003544:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003548:	488f      	ldr	r0, [pc, #572]	; (8003788 <main+0x2f0>)
 800354a:	f008 fb99 	bl	800bc80 <xTimerCreate>
 800354e:	4603      	mov	r3, r0
 8003550:	4a8e      	ldr	r2, [pc, #568]	; (800378c <main+0x2f4>)
 8003552:	6013      	str	r3, [r2, #0]

	/************************************TASKS_Creation************************************************/
	Status_GPS = xTaskCreate(TASK_GPS, "GPS", 150, NULL, Priority_TASK_GPS, &Handle_GPS);
 8003554:	4b8e      	ldr	r3, [pc, #568]	; (8003790 <main+0x2f8>)
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	2302      	movs	r3, #2
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	2300      	movs	r3, #0
 800355e:	2296      	movs	r2, #150	; 0x96
 8003560:	498c      	ldr	r1, [pc, #560]	; (8003794 <main+0x2fc>)
 8003562:	488d      	ldr	r0, [pc, #564]	; (8003798 <main+0x300>)
 8003564:	f006 fe24 	bl	800a1b0 <xTaskCreate>
 8003568:	4603      	mov	r3, r0
 800356a:	4a8c      	ldr	r2, [pc, #560]	; (800379c <main+0x304>)
 800356c:	6013      	str	r3, [r2, #0]

	configASSERT(Status_GPS == pdPASS);
 800356e:	4b8b      	ldr	r3, [pc, #556]	; (800379c <main+0x304>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d00a      	beq.n	800358c <main+0xf4>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003588:	bf00      	nop
 800358a:	e7fe      	b.n	800358a <main+0xf2>

	Status_CarControl = xTaskCreate(TASK_CarControl, "CarControl", 200, NULL, Priority_TASK_CarControl, &Handle_CarControl);
 800358c:	4b84      	ldr	r3, [pc, #528]	; (80037a0 <main+0x308>)
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	2303      	movs	r3, #3
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2300      	movs	r3, #0
 8003596:	22c8      	movs	r2, #200	; 0xc8
 8003598:	4982      	ldr	r1, [pc, #520]	; (80037a4 <main+0x30c>)
 800359a:	4883      	ldr	r0, [pc, #524]	; (80037a8 <main+0x310>)
 800359c:	f006 fe08 	bl	800a1b0 <xTaskCreate>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4a82      	ldr	r2, [pc, #520]	; (80037ac <main+0x314>)
 80035a4:	6013      	str	r3, [r2, #0]

	configASSERT(Status_CarControl == pdPASS);
 80035a6:	4b81      	ldr	r3, [pc, #516]	; (80037ac <main+0x314>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d00a      	beq.n	80035c4 <main+0x12c>
        __asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	623b      	str	r3, [r7, #32]
    }
 80035c0:	bf00      	nop
 80035c2:	e7fe      	b.n	80035c2 <main+0x12a>

	Status_ESP_Periodic = xTaskCreate(TASK_ESPSend_PeriodicData, "ESP_Periodic", 200, NULL, Priority_TASK_ESP_Periodic, &Handle_ESP_Periodic);
 80035c4:	4b7a      	ldr	r3, [pc, #488]	; (80037b0 <main+0x318>)
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	2302      	movs	r3, #2
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2300      	movs	r3, #0
 80035ce:	22c8      	movs	r2, #200	; 0xc8
 80035d0:	4978      	ldr	r1, [pc, #480]	; (80037b4 <main+0x31c>)
 80035d2:	4879      	ldr	r0, [pc, #484]	; (80037b8 <main+0x320>)
 80035d4:	f006 fdec 	bl	800a1b0 <xTaskCreate>
 80035d8:	4603      	mov	r3, r0
 80035da:	4a78      	ldr	r2, [pc, #480]	; (80037bc <main+0x324>)
 80035dc:	6013      	str	r3, [r2, #0]

	configASSERT(Status_ESP_Periodic == pdPASS);
 80035de:	4b77      	ldr	r3, [pc, #476]	; (80037bc <main+0x324>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d00a      	beq.n	80035fc <main+0x164>
        __asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	61fb      	str	r3, [r7, #28]
    }
 80035f8:	bf00      	nop
 80035fa:	e7fe      	b.n	80035fa <main+0x162>

	Status_ESP_Status = xTaskCreate(TASK_ESP_SendStatus, "ESP_Status", 200, NULL, Priority_TASK_ESP_Status, &Handle_ESP_Status);
 80035fc:	4b70      	ldr	r3, [pc, #448]	; (80037c0 <main+0x328>)
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	2303      	movs	r3, #3
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	2300      	movs	r3, #0
 8003606:	22c8      	movs	r2, #200	; 0xc8
 8003608:	496e      	ldr	r1, [pc, #440]	; (80037c4 <main+0x32c>)
 800360a:	486f      	ldr	r0, [pc, #444]	; (80037c8 <main+0x330>)
 800360c:	f006 fdd0 	bl	800a1b0 <xTaskCreate>
 8003610:	4603      	mov	r3, r0
 8003612:	4a6e      	ldr	r2, [pc, #440]	; (80037cc <main+0x334>)
 8003614:	6013      	str	r3, [r2, #0]

	configASSERT(Status_ESP_Status == pdPASS);
 8003616:	4b6d      	ldr	r3, [pc, #436]	; (80037cc <main+0x334>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d00a      	beq.n	8003634 <main+0x19c>
        __asm volatile
 800361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	61bb      	str	r3, [r7, #24]
    }
 8003630:	bf00      	nop
 8003632:	e7fe      	b.n	8003632 <main+0x19a>

	Status_ESP_Receive = xTaskCreate(TASK_ESP_Receive, "ESP_Receive", 200, NULL, Priority_TASK_ESP_Receive, &Handle_ESP_Receive);
 8003634:	4b66      	ldr	r3, [pc, #408]	; (80037d0 <main+0x338>)
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	2303      	movs	r3, #3
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	2300      	movs	r3, #0
 800363e:	22c8      	movs	r2, #200	; 0xc8
 8003640:	4964      	ldr	r1, [pc, #400]	; (80037d4 <main+0x33c>)
 8003642:	4865      	ldr	r0, [pc, #404]	; (80037d8 <main+0x340>)
 8003644:	f006 fdb4 	bl	800a1b0 <xTaskCreate>
 8003648:	4603      	mov	r3, r0
 800364a:	4a64      	ldr	r2, [pc, #400]	; (80037dc <main+0x344>)
 800364c:	6013      	str	r3, [r2, #0]

	configASSERT(Status_ESP_Receive == pdPASS);
 800364e:	4b63      	ldr	r3, [pc, #396]	; (80037dc <main+0x344>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d00a      	beq.n	800366c <main+0x1d4>
        __asm volatile
 8003656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365a:	f383 8811 	msr	BASEPRI, r3
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	617b      	str	r3, [r7, #20]
    }
 8003668:	bf00      	nop
 800366a:	e7fe      	b.n	800366a <main+0x1d2>

	Status_LightSensor = xTaskCreate(TASK_LightSensor, "LightSensor", 200, NULL, Priority_TASK_LightSensor, &Handle_LightSensor);
 800366c:	4b5c      	ldr	r3, [pc, #368]	; (80037e0 <main+0x348>)
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	2302      	movs	r3, #2
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	2300      	movs	r3, #0
 8003676:	22c8      	movs	r2, #200	; 0xc8
 8003678:	495a      	ldr	r1, [pc, #360]	; (80037e4 <main+0x34c>)
 800367a:	485b      	ldr	r0, [pc, #364]	; (80037e8 <main+0x350>)
 800367c:	f006 fd98 	bl	800a1b0 <xTaskCreate>
 8003680:	4603      	mov	r3, r0
 8003682:	4a5a      	ldr	r2, [pc, #360]	; (80037ec <main+0x354>)
 8003684:	6013      	str	r3, [r2, #0]

	configASSERT(Status_LightSensor == pdPASS);
 8003686:	4b59      	ldr	r3, [pc, #356]	; (80037ec <main+0x354>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d00a      	beq.n	80036a4 <main+0x20c>
        __asm volatile
 800368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003692:	f383 8811 	msr	BASEPRI, r3
 8003696:	f3bf 8f6f 	isb	sy
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	613b      	str	r3, [r7, #16]
    }
 80036a0:	bf00      	nop
 80036a2:	e7fe      	b.n	80036a2 <main+0x20a>

	Status_Distance_AboveThreshold = xTaskCreate(TASK_Distance_AboveThreshold, "D_Above_T", 150, NULL ,Priority_TASK_Distance_AboveThreshold, &Handle_Distance_AboveThreshold);
 80036a4:	4b52      	ldr	r3, [pc, #328]	; (80037f0 <main+0x358>)
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	2302      	movs	r3, #2
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	2300      	movs	r3, #0
 80036ae:	2296      	movs	r2, #150	; 0x96
 80036b0:	4950      	ldr	r1, [pc, #320]	; (80037f4 <main+0x35c>)
 80036b2:	4851      	ldr	r0, [pc, #324]	; (80037f8 <main+0x360>)
 80036b4:	f006 fd7c 	bl	800a1b0 <xTaskCreate>
 80036b8:	4603      	mov	r3, r0
 80036ba:	4a50      	ldr	r2, [pc, #320]	; (80037fc <main+0x364>)
 80036bc:	6013      	str	r3, [r2, #0]

	configASSERT(Status_Distance_AboveThreshold == pdPASS);
 80036be:	4b4f      	ldr	r3, [pc, #316]	; (80037fc <main+0x364>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d00a      	beq.n	80036dc <main+0x244>
        __asm volatile
 80036c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	60fb      	str	r3, [r7, #12]
    }
 80036d8:	bf00      	nop
 80036da:	e7fe      	b.n	80036da <main+0x242>

	Status_Rasp_Receive = xTaskCreate(TASK_Rasp_Receive, "Rasp_Recieve", 200, NULL ,Priority_TASK_Rasp_Recieve, &Handle_Rasp_ReceiveData);
 80036dc:	4b48      	ldr	r3, [pc, #288]	; (8003800 <main+0x368>)
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	2303      	movs	r3, #3
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	22c8      	movs	r2, #200	; 0xc8
 80036e8:	4946      	ldr	r1, [pc, #280]	; (8003804 <main+0x36c>)
 80036ea:	4847      	ldr	r0, [pc, #284]	; (8003808 <main+0x370>)
 80036ec:	f006 fd60 	bl	800a1b0 <xTaskCreate>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4a46      	ldr	r2, [pc, #280]	; (800380c <main+0x374>)
 80036f4:	6013      	str	r3, [r2, #0]

	configASSERT(Status_Rasp_Receive == pdPASS);
 80036f6:	4b45      	ldr	r3, [pc, #276]	; (800380c <main+0x374>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d00a      	beq.n	8003714 <main+0x27c>
        __asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	60bb      	str	r3, [r7, #8]
    }
 8003710:	bf00      	nop
 8003712:	e7fe      	b.n	8003712 <main+0x27a>

	Status_Rasp_Send = xTaskCreate(TASK_Rasp_Send, "Rasp_Send", 200, NULL ,Priority_TASK_Rasp_Send, &Handle_Rasp_SendData);
 8003714:	4b3e      	ldr	r3, [pc, #248]	; (8003810 <main+0x378>)
 8003716:	9301      	str	r3, [sp, #4]
 8003718:	2303      	movs	r3, #3
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	2300      	movs	r3, #0
 800371e:	22c8      	movs	r2, #200	; 0xc8
 8003720:	493c      	ldr	r1, [pc, #240]	; (8003814 <main+0x37c>)
 8003722:	483d      	ldr	r0, [pc, #244]	; (8003818 <main+0x380>)
 8003724:	f006 fd44 	bl	800a1b0 <xTaskCreate>
 8003728:	4603      	mov	r3, r0
 800372a:	4a3c      	ldr	r2, [pc, #240]	; (800381c <main+0x384>)
 800372c:	6013      	str	r3, [r2, #0]

	configASSERT(Status_Rasp_Send == pdPASS);
 800372e:	4b3b      	ldr	r3, [pc, #236]	; (800381c <main+0x384>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d00a      	beq.n	800374c <main+0x2b4>
        __asm volatile
 8003736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	607b      	str	r3, [r7, #4]
    }
 8003748:	bf00      	nop
 800374a:	e7fe      	b.n	800374a <main+0x2b2>

	/**********************************Schedular_Starting********************************************/
	vTaskStartScheduler();
 800374c:	f007 f862 	bl	800a814 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8003750:	e7fe      	b.n	8003750 <main+0x2b8>
 8003752:	bf00      	nop
 8003754:	20000a65 	.word	0x20000a65
 8003758:	20000954 	.word	0x20000954
 800375c:	20000a66 	.word	0x20000a66
 8003760:	20000a20 	.word	0x20000a20
 8003764:	20000a64 	.word	0x20000a64
 8003768:	200009dc 	.word	0x200009dc
 800376c:	200007ec 	.word	0x200007ec
 8003770:	080013f9 	.word	0x080013f9
 8003774:	20000004 	.word	0x20000004
 8003778:	08012324 	.word	0x08012324
 800377c:	20000ab0 	.word	0x20000ab0
 8003780:	0800141d 	.word	0x0800141d
 8003784:	20000005 	.word	0x20000005
 8003788:	08012338 	.word	0x08012338
 800378c:	20000ab4 	.word	0x20000ab4
 8003790:	20000a6c 	.word	0x20000a6c
 8003794:	08012354 	.word	0x08012354
 8003798:	080028a5 	.word	0x080028a5
 800379c:	20000a90 	.word	0x20000a90
 80037a0:	20000a68 	.word	0x20000a68
 80037a4:	08012358 	.word	0x08012358
 80037a8:	080028fd 	.word	0x080028fd
 80037ac:	20000a8c 	.word	0x20000a8c
 80037b0:	20000a70 	.word	0x20000a70
 80037b4:	08012364 	.word	0x08012364
 80037b8:	08002ae1 	.word	0x08002ae1
 80037bc:	20000a94 	.word	0x20000a94
 80037c0:	20000a74 	.word	0x20000a74
 80037c4:	08012374 	.word	0x08012374
 80037c8:	08002b59 	.word	0x08002b59
 80037cc:	20000a98 	.word	0x20000a98
 80037d0:	20000a78 	.word	0x20000a78
 80037d4:	08012380 	.word	0x08012380
 80037d8:	08002bd5 	.word	0x08002bd5
 80037dc:	20000a9c 	.word	0x20000a9c
 80037e0:	20000a7c 	.word	0x20000a7c
 80037e4:	0801238c 	.word	0x0801238c
 80037e8:	08002a99 	.word	0x08002a99
 80037ec:	20000aa0 	.word	0x20000aa0
 80037f0:	20000a80 	.word	0x20000a80
 80037f4:	08012398 	.word	0x08012398
 80037f8:	08002cf5 	.word	0x08002cf5
 80037fc:	20000aa4 	.word	0x20000aa4
 8003800:	20000a84 	.word	0x20000a84
 8003804:	080123a4 	.word	0x080123a4
 8003808:	08002da1 	.word	0x08002da1
 800380c:	20000aa8 	.word	0x20000aa8
 8003810:	20000a88 	.word	0x20000a88
 8003814:	080123b4 	.word	0x080123b4
 8003818:	08002e79 	.word	0x08002e79
 800381c:	20000aac 	.word	0x20000aac

08003820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b094      	sub	sp, #80	; 0x50
 8003824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003826:	f107 031c 	add.w	r3, r7, #28
 800382a:	2234      	movs	r2, #52	; 0x34
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f00b fc73 	bl	800f11a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003834:	f107 0308 	add.w	r3, r7, #8
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003844:	2300      	movs	r3, #0
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <SystemClock_Config+0xb8>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <SystemClock_Config+0xb8>)
 800384e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003852:	6413      	str	r3, [r2, #64]	; 0x40
 8003854:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <SystemClock_Config+0xb8>)
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003860:	2300      	movs	r3, #0
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <SystemClock_Config+0xbc>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800386c:	4a1b      	ldr	r2, [pc, #108]	; (80038dc <SystemClock_Config+0xbc>)
 800386e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <SystemClock_Config+0xbc>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003880:	2302      	movs	r3, #2
 8003882:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003884:	2301      	movs	r3, #1
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003888:	2310      	movs	r3, #16
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800388c:	2300      	movs	r3, #0
 800388e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003890:	f107 031c 	add.w	r3, r7, #28
 8003894:	4618      	mov	r0, r3
 8003896:	f003 f81f 	bl	80068d8 <HAL_RCC_OscConfig>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80038a0:	f000 fb40 	bl	8003f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038a4:	230f      	movs	r3, #15
 80038a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80038b8:	f107 0308 	add.w	r3, r7, #8
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f002 fd14 	bl	80062ec <HAL_RCC_ClockConfig>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80038ca:	f000 fb2b 	bl	8003f24 <Error_Handler>
  }
}
 80038ce:	bf00      	nop
 80038d0:	3750      	adds	r7, #80	; 0x50
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40007000 	.word	0x40007000

080038e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80038e4:	4b13      	ldr	r3, [pc, #76]	; (8003934 <MX_I2C1_Init+0x54>)
 80038e6:	4a14      	ldr	r2, [pc, #80]	; (8003938 <MX_I2C1_Init+0x58>)
 80038e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 1000;
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <MX_I2C1_Init+0x54>)
 80038ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038f0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <MX_I2C1_Init+0x54>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80038f8:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <MX_I2C1_Init+0x54>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <MX_I2C1_Init+0x54>)
 8003900:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003904:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <MX_I2C1_Init+0x54>)
 8003908:	2200      	movs	r2, #0
 800390a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <MX_I2C1_Init+0x54>)
 800390e:	2200      	movs	r2, #0
 8003910:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <MX_I2C1_Init+0x54>)
 8003914:	2200      	movs	r2, #0
 8003916:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <MX_I2C1_Init+0x54>)
 800391a:	2200      	movs	r2, #0
 800391c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800391e:	4805      	ldr	r0, [pc, #20]	; (8003934 <MX_I2C1_Init+0x54>)
 8003920:	f001 fb88 	bl	8005034 <HAL_I2C_Init>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800392a:	f000 fafb 	bl	8003f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000744 	.word	0x20000744
 8003938:	40005400 	.word	0x40005400

0800393c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003940:	4b13      	ldr	r3, [pc, #76]	; (8003990 <MX_I2C2_Init+0x54>)
 8003942:	4a14      	ldr	r2, [pc, #80]	; (8003994 <MX_I2C2_Init+0x58>)
 8003944:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 1000;
 8003946:	4b12      	ldr	r3, [pc, #72]	; (8003990 <MX_I2C2_Init+0x54>)
 8003948:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800394c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <MX_I2C2_Init+0x54>)
 8003950:	2200      	movs	r2, #0
 8003952:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 120;
 8003954:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <MX_I2C2_Init+0x54>)
 8003956:	2278      	movs	r2, #120	; 0x78
 8003958:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <MX_I2C2_Init+0x54>)
 800395c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003960:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <MX_I2C2_Init+0x54>)
 8003964:	2200      	movs	r2, #0
 8003966:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <MX_I2C2_Init+0x54>)
 800396a:	2200      	movs	r2, #0
 800396c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <MX_I2C2_Init+0x54>)
 8003970:	2200      	movs	r2, #0
 8003972:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <MX_I2C2_Init+0x54>)
 8003976:	2200      	movs	r2, #0
 8003978:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800397a:	4805      	ldr	r0, [pc, #20]	; (8003990 <MX_I2C2_Init+0x54>)
 800397c:	f001 fb5a 	bl	8005034 <HAL_I2C_Init>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8003986:	f000 facd 	bl	8003f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000798 	.word	0x20000798
 8003994:	40005800 	.word	0x40005800

08003998 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800399e:	f107 0310 	add.w	r3, r7, #16
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80039a8:	463b      	mov	r3, r7
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	605a      	str	r2, [r3, #4]
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039b4:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <MX_TIM2_Init+0xb8>)
 80039b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80039bc:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <MX_TIM2_Init+0xb8>)
 80039be:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80039c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c4:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <MX_TIM2_Init+0xb8>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80039ca:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <MX_TIM2_Init+0xb8>)
 80039cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039d2:	4b1f      	ldr	r3, [pc, #124]	; (8003a50 <MX_TIM2_Init+0xb8>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039d8:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <MX_TIM2_Init+0xb8>)
 80039da:	2280      	movs	r2, #128	; 0x80
 80039dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80039de:	481c      	ldr	r0, [pc, #112]	; (8003a50 <MX_TIM2_Init+0xb8>)
 80039e0:	f003 fcf0 	bl	80073c4 <HAL_TIM_IC_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80039ea:	f000 fa9b 	bl	8003f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ee:	2300      	movs	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039f6:	f107 0310 	add.w	r3, r7, #16
 80039fa:	4619      	mov	r1, r3
 80039fc:	4814      	ldr	r0, [pc, #80]	; (8003a50 <MX_TIM2_Init+0xb8>)
 80039fe:	f004 fc7d 	bl	80082fc <HAL_TIMEx_MasterConfigSynchronization>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003a08:	f000 fa8c 	bl	8003f24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003a10:	2301      	movs	r3, #1
 8003a12:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	2200      	movs	r2, #0
 8003a20:	4619      	mov	r1, r3
 8003a22:	480b      	ldr	r0, [pc, #44]	; (8003a50 <MX_TIM2_Init+0xb8>)
 8003a24:	f003 ff4e 	bl	80078c4 <HAL_TIM_IC_ConfigChannel>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003a2e:	f000 fa79 	bl	8003f24 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003a32:	463b      	mov	r3, r7
 8003a34:	2204      	movs	r2, #4
 8003a36:	4619      	mov	r1, r3
 8003a38:	4805      	ldr	r0, [pc, #20]	; (8003a50 <MX_TIM2_Init+0xb8>)
 8003a3a:	f003 ff43 	bl	80078c4 <HAL_TIM_IC_ConfigChannel>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8003a44:	f000 fa6e 	bl	8003f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a48:	bf00      	nop
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	200007ec 	.word	0x200007ec

08003a54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	; 0x28
 8003a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a5a:	f107 0320 	add.w	r3, r7, #32
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a64:	1d3b      	adds	r3, r7, #4
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	605a      	str	r2, [r3, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
 8003a6e:	60da      	str	r2, [r3, #12]
 8003a70:	611a      	str	r2, [r3, #16]
 8003a72:	615a      	str	r2, [r3, #20]
 8003a74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a76:	4b32      	ldr	r3, [pc, #200]	; (8003b40 <MX_TIM3_Init+0xec>)
 8003a78:	4a32      	ldr	r2, [pc, #200]	; (8003b44 <MX_TIM3_Init+0xf0>)
 8003a7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8003a7c:	4b30      	ldr	r3, [pc, #192]	; (8003b40 <MX_TIM3_Init+0xec>)
 8003a7e:	229f      	movs	r2, #159	; 0x9f
 8003a80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a82:	4b2f      	ldr	r3, [pc, #188]	; (8003b40 <MX_TIM3_Init+0xec>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003a88:	4b2d      	ldr	r3, [pc, #180]	; (8003b40 <MX_TIM3_Init+0xec>)
 8003a8a:	2263      	movs	r2, #99	; 0x63
 8003a8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a8e:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <MX_TIM3_Init+0xec>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a94:	4b2a      	ldr	r3, [pc, #168]	; (8003b40 <MX_TIM3_Init+0xec>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a9a:	4829      	ldr	r0, [pc, #164]	; (8003b40 <MX_TIM3_Init+0xec>)
 8003a9c:	f003 fb0a 	bl	80070b4 <HAL_TIM_PWM_Init>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8003aa6:	f000 fa3d 	bl	8003f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ab2:	f107 0320 	add.w	r3, r7, #32
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4821      	ldr	r0, [pc, #132]	; (8003b40 <MX_TIM3_Init+0xec>)
 8003aba:	f004 fc1f 	bl	80082fc <HAL_TIMEx_MasterConfigSynchronization>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8003ac4:	f000 fa2e 	bl	8003f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ac8:	2360      	movs	r3, #96	; 0x60
 8003aca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	2200      	movs	r2, #0
 8003adc:	4619      	mov	r1, r3
 8003ade:	4818      	ldr	r0, [pc, #96]	; (8003b40 <MX_TIM3_Init+0xec>)
 8003ae0:	f003 ff8c 	bl	80079fc <HAL_TIM_PWM_ConfigChannel>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003aea:	f000 fa1b 	bl	8003f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003aee:	1d3b      	adds	r3, r7, #4
 8003af0:	2204      	movs	r2, #4
 8003af2:	4619      	mov	r1, r3
 8003af4:	4812      	ldr	r0, [pc, #72]	; (8003b40 <MX_TIM3_Init+0xec>)
 8003af6:	f003 ff81 	bl	80079fc <HAL_TIM_PWM_ConfigChannel>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003b00:	f000 fa10 	bl	8003f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b04:	1d3b      	adds	r3, r7, #4
 8003b06:	2208      	movs	r2, #8
 8003b08:	4619      	mov	r1, r3
 8003b0a:	480d      	ldr	r0, [pc, #52]	; (8003b40 <MX_TIM3_Init+0xec>)
 8003b0c:	f003 ff76 	bl	80079fc <HAL_TIM_PWM_ConfigChannel>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8003b16:	f000 fa05 	bl	8003f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	220c      	movs	r2, #12
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4807      	ldr	r0, [pc, #28]	; (8003b40 <MX_TIM3_Init+0xec>)
 8003b22:	f003 ff6b 	bl	80079fc <HAL_TIM_PWM_ConfigChannel>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8003b2c:	f000 f9fa 	bl	8003f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003b30:	4803      	ldr	r0, [pc, #12]	; (8003b40 <MX_TIM3_Init+0xec>)
 8003b32:	f000 fb81 	bl	8004238 <HAL_TIM_MspPostInit>

}
 8003b36:	bf00      	nop
 8003b38:	3728      	adds	r7, #40	; 0x28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000834 	.word	0x20000834
 8003b44:	40000400 	.word	0x40000400

08003b48 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b4e:	463b      	mov	r3, r7
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <MX_TIM6_Init+0x64>)
 8003b58:	4a15      	ldr	r2, [pc, #84]	; (8003bb0 <MX_TIM6_Init+0x68>)
 8003b5a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8003b5c:	4b13      	ldr	r3, [pc, #76]	; (8003bac <MX_TIM6_Init+0x64>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <MX_TIM6_Init+0x64>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <MX_TIM6_Init+0x64>)
 8003b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b6e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <MX_TIM6_Init+0x64>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003b76:	480d      	ldr	r0, [pc, #52]	; (8003bac <MX_TIM6_Init+0x64>)
 8003b78:	f003 f94c 	bl	8006e14 <HAL_TIM_Base_Init>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003b82:	f000 f9cf 	bl	8003f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b86:	2300      	movs	r3, #0
 8003b88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003b8e:	463b      	mov	r3, r7
 8003b90:	4619      	mov	r1, r3
 8003b92:	4806      	ldr	r0, [pc, #24]	; (8003bac <MX_TIM6_Init+0x64>)
 8003b94:	f004 fbb2 	bl	80082fc <HAL_TIMEx_MasterConfigSynchronization>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003b9e:	f000 f9c1 	bl	8003f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	2000087c 	.word	0x2000087c
 8003bb0:	40001000 	.word	0x40001000

08003bb4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <MX_TIM10_Init+0x40>)
 8003bba:	4a0f      	ldr	r2, [pc, #60]	; (8003bf8 <MX_TIM10_Init+0x44>)
 8003bbc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16-1;
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <MX_TIM10_Init+0x40>)
 8003bc0:	220f      	movs	r2, #15
 8003bc2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <MX_TIM10_Init+0x40>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <MX_TIM10_Init+0x40>)
 8003bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bd0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bd2:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <MX_TIM10_Init+0x40>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <MX_TIM10_Init+0x40>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003bde:	4805      	ldr	r0, [pc, #20]	; (8003bf4 <MX_TIM10_Init+0x40>)
 8003be0:	f003 f918 	bl	8006e14 <HAL_TIM_Base_Init>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8003bea:	f000 f99b 	bl	8003f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	200008c4 	.word	0x200008c4
 8003bf8:	40014400 	.word	0x40014400

08003bfc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c02:	1d3b      	adds	r3, r7, #4
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	611a      	str	r2, [r3, #16]
 8003c10:	615a      	str	r2, [r3, #20]
 8003c12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <MX_TIM12_Init+0x80>)
 8003c16:	4a1a      	ldr	r2, [pc, #104]	; (8003c80 <MX_TIM12_Init+0x84>)
 8003c18:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 80-1;
 8003c1a:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <MX_TIM12_Init+0x80>)
 8003c1c:	224f      	movs	r2, #79	; 0x4f
 8003c1e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c20:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <MX_TIM12_Init+0x80>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100-1;
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <MX_TIM12_Init+0x80>)
 8003c28:	2263      	movs	r2, #99	; 0x63
 8003c2a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c2c:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <MX_TIM12_Init+0x80>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <MX_TIM12_Init+0x80>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003c38:	4810      	ldr	r0, [pc, #64]	; (8003c7c <MX_TIM12_Init+0x80>)
 8003c3a:	f003 fa3b 	bl	80070b4 <HAL_TIM_PWM_Init>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8003c44:	f000 f96e 	bl	8003f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c48:	2360      	movs	r3, #96	; 0x60
 8003c4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4807      	ldr	r0, [pc, #28]	; (8003c7c <MX_TIM12_Init+0x80>)
 8003c60:	f003 fecc 	bl	80079fc <HAL_TIM_PWM_ConfigChannel>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8003c6a:	f000 f95b 	bl	8003f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8003c6e:	4803      	ldr	r0, [pc, #12]	; (8003c7c <MX_TIM12_Init+0x80>)
 8003c70:	f000 fae2 	bl	8004238 <HAL_TIM_MspPostInit>

}
 8003c74:	bf00      	nop
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	2000090c 	.word	0x2000090c
 8003c80:	40001800 	.word	0x40001800

08003c84 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003c88:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <MX_UART4_Init+0x4c>)
 8003c8a:	4a12      	ldr	r2, [pc, #72]	; (8003cd4 <MX_UART4_Init+0x50>)
 8003c8c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <MX_UART4_Init+0x4c>)
 8003c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c94:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003c96:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <MX_UART4_Init+0x4c>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <MX_UART4_Init+0x4c>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <MX_UART4_Init+0x4c>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <MX_UART4_Init+0x4c>)
 8003caa:	220c      	movs	r2, #12
 8003cac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <MX_UART4_Init+0x4c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cb4:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <MX_UART4_Init+0x4c>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003cba:	4805      	ldr	r0, [pc, #20]	; (8003cd0 <MX_UART4_Init+0x4c>)
 8003cbc:	f004 fbae 	bl	800841c <HAL_UART_Init>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003cc6:	f000 f92d 	bl	8003f24 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000954 	.word	0x20000954
 8003cd4:	40004c00 	.word	0x40004c00

08003cd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003cdc:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <MX_USART1_UART_Init+0x4c>)
 8003cde:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <MX_USART1_UART_Init+0x50>)
 8003ce0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003ce2:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <MX_USART1_UART_Init+0x4c>)
 8003ce4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ce8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cea:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <MX_USART1_UART_Init+0x4c>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <MX_USART1_UART_Init+0x4c>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <MX_USART1_UART_Init+0x4c>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cfc:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <MX_USART1_UART_Init+0x4c>)
 8003cfe:	220c      	movs	r2, #12
 8003d00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d02:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <MX_USART1_UART_Init+0x4c>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <MX_USART1_UART_Init+0x4c>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d0e:	4805      	ldr	r0, [pc, #20]	; (8003d24 <MX_USART1_UART_Init+0x4c>)
 8003d10:	f004 fb84 	bl	800841c <HAL_UART_Init>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d1a:	f000 f903 	bl	8003f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000998 	.word	0x20000998
 8003d28:	40011000 	.word	0x40011000

08003d2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <MX_USART3_UART_Init+0x4c>)
 8003d32:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <MX_USART3_UART_Init+0x50>)
 8003d34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <MX_USART3_UART_Init+0x4c>)
 8003d38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <MX_USART3_UART_Init+0x4c>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <MX_USART3_UART_Init+0x4c>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <MX_USART3_UART_Init+0x4c>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <MX_USART3_UART_Init+0x4c>)
 8003d52:	220c      	movs	r2, #12
 8003d54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <MX_USART3_UART_Init+0x4c>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <MX_USART3_UART_Init+0x4c>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d62:	4805      	ldr	r0, [pc, #20]	; (8003d78 <MX_USART3_UART_Init+0x4c>)
 8003d64:	f004 fb5a 	bl	800841c <HAL_UART_Init>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003d6e:	f000 f8d9 	bl	8003f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	200009dc 	.word	0x200009dc
 8003d7c:	40004800 	.word	0x40004800

08003d80 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003d84:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <MX_USART6_UART_Init+0x4c>)
 8003d86:	4a12      	ldr	r2, [pc, #72]	; (8003dd0 <MX_USART6_UART_Init+0x50>)
 8003d88:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <MX_USART6_UART_Init+0x4c>)
 8003d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d90:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003d92:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <MX_USART6_UART_Init+0x4c>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <MX_USART6_UART_Init+0x4c>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <MX_USART6_UART_Init+0x4c>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003da4:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <MX_USART6_UART_Init+0x4c>)
 8003da6:	220c      	movs	r2, #12
 8003da8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <MX_USART6_UART_Init+0x4c>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <MX_USART6_UART_Init+0x4c>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003db6:	4805      	ldr	r0, [pc, #20]	; (8003dcc <MX_USART6_UART_Init+0x4c>)
 8003db8:	f004 fb30 	bl	800841c <HAL_UART_Init>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003dc2:	f000 f8af 	bl	8003f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003dc6:	bf00      	nop
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000a20 	.word	0x20000a20
 8003dd0:	40011400 	.word	0x40011400

08003dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	; 0x28
 8003dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dda:	f107 0314 	add.w	r3, r7, #20
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]
 8003de4:	609a      	str	r2, [r3, #8]
 8003de6:	60da      	str	r2, [r3, #12]
 8003de8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	4b40      	ldr	r3, [pc, #256]	; (8003ef0 <MX_GPIO_Init+0x11c>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	4a3f      	ldr	r2, [pc, #252]	; (8003ef0 <MX_GPIO_Init+0x11c>)
 8003df4:	f043 0304 	orr.w	r3, r3, #4
 8003df8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfa:	4b3d      	ldr	r3, [pc, #244]	; (8003ef0 <MX_GPIO_Init+0x11c>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <MX_GPIO_Init+0x11c>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	4a38      	ldr	r2, [pc, #224]	; (8003ef0 <MX_GPIO_Init+0x11c>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	6313      	str	r3, [r2, #48]	; 0x30
 8003e16:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <MX_GPIO_Init+0x11c>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <MX_GPIO_Init+0x11c>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	4a31      	ldr	r2, [pc, #196]	; (8003ef0 <MX_GPIO_Init+0x11c>)
 8003e2c:	f043 0302 	orr.w	r3, r3, #2
 8003e30:	6313      	str	r3, [r2, #48]	; 0x30
 8003e32:	4b2f      	ldr	r3, [pc, #188]	; (8003ef0 <MX_GPIO_Init+0x11c>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <MX_GPIO_Init+0x11c>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4a2a      	ldr	r2, [pc, #168]	; (8003ef0 <MX_GPIO_Init+0x11c>)
 8003e48:	f043 0308 	orr.w	r3, r3, #8
 8003e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4e:	4b28      	ldr	r3, [pc, #160]	; (8003ef0 <MX_GPIO_Init+0x11c>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	607b      	str	r3, [r7, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f242 311c 	movw	r1, #8988	; 0x231c
 8003e60:	4824      	ldr	r0, [pc, #144]	; (8003ef4 <MX_GPIO_Init+0x120>)
 8003e62:	f001 f8cd 	bl	8005000 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8003e66:	2200      	movs	r2, #0
 8003e68:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003e6c:	4822      	ldr	r0, [pc, #136]	; (8003ef8 <MX_GPIO_Init+0x124>)
 8003e6e:	f001 f8c7 	bl	8005000 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8003e72:	f242 331c 	movw	r3, #8988	; 0x231c
 8003e76:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e80:	2300      	movs	r3, #0
 8003e82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e84:	f107 0314 	add.w	r3, r7, #20
 8003e88:	4619      	mov	r1, r3
 8003e8a:	481a      	ldr	r0, [pc, #104]	; (8003ef4 <MX_GPIO_Init+0x120>)
 8003e8c:	f000 ff0c 	bl	8004ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e90:	2304      	movs	r3, #4
 8003e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e94:	2300      	movs	r3, #0
 8003e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e9c:	f107 0314 	add.w	r3, r7, #20
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4816      	ldr	r0, [pc, #88]	; (8003efc <MX_GPIO_Init+0x128>)
 8003ea4:	f000 ff00 	bl	8004ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ea8:	2310      	movs	r3, #16
 8003eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003eac:	2312      	movs	r3, #18
 8003eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003eb8:	2304      	movs	r3, #4
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ebc:	f107 0314 	add.w	r3, r7, #20
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	480d      	ldr	r0, [pc, #52]	; (8003ef8 <MX_GPIO_Init+0x124>)
 8003ec4:	f000 fef0 	bl	8004ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8003ec8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eda:	f107 0314 	add.w	r3, r7, #20
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4805      	ldr	r0, [pc, #20]	; (8003ef8 <MX_GPIO_Init+0x124>)
 8003ee2:	f000 fee1 	bl	8004ca8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ee6:	bf00      	nop
 8003ee8:	3728      	adds	r7, #40	; 0x28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40020800 	.word	0x40020800
 8003ef8:	40020400 	.word	0x40020400
 8003efc:	40020c00 	.word	0x40020c00

08003f00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003f12:	f000 fd11 	bl	8004938 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40001400 	.word	0x40001400

08003f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f28:	b672      	cpsid	i
}
 8003f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003f2c:	e7fe      	b.n	8003f2c <Error_Handler+0x8>
	...

08003f30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <HAL_MspInit+0x4c>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	4a0f      	ldr	r2, [pc, #60]	; (8003f7c <HAL_MspInit+0x4c>)
 8003f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f44:	6453      	str	r3, [r2, #68]	; 0x44
 8003f46:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <HAL_MspInit+0x4c>)
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <HAL_MspInit+0x4c>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <HAL_MspInit+0x4c>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_MspInit+0x4c>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40023800 	.word	0x40023800

08003f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08c      	sub	sp, #48	; 0x30
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f88:	f107 031c 	add.w	r3, r7, #28
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a42      	ldr	r2, [pc, #264]	; (80040a8 <HAL_I2C_MspInit+0x128>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d12c      	bne.n	8003ffc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	4b41      	ldr	r3, [pc, #260]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	4a40      	ldr	r2, [pc, #256]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb2:	4b3e      	ldr	r3, [pc, #248]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	61bb      	str	r3, [r7, #24]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fbe:	23c0      	movs	r3, #192	; 0xc0
 8003fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fc2:	2312      	movs	r3, #18
 8003fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fce:	2304      	movs	r3, #4
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd2:	f107 031c 	add.w	r3, r7, #28
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4835      	ldr	r0, [pc, #212]	; (80040b0 <HAL_I2C_MspInit+0x130>)
 8003fda:	f000 fe65 	bl	8004ca8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	4b32      	ldr	r3, [pc, #200]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	4a31      	ldr	r2, [pc, #196]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 8003fe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fec:	6413      	str	r3, [r2, #64]	; 0x40
 8003fee:	4b2f      	ldr	r3, [pc, #188]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003ffa:	e050      	b.n	800409e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a2c      	ldr	r2, [pc, #176]	; (80040b4 <HAL_I2C_MspInit+0x134>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d14b      	bne.n	800409e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	4b28      	ldr	r3, [pc, #160]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	4a27      	ldr	r2, [pc, #156]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 8004010:	f043 0302 	orr.w	r3, r3, #2
 8004014:	6313      	str	r3, [r2, #48]	; 0x30
 8004016:	4b25      	ldr	r3, [pc, #148]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	4b21      	ldr	r3, [pc, #132]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4a20      	ldr	r2, [pc, #128]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 800402c:	f043 0304 	orr.w	r3, r3, #4
 8004030:	6313      	str	r3, [r2, #48]	; 0x30
 8004032:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800403e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004044:	2312      	movs	r3, #18
 8004046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404c:	2303      	movs	r3, #3
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004050:	2304      	movs	r3, #4
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004054:	f107 031c 	add.w	r3, r7, #28
 8004058:	4619      	mov	r1, r3
 800405a:	4815      	ldr	r0, [pc, #84]	; (80040b0 <HAL_I2C_MspInit+0x130>)
 800405c:	f000 fe24 	bl	8004ca8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004066:	2312      	movs	r3, #18
 8004068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406a:	2300      	movs	r3, #0
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406e:	2303      	movs	r3, #3
 8004070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004072:	2304      	movs	r3, #4
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004076:	f107 031c 	add.w	r3, r7, #28
 800407a:	4619      	mov	r1, r3
 800407c:	480e      	ldr	r0, [pc, #56]	; (80040b8 <HAL_I2C_MspInit+0x138>)
 800407e:	f000 fe13 	bl	8004ca8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	4a08      	ldr	r2, [pc, #32]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 800408c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004090:	6413      	str	r3, [r2, #64]	; 0x40
 8004092:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_I2C_MspInit+0x12c>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	60bb      	str	r3, [r7, #8]
 800409c:	68bb      	ldr	r3, [r7, #8]
}
 800409e:	bf00      	nop
 80040a0:	3730      	adds	r7, #48	; 0x30
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40005400 	.word	0x40005400
 80040ac:	40023800 	.word	0x40023800
 80040b0:	40020400 	.word	0x40020400
 80040b4:	40005800 	.word	0x40005800
 80040b8:	40020800 	.word	0x40020800

080040bc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08a      	sub	sp, #40	; 0x28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c4:	f107 0314 	add.w	r3, r7, #20
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	605a      	str	r2, [r3, #4]
 80040ce:	609a      	str	r2, [r3, #8]
 80040d0:	60da      	str	r2, [r3, #12]
 80040d2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040dc:	d133      	bne.n	8004146 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <HAL_TIM_IC_MspInit+0x94>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	4a1a      	ldr	r2, [pc, #104]	; (8004150 <HAL_TIM_IC_MspInit+0x94>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	6413      	str	r3, [r2, #64]	; 0x40
 80040ee:	4b18      	ldr	r3, [pc, #96]	; (8004150 <HAL_TIM_IC_MspInit+0x94>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	4b14      	ldr	r3, [pc, #80]	; (8004150 <HAL_TIM_IC_MspInit+0x94>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	4a13      	ldr	r2, [pc, #76]	; (8004150 <HAL_TIM_IC_MspInit+0x94>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6313      	str	r3, [r2, #48]	; 0x30
 800410a:	4b11      	ldr	r3, [pc, #68]	; (8004150 <HAL_TIM_IC_MspInit+0x94>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8004116:	2322      	movs	r3, #34	; 0x22
 8004118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411a:	2302      	movs	r3, #2
 800411c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004122:	2300      	movs	r3, #0
 8004124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004126:	2301      	movs	r3, #1
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800412a:	f107 0314 	add.w	r3, r7, #20
 800412e:	4619      	mov	r1, r3
 8004130:	4808      	ldr	r0, [pc, #32]	; (8004154 <HAL_TIM_IC_MspInit+0x98>)
 8004132:	f000 fdb9 	bl	8004ca8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004136:	2200      	movs	r2, #0
 8004138:	2100      	movs	r1, #0
 800413a:	201c      	movs	r0, #28
 800413c:	f000 fcf8 	bl	8004b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004140:	201c      	movs	r0, #28
 8004142:	f000 fd11 	bl	8004b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004146:	bf00      	nop
 8004148:	3728      	adds	r7, #40	; 0x28
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
 8004154:	40020000 	.word	0x40020000

08004158 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a15      	ldr	r2, [pc, #84]	; (80041bc <HAL_TIM_PWM_MspInit+0x64>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d10e      	bne.n	8004188 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <HAL_TIM_PWM_MspInit+0x68>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <HAL_TIM_PWM_MspInit+0x68>)
 8004174:	f043 0302 	orr.w	r3, r3, #2
 8004178:	6413      	str	r3, [r2, #64]	; 0x40
 800417a:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <HAL_TIM_PWM_MspInit+0x68>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8004186:	e012      	b.n	80041ae <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0d      	ldr	r2, [pc, #52]	; (80041c4 <HAL_TIM_PWM_MspInit+0x6c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10d      	bne.n	80041ae <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <HAL_TIM_PWM_MspInit+0x68>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	4a09      	ldr	r2, [pc, #36]	; (80041c0 <HAL_TIM_PWM_MspInit+0x68>)
 800419c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a0:	6413      	str	r3, [r2, #64]	; 0x40
 80041a2:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <HAL_TIM_PWM_MspInit+0x68>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
}
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40023800 	.word	0x40023800
 80041c4:	40001800 	.word	0x40001800

080041c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a15      	ldr	r2, [pc, #84]	; (800422c <HAL_TIM_Base_MspInit+0x64>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d10e      	bne.n	80041f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	4b14      	ldr	r3, [pc, #80]	; (8004230 <HAL_TIM_Base_MspInit+0x68>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	4a13      	ldr	r2, [pc, #76]	; (8004230 <HAL_TIM_Base_MspInit+0x68>)
 80041e4:	f043 0310 	orr.w	r3, r3, #16
 80041e8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_TIM_Base_MspInit+0x68>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80041f6:	e012      	b.n	800421e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a0d      	ldr	r2, [pc, #52]	; (8004234 <HAL_TIM_Base_MspInit+0x6c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10d      	bne.n	800421e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_TIM_Base_MspInit+0x68>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	4a09      	ldr	r2, [pc, #36]	; (8004230 <HAL_TIM_Base_MspInit+0x68>)
 800420c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004210:	6453      	str	r3, [r2, #68]	; 0x44
 8004212:	4b07      	ldr	r3, [pc, #28]	; (8004230 <HAL_TIM_Base_MspInit+0x68>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]
}
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40001000 	.word	0x40001000
 8004230:	40023800 	.word	0x40023800
 8004234:	40014400 	.word	0x40014400

08004238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	; 0x28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	f107 0314 	add.w	r3, r7, #20
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a33      	ldr	r2, [pc, #204]	; (8004324 <HAL_TIM_MspPostInit+0xec>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d13c      	bne.n	80042d4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	4b32      	ldr	r3, [pc, #200]	; (8004328 <HAL_TIM_MspPostInit+0xf0>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	4a31      	ldr	r2, [pc, #196]	; (8004328 <HAL_TIM_MspPostInit+0xf0>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	6313      	str	r3, [r2, #48]	; 0x30
 800426a:	4b2f      	ldr	r3, [pc, #188]	; (8004328 <HAL_TIM_MspPostInit+0xf0>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	4b2b      	ldr	r3, [pc, #172]	; (8004328 <HAL_TIM_MspPostInit+0xf0>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	4a2a      	ldr	r2, [pc, #168]	; (8004328 <HAL_TIM_MspPostInit+0xf0>)
 8004280:	f043 0302 	orr.w	r3, r3, #2
 8004284:	6313      	str	r3, [r2, #48]	; 0x30
 8004286:	4b28      	ldr	r3, [pc, #160]	; (8004328 <HAL_TIM_MspPostInit+0xf0>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004292:	23c0      	movs	r3, #192	; 0xc0
 8004294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004296:	2302      	movs	r3, #2
 8004298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800429e:	2300      	movs	r3, #0
 80042a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042a2:	2302      	movs	r3, #2
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a6:	f107 0314 	add.w	r3, r7, #20
 80042aa:	4619      	mov	r1, r3
 80042ac:	481f      	ldr	r0, [pc, #124]	; (800432c <HAL_TIM_MspPostInit+0xf4>)
 80042ae:	f000 fcfb 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80042b2:	2303      	movs	r3, #3
 80042b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b6:	2302      	movs	r3, #2
 80042b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042be:	2300      	movs	r3, #0
 80042c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042c2:	2302      	movs	r3, #2
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c6:	f107 0314 	add.w	r3, r7, #20
 80042ca:	4619      	mov	r1, r3
 80042cc:	4818      	ldr	r0, [pc, #96]	; (8004330 <HAL_TIM_MspPostInit+0xf8>)
 80042ce:	f000 fceb 	bl	8004ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80042d2:	e023      	b.n	800431c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM12)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a16      	ldr	r2, [pc, #88]	; (8004334 <HAL_TIM_MspPostInit+0xfc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d11e      	bne.n	800431c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <HAL_TIM_MspPostInit+0xf0>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	4a10      	ldr	r2, [pc, #64]	; (8004328 <HAL_TIM_MspPostInit+0xf0>)
 80042e8:	f043 0302 	orr.w	r3, r3, #2
 80042ec:	6313      	str	r3, [r2, #48]	; 0x30
 80042ee:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <HAL_TIM_MspPostInit+0xf0>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80042fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004300:	2302      	movs	r3, #2
 8004302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004308:	2300      	movs	r3, #0
 800430a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800430c:	2309      	movs	r3, #9
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004310:	f107 0314 	add.w	r3, r7, #20
 8004314:	4619      	mov	r1, r3
 8004316:	4806      	ldr	r0, [pc, #24]	; (8004330 <HAL_TIM_MspPostInit+0xf8>)
 8004318:	f000 fcc6 	bl	8004ca8 <HAL_GPIO_Init>
}
 800431c:	bf00      	nop
 800431e:	3728      	adds	r7, #40	; 0x28
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40000400 	.word	0x40000400
 8004328:	40023800 	.word	0x40023800
 800432c:	40020000 	.word	0x40020000
 8004330:	40020400 	.word	0x40020400
 8004334:	40001800 	.word	0x40001800

08004338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b090      	sub	sp, #64	; 0x40
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	609a      	str	r2, [r3, #8]
 800434c:	60da      	str	r2, [r3, #12]
 800434e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a84      	ldr	r2, [pc, #528]	; (8004568 <HAL_UART_MspInit+0x230>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d153      	bne.n	8004402 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	62bb      	str	r3, [r7, #40]	; 0x28
 800435e:	4b83      	ldr	r3, [pc, #524]	; (800456c <HAL_UART_MspInit+0x234>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	4a82      	ldr	r2, [pc, #520]	; (800456c <HAL_UART_MspInit+0x234>)
 8004364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004368:	6413      	str	r3, [r2, #64]	; 0x40
 800436a:	4b80      	ldr	r3, [pc, #512]	; (800456c <HAL_UART_MspInit+0x234>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
 800437a:	4b7c      	ldr	r3, [pc, #496]	; (800456c <HAL_UART_MspInit+0x234>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	4a7b      	ldr	r2, [pc, #492]	; (800456c <HAL_UART_MspInit+0x234>)
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	6313      	str	r3, [r2, #48]	; 0x30
 8004386:	4b79      	ldr	r3, [pc, #484]	; (800456c <HAL_UART_MspInit+0x234>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	4b75      	ldr	r3, [pc, #468]	; (800456c <HAL_UART_MspInit+0x234>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	4a74      	ldr	r2, [pc, #464]	; (800456c <HAL_UART_MspInit+0x234>)
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	6313      	str	r3, [r2, #48]	; 0x30
 80043a2:	4b72      	ldr	r3, [pc, #456]	; (800456c <HAL_UART_MspInit+0x234>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	623b      	str	r3, [r7, #32]
 80043ac:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80043ae:	2301      	movs	r3, #1
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b2:	2302      	movs	r3, #2
 80043b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ba:	2303      	movs	r3, #3
 80043bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80043be:	2308      	movs	r3, #8
 80043c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043c6:	4619      	mov	r1, r3
 80043c8:	4869      	ldr	r0, [pc, #420]	; (8004570 <HAL_UART_MspInit+0x238>)
 80043ca:	f000 fc6d 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80043ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d4:	2302      	movs	r3, #2
 80043d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043dc:	2303      	movs	r3, #3
 80043de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80043e0:	2308      	movs	r3, #8
 80043e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043e8:	4619      	mov	r1, r3
 80043ea:	4862      	ldr	r0, [pc, #392]	; (8004574 <HAL_UART_MspInit+0x23c>)
 80043ec:	f000 fc5c 	bl	8004ca8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 80043f0:	2200      	movs	r2, #0
 80043f2:	2106      	movs	r1, #6
 80043f4:	2034      	movs	r0, #52	; 0x34
 80043f6:	f000 fb9b 	bl	8004b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80043fa:	2034      	movs	r0, #52	; 0x34
 80043fc:	f000 fbb4 	bl	8004b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004400:	e0ae      	b.n	8004560 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a5c      	ldr	r2, [pc, #368]	; (8004578 <HAL_UART_MspInit+0x240>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d135      	bne.n	8004478 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 800440c:	2300      	movs	r3, #0
 800440e:	61fb      	str	r3, [r7, #28]
 8004410:	4b56      	ldr	r3, [pc, #344]	; (800456c <HAL_UART_MspInit+0x234>)
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	4a55      	ldr	r2, [pc, #340]	; (800456c <HAL_UART_MspInit+0x234>)
 8004416:	f043 0310 	orr.w	r3, r3, #16
 800441a:	6453      	str	r3, [r2, #68]	; 0x44
 800441c:	4b53      	ldr	r3, [pc, #332]	; (800456c <HAL_UART_MspInit+0x234>)
 800441e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004428:	2300      	movs	r3, #0
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	4b4f      	ldr	r3, [pc, #316]	; (800456c <HAL_UART_MspInit+0x234>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	4a4e      	ldr	r2, [pc, #312]	; (800456c <HAL_UART_MspInit+0x234>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	6313      	str	r3, [r2, #48]	; 0x30
 8004438:	4b4c      	ldr	r3, [pc, #304]	; (800456c <HAL_UART_MspInit+0x234>)
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004444:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444a:	2302      	movs	r3, #2
 800444c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444e:	2300      	movs	r3, #0
 8004450:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004452:	2303      	movs	r3, #3
 8004454:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004456:	2307      	movs	r3, #7
 8004458:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800445e:	4619      	mov	r1, r3
 8004460:	4843      	ldr	r0, [pc, #268]	; (8004570 <HAL_UART_MspInit+0x238>)
 8004462:	f000 fc21 	bl	8004ca8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 8004466:	2200      	movs	r2, #0
 8004468:	2108      	movs	r1, #8
 800446a:	2025      	movs	r0, #37	; 0x25
 800446c:	f000 fb60 	bl	8004b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004470:	2025      	movs	r0, #37	; 0x25
 8004472:	f000 fb79 	bl	8004b68 <HAL_NVIC_EnableIRQ>
}
 8004476:	e073      	b.n	8004560 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART3)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a3f      	ldr	r2, [pc, #252]	; (800457c <HAL_UART_MspInit+0x244>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d135      	bne.n	80044ee <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	4b39      	ldr	r3, [pc, #228]	; (800456c <HAL_UART_MspInit+0x234>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	4a38      	ldr	r2, [pc, #224]	; (800456c <HAL_UART_MspInit+0x234>)
 800448c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004490:	6413      	str	r3, [r2, #64]	; 0x40
 8004492:	4b36      	ldr	r3, [pc, #216]	; (800456c <HAL_UART_MspInit+0x234>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	613b      	str	r3, [r7, #16]
 80044a2:	4b32      	ldr	r3, [pc, #200]	; (800456c <HAL_UART_MspInit+0x234>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	4a31      	ldr	r2, [pc, #196]	; (800456c <HAL_UART_MspInit+0x234>)
 80044a8:	f043 0304 	orr.w	r3, r3, #4
 80044ac:	6313      	str	r3, [r2, #48]	; 0x30
 80044ae:	4b2f      	ldr	r3, [pc, #188]	; (800456c <HAL_UART_MspInit+0x234>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80044ba:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80044be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c0:	2302      	movs	r3, #2
 80044c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c8:	2303      	movs	r3, #3
 80044ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80044cc:	2307      	movs	r3, #7
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044d4:	4619      	mov	r1, r3
 80044d6:	4827      	ldr	r0, [pc, #156]	; (8004574 <HAL_UART_MspInit+0x23c>)
 80044d8:	f000 fbe6 	bl	8004ca8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 7, 0);
 80044dc:	2200      	movs	r2, #0
 80044de:	2107      	movs	r1, #7
 80044e0:	2027      	movs	r0, #39	; 0x27
 80044e2:	f000 fb25 	bl	8004b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80044e6:	2027      	movs	r0, #39	; 0x27
 80044e8:	f000 fb3e 	bl	8004b68 <HAL_NVIC_EnableIRQ>
}
 80044ec:	e038      	b.n	8004560 <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART6)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a23      	ldr	r2, [pc, #140]	; (8004580 <HAL_UART_MspInit+0x248>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d133      	bne.n	8004560 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART6_CLK_ENABLE();
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_UART_MspInit+0x234>)
 80044fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004500:	4a1a      	ldr	r2, [pc, #104]	; (800456c <HAL_UART_MspInit+0x234>)
 8004502:	f043 0320 	orr.w	r3, r3, #32
 8004506:	6453      	str	r3, [r2, #68]	; 0x44
 8004508:	4b18      	ldr	r3, [pc, #96]	; (800456c <HAL_UART_MspInit+0x234>)
 800450a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004514:	2300      	movs	r3, #0
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	4b14      	ldr	r3, [pc, #80]	; (800456c <HAL_UART_MspInit+0x234>)
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	4a13      	ldr	r2, [pc, #76]	; (800456c <HAL_UART_MspInit+0x234>)
 800451e:	f043 0304 	orr.w	r3, r3, #4
 8004522:	6313      	str	r3, [r2, #48]	; 0x30
 8004524:	4b11      	ldr	r3, [pc, #68]	; (800456c <HAL_UART_MspInit+0x234>)
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004530:	23c0      	movs	r3, #192	; 0xc0
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004534:	2302      	movs	r3, #2
 8004536:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004538:	2300      	movs	r3, #0
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800453c:	2303      	movs	r3, #3
 800453e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004540:	2308      	movs	r3, #8
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004548:	4619      	mov	r1, r3
 800454a:	480a      	ldr	r0, [pc, #40]	; (8004574 <HAL_UART_MspInit+0x23c>)
 800454c:	f000 fbac 	bl	8004ca8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 7, 0);
 8004550:	2200      	movs	r2, #0
 8004552:	2107      	movs	r1, #7
 8004554:	2047      	movs	r0, #71	; 0x47
 8004556:	f000 faeb 	bl	8004b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800455a:	2047      	movs	r0, #71	; 0x47
 800455c:	f000 fb04 	bl	8004b68 <HAL_NVIC_EnableIRQ>
}
 8004560:	bf00      	nop
 8004562:	3740      	adds	r7, #64	; 0x40
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40004c00 	.word	0x40004c00
 800456c:	40023800 	.word	0x40023800
 8004570:	40020000 	.word	0x40020000
 8004574:	40020800 	.word	0x40020800
 8004578:	40011000 	.word	0x40011000
 800457c:	40004800 	.word	0x40004800
 8004580:	40011400 	.word	0x40011400

08004584 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08e      	sub	sp, #56	; 0x38
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	4b33      	ldr	r3, [pc, #204]	; (8004668 <HAL_InitTick+0xe4>)
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	4a32      	ldr	r2, [pc, #200]	; (8004668 <HAL_InitTick+0xe4>)
 800459e:	f043 0320 	orr.w	r3, r3, #32
 80045a2:	6413      	str	r3, [r2, #64]	; 0x40
 80045a4:	4b30      	ldr	r3, [pc, #192]	; (8004668 <HAL_InitTick+0xe4>)
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80045b0:	f107 0210 	add.w	r2, r7, #16
 80045b4:	f107 0314 	add.w	r3, r7, #20
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 ffb0 	bl	8006520 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80045ca:	f001 ff81 	bl	80064d0 <HAL_RCC_GetPCLK1Freq>
 80045ce:	6378      	str	r0, [r7, #52]	; 0x34
 80045d0:	e004      	b.n	80045dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80045d2:	f001 ff7d 	bl	80064d0 <HAL_RCC_GetPCLK1Freq>
 80045d6:	4603      	mov	r3, r0
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80045dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045de:	4a23      	ldr	r2, [pc, #140]	; (800466c <HAL_InitTick+0xe8>)
 80045e0:	fba2 2303 	umull	r2, r3, r2, r3
 80045e4:	0c9b      	lsrs	r3, r3, #18
 80045e6:	3b01      	subs	r3, #1
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <HAL_InitTick+0xec>)
 80045ec:	4a21      	ldr	r2, [pc, #132]	; (8004674 <HAL_InitTick+0xf0>)
 80045ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80045f0:	4b1f      	ldr	r3, [pc, #124]	; (8004670 <HAL_InitTick+0xec>)
 80045f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045f6:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80045f8:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <HAL_InitTick+0xec>)
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80045fe:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <HAL_InitTick+0xec>)
 8004600:	2200      	movs	r2, #0
 8004602:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004604:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <HAL_InitTick+0xec>)
 8004606:	2200      	movs	r2, #0
 8004608:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800460a:	4b19      	ldr	r3, [pc, #100]	; (8004670 <HAL_InitTick+0xec>)
 800460c:	2200      	movs	r2, #0
 800460e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8004610:	4817      	ldr	r0, [pc, #92]	; (8004670 <HAL_InitTick+0xec>)
 8004612:	f002 fbff 	bl	8006e14 <HAL_TIM_Base_Init>
 8004616:	4603      	mov	r3, r0
 8004618:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800461c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004620:	2b00      	cmp	r3, #0
 8004622:	d11b      	bne.n	800465c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8004624:	4812      	ldr	r0, [pc, #72]	; (8004670 <HAL_InitTick+0xec>)
 8004626:	f002 fcd5 	bl	8006fd4 <HAL_TIM_Base_Start_IT>
 800462a:	4603      	mov	r3, r0
 800462c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004630:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004634:	2b00      	cmp	r3, #0
 8004636:	d111      	bne.n	800465c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004638:	2037      	movs	r0, #55	; 0x37
 800463a:	f000 fa95 	bl	8004b68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b0f      	cmp	r3, #15
 8004642:	d808      	bhi.n	8004656 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8004644:	2200      	movs	r2, #0
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	2037      	movs	r0, #55	; 0x37
 800464a:	f000 fa71 	bl	8004b30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800464e:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <HAL_InitTick+0xf4>)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	e002      	b.n	800465c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800465c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004660:	4618      	mov	r0, r3
 8004662:	3738      	adds	r7, #56	; 0x38
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40023800 	.word	0x40023800
 800466c:	431bde83 	.word	0x431bde83
 8004670:	20000ab8 	.word	0x20000ab8
 8004674:	40001400 	.word	0x40001400
 8004678:	2000000c 	.word	0x2000000c

0800467c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004680:	e7fe      	b.n	8004680 <NMI_Handler+0x4>

08004682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004682:	b480      	push	{r7}
 8004684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004686:	e7fe      	b.n	8004686 <HardFault_Handler+0x4>

08004688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800468c:	e7fe      	b.n	800468c <MemManage_Handler+0x4>

0800468e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800468e:	b480      	push	{r7}
 8004690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004692:	e7fe      	b.n	8004692 <BusFault_Handler+0x4>

08004694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004698:	e7fe      	b.n	8004698 <UsageFault_Handler+0x4>
	...

0800469c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 80046a2:	4b1f      	ldr	r3, [pc, #124]	; (8004720 <TIM2_IRQHandler+0x84>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d130      	bne.n	8004712 <TIM2_IRQHandler+0x76>
		// Timer overflow interrupt
		Global_Speed = round(Calculate_Car_Speed());
 80046b0:	f7fe feb2 	bl	8003418 <Calculate_Car_Speed>
 80046b4:	ee10 3a10 	vmov	r3, s0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb ffb5 	bl	8000628 <__aeabi_f2d>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	ec43 2b10 	vmov	d0, r2, r3
 80046c6:	f00c ff69 	bl	801159c <round>
 80046ca:	ec53 2b10 	vmov	r2, r3, d0
 80046ce:	4610      	mov	r0, r2
 80046d0:	4619      	mov	r1, r3
 80046d2:	f7fc fad9 	bl	8000c88 <__aeabi_d2uiz>
 80046d6:	4603      	mov	r3, r0
 80046d8:	b29a      	uxth	r2, r3
 80046da:	4b12      	ldr	r3, [pc, #72]	; (8004724 <TIM2_IRQHandler+0x88>)
 80046dc:	801a      	strh	r2, [r3, #0]
		if(Global_GPS_Speed_Completetion==Nothing_Completed)
 80046de:	4b12      	ldr	r3, [pc, #72]	; (8004728 <TIM2_IRQHandler+0x8c>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d103      	bne.n	80046ee <TIM2_IRQHandler+0x52>
		{
			Global_GPS_Speed_Completetion=Half_Completed_Speed;
 80046e6:	4b10      	ldr	r3, [pc, #64]	; (8004728 <TIM2_IRQHandler+0x8c>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	e011      	b.n	8004712 <TIM2_IRQHandler+0x76>

		}
		else if(Global_GPS_Speed_Completetion==Half_Completed_GPS)
 80046ee:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <TIM2_IRQHandler+0x8c>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d10d      	bne.n	8004712 <TIM2_IRQHandler+0x76>
		{
			Global_GPS_Speed_Completetion=Nothing_Completed;
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <TIM2_IRQHandler+0x8c>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]

			/*Notify the ESPPeriodicTask*/
			xTaskNotifyFromISR(Handle_ESP_Periodic,0,eNoAction,NULL);
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <TIM2_IRQHandler+0x90>)
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	2300      	movs	r3, #0
 8004702:	9301      	str	r3, [sp, #4]
 8004704:	2300      	movs	r3, #0
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	2300      	movs	r3, #0
 800470a:	2200      	movs	r2, #0
 800470c:	2100      	movs	r1, #0
 800470e:	f007 f897 	bl	800b840 <xTaskGenericNotifyFromISR>
	}else {

	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004712:	4803      	ldr	r0, [pc, #12]	; (8004720 <TIM2_IRQHandler+0x84>)
 8004714:	f002 ffce 	bl	80076b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	200007ec 	.word	0x200007ec
 8004724:	20000326 	.word	0x20000326
 8004728:	20000300 	.word	0x20000300
 800472c:	20000a70 	.word	0x20000a70

08004730 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8004734:	4802      	ldr	r0, [pc, #8]	; (8004740 <USART1_IRQHandler+0x10>)
 8004736:	f7fe fd75 	bl	8003224 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
 // HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800473a:	bf00      	nop
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000998 	.word	0x20000998

08004744 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004748:	4802      	ldr	r0, [pc, #8]	; (8004754 <USART3_IRQHandler+0x10>)
 800474a:	f003 ff77 	bl	800863c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800474e:	bf00      	nop
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	200009dc 	.word	0x200009dc

08004758 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800475c:	4802      	ldr	r0, [pc, #8]	; (8004768 <UART4_IRQHandler+0x10>)
 800475e:	f003 ff6d 	bl	800863c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004762:	bf00      	nop
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000954 	.word	0x20000954

0800476c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004770:	4802      	ldr	r0, [pc, #8]	; (800477c <TIM7_IRQHandler+0x10>)
 8004772:	f002 ff9f 	bl	80076b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004776:	bf00      	nop
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000ab8 	.word	0x20000ab8

08004780 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004784:	4802      	ldr	r0, [pc, #8]	; (8004790 <USART6_IRQHandler+0x10>)
 8004786:	f003 ff59 	bl	800863c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800478a:	bf00      	nop
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000a20 	.word	0x20000a20

08004794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return 1;
 8004798:	2301      	movs	r3, #1
}
 800479a:	4618      	mov	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <_kill>:

int _kill(int pid, int sig)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80047ae:	f00a fcf5 	bl	800f19c <__errno>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2216      	movs	r2, #22
 80047b6:	601a      	str	r2, [r3, #0]
  return -1;
 80047b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <_exit>:

void _exit (int status)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80047cc:	f04f 31ff 	mov.w	r1, #4294967295
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff ffe7 	bl	80047a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80047d6:	e7fe      	b.n	80047d6 <_exit+0x12>

080047d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	e00a      	b.n	8004800 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80047ea:	f3af 8000 	nop.w
 80047ee:	4601      	mov	r1, r0
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	60ba      	str	r2, [r7, #8]
 80047f6:	b2ca      	uxtb	r2, r1
 80047f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	3301      	adds	r3, #1
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	429a      	cmp	r2, r3
 8004806:	dbf0      	blt.n	80047ea <_read+0x12>
  }

  return len;
 8004808:	687b      	ldr	r3, [r7, #4]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800481a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800481e:	4618      	mov	r0, r3
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800483a:	605a      	str	r2, [r3, #4]
  return 0;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <_isatty>:

int _isatty(int file)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004852:	2301      	movs	r3, #1
}
 8004854:	4618      	mov	r0, r3
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <SystemInit+0x20>)
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004886:	4a05      	ldr	r2, [pc, #20]	; (800489c <SystemInit+0x20>)
 8004888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800488c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004890:	bf00      	nop
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	e000ed00 	.word	0xe000ed00

080048a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80048a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048a4:	480d      	ldr	r0, [pc, #52]	; (80048dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80048a6:	490e      	ldr	r1, [pc, #56]	; (80048e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80048a8:	4a0e      	ldr	r2, [pc, #56]	; (80048e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80048aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048ac:	e002      	b.n	80048b4 <LoopCopyDataInit>

080048ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048b2:	3304      	adds	r3, #4

080048b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048b8:	d3f9      	bcc.n	80048ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048ba:	4a0b      	ldr	r2, [pc, #44]	; (80048e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80048bc:	4c0b      	ldr	r4, [pc, #44]	; (80048ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80048be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048c0:	e001      	b.n	80048c6 <LoopFillZerobss>

080048c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048c4:	3204      	adds	r2, #4

080048c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048c8:	d3fb      	bcc.n	80048c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80048ca:	f7ff ffd7 	bl	800487c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048ce:	f00a fc6b 	bl	800f1a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048d2:	f7fe fde1 	bl	8003498 <main>
  bx  lr    
 80048d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80048d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80048dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048e0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80048e4:	08012820 	.word	0x08012820
  ldr r2, =_sbss
 80048e8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80048ec:	2001a468 	.word	0x2001a468

080048f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048f0:	e7fe      	b.n	80048f0 <ADC_IRQHandler>
	...

080048f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048f8:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <HAL_Init+0x40>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a0d      	ldr	r2, [pc, #52]	; (8004934 <HAL_Init+0x40>)
 80048fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_Init+0x40>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a0a      	ldr	r2, [pc, #40]	; (8004934 <HAL_Init+0x40>)
 800490a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800490e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004910:	4b08      	ldr	r3, [pc, #32]	; (8004934 <HAL_Init+0x40>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a07      	ldr	r2, [pc, #28]	; (8004934 <HAL_Init+0x40>)
 8004916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800491c:	2003      	movs	r0, #3
 800491e:	f000 f8fc 	bl	8004b1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004922:	200f      	movs	r0, #15
 8004924:	f7ff fe2e 	bl	8004584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004928:	f7ff fb02 	bl	8003f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40023c00 	.word	0x40023c00

08004938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_IncTick+0x20>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_IncTick+0x24>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4413      	add	r3, r2
 8004948:	4a04      	ldr	r2, [pc, #16]	; (800495c <HAL_IncTick+0x24>)
 800494a:	6013      	str	r3, [r2, #0]
}
 800494c:	bf00      	nop
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000010 	.word	0x20000010
 800495c:	20000b00 	.word	0x20000b00

08004960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  return uwTick;
 8004964:	4b03      	ldr	r3, [pc, #12]	; (8004974 <HAL_GetTick+0x14>)
 8004966:	681b      	ldr	r3, [r3, #0]
}
 8004968:	4618      	mov	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000b00 	.word	0x20000b00

08004978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004980:	f7ff ffee 	bl	8004960 <HAL_GetTick>
 8004984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d005      	beq.n	800499e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004992:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <HAL_Delay+0x44>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800499e:	bf00      	nop
 80049a0:	f7ff ffde 	bl	8004960 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d8f7      	bhi.n	80049a0 <HAL_Delay+0x28>
  {
  }
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000010 	.word	0x20000010

080049c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049d0:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <__NVIC_SetPriorityGrouping+0x44>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049dc:	4013      	ands	r3, r2
 80049de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049f2:	4a04      	ldr	r2, [pc, #16]	; (8004a04 <__NVIC_SetPriorityGrouping+0x44>)
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	60d3      	str	r3, [r2, #12]
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	e000ed00 	.word	0xe000ed00

08004a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a0c:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <__NVIC_GetPriorityGrouping+0x18>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	0a1b      	lsrs	r3, r3, #8
 8004a12:	f003 0307 	and.w	r3, r3, #7
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	e000ed00 	.word	0xe000ed00

08004a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	db0b      	blt.n	8004a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	f003 021f 	and.w	r2, r3, #31
 8004a3c:	4907      	ldr	r1, [pc, #28]	; (8004a5c <__NVIC_EnableIRQ+0x38>)
 8004a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	2001      	movs	r0, #1
 8004a46:	fa00 f202 	lsl.w	r2, r0, r2
 8004a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	e000e100 	.word	0xe000e100

08004a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	6039      	str	r1, [r7, #0]
 8004a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	db0a      	blt.n	8004a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	490c      	ldr	r1, [pc, #48]	; (8004aac <__NVIC_SetPriority+0x4c>)
 8004a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7e:	0112      	lsls	r2, r2, #4
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	440b      	add	r3, r1
 8004a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a88:	e00a      	b.n	8004aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	4908      	ldr	r1, [pc, #32]	; (8004ab0 <__NVIC_SetPriority+0x50>)
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	3b04      	subs	r3, #4
 8004a98:	0112      	lsls	r2, r2, #4
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	761a      	strb	r2, [r3, #24]
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	e000e100 	.word	0xe000e100
 8004ab0:	e000ed00 	.word	0xe000ed00

08004ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b089      	sub	sp, #36	; 0x24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f1c3 0307 	rsb	r3, r3, #7
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	bf28      	it	cs
 8004ad2:	2304      	movcs	r3, #4
 8004ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	2b06      	cmp	r3, #6
 8004adc:	d902      	bls.n	8004ae4 <NVIC_EncodePriority+0x30>
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3b03      	subs	r3, #3
 8004ae2:	e000      	b.n	8004ae6 <NVIC_EncodePriority+0x32>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	43da      	mvns	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	401a      	ands	r2, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004afc:	f04f 31ff 	mov.w	r1, #4294967295
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	fa01 f303 	lsl.w	r3, r1, r3
 8004b06:	43d9      	mvns	r1, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b0c:	4313      	orrs	r3, r2
         );
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3724      	adds	r7, #36	; 0x24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff ff4c 	bl	80049c0 <__NVIC_SetPriorityGrouping>
}
 8004b28:	bf00      	nop
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b42:	f7ff ff61 	bl	8004a08 <__NVIC_GetPriorityGrouping>
 8004b46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	6978      	ldr	r0, [r7, #20]
 8004b4e:	f7ff ffb1 	bl	8004ab4 <NVIC_EncodePriority>
 8004b52:	4602      	mov	r2, r0
 8004b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b58:	4611      	mov	r1, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff ff80 	bl	8004a60 <__NVIC_SetPriority>
}
 8004b60:	bf00      	nop
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff ff54 	bl	8004a24 <__NVIC_EnableIRQ>
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b92:	f7ff fee5 	bl	8004960 <HAL_GetTick>
 8004b96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d008      	beq.n	8004bb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2280      	movs	r2, #128	; 0x80
 8004ba8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e052      	b.n	8004c5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0216 	bic.w	r2, r2, #22
 8004bc4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695a      	ldr	r2, [r3, #20]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bd4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d103      	bne.n	8004be6 <HAL_DMA_Abort+0x62>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0208 	bic.w	r2, r2, #8
 8004bf4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0201 	bic.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c06:	e013      	b.n	8004c30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c08:	f7ff feaa 	bl	8004960 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b05      	cmp	r3, #5
 8004c14:	d90c      	bls.n	8004c30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2203      	movs	r2, #3
 8004c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e015      	b.n	8004c5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e4      	bne.n	8004c08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c42:	223f      	movs	r2, #63	; 0x3f
 8004c44:	409a      	lsls	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d004      	beq.n	8004c82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2280      	movs	r2, #128	; 0x80
 8004c7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e00c      	b.n	8004c9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2205      	movs	r2, #5
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0201 	bic.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b089      	sub	sp, #36	; 0x24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	e165      	b.n	8004f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	f040 8154 	bne.w	8004f8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d005      	beq.n	8004cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d130      	bne.n	8004d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	2203      	movs	r2, #3
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d30:	2201      	movs	r2, #1
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	f003 0201 	and.w	r2, r3, #1
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d017      	beq.n	8004d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	2203      	movs	r2, #3
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d123      	bne.n	8004dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	08da      	lsrs	r2, r3, #3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3208      	adds	r2, #8
 8004dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	220f      	movs	r2, #15
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	08da      	lsrs	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3208      	adds	r2, #8
 8004de6:	69b9      	ldr	r1, [r7, #24]
 8004de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	2203      	movs	r2, #3
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f003 0203 	and.w	r2, r3, #3
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80ae 	beq.w	8004f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	4b5d      	ldr	r3, [pc, #372]	; (8004fa8 <HAL_GPIO_Init+0x300>)
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	4a5c      	ldr	r2, [pc, #368]	; (8004fa8 <HAL_GPIO_Init+0x300>)
 8004e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e3e:	4b5a      	ldr	r3, [pc, #360]	; (8004fa8 <HAL_GPIO_Init+0x300>)
 8004e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e4a:	4a58      	ldr	r2, [pc, #352]	; (8004fac <HAL_GPIO_Init+0x304>)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	3302      	adds	r3, #2
 8004e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	220f      	movs	r2, #15
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	43db      	mvns	r3, r3
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a4f      	ldr	r2, [pc, #316]	; (8004fb0 <HAL_GPIO_Init+0x308>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d025      	beq.n	8004ec2 <HAL_GPIO_Init+0x21a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a4e      	ldr	r2, [pc, #312]	; (8004fb4 <HAL_GPIO_Init+0x30c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d01f      	beq.n	8004ebe <HAL_GPIO_Init+0x216>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a4d      	ldr	r2, [pc, #308]	; (8004fb8 <HAL_GPIO_Init+0x310>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d019      	beq.n	8004eba <HAL_GPIO_Init+0x212>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a4c      	ldr	r2, [pc, #304]	; (8004fbc <HAL_GPIO_Init+0x314>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d013      	beq.n	8004eb6 <HAL_GPIO_Init+0x20e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a4b      	ldr	r2, [pc, #300]	; (8004fc0 <HAL_GPIO_Init+0x318>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00d      	beq.n	8004eb2 <HAL_GPIO_Init+0x20a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a4a      	ldr	r2, [pc, #296]	; (8004fc4 <HAL_GPIO_Init+0x31c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d007      	beq.n	8004eae <HAL_GPIO_Init+0x206>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a49      	ldr	r2, [pc, #292]	; (8004fc8 <HAL_GPIO_Init+0x320>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d101      	bne.n	8004eaa <HAL_GPIO_Init+0x202>
 8004ea6:	2306      	movs	r3, #6
 8004ea8:	e00c      	b.n	8004ec4 <HAL_GPIO_Init+0x21c>
 8004eaa:	2307      	movs	r3, #7
 8004eac:	e00a      	b.n	8004ec4 <HAL_GPIO_Init+0x21c>
 8004eae:	2305      	movs	r3, #5
 8004eb0:	e008      	b.n	8004ec4 <HAL_GPIO_Init+0x21c>
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	e006      	b.n	8004ec4 <HAL_GPIO_Init+0x21c>
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e004      	b.n	8004ec4 <HAL_GPIO_Init+0x21c>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e002      	b.n	8004ec4 <HAL_GPIO_Init+0x21c>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <HAL_GPIO_Init+0x21c>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	f002 0203 	and.w	r2, r2, #3
 8004eca:	0092      	lsls	r2, r2, #2
 8004ecc:	4093      	lsls	r3, r2
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ed4:	4935      	ldr	r1, [pc, #212]	; (8004fac <HAL_GPIO_Init+0x304>)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	089b      	lsrs	r3, r3, #2
 8004eda:	3302      	adds	r3, #2
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ee2:	4b3a      	ldr	r3, [pc, #232]	; (8004fcc <HAL_GPIO_Init+0x324>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	43db      	mvns	r3, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f06:	4a31      	ldr	r2, [pc, #196]	; (8004fcc <HAL_GPIO_Init+0x324>)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f0c:	4b2f      	ldr	r3, [pc, #188]	; (8004fcc <HAL_GPIO_Init+0x324>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	43db      	mvns	r3, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f30:	4a26      	ldr	r2, [pc, #152]	; (8004fcc <HAL_GPIO_Init+0x324>)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f36:	4b25      	ldr	r3, [pc, #148]	; (8004fcc <HAL_GPIO_Init+0x324>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4013      	ands	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f5a:	4a1c      	ldr	r2, [pc, #112]	; (8004fcc <HAL_GPIO_Init+0x324>)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f60:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <HAL_GPIO_Init+0x324>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f84:	4a11      	ldr	r2, [pc, #68]	; (8004fcc <HAL_GPIO_Init+0x324>)
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b0f      	cmp	r3, #15
 8004f94:	f67f ae96 	bls.w	8004cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	3724      	adds	r7, #36	; 0x24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40013800 	.word	0x40013800
 8004fb0:	40020000 	.word	0x40020000
 8004fb4:	40020400 	.word	0x40020400
 8004fb8:	40020800 	.word	0x40020800
 8004fbc:	40020c00 	.word	0x40020c00
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	40021400 	.word	0x40021400
 8004fc8:	40021800 	.word	0x40021800
 8004fcc:	40013c00 	.word	0x40013c00

08004fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	887b      	ldrh	r3, [r7, #2]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
 8004fec:	e001      	b.n	8004ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	807b      	strh	r3, [r7, #2]
 800500c:	4613      	mov	r3, r2
 800500e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005010:	787b      	ldrb	r3, [r7, #1]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005016:	887a      	ldrh	r2, [r7, #2]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800501c:	e003      	b.n	8005026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800501e:	887b      	ldrh	r3, [r7, #2]
 8005020:	041a      	lsls	r2, r3, #16
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	619a      	str	r2, [r3, #24]
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e12b      	b.n	800529e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fe ff90 	bl	8003f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2224      	movs	r2, #36	; 0x24
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0201 	bic.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005086:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005096:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005098:	f001 fa1a 	bl	80064d0 <HAL_RCC_GetPCLK1Freq>
 800509c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4a81      	ldr	r2, [pc, #516]	; (80052a8 <HAL_I2C_Init+0x274>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d807      	bhi.n	80050b8 <HAL_I2C_Init+0x84>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4a80      	ldr	r2, [pc, #512]	; (80052ac <HAL_I2C_Init+0x278>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	bf94      	ite	ls
 80050b0:	2301      	movls	r3, #1
 80050b2:	2300      	movhi	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	e006      	b.n	80050c6 <HAL_I2C_Init+0x92>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4a7d      	ldr	r2, [pc, #500]	; (80052b0 <HAL_I2C_Init+0x27c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	bf94      	ite	ls
 80050c0:	2301      	movls	r3, #1
 80050c2:	2300      	movhi	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e0e7      	b.n	800529e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4a78      	ldr	r2, [pc, #480]	; (80052b4 <HAL_I2C_Init+0x280>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	0c9b      	lsrs	r3, r3, #18
 80050d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4a6a      	ldr	r2, [pc, #424]	; (80052a8 <HAL_I2C_Init+0x274>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d802      	bhi.n	8005108 <HAL_I2C_Init+0xd4>
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	3301      	adds	r3, #1
 8005106:	e009      	b.n	800511c <HAL_I2C_Init+0xe8>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800510e:	fb02 f303 	mul.w	r3, r2, r3
 8005112:	4a69      	ldr	r2, [pc, #420]	; (80052b8 <HAL_I2C_Init+0x284>)
 8005114:	fba2 2303 	umull	r2, r3, r2, r3
 8005118:	099b      	lsrs	r3, r3, #6
 800511a:	3301      	adds	r3, #1
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6812      	ldr	r2, [r2, #0]
 8005120:	430b      	orrs	r3, r1
 8005122:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800512e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	495c      	ldr	r1, [pc, #368]	; (80052a8 <HAL_I2C_Init+0x274>)
 8005138:	428b      	cmp	r3, r1
 800513a:	d819      	bhi.n	8005170 <HAL_I2C_Init+0x13c>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1e59      	subs	r1, r3, #1
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	fbb1 f3f3 	udiv	r3, r1, r3
 800514a:	1c59      	adds	r1, r3, #1
 800514c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005150:	400b      	ands	r3, r1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_I2C_Init+0x138>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	1e59      	subs	r1, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	fbb1 f3f3 	udiv	r3, r1, r3
 8005164:	3301      	adds	r3, #1
 8005166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516a:	e051      	b.n	8005210 <HAL_I2C_Init+0x1dc>
 800516c:	2304      	movs	r3, #4
 800516e:	e04f      	b.n	8005210 <HAL_I2C_Init+0x1dc>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d111      	bne.n	800519c <HAL_I2C_Init+0x168>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	1e58      	subs	r0, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6859      	ldr	r1, [r3, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	440b      	add	r3, r1
 8005186:	fbb0 f3f3 	udiv	r3, r0, r3
 800518a:	3301      	adds	r3, #1
 800518c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005190:	2b00      	cmp	r3, #0
 8005192:	bf0c      	ite	eq
 8005194:	2301      	moveq	r3, #1
 8005196:	2300      	movne	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	e012      	b.n	80051c2 <HAL_I2C_Init+0x18e>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1e58      	subs	r0, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6859      	ldr	r1, [r3, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	0099      	lsls	r1, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80051b2:	3301      	adds	r3, #1
 80051b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_I2C_Init+0x196>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e022      	b.n	8005210 <HAL_I2C_Init+0x1dc>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10e      	bne.n	80051f0 <HAL_I2C_Init+0x1bc>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1e58      	subs	r0, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6859      	ldr	r1, [r3, #4]
 80051da:	460b      	mov	r3, r1
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	440b      	add	r3, r1
 80051e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80051e4:	3301      	adds	r3, #1
 80051e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ee:	e00f      	b.n	8005210 <HAL_I2C_Init+0x1dc>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	1e58      	subs	r0, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6859      	ldr	r1, [r3, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	0099      	lsls	r1, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	fbb0 f3f3 	udiv	r3, r0, r3
 8005206:	3301      	adds	r3, #1
 8005208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800520c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	6809      	ldr	r1, [r1, #0]
 8005214:	4313      	orrs	r3, r2
 8005216:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69da      	ldr	r2, [r3, #28]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800523e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6911      	ldr	r1, [r2, #16]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68d2      	ldr	r2, [r2, #12]
 800524a:	4311      	orrs	r1, r2
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	430b      	orrs	r3, r1
 8005252:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695a      	ldr	r2, [r3, #20]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	000186a0 	.word	0x000186a0
 80052ac:	001e847f 	.word	0x001e847f
 80052b0:	003d08ff 	.word	0x003d08ff
 80052b4:	431bde83 	.word	0x431bde83
 80052b8:	10624dd3 	.word	0x10624dd3

080052bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	607a      	str	r2, [r7, #4]
 80052c6:	461a      	mov	r2, r3
 80052c8:	460b      	mov	r3, r1
 80052ca:	817b      	strh	r3, [r7, #10]
 80052cc:	4613      	mov	r3, r2
 80052ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052d0:	f7ff fb46 	bl	8004960 <HAL_GetTick>
 80052d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b20      	cmp	r3, #32
 80052e0:	f040 80e0 	bne.w	80054a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	2319      	movs	r3, #25
 80052ea:	2201      	movs	r2, #1
 80052ec:	4970      	ldr	r1, [pc, #448]	; (80054b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 fe02 	bl	8005ef8 <I2C_WaitOnFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80052fa:	2302      	movs	r3, #2
 80052fc:	e0d3      	b.n	80054a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_I2C_Master_Transmit+0x50>
 8005308:	2302      	movs	r3, #2
 800530a:	e0cc      	b.n	80054a6 <HAL_I2C_Master_Transmit+0x1ea>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b01      	cmp	r3, #1
 8005320:	d007      	beq.n	8005332 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0201 	orr.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005340:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2221      	movs	r2, #33	; 0x21
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2210      	movs	r2, #16
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	893a      	ldrh	r2, [r7, #8]
 8005362:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4a50      	ldr	r2, [pc, #320]	; (80054b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005372:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005374:	8979      	ldrh	r1, [r7, #10]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	6a3a      	ldr	r2, [r7, #32]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fbbc 	bl	8005af8 <I2C_MasterRequestWrite>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e08d      	b.n	80054a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538a:	2300      	movs	r3, #0
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80053a0:	e066      	b.n	8005470 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	6a39      	ldr	r1, [r7, #32]
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fe7c 	bl	80060a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00d      	beq.n	80053ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d107      	bne.n	80053ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e06b      	b.n	80054a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	781a      	ldrb	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b04      	cmp	r3, #4
 800540a:	d11b      	bne.n	8005444 <HAL_I2C_Master_Transmit+0x188>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005410:	2b00      	cmp	r3, #0
 8005412:	d017      	beq.n	8005444 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	781a      	ldrb	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542e:	b29b      	uxth	r3, r3
 8005430:	3b01      	subs	r3, #1
 8005432:	b29a      	uxth	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	6a39      	ldr	r1, [r7, #32]
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 fe6c 	bl	8006126 <I2C_WaitOnBTFFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00d      	beq.n	8005470 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	2b04      	cmp	r3, #4
 800545a:	d107      	bne.n	800546c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e01a      	b.n	80054a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005474:	2b00      	cmp	r3, #0
 8005476:	d194      	bne.n	80053a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e000      	b.n	80054a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
  }
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	00100002 	.word	0x00100002
 80054b4:	ffff0000 	.word	0xffff0000

080054b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	4608      	mov	r0, r1
 80054c2:	4611      	mov	r1, r2
 80054c4:	461a      	mov	r2, r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	817b      	strh	r3, [r7, #10]
 80054ca:	460b      	mov	r3, r1
 80054cc:	813b      	strh	r3, [r7, #8]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054d2:	f7ff fa45 	bl	8004960 <HAL_GetTick>
 80054d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	f040 80d9 	bne.w	8005698 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	2319      	movs	r3, #25
 80054ec:	2201      	movs	r2, #1
 80054ee:	496d      	ldr	r1, [pc, #436]	; (80056a4 <HAL_I2C_Mem_Write+0x1ec>)
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 fd01 	bl	8005ef8 <I2C_WaitOnFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80054fc:	2302      	movs	r3, #2
 80054fe:	e0cc      	b.n	800569a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_I2C_Mem_Write+0x56>
 800550a:	2302      	movs	r3, #2
 800550c:	e0c5      	b.n	800569a <HAL_I2C_Mem_Write+0x1e2>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b01      	cmp	r3, #1
 8005522:	d007      	beq.n	8005534 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005542:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2221      	movs	r2, #33	; 0x21
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2240      	movs	r2, #64	; 0x40
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a3a      	ldr	r2, [r7, #32]
 800555e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4a4d      	ldr	r2, [pc, #308]	; (80056a8 <HAL_I2C_Mem_Write+0x1f0>)
 8005574:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005576:	88f8      	ldrh	r0, [r7, #6]
 8005578:	893a      	ldrh	r2, [r7, #8]
 800557a:	8979      	ldrh	r1, [r7, #10]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	4603      	mov	r3, r0
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fb38 	bl	8005bfc <I2C_RequestMemoryWrite>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d052      	beq.n	8005638 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e081      	b.n	800569a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fd82 	bl	80060a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00d      	beq.n	80055c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d107      	bne.n	80055be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e06b      	b.n	800569a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	781a      	ldrb	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d11b      	bne.n	8005638 <HAL_I2C_Mem_Write+0x180>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005604:	2b00      	cmp	r3, #0
 8005606:	d017      	beq.n	8005638 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	781a      	ldrb	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1aa      	bne.n	8005596 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fd6e 	bl	8006126 <I2C_WaitOnBTFFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00d      	beq.n	800566c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005654:	2b04      	cmp	r3, #4
 8005656:	d107      	bne.n	8005668 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005666:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e016      	b.n	800569a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800567a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2220      	movs	r2, #32
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	e000      	b.n	800569a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005698:	2302      	movs	r3, #2
  }
}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	00100002 	.word	0x00100002
 80056a8:	ffff0000 	.word	0xffff0000

080056ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08c      	sub	sp, #48	; 0x30
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	4608      	mov	r0, r1
 80056b6:	4611      	mov	r1, r2
 80056b8:	461a      	mov	r2, r3
 80056ba:	4603      	mov	r3, r0
 80056bc:	817b      	strh	r3, [r7, #10]
 80056be:	460b      	mov	r3, r1
 80056c0:	813b      	strh	r3, [r7, #8]
 80056c2:	4613      	mov	r3, r2
 80056c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056c6:	f7ff f94b 	bl	8004960 <HAL_GetTick>
 80056ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	f040 8208 	bne.w	8005aea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	2319      	movs	r3, #25
 80056e0:	2201      	movs	r2, #1
 80056e2:	497b      	ldr	r1, [pc, #492]	; (80058d0 <HAL_I2C_Mem_Read+0x224>)
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 fc07 	bl	8005ef8 <I2C_WaitOnFlagUntilTimeout>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
 80056f2:	e1fb      	b.n	8005aec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_I2C_Mem_Read+0x56>
 80056fe:	2302      	movs	r3, #2
 8005700:	e1f4      	b.n	8005aec <HAL_I2C_Mem_Read+0x440>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b01      	cmp	r3, #1
 8005716:	d007      	beq.n	8005728 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005736:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2222      	movs	r2, #34	; 0x22
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2240      	movs	r2, #64	; 0x40
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005752:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005758:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4a5b      	ldr	r2, [pc, #364]	; (80058d4 <HAL_I2C_Mem_Read+0x228>)
 8005768:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800576a:	88f8      	ldrh	r0, [r7, #6]
 800576c:	893a      	ldrh	r2, [r7, #8]
 800576e:	8979      	ldrh	r1, [r7, #10]
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	4603      	mov	r3, r0
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 fad4 	bl	8005d28 <I2C_RequestMemoryRead>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e1b0      	b.n	8005aec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578e:	2b00      	cmp	r3, #0
 8005790:	d113      	bne.n	80057ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005792:	2300      	movs	r3, #0
 8005794:	623b      	str	r3, [r7, #32]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	623b      	str	r3, [r7, #32]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	623b      	str	r3, [r7, #32]
 80057a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	e184      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d11b      	bne.n	80057fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d2:	2300      	movs	r3, #0
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	e164      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d11b      	bne.n	800583a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005810:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005820:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005822:	2300      	movs	r3, #0
 8005824:	61bb      	str	r3, [r7, #24]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	e144      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005850:	e138      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005856:	2b03      	cmp	r3, #3
 8005858:	f200 80f1 	bhi.w	8005a3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005860:	2b01      	cmp	r3, #1
 8005862:	d123      	bne.n	80058ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005866:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fc9d 	bl	80061a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e139      	b.n	8005aec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691a      	ldr	r2, [r3, #16]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058aa:	e10b      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d14e      	bne.n	8005952 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ba:	2200      	movs	r2, #0
 80058bc:	4906      	ldr	r1, [pc, #24]	; (80058d8 <HAL_I2C_Mem_Read+0x22c>)
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 fb1a 	bl	8005ef8 <I2C_WaitOnFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e10e      	b.n	8005aec <HAL_I2C_Mem_Read+0x440>
 80058ce:	bf00      	nop
 80058d0:	00100002 	.word	0x00100002
 80058d4:	ffff0000 	.word	0xffff0000
 80058d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005950:	e0b8      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	2200      	movs	r2, #0
 800595a:	4966      	ldr	r1, [pc, #408]	; (8005af4 <HAL_I2C_Mem_Read+0x448>)
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 facb 	bl	8005ef8 <I2C_WaitOnFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e0bf      	b.n	8005aec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800597a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691a      	ldr	r2, [r3, #16]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	2200      	movs	r2, #0
 80059b6:	494f      	ldr	r1, [pc, #316]	; (8005af4 <HAL_I2C_Mem_Read+0x448>)
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fa9d 	bl	8005ef8 <I2C_WaitOnFlagUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e091      	b.n	8005aec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a3c:	e042      	b.n	8005ac4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fbb0 	bl	80061a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e04c      	b.n	8005aec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d118      	bne.n	8005ac4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f47f aec2 	bne.w	8005852 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e000      	b.n	8005aec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005aea:	2302      	movs	r3, #2
  }
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3728      	adds	r7, #40	; 0x28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	00010004 	.word	0x00010004

08005af8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af02      	add	r7, sp, #8
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	607a      	str	r2, [r7, #4]
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	460b      	mov	r3, r1
 8005b06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d006      	beq.n	8005b22 <I2C_MasterRequestWrite+0x2a>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d003      	beq.n	8005b22 <I2C_MasterRequestWrite+0x2a>
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b20:	d108      	bne.n	8005b34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	e00b      	b.n	8005b4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	2b12      	cmp	r3, #18
 8005b3a:	d107      	bne.n	8005b4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f9cd 	bl	8005ef8 <I2C_WaitOnFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00d      	beq.n	8005b80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b72:	d103      	bne.n	8005b7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e035      	b.n	8005bec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b88:	d108      	bne.n	8005b9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b8a:	897b      	ldrh	r3, [r7, #10]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b98:	611a      	str	r2, [r3, #16]
 8005b9a:	e01b      	b.n	8005bd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b9c:	897b      	ldrh	r3, [r7, #10]
 8005b9e:	11db      	asrs	r3, r3, #7
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	f003 0306 	and.w	r3, r3, #6
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	f063 030f 	orn	r3, r3, #15
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	490e      	ldr	r1, [pc, #56]	; (8005bf4 <I2C_MasterRequestWrite+0xfc>)
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f9f3 	bl	8005fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e010      	b.n	8005bec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005bca:	897b      	ldrh	r3, [r7, #10]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	4907      	ldr	r1, [pc, #28]	; (8005bf8 <I2C_MasterRequestWrite+0x100>)
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f9e3 	bl	8005fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e000      	b.n	8005bec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	00010008 	.word	0x00010008
 8005bf8:	00010002 	.word	0x00010002

08005bfc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	4608      	mov	r0, r1
 8005c06:	4611      	mov	r1, r2
 8005c08:	461a      	mov	r2, r3
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	817b      	strh	r3, [r7, #10]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	813b      	strh	r3, [r7, #8]
 8005c12:	4613      	mov	r3, r2
 8005c14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f960 	bl	8005ef8 <I2C_WaitOnFlagUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00d      	beq.n	8005c5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c4c:	d103      	bne.n	8005c56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e05f      	b.n	8005d1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c5a:	897b      	ldrh	r3, [r7, #10]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	6a3a      	ldr	r2, [r7, #32]
 8005c6e:	492d      	ldr	r1, [pc, #180]	; (8005d24 <I2C_RequestMemoryWrite+0x128>)
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f998 	bl	8005fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e04c      	b.n	8005d1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c80:	2300      	movs	r3, #0
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c98:	6a39      	ldr	r1, [r7, #32]
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fa02 	bl	80060a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00d      	beq.n	8005cc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d107      	bne.n	8005cbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e02b      	b.n	8005d1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d105      	bne.n	8005cd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cc8:	893b      	ldrh	r3, [r7, #8]
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	611a      	str	r2, [r3, #16]
 8005cd2:	e021      	b.n	8005d18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005cd4:	893b      	ldrh	r3, [r7, #8]
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce4:	6a39      	ldr	r1, [r7, #32]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f9dc 	bl	80060a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00d      	beq.n	8005d0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d107      	bne.n	8005d0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e005      	b.n	8005d1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d0e:	893b      	ldrh	r3, [r7, #8]
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	00010002 	.word	0x00010002

08005d28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	4608      	mov	r0, r1
 8005d32:	4611      	mov	r1, r2
 8005d34:	461a      	mov	r2, r3
 8005d36:	4603      	mov	r3, r0
 8005d38:	817b      	strh	r3, [r7, #10]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	813b      	strh	r3, [r7, #8]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f8c2 	bl	8005ef8 <I2C_WaitOnFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00d      	beq.n	8005d96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d88:	d103      	bne.n	8005d92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e0aa      	b.n	8005eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d96:	897b      	ldrh	r3, [r7, #10]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005da4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	6a3a      	ldr	r2, [r7, #32]
 8005daa:	4952      	ldr	r1, [pc, #328]	; (8005ef4 <I2C_RequestMemoryRead+0x1cc>)
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f8fa 	bl	8005fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e097      	b.n	8005eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd4:	6a39      	ldr	r1, [r7, #32]
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 f964 	bl	80060a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00d      	beq.n	8005dfe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d107      	bne.n	8005dfa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e076      	b.n	8005eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d105      	bne.n	8005e10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e04:	893b      	ldrh	r3, [r7, #8]
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	611a      	str	r2, [r3, #16]
 8005e0e:	e021      	b.n	8005e54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e10:	893b      	ldrh	r3, [r7, #8]
 8005e12:	0a1b      	lsrs	r3, r3, #8
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e20:	6a39      	ldr	r1, [r7, #32]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 f93e 	bl	80060a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00d      	beq.n	8005e4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d107      	bne.n	8005e46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e050      	b.n	8005eec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e4a:	893b      	ldrh	r3, [r7, #8]
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e56:	6a39      	ldr	r1, [r7, #32]
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f923 	bl	80060a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00d      	beq.n	8005e80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d107      	bne.n	8005e7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e035      	b.n	8005eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f82b 	bl	8005ef8 <I2C_WaitOnFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00d      	beq.n	8005ec4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb6:	d103      	bne.n	8005ec0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e013      	b.n	8005eec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ec4:	897b      	ldrh	r3, [r7, #10]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f043 0301 	orr.w	r3, r3, #1
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	6a3a      	ldr	r2, [r7, #32]
 8005ed8:	4906      	ldr	r1, [pc, #24]	; (8005ef4 <I2C_RequestMemoryRead+0x1cc>)
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f863 	bl	8005fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	00010002 	.word	0x00010002

08005ef8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	4613      	mov	r3, r2
 8005f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f08:	e025      	b.n	8005f56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f10:	d021      	beq.n	8005f56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f12:	f7fe fd25 	bl	8004960 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d302      	bcc.n	8005f28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d116      	bne.n	8005f56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	f043 0220 	orr.w	r2, r3, #32
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e023      	b.n	8005f9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	0c1b      	lsrs	r3, r3, #16
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d10d      	bne.n	8005f7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	43da      	mvns	r2, r3
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bf0c      	ite	eq
 8005f72:	2301      	moveq	r3, #1
 8005f74:	2300      	movne	r3, #0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	461a      	mov	r2, r3
 8005f7a:	e00c      	b.n	8005f96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	43da      	mvns	r2, r3
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4013      	ands	r3, r2
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bf0c      	ite	eq
 8005f8e:	2301      	moveq	r3, #1
 8005f90:	2300      	movne	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	79fb      	ldrb	r3, [r7, #7]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d0b6      	beq.n	8005f0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	607a      	str	r2, [r7, #4]
 8005fb2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fb4:	e051      	b.n	800605a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc4:	d123      	bne.n	800600e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	f043 0204 	orr.w	r2, r3, #4
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e046      	b.n	800609c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d021      	beq.n	800605a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006016:	f7fe fca3 	bl	8004960 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d302      	bcc.n	800602c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d116      	bne.n	800605a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f043 0220 	orr.w	r2, r3, #32
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e020      	b.n	800609c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	0c1b      	lsrs	r3, r3, #16
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b01      	cmp	r3, #1
 8006062:	d10c      	bne.n	800607e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	43da      	mvns	r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4013      	ands	r3, r2
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	bf14      	ite	ne
 8006076:	2301      	movne	r3, #1
 8006078:	2300      	moveq	r3, #0
 800607a:	b2db      	uxtb	r3, r3
 800607c:	e00b      	b.n	8006096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	43da      	mvns	r2, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	4013      	ands	r3, r2
 800608a:	b29b      	uxth	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	bf14      	ite	ne
 8006090:	2301      	movne	r3, #1
 8006092:	2300      	moveq	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d18d      	bne.n	8005fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060b0:	e02d      	b.n	800610e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 f8ce 	bl	8006254 <I2C_IsAcknowledgeFailed>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e02d      	b.n	800611e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d021      	beq.n	800610e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ca:	f7fe fc49 	bl	8004960 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d302      	bcc.n	80060e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d116      	bne.n	800610e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	f043 0220 	orr.w	r2, r3, #32
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e007      	b.n	800611e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006118:	2b80      	cmp	r3, #128	; 0x80
 800611a:	d1ca      	bne.n	80060b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006132:	e02d      	b.n	8006190 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f88d 	bl	8006254 <I2C_IsAcknowledgeFailed>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e02d      	b.n	80061a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d021      	beq.n	8006190 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800614c:	f7fe fc08 	bl	8004960 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	429a      	cmp	r2, r3
 800615a:	d302      	bcc.n	8006162 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d116      	bne.n	8006190 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	f043 0220 	orr.w	r2, r3, #32
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e007      	b.n	80061a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b04      	cmp	r3, #4
 800619c:	d1ca      	bne.n	8006134 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061b4:	e042      	b.n	800623c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	f003 0310 	and.w	r3, r3, #16
 80061c0:	2b10      	cmp	r3, #16
 80061c2:	d119      	bne.n	80061f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0210 	mvn.w	r2, #16
 80061cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e029      	b.n	800624c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f8:	f7fe fbb2 	bl	8004960 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	429a      	cmp	r2, r3
 8006206:	d302      	bcc.n	800620e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d116      	bne.n	800623c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	f043 0220 	orr.w	r2, r3, #32
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e007      	b.n	800624c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b40      	cmp	r3, #64	; 0x40
 8006248:	d1b5      	bne.n	80061b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800626a:	d11b      	bne.n	80062a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006274:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	f043 0204 	orr.w	r2, r3, #4
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
	...

080062b4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80062c0:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <HAL_PWR_EnterSLEEPMode+0x34>)
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	4a08      	ldr	r2, [pc, #32]	; (80062e8 <HAL_PWR_EnterSLEEPMode+0x34>)
 80062c6:	f023 0304 	bic.w	r3, r3, #4
 80062ca:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d101      	bne.n	80062d6 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80062d2:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80062d4:	e002      	b.n	80062dc <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80062d6:	bf40      	sev
    __WFE();
 80062d8:	bf20      	wfe
    __WFE();
 80062da:	bf20      	wfe
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	e000ed00 	.word	0xe000ed00

080062ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e0cc      	b.n	800649a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006300:	4b68      	ldr	r3, [pc, #416]	; (80064a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d90c      	bls.n	8006328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800630e:	4b65      	ldr	r3, [pc, #404]	; (80064a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006316:	4b63      	ldr	r3, [pc, #396]	; (80064a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d001      	beq.n	8006328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e0b8      	b.n	800649a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d020      	beq.n	8006376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006340:	4b59      	ldr	r3, [pc, #356]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	4a58      	ldr	r2, [pc, #352]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800634a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0308 	and.w	r3, r3, #8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d005      	beq.n	8006364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006358:	4b53      	ldr	r3, [pc, #332]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	4a52      	ldr	r2, [pc, #328]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006364:	4b50      	ldr	r3, [pc, #320]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	494d      	ldr	r1, [pc, #308]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	4313      	orrs	r3, r2
 8006374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d044      	beq.n	800640c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d107      	bne.n	800639a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638a:	4b47      	ldr	r3, [pc, #284]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d119      	bne.n	80063ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e07f      	b.n	800649a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d003      	beq.n	80063aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d107      	bne.n	80063ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063aa:	4b3f      	ldr	r3, [pc, #252]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d109      	bne.n	80063ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e06f      	b.n	800649a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ba:	4b3b      	ldr	r3, [pc, #236]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e067      	b.n	800649a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063ca:	4b37      	ldr	r3, [pc, #220]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f023 0203 	bic.w	r2, r3, #3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	4934      	ldr	r1, [pc, #208]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063dc:	f7fe fac0 	bl	8004960 <HAL_GetTick>
 80063e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063e2:	e00a      	b.n	80063fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063e4:	f7fe fabc 	bl	8004960 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e04f      	b.n	800649a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063fa:	4b2b      	ldr	r3, [pc, #172]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 020c 	and.w	r2, r3, #12
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	429a      	cmp	r2, r3
 800640a:	d1eb      	bne.n	80063e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800640c:	4b25      	ldr	r3, [pc, #148]	; (80064a4 <HAL_RCC_ClockConfig+0x1b8>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 030f 	and.w	r3, r3, #15
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d20c      	bcs.n	8006434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641a:	4b22      	ldr	r3, [pc, #136]	; (80064a4 <HAL_RCC_ClockConfig+0x1b8>)
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006422:	4b20      	ldr	r3, [pc, #128]	; (80064a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d001      	beq.n	8006434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e032      	b.n	800649a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006440:	4b19      	ldr	r3, [pc, #100]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	4916      	ldr	r1, [pc, #88]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	4313      	orrs	r3, r2
 8006450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800645e:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	490e      	ldr	r1, [pc, #56]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 800646e:	4313      	orrs	r3, r2
 8006470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006472:	f000 f887 	bl	8006584 <HAL_RCC_GetSysClockFreq>
 8006476:	4602      	mov	r2, r0
 8006478:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <HAL_RCC_ClockConfig+0x1bc>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	490a      	ldr	r1, [pc, #40]	; (80064ac <HAL_RCC_ClockConfig+0x1c0>)
 8006484:	5ccb      	ldrb	r3, [r1, r3]
 8006486:	fa22 f303 	lsr.w	r3, r2, r3
 800648a:	4a09      	ldr	r2, [pc, #36]	; (80064b0 <HAL_RCC_ClockConfig+0x1c4>)
 800648c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800648e:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe f876 	bl	8004584 <HAL_InitTick>

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40023c00 	.word	0x40023c00
 80064a8:	40023800 	.word	0x40023800
 80064ac:	08012448 	.word	0x08012448
 80064b0:	20000008 	.word	0x20000008
 80064b4:	2000000c 	.word	0x2000000c

080064b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064bc:	4b03      	ldr	r3, [pc, #12]	; (80064cc <HAL_RCC_GetHCLKFreq+0x14>)
 80064be:	681b      	ldr	r3, [r3, #0]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	20000008 	.word	0x20000008

080064d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064d4:	f7ff fff0 	bl	80064b8 <HAL_RCC_GetHCLKFreq>
 80064d8:	4602      	mov	r2, r0
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	0a9b      	lsrs	r3, r3, #10
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	4903      	ldr	r1, [pc, #12]	; (80064f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064e6:	5ccb      	ldrb	r3, [r1, r3]
 80064e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	40023800 	.word	0x40023800
 80064f4:	08012458 	.word	0x08012458

080064f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064fc:	f7ff ffdc 	bl	80064b8 <HAL_RCC_GetHCLKFreq>
 8006500:	4602      	mov	r2, r0
 8006502:	4b05      	ldr	r3, [pc, #20]	; (8006518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	0b5b      	lsrs	r3, r3, #13
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	4903      	ldr	r1, [pc, #12]	; (800651c <HAL_RCC_GetPCLK2Freq+0x24>)
 800650e:	5ccb      	ldrb	r3, [r1, r3]
 8006510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006514:	4618      	mov	r0, r3
 8006516:	bd80      	pop	{r7, pc}
 8006518:	40023800 	.word	0x40023800
 800651c:	08012458 	.word	0x08012458

08006520 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	220f      	movs	r2, #15
 800652e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006530:	4b12      	ldr	r3, [pc, #72]	; (800657c <HAL_RCC_GetClockConfig+0x5c>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 0203 	and.w	r2, r3, #3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800653c:	4b0f      	ldr	r3, [pc, #60]	; (800657c <HAL_RCC_GetClockConfig+0x5c>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006548:	4b0c      	ldr	r3, [pc, #48]	; (800657c <HAL_RCC_GetClockConfig+0x5c>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006554:	4b09      	ldr	r3, [pc, #36]	; (800657c <HAL_RCC_GetClockConfig+0x5c>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	08db      	lsrs	r3, r3, #3
 800655a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006562:	4b07      	ldr	r3, [pc, #28]	; (8006580 <HAL_RCC_GetClockConfig+0x60>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 020f 	and.w	r2, r3, #15
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	601a      	str	r2, [r3, #0]
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40023800 	.word	0x40023800
 8006580:	40023c00 	.word	0x40023c00

08006584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006588:	b0a6      	sub	sp, #152	; 0x98
 800658a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065aa:	4bc8      	ldr	r3, [pc, #800]	; (80068cc <HAL_RCC_GetSysClockFreq+0x348>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 030c 	and.w	r3, r3, #12
 80065b2:	2b0c      	cmp	r3, #12
 80065b4:	f200 817e 	bhi.w	80068b4 <HAL_RCC_GetSysClockFreq+0x330>
 80065b8:	a201      	add	r2, pc, #4	; (adr r2, 80065c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80065ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065be:	bf00      	nop
 80065c0:	080065f5 	.word	0x080065f5
 80065c4:	080068b5 	.word	0x080068b5
 80065c8:	080068b5 	.word	0x080068b5
 80065cc:	080068b5 	.word	0x080068b5
 80065d0:	080065fd 	.word	0x080065fd
 80065d4:	080068b5 	.word	0x080068b5
 80065d8:	080068b5 	.word	0x080068b5
 80065dc:	080068b5 	.word	0x080068b5
 80065e0:	08006605 	.word	0x08006605
 80065e4:	080068b5 	.word	0x080068b5
 80065e8:	080068b5 	.word	0x080068b5
 80065ec:	080068b5 	.word	0x080068b5
 80065f0:	0800676f 	.word	0x0800676f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065f4:	4bb6      	ldr	r3, [pc, #728]	; (80068d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80065f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80065fa:	e15f      	b.n	80068bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065fc:	4bb5      	ldr	r3, [pc, #724]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80065fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006602:	e15b      	b.n	80068bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006604:	4bb1      	ldr	r3, [pc, #708]	; (80068cc <HAL_RCC_GetSysClockFreq+0x348>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800660c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006610:	4bae      	ldr	r3, [pc, #696]	; (80068cc <HAL_RCC_GetSysClockFreq+0x348>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d031      	beq.n	8006680 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800661c:	4bab      	ldr	r3, [pc, #684]	; (80068cc <HAL_RCC_GetSysClockFreq+0x348>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	099b      	lsrs	r3, r3, #6
 8006622:	2200      	movs	r2, #0
 8006624:	66bb      	str	r3, [r7, #104]	; 0x68
 8006626:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800662a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662e:	663b      	str	r3, [r7, #96]	; 0x60
 8006630:	2300      	movs	r3, #0
 8006632:	667b      	str	r3, [r7, #100]	; 0x64
 8006634:	4ba7      	ldr	r3, [pc, #668]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x350>)
 8006636:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800663a:	462a      	mov	r2, r5
 800663c:	fb03 f202 	mul.w	r2, r3, r2
 8006640:	2300      	movs	r3, #0
 8006642:	4621      	mov	r1, r4
 8006644:	fb01 f303 	mul.w	r3, r1, r3
 8006648:	4413      	add	r3, r2
 800664a:	4aa2      	ldr	r2, [pc, #648]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800664c:	4621      	mov	r1, r4
 800664e:	fba1 1202 	umull	r1, r2, r1, r2
 8006652:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006654:	460a      	mov	r2, r1
 8006656:	67ba      	str	r2, [r7, #120]	; 0x78
 8006658:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800665a:	4413      	add	r3, r2
 800665c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800665e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006662:	2200      	movs	r2, #0
 8006664:	65bb      	str	r3, [r7, #88]	; 0x58
 8006666:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006668:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800666c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006670:	f7fa fb7a 	bl	8000d68 <__aeabi_uldivmod>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4613      	mov	r3, r2
 800667a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800667e:	e064      	b.n	800674a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006680:	4b92      	ldr	r3, [pc, #584]	; (80068cc <HAL_RCC_GetSysClockFreq+0x348>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	099b      	lsrs	r3, r3, #6
 8006686:	2200      	movs	r2, #0
 8006688:	653b      	str	r3, [r7, #80]	; 0x50
 800668a:	657a      	str	r2, [r7, #84]	; 0x54
 800668c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800668e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006692:	64bb      	str	r3, [r7, #72]	; 0x48
 8006694:	2300      	movs	r3, #0
 8006696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006698:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800669c:	4622      	mov	r2, r4
 800669e:	462b      	mov	r3, r5
 80066a0:	f04f 0000 	mov.w	r0, #0
 80066a4:	f04f 0100 	mov.w	r1, #0
 80066a8:	0159      	lsls	r1, r3, #5
 80066aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066ae:	0150      	lsls	r0, r2, #5
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4621      	mov	r1, r4
 80066b6:	1a51      	subs	r1, r2, r1
 80066b8:	6139      	str	r1, [r7, #16]
 80066ba:	4629      	mov	r1, r5
 80066bc:	eb63 0301 	sbc.w	r3, r3, r1
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	f04f 0200 	mov.w	r2, #0
 80066c6:	f04f 0300 	mov.w	r3, #0
 80066ca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066ce:	4659      	mov	r1, fp
 80066d0:	018b      	lsls	r3, r1, #6
 80066d2:	4651      	mov	r1, sl
 80066d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066d8:	4651      	mov	r1, sl
 80066da:	018a      	lsls	r2, r1, #6
 80066dc:	4651      	mov	r1, sl
 80066de:	ebb2 0801 	subs.w	r8, r2, r1
 80066e2:	4659      	mov	r1, fp
 80066e4:	eb63 0901 	sbc.w	r9, r3, r1
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066fc:	4690      	mov	r8, r2
 80066fe:	4699      	mov	r9, r3
 8006700:	4623      	mov	r3, r4
 8006702:	eb18 0303 	adds.w	r3, r8, r3
 8006706:	60bb      	str	r3, [r7, #8]
 8006708:	462b      	mov	r3, r5
 800670a:	eb49 0303 	adc.w	r3, r9, r3
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800671c:	4629      	mov	r1, r5
 800671e:	028b      	lsls	r3, r1, #10
 8006720:	4621      	mov	r1, r4
 8006722:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006726:	4621      	mov	r1, r4
 8006728:	028a      	lsls	r2, r1, #10
 800672a:	4610      	mov	r0, r2
 800672c:	4619      	mov	r1, r3
 800672e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006732:	2200      	movs	r2, #0
 8006734:	643b      	str	r3, [r7, #64]	; 0x40
 8006736:	647a      	str	r2, [r7, #68]	; 0x44
 8006738:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800673c:	f7fa fb14 	bl	8000d68 <__aeabi_uldivmod>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4613      	mov	r3, r2
 8006746:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800674a:	4b60      	ldr	r3, [pc, #384]	; (80068cc <HAL_RCC_GetSysClockFreq+0x348>)
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	0c1b      	lsrs	r3, r3, #16
 8006750:	f003 0303 	and.w	r3, r3, #3
 8006754:	3301      	adds	r3, #1
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800675c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006760:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006764:	fbb2 f3f3 	udiv	r3, r2, r3
 8006768:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800676c:	e0a6      	b.n	80068bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800676e:	4b57      	ldr	r3, [pc, #348]	; (80068cc <HAL_RCC_GetSysClockFreq+0x348>)
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800677a:	4b54      	ldr	r3, [pc, #336]	; (80068cc <HAL_RCC_GetSysClockFreq+0x348>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d02a      	beq.n	80067dc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006786:	4b51      	ldr	r3, [pc, #324]	; (80068cc <HAL_RCC_GetSysClockFreq+0x348>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	099b      	lsrs	r3, r3, #6
 800678c:	2200      	movs	r2, #0
 800678e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006790:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006798:	2100      	movs	r1, #0
 800679a:	4b4e      	ldr	r3, [pc, #312]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800679c:	fb03 f201 	mul.w	r2, r3, r1
 80067a0:	2300      	movs	r3, #0
 80067a2:	fb00 f303 	mul.w	r3, r0, r3
 80067a6:	4413      	add	r3, r2
 80067a8:	4a4a      	ldr	r2, [pc, #296]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80067aa:	fba0 1202 	umull	r1, r2, r0, r2
 80067ae:	677a      	str	r2, [r7, #116]	; 0x74
 80067b0:	460a      	mov	r2, r1
 80067b2:	673a      	str	r2, [r7, #112]	; 0x70
 80067b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80067b6:	4413      	add	r3, r2
 80067b8:	677b      	str	r3, [r7, #116]	; 0x74
 80067ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067be:	2200      	movs	r2, #0
 80067c0:	633b      	str	r3, [r7, #48]	; 0x30
 80067c2:	637a      	str	r2, [r7, #52]	; 0x34
 80067c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80067c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80067cc:	f7fa facc 	bl	8000d68 <__aeabi_uldivmod>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4613      	mov	r3, r2
 80067d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067da:	e05b      	b.n	8006894 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067dc:	4b3b      	ldr	r3, [pc, #236]	; (80068cc <HAL_RCC_GetSysClockFreq+0x348>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	099b      	lsrs	r3, r3, #6
 80067e2:	2200      	movs	r2, #0
 80067e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ee:	623b      	str	r3, [r7, #32]
 80067f0:	2300      	movs	r3, #0
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
 80067f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067f8:	4642      	mov	r2, r8
 80067fa:	464b      	mov	r3, r9
 80067fc:	f04f 0000 	mov.w	r0, #0
 8006800:	f04f 0100 	mov.w	r1, #0
 8006804:	0159      	lsls	r1, r3, #5
 8006806:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800680a:	0150      	lsls	r0, r2, #5
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4641      	mov	r1, r8
 8006812:	ebb2 0a01 	subs.w	sl, r2, r1
 8006816:	4649      	mov	r1, r9
 8006818:	eb63 0b01 	sbc.w	fp, r3, r1
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006828:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800682c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006830:	ebb2 040a 	subs.w	r4, r2, sl
 8006834:	eb63 050b 	sbc.w	r5, r3, fp
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	00eb      	lsls	r3, r5, #3
 8006842:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006846:	00e2      	lsls	r2, r4, #3
 8006848:	4614      	mov	r4, r2
 800684a:	461d      	mov	r5, r3
 800684c:	4643      	mov	r3, r8
 800684e:	18e3      	adds	r3, r4, r3
 8006850:	603b      	str	r3, [r7, #0]
 8006852:	464b      	mov	r3, r9
 8006854:	eb45 0303 	adc.w	r3, r5, r3
 8006858:	607b      	str	r3, [r7, #4]
 800685a:	f04f 0200 	mov.w	r2, #0
 800685e:	f04f 0300 	mov.w	r3, #0
 8006862:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006866:	4629      	mov	r1, r5
 8006868:	028b      	lsls	r3, r1, #10
 800686a:	4621      	mov	r1, r4
 800686c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006870:	4621      	mov	r1, r4
 8006872:	028a      	lsls	r2, r1, #10
 8006874:	4610      	mov	r0, r2
 8006876:	4619      	mov	r1, r3
 8006878:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800687c:	2200      	movs	r2, #0
 800687e:	61bb      	str	r3, [r7, #24]
 8006880:	61fa      	str	r2, [r7, #28]
 8006882:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006886:	f7fa fa6f 	bl	8000d68 <__aeabi_uldivmod>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	4613      	mov	r3, r2
 8006890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006894:	4b0d      	ldr	r3, [pc, #52]	; (80068cc <HAL_RCC_GetSysClockFreq+0x348>)
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	0f1b      	lsrs	r3, r3, #28
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80068a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80068b2:	e003      	b.n	80068bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068b4:	4b06      	ldr	r3, [pc, #24]	; (80068d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80068b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80068ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3798      	adds	r7, #152	; 0x98
 80068c4:	46bd      	mov	sp, r7
 80068c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ca:	bf00      	nop
 80068cc:	40023800 	.word	0x40023800
 80068d0:	00f42400 	.word	0x00f42400
 80068d4:	017d7840 	.word	0x017d7840

080068d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e28d      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 8083 	beq.w	80069fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80068f8:	4b94      	ldr	r3, [pc, #592]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f003 030c 	and.w	r3, r3, #12
 8006900:	2b04      	cmp	r3, #4
 8006902:	d019      	beq.n	8006938 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006904:	4b91      	ldr	r3, [pc, #580]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800690c:	2b08      	cmp	r3, #8
 800690e:	d106      	bne.n	800691e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006910:	4b8e      	ldr	r3, [pc, #568]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800691c:	d00c      	beq.n	8006938 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800691e:	4b8b      	ldr	r3, [pc, #556]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006926:	2b0c      	cmp	r3, #12
 8006928:	d112      	bne.n	8006950 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800692a:	4b88      	ldr	r3, [pc, #544]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006936:	d10b      	bne.n	8006950 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006938:	4b84      	ldr	r3, [pc, #528]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d05b      	beq.n	80069fc <HAL_RCC_OscConfig+0x124>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d157      	bne.n	80069fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e25a      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006958:	d106      	bne.n	8006968 <HAL_RCC_OscConfig+0x90>
 800695a:	4b7c      	ldr	r3, [pc, #496]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a7b      	ldr	r2, [pc, #492]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	e01d      	b.n	80069a4 <HAL_RCC_OscConfig+0xcc>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006970:	d10c      	bne.n	800698c <HAL_RCC_OscConfig+0xb4>
 8006972:	4b76      	ldr	r3, [pc, #472]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a75      	ldr	r2, [pc, #468]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800697c:	6013      	str	r3, [r2, #0]
 800697e:	4b73      	ldr	r3, [pc, #460]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a72      	ldr	r2, [pc, #456]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	e00b      	b.n	80069a4 <HAL_RCC_OscConfig+0xcc>
 800698c:	4b6f      	ldr	r3, [pc, #444]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a6e      	ldr	r2, [pc, #440]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	4b6c      	ldr	r3, [pc, #432]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a6b      	ldr	r2, [pc, #428]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 800699e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d013      	beq.n	80069d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ac:	f7fd ffd8 	bl	8004960 <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069b2:	e008      	b.n	80069c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069b4:	f7fd ffd4 	bl	8004960 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b64      	cmp	r3, #100	; 0x64
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e21f      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069c6:	4b61      	ldr	r3, [pc, #388]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0f0      	beq.n	80069b4 <HAL_RCC_OscConfig+0xdc>
 80069d2:	e014      	b.n	80069fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d4:	f7fd ffc4 	bl	8004960 <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069dc:	f7fd ffc0 	bl	8004960 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b64      	cmp	r3, #100	; 0x64
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e20b      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ee:	4b57      	ldr	r3, [pc, #348]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f0      	bne.n	80069dc <HAL_RCC_OscConfig+0x104>
 80069fa:	e000      	b.n	80069fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d06f      	beq.n	8006aea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006a0a:	4b50      	ldr	r3, [pc, #320]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 030c 	and.w	r3, r3, #12
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d017      	beq.n	8006a46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a16:	4b4d      	ldr	r3, [pc, #308]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d105      	bne.n	8006a2e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a22:	4b4a      	ldr	r3, [pc, #296]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00b      	beq.n	8006a46 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a2e:	4b47      	ldr	r3, [pc, #284]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a36:	2b0c      	cmp	r3, #12
 8006a38:	d11c      	bne.n	8006a74 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a3a:	4b44      	ldr	r3, [pc, #272]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d116      	bne.n	8006a74 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a46:	4b41      	ldr	r3, [pc, #260]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d005      	beq.n	8006a5e <HAL_RCC_OscConfig+0x186>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d001      	beq.n	8006a5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e1d3      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a5e:	4b3b      	ldr	r3, [pc, #236]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	4937      	ldr	r1, [pc, #220]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a72:	e03a      	b.n	8006aea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d020      	beq.n	8006abe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a7c:	4b34      	ldr	r3, [pc, #208]	; (8006b50 <HAL_RCC_OscConfig+0x278>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a82:	f7fd ff6d 	bl	8004960 <HAL_GetTick>
 8006a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a8a:	f7fd ff69 	bl	8004960 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e1b4      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a9c:	4b2b      	ldr	r3, [pc, #172]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0f0      	beq.n	8006a8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aa8:	4b28      	ldr	r3, [pc, #160]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	4925      	ldr	r1, [pc, #148]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	600b      	str	r3, [r1, #0]
 8006abc:	e015      	b.n	8006aea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006abe:	4b24      	ldr	r3, [pc, #144]	; (8006b50 <HAL_RCC_OscConfig+0x278>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac4:	f7fd ff4c 	bl	8004960 <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006acc:	f7fd ff48 	bl	8004960 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e193      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ade:	4b1b      	ldr	r3, [pc, #108]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1f0      	bne.n	8006acc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d036      	beq.n	8006b64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d016      	beq.n	8006b2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006afe:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006b00:	2201      	movs	r2, #1
 8006b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b04:	f7fd ff2c 	bl	8004960 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b0c:	f7fd ff28 	bl	8004960 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e173      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b1e:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <HAL_RCC_OscConfig+0x274>)
 8006b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f0      	beq.n	8006b0c <HAL_RCC_OscConfig+0x234>
 8006b2a:	e01b      	b.n	8006b64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b2c:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <HAL_RCC_OscConfig+0x27c>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b32:	f7fd ff15 	bl	8004960 <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b38:	e00e      	b.n	8006b58 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b3a:	f7fd ff11 	bl	8004960 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d907      	bls.n	8006b58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e15c      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
 8006b4c:	40023800 	.word	0x40023800
 8006b50:	42470000 	.word	0x42470000
 8006b54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b58:	4b8a      	ldr	r3, [pc, #552]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1ea      	bne.n	8006b3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8097 	beq.w	8006ca0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b72:	2300      	movs	r3, #0
 8006b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b76:	4b83      	ldr	r3, [pc, #524]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10f      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b82:	2300      	movs	r3, #0
 8006b84:	60bb      	str	r3, [r7, #8]
 8006b86:	4b7f      	ldr	r3, [pc, #508]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	4a7e      	ldr	r2, [pc, #504]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b90:	6413      	str	r3, [r2, #64]	; 0x40
 8006b92:	4b7c      	ldr	r3, [pc, #496]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b9a:	60bb      	str	r3, [r7, #8]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba2:	4b79      	ldr	r3, [pc, #484]	; (8006d88 <HAL_RCC_OscConfig+0x4b0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d118      	bne.n	8006be0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bae:	4b76      	ldr	r3, [pc, #472]	; (8006d88 <HAL_RCC_OscConfig+0x4b0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a75      	ldr	r2, [pc, #468]	; (8006d88 <HAL_RCC_OscConfig+0x4b0>)
 8006bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bba:	f7fd fed1 	bl	8004960 <HAL_GetTick>
 8006bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc0:	e008      	b.n	8006bd4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bc2:	f7fd fecd 	bl	8004960 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d901      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e118      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bd4:	4b6c      	ldr	r3, [pc, #432]	; (8006d88 <HAL_RCC_OscConfig+0x4b0>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d0f0      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d106      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x31e>
 8006be8:	4b66      	ldr	r3, [pc, #408]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bec:	4a65      	ldr	r2, [pc, #404]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006bee:	f043 0301 	orr.w	r3, r3, #1
 8006bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf4:	e01c      	b.n	8006c30 <HAL_RCC_OscConfig+0x358>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	2b05      	cmp	r3, #5
 8006bfc:	d10c      	bne.n	8006c18 <HAL_RCC_OscConfig+0x340>
 8006bfe:	4b61      	ldr	r3, [pc, #388]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c02:	4a60      	ldr	r2, [pc, #384]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006c04:	f043 0304 	orr.w	r3, r3, #4
 8006c08:	6713      	str	r3, [r2, #112]	; 0x70
 8006c0a:	4b5e      	ldr	r3, [pc, #376]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0e:	4a5d      	ldr	r2, [pc, #372]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006c10:	f043 0301 	orr.w	r3, r3, #1
 8006c14:	6713      	str	r3, [r2, #112]	; 0x70
 8006c16:	e00b      	b.n	8006c30 <HAL_RCC_OscConfig+0x358>
 8006c18:	4b5a      	ldr	r3, [pc, #360]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1c:	4a59      	ldr	r2, [pc, #356]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006c1e:	f023 0301 	bic.w	r3, r3, #1
 8006c22:	6713      	str	r3, [r2, #112]	; 0x70
 8006c24:	4b57      	ldr	r3, [pc, #348]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c28:	4a56      	ldr	r2, [pc, #344]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006c2a:	f023 0304 	bic.w	r3, r3, #4
 8006c2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d015      	beq.n	8006c64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c38:	f7fd fe92 	bl	8004960 <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c3e:	e00a      	b.n	8006c56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c40:	f7fd fe8e 	bl	8004960 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e0d7      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c56:	4b4b      	ldr	r3, [pc, #300]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0ee      	beq.n	8006c40 <HAL_RCC_OscConfig+0x368>
 8006c62:	e014      	b.n	8006c8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c64:	f7fd fe7c 	bl	8004960 <HAL_GetTick>
 8006c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c6a:	e00a      	b.n	8006c82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c6c:	f7fd fe78 	bl	8004960 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e0c1      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c82:	4b40      	ldr	r3, [pc, #256]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1ee      	bne.n	8006c6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d105      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c94:	4b3b      	ldr	r3, [pc, #236]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	4a3a      	ldr	r2, [pc, #232]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80ad 	beq.w	8006e04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006caa:	4b36      	ldr	r3, [pc, #216]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f003 030c 	and.w	r3, r3, #12
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d060      	beq.n	8006d78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d145      	bne.n	8006d4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cbe:	4b33      	ldr	r3, [pc, #204]	; (8006d8c <HAL_RCC_OscConfig+0x4b4>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc4:	f7fd fe4c 	bl	8004960 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cca:	e008      	b.n	8006cde <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ccc:	f7fd fe48 	bl	8004960 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e093      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cde:	4b29      	ldr	r3, [pc, #164]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1f0      	bne.n	8006ccc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69da      	ldr	r2, [r3, #28]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	019b      	lsls	r3, r3, #6
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d00:	085b      	lsrs	r3, r3, #1
 8006d02:	3b01      	subs	r3, #1
 8006d04:	041b      	lsls	r3, r3, #16
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	061b      	lsls	r3, r3, #24
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	071b      	lsls	r3, r3, #28
 8006d16:	491b      	ldr	r1, [pc, #108]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d1c:	4b1b      	ldr	r3, [pc, #108]	; (8006d8c <HAL_RCC_OscConfig+0x4b4>)
 8006d1e:	2201      	movs	r2, #1
 8006d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d22:	f7fd fe1d 	bl	8004960 <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d28:	e008      	b.n	8006d3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d2a:	f7fd fe19 	bl	8004960 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e064      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d3c:	4b11      	ldr	r3, [pc, #68]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0f0      	beq.n	8006d2a <HAL_RCC_OscConfig+0x452>
 8006d48:	e05c      	b.n	8006e04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d4a:	4b10      	ldr	r3, [pc, #64]	; (8006d8c <HAL_RCC_OscConfig+0x4b4>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d50:	f7fd fe06 	bl	8004960 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d58:	f7fd fe02 	bl	8004960 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e04d      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d6a:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <HAL_RCC_OscConfig+0x4ac>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f0      	bne.n	8006d58 <HAL_RCC_OscConfig+0x480>
 8006d76:	e045      	b.n	8006e04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d107      	bne.n	8006d90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e040      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
 8006d84:	40023800 	.word	0x40023800
 8006d88:	40007000 	.word	0x40007000
 8006d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d90:	4b1f      	ldr	r3, [pc, #124]	; (8006e10 <HAL_RCC_OscConfig+0x538>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d030      	beq.n	8006e00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d129      	bne.n	8006e00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d122      	bne.n	8006e00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d119      	bne.n	8006e00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd6:	085b      	lsrs	r3, r3, #1
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d10f      	bne.n	8006e00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d107      	bne.n	8006e00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d001      	beq.n	8006e04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e000      	b.n	8006e06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	40023800 	.word	0x40023800

08006e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e041      	b.n	8006eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fd f9c4 	bl	80041c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	4619      	mov	r1, r3
 8006e52:	4610      	mov	r0, r2
 8006e54:	f000 feb2 	bl	8007bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
	...

08006eb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d001      	beq.n	8006ecc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e046      	b.n	8006f5a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a23      	ldr	r2, [pc, #140]	; (8006f68 <HAL_TIM_Base_Start+0xb4>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d022      	beq.n	8006f24 <HAL_TIM_Base_Start+0x70>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee6:	d01d      	beq.n	8006f24 <HAL_TIM_Base_Start+0x70>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1f      	ldr	r2, [pc, #124]	; (8006f6c <HAL_TIM_Base_Start+0xb8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d018      	beq.n	8006f24 <HAL_TIM_Base_Start+0x70>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1e      	ldr	r2, [pc, #120]	; (8006f70 <HAL_TIM_Base_Start+0xbc>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d013      	beq.n	8006f24 <HAL_TIM_Base_Start+0x70>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1c      	ldr	r2, [pc, #112]	; (8006f74 <HAL_TIM_Base_Start+0xc0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00e      	beq.n	8006f24 <HAL_TIM_Base_Start+0x70>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a1b      	ldr	r2, [pc, #108]	; (8006f78 <HAL_TIM_Base_Start+0xc4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d009      	beq.n	8006f24 <HAL_TIM_Base_Start+0x70>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a19      	ldr	r2, [pc, #100]	; (8006f7c <HAL_TIM_Base_Start+0xc8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d004      	beq.n	8006f24 <HAL_TIM_Base_Start+0x70>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a18      	ldr	r2, [pc, #96]	; (8006f80 <HAL_TIM_Base_Start+0xcc>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d111      	bne.n	8006f48 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f003 0307 	and.w	r3, r3, #7
 8006f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b06      	cmp	r3, #6
 8006f34:	d010      	beq.n	8006f58 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 0201 	orr.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f46:	e007      	b.n	8006f58 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0201 	orr.w	r2, r2, #1
 8006f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40000400 	.word	0x40000400
 8006f70:	40000800 	.word	0x40000800
 8006f74:	40000c00 	.word	0x40000c00
 8006f78:	40010400 	.word	0x40010400
 8006f7c:	40014000 	.word	0x40014000
 8006f80:	40001800 	.word	0x40001800

08006f84 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6a1a      	ldr	r2, [r3, #32]
 8006f92:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f96:	4013      	ands	r3, r2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10f      	bne.n	8006fbc <HAL_TIM_Base_Stop+0x38>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6a1a      	ldr	r2, [r3, #32]
 8006fa2:	f240 4344 	movw	r3, #1092	; 0x444
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d107      	bne.n	8006fbc <HAL_TIM_Base_Stop+0x38>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0201 	bic.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
	...

08006fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d001      	beq.n	8006fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e04e      	b.n	800708a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a23      	ldr	r2, [pc, #140]	; (8007098 <HAL_TIM_Base_Start_IT+0xc4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d022      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x80>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007016:	d01d      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x80>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1f      	ldr	r2, [pc, #124]	; (800709c <HAL_TIM_Base_Start_IT+0xc8>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d018      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x80>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1e      	ldr	r2, [pc, #120]	; (80070a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d013      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x80>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a1c      	ldr	r2, [pc, #112]	; (80070a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00e      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x80>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1b      	ldr	r2, [pc, #108]	; (80070a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d009      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x80>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a19      	ldr	r2, [pc, #100]	; (80070ac <HAL_TIM_Base_Start_IT+0xd8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <HAL_TIM_Base_Start_IT+0x80>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d111      	bne.n	8007078 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2b06      	cmp	r3, #6
 8007064:	d010      	beq.n	8007088 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 0201 	orr.w	r2, r2, #1
 8007074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007076:	e007      	b.n	8007088 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0201 	orr.w	r2, r2, #1
 8007086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	40010000 	.word	0x40010000
 800709c:	40000400 	.word	0x40000400
 80070a0:	40000800 	.word	0x40000800
 80070a4:	40000c00 	.word	0x40000c00
 80070a8:	40010400 	.word	0x40010400
 80070ac:	40014000 	.word	0x40014000
 80070b0:	40001800 	.word	0x40001800

080070b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e041      	b.n	800714a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fd f83c 	bl	8004158 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3304      	adds	r3, #4
 80070f0:	4619      	mov	r1, r3
 80070f2:	4610      	mov	r0, r2
 80070f4:	f000 fd62 	bl	8007bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d109      	bne.n	8007178 <HAL_TIM_PWM_Start+0x24>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b01      	cmp	r3, #1
 800716e:	bf14      	ite	ne
 8007170:	2301      	movne	r3, #1
 8007172:	2300      	moveq	r3, #0
 8007174:	b2db      	uxtb	r3, r3
 8007176:	e022      	b.n	80071be <HAL_TIM_PWM_Start+0x6a>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2b04      	cmp	r3, #4
 800717c:	d109      	bne.n	8007192 <HAL_TIM_PWM_Start+0x3e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b01      	cmp	r3, #1
 8007188:	bf14      	ite	ne
 800718a:	2301      	movne	r3, #1
 800718c:	2300      	moveq	r3, #0
 800718e:	b2db      	uxtb	r3, r3
 8007190:	e015      	b.n	80071be <HAL_TIM_PWM_Start+0x6a>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b08      	cmp	r3, #8
 8007196:	d109      	bne.n	80071ac <HAL_TIM_PWM_Start+0x58>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	bf14      	ite	ne
 80071a4:	2301      	movne	r3, #1
 80071a6:	2300      	moveq	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	e008      	b.n	80071be <HAL_TIM_PWM_Start+0x6a>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	bf14      	ite	ne
 80071b8:	2301      	movne	r3, #1
 80071ba:	2300      	moveq	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e07c      	b.n	80072c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d104      	bne.n	80071d6 <HAL_TIM_PWM_Start+0x82>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071d4:	e013      	b.n	80071fe <HAL_TIM_PWM_Start+0xaa>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d104      	bne.n	80071e6 <HAL_TIM_PWM_Start+0x92>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e4:	e00b      	b.n	80071fe <HAL_TIM_PWM_Start+0xaa>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b08      	cmp	r3, #8
 80071ea:	d104      	bne.n	80071f6 <HAL_TIM_PWM_Start+0xa2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f4:	e003      	b.n	80071fe <HAL_TIM_PWM_Start+0xaa>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2202      	movs	r2, #2
 80071fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2201      	movs	r2, #1
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	4618      	mov	r0, r3
 8007208:	f001 f852 	bl	80082b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a2d      	ldr	r2, [pc, #180]	; (80072c8 <HAL_TIM_PWM_Start+0x174>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d004      	beq.n	8007220 <HAL_TIM_PWM_Start+0xcc>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a2c      	ldr	r2, [pc, #176]	; (80072cc <HAL_TIM_PWM_Start+0x178>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d101      	bne.n	8007224 <HAL_TIM_PWM_Start+0xd0>
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <HAL_TIM_PWM_Start+0xd2>
 8007224:	2300      	movs	r3, #0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d007      	beq.n	800723a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007238:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a22      	ldr	r2, [pc, #136]	; (80072c8 <HAL_TIM_PWM_Start+0x174>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d022      	beq.n	800728a <HAL_TIM_PWM_Start+0x136>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800724c:	d01d      	beq.n	800728a <HAL_TIM_PWM_Start+0x136>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a1f      	ldr	r2, [pc, #124]	; (80072d0 <HAL_TIM_PWM_Start+0x17c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d018      	beq.n	800728a <HAL_TIM_PWM_Start+0x136>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a1d      	ldr	r2, [pc, #116]	; (80072d4 <HAL_TIM_PWM_Start+0x180>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d013      	beq.n	800728a <HAL_TIM_PWM_Start+0x136>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a1c      	ldr	r2, [pc, #112]	; (80072d8 <HAL_TIM_PWM_Start+0x184>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d00e      	beq.n	800728a <HAL_TIM_PWM_Start+0x136>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a16      	ldr	r2, [pc, #88]	; (80072cc <HAL_TIM_PWM_Start+0x178>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d009      	beq.n	800728a <HAL_TIM_PWM_Start+0x136>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a18      	ldr	r2, [pc, #96]	; (80072dc <HAL_TIM_PWM_Start+0x188>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d004      	beq.n	800728a <HAL_TIM_PWM_Start+0x136>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a16      	ldr	r2, [pc, #88]	; (80072e0 <HAL_TIM_PWM_Start+0x18c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d111      	bne.n	80072ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 0307 	and.w	r3, r3, #7
 8007294:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b06      	cmp	r3, #6
 800729a:	d010      	beq.n	80072be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0201 	orr.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ac:	e007      	b.n	80072be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f042 0201 	orr.w	r2, r2, #1
 80072bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	40010000 	.word	0x40010000
 80072cc:	40010400 	.word	0x40010400
 80072d0:	40000400 	.word	0x40000400
 80072d4:	40000800 	.word	0x40000800
 80072d8:	40000c00 	.word	0x40000c00
 80072dc:	40014000 	.word	0x40014000
 80072e0:	40001800 	.word	0x40001800

080072e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2200      	movs	r2, #0
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 ffda 	bl	80082b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a2e      	ldr	r2, [pc, #184]	; (80073bc <HAL_TIM_PWM_Stop+0xd8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d004      	beq.n	8007310 <HAL_TIM_PWM_Stop+0x2c>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a2d      	ldr	r2, [pc, #180]	; (80073c0 <HAL_TIM_PWM_Stop+0xdc>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d101      	bne.n	8007314 <HAL_TIM_PWM_Stop+0x30>
 8007310:	2301      	movs	r3, #1
 8007312:	e000      	b.n	8007316 <HAL_TIM_PWM_Stop+0x32>
 8007314:	2300      	movs	r3, #0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d017      	beq.n	800734a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6a1a      	ldr	r2, [r3, #32]
 8007320:	f241 1311 	movw	r3, #4369	; 0x1111
 8007324:	4013      	ands	r3, r2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10f      	bne.n	800734a <HAL_TIM_PWM_Stop+0x66>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6a1a      	ldr	r2, [r3, #32]
 8007330:	f240 4344 	movw	r3, #1092	; 0x444
 8007334:	4013      	ands	r3, r2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d107      	bne.n	800734a <HAL_TIM_PWM_Stop+0x66>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007348:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6a1a      	ldr	r2, [r3, #32]
 8007350:	f241 1311 	movw	r3, #4369	; 0x1111
 8007354:	4013      	ands	r3, r2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10f      	bne.n	800737a <HAL_TIM_PWM_Stop+0x96>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6a1a      	ldr	r2, [r3, #32]
 8007360:	f240 4344 	movw	r3, #1092	; 0x444
 8007364:	4013      	ands	r3, r2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d107      	bne.n	800737a <HAL_TIM_PWM_Stop+0x96>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 0201 	bic.w	r2, r2, #1
 8007378:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d104      	bne.n	800738a <HAL_TIM_PWM_Stop+0xa6>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007388:	e013      	b.n	80073b2 <HAL_TIM_PWM_Stop+0xce>
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b04      	cmp	r3, #4
 800738e:	d104      	bne.n	800739a <HAL_TIM_PWM_Stop+0xb6>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007398:	e00b      	b.n	80073b2 <HAL_TIM_PWM_Stop+0xce>
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b08      	cmp	r3, #8
 800739e:	d104      	bne.n	80073aa <HAL_TIM_PWM_Stop+0xc6>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073a8:	e003      	b.n	80073b2 <HAL_TIM_PWM_Stop+0xce>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	40010000 	.word	0x40010000
 80073c0:	40010400 	.word	0x40010400

080073c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e041      	b.n	800745a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d106      	bne.n	80073f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fc fe66 	bl	80040bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3304      	adds	r3, #4
 8007400:	4619      	mov	r1, r3
 8007402:	4610      	mov	r0, r2
 8007404:	f000 fbda 	bl	8007bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <HAL_TIM_IC_Start_IT+0x1e>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800747e:	b2db      	uxtb	r3, r3
 8007480:	e013      	b.n	80074aa <HAL_TIM_IC_Start_IT+0x46>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b04      	cmp	r3, #4
 8007486:	d104      	bne.n	8007492 <HAL_TIM_IC_Start_IT+0x2e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800748e:	b2db      	uxtb	r3, r3
 8007490:	e00b      	b.n	80074aa <HAL_TIM_IC_Start_IT+0x46>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b08      	cmp	r3, #8
 8007496:	d104      	bne.n	80074a2 <HAL_TIM_IC_Start_IT+0x3e>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	e003      	b.n	80074aa <HAL_TIM_IC_Start_IT+0x46>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d104      	bne.n	80074bc <HAL_TIM_IC_Start_IT+0x58>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	e013      	b.n	80074e4 <HAL_TIM_IC_Start_IT+0x80>
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2b04      	cmp	r3, #4
 80074c0:	d104      	bne.n	80074cc <HAL_TIM_IC_Start_IT+0x68>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	e00b      	b.n	80074e4 <HAL_TIM_IC_Start_IT+0x80>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2b08      	cmp	r3, #8
 80074d0:	d104      	bne.n	80074dc <HAL_TIM_IC_Start_IT+0x78>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	e003      	b.n	80074e4 <HAL_TIM_IC_Start_IT+0x80>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d102      	bne.n	80074f2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80074ec:	7b7b      	ldrb	r3, [r7, #13]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d001      	beq.n	80074f6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e0cc      	b.n	8007690 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <HAL_TIM_IC_Start_IT+0xa2>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007504:	e013      	b.n	800752e <HAL_TIM_IC_Start_IT+0xca>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b04      	cmp	r3, #4
 800750a:	d104      	bne.n	8007516 <HAL_TIM_IC_Start_IT+0xb2>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007514:	e00b      	b.n	800752e <HAL_TIM_IC_Start_IT+0xca>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b08      	cmp	r3, #8
 800751a:	d104      	bne.n	8007526 <HAL_TIM_IC_Start_IT+0xc2>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007524:	e003      	b.n	800752e <HAL_TIM_IC_Start_IT+0xca>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2202      	movs	r2, #2
 800752a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <HAL_TIM_IC_Start_IT+0xda>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800753c:	e013      	b.n	8007566 <HAL_TIM_IC_Start_IT+0x102>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b04      	cmp	r3, #4
 8007542:	d104      	bne.n	800754e <HAL_TIM_IC_Start_IT+0xea>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800754c:	e00b      	b.n	8007566 <HAL_TIM_IC_Start_IT+0x102>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b08      	cmp	r3, #8
 8007552:	d104      	bne.n	800755e <HAL_TIM_IC_Start_IT+0xfa>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800755c:	e003      	b.n	8007566 <HAL_TIM_IC_Start_IT+0x102>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2202      	movs	r2, #2
 8007562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b0c      	cmp	r3, #12
 800756a:	d841      	bhi.n	80075f0 <HAL_TIM_IC_Start_IT+0x18c>
 800756c:	a201      	add	r2, pc, #4	; (adr r2, 8007574 <HAL_TIM_IC_Start_IT+0x110>)
 800756e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007572:	bf00      	nop
 8007574:	080075a9 	.word	0x080075a9
 8007578:	080075f1 	.word	0x080075f1
 800757c:	080075f1 	.word	0x080075f1
 8007580:	080075f1 	.word	0x080075f1
 8007584:	080075bb 	.word	0x080075bb
 8007588:	080075f1 	.word	0x080075f1
 800758c:	080075f1 	.word	0x080075f1
 8007590:	080075f1 	.word	0x080075f1
 8007594:	080075cd 	.word	0x080075cd
 8007598:	080075f1 	.word	0x080075f1
 800759c:	080075f1 	.word	0x080075f1
 80075a0:	080075f1 	.word	0x080075f1
 80075a4:	080075df 	.word	0x080075df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0202 	orr.w	r2, r2, #2
 80075b6:	60da      	str	r2, [r3, #12]
      break;
 80075b8:	e01d      	b.n	80075f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68da      	ldr	r2, [r3, #12]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f042 0204 	orr.w	r2, r2, #4
 80075c8:	60da      	str	r2, [r3, #12]
      break;
 80075ca:	e014      	b.n	80075f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f042 0208 	orr.w	r2, r2, #8
 80075da:	60da      	str	r2, [r3, #12]
      break;
 80075dc:	e00b      	b.n	80075f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0210 	orr.w	r2, r2, #16
 80075ec:	60da      	str	r2, [r3, #12]
      break;
 80075ee:	e002      	b.n	80075f6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	73fb      	strb	r3, [r7, #15]
      break;
 80075f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d148      	bne.n	800768e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2201      	movs	r2, #1
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fe53 	bl	80082b0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a22      	ldr	r2, [pc, #136]	; (8007698 <HAL_TIM_IC_Start_IT+0x234>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d022      	beq.n	800765a <HAL_TIM_IC_Start_IT+0x1f6>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761c:	d01d      	beq.n	800765a <HAL_TIM_IC_Start_IT+0x1f6>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a1e      	ldr	r2, [pc, #120]	; (800769c <HAL_TIM_IC_Start_IT+0x238>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d018      	beq.n	800765a <HAL_TIM_IC_Start_IT+0x1f6>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a1c      	ldr	r2, [pc, #112]	; (80076a0 <HAL_TIM_IC_Start_IT+0x23c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d013      	beq.n	800765a <HAL_TIM_IC_Start_IT+0x1f6>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a1b      	ldr	r2, [pc, #108]	; (80076a4 <HAL_TIM_IC_Start_IT+0x240>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00e      	beq.n	800765a <HAL_TIM_IC_Start_IT+0x1f6>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a19      	ldr	r2, [pc, #100]	; (80076a8 <HAL_TIM_IC_Start_IT+0x244>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d009      	beq.n	800765a <HAL_TIM_IC_Start_IT+0x1f6>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a18      	ldr	r2, [pc, #96]	; (80076ac <HAL_TIM_IC_Start_IT+0x248>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d004      	beq.n	800765a <HAL_TIM_IC_Start_IT+0x1f6>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a16      	ldr	r2, [pc, #88]	; (80076b0 <HAL_TIM_IC_Start_IT+0x24c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d111      	bne.n	800767e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f003 0307 	and.w	r3, r3, #7
 8007664:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b06      	cmp	r3, #6
 800766a:	d010      	beq.n	800768e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0201 	orr.w	r2, r2, #1
 800767a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800767c:	e007      	b.n	800768e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f042 0201 	orr.w	r2, r2, #1
 800768c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	40010000 	.word	0x40010000
 800769c:	40000400 	.word	0x40000400
 80076a0:	40000800 	.word	0x40000800
 80076a4:	40000c00 	.word	0x40000c00
 80076a8:	40010400 	.word	0x40010400
 80076ac:	40014000 	.word	0x40014000
 80076b0:	40001800 	.word	0x40001800

080076b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d122      	bne.n	8007710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d11b      	bne.n	8007710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f06f 0202 	mvn.w	r2, #2
 80076e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7f9 fdde 	bl	80012b8 <HAL_TIM_IC_CaptureCallback>
 80076fc:	e005      	b.n	800770a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa3e 	bl	8007b80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fa45 	bl	8007b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b04      	cmp	r3, #4
 800771c:	d122      	bne.n	8007764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b04      	cmp	r3, #4
 800772a:	d11b      	bne.n	8007764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0204 	mvn.w	r2, #4
 8007734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2202      	movs	r2, #2
 800773a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7f9 fdb4 	bl	80012b8 <HAL_TIM_IC_CaptureCallback>
 8007750:	e005      	b.n	800775e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa14 	bl	8007b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fa1b 	bl	8007b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b08      	cmp	r3, #8
 8007770:	d122      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0308 	and.w	r3, r3, #8
 800777c:	2b08      	cmp	r3, #8
 800777e:	d11b      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0208 	mvn.w	r2, #8
 8007788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2204      	movs	r2, #4
 800778e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7f9 fd8a 	bl	80012b8 <HAL_TIM_IC_CaptureCallback>
 80077a4:	e005      	b.n	80077b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f9ea 	bl	8007b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f9f1 	bl	8007b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0310 	and.w	r3, r3, #16
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d122      	bne.n	800780c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b10      	cmp	r3, #16
 80077d2:	d11b      	bne.n	800780c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0210 	mvn.w	r2, #16
 80077dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2208      	movs	r2, #8
 80077e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7f9 fd60 	bl	80012b8 <HAL_TIM_IC_CaptureCallback>
 80077f8:	e005      	b.n	8007806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f9c0 	bl	8007b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f9c7 	bl	8007b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b01      	cmp	r3, #1
 8007818:	d10e      	bne.n	8007838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b01      	cmp	r3, #1
 8007826:	d107      	bne.n	8007838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0201 	mvn.w	r2, #1
 8007830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7fc fb64 	bl	8003f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007842:	2b80      	cmp	r3, #128	; 0x80
 8007844:	d10e      	bne.n	8007864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007850:	2b80      	cmp	r3, #128	; 0x80
 8007852:	d107      	bne.n	8007864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800785c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fdd2 	bl	8008408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786e:	2b40      	cmp	r3, #64	; 0x40
 8007870:	d10e      	bne.n	8007890 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787c:	2b40      	cmp	r3, #64	; 0x40
 800787e:	d107      	bne.n	8007890 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f98c 	bl	8007ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b20      	cmp	r3, #32
 800789c:	d10e      	bne.n	80078bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b20      	cmp	r3, #32
 80078aa:	d107      	bne.n	80078bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0220 	mvn.w	r2, #32
 80078b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fd9c 	bl	80083f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80078de:	2302      	movs	r3, #2
 80078e0:	e088      	b.n	80079f4 <HAL_TIM_IC_ConfigChannel+0x130>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d11b      	bne.n	8007928 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	6819      	ldr	r1, [r3, #0]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f000 fbac 	bl	800805c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699a      	ldr	r2, [r3, #24]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 020c 	bic.w	r2, r2, #12
 8007912:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6999      	ldr	r1, [r3, #24]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	619a      	str	r2, [r3, #24]
 8007926:	e060      	b.n	80079ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b04      	cmp	r3, #4
 800792c:	d11c      	bne.n	8007968 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	6819      	ldr	r1, [r3, #0]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	f000 fc01 	bl	8008144 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	699a      	ldr	r2, [r3, #24]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007950:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6999      	ldr	r1, [r3, #24]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	021a      	lsls	r2, r3, #8
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	619a      	str	r2, [r3, #24]
 8007966:	e040      	b.n	80079ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b08      	cmp	r3, #8
 800796c:	d11b      	bne.n	80079a6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6818      	ldr	r0, [r3, #0]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6819      	ldr	r1, [r3, #0]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f000 fc1e 	bl	80081be <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69da      	ldr	r2, [r3, #28]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 020c 	bic.w	r2, r2, #12
 8007990:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69d9      	ldr	r1, [r3, #28]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	61da      	str	r2, [r3, #28]
 80079a4:	e021      	b.n	80079ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b0c      	cmp	r3, #12
 80079aa:	d11c      	bne.n	80079e6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6818      	ldr	r0, [r3, #0]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	6819      	ldr	r1, [r3, #0]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f000 fc3b 	bl	8008236 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	69da      	ldr	r2, [r3, #28]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80079ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	69d9      	ldr	r1, [r3, #28]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	021a      	lsls	r2, r3, #8
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	61da      	str	r2, [r3, #28]
 80079e4:	e001      	b.n	80079ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d101      	bne.n	8007a1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a16:	2302      	movs	r3, #2
 8007a18:	e0ae      	b.n	8007b78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b0c      	cmp	r3, #12
 8007a26:	f200 809f 	bhi.w	8007b68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a2a:	a201      	add	r2, pc, #4	; (adr r2, 8007a30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a30:	08007a65 	.word	0x08007a65
 8007a34:	08007b69 	.word	0x08007b69
 8007a38:	08007b69 	.word	0x08007b69
 8007a3c:	08007b69 	.word	0x08007b69
 8007a40:	08007aa5 	.word	0x08007aa5
 8007a44:	08007b69 	.word	0x08007b69
 8007a48:	08007b69 	.word	0x08007b69
 8007a4c:	08007b69 	.word	0x08007b69
 8007a50:	08007ae7 	.word	0x08007ae7
 8007a54:	08007b69 	.word	0x08007b69
 8007a58:	08007b69 	.word	0x08007b69
 8007a5c:	08007b69 	.word	0x08007b69
 8007a60:	08007b27 	.word	0x08007b27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 f946 	bl	8007cfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f042 0208 	orr.w	r2, r2, #8
 8007a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0204 	bic.w	r2, r2, #4
 8007a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6999      	ldr	r1, [r3, #24]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	619a      	str	r2, [r3, #24]
      break;
 8007aa2:	e064      	b.n	8007b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 f996 	bl	8007ddc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6999      	ldr	r1, [r3, #24]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	021a      	lsls	r2, r3, #8
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	619a      	str	r2, [r3, #24]
      break;
 8007ae4:	e043      	b.n	8007b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68b9      	ldr	r1, [r7, #8]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 f9eb 	bl	8007ec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69da      	ldr	r2, [r3, #28]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0208 	orr.w	r2, r2, #8
 8007b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69da      	ldr	r2, [r3, #28]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0204 	bic.w	r2, r2, #4
 8007b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69d9      	ldr	r1, [r3, #28]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	61da      	str	r2, [r3, #28]
      break;
 8007b24:	e023      	b.n	8007b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fa3f 	bl	8007fb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69da      	ldr	r2, [r3, #28]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69da      	ldr	r2, [r3, #28]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69d9      	ldr	r1, [r3, #28]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	021a      	lsls	r2, r3, #8
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	61da      	str	r2, [r3, #28]
      break;
 8007b66:	e002      	b.n	8007b6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a40      	ldr	r2, [pc, #256]	; (8007cd0 <TIM_Base_SetConfig+0x114>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d013      	beq.n	8007bfc <TIM_Base_SetConfig+0x40>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bda:	d00f      	beq.n	8007bfc <TIM_Base_SetConfig+0x40>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a3d      	ldr	r2, [pc, #244]	; (8007cd4 <TIM_Base_SetConfig+0x118>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d00b      	beq.n	8007bfc <TIM_Base_SetConfig+0x40>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a3c      	ldr	r2, [pc, #240]	; (8007cd8 <TIM_Base_SetConfig+0x11c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d007      	beq.n	8007bfc <TIM_Base_SetConfig+0x40>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a3b      	ldr	r2, [pc, #236]	; (8007cdc <TIM_Base_SetConfig+0x120>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d003      	beq.n	8007bfc <TIM_Base_SetConfig+0x40>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a3a      	ldr	r2, [pc, #232]	; (8007ce0 <TIM_Base_SetConfig+0x124>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d108      	bne.n	8007c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a2f      	ldr	r2, [pc, #188]	; (8007cd0 <TIM_Base_SetConfig+0x114>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d02b      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c1c:	d027      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a2c      	ldr	r2, [pc, #176]	; (8007cd4 <TIM_Base_SetConfig+0x118>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d023      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a2b      	ldr	r2, [pc, #172]	; (8007cd8 <TIM_Base_SetConfig+0x11c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d01f      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a2a      	ldr	r2, [pc, #168]	; (8007cdc <TIM_Base_SetConfig+0x120>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d01b      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a29      	ldr	r2, [pc, #164]	; (8007ce0 <TIM_Base_SetConfig+0x124>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d017      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a28      	ldr	r2, [pc, #160]	; (8007ce4 <TIM_Base_SetConfig+0x128>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d013      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a27      	ldr	r2, [pc, #156]	; (8007ce8 <TIM_Base_SetConfig+0x12c>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00f      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a26      	ldr	r2, [pc, #152]	; (8007cec <TIM_Base_SetConfig+0x130>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00b      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a25      	ldr	r2, [pc, #148]	; (8007cf0 <TIM_Base_SetConfig+0x134>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d007      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a24      	ldr	r2, [pc, #144]	; (8007cf4 <TIM_Base_SetConfig+0x138>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d003      	beq.n	8007c6e <TIM_Base_SetConfig+0xb2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a23      	ldr	r2, [pc, #140]	; (8007cf8 <TIM_Base_SetConfig+0x13c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d108      	bne.n	8007c80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a0a      	ldr	r2, [pc, #40]	; (8007cd0 <TIM_Base_SetConfig+0x114>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d003      	beq.n	8007cb4 <TIM_Base_SetConfig+0xf8>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a0c      	ldr	r2, [pc, #48]	; (8007ce0 <TIM_Base_SetConfig+0x124>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d103      	bne.n	8007cbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	691a      	ldr	r2, [r3, #16]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	615a      	str	r2, [r3, #20]
}
 8007cc2:	bf00      	nop
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	40010000 	.word	0x40010000
 8007cd4:	40000400 	.word	0x40000400
 8007cd8:	40000800 	.word	0x40000800
 8007cdc:	40000c00 	.word	0x40000c00
 8007ce0:	40010400 	.word	0x40010400
 8007ce4:	40014000 	.word	0x40014000
 8007ce8:	40014400 	.word	0x40014400
 8007cec:	40014800 	.word	0x40014800
 8007cf0:	40001800 	.word	0x40001800
 8007cf4:	40001c00 	.word	0x40001c00
 8007cf8:	40002000 	.word	0x40002000

08007cfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	f023 0201 	bic.w	r2, r3, #1
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 0303 	bic.w	r3, r3, #3
 8007d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f023 0302 	bic.w	r3, r3, #2
 8007d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a20      	ldr	r2, [pc, #128]	; (8007dd4 <TIM_OC1_SetConfig+0xd8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d003      	beq.n	8007d60 <TIM_OC1_SetConfig+0x64>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a1f      	ldr	r2, [pc, #124]	; (8007dd8 <TIM_OC1_SetConfig+0xdc>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d10c      	bne.n	8007d7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f023 0308 	bic.w	r3, r3, #8
 8007d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f023 0304 	bic.w	r3, r3, #4
 8007d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a15      	ldr	r2, [pc, #84]	; (8007dd4 <TIM_OC1_SetConfig+0xd8>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d003      	beq.n	8007d8a <TIM_OC1_SetConfig+0x8e>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a14      	ldr	r2, [pc, #80]	; (8007dd8 <TIM_OC1_SetConfig+0xdc>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d111      	bne.n	8007dae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	621a      	str	r2, [r3, #32]
}
 8007dc8:	bf00      	nop
 8007dca:	371c      	adds	r7, #28
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	40010000 	.word	0x40010000
 8007dd8:	40010400 	.word	0x40010400

08007ddc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f023 0210 	bic.w	r2, r3, #16
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	021b      	lsls	r3, r3, #8
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f023 0320 	bic.w	r3, r3, #32
 8007e26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	011b      	lsls	r3, r3, #4
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a22      	ldr	r2, [pc, #136]	; (8007ec0 <TIM_OC2_SetConfig+0xe4>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d003      	beq.n	8007e44 <TIM_OC2_SetConfig+0x68>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a21      	ldr	r2, [pc, #132]	; (8007ec4 <TIM_OC2_SetConfig+0xe8>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d10d      	bne.n	8007e60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	011b      	lsls	r3, r3, #4
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a17      	ldr	r2, [pc, #92]	; (8007ec0 <TIM_OC2_SetConfig+0xe4>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d003      	beq.n	8007e70 <TIM_OC2_SetConfig+0x94>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a16      	ldr	r2, [pc, #88]	; (8007ec4 <TIM_OC2_SetConfig+0xe8>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d113      	bne.n	8007e98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	621a      	str	r2, [r3, #32]
}
 8007eb2:	bf00      	nop
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	40010000 	.word	0x40010000
 8007ec4:	40010400 	.word	0x40010400

08007ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0303 	bic.w	r3, r3, #3
 8007efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	021b      	lsls	r3, r3, #8
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a21      	ldr	r2, [pc, #132]	; (8007fa8 <TIM_OC3_SetConfig+0xe0>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d003      	beq.n	8007f2e <TIM_OC3_SetConfig+0x66>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a20      	ldr	r2, [pc, #128]	; (8007fac <TIM_OC3_SetConfig+0xe4>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d10d      	bne.n	8007f4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	021b      	lsls	r3, r3, #8
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a16      	ldr	r2, [pc, #88]	; (8007fa8 <TIM_OC3_SetConfig+0xe0>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d003      	beq.n	8007f5a <TIM_OC3_SetConfig+0x92>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a15      	ldr	r2, [pc, #84]	; (8007fac <TIM_OC3_SetConfig+0xe4>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d113      	bne.n	8007f82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	011b      	lsls	r3, r3, #4
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	621a      	str	r2, [r3, #32]
}
 8007f9c:	bf00      	nop
 8007f9e:	371c      	adds	r7, #28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	40010000 	.word	0x40010000
 8007fac:	40010400 	.word	0x40010400

08007fb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	021b      	lsls	r3, r3, #8
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	031b      	lsls	r3, r3, #12
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	4313      	orrs	r3, r2
 8008006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a12      	ldr	r2, [pc, #72]	; (8008054 <TIM_OC4_SetConfig+0xa4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d003      	beq.n	8008018 <TIM_OC4_SetConfig+0x68>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a11      	ldr	r2, [pc, #68]	; (8008058 <TIM_OC4_SetConfig+0xa8>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d109      	bne.n	800802c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800801e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	019b      	lsls	r3, r3, #6
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	4313      	orrs	r3, r2
 800802a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	621a      	str	r2, [r3, #32]
}
 8008046:	bf00      	nop
 8008048:	371c      	adds	r7, #28
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	40010000 	.word	0x40010000
 8008058:	40010400 	.word	0x40010400

0800805c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	f023 0201 	bic.w	r2, r3, #1
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4a28      	ldr	r2, [pc, #160]	; (8008128 <TIM_TI1_SetConfig+0xcc>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d01b      	beq.n	80080c2 <TIM_TI1_SetConfig+0x66>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008090:	d017      	beq.n	80080c2 <TIM_TI1_SetConfig+0x66>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	4a25      	ldr	r2, [pc, #148]	; (800812c <TIM_TI1_SetConfig+0xd0>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d013      	beq.n	80080c2 <TIM_TI1_SetConfig+0x66>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4a24      	ldr	r2, [pc, #144]	; (8008130 <TIM_TI1_SetConfig+0xd4>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00f      	beq.n	80080c2 <TIM_TI1_SetConfig+0x66>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4a23      	ldr	r2, [pc, #140]	; (8008134 <TIM_TI1_SetConfig+0xd8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d00b      	beq.n	80080c2 <TIM_TI1_SetConfig+0x66>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4a22      	ldr	r2, [pc, #136]	; (8008138 <TIM_TI1_SetConfig+0xdc>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d007      	beq.n	80080c2 <TIM_TI1_SetConfig+0x66>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4a21      	ldr	r2, [pc, #132]	; (800813c <TIM_TI1_SetConfig+0xe0>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d003      	beq.n	80080c2 <TIM_TI1_SetConfig+0x66>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	4a20      	ldr	r2, [pc, #128]	; (8008140 <TIM_TI1_SetConfig+0xe4>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d101      	bne.n	80080c6 <TIM_TI1_SetConfig+0x6a>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e000      	b.n	80080c8 <TIM_TI1_SetConfig+0x6c>
 80080c6:	2300      	movs	r3, #0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d008      	beq.n	80080de <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f023 0303 	bic.w	r3, r3, #3
 80080d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]
 80080dc:	e003      	b.n	80080e6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f043 0301 	orr.w	r3, r3, #1
 80080e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f023 030a 	bic.w	r3, r3, #10
 8008100:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f003 030a 	and.w	r3, r3, #10
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	4313      	orrs	r3, r2
 800810c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	621a      	str	r2, [r3, #32]
}
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	40010000 	.word	0x40010000
 800812c:	40000400 	.word	0x40000400
 8008130:	40000800 	.word	0x40000800
 8008134:	40000c00 	.word	0x40000c00
 8008138:	40010400 	.word	0x40010400
 800813c:	40014000 	.word	0x40014000
 8008140:	40001800 	.word	0x40001800

08008144 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	f023 0210 	bic.w	r2, r3, #16
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008170:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	4313      	orrs	r3, r2
 800817a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008182:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	031b      	lsls	r3, r3, #12
 8008188:	b29b      	uxth	r3, r3
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	4313      	orrs	r3, r2
 800818e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008196:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	011b      	lsls	r3, r3, #4
 800819c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	621a      	str	r2, [r3, #32]
}
 80081b2:	bf00      	nop
 80081b4:	371c      	adds	r7, #28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081be:	b480      	push	{r7}
 80081c0:	b087      	sub	sp, #28
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	607a      	str	r2, [r7, #4]
 80081ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6a1b      	ldr	r3, [r3, #32]
 80081d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f023 0303 	bic.w	r3, r3, #3
 80081ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	011b      	lsls	r3, r3, #4
 8008200:	b2db      	uxtb	r3, r3
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	4313      	orrs	r3, r2
 8008206:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800820e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	021b      	lsls	r3, r3, #8
 8008214:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	4313      	orrs	r3, r2
 800821c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	621a      	str	r2, [r3, #32]
}
 800822a:	bf00      	nop
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008236:	b480      	push	{r7}
 8008238:	b087      	sub	sp, #28
 800823a:	af00      	add	r7, sp, #0
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	607a      	str	r2, [r7, #4]
 8008242:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008262:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	021b      	lsls	r3, r3, #8
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	4313      	orrs	r3, r2
 800826c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008274:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	031b      	lsls	r3, r3, #12
 800827a:	b29b      	uxth	r3, r3
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	4313      	orrs	r3, r2
 8008280:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008288:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	031b      	lsls	r3, r3, #12
 800828e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	4313      	orrs	r3, r2
 8008296:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	621a      	str	r2, [r3, #32]
}
 80082a4:	bf00      	nop
 80082a6:	371c      	adds	r7, #28
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b087      	sub	sp, #28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f003 031f 	and.w	r3, r3, #31
 80082c2:	2201      	movs	r2, #1
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6a1a      	ldr	r2, [r3, #32]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	43db      	mvns	r3, r3
 80082d2:	401a      	ands	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6a1a      	ldr	r2, [r3, #32]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f003 031f 	and.w	r3, r3, #31
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	fa01 f303 	lsl.w	r3, r1, r3
 80082e8:	431a      	orrs	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	621a      	str	r2, [r3, #32]
}
 80082ee:	bf00      	nop
 80082f0:	371c      	adds	r7, #28
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
	...

080082fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800830c:	2b01      	cmp	r3, #1
 800830e:	d101      	bne.n	8008314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008310:	2302      	movs	r3, #2
 8008312:	e05a      	b.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800833a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	4313      	orrs	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a21      	ldr	r2, [pc, #132]	; (80083d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d022      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008360:	d01d      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a1d      	ldr	r2, [pc, #116]	; (80083dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d018      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a1b      	ldr	r2, [pc, #108]	; (80083e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d013      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a1a      	ldr	r2, [pc, #104]	; (80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d00e      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a18      	ldr	r2, [pc, #96]	; (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d009      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a17      	ldr	r2, [pc, #92]	; (80083ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d004      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a15      	ldr	r2, [pc, #84]	; (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d10c      	bne.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	40010000 	.word	0x40010000
 80083dc:	40000400 	.word	0x40000400
 80083e0:	40000800 	.word	0x40000800
 80083e4:	40000c00 	.word	0x40000c00
 80083e8:	40010400 	.word	0x40010400
 80083ec:	40014000 	.word	0x40014000
 80083f0:	40001800 	.word	0x40001800

080083f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e03f      	b.n	80084ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d106      	bne.n	8008448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7fb ff78 	bl	8004338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2224      	movs	r2, #36	; 0x24
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68da      	ldr	r2, [r3, #12]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800845e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fddf 	bl	8009024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	691a      	ldr	r2, [r3, #16]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008474:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	695a      	ldr	r2, [r3, #20]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008484:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008494:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2220      	movs	r2, #32
 80084a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b08a      	sub	sp, #40	; 0x28
 80084ba:	af02      	add	r7, sp, #8
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	603b      	str	r3, [r7, #0]
 80084c2:	4613      	mov	r3, r2
 80084c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d17c      	bne.n	80085d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <HAL_UART_Transmit+0x2c>
 80084dc:	88fb      	ldrh	r3, [r7, #6]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e075      	b.n	80085d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d101      	bne.n	80084f4 <HAL_UART_Transmit+0x3e>
 80084f0:	2302      	movs	r3, #2
 80084f2:	e06e      	b.n	80085d2 <HAL_UART_Transmit+0x11c>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2221      	movs	r2, #33	; 0x21
 8008506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800850a:	f7fc fa29 	bl	8004960 <HAL_GetTick>
 800850e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	88fa      	ldrh	r2, [r7, #6]
 8008514:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	88fa      	ldrh	r2, [r7, #6]
 800851a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008524:	d108      	bne.n	8008538 <HAL_UART_Transmit+0x82>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d104      	bne.n	8008538 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800852e:	2300      	movs	r3, #0
 8008530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	61bb      	str	r3, [r7, #24]
 8008536:	e003      	b.n	8008540 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800853c:	2300      	movs	r3, #0
 800853e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008548:	e02a      	b.n	80085a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2200      	movs	r2, #0
 8008552:	2180      	movs	r1, #128	; 0x80
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 fb1f 	bl	8008b98 <UART_WaitOnFlagUntilTimeout>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e036      	b.n	80085d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10b      	bne.n	8008582 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008578:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	3302      	adds	r3, #2
 800857e:	61bb      	str	r3, [r7, #24]
 8008580:	e007      	b.n	8008592 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	781a      	ldrb	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	3301      	adds	r3, #1
 8008590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008596:	b29b      	uxth	r3, r3
 8008598:	3b01      	subs	r3, #1
 800859a:	b29a      	uxth	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1cf      	bne.n	800854a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2200      	movs	r2, #0
 80085b2:	2140      	movs	r1, #64	; 0x40
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 faef 	bl	8008b98 <UART_WaitOnFlagUntilTimeout>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e006      	b.n	80085d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	e000      	b.n	80085d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80085d0:	2302      	movs	r3, #2
  }
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3720      	adds	r7, #32
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	60f8      	str	r0, [r7, #12]
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	4613      	mov	r3, r2
 80085e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	d11d      	bne.n	8008630 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <HAL_UART_Receive_IT+0x26>
 80085fa:	88fb      	ldrh	r3, [r7, #6]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e016      	b.n	8008632 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800860a:	2b01      	cmp	r3, #1
 800860c:	d101      	bne.n	8008612 <HAL_UART_Receive_IT+0x38>
 800860e:	2302      	movs	r3, #2
 8008610:	e00f      	b.n	8008632 <HAL_UART_Receive_IT+0x58>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008620:	88fb      	ldrh	r3, [r7, #6]
 8008622:	461a      	mov	r2, r3
 8008624:	68b9      	ldr	r1, [r7, #8]
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 fb24 	bl	8008c74 <UART_Start_Receive_IT>
 800862c:	4603      	mov	r3, r0
 800862e:	e000      	b.n	8008632 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008630:	2302      	movs	r3, #2
  }
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
	...

0800863c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b0ba      	sub	sp, #232	; 0xe8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008662:	2300      	movs	r3, #0
 8008664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008668:	2300      	movs	r3, #0
 800866a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800866e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800867a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10f      	bne.n	80086a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008686:	f003 0320 	and.w	r3, r3, #32
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <HAL_UART_IRQHandler+0x66>
 800868e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b00      	cmp	r3, #0
 8008698:	d003      	beq.n	80086a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fc07 	bl	8008eae <UART_Receive_IT>
      return;
 80086a0:	e256      	b.n	8008b50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80086a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 80de 	beq.w	8008868 <HAL_UART_IRQHandler+0x22c>
 80086ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d106      	bne.n	80086c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 80d1 	beq.w	8008868 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00b      	beq.n	80086ea <HAL_UART_IRQHandler+0xae>
 80086d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d005      	beq.n	80086ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	f043 0201 	orr.w	r2, r3, #1
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ee:	f003 0304 	and.w	r3, r3, #4
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00b      	beq.n	800870e <HAL_UART_IRQHandler+0xd2>
 80086f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d005      	beq.n	800870e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008706:	f043 0202 	orr.w	r2, r3, #2
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800870e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <HAL_UART_IRQHandler+0xf6>
 800871a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	f043 0204 	orr.w	r2, r3, #4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008736:	f003 0308 	and.w	r3, r3, #8
 800873a:	2b00      	cmp	r3, #0
 800873c:	d011      	beq.n	8008762 <HAL_UART_IRQHandler+0x126>
 800873e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008742:	f003 0320 	and.w	r3, r3, #32
 8008746:	2b00      	cmp	r3, #0
 8008748:	d105      	bne.n	8008756 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800874a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	d005      	beq.n	8008762 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875a:	f043 0208 	orr.w	r2, r3, #8
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 81ed 	beq.w	8008b46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800876c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008770:	f003 0320 	and.w	r3, r3, #32
 8008774:	2b00      	cmp	r3, #0
 8008776:	d008      	beq.n	800878a <HAL_UART_IRQHandler+0x14e>
 8008778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800877c:	f003 0320 	and.w	r3, r3, #32
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fb92 	bl	8008eae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008794:	2b40      	cmp	r3, #64	; 0x40
 8008796:	bf0c      	ite	eq
 8008798:	2301      	moveq	r3, #1
 800879a:	2300      	movne	r3, #0
 800879c:	b2db      	uxtb	r3, r3
 800879e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	f003 0308 	and.w	r3, r3, #8
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d103      	bne.n	80087b6 <HAL_UART_IRQHandler+0x17a>
 80087ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d04f      	beq.n	8008856 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fa9a 	bl	8008cf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c6:	2b40      	cmp	r3, #64	; 0x40
 80087c8:	d141      	bne.n	800884e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3314      	adds	r3, #20
 80087d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3314      	adds	r3, #20
 80087f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008802:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008806:	e841 2300 	strex	r3, r2, [r1]
 800880a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800880e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1d9      	bne.n	80087ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881a:	2b00      	cmp	r3, #0
 800881c:	d013      	beq.n	8008846 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	4a7d      	ldr	r2, [pc, #500]	; (8008a18 <HAL_UART_IRQHandler+0x3dc>)
 8008824:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882a:	4618      	mov	r0, r3
 800882c:	f7fc fa1a 	bl	8004c64 <HAL_DMA_Abort_IT>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d016      	beq.n	8008864 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008840:	4610      	mov	r0, r2
 8008842:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008844:	e00e      	b.n	8008864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f990 	bl	8008b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800884c:	e00a      	b.n	8008864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f98c 	bl	8008b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008854:	e006      	b.n	8008864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f988 	bl	8008b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008862:	e170      	b.n	8008b46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008864:	bf00      	nop
    return;
 8008866:	e16e      	b.n	8008b46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886c:	2b01      	cmp	r3, #1
 800886e:	f040 814a 	bne.w	8008b06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008876:	f003 0310 	and.w	r3, r3, #16
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 8143 	beq.w	8008b06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008884:	f003 0310 	and.w	r3, r3, #16
 8008888:	2b00      	cmp	r3, #0
 800888a:	f000 813c 	beq.w	8008b06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800888e:	2300      	movs	r3, #0
 8008890:	60bb      	str	r3, [r7, #8]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	60bb      	str	r3, [r7, #8]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	60bb      	str	r3, [r7, #8]
 80088a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ae:	2b40      	cmp	r3, #64	; 0x40
 80088b0:	f040 80b4 	bne.w	8008a1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 8140 	beq.w	8008b4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088d2:	429a      	cmp	r2, r3
 80088d4:	f080 8139 	bcs.w	8008b4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e4:	69db      	ldr	r3, [r3, #28]
 80088e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ea:	f000 8088 	beq.w	80089fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	330c      	adds	r3, #12
 80088f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088fc:	e853 3f00 	ldrex	r3, [r3]
 8008900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800890c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	330c      	adds	r3, #12
 8008916:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800891a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800891e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008922:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008926:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1d9      	bne.n	80088ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3314      	adds	r3, #20
 8008940:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008944:	e853 3f00 	ldrex	r3, [r3]
 8008948:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800894a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800894c:	f023 0301 	bic.w	r3, r3, #1
 8008950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3314      	adds	r3, #20
 800895a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800895e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008962:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008964:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008966:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e1      	bne.n	800893a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3314      	adds	r3, #20
 800897c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800898c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3314      	adds	r3, #20
 8008996:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800899a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800899c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80089a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089a2:	e841 2300 	strex	r3, r2, [r1]
 80089a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e3      	bne.n	8008976 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2220      	movs	r2, #32
 80089b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	330c      	adds	r3, #12
 80089c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089ce:	f023 0310 	bic.w	r3, r3, #16
 80089d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	330c      	adds	r3, #12
 80089dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80089e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80089e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089e8:	e841 2300 	strex	r3, r2, [r1]
 80089ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e3      	bne.n	80089bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fc f8c3 	bl	8004b84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f8b6 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a14:	e099      	b.n	8008b4a <HAL_UART_IRQHandler+0x50e>
 8008a16:	bf00      	nop
 8008a18:	08008db7 	.word	0x08008db7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 808b 	beq.w	8008b4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 8086 	beq.w	8008b4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	330c      	adds	r3, #12
 8008a48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4c:	e853 3f00 	ldrex	r3, [r3]
 8008a50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	330c      	adds	r3, #12
 8008a62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a66:	647a      	str	r2, [r7, #68]	; 0x44
 8008a68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e3      	bne.n	8008a42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3314      	adds	r3, #20
 8008a80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	623b      	str	r3, [r7, #32]
   return(result);
 8008a8a:	6a3b      	ldr	r3, [r7, #32]
 8008a8c:	f023 0301 	bic.w	r3, r3, #1
 8008a90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3314      	adds	r3, #20
 8008a9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8008aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1e3      	bne.n	8008a7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f023 0310 	bic.w	r3, r3, #16
 8008ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	330c      	adds	r3, #12
 8008ae0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ae4:	61fa      	str	r2, [r7, #28]
 8008ae6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	69b9      	ldr	r1, [r7, #24]
 8008aea:	69fa      	ldr	r2, [r7, #28]
 8008aec:	e841 2300 	strex	r3, r2, [r1]
 8008af0:	617b      	str	r3, [r7, #20]
   return(result);
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e3      	bne.n	8008ac0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f83e 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b04:	e023      	b.n	8008b4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d009      	beq.n	8008b26 <HAL_UART_IRQHandler+0x4ea>
 8008b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f95d 	bl	8008dde <UART_Transmit_IT>
    return;
 8008b24:	e014      	b.n	8008b50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00e      	beq.n	8008b50 <HAL_UART_IRQHandler+0x514>
 8008b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d008      	beq.n	8008b50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f99d 	bl	8008e7e <UART_EndTransmit_IT>
    return;
 8008b44:	e004      	b.n	8008b50 <HAL_UART_IRQHandler+0x514>
    return;
 8008b46:	bf00      	nop
 8008b48:	e002      	b.n	8008b50 <HAL_UART_IRQHandler+0x514>
      return;
 8008b4a:	bf00      	nop
 8008b4c:	e000      	b.n	8008b50 <HAL_UART_IRQHandler+0x514>
      return;
 8008b4e:	bf00      	nop
  }
}
 8008b50:	37e8      	adds	r7, #232	; 0xe8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop

08008b58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b090      	sub	sp, #64	; 0x40
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ba8:	e050      	b.n	8008c4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb0:	d04c      	beq.n	8008c4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d007      	beq.n	8008bc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bb8:	f7fb fed2 	bl	8004960 <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d241      	bcs.n	8008c4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	330c      	adds	r3, #12
 8008bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	330c      	adds	r3, #12
 8008be6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008be8:	637a      	str	r2, [r7, #52]	; 0x34
 8008bea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e5      	bne.n	8008bc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3314      	adds	r3, #20
 8008c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	e853 3f00 	ldrex	r3, [r3]
 8008c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f023 0301 	bic.w	r3, r3, #1
 8008c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3314      	adds	r3, #20
 8008c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c1c:	623a      	str	r2, [r7, #32]
 8008c1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c20:	69f9      	ldr	r1, [r7, #28]
 8008c22:	6a3a      	ldr	r2, [r7, #32]
 8008c24:	e841 2300 	strex	r3, r2, [r1]
 8008c28:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1e5      	bne.n	8008bfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e00f      	b.n	8008c6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	4013      	ands	r3, r2
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	bf0c      	ite	eq
 8008c5c:	2301      	moveq	r3, #1
 8008c5e:	2300      	movne	r3, #0
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	461a      	mov	r2, r3
 8008c64:	79fb      	ldrb	r3, [r7, #7]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d09f      	beq.n	8008baa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3740      	adds	r7, #64	; 0x40
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	88fa      	ldrh	r2, [r7, #6]
 8008c8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	88fa      	ldrh	r2, [r7, #6]
 8008c92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2222      	movs	r2, #34	; 0x22
 8008c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d007      	beq.n	8008cc2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68da      	ldr	r2, [r3, #12]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cc0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	695a      	ldr	r2, [r3, #20]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f042 0201 	orr.w	r2, r2, #1
 8008cd0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f042 0220 	orr.w	r2, r2, #32
 8008ce0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b095      	sub	sp, #84	; 0x54
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	330c      	adds	r3, #12
 8008cfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d02:	e853 3f00 	ldrex	r3, [r3]
 8008d06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	330c      	adds	r3, #12
 8008d16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d18:	643a      	str	r2, [r7, #64]	; 0x40
 8008d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d20:	e841 2300 	strex	r3, r2, [r1]
 8008d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e5      	bne.n	8008cf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3314      	adds	r3, #20
 8008d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	e853 3f00 	ldrex	r3, [r3]
 8008d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	f023 0301 	bic.w	r3, r3, #1
 8008d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3314      	adds	r3, #20
 8008d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d54:	e841 2300 	strex	r3, r2, [r1]
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e5      	bne.n	8008d2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d119      	bne.n	8008d9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	330c      	adds	r3, #12
 8008d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	e853 3f00 	ldrex	r3, [r3]
 8008d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f023 0310 	bic.w	r3, r3, #16
 8008d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	330c      	adds	r3, #12
 8008d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d88:	61ba      	str	r2, [r7, #24]
 8008d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8c:	6979      	ldr	r1, [r7, #20]
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	e841 2300 	strex	r3, r2, [r1]
 8008d94:	613b      	str	r3, [r7, #16]
   return(result);
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1e5      	bne.n	8008d68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2220      	movs	r2, #32
 8008da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008daa:	bf00      	nop
 8008dac:	3754      	adds	r7, #84	; 0x54
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f7ff fecb 	bl	8008b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dd6:	bf00      	nop
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b085      	sub	sp, #20
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b21      	cmp	r3, #33	; 0x21
 8008df0:	d13e      	bne.n	8008e70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dfa:	d114      	bne.n	8008e26 <UART_Transmit_IT+0x48>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d110      	bne.n	8008e26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	1c9a      	adds	r2, r3, #2
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	621a      	str	r2, [r3, #32]
 8008e24:	e008      	b.n	8008e38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	1c59      	adds	r1, r3, #1
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	6211      	str	r1, [r2, #32]
 8008e30:	781a      	ldrb	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	4619      	mov	r1, r3
 8008e46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10f      	bne.n	8008e6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68da      	ldr	r2, [r3, #12]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	e000      	b.n	8008e72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e70:	2302      	movs	r3, #2
  }
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b082      	sub	sp, #8
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68da      	ldr	r2, [r3, #12]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2220      	movs	r2, #32
 8008e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff fe5a 	bl	8008b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b08c      	sub	sp, #48	; 0x30
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b22      	cmp	r3, #34	; 0x22
 8008ec0:	f040 80ab 	bne.w	800901a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ecc:	d117      	bne.n	8008efe <UART_Receive_IT+0x50>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d113      	bne.n	8008efe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ede:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef6:	1c9a      	adds	r2, r3, #2
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	629a      	str	r2, [r3, #40]	; 0x28
 8008efc:	e026      	b.n	8008f4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008f04:	2300      	movs	r3, #0
 8008f06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f10:	d007      	beq.n	8008f22 <UART_Receive_IT+0x74>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10a      	bne.n	8008f30 <UART_Receive_IT+0x82>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d106      	bne.n	8008f30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2c:	701a      	strb	r2, [r3, #0]
 8008f2e:	e008      	b.n	8008f42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	3b01      	subs	r3, #1
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d15a      	bne.n	8009016 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68da      	ldr	r2, [r3, #12]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f022 0220 	bic.w	r2, r2, #32
 8008f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68da      	ldr	r2, [r3, #12]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	695a      	ldr	r2, [r3, #20]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0201 	bic.w	r2, r2, #1
 8008f8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2220      	movs	r2, #32
 8008f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d135      	bne.n	800900c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	330c      	adds	r3, #12
 8008fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	e853 3f00 	ldrex	r3, [r3]
 8008fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f023 0310 	bic.w	r3, r3, #16
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	330c      	adds	r3, #12
 8008fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc6:	623a      	str	r2, [r7, #32]
 8008fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fca:	69f9      	ldr	r1, [r7, #28]
 8008fcc:	6a3a      	ldr	r2, [r7, #32]
 8008fce:	e841 2300 	strex	r3, r2, [r1]
 8008fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1e5      	bne.n	8008fa6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 0310 	and.w	r3, r3, #16
 8008fe4:	2b10      	cmp	r3, #16
 8008fe6:	d10a      	bne.n	8008ffe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff fdbb 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
 800900a:	e002      	b.n	8009012 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7f8 f971 	bl	80012f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	e002      	b.n	800901c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	e000      	b.n	800901c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800901a:	2302      	movs	r3, #2
  }
}
 800901c:	4618      	mov	r0, r3
 800901e:	3730      	adds	r7, #48	; 0x30
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009028:	b0c0      	sub	sp, #256	; 0x100
 800902a:	af00      	add	r7, sp, #0
 800902c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800903c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009040:	68d9      	ldr	r1, [r3, #12]
 8009042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	ea40 0301 	orr.w	r3, r0, r1
 800904c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800904e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	431a      	orrs	r2, r3
 800905c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	431a      	orrs	r2, r3
 8009064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	4313      	orrs	r3, r2
 800906c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800907c:	f021 010c 	bic.w	r1, r1, #12
 8009080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800908a:	430b      	orrs	r3, r1
 800908c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800908e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800909a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800909e:	6999      	ldr	r1, [r3, #24]
 80090a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	ea40 0301 	orr.w	r3, r0, r1
 80090aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	4b8f      	ldr	r3, [pc, #572]	; (80092f0 <UART_SetConfig+0x2cc>)
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d005      	beq.n	80090c4 <UART_SetConfig+0xa0>
 80090b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	4b8d      	ldr	r3, [pc, #564]	; (80092f4 <UART_SetConfig+0x2d0>)
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d104      	bne.n	80090ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090c4:	f7fd fa18 	bl	80064f8 <HAL_RCC_GetPCLK2Freq>
 80090c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80090cc:	e003      	b.n	80090d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090ce:	f7fd f9ff 	bl	80064d0 <HAL_RCC_GetPCLK1Freq>
 80090d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090da:	69db      	ldr	r3, [r3, #28]
 80090dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090e0:	f040 810c 	bne.w	80092fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090e8:	2200      	movs	r2, #0
 80090ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80090f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80090f6:	4622      	mov	r2, r4
 80090f8:	462b      	mov	r3, r5
 80090fa:	1891      	adds	r1, r2, r2
 80090fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80090fe:	415b      	adcs	r3, r3
 8009100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009102:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009106:	4621      	mov	r1, r4
 8009108:	eb12 0801 	adds.w	r8, r2, r1
 800910c:	4629      	mov	r1, r5
 800910e:	eb43 0901 	adc.w	r9, r3, r1
 8009112:	f04f 0200 	mov.w	r2, #0
 8009116:	f04f 0300 	mov.w	r3, #0
 800911a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800911e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009126:	4690      	mov	r8, r2
 8009128:	4699      	mov	r9, r3
 800912a:	4623      	mov	r3, r4
 800912c:	eb18 0303 	adds.w	r3, r8, r3
 8009130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009134:	462b      	mov	r3, r5
 8009136:	eb49 0303 	adc.w	r3, r9, r3
 800913a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800913e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800914a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800914e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009152:	460b      	mov	r3, r1
 8009154:	18db      	adds	r3, r3, r3
 8009156:	653b      	str	r3, [r7, #80]	; 0x50
 8009158:	4613      	mov	r3, r2
 800915a:	eb42 0303 	adc.w	r3, r2, r3
 800915e:	657b      	str	r3, [r7, #84]	; 0x54
 8009160:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009164:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009168:	f7f7 fdfe 	bl	8000d68 <__aeabi_uldivmod>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	4b61      	ldr	r3, [pc, #388]	; (80092f8 <UART_SetConfig+0x2d4>)
 8009172:	fba3 2302 	umull	r2, r3, r3, r2
 8009176:	095b      	lsrs	r3, r3, #5
 8009178:	011c      	lsls	r4, r3, #4
 800917a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800917e:	2200      	movs	r2, #0
 8009180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009184:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009188:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800918c:	4642      	mov	r2, r8
 800918e:	464b      	mov	r3, r9
 8009190:	1891      	adds	r1, r2, r2
 8009192:	64b9      	str	r1, [r7, #72]	; 0x48
 8009194:	415b      	adcs	r3, r3
 8009196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009198:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800919c:	4641      	mov	r1, r8
 800919e:	eb12 0a01 	adds.w	sl, r2, r1
 80091a2:	4649      	mov	r1, r9
 80091a4:	eb43 0b01 	adc.w	fp, r3, r1
 80091a8:	f04f 0200 	mov.w	r2, #0
 80091ac:	f04f 0300 	mov.w	r3, #0
 80091b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091bc:	4692      	mov	sl, r2
 80091be:	469b      	mov	fp, r3
 80091c0:	4643      	mov	r3, r8
 80091c2:	eb1a 0303 	adds.w	r3, sl, r3
 80091c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091ca:	464b      	mov	r3, r9
 80091cc:	eb4b 0303 	adc.w	r3, fp, r3
 80091d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80091d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80091e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80091e8:	460b      	mov	r3, r1
 80091ea:	18db      	adds	r3, r3, r3
 80091ec:	643b      	str	r3, [r7, #64]	; 0x40
 80091ee:	4613      	mov	r3, r2
 80091f0:	eb42 0303 	adc.w	r3, r2, r3
 80091f4:	647b      	str	r3, [r7, #68]	; 0x44
 80091f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80091fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80091fe:	f7f7 fdb3 	bl	8000d68 <__aeabi_uldivmod>
 8009202:	4602      	mov	r2, r0
 8009204:	460b      	mov	r3, r1
 8009206:	4611      	mov	r1, r2
 8009208:	4b3b      	ldr	r3, [pc, #236]	; (80092f8 <UART_SetConfig+0x2d4>)
 800920a:	fba3 2301 	umull	r2, r3, r3, r1
 800920e:	095b      	lsrs	r3, r3, #5
 8009210:	2264      	movs	r2, #100	; 0x64
 8009212:	fb02 f303 	mul.w	r3, r2, r3
 8009216:	1acb      	subs	r3, r1, r3
 8009218:	00db      	lsls	r3, r3, #3
 800921a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800921e:	4b36      	ldr	r3, [pc, #216]	; (80092f8 <UART_SetConfig+0x2d4>)
 8009220:	fba3 2302 	umull	r2, r3, r3, r2
 8009224:	095b      	lsrs	r3, r3, #5
 8009226:	005b      	lsls	r3, r3, #1
 8009228:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800922c:	441c      	add	r4, r3
 800922e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009232:	2200      	movs	r2, #0
 8009234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009238:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800923c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009240:	4642      	mov	r2, r8
 8009242:	464b      	mov	r3, r9
 8009244:	1891      	adds	r1, r2, r2
 8009246:	63b9      	str	r1, [r7, #56]	; 0x38
 8009248:	415b      	adcs	r3, r3
 800924a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800924c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009250:	4641      	mov	r1, r8
 8009252:	1851      	adds	r1, r2, r1
 8009254:	6339      	str	r1, [r7, #48]	; 0x30
 8009256:	4649      	mov	r1, r9
 8009258:	414b      	adcs	r3, r1
 800925a:	637b      	str	r3, [r7, #52]	; 0x34
 800925c:	f04f 0200 	mov.w	r2, #0
 8009260:	f04f 0300 	mov.w	r3, #0
 8009264:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009268:	4659      	mov	r1, fp
 800926a:	00cb      	lsls	r3, r1, #3
 800926c:	4651      	mov	r1, sl
 800926e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009272:	4651      	mov	r1, sl
 8009274:	00ca      	lsls	r2, r1, #3
 8009276:	4610      	mov	r0, r2
 8009278:	4619      	mov	r1, r3
 800927a:	4603      	mov	r3, r0
 800927c:	4642      	mov	r2, r8
 800927e:	189b      	adds	r3, r3, r2
 8009280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009284:	464b      	mov	r3, r9
 8009286:	460a      	mov	r2, r1
 8009288:	eb42 0303 	adc.w	r3, r2, r3
 800928c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800929c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80092a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80092a4:	460b      	mov	r3, r1
 80092a6:	18db      	adds	r3, r3, r3
 80092a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80092aa:	4613      	mov	r3, r2
 80092ac:	eb42 0303 	adc.w	r3, r2, r3
 80092b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80092ba:	f7f7 fd55 	bl	8000d68 <__aeabi_uldivmod>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	4b0d      	ldr	r3, [pc, #52]	; (80092f8 <UART_SetConfig+0x2d4>)
 80092c4:	fba3 1302 	umull	r1, r3, r3, r2
 80092c8:	095b      	lsrs	r3, r3, #5
 80092ca:	2164      	movs	r1, #100	; 0x64
 80092cc:	fb01 f303 	mul.w	r3, r1, r3
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	3332      	adds	r3, #50	; 0x32
 80092d6:	4a08      	ldr	r2, [pc, #32]	; (80092f8 <UART_SetConfig+0x2d4>)
 80092d8:	fba2 2303 	umull	r2, r3, r2, r3
 80092dc:	095b      	lsrs	r3, r3, #5
 80092de:	f003 0207 	and.w	r2, r3, #7
 80092e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4422      	add	r2, r4
 80092ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80092ec:	e106      	b.n	80094fc <UART_SetConfig+0x4d8>
 80092ee:	bf00      	nop
 80092f0:	40011000 	.word	0x40011000
 80092f4:	40011400 	.word	0x40011400
 80092f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009300:	2200      	movs	r2, #0
 8009302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009306:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800930a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800930e:	4642      	mov	r2, r8
 8009310:	464b      	mov	r3, r9
 8009312:	1891      	adds	r1, r2, r2
 8009314:	6239      	str	r1, [r7, #32]
 8009316:	415b      	adcs	r3, r3
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
 800931a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800931e:	4641      	mov	r1, r8
 8009320:	1854      	adds	r4, r2, r1
 8009322:	4649      	mov	r1, r9
 8009324:	eb43 0501 	adc.w	r5, r3, r1
 8009328:	f04f 0200 	mov.w	r2, #0
 800932c:	f04f 0300 	mov.w	r3, #0
 8009330:	00eb      	lsls	r3, r5, #3
 8009332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009336:	00e2      	lsls	r2, r4, #3
 8009338:	4614      	mov	r4, r2
 800933a:	461d      	mov	r5, r3
 800933c:	4643      	mov	r3, r8
 800933e:	18e3      	adds	r3, r4, r3
 8009340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009344:	464b      	mov	r3, r9
 8009346:	eb45 0303 	adc.w	r3, r5, r3
 800934a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800934e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800935a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800935e:	f04f 0200 	mov.w	r2, #0
 8009362:	f04f 0300 	mov.w	r3, #0
 8009366:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800936a:	4629      	mov	r1, r5
 800936c:	008b      	lsls	r3, r1, #2
 800936e:	4621      	mov	r1, r4
 8009370:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009374:	4621      	mov	r1, r4
 8009376:	008a      	lsls	r2, r1, #2
 8009378:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800937c:	f7f7 fcf4 	bl	8000d68 <__aeabi_uldivmod>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4b60      	ldr	r3, [pc, #384]	; (8009508 <UART_SetConfig+0x4e4>)
 8009386:	fba3 2302 	umull	r2, r3, r3, r2
 800938a:	095b      	lsrs	r3, r3, #5
 800938c:	011c      	lsls	r4, r3, #4
 800938e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009392:	2200      	movs	r2, #0
 8009394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009398:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800939c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80093a0:	4642      	mov	r2, r8
 80093a2:	464b      	mov	r3, r9
 80093a4:	1891      	adds	r1, r2, r2
 80093a6:	61b9      	str	r1, [r7, #24]
 80093a8:	415b      	adcs	r3, r3
 80093aa:	61fb      	str	r3, [r7, #28]
 80093ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093b0:	4641      	mov	r1, r8
 80093b2:	1851      	adds	r1, r2, r1
 80093b4:	6139      	str	r1, [r7, #16]
 80093b6:	4649      	mov	r1, r9
 80093b8:	414b      	adcs	r3, r1
 80093ba:	617b      	str	r3, [r7, #20]
 80093bc:	f04f 0200 	mov.w	r2, #0
 80093c0:	f04f 0300 	mov.w	r3, #0
 80093c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093c8:	4659      	mov	r1, fp
 80093ca:	00cb      	lsls	r3, r1, #3
 80093cc:	4651      	mov	r1, sl
 80093ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093d2:	4651      	mov	r1, sl
 80093d4:	00ca      	lsls	r2, r1, #3
 80093d6:	4610      	mov	r0, r2
 80093d8:	4619      	mov	r1, r3
 80093da:	4603      	mov	r3, r0
 80093dc:	4642      	mov	r2, r8
 80093de:	189b      	adds	r3, r3, r2
 80093e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093e4:	464b      	mov	r3, r9
 80093e6:	460a      	mov	r2, r1
 80093e8:	eb42 0303 	adc.w	r3, r2, r3
 80093ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80093fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80093fc:	f04f 0200 	mov.w	r2, #0
 8009400:	f04f 0300 	mov.w	r3, #0
 8009404:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009408:	4649      	mov	r1, r9
 800940a:	008b      	lsls	r3, r1, #2
 800940c:	4641      	mov	r1, r8
 800940e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009412:	4641      	mov	r1, r8
 8009414:	008a      	lsls	r2, r1, #2
 8009416:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800941a:	f7f7 fca5 	bl	8000d68 <__aeabi_uldivmod>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4611      	mov	r1, r2
 8009424:	4b38      	ldr	r3, [pc, #224]	; (8009508 <UART_SetConfig+0x4e4>)
 8009426:	fba3 2301 	umull	r2, r3, r3, r1
 800942a:	095b      	lsrs	r3, r3, #5
 800942c:	2264      	movs	r2, #100	; 0x64
 800942e:	fb02 f303 	mul.w	r3, r2, r3
 8009432:	1acb      	subs	r3, r1, r3
 8009434:	011b      	lsls	r3, r3, #4
 8009436:	3332      	adds	r3, #50	; 0x32
 8009438:	4a33      	ldr	r2, [pc, #204]	; (8009508 <UART_SetConfig+0x4e4>)
 800943a:	fba2 2303 	umull	r2, r3, r2, r3
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009444:	441c      	add	r4, r3
 8009446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800944a:	2200      	movs	r2, #0
 800944c:	673b      	str	r3, [r7, #112]	; 0x70
 800944e:	677a      	str	r2, [r7, #116]	; 0x74
 8009450:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009454:	4642      	mov	r2, r8
 8009456:	464b      	mov	r3, r9
 8009458:	1891      	adds	r1, r2, r2
 800945a:	60b9      	str	r1, [r7, #8]
 800945c:	415b      	adcs	r3, r3
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009464:	4641      	mov	r1, r8
 8009466:	1851      	adds	r1, r2, r1
 8009468:	6039      	str	r1, [r7, #0]
 800946a:	4649      	mov	r1, r9
 800946c:	414b      	adcs	r3, r1
 800946e:	607b      	str	r3, [r7, #4]
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800947c:	4659      	mov	r1, fp
 800947e:	00cb      	lsls	r3, r1, #3
 8009480:	4651      	mov	r1, sl
 8009482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009486:	4651      	mov	r1, sl
 8009488:	00ca      	lsls	r2, r1, #3
 800948a:	4610      	mov	r0, r2
 800948c:	4619      	mov	r1, r3
 800948e:	4603      	mov	r3, r0
 8009490:	4642      	mov	r2, r8
 8009492:	189b      	adds	r3, r3, r2
 8009494:	66bb      	str	r3, [r7, #104]	; 0x68
 8009496:	464b      	mov	r3, r9
 8009498:	460a      	mov	r2, r1
 800949a:	eb42 0303 	adc.w	r3, r2, r3
 800949e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	663b      	str	r3, [r7, #96]	; 0x60
 80094aa:	667a      	str	r2, [r7, #100]	; 0x64
 80094ac:	f04f 0200 	mov.w	r2, #0
 80094b0:	f04f 0300 	mov.w	r3, #0
 80094b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80094b8:	4649      	mov	r1, r9
 80094ba:	008b      	lsls	r3, r1, #2
 80094bc:	4641      	mov	r1, r8
 80094be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094c2:	4641      	mov	r1, r8
 80094c4:	008a      	lsls	r2, r1, #2
 80094c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80094ca:	f7f7 fc4d 	bl	8000d68 <__aeabi_uldivmod>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4b0d      	ldr	r3, [pc, #52]	; (8009508 <UART_SetConfig+0x4e4>)
 80094d4:	fba3 1302 	umull	r1, r3, r3, r2
 80094d8:	095b      	lsrs	r3, r3, #5
 80094da:	2164      	movs	r1, #100	; 0x64
 80094dc:	fb01 f303 	mul.w	r3, r1, r3
 80094e0:	1ad3      	subs	r3, r2, r3
 80094e2:	011b      	lsls	r3, r3, #4
 80094e4:	3332      	adds	r3, #50	; 0x32
 80094e6:	4a08      	ldr	r2, [pc, #32]	; (8009508 <UART_SetConfig+0x4e4>)
 80094e8:	fba2 2303 	umull	r2, r3, r2, r3
 80094ec:	095b      	lsrs	r3, r3, #5
 80094ee:	f003 020f 	and.w	r2, r3, #15
 80094f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4422      	add	r2, r4
 80094fa:	609a      	str	r2, [r3, #8]
}
 80094fc:	bf00      	nop
 80094fe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009502:	46bd      	mov	sp, r7
 8009504:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009508:	51eb851f 	.word	0x51eb851f

0800950c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f103 0208 	add.w	r2, r3, #8
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f04f 32ff 	mov.w	r2, #4294967295
 8009524:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f103 0208 	add.w	r2, r3, #8
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f103 0208 	add.w	r2, r3, #8
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8009566:	b480      	push	{r7}
 8009568:	b085      	sub	sp, #20
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	601a      	str	r2, [r3, #0]
}
 80095a2:	bf00      	nop
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80095ae:	b480      	push	{r7}
 80095b0:	b085      	sub	sp, #20
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c4:	d103      	bne.n	80095ce <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	e00c      	b.n	80095e8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3308      	adds	r3, #8
 80095d2:	60fb      	str	r3, [r7, #12]
 80095d4:	e002      	b.n	80095dc <vListInsert+0x2e>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d2f6      	bcs.n	80095d6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	1c5a      	adds	r2, r3, #1
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	601a      	str	r2, [r3, #0]
}
 8009614:	bf00      	nop
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	6892      	ldr	r2, [r2, #8]
 8009636:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	6852      	ldr	r2, [r2, #4]
 8009640:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	429a      	cmp	r2, r3
 800964a:	d103      	bne.n	8009654 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	1e5a      	subs	r2, r3, #1
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800967e:	2301      	movs	r3, #1
 8009680:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10a      	bne.n	80096a2 <xQueueGenericReset+0x2e>
        __asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	60fb      	str	r3, [r7, #12]
    }
 800969e:	bf00      	nop
 80096a0:	e7fe      	b.n	80096a0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d05d      	beq.n	8009764 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d059      	beq.n	8009764 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b8:	2100      	movs	r1, #0
 80096ba:	fba3 2302 	umull	r2, r3, r3, r2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d000      	beq.n	80096c4 <xQueueGenericReset+0x50>
 80096c2:	2101      	movs	r1, #1
 80096c4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d14c      	bne.n	8009764 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80096ca:	f002 ff05 	bl	800c4d8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d6:	6939      	ldr	r1, [r7, #16]
 80096d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80096da:	fb01 f303 	mul.w	r3, r1, r3
 80096de:	441a      	add	r2, r3
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	2200      	movs	r2, #0
 80096e8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fa:	3b01      	subs	r3, #1
 80096fc:	6939      	ldr	r1, [r7, #16]
 80096fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009700:	fb01 f303 	mul.w	r3, r1, r3
 8009704:	441a      	add	r2, r3
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	22ff      	movs	r2, #255	; 0xff
 800970e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	22ff      	movs	r2, #255	; 0xff
 8009716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d114      	bne.n	800974a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01a      	beq.n	800975e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	3310      	adds	r3, #16
 800972c:	4618      	mov	r0, r3
 800972e:	f001 fbed 	bl	800af0c <xTaskRemoveFromEventList>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d012      	beq.n	800975e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009738:	4b15      	ldr	r3, [pc, #84]	; (8009790 <xQueueGenericReset+0x11c>)
 800973a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800973e:	601a      	str	r2, [r3, #0]
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	e009      	b.n	800975e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	3310      	adds	r3, #16
 800974e:	4618      	mov	r0, r3
 8009750:	f7ff fedc 	bl	800950c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	3324      	adds	r3, #36	; 0x24
 8009758:	4618      	mov	r0, r3
 800975a:	f7ff fed7 	bl	800950c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800975e:	f002 feeb 	bl	800c538 <vPortExitCritical>
 8009762:	e001      	b.n	8009768 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8009764:	2300      	movs	r3, #0
 8009766:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10a      	bne.n	8009784 <xQueueGenericReset+0x110>
        __asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	60bb      	str	r3, [r7, #8]
    }
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8009784:	697b      	ldr	r3, [r7, #20]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	e000ed04 	.word	0xe000ed04

08009794 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8009794:	b580      	push	{r7, lr}
 8009796:	b08a      	sub	sp, #40	; 0x28
 8009798:	af02      	add	r7, sp, #8
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	4613      	mov	r3, r2
 80097a0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d02e      	beq.n	800980a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80097ac:	2100      	movs	r1, #0
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	fba3 2302 	umull	r2, r3, r3, r2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d000      	beq.n	80097bc <xQueueGenericCreate+0x28>
 80097ba:	2101      	movs	r1, #1
 80097bc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d123      	bne.n	800980a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80097ca:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80097ce:	d81c      	bhi.n	800980a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	fb02 f303 	mul.w	r3, r2, r3
 80097d8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	3350      	adds	r3, #80	; 0x50
 80097de:	4618      	mov	r0, r3
 80097e0:	f002 ffa4 	bl	800c72c <pvPortMalloc>
 80097e4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d01c      	beq.n	8009826 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	3350      	adds	r3, #80	; 0x50
 80097f4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097f6:	79fa      	ldrb	r2, [r7, #7]
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	4613      	mov	r3, r2
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	68b9      	ldr	r1, [r7, #8]
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 f814 	bl	8009830 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8009808:	e00d      	b.n	8009826 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10a      	bne.n	8009826 <xQueueGenericCreate+0x92>
        __asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	613b      	str	r3, [r7, #16]
    }
 8009822:	bf00      	nop
 8009824:	e7fe      	b.n	8009824 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8009826:	69fb      	ldr	r3, [r7, #28]
    }
 8009828:	4618      	mov	r0, r3
 800982a:	3720      	adds	r7, #32
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
 800983c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d103      	bne.n	800984c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	69ba      	ldr	r2, [r7, #24]
 8009848:	601a      	str	r2, [r3, #0]
 800984a:	e002      	b.n	8009852 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800985e:	2101      	movs	r1, #1
 8009860:	69b8      	ldr	r0, [r7, #24]
 8009862:	f7ff ff07 	bl	8009674 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	78fa      	ldrb	r2, [r7, #3]
 800986a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800986e:	78fb      	ldrb	r3, [r7, #3]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	68f9      	ldr	r1, [r7, #12]
 8009874:	2073      	movs	r0, #115	; 0x73
 8009876:	f003 fea1 	bl	800d5bc <SEGGER_SYSVIEW_RecordU32x3>
}
 800987a:	bf00      	nop
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b090      	sub	sp, #64	; 0x40
 8009888:	af02      	add	r7, sp, #8
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
 8009890:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009892:	2300      	movs	r3, #0
 8009894:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800989a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10a      	bne.n	80098b6 <xQueueGenericSend+0x32>
        __asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80098b2:	bf00      	nop
 80098b4:	e7fe      	b.n	80098b4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d103      	bne.n	80098c4 <xQueueGenericSend+0x40>
 80098bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <xQueueGenericSend+0x44>
 80098c4:	2301      	movs	r3, #1
 80098c6:	e000      	b.n	80098ca <xQueueGenericSend+0x46>
 80098c8:	2300      	movs	r3, #0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10a      	bne.n	80098e4 <xQueueGenericSend+0x60>
        __asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d103      	bne.n	80098f2 <xQueueGenericSend+0x6e>
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d101      	bne.n	80098f6 <xQueueGenericSend+0x72>
 80098f2:	2301      	movs	r3, #1
 80098f4:	e000      	b.n	80098f8 <xQueueGenericSend+0x74>
 80098f6:	2300      	movs	r3, #0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10a      	bne.n	8009912 <xQueueGenericSend+0x8e>
        __asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	623b      	str	r3, [r7, #32]
    }
 800990e:	bf00      	nop
 8009910:	e7fe      	b.n	8009910 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009912:	f001 fd0f 	bl	800b334 <xTaskGetSchedulerState>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d102      	bne.n	8009922 <xQueueGenericSend+0x9e>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <xQueueGenericSend+0xa2>
 8009922:	2301      	movs	r3, #1
 8009924:	e000      	b.n	8009928 <xQueueGenericSend+0xa4>
 8009926:	2300      	movs	r3, #0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <xQueueGenericSend+0xbe>
        __asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	61fb      	str	r3, [r7, #28]
    }
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009942:	f002 fdc9 	bl	800c4d8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800994e:	429a      	cmp	r2, r3
 8009950:	d302      	bcc.n	8009958 <xQueueGenericSend+0xd4>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	2b02      	cmp	r3, #2
 8009956:	d136      	bne.n	80099c6 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8009958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995a:	4618      	mov	r0, r3
 800995c:	f004 fc44 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 8009960:	68ba      	ldr	r2, [r7, #8]
 8009962:	6879      	ldr	r1, [r7, #4]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	460b      	mov	r3, r1
 800996a:	4601      	mov	r1, r0
 800996c:	205a      	movs	r0, #90	; 0x5a
 800996e:	f003 fe9b 	bl	800d6a8 <SEGGER_SYSVIEW_RecordU32x4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	68b9      	ldr	r1, [r7, #8]
 8009976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009978:	f000 fa80 	bl	8009e7c <prvCopyDataToQueue>
 800997c:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800997e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009982:	2b00      	cmp	r3, #0
 8009984:	d010      	beq.n	80099a8 <xQueueGenericSend+0x124>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	3324      	adds	r3, #36	; 0x24
 800998a:	4618      	mov	r0, r3
 800998c:	f001 fabe 	bl	800af0c <xTaskRemoveFromEventList>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d013      	beq.n	80099be <xQueueGenericSend+0x13a>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8009996:	4b4d      	ldr	r3, [pc, #308]	; (8009acc <xQueueGenericSend+0x248>)
 8009998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	e00a      	b.n	80099be <xQueueGenericSend+0x13a>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d007      	beq.n	80099be <xQueueGenericSend+0x13a>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80099ae:	4b47      	ldr	r3, [pc, #284]	; (8009acc <xQueueGenericSend+0x248>)
 80099b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80099be:	f002 fdbb 	bl	800c538 <vPortExitCritical>
                return pdPASS;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e07d      	b.n	8009ac2 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d110      	bne.n	80099ee <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80099cc:	f002 fdb4 	bl	800c538 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	4618      	mov	r0, r3
 80099d4:	f004 fc08 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	460b      	mov	r3, r1
 80099e2:	4601      	mov	r1, r0
 80099e4:	205a      	movs	r0, #90	; 0x5a
 80099e6:	f003 fe5f 	bl	800d6a8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	e069      	b.n	8009ac2 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80099ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d106      	bne.n	8009a02 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80099f4:	f107 0314 	add.w	r3, r7, #20
 80099f8:	4618      	mov	r0, r3
 80099fa:	f001 fb5f 	bl	800b0bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80099fe:	2301      	movs	r3, #1
 8009a00:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009a02:	f002 fd99 	bl	800c538 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009a06:	f000 ff67 	bl	800a8d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009a0a:	f002 fd65 	bl	800c4d8 <vPortEnterCritical>
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a14:	b25b      	sxtb	r3, r3
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1a:	d103      	bne.n	8009a24 <xQueueGenericSend+0x1a0>
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a2a:	b25b      	sxtb	r3, r3
 8009a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a30:	d103      	bne.n	8009a3a <xQueueGenericSend+0x1b6>
 8009a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a3a:	f002 fd7d 	bl	800c538 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a3e:	1d3a      	adds	r2, r7, #4
 8009a40:	f107 0314 	add.w	r3, r7, #20
 8009a44:	4611      	mov	r1, r2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f001 fb4e 	bl	800b0e8 <xTaskCheckForTimeOut>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d124      	bne.n	8009a9c <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a54:	f000 fb0a 	bl	800a06c <prvIsQueueFull>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d018      	beq.n	8009a90 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a60:	3310      	adds	r3, #16
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	4611      	mov	r1, r2
 8009a66:	4618      	mov	r0, r3
 8009a68:	f001 f9e4 	bl	800ae34 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8009a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a6e:	f000 fa95 	bl	8009f9c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8009a72:	f000 ff3f 	bl	800a8f4 <xTaskResumeAll>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f47f af62 	bne.w	8009942 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8009a7e:	4b13      	ldr	r3, [pc, #76]	; (8009acc <xQueueGenericSend+0x248>)
 8009a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a84:	601a      	str	r2, [r3, #0]
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	e758      	b.n	8009942 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8009a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a92:	f000 fa83 	bl	8009f9c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009a96:	f000 ff2d 	bl	800a8f4 <xTaskResumeAll>
 8009a9a:	e752      	b.n	8009942 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8009a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a9e:	f000 fa7d 	bl	8009f9c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009aa2:	f000 ff27 	bl	800a8f4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f004 fb9d 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	6879      	ldr	r1, [r7, #4]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	4601      	mov	r1, r0
 8009aba:	205a      	movs	r0, #90	; 0x5a
 8009abc:	f003 fdf4 	bl	800d6a8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8009ac0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3738      	adds	r7, #56	; 0x38
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	e000ed04 	.word	0xe000ed04

08009ad0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b092      	sub	sp, #72	; 0x48
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8009ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10a      	bne.n	8009afe <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8009ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8009afa:	bf00      	nop
 8009afc:	e7fe      	b.n	8009afc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d103      	bne.n	8009b0c <xQueueGenericSendFromISR+0x3c>
 8009b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <xQueueGenericSendFromISR+0x40>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e000      	b.n	8009b12 <xQueueGenericSendFromISR+0x42>
 8009b10:	2300      	movs	r3, #0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10a      	bne.n	8009b2c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8009b28:	bf00      	nop
 8009b2a:	e7fe      	b.n	8009b2a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d103      	bne.n	8009b3a <xQueueGenericSendFromISR+0x6a>
 8009b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d101      	bne.n	8009b3e <xQueueGenericSendFromISR+0x6e>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e000      	b.n	8009b40 <xQueueGenericSendFromISR+0x70>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10a      	bne.n	8009b5a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009b56:	bf00      	nop
 8009b58:	e7fe      	b.n	8009b58 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b5a:	f002 fda7 	bl	800c6ac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8009b5e:	f3ef 8211 	mrs	r2, BASEPRI
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	623a      	str	r2, [r7, #32]
 8009b74:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8009b76:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b78:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d302      	bcc.n	8009b8c <xQueueGenericSendFromISR+0xbc>
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d150      	bne.n	8009c2e <xQueueGenericSendFromISR+0x15e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8009b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9a:	637b      	str	r3, [r7, #52]	; 0x34

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f004 fb22 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 8009ba4:	4601      	mov	r1, r0
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	2060      	movs	r0, #96	; 0x60
 8009bac:	f003 fcac 	bl	800d508 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	68b9      	ldr	r1, [r7, #8]
 8009bb4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009bb6:	f000 f961 	bl	8009e7c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8009bba:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8009bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc2:	d112      	bne.n	8009bea <xQueueGenericSendFromISR+0x11a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d02d      	beq.n	8009c28 <xQueueGenericSendFromISR+0x158>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bce:	3324      	adds	r3, #36	; 0x24
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f001 f99b 	bl	800af0c <xTaskRemoveFromEventList>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d025      	beq.n	8009c28 <xQueueGenericSendFromISR+0x158>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d022      	beq.n	8009c28 <xQueueGenericSendFromISR+0x158>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	601a      	str	r2, [r3, #0]
 8009be8:	e01e      	b.n	8009c28 <xQueueGenericSendFromISR+0x158>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8009bea:	f000 ff93 	bl	800ab14 <uxTaskGetNumberOfTasks>
 8009bee:	6338      	str	r0, [r7, #48]	; 0x30
 8009bf0:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8009bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d916      	bls.n	8009c28 <xQueueGenericSendFromISR+0x158>
 8009bfa:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8009bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8009c00:	d10a      	bne.n	8009c18 <xQueueGenericSendFromISR+0x148>
        __asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	61bb      	str	r3, [r7, #24]
    }
 8009c14:	bf00      	nop
 8009c16:	e7fe      	b.n	8009c16 <xQueueGenericSendFromISR+0x146>
 8009c18:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	b25a      	sxtb	r2, r3
 8009c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8009c2c:	e00b      	b.n	8009c46 <xQueueGenericSendFromISR+0x176>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8009c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c30:	4618      	mov	r0, r3
 8009c32:	f004 fad9 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 8009c36:	4601      	mov	r1, r0
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	2060      	movs	r0, #96	; 0x60
 8009c3e:	f003 fc63 	bl	800d508 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	647b      	str	r3, [r7, #68]	; 0x44
 8009c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c48:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8009c50:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8009c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3748      	adds	r7, #72	; 0x48
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009c5c:	b590      	push	{r4, r7, lr}
 8009c5e:	b08f      	sub	sp, #60	; 0x3c
 8009c60:	af02      	add	r7, sp, #8
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10a      	bne.n	8009c8c <xQueueReceive+0x30>
        __asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	623b      	str	r3, [r7, #32]
    }
 8009c88:	bf00      	nop
 8009c8a:	e7fe      	b.n	8009c8a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d103      	bne.n	8009c9a <xQueueReceive+0x3e>
 8009c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <xQueueReceive+0x42>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e000      	b.n	8009ca0 <xQueueReceive+0x44>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10a      	bne.n	8009cba <xQueueReceive+0x5e>
        __asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	61fb      	str	r3, [r7, #28]
    }
 8009cb6:	bf00      	nop
 8009cb8:	e7fe      	b.n	8009cb8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cba:	f001 fb3b 	bl	800b334 <xTaskGetSchedulerState>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d102      	bne.n	8009cca <xQueueReceive+0x6e>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <xQueueReceive+0x72>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e000      	b.n	8009cd0 <xQueueReceive+0x74>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10a      	bne.n	8009cea <xQueueReceive+0x8e>
        __asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	61bb      	str	r3, [r7, #24]
    }
 8009ce6:	bf00      	nop
 8009ce8:	e7fe      	b.n	8009ce8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009cea:	f002 fbf5 	bl	800c4d8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d02f      	beq.n	8009d5a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009cfa:	68b9      	ldr	r1, [r7, #8]
 8009cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cfe:	f000 f927 	bl	8009f50 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8009d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d04:	4618      	mov	r0, r3
 8009d06:	f004 fa6f 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	f004 fa6b 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 8009d12:	4602      	mov	r2, r0
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2101      	movs	r1, #1
 8009d18:	9100      	str	r1, [sp, #0]
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	205c      	movs	r0, #92	; 0x5c
 8009d1e:	f003 fcc3 	bl	800d6a8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	1e5a      	subs	r2, r3, #1
 8009d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d28:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00f      	beq.n	8009d52 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d34:	3310      	adds	r3, #16
 8009d36:	4618      	mov	r0, r3
 8009d38:	f001 f8e8 	bl	800af0c <xTaskRemoveFromEventList>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d007      	beq.n	8009d52 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009d42:	4b4d      	ldr	r3, [pc, #308]	; (8009e78 <xQueueReceive+0x21c>)
 8009d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d48:	601a      	str	r2, [r3, #0]
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009d52:	f002 fbf1 	bl	800c538 <vPortExitCritical>
                return pdPASS;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e08a      	b.n	8009e70 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d113      	bne.n	8009d88 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009d60:	f002 fbea 	bl	800c538 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	4618      	mov	r0, r3
 8009d68:	f004 fa3e 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	2000      	movs	r0, #0
 8009d70:	f004 fa3a 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 8009d74:	4602      	mov	r2, r0
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2101      	movs	r1, #1
 8009d7a:	9100      	str	r1, [sp, #0]
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	205c      	movs	r0, #92	; 0x5c
 8009d80:	f003 fc92 	bl	800d6a8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009d84:	2300      	movs	r3, #0
 8009d86:	e073      	b.n	8009e70 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d106      	bne.n	8009d9c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009d8e:	f107 0310 	add.w	r3, r7, #16
 8009d92:	4618      	mov	r0, r3
 8009d94:	f001 f992 	bl	800b0bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009d9c:	f002 fbcc 	bl	800c538 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009da0:	f000 fd9a 	bl	800a8d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009da4:	f002 fb98 	bl	800c4d8 <vPortEnterCritical>
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dae:	b25b      	sxtb	r3, r3
 8009db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db4:	d103      	bne.n	8009dbe <xQueueReceive+0x162>
 8009db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dc4:	b25b      	sxtb	r3, r3
 8009dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dca:	d103      	bne.n	8009dd4 <xQueueReceive+0x178>
 8009dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009dd4:	f002 fbb0 	bl	800c538 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dd8:	1d3a      	adds	r2, r7, #4
 8009dda:	f107 0310 	add.w	r3, r7, #16
 8009dde:	4611      	mov	r1, r2
 8009de0:	4618      	mov	r0, r3
 8009de2:	f001 f981 	bl	800b0e8 <xTaskCheckForTimeOut>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d124      	bne.n	8009e36 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dee:	f000 f927 	bl	800a040 <prvIsQueueEmpty>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d018      	beq.n	8009e2a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	3324      	adds	r3, #36	; 0x24
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	4611      	mov	r1, r2
 8009e00:	4618      	mov	r0, r3
 8009e02:	f001 f817 	bl	800ae34 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e08:	f000 f8c8 	bl	8009f9c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009e0c:	f000 fd72 	bl	800a8f4 <xTaskResumeAll>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f47f af69 	bne.w	8009cea <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8009e18:	4b17      	ldr	r3, [pc, #92]	; (8009e78 <xQueueReceive+0x21c>)
 8009e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e1e:	601a      	str	r2, [r3, #0]
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	e75f      	b.n	8009cea <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e2c:	f000 f8b6 	bl	8009f9c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009e30:	f000 fd60 	bl	800a8f4 <xTaskResumeAll>
 8009e34:	e759      	b.n	8009cea <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e38:	f000 f8b0 	bl	8009f9c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009e3c:	f000 fd5a 	bl	800a8f4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e42:	f000 f8fd 	bl	800a040 <prvIsQueueEmpty>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f43f af4e 	beq.w	8009cea <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e50:	4618      	mov	r0, r3
 8009e52:	f004 f9c9 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 8009e56:	4604      	mov	r4, r0
 8009e58:	2000      	movs	r0, #0
 8009e5a:	f004 f9c5 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2101      	movs	r1, #1
 8009e64:	9100      	str	r1, [sp, #0]
 8009e66:	4621      	mov	r1, r4
 8009e68:	205c      	movs	r0, #92	; 0x5c
 8009e6a:	f003 fc1d 	bl	800d6a8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009e6e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3734      	adds	r7, #52	; 0x34
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd90      	pop	{r4, r7, pc}
 8009e78:	e000ed04 	.word	0xe000ed04

08009e7c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e90:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10d      	bne.n	8009eb6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d14d      	bne.n	8009f3e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f001 fa62 	bl	800b370 <xTaskPriorityDisinherit>
 8009eac:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	609a      	str	r2, [r3, #8]
 8009eb4:	e043      	b.n	8009f3e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d119      	bne.n	8009ef0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6858      	ldr	r0, [r3, #4]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	68b9      	ldr	r1, [r7, #8]
 8009ec8:	f005 f995 	bl	800f1f6 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	685a      	ldr	r2, [r3, #4]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed4:	441a      	add	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	685a      	ldr	r2, [r3, #4]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d32b      	bcc.n	8009f3e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	605a      	str	r2, [r3, #4]
 8009eee:	e026      	b.n	8009f3e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	68d8      	ldr	r0, [r3, #12]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef8:	461a      	mov	r2, r3
 8009efa:	68b9      	ldr	r1, [r7, #8]
 8009efc:	f005 f97b 	bl	800f1f6 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	68da      	ldr	r2, [r3, #12]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f08:	425b      	negs	r3, r3
 8009f0a:	441a      	add	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	68da      	ldr	r2, [r3, #12]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d207      	bcs.n	8009f2c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	689a      	ldr	r2, [r3, #8]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f24:	425b      	negs	r3, r3
 8009f26:	441a      	add	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d105      	bne.n	8009f3e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	1c5a      	adds	r2, r3, #1
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8009f46:	697b      	ldr	r3, [r7, #20]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d018      	beq.n	8009f94 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68da      	ldr	r2, [r3, #12]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6a:	441a      	add	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68da      	ldr	r2, [r3, #12]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d303      	bcc.n	8009f84 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68d9      	ldr	r1, [r3, #12]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	6838      	ldr	r0, [r7, #0]
 8009f90:	f005 f931 	bl	800f1f6 <memcpy>
    }
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009fa4:	f002 fa98 	bl	800c4d8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fb0:	e011      	b.n	8009fd6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d012      	beq.n	8009fe0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	3324      	adds	r3, #36	; 0x24
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 ffa4 	bl	800af0c <xTaskRemoveFromEventList>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8009fca:	f001 f8f3 	bl	800b1b4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	dce9      	bgt.n	8009fb2 <prvUnlockQueue+0x16>
 8009fde:	e000      	b.n	8009fe2 <prvUnlockQueue+0x46>
                    break;
 8009fe0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	22ff      	movs	r2, #255	; 0xff
 8009fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8009fea:	f002 faa5 	bl	800c538 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009fee:	f002 fa73 	bl	800c4d8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ff8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ffa:	e011      	b.n	800a020 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d012      	beq.n	800a02a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3310      	adds	r3, #16
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 ff7f 	bl	800af0c <xTaskRemoveFromEventList>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800a014:	f001 f8ce 	bl	800b1b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800a018:	7bbb      	ldrb	r3, [r7, #14]
 800a01a:	3b01      	subs	r3, #1
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800a020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a024:	2b00      	cmp	r3, #0
 800a026:	dce9      	bgt.n	8009ffc <prvUnlockQueue+0x60>
 800a028:	e000      	b.n	800a02c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800a02a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	22ff      	movs	r2, #255	; 0xff
 800a030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800a034:	f002 fa80 	bl	800c538 <vPortExitCritical>
}
 800a038:	bf00      	nop
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800a048:	f002 fa46 	bl	800c4d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800a054:	2301      	movs	r3, #1
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	e001      	b.n	800a05e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800a05a:	2300      	movs	r3, #0
 800a05c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a05e:	f002 fa6b 	bl	800c538 <vPortExitCritical>

    return xReturn;
 800a062:	68fb      	ldr	r3, [r7, #12]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800a074:	f002 fa30 	bl	800c4d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a080:	429a      	cmp	r2, r3
 800a082:	d102      	bne.n	800a08a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800a084:	2301      	movs	r3, #1
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	e001      	b.n	800a08e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800a08a:	2300      	movs	r3, #0
 800a08c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a08e:	f002 fa53 	bl	800c538 <vPortExitCritical>

    return xReturn;
 800a092:	68fb      	ldr	r3, [r7, #12]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10a      	bne.n	800a0c6 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800a0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b4:	f383 8811 	msr	BASEPRI, r3
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	60fb      	str	r3, [r7, #12]
    }
 800a0c2:	bf00      	nop
 800a0c4:	e7fe      	b.n	800a0c4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d024      	beq.n	800a116 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	617b      	str	r3, [r7, #20]
 800a0d0:	e01e      	b.n	800a110 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800a0d2:	4a1c      	ldr	r2, [pc, #112]	; (800a144 <vQueueAddToRegistry+0xa8>)
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	00db      	lsls	r3, r3, #3
 800a0d8:	4413      	add	r3, r2
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d105      	bne.n	800a0ee <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	00db      	lsls	r3, r3, #3
 800a0e6:	4a17      	ldr	r2, [pc, #92]	; (800a144 <vQueueAddToRegistry+0xa8>)
 800a0e8:	4413      	add	r3, r2
 800a0ea:	613b      	str	r3, [r7, #16]
                    break;
 800a0ec:	e013      	b.n	800a116 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10a      	bne.n	800a10a <vQueueAddToRegistry+0x6e>
 800a0f4:	4a13      	ldr	r2, [pc, #76]	; (800a144 <vQueueAddToRegistry+0xa8>)
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d104      	bne.n	800a10a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	00db      	lsls	r3, r3, #3
 800a104:	4a0f      	ldr	r2, [pc, #60]	; (800a144 <vQueueAddToRegistry+0xa8>)
 800a106:	4413      	add	r3, r2
 800a108:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	3301      	adds	r3, #1
 800a10e:	617b      	str	r3, [r7, #20]
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	2b07      	cmp	r3, #7
 800a114:	d9dd      	bls.n	800a0d2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00f      	beq.n	800a13c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4618      	mov	r0, r3
 800a12c:	f004 f85c 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 800a130:	4601      	mov	r1, r0
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	461a      	mov	r2, r3
 800a136:	2071      	movs	r0, #113	; 0x71
 800a138:	f003 f9e6 	bl	800d508 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800a13c:	bf00      	nop
 800a13e:	3718      	adds	r7, #24
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	20000b04 	.word	0x20000b04

0800a148 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800a158:	f002 f9be 	bl	800c4d8 <vPortEnterCritical>
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a162:	b25b      	sxtb	r3, r3
 800a164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a168:	d103      	bne.n	800a172 <vQueueWaitForMessageRestricted+0x2a>
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a178:	b25b      	sxtb	r3, r3
 800a17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a17e:	d103      	bne.n	800a188 <vQueueWaitForMessageRestricted+0x40>
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2200      	movs	r2, #0
 800a184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a188:	f002 f9d6 	bl	800c538 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a190:	2b00      	cmp	r3, #0
 800a192:	d106      	bne.n	800a1a2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	3324      	adds	r3, #36	; 0x24
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	68b9      	ldr	r1, [r7, #8]
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 fe6d 	bl	800ae7c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800a1a2:	6978      	ldr	r0, [r7, #20]
 800a1a4:	f7ff fefa 	bl	8009f9c <prvUnlockQueue>
    }
 800a1a8:	bf00      	nop
 800a1aa:	3718      	adds	r7, #24
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b08c      	sub	sp, #48	; 0x30
 800a1b4:	af04      	add	r7, sp, #16
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	603b      	str	r3, [r7, #0]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1c0:	88fb      	ldrh	r3, [r7, #6]
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f002 fab1 	bl	800c72c <pvPortMalloc>
 800a1ca:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d013      	beq.n	800a1fa <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1d2:	2058      	movs	r0, #88	; 0x58
 800a1d4:	f002 faaa 	bl	800c72c <pvPortMalloc>
 800a1d8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d008      	beq.n	800a1f2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800a1e0:	2258      	movs	r2, #88	; 0x58
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	69f8      	ldr	r0, [r7, #28]
 800a1e6:	f004 ff98 	bl	800f11a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	631a      	str	r2, [r3, #48]	; 0x30
 800a1f0:	e005      	b.n	800a1fe <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800a1f2:	6978      	ldr	r0, [r7, #20]
 800a1f4:	f002 fb54 	bl	800c8a0 <vPortFree>
 800a1f8:	e001      	b.n	800a1fe <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d013      	beq.n	800a22c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a204:	88fa      	ldrh	r2, [r7, #6]
 800a206:	2300      	movs	r3, #0
 800a208:	9303      	str	r3, [sp, #12]
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	9302      	str	r3, [sp, #8]
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	68b9      	ldr	r1, [r7, #8]
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 f80e 	bl	800a23c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a220:	69f8      	ldr	r0, [r7, #28]
 800a222:	f000 f899 	bl	800a358 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800a226:	2301      	movs	r3, #1
 800a228:	61bb      	str	r3, [r7, #24]
 800a22a:	e002      	b.n	800a232 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a22c:	f04f 33ff 	mov.w	r3, #4294967295
 800a230:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800a232:	69bb      	ldr	r3, [r7, #24]
    }
 800a234:	4618      	mov	r0, r3
 800a236:	3720      	adds	r7, #32
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b088      	sub	sp, #32
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	461a      	mov	r2, r3
 800a254:	21a5      	movs	r1, #165	; 0xa5
 800a256:	f004 ff60 	bl	800f11a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a264:	3b01      	subs	r3, #1
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	f023 0307 	bic.w	r3, r3, #7
 800a272:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00a      	beq.n	800a294 <prvInitialiseNewTask+0x58>
        __asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	617b      	str	r3, [r7, #20]
    }
 800a290:	bf00      	nop
 800a292:	e7fe      	b.n	800a292 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d01e      	beq.n	800a2d8 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a29a:	2300      	movs	r3, #0
 800a29c:	61fb      	str	r3, [r7, #28]
 800a29e:	e012      	b.n	800a2c6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	7819      	ldrb	r1, [r3, #0]
 800a2a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	3334      	adds	r3, #52	; 0x34
 800a2b0:	460a      	mov	r2, r1
 800a2b2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d006      	beq.n	800a2ce <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	61fb      	str	r3, [r7, #28]
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	2b09      	cmp	r3, #9
 800a2ca:	d9e9      	bls.n	800a2a0 <prvInitialiseNewTask+0x64>
 800a2cc:	e000      	b.n	800a2d0 <prvInitialiseNewTask+0x94>
            {
                break;
 800a2ce:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800a2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2da:	2b04      	cmp	r3, #4
 800a2dc:	d90a      	bls.n	800a2f4 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	613b      	str	r3, [r7, #16]
    }
 800a2f0:	bf00      	nop
 800a2f2:	e7fe      	b.n	800a2f2 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d901      	bls.n	800a2fe <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a2fa:	2304      	movs	r3, #4
 800a2fc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a302:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a308:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30c:	3304      	adds	r3, #4
 800a30e:	4618      	mov	r0, r3
 800a310:	f7ff f91c 	bl	800954c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a316:	3318      	adds	r3, #24
 800a318:	4618      	mov	r0, r3
 800a31a:	f7ff f917 	bl	800954c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a322:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a326:	f1c3 0205 	rsb	r2, r3, #5
 800a32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a332:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	68f9      	ldr	r1, [r7, #12]
 800a338:	69b8      	ldr	r0, [r7, #24]
 800a33a:	f001 ff9b 	bl	800c274 <pxPortInitialiseStack>
 800a33e:	4602      	mov	r2, r0
 800a340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a342:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a34e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a350:	bf00      	nop
 800a352:	3720      	adds	r7, #32
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800a358:	b5b0      	push	{r4, r5, r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af02      	add	r7, sp, #8
 800a35e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800a360:	f002 f8ba 	bl	800c4d8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800a364:	4b4f      	ldr	r3, [pc, #316]	; (800a4a4 <prvAddNewTaskToReadyList+0x14c>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3301      	adds	r3, #1
 800a36a:	4a4e      	ldr	r2, [pc, #312]	; (800a4a4 <prvAddNewTaskToReadyList+0x14c>)
 800a36c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800a36e:	4b4e      	ldr	r3, [pc, #312]	; (800a4a8 <prvAddNewTaskToReadyList+0x150>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d109      	bne.n	800a38a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800a376:	4a4c      	ldr	r2, [pc, #304]	; (800a4a8 <prvAddNewTaskToReadyList+0x150>)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a37c:	4b49      	ldr	r3, [pc, #292]	; (800a4a4 <prvAddNewTaskToReadyList+0x14c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d110      	bne.n	800a3a6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800a384:	f000 ff3c 	bl	800b200 <prvInitialiseTaskLists>
 800a388:	e00d      	b.n	800a3a6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800a38a:	4b48      	ldr	r3, [pc, #288]	; (800a4ac <prvAddNewTaskToReadyList+0x154>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d109      	bne.n	800a3a6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a392:	4b45      	ldr	r3, [pc, #276]	; (800a4a8 <prvAddNewTaskToReadyList+0x150>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d802      	bhi.n	800a3a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800a3a0:	4a41      	ldr	r2, [pc, #260]	; (800a4a8 <prvAddNewTaskToReadyList+0x150>)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800a3a6:	4b42      	ldr	r3, [pc, #264]	; (800a4b0 <prvAddNewTaskToReadyList+0x158>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	4a40      	ldr	r2, [pc, #256]	; (800a4b0 <prvAddNewTaskToReadyList+0x158>)
 800a3ae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a3b0:	4b3f      	ldr	r3, [pc, #252]	; (800a4b0 <prvAddNewTaskToReadyList+0x158>)
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d016      	beq.n	800a3ec <prvAddNewTaskToReadyList+0x94>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f003 fdeb 	bl	800df9c <SEGGER_SYSVIEW_OnTaskCreate>
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d6:	461d      	mov	r5, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	461c      	mov	r4, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e2:	1ae3      	subs	r3, r4, r3
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	462b      	mov	r3, r5
 800a3e8:	f002 fb6c 	bl	800cac4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f003 fe58 	bl	800e0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	409a      	lsls	r2, r3
 800a3fc:	4b2d      	ldr	r3, [pc, #180]	; (800a4b4 <prvAddNewTaskToReadyList+0x15c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4313      	orrs	r3, r2
 800a402:	4a2c      	ldr	r2, [pc, #176]	; (800a4b4 <prvAddNewTaskToReadyList+0x15c>)
 800a404:	6013      	str	r3, [r2, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a40a:	492b      	ldr	r1, [pc, #172]	; (800a4b8 <prvAddNewTaskToReadyList+0x160>)
 800a40c:	4613      	mov	r3, r2
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	4413      	add	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	440b      	add	r3, r1
 800a416:	3304      	adds	r3, #4
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	609a      	str	r2, [r3, #8]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	689a      	ldr	r2, [r3, #8]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	60da      	str	r2, [r3, #12]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	3204      	adds	r2, #4
 800a432:	605a      	str	r2, [r3, #4]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	1d1a      	adds	r2, r3, #4
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	609a      	str	r2, [r3, #8]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a440:	4613      	mov	r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	4413      	add	r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	4a1b      	ldr	r2, [pc, #108]	; (800a4b8 <prvAddNewTaskToReadyList+0x160>)
 800a44a:	441a      	add	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	615a      	str	r2, [r3, #20]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a454:	4918      	ldr	r1, [pc, #96]	; (800a4b8 <prvAddNewTaskToReadyList+0x160>)
 800a456:	4613      	mov	r3, r2
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4413      	add	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	440b      	add	r3, r1
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	1c59      	adds	r1, r3, #1
 800a464:	4814      	ldr	r0, [pc, #80]	; (800a4b8 <prvAddNewTaskToReadyList+0x160>)
 800a466:	4613      	mov	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	4403      	add	r3, r0
 800a470:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800a472:	f002 f861 	bl	800c538 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800a476:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <prvAddNewTaskToReadyList+0x154>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00e      	beq.n	800a49c <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a47e:	4b0a      	ldr	r3, [pc, #40]	; (800a4a8 <prvAddNewTaskToReadyList+0x150>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a488:	429a      	cmp	r2, r3
 800a48a:	d207      	bcs.n	800a49c <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800a48c:	4b0b      	ldr	r3, [pc, #44]	; (800a4bc <prvAddNewTaskToReadyList+0x164>)
 800a48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a49c:	bf00      	nop
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bdb0      	pop	{r4, r5, r7, pc}
 800a4a4:	20000c1c 	.word	0x20000c1c
 800a4a8:	20000b44 	.word	0x20000b44
 800a4ac:	20000c28 	.word	0x20000c28
 800a4b0:	20000c38 	.word	0x20000c38
 800a4b4:	20000c24 	.word	0x20000c24
 800a4b8:	20000b48 	.word	0x20000b48
 800a4bc:	e000ed04 	.word	0xe000ed04

0800a4c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d01b      	beq.n	800a50a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800a4d2:	4b15      	ldr	r3, [pc, #84]	; (800a528 <vTaskDelay+0x68>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00a      	beq.n	800a4f0 <vTaskDelay+0x30>
        __asm volatile
 800a4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	60bb      	str	r3, [r7, #8]
    }
 800a4ec:	bf00      	nop
 800a4ee:	e7fe      	b.n	800a4ee <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800a4f0:	f000 f9f2 	bl	800a8d8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800a4f4:	6879      	ldr	r1, [r7, #4]
 800a4f6:	2023      	movs	r0, #35	; 0x23
 800a4f8:	f002 ffca 	bl	800d490 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f001 fb0c 	bl	800bb1c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800a504:	f000 f9f6 	bl	800a8f4 <xTaskResumeAll>
 800a508:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d107      	bne.n	800a520 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800a510:	4b06      	ldr	r3, [pc, #24]	; (800a52c <vTaskDelay+0x6c>)
 800a512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800a520:	bf00      	nop
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	20000c44 	.word	0x20000c44
 800a52c:	e000ed04 	.word	0xe000ed04

0800a530 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800a538:	f001 ffce 	bl	800c4d8 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d102      	bne.n	800a548 <vTaskSuspend+0x18>
 800a542:	4b4a      	ldr	r3, [pc, #296]	; (800a66c <vTaskSuspend+0x13c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	e000      	b.n	800a54a <vTaskSuspend+0x1a>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	4618      	mov	r0, r3
 800a550:	f003 fe4a 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 800a554:	4603      	mov	r3, r0
 800a556:	4619      	mov	r1, r3
 800a558:	2029      	movs	r0, #41	; 0x29
 800a55a:	f002 ff99 	bl	800d490 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	3304      	adds	r3, #4
 800a562:	4618      	mov	r0, r3
 800a564:	f7ff f85c 	bl	8009620 <uxListRemove>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d115      	bne.n	800a59a <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a572:	493f      	ldr	r1, [pc, #252]	; (800a670 <vTaskSuspend+0x140>)
 800a574:	4613      	mov	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	440b      	add	r3, r1
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10a      	bne.n	800a59a <vTaskSuspend+0x6a>
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a588:	2201      	movs	r2, #1
 800a58a:	fa02 f303 	lsl.w	r3, r2, r3
 800a58e:	43da      	mvns	r2, r3
 800a590:	4b38      	ldr	r3, [pc, #224]	; (800a674 <vTaskSuspend+0x144>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4013      	ands	r3, r2
 800a596:	4a37      	ldr	r2, [pc, #220]	; (800a674 <vTaskSuspend+0x144>)
 800a598:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d004      	beq.n	800a5ac <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	3318      	adds	r3, #24
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7ff f83a 	bl	8009620 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	211b      	movs	r1, #27
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f003 fdb9 	bl	800e128 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	482e      	ldr	r0, [pc, #184]	; (800a678 <vTaskSuspend+0x148>)
 800a5be:	f7fe ffd2 	bl	8009566 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	617b      	str	r3, [r7, #20]
 800a5c6:	e010      	b.n	800a5ea <vTaskSuspend+0xba>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	3354      	adds	r3, #84	; 0x54
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d105      	bne.n	800a5e4 <vTaskSuspend+0xb4>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	4413      	add	r3, r2
 800a5de:	3354      	adds	r3, #84	; 0x54
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	617b      	str	r3, [r7, #20]
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	ddeb      	ble.n	800a5c8 <vTaskSuspend+0x98>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 800a5f0:	f001 ffa2 	bl	800c538 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800a5f4:	4b21      	ldr	r3, [pc, #132]	; (800a67c <vTaskSuspend+0x14c>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d005      	beq.n	800a608 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 800a5fc:	f001 ff6c 	bl	800c4d8 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 800a600:	f000 fe7c 	bl	800b2fc <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 800a604:	f001 ff98 	bl	800c538 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 800a608:	4b18      	ldr	r3, [pc, #96]	; (800a66c <vTaskSuspend+0x13c>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d127      	bne.n	800a662 <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 800a612:	4b1a      	ldr	r3, [pc, #104]	; (800a67c <vTaskSuspend+0x14c>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d017      	beq.n	800a64a <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 800a61a:	4b19      	ldr	r3, [pc, #100]	; (800a680 <vTaskSuspend+0x150>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00a      	beq.n	800a638 <vTaskSuspend+0x108>
        __asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	60fb      	str	r3, [r7, #12]
    }
 800a634:	bf00      	nop
 800a636:	e7fe      	b.n	800a636 <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 800a638:	4b12      	ldr	r3, [pc, #72]	; (800a684 <vTaskSuspend+0x154>)
 800a63a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800a648:	e00b      	b.n	800a662 <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a64a:	4b0b      	ldr	r3, [pc, #44]	; (800a678 <vTaskSuspend+0x148>)
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	4b0e      	ldr	r3, [pc, #56]	; (800a688 <vTaskSuspend+0x158>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d103      	bne.n	800a65e <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 800a656:	4b05      	ldr	r3, [pc, #20]	; (800a66c <vTaskSuspend+0x13c>)
 800a658:	2200      	movs	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]
    }
 800a65c:	e001      	b.n	800a662 <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 800a65e:	f000 fb7f 	bl	800ad60 <vTaskSwitchContext>
    }
 800a662:	bf00      	nop
 800a664:	3718      	adds	r7, #24
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20000b44 	.word	0x20000b44
 800a670:	20000b48 	.word	0x20000b48
 800a674:	20000c24 	.word	0x20000c24
 800a678:	20000c08 	.word	0x20000c08
 800a67c:	20000c28 	.word	0x20000c28
 800a680:	20000c44 	.word	0x20000c44
 800a684:	e000ed04 	.word	0xe000ed04
 800a688:	20000c1c 	.word	0x20000c1c

0800a68c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 800a68c:	b480      	push	{r7}
 800a68e:	b087      	sub	sp, #28
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800a694:	2300      	movs	r3, #0
 800a696:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10a      	bne.n	800a6b8 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	60fb      	str	r3, [r7, #12]
    }
 800a6b4:	bf00      	nop
 800a6b6:	e7fe      	b.n	800a6b6 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	695b      	ldr	r3, [r3, #20]
 800a6bc:	4a0a      	ldr	r2, [pc, #40]	; (800a6e8 <prvTaskIsTaskSuspended+0x5c>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d10a      	bne.n	800a6d8 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c6:	4a09      	ldr	r2, [pc, #36]	; (800a6ec <prvTaskIsTaskSuspended+0x60>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d005      	beq.n	800a6d8 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d101      	bne.n	800a6d8 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a6d8:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a6da:	4618      	mov	r0, r3
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	20000c08 	.word	0x20000c08
 800a6ec:	20000bdc 	.word	0x20000bdc

0800a6f0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10a      	bne.n	800a718 <vTaskResume+0x28>
        __asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	60fb      	str	r3, [r7, #12]
    }
 800a714:	bf00      	nop
 800a716:	e7fe      	b.n	800a716 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a718:	4b3a      	ldr	r3, [pc, #232]	; (800a804 <vTaskResume+0x114>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d06c      	beq.n	800a7fc <vTaskResume+0x10c>
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d069      	beq.n	800a7fc <vTaskResume+0x10c>
        {
            taskENTER_CRITICAL();
 800a728:	f001 fed6 	bl	800c4d8 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a72c:	6978      	ldr	r0, [r7, #20]
 800a72e:	f7ff ffad 	bl	800a68c <prvTaskIsTaskSuspended>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d05f      	beq.n	800a7f8 <vTaskResume+0x108>
                {
                    traceTASK_RESUME( pxTCB );
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f003 fd54 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 800a740:	4603      	mov	r3, r0
 800a742:	4619      	mov	r1, r3
 800a744:	202a      	movs	r0, #42	; 0x2a
 800a746:	f002 fea3 	bl	800d490 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	3304      	adds	r3, #4
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fe ff66 	bl	8009620 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	4618      	mov	r0, r3
 800a758:	f003 fca4 	bl	800e0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a760:	2201      	movs	r2, #1
 800a762:	409a      	lsls	r2, r3
 800a764:	4b28      	ldr	r3, [pc, #160]	; (800a808 <vTaskResume+0x118>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4313      	orrs	r3, r2
 800a76a:	4a27      	ldr	r2, [pc, #156]	; (800a808 <vTaskResume+0x118>)
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a772:	4926      	ldr	r1, [pc, #152]	; (800a80c <vTaskResume+0x11c>)
 800a774:	4613      	mov	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	440b      	add	r3, r1
 800a77e:	3304      	adds	r3, #4
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	613b      	str	r3, [r7, #16]
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	693a      	ldr	r2, [r7, #16]
 800a788:	609a      	str	r2, [r3, #8]
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	689a      	ldr	r2, [r3, #8]
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	60da      	str	r2, [r3, #12]
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	3204      	adds	r2, #4
 800a79a:	605a      	str	r2, [r3, #4]
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	1d1a      	adds	r2, r3, #4
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	609a      	str	r2, [r3, #8]
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4a16      	ldr	r2, [pc, #88]	; (800a80c <vTaskResume+0x11c>)
 800a7b2:	441a      	add	r2, r3
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	615a      	str	r2, [r3, #20]
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7bc:	4913      	ldr	r1, [pc, #76]	; (800a80c <vTaskResume+0x11c>)
 800a7be:	4613      	mov	r3, r2
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4413      	add	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	440b      	add	r3, r1
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	1c59      	adds	r1, r3, #1
 800a7cc:	480f      	ldr	r0, [pc, #60]	; (800a80c <vTaskResume+0x11c>)
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	4403      	add	r3, r0
 800a7d8:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7de:	4b09      	ldr	r3, [pc, #36]	; (800a804 <vTaskResume+0x114>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d307      	bcc.n	800a7f8 <vTaskResume+0x108>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 800a7e8:	4b09      	ldr	r3, [pc, #36]	; (800a810 <vTaskResume+0x120>)
 800a7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ee:	601a      	str	r2, [r3, #0]
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800a7f8:	f001 fe9e 	bl	800c538 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800a7fc:	bf00      	nop
 800a7fe:	3718      	adds	r7, #24
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	20000b44 	.word	0x20000b44
 800a808:	20000c24 	.word	0x20000c24
 800a80c:	20000b48 	.word	0x20000b48
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800a81a:	4b27      	ldr	r3, [pc, #156]	; (800a8b8 <vTaskStartScheduler+0xa4>)
 800a81c:	9301      	str	r3, [sp, #4]
 800a81e:	2300      	movs	r3, #0
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	2300      	movs	r3, #0
 800a824:	2282      	movs	r2, #130	; 0x82
 800a826:	4925      	ldr	r1, [pc, #148]	; (800a8bc <vTaskStartScheduler+0xa8>)
 800a828:	4825      	ldr	r0, [pc, #148]	; (800a8c0 <vTaskStartScheduler+0xac>)
 800a82a:	f7ff fcc1 	bl	800a1b0 <xTaskCreate>
 800a82e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d102      	bne.n	800a83c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800a836:	f001 f9f1 	bl	800bc1c <xTimerCreateTimerTask>
 800a83a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d124      	bne.n	800a88c <vTaskStartScheduler+0x78>
        __asm volatile
 800a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	60bb      	str	r3, [r7, #8]
    }
 800a854:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800a856:	4b1b      	ldr	r3, [pc, #108]	; (800a8c4 <vTaskStartScheduler+0xb0>)
 800a858:	f04f 32ff 	mov.w	r2, #4294967295
 800a85c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800a85e:	4b1a      	ldr	r3, [pc, #104]	; (800a8c8 <vTaskStartScheduler+0xb4>)
 800a860:	2201      	movs	r2, #1
 800a862:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a864:	4b19      	ldr	r3, [pc, #100]	; (800a8cc <vTaskStartScheduler+0xb8>)
 800a866:	2200      	movs	r2, #0
 800a868:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800a86a:	4b19      	ldr	r3, [pc, #100]	; (800a8d0 <vTaskStartScheduler+0xbc>)
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	4b12      	ldr	r3, [pc, #72]	; (800a8b8 <vTaskStartScheduler+0xa4>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	429a      	cmp	r2, r3
 800a874:	d102      	bne.n	800a87c <vTaskStartScheduler+0x68>
 800a876:	f003 fb75 	bl	800df64 <SEGGER_SYSVIEW_OnIdle>
 800a87a:	e004      	b.n	800a886 <vTaskStartScheduler+0x72>
 800a87c:	4b14      	ldr	r3, [pc, #80]	; (800a8d0 <vTaskStartScheduler+0xbc>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4618      	mov	r0, r3
 800a882:	f003 fbcd 	bl	800e020 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800a886:	f001 fd85 	bl	800c394 <xPortStartScheduler>
 800a88a:	e00e      	b.n	800a8aa <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a892:	d10a      	bne.n	800a8aa <vTaskStartScheduler+0x96>
        __asm volatile
 800a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	607b      	str	r3, [r7, #4]
    }
 800a8a6:	bf00      	nop
 800a8a8:	e7fe      	b.n	800a8a8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a8aa:	4b0a      	ldr	r3, [pc, #40]	; (800a8d4 <vTaskStartScheduler+0xc0>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
}
 800a8ae:	bf00      	nop
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	20000c40 	.word	0x20000c40
 800a8bc:	080123c0 	.word	0x080123c0
 800a8c0:	0800b1cd 	.word	0x0800b1cd
 800a8c4:	20000c3c 	.word	0x20000c3c
 800a8c8:	20000c28 	.word	0x20000c28
 800a8cc:	20000c20 	.word	0x20000c20
 800a8d0:	20000b44 	.word	0x20000b44
 800a8d4:	20000014 	.word	0x20000014

0800a8d8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8d8:	b480      	push	{r7}
 800a8da:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800a8dc:	4b04      	ldr	r3, [pc, #16]	; (800a8f0 <vTaskSuspendAll+0x18>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	4a03      	ldr	r2, [pc, #12]	; (800a8f0 <vTaskSuspendAll+0x18>)
 800a8e4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800a8e6:	bf00      	nop
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	20000c44 	.word	0x20000c44

0800a8f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b088      	sub	sp, #32
 800a8f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a8fe:	2300      	movs	r3, #0
 800a900:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800a902:	4b73      	ldr	r3, [pc, #460]	; (800aad0 <xTaskResumeAll+0x1dc>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10a      	bne.n	800a920 <xTaskResumeAll+0x2c>
        __asm volatile
 800a90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	607b      	str	r3, [r7, #4]
    }
 800a91c:	bf00      	nop
 800a91e:	e7fe      	b.n	800a91e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800a920:	f001 fdda 	bl	800c4d8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800a924:	4b6a      	ldr	r3, [pc, #424]	; (800aad0 <xTaskResumeAll+0x1dc>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	3b01      	subs	r3, #1
 800a92a:	4a69      	ldr	r2, [pc, #420]	; (800aad0 <xTaskResumeAll+0x1dc>)
 800a92c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a92e:	4b68      	ldr	r3, [pc, #416]	; (800aad0 <xTaskResumeAll+0x1dc>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	f040 80c4 	bne.w	800aac0 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a938:	4b66      	ldr	r3, [pc, #408]	; (800aad4 <xTaskResumeAll+0x1e0>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f000 80bf 	beq.w	800aac0 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a942:	e08e      	b.n	800aa62 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a944:	4b64      	ldr	r3, [pc, #400]	; (800aad8 <xTaskResumeAll+0x1e4>)
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a950:	613b      	str	r3, [r7, #16]
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	69db      	ldr	r3, [r3, #28]
 800a956:	69fa      	ldr	r2, [r7, #28]
 800a958:	6a12      	ldr	r2, [r2, #32]
 800a95a:	609a      	str	r2, [r3, #8]
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	6a1b      	ldr	r3, [r3, #32]
 800a960:	69fa      	ldr	r2, [r7, #28]
 800a962:	69d2      	ldr	r2, [r2, #28]
 800a964:	605a      	str	r2, [r3, #4]
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	685a      	ldr	r2, [r3, #4]
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	3318      	adds	r3, #24
 800a96e:	429a      	cmp	r2, r3
 800a970:	d103      	bne.n	800a97a <xTaskResumeAll+0x86>
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	6a1a      	ldr	r2, [r3, #32]
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	605a      	str	r2, [r3, #4]
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	2200      	movs	r2, #0
 800a97e:	629a      	str	r2, [r3, #40]	; 0x28
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	1e5a      	subs	r2, r3, #1
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	60fb      	str	r3, [r7, #12]
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	69fa      	ldr	r2, [r7, #28]
 800a996:	68d2      	ldr	r2, [r2, #12]
 800a998:	609a      	str	r2, [r3, #8]
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	69fa      	ldr	r2, [r7, #28]
 800a9a0:	6892      	ldr	r2, [r2, #8]
 800a9a2:	605a      	str	r2, [r3, #4]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	685a      	ldr	r2, [r3, #4]
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	3304      	adds	r3, #4
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d103      	bne.n	800a9b8 <xTaskResumeAll+0xc4>
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	68da      	ldr	r2, [r3, #12]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	605a      	str	r2, [r3, #4]
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	615a      	str	r2, [r3, #20]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	1e5a      	subs	r2, r3, #1
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f003 fb6a 	bl	800e0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	409a      	lsls	r2, r3
 800a9d8:	4b40      	ldr	r3, [pc, #256]	; (800aadc <xTaskResumeAll+0x1e8>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	4a3f      	ldr	r2, [pc, #252]	; (800aadc <xTaskResumeAll+0x1e8>)
 800a9e0:	6013      	str	r3, [r2, #0]
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e6:	493e      	ldr	r1, [pc, #248]	; (800aae0 <xTaskResumeAll+0x1ec>)
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	440b      	add	r3, r1
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	60bb      	str	r3, [r7, #8]
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	609a      	str	r2, [r3, #8]
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	689a      	ldr	r2, [r3, #8]
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	60da      	str	r2, [r3, #12]
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	69fa      	ldr	r2, [r7, #28]
 800aa0c:	3204      	adds	r2, #4
 800aa0e:	605a      	str	r2, [r3, #4]
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	1d1a      	adds	r2, r3, #4
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	609a      	str	r2, [r3, #8]
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4413      	add	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4a2e      	ldr	r2, [pc, #184]	; (800aae0 <xTaskResumeAll+0x1ec>)
 800aa26:	441a      	add	r2, r3
 800aa28:	69fb      	ldr	r3, [r7, #28]
 800aa2a:	615a      	str	r2, [r3, #20]
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa30:	492b      	ldr	r1, [pc, #172]	; (800aae0 <xTaskResumeAll+0x1ec>)
 800aa32:	4613      	mov	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	440b      	add	r3, r1
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	1c59      	adds	r1, r3, #1
 800aa40:	4827      	ldr	r0, [pc, #156]	; (800aae0 <xTaskResumeAll+0x1ec>)
 800aa42:	4613      	mov	r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4403      	add	r3, r0
 800aa4c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa52:	4b24      	ldr	r3, [pc, #144]	; (800aae4 <xTaskResumeAll+0x1f0>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d302      	bcc.n	800aa62 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 800aa5c:	4b22      	ldr	r3, [pc, #136]	; (800aae8 <xTaskResumeAll+0x1f4>)
 800aa5e:	2201      	movs	r2, #1
 800aa60:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa62:	4b1d      	ldr	r3, [pc, #116]	; (800aad8 <xTaskResumeAll+0x1e4>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f47f af6c 	bne.w	800a944 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800aa72:	f000 fc43 	bl	800b2fc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aa76:	4b1d      	ldr	r3, [pc, #116]	; (800aaec <xTaskResumeAll+0x1f8>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d010      	beq.n	800aaa4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800aa82:	f000 f853 	bl	800ab2c <xTaskIncrementTick>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d002      	beq.n	800aa92 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 800aa8c:	4b16      	ldr	r3, [pc, #88]	; (800aae8 <xTaskResumeAll+0x1f4>)
 800aa8e:	2201      	movs	r2, #1
 800aa90:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	3b01      	subs	r3, #1
 800aa96:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1f1      	bne.n	800aa82 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800aa9e:	4b13      	ldr	r3, [pc, #76]	; (800aaec <xTaskResumeAll+0x1f8>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800aaa4:	4b10      	ldr	r3, [pc, #64]	; (800aae8 <xTaskResumeAll+0x1f4>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d009      	beq.n	800aac0 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800aaac:	2301      	movs	r3, #1
 800aaae:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800aab0:	4b0f      	ldr	r3, [pc, #60]	; (800aaf0 <xTaskResumeAll+0x1fc>)
 800aab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab6:	601a      	str	r2, [r3, #0]
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800aac0:	f001 fd3a 	bl	800c538 <vPortExitCritical>

    return xAlreadyYielded;
 800aac4:	69bb      	ldr	r3, [r7, #24]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3720      	adds	r7, #32
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20000c44 	.word	0x20000c44
 800aad4:	20000c1c 	.word	0x20000c1c
 800aad8:	20000bdc 	.word	0x20000bdc
 800aadc:	20000c24 	.word	0x20000c24
 800aae0:	20000b48 	.word	0x20000b48
 800aae4:	20000b44 	.word	0x20000b44
 800aae8:	20000c30 	.word	0x20000c30
 800aaec:	20000c2c 	.word	0x20000c2c
 800aaf0:	e000ed04 	.word	0xe000ed04

0800aaf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800aafa:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <xTaskGetTickCount+0x1c>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800ab00:	687b      	ldr	r3, [r7, #4]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	20000c20 	.word	0x20000c20

0800ab14 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800ab14:	b480      	push	{r7}
 800ab16:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800ab18:	4b03      	ldr	r3, [pc, #12]	; (800ab28 <uxTaskGetNumberOfTasks+0x14>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	20000c1c 	.word	0x20000c1c

0800ab2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b08a      	sub	sp, #40	; 0x28
 800ab30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800ab32:	2300      	movs	r3, #0
 800ab34:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab36:	4b7f      	ldr	r3, [pc, #508]	; (800ad34 <xTaskIncrementTick+0x208>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f040 80f0 	bne.w	800ad20 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab40:	4b7d      	ldr	r3, [pc, #500]	; (800ad38 <xTaskIncrementTick+0x20c>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	3301      	adds	r3, #1
 800ab46:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800ab48:	4a7b      	ldr	r2, [pc, #492]	; (800ad38 <xTaskIncrementTick+0x20c>)
 800ab4a:	6a3b      	ldr	r3, [r7, #32]
 800ab4c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d120      	bne.n	800ab96 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800ab54:	4b79      	ldr	r3, [pc, #484]	; (800ad3c <xTaskIncrementTick+0x210>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00a      	beq.n	800ab74 <xTaskIncrementTick+0x48>
        __asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	607b      	str	r3, [r7, #4]
    }
 800ab70:	bf00      	nop
 800ab72:	e7fe      	b.n	800ab72 <xTaskIncrementTick+0x46>
 800ab74:	4b71      	ldr	r3, [pc, #452]	; (800ad3c <xTaskIncrementTick+0x210>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	61fb      	str	r3, [r7, #28]
 800ab7a:	4b71      	ldr	r3, [pc, #452]	; (800ad40 <xTaskIncrementTick+0x214>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a6f      	ldr	r2, [pc, #444]	; (800ad3c <xTaskIncrementTick+0x210>)
 800ab80:	6013      	str	r3, [r2, #0]
 800ab82:	4a6f      	ldr	r2, [pc, #444]	; (800ad40 <xTaskIncrementTick+0x214>)
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	6013      	str	r3, [r2, #0]
 800ab88:	4b6e      	ldr	r3, [pc, #440]	; (800ad44 <xTaskIncrementTick+0x218>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	4a6d      	ldr	r2, [pc, #436]	; (800ad44 <xTaskIncrementTick+0x218>)
 800ab90:	6013      	str	r3, [r2, #0]
 800ab92:	f000 fbb3 	bl	800b2fc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800ab96:	4b6c      	ldr	r3, [pc, #432]	; (800ad48 <xTaskIncrementTick+0x21c>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	6a3a      	ldr	r2, [r7, #32]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	f0c0 80aa 	bcc.w	800acf6 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aba2:	4b66      	ldr	r3, [pc, #408]	; (800ad3c <xTaskIncrementTick+0x210>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d104      	bne.n	800abb6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abac:	4b66      	ldr	r3, [pc, #408]	; (800ad48 <xTaskIncrementTick+0x21c>)
 800abae:	f04f 32ff 	mov.w	r2, #4294967295
 800abb2:	601a      	str	r2, [r3, #0]
                    break;
 800abb4:	e09f      	b.n	800acf6 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb6:	4b61      	ldr	r3, [pc, #388]	; (800ad3c <xTaskIncrementTick+0x210>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800abc6:	6a3a      	ldr	r2, [r7, #32]
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d203      	bcs.n	800abd6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800abce:	4a5e      	ldr	r2, [pc, #376]	; (800ad48 <xTaskIncrementTick+0x21c>)
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800abd4:	e08f      	b.n	800acf6 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	613b      	str	r3, [r7, #16]
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	69ba      	ldr	r2, [r7, #24]
 800abe2:	68d2      	ldr	r2, [r2, #12]
 800abe4:	609a      	str	r2, [r3, #8]
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	69ba      	ldr	r2, [r7, #24]
 800abec:	6892      	ldr	r2, [r2, #8]
 800abee:	605a      	str	r2, [r3, #4]
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	685a      	ldr	r2, [r3, #4]
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	3304      	adds	r3, #4
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d103      	bne.n	800ac04 <xTaskIncrementTick+0xd8>
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	68da      	ldr	r2, [r3, #12]
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	605a      	str	r2, [r3, #4]
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	2200      	movs	r2, #0
 800ac08:	615a      	str	r2, [r3, #20]
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	1e5a      	subs	r2, r3, #1
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d01e      	beq.n	800ac5a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac20:	60fb      	str	r3, [r7, #12]
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	69ba      	ldr	r2, [r7, #24]
 800ac28:	6a12      	ldr	r2, [r2, #32]
 800ac2a:	609a      	str	r2, [r3, #8]
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	6a1b      	ldr	r3, [r3, #32]
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	69d2      	ldr	r2, [r2, #28]
 800ac34:	605a      	str	r2, [r3, #4]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	685a      	ldr	r2, [r3, #4]
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	3318      	adds	r3, #24
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d103      	bne.n	800ac4a <xTaskIncrementTick+0x11e>
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	6a1a      	ldr	r2, [r3, #32]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	605a      	str	r2, [r3, #4]
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	629a      	str	r2, [r3, #40]	; 0x28
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	1e5a      	subs	r2, r3, #1
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f003 fa21 	bl	800e0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac66:	2201      	movs	r2, #1
 800ac68:	409a      	lsls	r2, r3
 800ac6a:	4b38      	ldr	r3, [pc, #224]	; (800ad4c <xTaskIncrementTick+0x220>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	4a36      	ldr	r2, [pc, #216]	; (800ad4c <xTaskIncrementTick+0x220>)
 800ac72:	6013      	str	r3, [r2, #0]
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac78:	4935      	ldr	r1, [pc, #212]	; (800ad50 <xTaskIncrementTick+0x224>)
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4413      	add	r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	440b      	add	r3, r1
 800ac84:	3304      	adds	r3, #4
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	60bb      	str	r3, [r7, #8]
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	609a      	str	r2, [r3, #8]
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	689a      	ldr	r2, [r3, #8]
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	60da      	str	r2, [r3, #12]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	69ba      	ldr	r2, [r7, #24]
 800ac9e:	3204      	adds	r2, #4
 800aca0:	605a      	str	r2, [r3, #4]
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	1d1a      	adds	r2, r3, #4
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	609a      	str	r2, [r3, #8]
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acae:	4613      	mov	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4413      	add	r3, r2
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	4a26      	ldr	r2, [pc, #152]	; (800ad50 <xTaskIncrementTick+0x224>)
 800acb8:	441a      	add	r2, r3
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	615a      	str	r2, [r3, #20]
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc2:	4923      	ldr	r1, [pc, #140]	; (800ad50 <xTaskIncrementTick+0x224>)
 800acc4:	4613      	mov	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	440b      	add	r3, r1
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	1c59      	adds	r1, r3, #1
 800acd2:	481f      	ldr	r0, [pc, #124]	; (800ad50 <xTaskIncrementTick+0x224>)
 800acd4:	4613      	mov	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4413      	add	r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	4403      	add	r3, r0
 800acde:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace4:	4b1b      	ldr	r3, [pc, #108]	; (800ad54 <xTaskIncrementTick+0x228>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acea:	429a      	cmp	r2, r3
 800acec:	f67f af59 	bls.w	800aba2 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800acf0:	2301      	movs	r3, #1
 800acf2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acf4:	e755      	b.n	800aba2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800acf6:	4b17      	ldr	r3, [pc, #92]	; (800ad54 <xTaskIncrementTick+0x228>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acfc:	4914      	ldr	r1, [pc, #80]	; (800ad50 <xTaskIncrementTick+0x224>)
 800acfe:	4613      	mov	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	4413      	add	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	440b      	add	r3, r1
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d901      	bls.n	800ad12 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800ad12:	4b11      	ldr	r3, [pc, #68]	; (800ad58 <xTaskIncrementTick+0x22c>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d007      	beq.n	800ad2a <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad1e:	e004      	b.n	800ad2a <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800ad20:	4b0e      	ldr	r3, [pc, #56]	; (800ad5c <xTaskIncrementTick+0x230>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3301      	adds	r3, #1
 800ad26:	4a0d      	ldr	r2, [pc, #52]	; (800ad5c <xTaskIncrementTick+0x230>)
 800ad28:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3728      	adds	r7, #40	; 0x28
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	20000c44 	.word	0x20000c44
 800ad38:	20000c20 	.word	0x20000c20
 800ad3c:	20000bd4 	.word	0x20000bd4
 800ad40:	20000bd8 	.word	0x20000bd8
 800ad44:	20000c34 	.word	0x20000c34
 800ad48:	20000c3c 	.word	0x20000c3c
 800ad4c:	20000c24 	.word	0x20000c24
 800ad50:	20000b48 	.word	0x20000b48
 800ad54:	20000b44 	.word	0x20000b44
 800ad58:	20000c30 	.word	0x20000c30
 800ad5c:	20000c2c 	.word	0x20000c2c

0800ad60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad66:	4b2d      	ldr	r3, [pc, #180]	; (800ae1c <vTaskSwitchContext+0xbc>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d003      	beq.n	800ad76 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800ad6e:	4b2c      	ldr	r3, [pc, #176]	; (800ae20 <vTaskSwitchContext+0xc0>)
 800ad70:	2201      	movs	r2, #1
 800ad72:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800ad74:	e04d      	b.n	800ae12 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800ad76:	4b2a      	ldr	r3, [pc, #168]	; (800ae20 <vTaskSwitchContext+0xc0>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad7c:	4b29      	ldr	r3, [pc, #164]	; (800ae24 <vTaskSwitchContext+0xc4>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	fab3 f383 	clz	r3, r3
 800ad88:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800ad8a:	7afb      	ldrb	r3, [r7, #11]
 800ad8c:	f1c3 031f 	rsb	r3, r3, #31
 800ad90:	617b      	str	r3, [r7, #20]
 800ad92:	4925      	ldr	r1, [pc, #148]	; (800ae28 <vTaskSwitchContext+0xc8>)
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	4613      	mov	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	440b      	add	r3, r1
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10a      	bne.n	800adbc <vTaskSwitchContext+0x5c>
        __asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	607b      	str	r3, [r7, #4]
    }
 800adb8:	bf00      	nop
 800adba:	e7fe      	b.n	800adba <vTaskSwitchContext+0x5a>
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	4613      	mov	r3, r2
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4a18      	ldr	r2, [pc, #96]	; (800ae28 <vTaskSwitchContext+0xc8>)
 800adc8:	4413      	add	r3, r2
 800adca:	613b      	str	r3, [r7, #16]
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	685a      	ldr	r2, [r3, #4]
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	605a      	str	r2, [r3, #4]
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	685a      	ldr	r2, [r3, #4]
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	3308      	adds	r3, #8
 800adde:	429a      	cmp	r2, r3
 800ade0:	d104      	bne.n	800adec <vTaskSwitchContext+0x8c>
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	605a      	str	r2, [r3, #4]
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	4a0e      	ldr	r2, [pc, #56]	; (800ae2c <vTaskSwitchContext+0xcc>)
 800adf4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800adf6:	4b0d      	ldr	r3, [pc, #52]	; (800ae2c <vTaskSwitchContext+0xcc>)
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	4b0d      	ldr	r3, [pc, #52]	; (800ae30 <vTaskSwitchContext+0xd0>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d102      	bne.n	800ae08 <vTaskSwitchContext+0xa8>
 800ae02:	f003 f8af 	bl	800df64 <SEGGER_SYSVIEW_OnIdle>
}
 800ae06:	e004      	b.n	800ae12 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800ae08:	4b08      	ldr	r3, [pc, #32]	; (800ae2c <vTaskSwitchContext+0xcc>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f003 f907 	bl	800e020 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800ae12:	bf00      	nop
 800ae14:	3718      	adds	r7, #24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	20000c44 	.word	0x20000c44
 800ae20:	20000c30 	.word	0x20000c30
 800ae24:	20000c24 	.word	0x20000c24
 800ae28:	20000b48 	.word	0x20000b48
 800ae2c:	20000b44 	.word	0x20000b44
 800ae30:	20000c40 	.word	0x20000c40

0800ae34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10a      	bne.n	800ae5a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800ae44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	60fb      	str	r3, [r7, #12]
    }
 800ae56:	bf00      	nop
 800ae58:	e7fe      	b.n	800ae58 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae5a:	4b07      	ldr	r3, [pc, #28]	; (800ae78 <vTaskPlaceOnEventList+0x44>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3318      	adds	r3, #24
 800ae60:	4619      	mov	r1, r3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7fe fba3 	bl	80095ae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae68:	2101      	movs	r1, #1
 800ae6a:	6838      	ldr	r0, [r7, #0]
 800ae6c:	f000 fe56 	bl	800bb1c <prvAddCurrentTaskToDelayedList>
}
 800ae70:	bf00      	nop
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	20000b44 	.word	0x20000b44

0800ae7c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d10a      	bne.n	800aea4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800ae8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	613b      	str	r3, [r7, #16]
    }
 800aea0:	bf00      	nop
 800aea2:	e7fe      	b.n	800aea2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	617b      	str	r3, [r7, #20]
 800aeaa:	4b17      	ldr	r3, [pc, #92]	; (800af08 <vTaskPlaceOnEventListRestricted+0x8c>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	61da      	str	r2, [r3, #28]
 800aeb2:	4b15      	ldr	r3, [pc, #84]	; (800af08 <vTaskPlaceOnEventListRestricted+0x8c>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	6892      	ldr	r2, [r2, #8]
 800aeba:	621a      	str	r2, [r3, #32]
 800aebc:	4b12      	ldr	r3, [pc, #72]	; (800af08 <vTaskPlaceOnEventListRestricted+0x8c>)
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	3218      	adds	r2, #24
 800aec6:	605a      	str	r2, [r3, #4]
 800aec8:	4b0f      	ldr	r3, [pc, #60]	; (800af08 <vTaskPlaceOnEventListRestricted+0x8c>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f103 0218 	add.w	r2, r3, #24
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	609a      	str	r2, [r3, #8]
 800aed4:	4b0c      	ldr	r3, [pc, #48]	; (800af08 <vTaskPlaceOnEventListRestricted+0x8c>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	629a      	str	r2, [r3, #40]	; 0x28
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	1c5a      	adds	r2, r3, #1
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d002      	beq.n	800aef2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800aeec:	f04f 33ff 	mov.w	r3, #4294967295
 800aef0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800aef2:	2024      	movs	r0, #36	; 0x24
 800aef4:	f002 faae 	bl	800d454 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aef8:	6879      	ldr	r1, [r7, #4]
 800aefa:	68b8      	ldr	r0, [r7, #8]
 800aefc:	f000 fe0e 	bl	800bb1c <prvAddCurrentTaskToDelayedList>
    }
 800af00:	bf00      	nop
 800af02:	3718      	adds	r7, #24
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	20000b44 	.word	0x20000b44

0800af0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08a      	sub	sp, #40	; 0x28
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10a      	bne.n	800af38 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800af22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	60fb      	str	r3, [r7, #12]
    }
 800af34:	bf00      	nop
 800af36:	e7fe      	b.n	800af36 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800af38:	6a3b      	ldr	r3, [r7, #32]
 800af3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af3c:	61fb      	str	r3, [r7, #28]
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	69db      	ldr	r3, [r3, #28]
 800af42:	6a3a      	ldr	r2, [r7, #32]
 800af44:	6a12      	ldr	r2, [r2, #32]
 800af46:	609a      	str	r2, [r3, #8]
 800af48:	6a3b      	ldr	r3, [r7, #32]
 800af4a:	6a1b      	ldr	r3, [r3, #32]
 800af4c:	6a3a      	ldr	r2, [r7, #32]
 800af4e:	69d2      	ldr	r2, [r2, #28]
 800af50:	605a      	str	r2, [r3, #4]
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	3318      	adds	r3, #24
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d103      	bne.n	800af66 <xTaskRemoveFromEventList+0x5a>
 800af5e:	6a3b      	ldr	r3, [r7, #32]
 800af60:	6a1a      	ldr	r2, [r3, #32]
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	605a      	str	r2, [r3, #4]
 800af66:	6a3b      	ldr	r3, [r7, #32]
 800af68:	2200      	movs	r2, #0
 800af6a:	629a      	str	r2, [r3, #40]	; 0x28
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	1e5a      	subs	r2, r3, #1
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af76:	4b4b      	ldr	r3, [pc, #300]	; (800b0a4 <xTaskRemoveFromEventList+0x198>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d162      	bne.n	800b044 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800af7e:	6a3b      	ldr	r3, [r7, #32]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	617b      	str	r3, [r7, #20]
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	6a3a      	ldr	r2, [r7, #32]
 800af8a:	68d2      	ldr	r2, [r2, #12]
 800af8c:	609a      	str	r2, [r3, #8]
 800af8e:	6a3b      	ldr	r3, [r7, #32]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	6a3a      	ldr	r2, [r7, #32]
 800af94:	6892      	ldr	r2, [r2, #8]
 800af96:	605a      	str	r2, [r3, #4]
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	3304      	adds	r3, #4
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d103      	bne.n	800afac <xTaskRemoveFromEventList+0xa0>
 800afa4:	6a3b      	ldr	r3, [r7, #32]
 800afa6:	68da      	ldr	r2, [r3, #12]
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	605a      	str	r2, [r3, #4]
 800afac:	6a3b      	ldr	r3, [r7, #32]
 800afae:	2200      	movs	r2, #0
 800afb0:	615a      	str	r2, [r3, #20]
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	1e5a      	subs	r2, r3, #1
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800afbc:	6a3b      	ldr	r3, [r7, #32]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f003 f870 	bl	800e0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800afc4:	6a3b      	ldr	r3, [r7, #32]
 800afc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc8:	2201      	movs	r2, #1
 800afca:	409a      	lsls	r2, r3
 800afcc:	4b36      	ldr	r3, [pc, #216]	; (800b0a8 <xTaskRemoveFromEventList+0x19c>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	4a35      	ldr	r2, [pc, #212]	; (800b0a8 <xTaskRemoveFromEventList+0x19c>)
 800afd4:	6013      	str	r3, [r2, #0]
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afda:	4934      	ldr	r1, [pc, #208]	; (800b0ac <xTaskRemoveFromEventList+0x1a0>)
 800afdc:	4613      	mov	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	440b      	add	r3, r1
 800afe6:	3304      	adds	r3, #4
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	613b      	str	r3, [r7, #16]
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	693a      	ldr	r2, [r7, #16]
 800aff0:	609a      	str	r2, [r3, #8]
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	689a      	ldr	r2, [r3, #8]
 800aff6:	6a3b      	ldr	r3, [r7, #32]
 800aff8:	60da      	str	r2, [r3, #12]
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	6a3a      	ldr	r2, [r7, #32]
 800b000:	3204      	adds	r2, #4
 800b002:	605a      	str	r2, [r3, #4]
 800b004:	6a3b      	ldr	r3, [r7, #32]
 800b006:	1d1a      	adds	r2, r3, #4
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	609a      	str	r2, [r3, #8]
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b010:	4613      	mov	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4a24      	ldr	r2, [pc, #144]	; (800b0ac <xTaskRemoveFromEventList+0x1a0>)
 800b01a:	441a      	add	r2, r3
 800b01c:	6a3b      	ldr	r3, [r7, #32]
 800b01e:	615a      	str	r2, [r3, #20]
 800b020:	6a3b      	ldr	r3, [r7, #32]
 800b022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b024:	4921      	ldr	r1, [pc, #132]	; (800b0ac <xTaskRemoveFromEventList+0x1a0>)
 800b026:	4613      	mov	r3, r2
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	4413      	add	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	440b      	add	r3, r1
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	1c59      	adds	r1, r3, #1
 800b034:	481d      	ldr	r0, [pc, #116]	; (800b0ac <xTaskRemoveFromEventList+0x1a0>)
 800b036:	4613      	mov	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4413      	add	r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	4403      	add	r3, r0
 800b040:	6019      	str	r1, [r3, #0]
 800b042:	e01b      	b.n	800b07c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b044:	4b1a      	ldr	r3, [pc, #104]	; (800b0b0 <xTaskRemoveFromEventList+0x1a4>)
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	61bb      	str	r3, [r7, #24]
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	69ba      	ldr	r2, [r7, #24]
 800b04e:	61da      	str	r2, [r3, #28]
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	689a      	ldr	r2, [r3, #8]
 800b054:	6a3b      	ldr	r3, [r7, #32]
 800b056:	621a      	str	r2, [r3, #32]
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	6a3a      	ldr	r2, [r7, #32]
 800b05e:	3218      	adds	r2, #24
 800b060:	605a      	str	r2, [r3, #4]
 800b062:	6a3b      	ldr	r3, [r7, #32]
 800b064:	f103 0218 	add.w	r2, r3, #24
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	609a      	str	r2, [r3, #8]
 800b06c:	6a3b      	ldr	r3, [r7, #32]
 800b06e:	4a10      	ldr	r2, [pc, #64]	; (800b0b0 <xTaskRemoveFromEventList+0x1a4>)
 800b070:	629a      	str	r2, [r3, #40]	; 0x28
 800b072:	4b0f      	ldr	r3, [pc, #60]	; (800b0b0 <xTaskRemoveFromEventList+0x1a4>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	3301      	adds	r3, #1
 800b078:	4a0d      	ldr	r2, [pc, #52]	; (800b0b0 <xTaskRemoveFromEventList+0x1a4>)
 800b07a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b07c:	6a3b      	ldr	r3, [r7, #32]
 800b07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b080:	4b0c      	ldr	r3, [pc, #48]	; (800b0b4 <xTaskRemoveFromEventList+0x1a8>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b086:	429a      	cmp	r2, r3
 800b088:	d905      	bls.n	800b096 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800b08a:	2301      	movs	r3, #1
 800b08c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800b08e:	4b0a      	ldr	r3, [pc, #40]	; (800b0b8 <xTaskRemoveFromEventList+0x1ac>)
 800b090:	2201      	movs	r2, #1
 800b092:	601a      	str	r2, [r3, #0]
 800b094:	e001      	b.n	800b09a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800b096:	2300      	movs	r3, #0
 800b098:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3728      	adds	r7, #40	; 0x28
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	20000c44 	.word	0x20000c44
 800b0a8:	20000c24 	.word	0x20000c24
 800b0ac:	20000b48 	.word	0x20000b48
 800b0b0:	20000bdc 	.word	0x20000bdc
 800b0b4:	20000b44 	.word	0x20000b44
 800b0b8:	20000c30 	.word	0x20000c30

0800b0bc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b0c4:	4b06      	ldr	r3, [pc, #24]	; (800b0e0 <vTaskInternalSetTimeOutState+0x24>)
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800b0cc:	4b05      	ldr	r3, [pc, #20]	; (800b0e4 <vTaskInternalSetTimeOutState+0x28>)
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	605a      	str	r2, [r3, #4]
}
 800b0d4:	bf00      	nop
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	20000c34 	.word	0x20000c34
 800b0e4:	20000c20 	.word	0x20000c20

0800b0e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b088      	sub	sp, #32
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10a      	bne.n	800b10e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800b0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fc:	f383 8811 	msr	BASEPRI, r3
 800b100:	f3bf 8f6f 	isb	sy
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	613b      	str	r3, [r7, #16]
    }
 800b10a:	bf00      	nop
 800b10c:	e7fe      	b.n	800b10c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10a      	bne.n	800b12a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800b114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	60fb      	str	r3, [r7, #12]
    }
 800b126:	bf00      	nop
 800b128:	e7fe      	b.n	800b128 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800b12a:	f001 f9d5 	bl	800c4d8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800b12e:	4b1f      	ldr	r3, [pc, #124]	; (800b1ac <xTaskCheckForTimeOut+0xc4>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	69ba      	ldr	r2, [r7, #24]
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b146:	d102      	bne.n	800b14e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800b148:	2300      	movs	r3, #0
 800b14a:	61fb      	str	r3, [r7, #28]
 800b14c:	e026      	b.n	800b19c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	4b17      	ldr	r3, [pc, #92]	; (800b1b0 <xTaskCheckForTimeOut+0xc8>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	429a      	cmp	r2, r3
 800b158:	d00a      	beq.n	800b170 <xTaskCheckForTimeOut+0x88>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	69ba      	ldr	r2, [r7, #24]
 800b160:	429a      	cmp	r2, r3
 800b162:	d305      	bcc.n	800b170 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800b164:	2301      	movs	r3, #1
 800b166:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	2200      	movs	r2, #0
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	e015      	b.n	800b19c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	429a      	cmp	r2, r3
 800b178:	d20b      	bcs.n	800b192 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	1ad2      	subs	r2, r2, r3
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7ff ff98 	bl	800b0bc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800b18c:	2300      	movs	r3, #0
 800b18e:	61fb      	str	r3, [r7, #28]
 800b190:	e004      	b.n	800b19c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	2200      	movs	r2, #0
 800b196:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800b198:	2301      	movs	r3, #1
 800b19a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800b19c:	f001 f9cc 	bl	800c538 <vPortExitCritical>

    return xReturn;
 800b1a0:	69fb      	ldr	r3, [r7, #28]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3720      	adds	r7, #32
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20000c20 	.word	0x20000c20
 800b1b0:	20000c34 	.word	0x20000c34

0800b1b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800b1b8:	4b03      	ldr	r3, [pc, #12]	; (800b1c8 <vTaskMissedYield+0x14>)
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	601a      	str	r2, [r3, #0]
}
 800b1be:	bf00      	nop
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr
 800b1c8:	20000c30 	.word	0x20000c30

0800b1cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800b1d4:	f000 f854 	bl	800b280 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b1d8:	4b07      	ldr	r3, [pc, #28]	; (800b1f8 <prvIdleTask+0x2c>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d907      	bls.n	800b1f0 <prvIdleTask+0x24>
            {
                taskYIELD();
 800b1e0:	4b06      	ldr	r3, [pc, #24]	; (800b1fc <prvIdleTask+0x30>)
 800b1e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1e6:	601a      	str	r2, [r3, #0]
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 800b1f0:	f7f6 f8fa 	bl	80013e8 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 800b1f4:	e7ee      	b.n	800b1d4 <prvIdleTask+0x8>
 800b1f6:	bf00      	nop
 800b1f8:	20000b48 	.word	0x20000b48
 800b1fc:	e000ed04 	.word	0xe000ed04

0800b200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b206:	2300      	movs	r3, #0
 800b208:	607b      	str	r3, [r7, #4]
 800b20a:	e00c      	b.n	800b226 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	4613      	mov	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	4413      	add	r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4a12      	ldr	r2, [pc, #72]	; (800b260 <prvInitialiseTaskLists+0x60>)
 800b218:	4413      	add	r3, r2
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fe f976 	bl	800950c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	3301      	adds	r3, #1
 800b224:	607b      	str	r3, [r7, #4]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b04      	cmp	r3, #4
 800b22a:	d9ef      	bls.n	800b20c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800b22c:	480d      	ldr	r0, [pc, #52]	; (800b264 <prvInitialiseTaskLists+0x64>)
 800b22e:	f7fe f96d 	bl	800950c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800b232:	480d      	ldr	r0, [pc, #52]	; (800b268 <prvInitialiseTaskLists+0x68>)
 800b234:	f7fe f96a 	bl	800950c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800b238:	480c      	ldr	r0, [pc, #48]	; (800b26c <prvInitialiseTaskLists+0x6c>)
 800b23a:	f7fe f967 	bl	800950c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800b23e:	480c      	ldr	r0, [pc, #48]	; (800b270 <prvInitialiseTaskLists+0x70>)
 800b240:	f7fe f964 	bl	800950c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800b244:	480b      	ldr	r0, [pc, #44]	; (800b274 <prvInitialiseTaskLists+0x74>)
 800b246:	f7fe f961 	bl	800950c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800b24a:	4b0b      	ldr	r3, [pc, #44]	; (800b278 <prvInitialiseTaskLists+0x78>)
 800b24c:	4a05      	ldr	r2, [pc, #20]	; (800b264 <prvInitialiseTaskLists+0x64>)
 800b24e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b250:	4b0a      	ldr	r3, [pc, #40]	; (800b27c <prvInitialiseTaskLists+0x7c>)
 800b252:	4a05      	ldr	r2, [pc, #20]	; (800b268 <prvInitialiseTaskLists+0x68>)
 800b254:	601a      	str	r2, [r3, #0]
}
 800b256:	bf00      	nop
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	20000b48 	.word	0x20000b48
 800b264:	20000bac 	.word	0x20000bac
 800b268:	20000bc0 	.word	0x20000bc0
 800b26c:	20000bdc 	.word	0x20000bdc
 800b270:	20000bf0 	.word	0x20000bf0
 800b274:	20000c08 	.word	0x20000c08
 800b278:	20000bd4 	.word	0x20000bd4
 800b27c:	20000bd8 	.word	0x20000bd8

0800b280 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b286:	e019      	b.n	800b2bc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800b288:	f001 f926 	bl	800c4d8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b28c:	4b10      	ldr	r3, [pc, #64]	; (800b2d0 <prvCheckTasksWaitingTermination+0x50>)
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3304      	adds	r3, #4
 800b298:	4618      	mov	r0, r3
 800b29a:	f7fe f9c1 	bl	8009620 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800b29e:	4b0d      	ldr	r3, [pc, #52]	; (800b2d4 <prvCheckTasksWaitingTermination+0x54>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	4a0b      	ldr	r2, [pc, #44]	; (800b2d4 <prvCheckTasksWaitingTermination+0x54>)
 800b2a6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800b2a8:	4b0b      	ldr	r3, [pc, #44]	; (800b2d8 <prvCheckTasksWaitingTermination+0x58>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	4a0a      	ldr	r2, [pc, #40]	; (800b2d8 <prvCheckTasksWaitingTermination+0x58>)
 800b2b0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800b2b2:	f001 f941 	bl	800c538 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f810 	bl	800b2dc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2bc:	4b06      	ldr	r3, [pc, #24]	; (800b2d8 <prvCheckTasksWaitingTermination+0x58>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1e1      	bne.n	800b288 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800b2c4:	bf00      	nop
 800b2c6:	bf00      	nop
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20000bf0 	.word	0x20000bf0
 800b2d4:	20000c1c 	.word	0x20000c1c
 800b2d8:	20000c04 	.word	0x20000c04

0800b2dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f001 fad9 	bl	800c8a0 <vPortFree>
            vPortFree( pxTCB );
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f001 fad6 	bl	800c8a0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b300:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <prvResetNextTaskUnblockTime+0x30>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d104      	bne.n	800b314 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800b30a:	4b09      	ldr	r3, [pc, #36]	; (800b330 <prvResetNextTaskUnblockTime+0x34>)
 800b30c:	f04f 32ff 	mov.w	r2, #4294967295
 800b310:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800b312:	e005      	b.n	800b320 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b314:	4b05      	ldr	r3, [pc, #20]	; (800b32c <prvResetNextTaskUnblockTime+0x30>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a04      	ldr	r2, [pc, #16]	; (800b330 <prvResetNextTaskUnblockTime+0x34>)
 800b31e:	6013      	str	r3, [r2, #0]
}
 800b320:	bf00      	nop
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	20000bd4 	.word	0x20000bd4
 800b330:	20000c3c 	.word	0x20000c3c

0800b334 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800b33a:	4b0b      	ldr	r3, [pc, #44]	; (800b368 <xTaskGetSchedulerState+0x34>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d102      	bne.n	800b348 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800b342:	2301      	movs	r3, #1
 800b344:	607b      	str	r3, [r7, #4]
 800b346:	e008      	b.n	800b35a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b348:	4b08      	ldr	r3, [pc, #32]	; (800b36c <xTaskGetSchedulerState+0x38>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d102      	bne.n	800b356 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800b350:	2302      	movs	r3, #2
 800b352:	607b      	str	r3, [r7, #4]
 800b354:	e001      	b.n	800b35a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800b356:	2300      	movs	r3, #0
 800b358:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800b35a:	687b      	ldr	r3, [r7, #4]
    }
 800b35c:	4618      	mov	r0, r3
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr
 800b368:	20000c28 	.word	0x20000c28
 800b36c:	20000c44 	.word	0x20000c44

0800b370 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800b370:	b580      	push	{r7, lr}
 800b372:	b088      	sub	sp, #32
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800b37c:	2300      	movs	r3, #0
 800b37e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	f000 8095 	beq.w	800b4b2 <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800b388:	4b4c      	ldr	r3, [pc, #304]	; (800b4bc <xTaskPriorityDisinherit+0x14c>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	69ba      	ldr	r2, [r7, #24]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d00a      	beq.n	800b3a8 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	613b      	str	r3, [r7, #16]
    }
 800b3a4:	bf00      	nop
 800b3a6:	e7fe      	b.n	800b3a6 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10a      	bne.n	800b3c6 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	60fb      	str	r3, [r7, #12]
    }
 800b3c2:	bf00      	nop
 800b3c4:	e7fe      	b.n	800b3c4 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ca:	1e5a      	subs	r2, r3, #1
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d06a      	beq.n	800b4b2 <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d166      	bne.n	800b4b2 <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	3304      	adds	r3, #4
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7fe f919 	bl	8009620 <uxListRemove>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10a      	bne.n	800b40a <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b3fe:	43da      	mvns	r2, r3
 800b400:	4b2f      	ldr	r3, [pc, #188]	; (800b4c0 <xTaskPriorityDisinherit+0x150>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4013      	ands	r3, r2
 800b406:	4a2e      	ldr	r2, [pc, #184]	; (800b4c0 <xTaskPriorityDisinherit+0x150>)
 800b408:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4619      	mov	r1, r3
 800b40e:	204a      	movs	r0, #74	; 0x4a
 800b410:	f002 f83e 	bl	800d490 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b418:	69bb      	ldr	r3, [r7, #24]
 800b41a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	f1c3 0205 	rsb	r2, r3, #5
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f002 fe3a 	bl	800e0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b434:	2201      	movs	r2, #1
 800b436:	409a      	lsls	r2, r3
 800b438:	4b21      	ldr	r3, [pc, #132]	; (800b4c0 <xTaskPriorityDisinherit+0x150>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	4a20      	ldr	r2, [pc, #128]	; (800b4c0 <xTaskPriorityDisinherit+0x150>)
 800b440:	6013      	str	r3, [r2, #0]
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b446:	491f      	ldr	r1, [pc, #124]	; (800b4c4 <xTaskPriorityDisinherit+0x154>)
 800b448:	4613      	mov	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	4413      	add	r3, r2
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	440b      	add	r3, r1
 800b452:	3304      	adds	r3, #4
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	617b      	str	r3, [r7, #20]
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	697a      	ldr	r2, [r7, #20]
 800b45c:	609a      	str	r2, [r3, #8]
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	689a      	ldr	r2, [r3, #8]
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	60da      	str	r2, [r3, #12]
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	69ba      	ldr	r2, [r7, #24]
 800b46c:	3204      	adds	r2, #4
 800b46e:	605a      	str	r2, [r3, #4]
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	1d1a      	adds	r2, r3, #4
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	609a      	str	r2, [r3, #8]
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47c:	4613      	mov	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4413      	add	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4a0f      	ldr	r2, [pc, #60]	; (800b4c4 <xTaskPriorityDisinherit+0x154>)
 800b486:	441a      	add	r2, r3
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	615a      	str	r2, [r3, #20]
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b490:	490c      	ldr	r1, [pc, #48]	; (800b4c4 <xTaskPriorityDisinherit+0x154>)
 800b492:	4613      	mov	r3, r2
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	4413      	add	r3, r2
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	440b      	add	r3, r1
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	1c59      	adds	r1, r3, #1
 800b4a0:	4808      	ldr	r0, [pc, #32]	; (800b4c4 <xTaskPriorityDisinherit+0x154>)
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	4413      	add	r3, r2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	4403      	add	r3, r0
 800b4ac:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b4b2:	69fb      	ldr	r3, [r7, #28]
    }
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3720      	adds	r7, #32
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	20000b44 	.word	0x20000b44
 800b4c0:	20000c24 	.word	0x20000c24
 800b4c4:	20000b48 	.word	0x20000b48

0800b4c8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b088      	sub	sp, #32
 800b4cc:	af02      	add	r7, sp, #8
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
 800b4d4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00a      	beq.n	800b4f2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800b4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e0:	f383 8811 	msr	BASEPRI, r3
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	613b      	str	r3, [r7, #16]
    }
 800b4ee:	bf00      	nop
 800b4f0:	e7fe      	b.n	800b4f0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800b4f2:	f000 fff1 	bl	800c4d8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800b4f6:	4b36      	ldr	r3, [pc, #216]	; (800b5d0 <xTaskGenericNotifyWait+0x108>)
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	3354      	adds	r3, #84	; 0x54
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	b2db      	uxtb	r3, r3
 800b504:	2b02      	cmp	r3, #2
 800b506:	d022      	beq.n	800b54e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800b508:	4b31      	ldr	r3, [pc, #196]	; (800b5d0 <xTaskGenericNotifyWait+0x108>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	3214      	adds	r2, #20
 800b510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b514:	68ba      	ldr	r2, [r7, #8]
 800b516:	43d2      	mvns	r2, r2
 800b518:	4011      	ands	r1, r2
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	3214      	adds	r2, #20
 800b51e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800b522:	4b2b      	ldr	r3, [pc, #172]	; (800b5d0 <xTaskGenericNotifyWait+0x108>)
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	4413      	add	r3, r2
 800b52a:	3354      	adds	r3, #84	; 0x54
 800b52c:	2201      	movs	r2, #1
 800b52e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00b      	beq.n	800b54e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b536:	2101      	movs	r1, #1
 800b538:	6a38      	ldr	r0, [r7, #32]
 800b53a:	f000 faef 	bl	800bb1c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800b53e:	4b25      	ldr	r3, [pc, #148]	; (800b5d4 <xTaskGenericNotifyWait+0x10c>)
 800b540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b544:	601a      	str	r2, [r3, #0]
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b54e:	f000 fff3 	bl	800c538 <vPortExitCritical>

        taskENTER_CRITICAL();
 800b552:	f000 ffc1 	bl	800c4d8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	6a3b      	ldr	r3, [r7, #32]
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	4613      	mov	r3, r2
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	68b9      	ldr	r1, [r7, #8]
 800b562:	2040      	movs	r0, #64	; 0x40
 800b564:	f002 f8a0 	bl	800d6a8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d007      	beq.n	800b57e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800b56e:	4b18      	ldr	r3, [pc, #96]	; (800b5d0 <xTaskGenericNotifyWait+0x108>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	3214      	adds	r2, #20
 800b576:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800b57e:	4b14      	ldr	r3, [pc, #80]	; (800b5d0 <xTaskGenericNotifyWait+0x108>)
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	4413      	add	r3, r2
 800b586:	3354      	adds	r3, #84	; 0x54
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	d002      	beq.n	800b596 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800b590:	2300      	movs	r3, #0
 800b592:	617b      	str	r3, [r7, #20]
 800b594:	e00e      	b.n	800b5b4 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800b596:	4b0e      	ldr	r3, [pc, #56]	; (800b5d0 <xTaskGenericNotifyWait+0x108>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	3214      	adds	r2, #20
 800b59e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	43d2      	mvns	r2, r2
 800b5a6:	4011      	ands	r1, r2
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	3214      	adds	r2, #20
 800b5ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800b5b4:	4b06      	ldr	r3, [pc, #24]	; (800b5d0 <xTaskGenericNotifyWait+0x108>)
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	3354      	adds	r3, #84	; 0x54
 800b5be:	2200      	movs	r2, #0
 800b5c0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800b5c2:	f000 ffb9 	bl	800c538 <vPortExitCritical>

        return xReturn;
 800b5c6:	697b      	ldr	r3, [r7, #20]
    }
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	20000b44 	.word	0x20000b44
 800b5d4:	e000ed04 	.word	0xe000ed04

0800b5d8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b090      	sub	sp, #64	; 0x40
 800b5dc:	af02      	add	r7, sp, #8
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00a      	beq.n	800b606 <xTaskGenericNotify+0x2e>
        __asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	623b      	str	r3, [r7, #32]
    }
 800b602:	bf00      	nop
 800b604:	e7fe      	b.n	800b604 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10a      	bne.n	800b622 <xTaskGenericNotify+0x4a>
        __asm volatile
 800b60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b610:	f383 8811 	msr	BASEPRI, r3
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	61fb      	str	r3, [r7, #28]
    }
 800b61e:	bf00      	nop
 800b620:	e7fe      	b.n	800b620 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800b626:	f000 ff57 	bl	800c4d8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800b62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d006      	beq.n	800b63e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800b630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	3214      	adds	r2, #20
 800b636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b63c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800b63e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	4413      	add	r3, r2
 800b644:	3354      	adds	r3, #84	; 0x54
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800b64c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	4413      	add	r3, r2
 800b652:	3354      	adds	r3, #84	; 0x54
 800b654:	2202      	movs	r2, #2
 800b656:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800b658:	78fb      	ldrb	r3, [r7, #3]
 800b65a:	2b04      	cmp	r3, #4
 800b65c:	d83b      	bhi.n	800b6d6 <xTaskGenericNotify+0xfe>
 800b65e:	a201      	add	r2, pc, #4	; (adr r2, 800b664 <xTaskGenericNotify+0x8c>)
 800b660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b664:	0800b6f5 	.word	0x0800b6f5
 800b668:	0800b679 	.word	0x0800b679
 800b66c:	0800b695 	.word	0x0800b695
 800b670:	0800b6ad 	.word	0x0800b6ad
 800b674:	0800b6bb 	.word	0x0800b6bb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800b678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	3214      	adds	r2, #20
 800b67e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	ea42 0103 	orr.w	r1, r2, r3
 800b688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	3214      	adds	r2, #20
 800b68e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b692:	e032      	b.n	800b6fa <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800b694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	3214      	adds	r2, #20
 800b69a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b69e:	1c59      	adds	r1, r3, #1
 800b6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	3214      	adds	r2, #20
 800b6a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b6aa:	e026      	b.n	800b6fa <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	3214      	adds	r2, #20
 800b6b2:	6879      	ldr	r1, [r7, #4]
 800b6b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b6b8:	e01f      	b.n	800b6fa <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b6ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d006      	beq.n	800b6d0 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	3214      	adds	r2, #20
 800b6c8:	6879      	ldr	r1, [r7, #4]
 800b6ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800b6ce:	e014      	b.n	800b6fa <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 800b6d4:	e011      	b.n	800b6fa <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800b6d6:	4b55      	ldr	r3, [pc, #340]	; (800b82c <xTaskGenericNotify+0x254>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00c      	beq.n	800b6f8 <xTaskGenericNotify+0x120>
        __asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	61bb      	str	r3, [r7, #24]
    }
 800b6f0:	bf00      	nop
 800b6f2:	e7fe      	b.n	800b6f2 <xTaskGenericNotify+0x11a>
                    break;
 800b6f4:	bf00      	nop
 800b6f6:	e000      	b.n	800b6fa <xTaskGenericNotify+0x122>

                    break;
 800b6f8:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f002 fd73 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 800b702:	4601      	mov	r1, r0
 800b704:	78fa      	ldrb	r2, [r7, #3]
 800b706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	4613      	mov	r3, r2
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	203e      	movs	r0, #62	; 0x3e
 800b710:	f001 ffca 	bl	800d6a8 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d17f      	bne.n	800b81c <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71e:	695b      	ldr	r3, [r3, #20]
 800b720:	62bb      	str	r3, [r7, #40]	; 0x28
 800b722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b728:	68d2      	ldr	r2, [r2, #12]
 800b72a:	609a      	str	r2, [r3, #8]
 800b72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b732:	6892      	ldr	r2, [r2, #8]
 800b734:	605a      	str	r2, [r3, #4]
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	3304      	adds	r3, #4
 800b73e:	429a      	cmp	r2, r3
 800b740:	d103      	bne.n	800b74a <xTaskGenericNotify+0x172>
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	68da      	ldr	r2, [r3, #12]
 800b746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b748:	605a      	str	r2, [r3, #4]
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	2200      	movs	r2, #0
 800b74e:	615a      	str	r2, [r3, #20]
 800b750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	1e5a      	subs	r2, r3, #1
 800b756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b758:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	4618      	mov	r0, r3
 800b75e:	f002 fca1 	bl	800e0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b766:	2201      	movs	r2, #1
 800b768:	409a      	lsls	r2, r3
 800b76a:	4b31      	ldr	r3, [pc, #196]	; (800b830 <xTaskGenericNotify+0x258>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4313      	orrs	r3, r2
 800b770:	4a2f      	ldr	r2, [pc, #188]	; (800b830 <xTaskGenericNotify+0x258>)
 800b772:	6013      	str	r3, [r2, #0]
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b778:	492e      	ldr	r1, [pc, #184]	; (800b834 <xTaskGenericNotify+0x25c>)
 800b77a:	4613      	mov	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4413      	add	r3, r2
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	440b      	add	r3, r1
 800b784:	3304      	adds	r3, #4
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	627b      	str	r3, [r7, #36]	; 0x24
 800b78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b78e:	609a      	str	r2, [r3, #8]
 800b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b792:	689a      	ldr	r2, [r3, #8]
 800b794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b796:	60da      	str	r2, [r3, #12]
 800b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b79e:	3204      	adds	r2, #4
 800b7a0:	605a      	str	r2, [r3, #4]
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	1d1a      	adds	r2, r3, #4
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a8:	609a      	str	r2, [r3, #8]
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	4413      	add	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4a1f      	ldr	r2, [pc, #124]	; (800b834 <xTaskGenericNotify+0x25c>)
 800b7b8:	441a      	add	r2, r3
 800b7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7bc:	615a      	str	r2, [r3, #20]
 800b7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c2:	491c      	ldr	r1, [pc, #112]	; (800b834 <xTaskGenericNotify+0x25c>)
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	4413      	add	r3, r2
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	440b      	add	r3, r1
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	1c59      	adds	r1, r3, #1
 800b7d2:	4818      	ldr	r0, [pc, #96]	; (800b834 <xTaskGenericNotify+0x25c>)
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	4413      	add	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4403      	add	r3, r0
 800b7de:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00a      	beq.n	800b7fe <xTaskGenericNotify+0x226>
        __asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	617b      	str	r3, [r7, #20]
    }
 800b7fa:	bf00      	nop
 800b7fc:	e7fe      	b.n	800b7fc <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b802:	4b0d      	ldr	r3, [pc, #52]	; (800b838 <xTaskGenericNotify+0x260>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b808:	429a      	cmp	r2, r3
 800b80a:	d907      	bls.n	800b81c <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800b80c:	4b0b      	ldr	r3, [pc, #44]	; (800b83c <xTaskGenericNotify+0x264>)
 800b80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b812:	601a      	str	r2, [r3, #0]
 800b814:	f3bf 8f4f 	dsb	sy
 800b818:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b81c:	f000 fe8c 	bl	800c538 <vPortExitCritical>

        return xReturn;
 800b820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800b822:	4618      	mov	r0, r3
 800b824:	3738      	adds	r7, #56	; 0x38
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	20000c20 	.word	0x20000c20
 800b830:	20000c24 	.word	0x20000c24
 800b834:	20000b48 	.word	0x20000b48
 800b838:	20000b44 	.word	0x20000b44
 800b83c:	e000ed04 	.word	0xe000ed04

0800b840 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800b840:	b580      	push	{r7, lr}
 800b842:	b094      	sub	sp, #80	; 0x50
 800b844:	af02      	add	r7, sp, #8
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
 800b84c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800b84e:	2301      	movs	r3, #1
 800b850:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d10a      	bne.n	800b86e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800b858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85c:	f383 8811 	msr	BASEPRI, r3
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800b86a:	bf00      	nop
 800b86c:	e7fe      	b.n	800b86c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00a      	beq.n	800b88a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 800b874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b878:	f383 8811 	msr	BASEPRI, r3
 800b87c:	f3bf 8f6f 	isb	sy
 800b880:	f3bf 8f4f 	dsb	sy
 800b884:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800b886:	bf00      	nop
 800b888:	e7fe      	b.n	800b888 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b88a:	f000 ff0f 	bl	800c6ac <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 800b892:	f3ef 8211 	mrs	r2, BASEPRI
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	623a      	str	r2, [r7, #32]
 800b8a8:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800b8aa:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800b8ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d006      	beq.n	800b8c2 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800b8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	3214      	adds	r2, #20
 800b8ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b8be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8c0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800b8c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	3354      	adds	r3, #84	; 0x54
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800b8d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	3354      	adds	r3, #84	; 0x54
 800b8d8:	2202      	movs	r2, #2
 800b8da:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800b8dc:	78fb      	ldrb	r3, [r7, #3]
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	d83b      	bhi.n	800b95a <xTaskGenericNotifyFromISR+0x11a>
 800b8e2:	a201      	add	r2, pc, #4	; (adr r2, 800b8e8 <xTaskGenericNotifyFromISR+0xa8>)
 800b8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e8:	0800b979 	.word	0x0800b979
 800b8ec:	0800b8fd 	.word	0x0800b8fd
 800b8f0:	0800b919 	.word	0x0800b919
 800b8f4:	0800b931 	.word	0x0800b931
 800b8f8:	0800b93f 	.word	0x0800b93f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800b8fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	3214      	adds	r2, #20
 800b902:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	ea42 0103 	orr.w	r1, r2, r3
 800b90c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b90e:	68ba      	ldr	r2, [r7, #8]
 800b910:	3214      	adds	r2, #20
 800b912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b916:	e032      	b.n	800b97e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800b918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	3214      	adds	r2, #20
 800b91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b922:	1c59      	adds	r1, r3, #1
 800b924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	3214      	adds	r2, #20
 800b92a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b92e:	e026      	b.n	800b97e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800b930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b932:	68ba      	ldr	r2, [r7, #8]
 800b934:	3214      	adds	r2, #20
 800b936:	6879      	ldr	r1, [r7, #4]
 800b938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800b93c:	e01f      	b.n	800b97e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b93e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b942:	2b02      	cmp	r3, #2
 800b944:	d006      	beq.n	800b954 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800b946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	3214      	adds	r2, #20
 800b94c:	6879      	ldr	r1, [r7, #4]
 800b94e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800b952:	e014      	b.n	800b97e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800b954:	2300      	movs	r3, #0
 800b956:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800b958:	e011      	b.n	800b97e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800b95a:	4b69      	ldr	r3, [pc, #420]	; (800bb00 <xTaskGenericNotifyFromISR+0x2c0>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00c      	beq.n	800b97c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	61bb      	str	r3, [r7, #24]
    }
 800b974:	bf00      	nop
 800b976:	e7fe      	b.n	800b976 <xTaskGenericNotifyFromISR+0x136>
                    break;
 800b978:	bf00      	nop
 800b97a:	e000      	b.n	800b97e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800b97c:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800b97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b980:	4618      	mov	r0, r3
 800b982:	f002 fc31 	bl	800e1e8 <SEGGER_SYSVIEW_ShrinkId>
 800b986:	78f9      	ldrb	r1, [r7, #3]
 800b988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b98a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b98c:	9201      	str	r2, [sp, #4]
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	460b      	mov	r3, r1
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	4601      	mov	r1, r0
 800b996:	203f      	movs	r0, #63	; 0x3f
 800b998:	f001 ff18 	bl	800d7cc <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b99c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	f040 80a2 	bne.w	800baea <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b9a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00a      	beq.n	800b9c4 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 800b9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b2:	f383 8811 	msr	BASEPRI, r3
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	617b      	str	r3, [r7, #20]
    }
 800b9c0:	bf00      	nop
 800b9c2:	e7fe      	b.n	800b9c2 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9c4:	4b4f      	ldr	r3, [pc, #316]	; (800bb04 <xTaskGenericNotifyFromISR+0x2c4>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d162      	bne.n	800ba92 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b9cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9ce:	695b      	ldr	r3, [r3, #20]
 800b9d0:	633b      	str	r3, [r7, #48]	; 0x30
 800b9d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9d8:	68d2      	ldr	r2, [r2, #12]
 800b9da:	609a      	str	r2, [r3, #8]
 800b9dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9e2:	6892      	ldr	r2, [r2, #8]
 800b9e4:	605a      	str	r2, [r3, #4]
 800b9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e8:	685a      	ldr	r2, [r3, #4]
 800b9ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d103      	bne.n	800b9fa <xTaskGenericNotifyFromISR+0x1ba>
 800b9f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9f4:	68da      	ldr	r2, [r3, #12]
 800b9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f8:	605a      	str	r2, [r3, #4]
 800b9fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	615a      	str	r2, [r3, #20]
 800ba00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	1e5a      	subs	r2, r3, #1
 800ba06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba08:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800ba0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f002 fb49 	bl	800e0a4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ba12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba16:	2201      	movs	r2, #1
 800ba18:	409a      	lsls	r2, r3
 800ba1a:	4b3b      	ldr	r3, [pc, #236]	; (800bb08 <xTaskGenericNotifyFromISR+0x2c8>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	4a39      	ldr	r2, [pc, #228]	; (800bb08 <xTaskGenericNotifyFromISR+0x2c8>)
 800ba22:	6013      	str	r3, [r2, #0]
 800ba24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba28:	4938      	ldr	r1, [pc, #224]	; (800bb0c <xTaskGenericNotifyFromISR+0x2cc>)
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4413      	add	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	440b      	add	r3, r1
 800ba34:	3304      	adds	r3, #4
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba3e:	609a      	str	r2, [r3, #8]
 800ba40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba42:	689a      	ldr	r2, [r3, #8]
 800ba44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba46:	60da      	str	r2, [r3, #12]
 800ba48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba4e:	3204      	adds	r2, #4
 800ba50:	605a      	str	r2, [r3, #4]
 800ba52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba54:	1d1a      	adds	r2, r3, #4
 800ba56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba58:	609a      	str	r2, [r3, #8]
 800ba5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba5e:	4613      	mov	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4413      	add	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4a29      	ldr	r2, [pc, #164]	; (800bb0c <xTaskGenericNotifyFromISR+0x2cc>)
 800ba68:	441a      	add	r2, r3
 800ba6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba6c:	615a      	str	r2, [r3, #20]
 800ba6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba72:	4926      	ldr	r1, [pc, #152]	; (800bb0c <xTaskGenericNotifyFromISR+0x2cc>)
 800ba74:	4613      	mov	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	4413      	add	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	440b      	add	r3, r1
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	1c59      	adds	r1, r3, #1
 800ba82:	4822      	ldr	r0, [pc, #136]	; (800bb0c <xTaskGenericNotifyFromISR+0x2cc>)
 800ba84:	4613      	mov	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4403      	add	r3, r0
 800ba8e:	6019      	str	r1, [r3, #0]
 800ba90:	e01b      	b.n	800baca <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ba92:	4b1f      	ldr	r3, [pc, #124]	; (800bb10 <xTaskGenericNotifyFromISR+0x2d0>)
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	637b      	str	r3, [r7, #52]	; 0x34
 800ba98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba9c:	61da      	str	r2, [r3, #28]
 800ba9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa0:	689a      	ldr	r2, [r3, #8]
 800baa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baa4:	621a      	str	r2, [r3, #32]
 800baa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800baac:	3218      	adds	r2, #24
 800baae:	605a      	str	r2, [r3, #4]
 800bab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bab2:	f103 0218 	add.w	r2, r3, #24
 800bab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab8:	609a      	str	r2, [r3, #8]
 800baba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800babc:	4a14      	ldr	r2, [pc, #80]	; (800bb10 <xTaskGenericNotifyFromISR+0x2d0>)
 800babe:	629a      	str	r2, [r3, #40]	; 0x28
 800bac0:	4b13      	ldr	r3, [pc, #76]	; (800bb10 <xTaskGenericNotifyFromISR+0x2d0>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	3301      	adds	r3, #1
 800bac6:	4a12      	ldr	r2, [pc, #72]	; (800bb10 <xTaskGenericNotifyFromISR+0x2d0>)
 800bac8:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800baca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bace:	4b11      	ldr	r3, [pc, #68]	; (800bb14 <xTaskGenericNotifyFromISR+0x2d4>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d908      	bls.n	800baea <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800bad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bada:	2b00      	cmp	r3, #0
 800badc:	d002      	beq.n	800bae4 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800bade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bae0:	2201      	movs	r2, #1
 800bae2:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800bae4:	4b0c      	ldr	r3, [pc, #48]	; (800bb18 <xTaskGenericNotifyFromISR+0x2d8>)
 800bae6:	2201      	movs	r2, #1
 800bae8:	601a      	str	r2, [r3, #0]
 800baea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baec:	613b      	str	r3, [r7, #16]
        __asm volatile
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	f383 8811 	msr	BASEPRI, r3
    }
 800baf4:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800baf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800baf8:	4618      	mov	r0, r3
 800bafa:	3748      	adds	r7, #72	; 0x48
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	20000c20 	.word	0x20000c20
 800bb04:	20000c44 	.word	0x20000c44
 800bb08:	20000c24 	.word	0x20000c24
 800bb0c:	20000b48 	.word	0x20000b48
 800bb10:	20000bdc 	.word	0x20000bdc
 800bb14:	20000b44 	.word	0x20000b44
 800bb18:	20000c30 	.word	0x20000c30

0800bb1c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b086      	sub	sp, #24
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800bb26:	4b36      	ldr	r3, [pc, #216]	; (800bc00 <prvAddCurrentTaskToDelayedList+0xe4>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb2c:	4b35      	ldr	r3, [pc, #212]	; (800bc04 <prvAddCurrentTaskToDelayedList+0xe8>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	3304      	adds	r3, #4
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fd fd74 	bl	8009620 <uxListRemove>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d10b      	bne.n	800bb56 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bb3e:	4b31      	ldr	r3, [pc, #196]	; (800bc04 <prvAddCurrentTaskToDelayedList+0xe8>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb44:	2201      	movs	r2, #1
 800bb46:	fa02 f303 	lsl.w	r3, r2, r3
 800bb4a:	43da      	mvns	r2, r3
 800bb4c:	4b2e      	ldr	r3, [pc, #184]	; (800bc08 <prvAddCurrentTaskToDelayedList+0xec>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4013      	ands	r3, r2
 800bb52:	4a2d      	ldr	r2, [pc, #180]	; (800bc08 <prvAddCurrentTaskToDelayedList+0xec>)
 800bb54:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb5c:	d124      	bne.n	800bba8 <prvAddCurrentTaskToDelayedList+0x8c>
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d021      	beq.n	800bba8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb64:	4b29      	ldr	r3, [pc, #164]	; (800bc0c <prvAddCurrentTaskToDelayedList+0xf0>)
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	613b      	str	r3, [r7, #16]
 800bb6a:	4b26      	ldr	r3, [pc, #152]	; (800bc04 <prvAddCurrentTaskToDelayedList+0xe8>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	693a      	ldr	r2, [r7, #16]
 800bb70:	609a      	str	r2, [r3, #8]
 800bb72:	4b24      	ldr	r3, [pc, #144]	; (800bc04 <prvAddCurrentTaskToDelayedList+0xe8>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	6892      	ldr	r2, [r2, #8]
 800bb7a:	60da      	str	r2, [r3, #12]
 800bb7c:	4b21      	ldr	r3, [pc, #132]	; (800bc04 <prvAddCurrentTaskToDelayedList+0xe8>)
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	3204      	adds	r2, #4
 800bb86:	605a      	str	r2, [r3, #4]
 800bb88:	4b1e      	ldr	r3, [pc, #120]	; (800bc04 <prvAddCurrentTaskToDelayedList+0xe8>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	1d1a      	adds	r2, r3, #4
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	609a      	str	r2, [r3, #8]
 800bb92:	4b1c      	ldr	r3, [pc, #112]	; (800bc04 <prvAddCurrentTaskToDelayedList+0xe8>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a1d      	ldr	r2, [pc, #116]	; (800bc0c <prvAddCurrentTaskToDelayedList+0xf0>)
 800bb98:	615a      	str	r2, [r3, #20]
 800bb9a:	4b1c      	ldr	r3, [pc, #112]	; (800bc0c <prvAddCurrentTaskToDelayedList+0xf0>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	4a1a      	ldr	r2, [pc, #104]	; (800bc0c <prvAddCurrentTaskToDelayedList+0xf0>)
 800bba2:	6013      	str	r3, [r2, #0]
 800bba4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800bba6:	e026      	b.n	800bbf6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800bba8:	697a      	ldr	r2, [r7, #20]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4413      	add	r3, r2
 800bbae:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbb0:	4b14      	ldr	r3, [pc, #80]	; (800bc04 <prvAddCurrentTaskToDelayedList+0xe8>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d209      	bcs.n	800bbd4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbc0:	4b13      	ldr	r3, [pc, #76]	; (800bc10 <prvAddCurrentTaskToDelayedList+0xf4>)
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	4b0f      	ldr	r3, [pc, #60]	; (800bc04 <prvAddCurrentTaskToDelayedList+0xe8>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	3304      	adds	r3, #4
 800bbca:	4619      	mov	r1, r3
 800bbcc:	4610      	mov	r0, r2
 800bbce:	f7fd fcee 	bl	80095ae <vListInsert>
}
 800bbd2:	e010      	b.n	800bbf6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbd4:	4b0f      	ldr	r3, [pc, #60]	; (800bc14 <prvAddCurrentTaskToDelayedList+0xf8>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	4b0a      	ldr	r3, [pc, #40]	; (800bc04 <prvAddCurrentTaskToDelayedList+0xe8>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3304      	adds	r3, #4
 800bbde:	4619      	mov	r1, r3
 800bbe0:	4610      	mov	r0, r2
 800bbe2:	f7fd fce4 	bl	80095ae <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800bbe6:	4b0c      	ldr	r3, [pc, #48]	; (800bc18 <prvAddCurrentTaskToDelayedList+0xfc>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d202      	bcs.n	800bbf6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800bbf0:	4a09      	ldr	r2, [pc, #36]	; (800bc18 <prvAddCurrentTaskToDelayedList+0xfc>)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6013      	str	r3, [r2, #0]
}
 800bbf6:	bf00      	nop
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	20000c20 	.word	0x20000c20
 800bc04:	20000b44 	.word	0x20000b44
 800bc08:	20000c24 	.word	0x20000c24
 800bc0c:	20000c08 	.word	0x20000c08
 800bc10:	20000bd8 	.word	0x20000bd8
 800bc14:	20000bd4 	.word	0x20000bd4
 800bc18:	20000c3c 	.word	0x20000c3c

0800bc1c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800bc22:	2300      	movs	r3, #0
 800bc24:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800bc26:	f000 faef 	bl	800c208 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800bc2a:	4b11      	ldr	r3, [pc, #68]	; (800bc70 <xTimerCreateTimerTask+0x54>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00b      	beq.n	800bc4a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800bc32:	4b10      	ldr	r3, [pc, #64]	; (800bc74 <xTimerCreateTimerTask+0x58>)
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	2302      	movs	r3, #2
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bc40:	490d      	ldr	r1, [pc, #52]	; (800bc78 <xTimerCreateTimerTask+0x5c>)
 800bc42:	480e      	ldr	r0, [pc, #56]	; (800bc7c <xTimerCreateTimerTask+0x60>)
 800bc44:	f7fe fab4 	bl	800a1b0 <xTaskCreate>
 800bc48:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d10a      	bne.n	800bc66 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800bc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc54:	f383 8811 	msr	BASEPRI, r3
 800bc58:	f3bf 8f6f 	isb	sy
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	603b      	str	r3, [r7, #0]
    }
 800bc62:	bf00      	nop
 800bc64:	e7fe      	b.n	800bc64 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800bc66:	687b      	ldr	r3, [r7, #4]
    }
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3708      	adds	r7, #8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	20000c78 	.word	0x20000c78
 800bc74:	20000c7c 	.word	0x20000c7c
 800bc78:	080123c8 	.word	0x080123c8
 800bc7c:	0800be75 	.word	0x0800be75

0800bc80 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b088      	sub	sp, #32
 800bc84:	af02      	add	r7, sp, #8
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800bc8e:	202c      	movs	r0, #44	; 0x2c
 800bc90:	f000 fd4c 	bl	800c72c <pvPortMalloc>
 800bc94:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00d      	beq.n	800bcb8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	9301      	str	r3, [sp, #4]
 800bca8:	6a3b      	ldr	r3, [r7, #32]
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	68b9      	ldr	r1, [r7, #8]
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f000 f805 	bl	800bcc2 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800bcb8:	697b      	ldr	r3, [r7, #20]
        }
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3718      	adds	r7, #24
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}

0800bcc2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	b086      	sub	sp, #24
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	60f8      	str	r0, [r7, #12]
 800bcca:	60b9      	str	r1, [r7, #8]
 800bccc:	607a      	str	r2, [r7, #4]
 800bcce:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10a      	bne.n	800bcec <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800bcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcda:	f383 8811 	msr	BASEPRI, r3
 800bcde:	f3bf 8f6f 	isb	sy
 800bce2:	f3bf 8f4f 	dsb	sy
 800bce6:	617b      	str	r3, [r7, #20]
    }
 800bce8:	bf00      	nop
 800bcea:	e7fe      	b.n	800bcea <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800bcec:	f000 fa8c 	bl	800c208 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf8:	68ba      	ldr	r2, [r7, #8]
 800bcfa:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800bd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd04:	6a3a      	ldr	r2, [r7, #32]
 800bd06:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fd fc1d 	bl	800954c <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d008      	beq.n	800bd2a <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800bd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd1e:	f043 0304 	orr.w	r3, r3, #4
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 800bd2a:	bf00      	nop
 800bd2c:	3718      	adds	r7, #24
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
	...

0800bd34 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b08a      	sub	sp, #40	; 0x28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
 800bd40:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800bd42:	2300      	movs	r3, #0
 800bd44:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10a      	bne.n	800bd62 <xTimerGenericCommand+0x2e>
        __asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	623b      	str	r3, [r7, #32]
    }
 800bd5e:	bf00      	nop
 800bd60:	e7fe      	b.n	800bd60 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800bd62:	4b1a      	ldr	r3, [pc, #104]	; (800bdcc <xTimerGenericCommand+0x98>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d02a      	beq.n	800bdc0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2b05      	cmp	r3, #5
 800bd7a:	dc18      	bgt.n	800bdae <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd7c:	f7ff fada 	bl	800b334 <xTaskGetSchedulerState>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d109      	bne.n	800bd9a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd86:	4b11      	ldr	r3, [pc, #68]	; (800bdcc <xTimerGenericCommand+0x98>)
 800bd88:	6818      	ldr	r0, [r3, #0]
 800bd8a:	f107 0114 	add.w	r1, r7, #20
 800bd8e:	2300      	movs	r3, #0
 800bd90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd92:	f7fd fd77 	bl	8009884 <xQueueGenericSend>
 800bd96:	6278      	str	r0, [r7, #36]	; 0x24
 800bd98:	e012      	b.n	800bdc0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd9a:	4b0c      	ldr	r3, [pc, #48]	; (800bdcc <xTimerGenericCommand+0x98>)
 800bd9c:	6818      	ldr	r0, [r3, #0]
 800bd9e:	f107 0114 	add.w	r1, r7, #20
 800bda2:	2300      	movs	r3, #0
 800bda4:	2200      	movs	r2, #0
 800bda6:	f7fd fd6d 	bl	8009884 <xQueueGenericSend>
 800bdaa:	6278      	str	r0, [r7, #36]	; 0x24
 800bdac:	e008      	b.n	800bdc0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bdae:	4b07      	ldr	r3, [pc, #28]	; (800bdcc <xTimerGenericCommand+0x98>)
 800bdb0:	6818      	ldr	r0, [r3, #0]
 800bdb2:	f107 0114 	add.w	r1, r7, #20
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	f7fd fe89 	bl	8009ad0 <xQueueGenericSendFromISR>
 800bdbe:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3728      	adds	r7, #40	; 0x28
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	20000c78 	.word	0x20000c78

0800bdd0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800bddc:	e008      	b.n	800bdf0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	699b      	ldr	r3, [r3, #24]
 800bde2:	68ba      	ldr	r2, [r7, #8]
 800bde4:	4413      	add	r3, r2
 800bde6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6a1b      	ldr	r3, [r3, #32]
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	699a      	ldr	r2, [r3, #24]
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	18d1      	adds	r1, r2, r3
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f000 f8dd 	bl	800bfbc <prvInsertTimerInActiveList>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1ea      	bne.n	800bdde <prvReloadTimer+0xe>
        }
    }
 800be08:	bf00      	nop
 800be0a:	bf00      	nop
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
	...

0800be14 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be1e:	4b14      	ldr	r3, [pc, #80]	; (800be70 <prvProcessExpiredTimer+0x5c>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	3304      	adds	r3, #4
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7fd fbf7 	bl	8009620 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be38:	f003 0304 	and.w	r3, r3, #4
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d005      	beq.n	800be4c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800be40:	683a      	ldr	r2, [r7, #0]
 800be42:	6879      	ldr	r1, [r7, #4]
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f7ff ffc3 	bl	800bdd0 <prvReloadTimer>
 800be4a:	e008      	b.n	800be5e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be52:	f023 0301 	bic.w	r3, r3, #1
 800be56:	b2da      	uxtb	r2, r3
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	4798      	blx	r3
    }
 800be66:	bf00      	nop
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	20000c70 	.word	0x20000c70

0800be74 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be7c:	f107 0308 	add.w	r3, r7, #8
 800be80:	4618      	mov	r0, r3
 800be82:	f000 f857 	bl	800bf34 <prvGetNextExpireTime>
 800be86:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	4619      	mov	r1, r3
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f000 f803 	bl	800be98 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800be92:	f000 f8d5 	bl	800c040 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be96:	e7f1      	b.n	800be7c <prvTimerTask+0x8>

0800be98 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800bea2:	f7fe fd19 	bl	800a8d8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bea6:	f107 0308 	add.w	r3, r7, #8
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 f866 	bl	800bf7c <prvSampleTimeNow>
 800beb0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d130      	bne.n	800bf1a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d10a      	bne.n	800bed4 <prvProcessTimerOrBlockTask+0x3c>
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d806      	bhi.n	800bed4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800bec6:	f7fe fd15 	bl	800a8f4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800beca:	68f9      	ldr	r1, [r7, #12]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff ffa1 	bl	800be14 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800bed2:	e024      	b.n	800bf1e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d008      	beq.n	800beec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800beda:	4b13      	ldr	r3, [pc, #76]	; (800bf28 <prvProcessTimerOrBlockTask+0x90>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <prvProcessTimerOrBlockTask+0x50>
 800bee4:	2301      	movs	r3, #1
 800bee6:	e000      	b.n	800beea <prvProcessTimerOrBlockTask+0x52>
 800bee8:	2300      	movs	r3, #0
 800beea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800beec:	4b0f      	ldr	r3, [pc, #60]	; (800bf2c <prvProcessTimerOrBlockTask+0x94>)
 800beee:	6818      	ldr	r0, [r3, #0]
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	4619      	mov	r1, r3
 800befa:	f7fe f925 	bl	800a148 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800befe:	f7fe fcf9 	bl	800a8f4 <xTaskResumeAll>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10a      	bne.n	800bf1e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800bf08:	4b09      	ldr	r3, [pc, #36]	; (800bf30 <prvProcessTimerOrBlockTask+0x98>)
 800bf0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	f3bf 8f6f 	isb	sy
    }
 800bf18:	e001      	b.n	800bf1e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800bf1a:	f7fe fceb 	bl	800a8f4 <xTaskResumeAll>
    }
 800bf1e:	bf00      	nop
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20000c74 	.word	0x20000c74
 800bf2c:	20000c78 	.word	0x20000c78
 800bf30:	e000ed04 	.word	0xe000ed04

0800bf34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf3c:	4b0e      	ldr	r3, [pc, #56]	; (800bf78 <prvGetNextExpireTime+0x44>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <prvGetNextExpireTime+0x16>
 800bf46:	2201      	movs	r2, #1
 800bf48:	e000      	b.n	800bf4c <prvGetNextExpireTime+0x18>
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d105      	bne.n	800bf64 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf58:	4b07      	ldr	r3, [pc, #28]	; (800bf78 <prvGetNextExpireTime+0x44>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	60fb      	str	r3, [r7, #12]
 800bf62:	e001      	b.n	800bf68 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800bf64:	2300      	movs	r3, #0
 800bf66:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800bf68:	68fb      	ldr	r3, [r7, #12]
    }
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3714      	adds	r7, #20
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	20000c70 	.word	0x20000c70

0800bf7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800bf84:	f7fe fdb6 	bl	800aaf4 <xTaskGetTickCount>
 800bf88:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800bf8a:	4b0b      	ldr	r3, [pc, #44]	; (800bfb8 <prvSampleTimeNow+0x3c>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d205      	bcs.n	800bfa0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800bf94:	f000 f912 	bl	800c1bc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	601a      	str	r2, [r3, #0]
 800bf9e:	e002      	b.n	800bfa6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800bfa6:	4a04      	ldr	r2, [pc, #16]	; (800bfb8 <prvSampleTimeNow+0x3c>)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800bfac:	68fb      	ldr	r3, [r7, #12]
    }
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20000c80 	.word	0x20000c80

0800bfbc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
 800bfc8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d812      	bhi.n	800c008 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	1ad2      	subs	r2, r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	699b      	ldr	r3, [r3, #24]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d302      	bcc.n	800bff6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800bff0:	2301      	movs	r3, #1
 800bff2:	617b      	str	r3, [r7, #20]
 800bff4:	e01b      	b.n	800c02e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bff6:	4b10      	ldr	r3, [pc, #64]	; (800c038 <prvInsertTimerInActiveList+0x7c>)
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3304      	adds	r3, #4
 800bffe:	4619      	mov	r1, r3
 800c000:	4610      	mov	r0, r2
 800c002:	f7fd fad4 	bl	80095ae <vListInsert>
 800c006:	e012      	b.n	800c02e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d206      	bcs.n	800c01e <prvInsertTimerInActiveList+0x62>
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	429a      	cmp	r2, r3
 800c016:	d302      	bcc.n	800c01e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800c018:	2301      	movs	r3, #1
 800c01a:	617b      	str	r3, [r7, #20]
 800c01c:	e007      	b.n	800c02e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c01e:	4b07      	ldr	r3, [pc, #28]	; (800c03c <prvInsertTimerInActiveList+0x80>)
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	3304      	adds	r3, #4
 800c026:	4619      	mov	r1, r3
 800c028:	4610      	mov	r0, r2
 800c02a:	f7fd fac0 	bl	80095ae <vListInsert>
            }
        }

        return xProcessTimerNow;
 800c02e:	697b      	ldr	r3, [r7, #20]
    }
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	20000c74 	.word	0x20000c74
 800c03c:	20000c70 	.word	0x20000c70

0800c040 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800c040:	b580      	push	{r7, lr}
 800c042:	b088      	sub	sp, #32
 800c044:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c046:	e0a6      	b.n	800c196 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f2c0 80a3 	blt.w	800c196 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c054:	69fb      	ldr	r3, [r7, #28]
 800c056:	695b      	ldr	r3, [r3, #20]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d004      	beq.n	800c066 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	3304      	adds	r3, #4
 800c060:	4618      	mov	r0, r3
 800c062:	f7fd fadd 	bl	8009620 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c066:	1d3b      	adds	r3, r7, #4
 800c068:	4618      	mov	r0, r3
 800c06a:	f7ff ff87 	bl	800bf7c <prvSampleTimeNow>
 800c06e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	3b01      	subs	r3, #1
 800c074:	2b08      	cmp	r3, #8
 800c076:	f200 808d 	bhi.w	800c194 <prvProcessReceivedCommands+0x154>
 800c07a:	a201      	add	r2, pc, #4	; (adr r2, 800c080 <prvProcessReceivedCommands+0x40>)
 800c07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c080:	0800c0a5 	.word	0x0800c0a5
 800c084:	0800c0a5 	.word	0x0800c0a5
 800c088:	0800c10d 	.word	0x0800c10d
 800c08c:	0800c121 	.word	0x0800c121
 800c090:	0800c16b 	.word	0x0800c16b
 800c094:	0800c0a5 	.word	0x0800c0a5
 800c098:	0800c0a5 	.word	0x0800c0a5
 800c09c:	0800c10d 	.word	0x0800c10d
 800c0a0:	0800c121 	.word	0x0800c121
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0aa:	f043 0301 	orr.w	r3, r3, #1
 800c0ae:	b2da      	uxtb	r2, r3
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c0b6:	68fa      	ldr	r2, [r7, #12]
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	699b      	ldr	r3, [r3, #24]
 800c0bc:	18d1      	adds	r1, r2, r3
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	69f8      	ldr	r0, [r7, #28]
 800c0c4:	f7ff ff7a 	bl	800bfbc <prvInsertTimerInActiveList>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d063      	beq.n	800c196 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0d4:	f003 0304 	and.w	r3, r3, #4
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d009      	beq.n	800c0f0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	699b      	ldr	r3, [r3, #24]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	69ba      	ldr	r2, [r7, #24]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	69f8      	ldr	r0, [r7, #28]
 800c0ea:	f7ff fe71 	bl	800bdd0 <prvReloadTimer>
 800c0ee:	e008      	b.n	800c102 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0f6:	f023 0301 	bic.w	r3, r3, #1
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	6a1b      	ldr	r3, [r3, #32]
 800c106:	69f8      	ldr	r0, [r7, #28]
 800c108:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800c10a:	e044      	b.n	800c196 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c112:	f023 0301 	bic.w	r3, r3, #1
 800c116:	b2da      	uxtb	r2, r3
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800c11e:	e03a      	b.n	800c196 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c120:	69fb      	ldr	r3, [r7, #28]
 800c122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c126:	f043 0301 	orr.w	r3, r3, #1
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c132:	68fa      	ldr	r2, [r7, #12]
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	699b      	ldr	r3, [r3, #24]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10a      	bne.n	800c156 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800c140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	617b      	str	r3, [r7, #20]
    }
 800c152:	bf00      	nop
 800c154:	e7fe      	b.n	800c154 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	699a      	ldr	r2, [r3, #24]
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	18d1      	adds	r1, r2, r3
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	69ba      	ldr	r2, [r7, #24]
 800c162:	69f8      	ldr	r0, [r7, #28]
 800c164:	f7ff ff2a 	bl	800bfbc <prvInsertTimerInActiveList>
                        break;
 800c168:	e015      	b.n	800c196 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c170:	f003 0302 	and.w	r3, r3, #2
 800c174:	2b00      	cmp	r3, #0
 800c176:	d103      	bne.n	800c180 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800c178:	69f8      	ldr	r0, [r7, #28]
 800c17a:	f000 fb91 	bl	800c8a0 <vPortFree>
 800c17e:	e00a      	b.n	800c196 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c186:	f023 0301 	bic.w	r3, r3, #1
 800c18a:	b2da      	uxtb	r2, r3
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800c192:	e000      	b.n	800c196 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 800c194:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c196:	4b08      	ldr	r3, [pc, #32]	; (800c1b8 <prvProcessReceivedCommands+0x178>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f107 0108 	add.w	r1, r7, #8
 800c19e:	2200      	movs	r2, #0
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7fd fd5b 	bl	8009c5c <xQueueReceive>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f47f af4d 	bne.w	800c048 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800c1ae:	bf00      	nop
 800c1b0:	bf00      	nop
 800c1b2:	3720      	adds	r7, #32
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	20000c78 	.word	0x20000c78

0800c1bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1c2:	e009      	b.n	800c1d8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1c4:	4b0e      	ldr	r3, [pc, #56]	; (800c200 <prvSwitchTimerLists+0x44>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800c1ce:	f04f 31ff 	mov.w	r1, #4294967295
 800c1d2:	6838      	ldr	r0, [r7, #0]
 800c1d4:	f7ff fe1e 	bl	800be14 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1d8:	4b09      	ldr	r3, [pc, #36]	; (800c200 <prvSwitchTimerLists+0x44>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1f0      	bne.n	800c1c4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800c1e2:	4b07      	ldr	r3, [pc, #28]	; (800c200 <prvSwitchTimerLists+0x44>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800c1e8:	4b06      	ldr	r3, [pc, #24]	; (800c204 <prvSwitchTimerLists+0x48>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a04      	ldr	r2, [pc, #16]	; (800c200 <prvSwitchTimerLists+0x44>)
 800c1ee:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800c1f0:	4a04      	ldr	r2, [pc, #16]	; (800c204 <prvSwitchTimerLists+0x48>)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6013      	str	r3, [r2, #0]
    }
 800c1f6:	bf00      	nop
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	20000c70 	.word	0x20000c70
 800c204:	20000c74 	.word	0x20000c74

0800c208 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800c208:	b580      	push	{r7, lr}
 800c20a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800c20c:	f000 f964 	bl	800c4d8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800c210:	4b12      	ldr	r3, [pc, #72]	; (800c25c <prvCheckForValidListAndQueue+0x54>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d11d      	bne.n	800c254 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800c218:	4811      	ldr	r0, [pc, #68]	; (800c260 <prvCheckForValidListAndQueue+0x58>)
 800c21a:	f7fd f977 	bl	800950c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800c21e:	4811      	ldr	r0, [pc, #68]	; (800c264 <prvCheckForValidListAndQueue+0x5c>)
 800c220:	f7fd f974 	bl	800950c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800c224:	4b10      	ldr	r3, [pc, #64]	; (800c268 <prvCheckForValidListAndQueue+0x60>)
 800c226:	4a0e      	ldr	r2, [pc, #56]	; (800c260 <prvCheckForValidListAndQueue+0x58>)
 800c228:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800c22a:	4b10      	ldr	r3, [pc, #64]	; (800c26c <prvCheckForValidListAndQueue+0x64>)
 800c22c:	4a0d      	ldr	r2, [pc, #52]	; (800c264 <prvCheckForValidListAndQueue+0x5c>)
 800c22e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800c230:	2200      	movs	r2, #0
 800c232:	210c      	movs	r1, #12
 800c234:	200a      	movs	r0, #10
 800c236:	f7fd faad 	bl	8009794 <xQueueGenericCreate>
 800c23a:	4603      	mov	r3, r0
 800c23c:	4a07      	ldr	r2, [pc, #28]	; (800c25c <prvCheckForValidListAndQueue+0x54>)
 800c23e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800c240:	4b06      	ldr	r3, [pc, #24]	; (800c25c <prvCheckForValidListAndQueue+0x54>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d005      	beq.n	800c254 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c248:	4b04      	ldr	r3, [pc, #16]	; (800c25c <prvCheckForValidListAndQueue+0x54>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4908      	ldr	r1, [pc, #32]	; (800c270 <prvCheckForValidListAndQueue+0x68>)
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fd ff24 	bl	800a09c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800c254:	f000 f970 	bl	800c538 <vPortExitCritical>
    }
 800c258:	bf00      	nop
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	20000c78 	.word	0x20000c78
 800c260:	20000c48 	.word	0x20000c48
 800c264:	20000c5c 	.word	0x20000c5c
 800c268:	20000c70 	.word	0x20000c70
 800c26c:	20000c74 	.word	0x20000c74
 800c270:	080123d0 	.word	0x080123d0

0800c274 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	3b04      	subs	r3, #4
 800c284:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c28c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3b04      	subs	r3, #4
 800c292:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	f023 0201 	bic.w	r2, r3, #1
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	3b04      	subs	r3, #4
 800c2a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800c2a4:	4a0c      	ldr	r2, [pc, #48]	; (800c2d8 <pxPortInitialiseStack+0x64>)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	3b14      	subs	r3, #20
 800c2ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	3b04      	subs	r3, #4
 800c2ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f06f 0202 	mvn.w	r2, #2
 800c2c2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	3b20      	subs	r3, #32
 800c2c8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3714      	adds	r7, #20
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr
 800c2d8:	0800c2dd 	.word	0x0800c2dd

0800c2dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b085      	sub	sp, #20
 800c2e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800c2e6:	4b12      	ldr	r3, [pc, #72]	; (800c330 <prvTaskExitError+0x54>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ee:	d00a      	beq.n	800c306 <prvTaskExitError+0x2a>
        __asm volatile
 800c2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	60fb      	str	r3, [r7, #12]
    }
 800c302:	bf00      	nop
 800c304:	e7fe      	b.n	800c304 <prvTaskExitError+0x28>
        __asm volatile
 800c306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30a:	f383 8811 	msr	BASEPRI, r3
 800c30e:	f3bf 8f6f 	isb	sy
 800c312:	f3bf 8f4f 	dsb	sy
 800c316:	60bb      	str	r3, [r7, #8]
    }
 800c318:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800c31a:	bf00      	nop
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d0fc      	beq.n	800c31c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800c322:	bf00      	nop
 800c324:	bf00      	nop
 800c326:	3714      	adds	r7, #20
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	20000018 	.word	0x20000018
	...

0800c340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800c340:	4b07      	ldr	r3, [pc, #28]	; (800c360 <pxCurrentTCBConst2>)
 800c342:	6819      	ldr	r1, [r3, #0]
 800c344:	6808      	ldr	r0, [r1, #0]
 800c346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34a:	f380 8809 	msr	PSP, r0
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f04f 0000 	mov.w	r0, #0
 800c356:	f380 8811 	msr	BASEPRI, r0
 800c35a:	4770      	bx	lr
 800c35c:	f3af 8000 	nop.w

0800c360 <pxCurrentTCBConst2>:
 800c360:	20000b44 	.word	0x20000b44
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800c364:	bf00      	nop
 800c366:	bf00      	nop

0800c368 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800c368:	4808      	ldr	r0, [pc, #32]	; (800c38c <prvPortStartFirstTask+0x24>)
 800c36a:	6800      	ldr	r0, [r0, #0]
 800c36c:	6800      	ldr	r0, [r0, #0]
 800c36e:	f380 8808 	msr	MSP, r0
 800c372:	f04f 0000 	mov.w	r0, #0
 800c376:	f380 8814 	msr	CONTROL, r0
 800c37a:	b662      	cpsie	i
 800c37c:	b661      	cpsie	f
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	df00      	svc	0
 800c388:	bf00      	nop
 800c38a:	0000      	.short	0x0000
 800c38c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800c390:	bf00      	nop
 800c392:	bf00      	nop

0800c394 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c39a:	4b46      	ldr	r3, [pc, #280]	; (800c4b4 <xPortStartScheduler+0x120>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a46      	ldr	r2, [pc, #280]	; (800c4b8 <xPortStartScheduler+0x124>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d10a      	bne.n	800c3ba <xPortStartScheduler+0x26>
        __asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	613b      	str	r3, [r7, #16]
    }
 800c3b6:	bf00      	nop
 800c3b8:	e7fe      	b.n	800c3b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c3ba:	4b3e      	ldr	r3, [pc, #248]	; (800c4b4 <xPortStartScheduler+0x120>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a3f      	ldr	r2, [pc, #252]	; (800c4bc <xPortStartScheduler+0x128>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d10a      	bne.n	800c3da <xPortStartScheduler+0x46>
        __asm volatile
 800c3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	60fb      	str	r3, [r7, #12]
    }
 800c3d6:	bf00      	nop
 800c3d8:	e7fe      	b.n	800c3d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c3da:	4b39      	ldr	r3, [pc, #228]	; (800c4c0 <xPortStartScheduler+0x12c>)
 800c3dc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	22ff      	movs	r2, #255	; 0xff
 800c3ea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c3f4:	78fb      	ldrb	r3, [r7, #3]
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c3fc:	b2da      	uxtb	r2, r3
 800c3fe:	4b31      	ldr	r3, [pc, #196]	; (800c4c4 <xPortStartScheduler+0x130>)
 800c400:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c402:	4b31      	ldr	r3, [pc, #196]	; (800c4c8 <xPortStartScheduler+0x134>)
 800c404:	2207      	movs	r2, #7
 800c406:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c408:	e009      	b.n	800c41e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800c40a:	4b2f      	ldr	r3, [pc, #188]	; (800c4c8 <xPortStartScheduler+0x134>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	3b01      	subs	r3, #1
 800c410:	4a2d      	ldr	r2, [pc, #180]	; (800c4c8 <xPortStartScheduler+0x134>)
 800c412:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c414:	78fb      	ldrb	r3, [r7, #3]
 800c416:	b2db      	uxtb	r3, r3
 800c418:	005b      	lsls	r3, r3, #1
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c41e:	78fb      	ldrb	r3, [r7, #3]
 800c420:	b2db      	uxtb	r3, r3
 800c422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c426:	2b80      	cmp	r3, #128	; 0x80
 800c428:	d0ef      	beq.n	800c40a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c42a:	4b27      	ldr	r3, [pc, #156]	; (800c4c8 <xPortStartScheduler+0x134>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f1c3 0307 	rsb	r3, r3, #7
 800c432:	2b04      	cmp	r3, #4
 800c434:	d00a      	beq.n	800c44c <xPortStartScheduler+0xb8>
        __asm volatile
 800c436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43a:	f383 8811 	msr	BASEPRI, r3
 800c43e:	f3bf 8f6f 	isb	sy
 800c442:	f3bf 8f4f 	dsb	sy
 800c446:	60bb      	str	r3, [r7, #8]
    }
 800c448:	bf00      	nop
 800c44a:	e7fe      	b.n	800c44a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c44c:	4b1e      	ldr	r3, [pc, #120]	; (800c4c8 <xPortStartScheduler+0x134>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	021b      	lsls	r3, r3, #8
 800c452:	4a1d      	ldr	r2, [pc, #116]	; (800c4c8 <xPortStartScheduler+0x134>)
 800c454:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c456:	4b1c      	ldr	r3, [pc, #112]	; (800c4c8 <xPortStartScheduler+0x134>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c45e:	4a1a      	ldr	r2, [pc, #104]	; (800c4c8 <xPortStartScheduler+0x134>)
 800c460:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	b2da      	uxtb	r2, r3
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800c46a:	4b18      	ldr	r3, [pc, #96]	; (800c4cc <xPortStartScheduler+0x138>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a17      	ldr	r2, [pc, #92]	; (800c4cc <xPortStartScheduler+0x138>)
 800c470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c474:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800c476:	4b15      	ldr	r3, [pc, #84]	; (800c4cc <xPortStartScheduler+0x138>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a14      	ldr	r2, [pc, #80]	; (800c4cc <xPortStartScheduler+0x138>)
 800c47c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c480:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800c482:	f000 f8e3 	bl	800c64c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800c486:	4b12      	ldr	r3, [pc, #72]	; (800c4d0 <xPortStartScheduler+0x13c>)
 800c488:	2200      	movs	r2, #0
 800c48a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800c48c:	f000 f902 	bl	800c694 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c490:	4b10      	ldr	r3, [pc, #64]	; (800c4d4 <xPortStartScheduler+0x140>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a0f      	ldr	r2, [pc, #60]	; (800c4d4 <xPortStartScheduler+0x140>)
 800c496:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c49a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800c49c:	f7ff ff64 	bl	800c368 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800c4a0:	f7fe fc5e 	bl	800ad60 <vTaskSwitchContext>
    prvTaskExitError();
 800c4a4:	f7ff ff1a 	bl	800c2dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3718      	adds	r7, #24
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	e000ed00 	.word	0xe000ed00
 800c4b8:	410fc271 	.word	0x410fc271
 800c4bc:	410fc270 	.word	0x410fc270
 800c4c0:	e000e400 	.word	0xe000e400
 800c4c4:	20000c84 	.word	0x20000c84
 800c4c8:	20000c88 	.word	0x20000c88
 800c4cc:	e000ed20 	.word	0xe000ed20
 800c4d0:	20000018 	.word	0x20000018
 800c4d4:	e000ef34 	.word	0xe000ef34

0800c4d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
        __asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	607b      	str	r3, [r7, #4]
    }
 800c4f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800c4f2:	4b0f      	ldr	r3, [pc, #60]	; (800c530 <vPortEnterCritical+0x58>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	4a0d      	ldr	r2, [pc, #52]	; (800c530 <vPortEnterCritical+0x58>)
 800c4fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800c4fc:	4b0c      	ldr	r3, [pc, #48]	; (800c530 <vPortEnterCritical+0x58>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d10f      	bne.n	800c524 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c504:	4b0b      	ldr	r3, [pc, #44]	; (800c534 <vPortEnterCritical+0x5c>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00a      	beq.n	800c524 <vPortEnterCritical+0x4c>
        __asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	603b      	str	r3, [r7, #0]
    }
 800c520:	bf00      	nop
 800c522:	e7fe      	b.n	800c522 <vPortEnterCritical+0x4a>
    }
}
 800c524:	bf00      	nop
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr
 800c530:	20000018 	.word	0x20000018
 800c534:	e000ed04 	.word	0xe000ed04

0800c538 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c538:	b480      	push	{r7}
 800c53a:	b083      	sub	sp, #12
 800c53c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800c53e:	4b12      	ldr	r3, [pc, #72]	; (800c588 <vPortExitCritical+0x50>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d10a      	bne.n	800c55c <vPortExitCritical+0x24>
        __asm volatile
 800c546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54a:	f383 8811 	msr	BASEPRI, r3
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f3bf 8f4f 	dsb	sy
 800c556:	607b      	str	r3, [r7, #4]
    }
 800c558:	bf00      	nop
 800c55a:	e7fe      	b.n	800c55a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800c55c:	4b0a      	ldr	r3, [pc, #40]	; (800c588 <vPortExitCritical+0x50>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	3b01      	subs	r3, #1
 800c562:	4a09      	ldr	r2, [pc, #36]	; (800c588 <vPortExitCritical+0x50>)
 800c564:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800c566:	4b08      	ldr	r3, [pc, #32]	; (800c588 <vPortExitCritical+0x50>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d105      	bne.n	800c57a <vPortExitCritical+0x42>
 800c56e:	2300      	movs	r3, #0
 800c570:	603b      	str	r3, [r7, #0]
        __asm volatile
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	f383 8811 	msr	BASEPRI, r3
    }
 800c578:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800c57a:	bf00      	nop
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	20000018 	.word	0x20000018
 800c58c:	00000000 	.word	0x00000000

0800c590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800c590:	f3ef 8009 	mrs	r0, PSP
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	4b15      	ldr	r3, [pc, #84]	; (800c5f0 <pxCurrentTCBConst>)
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	f01e 0f10 	tst.w	lr, #16
 800c5a0:	bf08      	it	eq
 800c5a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c5a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5aa:	6010      	str	r0, [r2, #0]
 800c5ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c5b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c5b4:	f380 8811 	msr	BASEPRI, r0
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f7fe fbce 	bl	800ad60 <vTaskSwitchContext>
 800c5c4:	f04f 0000 	mov.w	r0, #0
 800c5c8:	f380 8811 	msr	BASEPRI, r0
 800c5cc:	bc09      	pop	{r0, r3}
 800c5ce:	6819      	ldr	r1, [r3, #0]
 800c5d0:	6808      	ldr	r0, [r1, #0]
 800c5d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d6:	f01e 0f10 	tst.w	lr, #16
 800c5da:	bf08      	it	eq
 800c5dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c5e0:	f380 8809 	msr	PSP, r0
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop
 800c5ec:	f3af 8000 	nop.w

0800c5f0 <pxCurrentTCBConst>:
 800c5f0:	20000b44 	.word	0x20000b44
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800c5f4:	bf00      	nop
 800c5f6:	bf00      	nop

0800c5f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
        __asm volatile
 800c5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c602:	f383 8811 	msr	BASEPRI, r3
 800c606:	f3bf 8f6f 	isb	sy
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	607b      	str	r3, [r7, #4]
    }
 800c610:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800c612:	f001 fc2d 	bl	800de70 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800c616:	f7fe fa89 	bl	800ab2c <xTaskIncrementTick>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d006      	beq.n	800c62e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800c620:	f001 fc84 	bl	800df2c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c624:	4b08      	ldr	r3, [pc, #32]	; (800c648 <SysTick_Handler+0x50>)
 800c626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	e001      	b.n	800c632 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800c62e:	f001 fc61 	bl	800def4 <SEGGER_SYSVIEW_RecordExitISR>
 800c632:	2300      	movs	r3, #0
 800c634:	603b      	str	r3, [r7, #0]
        __asm volatile
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	f383 8811 	msr	BASEPRI, r3
    }
 800c63c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800c63e:	bf00      	nop
 800c640:	3708      	adds	r7, #8
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	e000ed04 	.word	0xe000ed04

0800c64c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800c64c:	b480      	push	{r7}
 800c64e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c650:	4b0b      	ldr	r3, [pc, #44]	; (800c680 <vPortSetupTimerInterrupt+0x34>)
 800c652:	2200      	movs	r2, #0
 800c654:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c656:	4b0b      	ldr	r3, [pc, #44]	; (800c684 <vPortSetupTimerInterrupt+0x38>)
 800c658:	2200      	movs	r2, #0
 800c65a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c65c:	4b0a      	ldr	r3, [pc, #40]	; (800c688 <vPortSetupTimerInterrupt+0x3c>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a0a      	ldr	r2, [pc, #40]	; (800c68c <vPortSetupTimerInterrupt+0x40>)
 800c662:	fba2 2303 	umull	r2, r3, r2, r3
 800c666:	099b      	lsrs	r3, r3, #6
 800c668:	4a09      	ldr	r2, [pc, #36]	; (800c690 <vPortSetupTimerInterrupt+0x44>)
 800c66a:	3b01      	subs	r3, #1
 800c66c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c66e:	4b04      	ldr	r3, [pc, #16]	; (800c680 <vPortSetupTimerInterrupt+0x34>)
 800c670:	2207      	movs	r2, #7
 800c672:	601a      	str	r2, [r3, #0]
}
 800c674:	bf00      	nop
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	e000e010 	.word	0xe000e010
 800c684:	e000e018 	.word	0xe000e018
 800c688:	20000008 	.word	0x20000008
 800c68c:	10624dd3 	.word	0x10624dd3
 800c690:	e000e014 	.word	0xe000e014

0800c694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800c694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c6a4 <vPortEnableVFP+0x10>
 800c698:	6801      	ldr	r1, [r0, #0]
 800c69a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c69e:	6001      	str	r1, [r0, #0]
 800c6a0:	4770      	bx	lr
 800c6a2:	0000      	.short	0x0000
 800c6a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800c6a8:	bf00      	nop
 800c6aa:	bf00      	nop

0800c6ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800c6b2:	f3ef 8305 	mrs	r3, IPSR
 800c6b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2b0f      	cmp	r3, #15
 800c6bc:	d914      	bls.n	800c6e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c6be:	4a17      	ldr	r2, [pc, #92]	; (800c71c <vPortValidateInterruptPriority+0x70>)
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c6c8:	4b15      	ldr	r3, [pc, #84]	; (800c720 <vPortValidateInterruptPriority+0x74>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	7afa      	ldrb	r2, [r7, #11]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d20a      	bcs.n	800c6e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800c6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d6:	f383 8811 	msr	BASEPRI, r3
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	607b      	str	r3, [r7, #4]
    }
 800c6e4:	bf00      	nop
 800c6e6:	e7fe      	b.n	800c6e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c6e8:	4b0e      	ldr	r3, [pc, #56]	; (800c724 <vPortValidateInterruptPriority+0x78>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c6f0:	4b0d      	ldr	r3, [pc, #52]	; (800c728 <vPortValidateInterruptPriority+0x7c>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d90a      	bls.n	800c70e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800c6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fc:	f383 8811 	msr	BASEPRI, r3
 800c700:	f3bf 8f6f 	isb	sy
 800c704:	f3bf 8f4f 	dsb	sy
 800c708:	603b      	str	r3, [r7, #0]
    }
 800c70a:	bf00      	nop
 800c70c:	e7fe      	b.n	800c70c <vPortValidateInterruptPriority+0x60>
    }
 800c70e:	bf00      	nop
 800c710:	3714      	adds	r7, #20
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	e000e3f0 	.word	0xe000e3f0
 800c720:	20000c84 	.word	0x20000c84
 800c724:	e000ed0c 	.word	0xe000ed0c
 800c728:	20000c88 	.word	0x20000c88

0800c72c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08a      	sub	sp, #40	; 0x28
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800c734:	2300      	movs	r3, #0
 800c736:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800c738:	f7fe f8ce 	bl	800a8d8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800c73c:	4b53      	ldr	r3, [pc, #332]	; (800c88c <pvPortMalloc+0x160>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d101      	bne.n	800c748 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800c744:	f000 f908 	bl	800c958 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d012      	beq.n	800c774 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800c74e:	2208      	movs	r2, #8
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f003 0307 	and.w	r3, r3, #7
 800c756:	1ad3      	subs	r3, r2, r3
 800c758:	3308      	adds	r3, #8
 800c75a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	43db      	mvns	r3, r3
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	429a      	cmp	r2, r3
 800c764:	d804      	bhi.n	800c770 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	69bb      	ldr	r3, [r7, #24]
 800c76a:	4413      	add	r3, r2
 800c76c:	607b      	str	r3, [r7, #4]
 800c76e:	e001      	b.n	800c774 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800c770:	2300      	movs	r3, #0
 800c772:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	db70      	blt.n	800c85c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d06d      	beq.n	800c85c <pvPortMalloc+0x130>
 800c780:	4b43      	ldr	r3, [pc, #268]	; (800c890 <pvPortMalloc+0x164>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	429a      	cmp	r2, r3
 800c788:	d868      	bhi.n	800c85c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800c78a:	4b42      	ldr	r3, [pc, #264]	; (800c894 <pvPortMalloc+0x168>)
 800c78c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800c78e:	4b41      	ldr	r3, [pc, #260]	; (800c894 <pvPortMalloc+0x168>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c794:	e004      	b.n	800c7a0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800c796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c798:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d903      	bls.n	800c7b2 <pvPortMalloc+0x86>
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d1f1      	bne.n	800c796 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800c7b2:	4b36      	ldr	r3, [pc, #216]	; (800c88c <pvPortMalloc+0x160>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d04f      	beq.n	800c85c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c7bc:	6a3b      	ldr	r3, [r7, #32]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2208      	movs	r2, #8
 800c7c2:	4413      	add	r3, r2
 800c7c4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	6a3b      	ldr	r3, [r7, #32]
 800c7cc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	685a      	ldr	r2, [r3, #4]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	1ad2      	subs	r2, r2, r3
 800c7d6:	2308      	movs	r3, #8
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d91f      	bls.n	800c81e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c7de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f003 0307 	and.w	r3, r3, #7
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d00a      	beq.n	800c806 <pvPortMalloc+0xda>
        __asm volatile
 800c7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f4:	f383 8811 	msr	BASEPRI, r3
 800c7f8:	f3bf 8f6f 	isb	sy
 800c7fc:	f3bf 8f4f 	dsb	sy
 800c800:	613b      	str	r3, [r7, #16]
    }
 800c802:	bf00      	nop
 800c804:	e7fe      	b.n	800c804 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c808:	685a      	ldr	r2, [r3, #4]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	1ad2      	subs	r2, r2, r3
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800c812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c818:	6978      	ldr	r0, [r7, #20]
 800c81a:	f000 f8f9 	bl	800ca10 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c81e:	4b1c      	ldr	r3, [pc, #112]	; (800c890 <pvPortMalloc+0x164>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	4a19      	ldr	r2, [pc, #100]	; (800c890 <pvPortMalloc+0x164>)
 800c82a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c82c:	4b18      	ldr	r3, [pc, #96]	; (800c890 <pvPortMalloc+0x164>)
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	4b19      	ldr	r3, [pc, #100]	; (800c898 <pvPortMalloc+0x16c>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	429a      	cmp	r2, r3
 800c836:	d203      	bcs.n	800c840 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c838:	4b15      	ldr	r3, [pc, #84]	; (800c890 <pvPortMalloc+0x164>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a16      	ldr	r2, [pc, #88]	; (800c898 <pvPortMalloc+0x16c>)
 800c83e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800c840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800c84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84e:	2200      	movs	r2, #0
 800c850:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800c852:	4b12      	ldr	r3, [pc, #72]	; (800c89c <pvPortMalloc+0x170>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	3301      	adds	r3, #1
 800c858:	4a10      	ldr	r2, [pc, #64]	; (800c89c <pvPortMalloc+0x170>)
 800c85a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800c85c:	f7fe f84a 	bl	800a8f4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	f003 0307 	and.w	r3, r3, #7
 800c866:	2b00      	cmp	r3, #0
 800c868:	d00a      	beq.n	800c880 <pvPortMalloc+0x154>
        __asm volatile
 800c86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86e:	f383 8811 	msr	BASEPRI, r3
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	60fb      	str	r3, [r7, #12]
    }
 800c87c:	bf00      	nop
 800c87e:	e7fe      	b.n	800c87e <pvPortMalloc+0x152>
    return pvReturn;
 800c880:	69fb      	ldr	r3, [r7, #28]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3728      	adds	r7, #40	; 0x28
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	20019c94 	.word	0x20019c94
 800c890:	20019c98 	.word	0x20019c98
 800c894:	20019c8c 	.word	0x20019c8c
 800c898:	20019c9c 	.word	0x20019c9c
 800c89c:	20019ca0 	.word	0x20019ca0

0800c8a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d049      	beq.n	800c946 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800c8b2:	2308      	movs	r3, #8
 800c8b4:	425b      	negs	r3, r3
 800c8b6:	697a      	ldr	r2, [r7, #20]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	db0a      	blt.n	800c8de <vPortFree+0x3e>
        __asm volatile
 800c8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8cc:	f383 8811 	msr	BASEPRI, r3
 800c8d0:	f3bf 8f6f 	isb	sy
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	60fb      	str	r3, [r7, #12]
    }
 800c8da:	bf00      	nop
 800c8dc:	e7fe      	b.n	800c8dc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00a      	beq.n	800c8fc <vPortFree+0x5c>
        __asm volatile
 800c8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ea:	f383 8811 	msr	BASEPRI, r3
 800c8ee:	f3bf 8f6f 	isb	sy
 800c8f2:	f3bf 8f4f 	dsb	sy
 800c8f6:	60bb      	str	r3, [r7, #8]
    }
 800c8f8:	bf00      	nop
 800c8fa:	e7fe      	b.n	800c8fa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	0fdb      	lsrs	r3, r3, #31
 800c902:	f003 0301 	and.w	r3, r3, #1
 800c906:	b2db      	uxtb	r3, r3
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d01c      	beq.n	800c946 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d118      	bne.n	800c946 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800c920:	f7fd ffda 	bl	800a8d8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	685a      	ldr	r2, [r3, #4]
 800c928:	4b09      	ldr	r3, [pc, #36]	; (800c950 <vPortFree+0xb0>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4413      	add	r3, r2
 800c92e:	4a08      	ldr	r2, [pc, #32]	; (800c950 <vPortFree+0xb0>)
 800c930:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c932:	6938      	ldr	r0, [r7, #16]
 800c934:	f000 f86c 	bl	800ca10 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800c938:	4b06      	ldr	r3, [pc, #24]	; (800c954 <vPortFree+0xb4>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	3301      	adds	r3, #1
 800c93e:	4a05      	ldr	r2, [pc, #20]	; (800c954 <vPortFree+0xb4>)
 800c940:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800c942:	f7fd ffd7 	bl	800a8f4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800c946:	bf00      	nop
 800c948:	3718      	adds	r7, #24
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	20019c98 	.word	0x20019c98
 800c954:	20019ca4 	.word	0x20019ca4

0800c958 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800c958:	b480      	push	{r7}
 800c95a:	b085      	sub	sp, #20
 800c95c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c95e:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800c962:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800c964:	4b25      	ldr	r3, [pc, #148]	; (800c9fc <prvHeapInit+0xa4>)
 800c966:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f003 0307 	and.w	r3, r3, #7
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00c      	beq.n	800c98c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	3307      	adds	r3, #7
 800c976:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f023 0307 	bic.w	r3, r3, #7
 800c97e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	4a1d      	ldr	r2, [pc, #116]	; (800c9fc <prvHeapInit+0xa4>)
 800c988:	4413      	add	r3, r2
 800c98a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c990:	4a1b      	ldr	r2, [pc, #108]	; (800ca00 <prvHeapInit+0xa8>)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800c996:	4b1a      	ldr	r3, [pc, #104]	; (800ca00 <prvHeapInit+0xa8>)
 800c998:	2200      	movs	r2, #0
 800c99a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	68ba      	ldr	r2, [r7, #8]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800c9a4:	2208      	movs	r2, #8
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	1a9b      	subs	r3, r3, r2
 800c9aa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f023 0307 	bic.w	r3, r3, #7
 800c9b2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	4a13      	ldr	r2, [pc, #76]	; (800ca04 <prvHeapInit+0xac>)
 800c9b8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800c9ba:	4b12      	ldr	r3, [pc, #72]	; (800ca04 <prvHeapInit+0xac>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800c9c2:	4b10      	ldr	r3, [pc, #64]	; (800ca04 <prvHeapInit+0xac>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	1ad2      	subs	r2, r2, r3
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c9d8:	4b0a      	ldr	r3, [pc, #40]	; (800ca04 <prvHeapInit+0xac>)
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	4a08      	ldr	r2, [pc, #32]	; (800ca08 <prvHeapInit+0xb0>)
 800c9e6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	4a07      	ldr	r2, [pc, #28]	; (800ca0c <prvHeapInit+0xb4>)
 800c9ee:	6013      	str	r3, [r2, #0]
}
 800c9f0:	bf00      	nop
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	20000c8c 	.word	0x20000c8c
 800ca00:	20019c8c 	.word	0x20019c8c
 800ca04:	20019c94 	.word	0x20019c94
 800ca08:	20019c9c 	.word	0x20019c9c
 800ca0c:	20019c98 	.word	0x20019c98

0800ca10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca18:	4b28      	ldr	r3, [pc, #160]	; (800cabc <prvInsertBlockIntoFreeList+0xac>)
 800ca1a:	60fb      	str	r3, [r7, #12]
 800ca1c:	e002      	b.n	800ca24 <prvInsertBlockIntoFreeList+0x14>
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	60fb      	str	r3, [r7, #12]
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d8f7      	bhi.n	800ca1e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	4413      	add	r3, r2
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d108      	bne.n	800ca52 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	685a      	ldr	r2, [r3, #4]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	441a      	add	r2, r3
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	441a      	add	r2, r3
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d118      	bne.n	800ca98 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	4b15      	ldr	r3, [pc, #84]	; (800cac0 <prvInsertBlockIntoFreeList+0xb0>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d00d      	beq.n	800ca8e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	685a      	ldr	r2, [r3, #4]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	441a      	add	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	601a      	str	r2, [r3, #0]
 800ca8c:	e008      	b.n	800caa0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca8e:	4b0c      	ldr	r3, [pc, #48]	; (800cac0 <prvInsertBlockIntoFreeList+0xb0>)
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	601a      	str	r2, [r3, #0]
 800ca96:	e003      	b.n	800caa0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800caa0:	68fa      	ldr	r2, [r7, #12]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d002      	beq.n	800caae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800caae:	bf00      	nop
 800cab0:	3714      	adds	r7, #20
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	20019c8c 	.word	0x20019c8c
 800cac0:	20019c94 	.word	0x20019c94

0800cac4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b086      	sub	sp, #24
 800cac8:	af02      	add	r7, sp, #8
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	607a      	str	r2, [r7, #4]
 800cad0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800cad2:	2205      	movs	r2, #5
 800cad4:	492b      	ldr	r1, [pc, #172]	; (800cb84 <SYSVIEW_AddTask+0xc0>)
 800cad6:	68b8      	ldr	r0, [r7, #8]
 800cad8:	f002 fb0f 	bl	800f0fa <memcmp>
 800cadc:	4603      	mov	r3, r0
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d04b      	beq.n	800cb7a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800cae2:	4b29      	ldr	r3, [pc, #164]	; (800cb88 <SYSVIEW_AddTask+0xc4>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b07      	cmp	r3, #7
 800cae8:	d903      	bls.n	800caf2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800caea:	4828      	ldr	r0, [pc, #160]	; (800cb8c <SYSVIEW_AddTask+0xc8>)
 800caec:	f001 fc68 	bl	800e3c0 <SEGGER_SYSVIEW_Warn>
    return;
 800caf0:	e044      	b.n	800cb7c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800caf2:	4b25      	ldr	r3, [pc, #148]	; (800cb88 <SYSVIEW_AddTask+0xc4>)
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	4926      	ldr	r1, [pc, #152]	; (800cb90 <SYSVIEW_AddTask+0xcc>)
 800caf8:	4613      	mov	r3, r2
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	4413      	add	r3, r2
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	440b      	add	r3, r1
 800cb02:	68fa      	ldr	r2, [r7, #12]
 800cb04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800cb06:	4b20      	ldr	r3, [pc, #128]	; (800cb88 <SYSVIEW_AddTask+0xc4>)
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	4921      	ldr	r1, [pc, #132]	; (800cb90 <SYSVIEW_AddTask+0xcc>)
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	4413      	add	r3, r2
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	440b      	add	r3, r1
 800cb16:	3304      	adds	r3, #4
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800cb1c:	4b1a      	ldr	r3, [pc, #104]	; (800cb88 <SYSVIEW_AddTask+0xc4>)
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	491b      	ldr	r1, [pc, #108]	; (800cb90 <SYSVIEW_AddTask+0xcc>)
 800cb22:	4613      	mov	r3, r2
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	4413      	add	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	440b      	add	r3, r1
 800cb2c:	3308      	adds	r3, #8
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800cb32:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <SYSVIEW_AddTask+0xc4>)
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	4916      	ldr	r1, [pc, #88]	; (800cb90 <SYSVIEW_AddTask+0xcc>)
 800cb38:	4613      	mov	r3, r2
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	4413      	add	r3, r2
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	440b      	add	r3, r1
 800cb42:	330c      	adds	r3, #12
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800cb48:	4b0f      	ldr	r3, [pc, #60]	; (800cb88 <SYSVIEW_AddTask+0xc4>)
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	4910      	ldr	r1, [pc, #64]	; (800cb90 <SYSVIEW_AddTask+0xcc>)
 800cb4e:	4613      	mov	r3, r2
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	4413      	add	r3, r2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	440b      	add	r3, r1
 800cb58:	3310      	adds	r3, #16
 800cb5a:	69ba      	ldr	r2, [r7, #24]
 800cb5c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800cb5e:	4b0a      	ldr	r3, [pc, #40]	; (800cb88 <SYSVIEW_AddTask+0xc4>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	3301      	adds	r3, #1
 800cb64:	4a08      	ldr	r2, [pc, #32]	; (800cb88 <SYSVIEW_AddTask+0xc4>)
 800cb66:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	9300      	str	r3, [sp, #0]
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	68b9      	ldr	r1, [r7, #8]
 800cb72:	68f8      	ldr	r0, [r7, #12]
 800cb74:	f000 f80e 	bl	800cb94 <SYSVIEW_SendTaskInfo>
 800cb78:	e000      	b.n	800cb7c <SYSVIEW_AddTask+0xb8>
    return;
 800cb7a:	bf00      	nop

}
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	080123d8 	.word	0x080123d8
 800cb88:	20019d48 	.word	0x20019d48
 800cb8c:	080123e0 	.word	0x080123e0
 800cb90:	20019ca8 	.word	0x20019ca8

0800cb94 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b08a      	sub	sp, #40	; 0x28
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
 800cba0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800cba2:	f107 0314 	add.w	r3, r7, #20
 800cba6:	2214      	movs	r2, #20
 800cba8:	2100      	movs	r1, #0
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f002 fab5 	bl	800f11a <memset>
  TaskInfo.TaskID     = TaskID;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800cbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800cbc4:	f107 0314 	add.w	r3, r7, #20
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f001 f827 	bl	800dc1c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800cbce:	bf00      	nop
 800cbd0:	3728      	adds	r7, #40	; 0x28
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
	...

0800cbd8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800cbd8:	b480      	push	{r7}
 800cbda:	b083      	sub	sp, #12
 800cbdc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800cbde:	4b24      	ldr	r3, [pc, #144]	; (800cc70 <_DoInit+0x98>)
 800cbe0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2203      	movs	r2, #3
 800cbe6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2203      	movs	r2, #3
 800cbec:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	4a20      	ldr	r2, [pc, #128]	; (800cc74 <_DoInit+0x9c>)
 800cbf2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	4a20      	ldr	r2, [pc, #128]	; (800cc78 <_DoInit+0xa0>)
 800cbf8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cc00:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2200      	movs	r2, #0
 800cc12:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4a17      	ldr	r2, [pc, #92]	; (800cc74 <_DoInit+0x9c>)
 800cc18:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a17      	ldr	r2, [pc, #92]	; (800cc7c <_DoInit+0xa4>)
 800cc1e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2210      	movs	r2, #16
 800cc24:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	3307      	adds	r3, #7
 800cc3c:	4a10      	ldr	r2, [pc, #64]	; (800cc80 <_DoInit+0xa8>)
 800cc3e:	6810      	ldr	r0, [r2, #0]
 800cc40:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800cc42:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	4a0e      	ldr	r2, [pc, #56]	; (800cc84 <_DoInit+0xac>)
 800cc4a:	6810      	ldr	r0, [r2, #0]
 800cc4c:	6018      	str	r0, [r3, #0]
 800cc4e:	8891      	ldrh	r1, [r2, #4]
 800cc50:	7992      	ldrb	r2, [r2, #6]
 800cc52:	8099      	strh	r1, [r3, #4]
 800cc54:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800cc56:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2220      	movs	r2, #32
 800cc5e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800cc60:	f3bf 8f5f 	dmb	sy
}
 800cc64:	bf00      	nop
 800cc66:	370c      	adds	r7, #12
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr
 800cc70:	20019d4c 	.word	0x20019d4c
 800cc74:	08012430 	.word	0x08012430
 800cc78:	20019df4 	.word	0x20019df4
 800cc7c:	2001a1f4 	.word	0x2001a1f4
 800cc80:	0801243c 	.word	0x0801243c
 800cc84:	08012440 	.word	0x08012440

0800cc88 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b08a      	sub	sp, #40	; 0x28
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800cc94:	2300      	movs	r3, #0
 800cc96:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	691b      	ldr	r3, [r3, #16]
 800cca2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800cca4:	69ba      	ldr	r2, [r7, #24]
 800cca6:	69fb      	ldr	r3, [r7, #28]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d905      	bls.n	800ccb8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800ccac:	69ba      	ldr	r2, [r7, #24]
 800ccae:	69fb      	ldr	r3, [r7, #28]
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	3b01      	subs	r3, #1
 800ccb4:	627b      	str	r3, [r7, #36]	; 0x24
 800ccb6:	e007      	b.n	800ccc8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	689a      	ldr	r2, [r3, #8]
 800ccbc:	69b9      	ldr	r1, [r7, #24]
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	1acb      	subs	r3, r1, r3
 800ccc2:	4413      	add	r3, r2
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	689a      	ldr	r2, [r3, #8]
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	1ad3      	subs	r3, r2, r3
 800ccd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	bf28      	it	cs
 800ccd6:	4613      	movcs	r3, r2
 800ccd8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800ccda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4293      	cmp	r3, r2
 800cce0:	bf28      	it	cs
 800cce2:	4613      	movcs	r3, r2
 800cce4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	685a      	ldr	r2, [r3, #4]
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	4413      	add	r3, r2
 800ccee:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800ccf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccf2:	68b9      	ldr	r1, [r7, #8]
 800ccf4:	6978      	ldr	r0, [r7, #20]
 800ccf6:	f002 fa7e 	bl	800f1f6 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800ccfa:	6a3a      	ldr	r2, [r7, #32]
 800ccfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfe:	4413      	add	r3, r2
 800cd00:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800cd02:	68ba      	ldr	r2, [r7, #8]
 800cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd06:	4413      	add	r3, r2
 800cd08:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	1ad3      	subs	r3, r2, r3
 800cd10:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800cd12:	69fa      	ldr	r2, [r7, #28]
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	4413      	add	r3, r2
 800cd18:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	69fa      	ldr	r2, [r7, #28]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d101      	bne.n	800cd28 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800cd24:	2300      	movs	r3, #0
 800cd26:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800cd28:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	69fa      	ldr	r2, [r7, #28]
 800cd30:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d1b2      	bne.n	800cc9e <_WriteBlocking+0x16>
  return NumBytesWritten;
 800cd38:	6a3b      	ldr	r3, [r7, #32]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3728      	adds	r7, #40	; 0x28
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b088      	sub	sp, #32
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	60f8      	str	r0, [r7, #12]
 800cd4a:	60b9      	str	r1, [r7, #8]
 800cd4c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	689a      	ldr	r2, [r3, #8]
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800cd5e:	69ba      	ldr	r2, [r7, #24]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d911      	bls.n	800cd8a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	685a      	ldr	r2, [r3, #4]
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	68b9      	ldr	r1, [r7, #8]
 800cd74:	6938      	ldr	r0, [r7, #16]
 800cd76:	f002 fa3e 	bl	800f1f6 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800cd7a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800cd7e:	69fa      	ldr	r2, [r7, #28]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	441a      	add	r2, r3
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800cd88:	e01f      	b.n	800cdca <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	685a      	ldr	r2, [r3, #4]
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	4413      	add	r3, r2
 800cd96:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800cd98:	697a      	ldr	r2, [r7, #20]
 800cd9a:	68b9      	ldr	r1, [r7, #8]
 800cd9c:	6938      	ldr	r0, [r7, #16]
 800cd9e:	f002 fa2a 	bl	800f1f6 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	697a      	ldr	r2, [r7, #20]
 800cdb8:	4619      	mov	r1, r3
 800cdba:	6938      	ldr	r0, [r7, #16]
 800cdbc:	f002 fa1b 	bl	800f1f6 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800cdc0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	697a      	ldr	r2, [r7, #20]
 800cdc8:	60da      	str	r2, [r3, #12]
}
 800cdca:	bf00      	nop
 800cdcc:	3720      	adds	r7, #32
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800cdd2:	b480      	push	{r7}
 800cdd4:	b087      	sub	sp, #28
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800cde6:	693a      	ldr	r2, [r7, #16]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d808      	bhi.n	800ce00 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	689a      	ldr	r2, [r3, #8]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	1ad2      	subs	r2, r2, r3
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	617b      	str	r3, [r7, #20]
 800cdfe:	e004      	b.n	800ce0a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800ce00:	693a      	ldr	r2, [r7, #16]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	1ad3      	subs	r3, r2, r3
 800ce06:	3b01      	subs	r3, #1
 800ce08:	617b      	str	r3, [r7, #20]
  }
  return r;
 800ce0a:	697b      	ldr	r3, [r7, #20]
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	371c      	adds	r7, #28
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b08c      	sub	sp, #48	; 0x30
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800ce24:	4b3e      	ldr	r3, [pc, #248]	; (800cf20 <SEGGER_RTT_ReadNoLock+0x108>)
 800ce26:	623b      	str	r3, [r7, #32]
 800ce28:	6a3b      	ldr	r3, [r7, #32]
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d101      	bne.n	800ce36 <SEGGER_RTT_ReadNoLock+0x1e>
 800ce32:	f7ff fed1 	bl	800cbd8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	4613      	mov	r3, r2
 800ce3a:	005b      	lsls	r3, r3, #1
 800ce3c:	4413      	add	r3, r2
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	3360      	adds	r3, #96	; 0x60
 800ce42:	4a37      	ldr	r2, [pc, #220]	; (800cf20 <SEGGER_RTT_ReadNoLock+0x108>)
 800ce44:	4413      	add	r3, r2
 800ce46:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	691b      	ldr	r3, [r3, #16]
 800ce50:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	68db      	ldr	r3, [r3, #12]
 800ce56:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800ce5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d92b      	bls.n	800cebc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	689a      	ldr	r2, [r3, #8]
 800ce68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6a:	1ad3      	subs	r3, r2, r3
 800ce6c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4293      	cmp	r3, r2
 800ce74:	bf28      	it	cs
 800ce76:	4613      	movcs	r3, r2
 800ce78:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	685a      	ldr	r2, [r3, #4]
 800ce7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce80:	4413      	add	r3, r2
 800ce82:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800ce84:	697a      	ldr	r2, [r7, #20]
 800ce86:	6939      	ldr	r1, [r7, #16]
 800ce88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce8a:	f002 f9b4 	bl	800f1f6 <memcpy>
    NumBytesRead += NumBytesRem;
 800ce8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	4413      	add	r3, r2
 800ce94:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800ce96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800cea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	4413      	add	r3, r2
 800ceac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	689b      	ldr	r3, [r3, #8]
 800ceb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d101      	bne.n	800cebc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800cebc:	69ba      	ldr	r2, [r7, #24]
 800cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec0:	1ad3      	subs	r3, r2, r3
 800cec2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800cec4:	697a      	ldr	r2, [r7, #20]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	4293      	cmp	r3, r2
 800ceca:	bf28      	it	cs
 800cecc:	4613      	movcs	r3, r2
 800cece:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d019      	beq.n	800cf0a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	685a      	ldr	r2, [r3, #4]
 800ceda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cedc:	4413      	add	r3, r2
 800cede:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800cee0:	697a      	ldr	r2, [r7, #20]
 800cee2:	6939      	ldr	r1, [r7, #16]
 800cee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cee6:	f002 f986 	bl	800f1f6 <memcpy>
    NumBytesRead += NumBytesRem;
 800ceea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	4413      	add	r3, r2
 800cef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800cef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	4413      	add	r3, r2
 800cef8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800cf02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	4413      	add	r3, r2
 800cf08:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d002      	beq.n	800cf16 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf14:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800cf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3730      	adds	r7, #48	; 0x30
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	20019d4c 	.word	0x20019d4c

0800cf24 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b088      	sub	sp, #32
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	1c5a      	adds	r2, r3, #1
 800cf38:	4613      	mov	r3, r2
 800cf3a:	005b      	lsls	r3, r3, #1
 800cf3c:	4413      	add	r3, r2
 800cf3e:	00db      	lsls	r3, r3, #3
 800cf40:	4a1f      	ldr	r2, [pc, #124]	; (800cfc0 <SEGGER_RTT_WriteNoLock+0x9c>)
 800cf42:	4413      	add	r3, r2
 800cf44:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	695b      	ldr	r3, [r3, #20]
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	d029      	beq.n	800cfa2 <SEGGER_RTT_WriteNoLock+0x7e>
 800cf4e:	2b02      	cmp	r3, #2
 800cf50:	d82e      	bhi.n	800cfb0 <SEGGER_RTT_WriteNoLock+0x8c>
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d002      	beq.n	800cf5c <SEGGER_RTT_WriteNoLock+0x38>
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d013      	beq.n	800cf82 <SEGGER_RTT_WriteNoLock+0x5e>
 800cf5a:	e029      	b.n	800cfb0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800cf5c:	6978      	ldr	r0, [r7, #20]
 800cf5e:	f7ff ff38 	bl	800cdd2 <_GetAvailWriteSpace>
 800cf62:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800cf64:	693a      	ldr	r2, [r7, #16]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d202      	bcs.n	800cf72 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800cf70:	e021      	b.n	800cfb6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	69b9      	ldr	r1, [r7, #24]
 800cf7a:	6978      	ldr	r0, [r7, #20]
 800cf7c:	f7ff fee1 	bl	800cd42 <_WriteNoCheck>
    break;
 800cf80:	e019      	b.n	800cfb6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800cf82:	6978      	ldr	r0, [r7, #20]
 800cf84:	f7ff ff25 	bl	800cdd2 <_GetAvailWriteSpace>
 800cf88:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	bf28      	it	cs
 800cf92:	4613      	movcs	r3, r2
 800cf94:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800cf96:	69fa      	ldr	r2, [r7, #28]
 800cf98:	69b9      	ldr	r1, [r7, #24]
 800cf9a:	6978      	ldr	r0, [r7, #20]
 800cf9c:	f7ff fed1 	bl	800cd42 <_WriteNoCheck>
    break;
 800cfa0:	e009      	b.n	800cfb6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	69b9      	ldr	r1, [r7, #24]
 800cfa6:	6978      	ldr	r0, [r7, #20]
 800cfa8:	f7ff fe6e 	bl	800cc88 <_WriteBlocking>
 800cfac:	61f8      	str	r0, [r7, #28]
    break;
 800cfae:	e002      	b.n	800cfb6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	61fb      	str	r3, [r7, #28]
    break;
 800cfb4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800cfb6:	69fb      	ldr	r3, [r7, #28]
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3720      	adds	r7, #32
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	20019d4c 	.word	0x20019d4c

0800cfc4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b088      	sub	sp, #32
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800cfd0:	4b0e      	ldr	r3, [pc, #56]	; (800d00c <SEGGER_RTT_Write+0x48>)
 800cfd2:	61fb      	str	r3, [r7, #28]
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d101      	bne.n	800cfe2 <SEGGER_RTT_Write+0x1e>
 800cfde:	f7ff fdfb 	bl	800cbd8 <_DoInit>
  SEGGER_RTT_LOCK();
 800cfe2:	f3ef 8311 	mrs	r3, BASEPRI
 800cfe6:	f04f 0120 	mov.w	r1, #32
 800cfea:	f381 8811 	msr	BASEPRI, r1
 800cfee:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	68b9      	ldr	r1, [r7, #8]
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f7ff ff95 	bl	800cf24 <SEGGER_RTT_WriteNoLock>
 800cffa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800d002:	697b      	ldr	r3, [r7, #20]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3720      	adds	r7, #32
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	20019d4c 	.word	0x20019d4c

0800d010 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800d010:	b480      	push	{r7}
 800d012:	b087      	sub	sp, #28
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800d01c:	2300      	movs	r3, #0
 800d01e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800d020:	e002      	b.n	800d028 <_EncodeStr+0x18>
    Len++;
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	3301      	adds	r3, #1
 800d026:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800d028:	68ba      	ldr	r2, [r7, #8]
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	4413      	add	r3, r2
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d1f6      	bne.n	800d022 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800d034:	693a      	ldr	r2, [r7, #16]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d901      	bls.n	800d040 <_EncodeStr+0x30>
    Len = Limit;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	2bfe      	cmp	r3, #254	; 0xfe
 800d044:	d806      	bhi.n	800d054 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	1c5a      	adds	r2, r3, #1
 800d04a:	60fa      	str	r2, [r7, #12]
 800d04c:	693a      	ldr	r2, [r7, #16]
 800d04e:	b2d2      	uxtb	r2, r2
 800d050:	701a      	strb	r2, [r3, #0]
 800d052:	e011      	b.n	800d078 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	1c5a      	adds	r2, r3, #1
 800d058:	60fa      	str	r2, [r7, #12]
 800d05a:	22ff      	movs	r2, #255	; 0xff
 800d05c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	1c5a      	adds	r2, r3, #1
 800d062:	60fa      	str	r2, [r7, #12]
 800d064:	693a      	ldr	r2, [r7, #16]
 800d066:	b2d2      	uxtb	r2, r2
 800d068:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	0a19      	lsrs	r1, r3, #8
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	1c5a      	adds	r2, r3, #1
 800d072:	60fa      	str	r2, [r7, #12]
 800d074:	b2ca      	uxtb	r2, r1
 800d076:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800d078:	2300      	movs	r3, #0
 800d07a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800d07c:	e00a      	b.n	800d094 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	1c53      	adds	r3, r2, #1
 800d082:	60bb      	str	r3, [r7, #8]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	1c59      	adds	r1, r3, #1
 800d088:	60f9      	str	r1, [r7, #12]
 800d08a:	7812      	ldrb	r2, [r2, #0]
 800d08c:	701a      	strb	r2, [r3, #0]
    n++;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	3301      	adds	r3, #1
 800d092:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d3f0      	bcc.n	800d07e <_EncodeStr+0x6e>
  }
  return pPayload;
 800d09c:	68fb      	ldr	r3, [r7, #12]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	371c      	adds	r7, #28
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr

0800d0aa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800d0aa:	b480      	push	{r7}
 800d0ac:	b083      	sub	sp, #12
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	3304      	adds	r3, #4
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	370c      	adds	r7, #12
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
	...

0800d0c4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800d0ca:	4b35      	ldr	r3, [pc, #212]	; (800d1a0 <_HandleIncomingPacket+0xdc>)
 800d0cc:	7e1b      	ldrb	r3, [r3, #24]
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	1cfb      	adds	r3, r7, #3
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	f7ff fe9f 	bl	800ce18 <SEGGER_RTT_ReadNoLock>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	dd59      	ble.n	800d198 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800d0e4:	78fb      	ldrb	r3, [r7, #3]
 800d0e6:	2b80      	cmp	r3, #128	; 0x80
 800d0e8:	d032      	beq.n	800d150 <_HandleIncomingPacket+0x8c>
 800d0ea:	2b80      	cmp	r3, #128	; 0x80
 800d0ec:	dc42      	bgt.n	800d174 <_HandleIncomingPacket+0xb0>
 800d0ee:	2b07      	cmp	r3, #7
 800d0f0:	dc16      	bgt.n	800d120 <_HandleIncomingPacket+0x5c>
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	dd3e      	ble.n	800d174 <_HandleIncomingPacket+0xb0>
 800d0f6:	3b01      	subs	r3, #1
 800d0f8:	2b06      	cmp	r3, #6
 800d0fa:	d83b      	bhi.n	800d174 <_HandleIncomingPacket+0xb0>
 800d0fc:	a201      	add	r2, pc, #4	; (adr r2, 800d104 <_HandleIncomingPacket+0x40>)
 800d0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d102:	bf00      	nop
 800d104:	0800d127 	.word	0x0800d127
 800d108:	0800d12d 	.word	0x0800d12d
 800d10c:	0800d133 	.word	0x0800d133
 800d110:	0800d139 	.word	0x0800d139
 800d114:	0800d13f 	.word	0x0800d13f
 800d118:	0800d145 	.word	0x0800d145
 800d11c:	0800d14b 	.word	0x0800d14b
 800d120:	2b7f      	cmp	r3, #127	; 0x7f
 800d122:	d034      	beq.n	800d18e <_HandleIncomingPacket+0xca>
 800d124:	e026      	b.n	800d174 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800d126:	f000 fbff 	bl	800d928 <SEGGER_SYSVIEW_Start>
      break;
 800d12a:	e035      	b.n	800d198 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800d12c:	f000 fcb6 	bl	800da9c <SEGGER_SYSVIEW_Stop>
      break;
 800d130:	e032      	b.n	800d198 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800d132:	f000 fe6b 	bl	800de0c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800d136:	e02f      	b.n	800d198 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800d138:	f000 fe54 	bl	800dde4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800d13c:	e02c      	b.n	800d198 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800d13e:	f000 fcd3 	bl	800dae8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800d142:	e029      	b.n	800d198 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800d144:	f001 f8fe 	bl	800e344 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800d148:	e026      	b.n	800d198 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800d14a:	f001 f8dd 	bl	800e308 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800d14e:	e023      	b.n	800d198 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800d150:	4b13      	ldr	r3, [pc, #76]	; (800d1a0 <_HandleIncomingPacket+0xdc>)
 800d152:	7e1b      	ldrb	r3, [r3, #24]
 800d154:	4618      	mov	r0, r3
 800d156:	1cfb      	adds	r3, r7, #3
 800d158:	2201      	movs	r2, #1
 800d15a:	4619      	mov	r1, r3
 800d15c:	f7ff fe5c 	bl	800ce18 <SEGGER_RTT_ReadNoLock>
 800d160:	4603      	mov	r3, r0
 800d162:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	dd13      	ble.n	800d192 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800d16a:	78fb      	ldrb	r3, [r7, #3]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f001 f84b 	bl	800e208 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800d172:	e00e      	b.n	800d192 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800d174:	78fb      	ldrb	r3, [r7, #3]
 800d176:	b25b      	sxtb	r3, r3
 800d178:	2b00      	cmp	r3, #0
 800d17a:	da0c      	bge.n	800d196 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800d17c:	4b08      	ldr	r3, [pc, #32]	; (800d1a0 <_HandleIncomingPacket+0xdc>)
 800d17e:	7e1b      	ldrb	r3, [r3, #24]
 800d180:	4618      	mov	r0, r3
 800d182:	1cfb      	adds	r3, r7, #3
 800d184:	2201      	movs	r2, #1
 800d186:	4619      	mov	r1, r3
 800d188:	f7ff fe46 	bl	800ce18 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800d18c:	e003      	b.n	800d196 <_HandleIncomingPacket+0xd2>
      break;
 800d18e:	bf00      	nop
 800d190:	e002      	b.n	800d198 <_HandleIncomingPacket+0xd4>
      break;
 800d192:	bf00      	nop
 800d194:	e000      	b.n	800d198 <_HandleIncomingPacket+0xd4>
      break;
 800d196:	bf00      	nop
    }
  }
}
 800d198:	bf00      	nop
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	2001a204 	.word	0x2001a204

0800d1a4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b08c      	sub	sp, #48	; 0x30
 800d1a8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800d1ae:	1d3b      	adds	r3, r7, #4
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1b8:	4b31      	ldr	r3, [pc, #196]	; (800d280 <_TrySendOverflowPacket+0xdc>)
 800d1ba:	695b      	ldr	r3, [r3, #20]
 800d1bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1be:	e00b      	b.n	800d1d8 <_TrySendOverflowPacket+0x34>
 800d1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c2:	b2da      	uxtb	r2, r3
 800d1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c6:	1c59      	adds	r1, r3, #1
 800d1c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d1ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d1ce:	b2d2      	uxtb	r2, r2
 800d1d0:	701a      	strb	r2, [r3, #0]
 800d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d4:	09db      	lsrs	r3, r3, #7
 800d1d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1da:	2b7f      	cmp	r3, #127	; 0x7f
 800d1dc:	d8f0      	bhi.n	800d1c0 <_TrySendOverflowPacket+0x1c>
 800d1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e0:	1c5a      	adds	r2, r3, #1
 800d1e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d1e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1e6:	b2d2      	uxtb	r2, r2
 800d1e8:	701a      	strb	r2, [r3, #0]
 800d1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ec:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800d1ee:	4b25      	ldr	r3, [pc, #148]	; (800d284 <_TrySendOverflowPacket+0xe0>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800d1f4:	4b22      	ldr	r3, [pc, #136]	; (800d280 <_TrySendOverflowPacket+0xdc>)
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	69ba      	ldr	r2, [r7, #24]
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	627b      	str	r3, [r7, #36]	; 0x24
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	623b      	str	r3, [r7, #32]
 800d206:	e00b      	b.n	800d220 <_TrySendOverflowPacket+0x7c>
 800d208:	6a3b      	ldr	r3, [r7, #32]
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	1c59      	adds	r1, r3, #1
 800d210:	6279      	str	r1, [r7, #36]	; 0x24
 800d212:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d216:	b2d2      	uxtb	r2, r2
 800d218:	701a      	strb	r2, [r3, #0]
 800d21a:	6a3b      	ldr	r3, [r7, #32]
 800d21c:	09db      	lsrs	r3, r3, #7
 800d21e:	623b      	str	r3, [r7, #32]
 800d220:	6a3b      	ldr	r3, [r7, #32]
 800d222:	2b7f      	cmp	r3, #127	; 0x7f
 800d224:	d8f0      	bhi.n	800d208 <_TrySendOverflowPacket+0x64>
 800d226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d228:	1c5a      	adds	r2, r3, #1
 800d22a:	627a      	str	r2, [r7, #36]	; 0x24
 800d22c:	6a3a      	ldr	r2, [r7, #32]
 800d22e:	b2d2      	uxtb	r2, r2
 800d230:	701a      	strb	r2, [r3, #0]
 800d232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d234:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800d236:	4b12      	ldr	r3, [pc, #72]	; (800d280 <_TrySendOverflowPacket+0xdc>)
 800d238:	785b      	ldrb	r3, [r3, #1]
 800d23a:	4618      	mov	r0, r3
 800d23c:	1d3b      	adds	r3, r7, #4
 800d23e:	69fa      	ldr	r2, [r7, #28]
 800d240:	1ad3      	subs	r3, r2, r3
 800d242:	461a      	mov	r2, r3
 800d244:	1d3b      	adds	r3, r7, #4
 800d246:	4619      	mov	r1, r3
 800d248:	f7f2 ffe2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800d24c:	4603      	mov	r3, r0
 800d24e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d009      	beq.n	800d26a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800d256:	4a0a      	ldr	r2, [pc, #40]	; (800d280 <_TrySendOverflowPacket+0xdc>)
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800d25c:	4b08      	ldr	r3, [pc, #32]	; (800d280 <_TrySendOverflowPacket+0xdc>)
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	3b01      	subs	r3, #1
 800d262:	b2da      	uxtb	r2, r3
 800d264:	4b06      	ldr	r3, [pc, #24]	; (800d280 <_TrySendOverflowPacket+0xdc>)
 800d266:	701a      	strb	r2, [r3, #0]
 800d268:	e004      	b.n	800d274 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800d26a:	4b05      	ldr	r3, [pc, #20]	; (800d280 <_TrySendOverflowPacket+0xdc>)
 800d26c:	695b      	ldr	r3, [r3, #20]
 800d26e:	3301      	adds	r3, #1
 800d270:	4a03      	ldr	r2, [pc, #12]	; (800d280 <_TrySendOverflowPacket+0xdc>)
 800d272:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800d274:	693b      	ldr	r3, [r7, #16]
}
 800d276:	4618      	mov	r0, r3
 800d278:	3730      	adds	r7, #48	; 0x30
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	2001a204 	.word	0x2001a204
 800d284:	e0001004 	.word	0xe0001004

0800d288 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800d288:	b580      	push	{r7, lr}
 800d28a:	b08a      	sub	sp, #40	; 0x28
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800d294:	4b6c      	ldr	r3, [pc, #432]	; (800d448 <_SendPacket+0x1c0>)
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d010      	beq.n	800d2be <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800d29c:	4b6a      	ldr	r3, [pc, #424]	; (800d448 <_SendPacket+0x1c0>)
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	f000 80a3 	beq.w	800d3ec <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800d2a6:	4b68      	ldr	r3, [pc, #416]	; (800d448 <_SendPacket+0x1c0>)
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d109      	bne.n	800d2c2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800d2ae:	f7ff ff79 	bl	800d1a4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800d2b2:	4b65      	ldr	r3, [pc, #404]	; (800d448 <_SendPacket+0x1c0>)
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	2b01      	cmp	r3, #1
 800d2b8:	f040 809a 	bne.w	800d3f0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800d2bc:	e001      	b.n	800d2c2 <_SendPacket+0x3a>
    goto Send;
 800d2be:	bf00      	nop
 800d2c0:	e000      	b.n	800d2c4 <_SendPacket+0x3c>
Send:
 800d2c2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b1f      	cmp	r3, #31
 800d2c8:	d809      	bhi.n	800d2de <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800d2ca:	4b5f      	ldr	r3, [pc, #380]	; (800d448 <_SendPacket+0x1c0>)
 800d2cc:	69da      	ldr	r2, [r3, #28]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800d2d4:	f003 0301 	and.w	r3, r3, #1
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f040 808b 	bne.w	800d3f4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2b17      	cmp	r3, #23
 800d2e2:	d807      	bhi.n	800d2f4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	60fb      	str	r3, [r7, #12]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	701a      	strb	r2, [r3, #0]
 800d2f2:	e03d      	b.n	800d370 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800d2f4:	68ba      	ldr	r2, [r7, #8]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	1ad3      	subs	r3, r2, r3
 800d2fa:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	2b7f      	cmp	r3, #127	; 0x7f
 800d300:	d912      	bls.n	800d328 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800d302:	69fb      	ldr	r3, [r7, #28]
 800d304:	09da      	lsrs	r2, r3, #7
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3b01      	subs	r3, #1
 800d30a:	60fb      	str	r3, [r7, #12]
 800d30c:	b2d2      	uxtb	r2, r2
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800d312:	69fb      	ldr	r3, [r7, #28]
 800d314:	b2db      	uxtb	r3, r3
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	3a01      	subs	r2, #1
 800d31a:	60fa      	str	r2, [r7, #12]
 800d31c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d320:	b2da      	uxtb	r2, r3
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	701a      	strb	r2, [r3, #0]
 800d326:	e006      	b.n	800d336 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	3b01      	subs	r3, #1
 800d32c:	60fb      	str	r3, [r7, #12]
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	b2da      	uxtb	r2, r3
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2b7f      	cmp	r3, #127	; 0x7f
 800d33a:	d912      	bls.n	800d362 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	09da      	lsrs	r2, r3, #7
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	3b01      	subs	r3, #1
 800d344:	60fb      	str	r3, [r7, #12]
 800d346:	b2d2      	uxtb	r2, r2
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	3a01      	subs	r2, #1
 800d354:	60fa      	str	r2, [r7, #12]
 800d356:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d35a:	b2da      	uxtb	r2, r3
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	701a      	strb	r2, [r3, #0]
 800d360:	e006      	b.n	800d370 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	3b01      	subs	r3, #1
 800d366:	60fb      	str	r3, [r7, #12]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	b2da      	uxtb	r2, r3
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800d370:	4b36      	ldr	r3, [pc, #216]	; (800d44c <_SendPacket+0x1c4>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800d376:	4b34      	ldr	r3, [pc, #208]	; (800d448 <_SendPacket+0x1c0>)
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	69ba      	ldr	r2, [r7, #24]
 800d37c:	1ad3      	subs	r3, r2, r3
 800d37e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	627b      	str	r3, [r7, #36]	; 0x24
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	623b      	str	r3, [r7, #32]
 800d388:	e00b      	b.n	800d3a2 <_SendPacket+0x11a>
 800d38a:	6a3b      	ldr	r3, [r7, #32]
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d390:	1c59      	adds	r1, r3, #1
 800d392:	6279      	str	r1, [r7, #36]	; 0x24
 800d394:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d398:	b2d2      	uxtb	r2, r2
 800d39a:	701a      	strb	r2, [r3, #0]
 800d39c:	6a3b      	ldr	r3, [r7, #32]
 800d39e:	09db      	lsrs	r3, r3, #7
 800d3a0:	623b      	str	r3, [r7, #32]
 800d3a2:	6a3b      	ldr	r3, [r7, #32]
 800d3a4:	2b7f      	cmp	r3, #127	; 0x7f
 800d3a6:	d8f0      	bhi.n	800d38a <_SendPacket+0x102>
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	627a      	str	r2, [r7, #36]	; 0x24
 800d3ae:	6a3a      	ldr	r2, [r7, #32]
 800d3b0:	b2d2      	uxtb	r2, r2
 800d3b2:	701a      	strb	r2, [r3, #0]
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800d3b8:	4b23      	ldr	r3, [pc, #140]	; (800d448 <_SendPacket+0x1c0>)
 800d3ba:	785b      	ldrb	r3, [r3, #1]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	68ba      	ldr	r2, [r7, #8]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	1ad3      	subs	r3, r2, r3
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	68f9      	ldr	r1, [r7, #12]
 800d3c8:	f7f2 ff22 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d003      	beq.n	800d3de <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800d3d6:	4a1c      	ldr	r2, [pc, #112]	; (800d448 <_SendPacket+0x1c0>)
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	60d3      	str	r3, [r2, #12]
 800d3dc:	e00b      	b.n	800d3f6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800d3de:	4b1a      	ldr	r3, [pc, #104]	; (800d448 <_SendPacket+0x1c0>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	b2da      	uxtb	r2, r3
 800d3e6:	4b18      	ldr	r3, [pc, #96]	; (800d448 <_SendPacket+0x1c0>)
 800d3e8:	701a      	strb	r2, [r3, #0]
 800d3ea:	e004      	b.n	800d3f6 <_SendPacket+0x16e>
    goto SendDone;
 800d3ec:	bf00      	nop
 800d3ee:	e002      	b.n	800d3f6 <_SendPacket+0x16e>
      goto SendDone;
 800d3f0:	bf00      	nop
 800d3f2:	e000      	b.n	800d3f6 <_SendPacket+0x16e>
      goto SendDone;
 800d3f4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800d3f6:	4b14      	ldr	r3, [pc, #80]	; (800d448 <_SendPacket+0x1c0>)
 800d3f8:	7e1b      	ldrb	r3, [r3, #24]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	4a14      	ldr	r2, [pc, #80]	; (800d450 <_SendPacket+0x1c8>)
 800d3fe:	460b      	mov	r3, r1
 800d400:	005b      	lsls	r3, r3, #1
 800d402:	440b      	add	r3, r1
 800d404:	00db      	lsls	r3, r3, #3
 800d406:	4413      	add	r3, r2
 800d408:	336c      	adds	r3, #108	; 0x6c
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	4b0e      	ldr	r3, [pc, #56]	; (800d448 <_SendPacket+0x1c0>)
 800d40e:	7e1b      	ldrb	r3, [r3, #24]
 800d410:	4618      	mov	r0, r3
 800d412:	490f      	ldr	r1, [pc, #60]	; (800d450 <_SendPacket+0x1c8>)
 800d414:	4603      	mov	r3, r0
 800d416:	005b      	lsls	r3, r3, #1
 800d418:	4403      	add	r3, r0
 800d41a:	00db      	lsls	r3, r3, #3
 800d41c:	440b      	add	r3, r1
 800d41e:	3370      	adds	r3, #112	; 0x70
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	429a      	cmp	r2, r3
 800d424:	d00b      	beq.n	800d43e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800d426:	4b08      	ldr	r3, [pc, #32]	; (800d448 <_SendPacket+0x1c0>)
 800d428:	789b      	ldrb	r3, [r3, #2]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d107      	bne.n	800d43e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800d42e:	4b06      	ldr	r3, [pc, #24]	; (800d448 <_SendPacket+0x1c0>)
 800d430:	2201      	movs	r2, #1
 800d432:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800d434:	f7ff fe46 	bl	800d0c4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800d438:	4b03      	ldr	r3, [pc, #12]	; (800d448 <_SendPacket+0x1c0>)
 800d43a:	2200      	movs	r2, #0
 800d43c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800d43e:	bf00      	nop
 800d440:	3728      	adds	r7, #40	; 0x28
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	2001a204 	.word	0x2001a204
 800d44c:	e0001004 	.word	0xe0001004
 800d450:	20019d4c 	.word	0x20019d4c

0800d454 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d45c:	f3ef 8311 	mrs	r3, BASEPRI
 800d460:	f04f 0120 	mov.w	r1, #32
 800d464:	f381 8811 	msr	BASEPRI, r1
 800d468:	60fb      	str	r3, [r7, #12]
 800d46a:	4808      	ldr	r0, [pc, #32]	; (800d48c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800d46c:	f7ff fe1d 	bl	800d0aa <_PreparePacket>
 800d470:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	68b9      	ldr	r1, [r7, #8]
 800d476:	68b8      	ldr	r0, [r7, #8]
 800d478:	f7ff ff06 	bl	800d288 <_SendPacket>
  RECORD_END();
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f383 8811 	msr	BASEPRI, r3
}
 800d482:	bf00      	nop
 800d484:	3710      	adds	r7, #16
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	2001a234 	.word	0x2001a234

0800d490 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800d490:	b580      	push	{r7, lr}
 800d492:	b088      	sub	sp, #32
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d49a:	f3ef 8311 	mrs	r3, BASEPRI
 800d49e:	f04f 0120 	mov.w	r1, #32
 800d4a2:	f381 8811 	msr	BASEPRI, r1
 800d4a6:	617b      	str	r3, [r7, #20]
 800d4a8:	4816      	ldr	r0, [pc, #88]	; (800d504 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800d4aa:	f7ff fdfe 	bl	800d0aa <_PreparePacket>
 800d4ae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	61fb      	str	r3, [r7, #28]
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	61bb      	str	r3, [r7, #24]
 800d4bc:	e00b      	b.n	800d4d6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800d4be:	69bb      	ldr	r3, [r7, #24]
 800d4c0:	b2da      	uxtb	r2, r3
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	1c59      	adds	r1, r3, #1
 800d4c6:	61f9      	str	r1, [r7, #28]
 800d4c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d4cc:	b2d2      	uxtb	r2, r2
 800d4ce:	701a      	strb	r2, [r3, #0]
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	09db      	lsrs	r3, r3, #7
 800d4d4:	61bb      	str	r3, [r7, #24]
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	2b7f      	cmp	r3, #127	; 0x7f
 800d4da:	d8f0      	bhi.n	800d4be <SEGGER_SYSVIEW_RecordU32+0x2e>
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	1c5a      	adds	r2, r3, #1
 800d4e0:	61fa      	str	r2, [r7, #28]
 800d4e2:	69ba      	ldr	r2, [r7, #24]
 800d4e4:	b2d2      	uxtb	r2, r2
 800d4e6:	701a      	strb	r2, [r3, #0]
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	68f9      	ldr	r1, [r7, #12]
 800d4f0:	6938      	ldr	r0, [r7, #16]
 800d4f2:	f7ff fec9 	bl	800d288 <_SendPacket>
  RECORD_END();
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	f383 8811 	msr	BASEPRI, r3
}
 800d4fc:	bf00      	nop
 800d4fe:	3720      	adds	r7, #32
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	2001a234 	.word	0x2001a234

0800d508 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800d508:	b580      	push	{r7, lr}
 800d50a:	b08c      	sub	sp, #48	; 0x30
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d514:	f3ef 8311 	mrs	r3, BASEPRI
 800d518:	f04f 0120 	mov.w	r1, #32
 800d51c:	f381 8811 	msr	BASEPRI, r1
 800d520:	61fb      	str	r3, [r7, #28]
 800d522:	4825      	ldr	r0, [pc, #148]	; (800d5b8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800d524:	f7ff fdc1 	bl	800d0aa <_PreparePacket>
 800d528:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d52a:	69bb      	ldr	r3, [r7, #24]
 800d52c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	62bb      	str	r3, [r7, #40]	; 0x28
 800d536:	e00b      	b.n	800d550 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800d538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53a:	b2da      	uxtb	r2, r3
 800d53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53e:	1c59      	adds	r1, r3, #1
 800d540:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d542:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d546:	b2d2      	uxtb	r2, r2
 800d548:	701a      	strb	r2, [r3, #0]
 800d54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54c:	09db      	lsrs	r3, r3, #7
 800d54e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d552:	2b7f      	cmp	r3, #127	; 0x7f
 800d554:	d8f0      	bhi.n	800d538 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800d556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d558:	1c5a      	adds	r2, r3, #1
 800d55a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d55c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d55e:	b2d2      	uxtb	r2, r2
 800d560:	701a      	strb	r2, [r3, #0]
 800d562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d564:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	627b      	str	r3, [r7, #36]	; 0x24
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	623b      	str	r3, [r7, #32]
 800d56e:	e00b      	b.n	800d588 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800d570:	6a3b      	ldr	r3, [r7, #32]
 800d572:	b2da      	uxtb	r2, r3
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	1c59      	adds	r1, r3, #1
 800d578:	6279      	str	r1, [r7, #36]	; 0x24
 800d57a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d57e:	b2d2      	uxtb	r2, r2
 800d580:	701a      	strb	r2, [r3, #0]
 800d582:	6a3b      	ldr	r3, [r7, #32]
 800d584:	09db      	lsrs	r3, r3, #7
 800d586:	623b      	str	r3, [r7, #32]
 800d588:	6a3b      	ldr	r3, [r7, #32]
 800d58a:	2b7f      	cmp	r3, #127	; 0x7f
 800d58c:	d8f0      	bhi.n	800d570 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800d58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d590:	1c5a      	adds	r2, r3, #1
 800d592:	627a      	str	r2, [r7, #36]	; 0x24
 800d594:	6a3a      	ldr	r2, [r7, #32]
 800d596:	b2d2      	uxtb	r2, r2
 800d598:	701a      	strb	r2, [r3, #0]
 800d59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d59e:	68fa      	ldr	r2, [r7, #12]
 800d5a0:	6979      	ldr	r1, [r7, #20]
 800d5a2:	69b8      	ldr	r0, [r7, #24]
 800d5a4:	f7ff fe70 	bl	800d288 <_SendPacket>
  RECORD_END();
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	f383 8811 	msr	BASEPRI, r3
}
 800d5ae:	bf00      	nop
 800d5b0:	3730      	adds	r7, #48	; 0x30
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	2001a234 	.word	0x2001a234

0800d5bc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08e      	sub	sp, #56	; 0x38
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
 800d5c8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800d5ca:	f3ef 8311 	mrs	r3, BASEPRI
 800d5ce:	f04f 0120 	mov.w	r1, #32
 800d5d2:	f381 8811 	msr	BASEPRI, r1
 800d5d6:	61fb      	str	r3, [r7, #28]
 800d5d8:	4832      	ldr	r0, [pc, #200]	; (800d6a4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800d5da:	f7ff fd66 	bl	800d0aa <_PreparePacket>
 800d5de:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	637b      	str	r3, [r7, #52]	; 0x34
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	633b      	str	r3, [r7, #48]	; 0x30
 800d5ec:	e00b      	b.n	800d606 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800d5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f0:	b2da      	uxtb	r2, r3
 800d5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f4:	1c59      	adds	r1, r3, #1
 800d5f6:	6379      	str	r1, [r7, #52]	; 0x34
 800d5f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d5fc:	b2d2      	uxtb	r2, r2
 800d5fe:	701a      	strb	r2, [r3, #0]
 800d600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d602:	09db      	lsrs	r3, r3, #7
 800d604:	633b      	str	r3, [r7, #48]	; 0x30
 800d606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d608:	2b7f      	cmp	r3, #127	; 0x7f
 800d60a:	d8f0      	bhi.n	800d5ee <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800d60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d60e:	1c5a      	adds	r2, r3, #1
 800d610:	637a      	str	r2, [r7, #52]	; 0x34
 800d612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d614:	b2d2      	uxtb	r2, r2
 800d616:	701a      	strb	r2, [r3, #0]
 800d618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d61a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	62bb      	str	r3, [r7, #40]	; 0x28
 800d624:	e00b      	b.n	800d63e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800d626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62c:	1c59      	adds	r1, r3, #1
 800d62e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d630:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d634:	b2d2      	uxtb	r2, r2
 800d636:	701a      	strb	r2, [r3, #0]
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	09db      	lsrs	r3, r3, #7
 800d63c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d640:	2b7f      	cmp	r3, #127	; 0x7f
 800d642:	d8f0      	bhi.n	800d626 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800d644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d646:	1c5a      	adds	r2, r3, #1
 800d648:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d64a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d64c:	b2d2      	uxtb	r2, r2
 800d64e:	701a      	strb	r2, [r3, #0]
 800d650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d652:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	627b      	str	r3, [r7, #36]	; 0x24
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	623b      	str	r3, [r7, #32]
 800d65c:	e00b      	b.n	800d676 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	b2da      	uxtb	r2, r3
 800d662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d664:	1c59      	adds	r1, r3, #1
 800d666:	6279      	str	r1, [r7, #36]	; 0x24
 800d668:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d66c:	b2d2      	uxtb	r2, r2
 800d66e:	701a      	strb	r2, [r3, #0]
 800d670:	6a3b      	ldr	r3, [r7, #32]
 800d672:	09db      	lsrs	r3, r3, #7
 800d674:	623b      	str	r3, [r7, #32]
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	2b7f      	cmp	r3, #127	; 0x7f
 800d67a:	d8f0      	bhi.n	800d65e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	1c5a      	adds	r2, r3, #1
 800d680:	627a      	str	r2, [r7, #36]	; 0x24
 800d682:	6a3a      	ldr	r2, [r7, #32]
 800d684:	b2d2      	uxtb	r2, r2
 800d686:	701a      	strb	r2, [r3, #0]
 800d688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d68c:	68fa      	ldr	r2, [r7, #12]
 800d68e:	6979      	ldr	r1, [r7, #20]
 800d690:	69b8      	ldr	r0, [r7, #24]
 800d692:	f7ff fdf9 	bl	800d288 <_SendPacket>
  RECORD_END();
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	f383 8811 	msr	BASEPRI, r3
}
 800d69c:	bf00      	nop
 800d69e:	3738      	adds	r7, #56	; 0x38
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	2001a234 	.word	0x2001a234

0800d6a8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b090      	sub	sp, #64	; 0x40
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
 800d6b4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d6b6:	f3ef 8311 	mrs	r3, BASEPRI
 800d6ba:	f04f 0120 	mov.w	r1, #32
 800d6be:	f381 8811 	msr	BASEPRI, r1
 800d6c2:	61fb      	str	r3, [r7, #28]
 800d6c4:	4840      	ldr	r0, [pc, #256]	; (800d7c8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800d6c6:	f7ff fcf0 	bl	800d0aa <_PreparePacket>
 800d6ca:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d6cc:	69bb      	ldr	r3, [r7, #24]
 800d6ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d6d8:	e00b      	b.n	800d6f2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800d6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6dc:	b2da      	uxtb	r2, r3
 800d6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6e0:	1c59      	adds	r1, r3, #1
 800d6e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d6e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d6e8:	b2d2      	uxtb	r2, r2
 800d6ea:	701a      	strb	r2, [r3, #0]
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ee:	09db      	lsrs	r3, r3, #7
 800d6f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f4:	2b7f      	cmp	r3, #127	; 0x7f
 800d6f6:	d8f0      	bhi.n	800d6da <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800d6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6fa:	1c5a      	adds	r2, r3, #1
 800d6fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d6fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d700:	b2d2      	uxtb	r2, r2
 800d702:	701a      	strb	r2, [r3, #0]
 800d704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d706:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	637b      	str	r3, [r7, #52]	; 0x34
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	633b      	str	r3, [r7, #48]	; 0x30
 800d710:	e00b      	b.n	800d72a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800d712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d714:	b2da      	uxtb	r2, r3
 800d716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d718:	1c59      	adds	r1, r3, #1
 800d71a:	6379      	str	r1, [r7, #52]	; 0x34
 800d71c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d720:	b2d2      	uxtb	r2, r2
 800d722:	701a      	strb	r2, [r3, #0]
 800d724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d726:	09db      	lsrs	r3, r3, #7
 800d728:	633b      	str	r3, [r7, #48]	; 0x30
 800d72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72c:	2b7f      	cmp	r3, #127	; 0x7f
 800d72e:	d8f0      	bhi.n	800d712 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800d730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d732:	1c5a      	adds	r2, r3, #1
 800d734:	637a      	str	r2, [r7, #52]	; 0x34
 800d736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d738:	b2d2      	uxtb	r2, r2
 800d73a:	701a      	strb	r2, [r3, #0]
 800d73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d73e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	62bb      	str	r3, [r7, #40]	; 0x28
 800d748:	e00b      	b.n	800d762 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800d74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74c:	b2da      	uxtb	r2, r3
 800d74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d750:	1c59      	adds	r1, r3, #1
 800d752:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d754:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d758:	b2d2      	uxtb	r2, r2
 800d75a:	701a      	strb	r2, [r3, #0]
 800d75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75e:	09db      	lsrs	r3, r3, #7
 800d760:	62bb      	str	r3, [r7, #40]	; 0x28
 800d762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d764:	2b7f      	cmp	r3, #127	; 0x7f
 800d766:	d8f0      	bhi.n	800d74a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800d768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76a:	1c5a      	adds	r2, r3, #1
 800d76c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d76e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d770:	b2d2      	uxtb	r2, r2
 800d772:	701a      	strb	r2, [r3, #0]
 800d774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d776:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	627b      	str	r3, [r7, #36]	; 0x24
 800d77c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d77e:	623b      	str	r3, [r7, #32]
 800d780:	e00b      	b.n	800d79a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	b2da      	uxtb	r2, r3
 800d786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d788:	1c59      	adds	r1, r3, #1
 800d78a:	6279      	str	r1, [r7, #36]	; 0x24
 800d78c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d790:	b2d2      	uxtb	r2, r2
 800d792:	701a      	strb	r2, [r3, #0]
 800d794:	6a3b      	ldr	r3, [r7, #32]
 800d796:	09db      	lsrs	r3, r3, #7
 800d798:	623b      	str	r3, [r7, #32]
 800d79a:	6a3b      	ldr	r3, [r7, #32]
 800d79c:	2b7f      	cmp	r3, #127	; 0x7f
 800d79e:	d8f0      	bhi.n	800d782 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a2:	1c5a      	adds	r2, r3, #1
 800d7a4:	627a      	str	r2, [r7, #36]	; 0x24
 800d7a6:	6a3a      	ldr	r2, [r7, #32]
 800d7a8:	b2d2      	uxtb	r2, r2
 800d7aa:	701a      	strb	r2, [r3, #0]
 800d7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	6979      	ldr	r1, [r7, #20]
 800d7b4:	69b8      	ldr	r0, [r7, #24]
 800d7b6:	f7ff fd67 	bl	800d288 <_SendPacket>
  RECORD_END();
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	f383 8811 	msr	BASEPRI, r3
}
 800d7c0:	bf00      	nop
 800d7c2:	3740      	adds	r7, #64	; 0x40
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	2001a234 	.word	0x2001a234

0800d7cc <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b092      	sub	sp, #72	; 0x48
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	607a      	str	r2, [r7, #4]
 800d7d8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800d7da:	f3ef 8311 	mrs	r3, BASEPRI
 800d7de:	f04f 0120 	mov.w	r1, #32
 800d7e2:	f381 8811 	msr	BASEPRI, r1
 800d7e6:	61fb      	str	r3, [r7, #28]
 800d7e8:	484e      	ldr	r0, [pc, #312]	; (800d924 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800d7ea:	f7ff fc5e 	bl	800d0aa <_PreparePacket>
 800d7ee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	647b      	str	r3, [r7, #68]	; 0x44
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	643b      	str	r3, [r7, #64]	; 0x40
 800d7fc:	e00b      	b.n	800d816 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800d7fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d800:	b2da      	uxtb	r2, r3
 800d802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d804:	1c59      	adds	r1, r3, #1
 800d806:	6479      	str	r1, [r7, #68]	; 0x44
 800d808:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d80c:	b2d2      	uxtb	r2, r2
 800d80e:	701a      	strb	r2, [r3, #0]
 800d810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d812:	09db      	lsrs	r3, r3, #7
 800d814:	643b      	str	r3, [r7, #64]	; 0x40
 800d816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d818:	2b7f      	cmp	r3, #127	; 0x7f
 800d81a:	d8f0      	bhi.n	800d7fe <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800d81c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d81e:	1c5a      	adds	r2, r3, #1
 800d820:	647a      	str	r2, [r7, #68]	; 0x44
 800d822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d824:	b2d2      	uxtb	r2, r2
 800d826:	701a      	strb	r2, [r3, #0]
 800d828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d82a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	63bb      	str	r3, [r7, #56]	; 0x38
 800d834:	e00b      	b.n	800d84e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800d836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d838:	b2da      	uxtb	r2, r3
 800d83a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d83c:	1c59      	adds	r1, r3, #1
 800d83e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d840:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d844:	b2d2      	uxtb	r2, r2
 800d846:	701a      	strb	r2, [r3, #0]
 800d848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84a:	09db      	lsrs	r3, r3, #7
 800d84c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d850:	2b7f      	cmp	r3, #127	; 0x7f
 800d852:	d8f0      	bhi.n	800d836 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 800d854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d856:	1c5a      	adds	r2, r3, #1
 800d858:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d85a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d85c:	b2d2      	uxtb	r2, r2
 800d85e:	701a      	strb	r2, [r3, #0]
 800d860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d862:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	637b      	str	r3, [r7, #52]	; 0x34
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	633b      	str	r3, [r7, #48]	; 0x30
 800d86c:	e00b      	b.n	800d886 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800d86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d870:	b2da      	uxtb	r2, r3
 800d872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d874:	1c59      	adds	r1, r3, #1
 800d876:	6379      	str	r1, [r7, #52]	; 0x34
 800d878:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d87c:	b2d2      	uxtb	r2, r2
 800d87e:	701a      	strb	r2, [r3, #0]
 800d880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d882:	09db      	lsrs	r3, r3, #7
 800d884:	633b      	str	r3, [r7, #48]	; 0x30
 800d886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d888:	2b7f      	cmp	r3, #127	; 0x7f
 800d88a:	d8f0      	bhi.n	800d86e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800d88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d88e:	1c5a      	adds	r2, r3, #1
 800d890:	637a      	str	r2, [r7, #52]	; 0x34
 800d892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d894:	b2d2      	uxtb	r2, r2
 800d896:	701a      	strb	r2, [r3, #0]
 800d898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d89a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8a4:	e00b      	b.n	800d8be <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800d8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ac:	1c59      	adds	r1, r3, #1
 800d8ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d8b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d8b4:	b2d2      	uxtb	r2, r2
 800d8b6:	701a      	strb	r2, [r3, #0]
 800d8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ba:	09db      	lsrs	r3, r3, #7
 800d8bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c0:	2b7f      	cmp	r3, #127	; 0x7f
 800d8c2:	d8f0      	bhi.n	800d8a6 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 800d8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c6:	1c5a      	adds	r2, r3, #1
 800d8c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d8ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8cc:	b2d2      	uxtb	r2, r2
 800d8ce:	701a      	strb	r2, [r3, #0]
 800d8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d8d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8da:	623b      	str	r3, [r7, #32]
 800d8dc:	e00b      	b.n	800d8f6 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800d8de:	6a3b      	ldr	r3, [r7, #32]
 800d8e0:	b2da      	uxtb	r2, r3
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e4:	1c59      	adds	r1, r3, #1
 800d8e6:	6279      	str	r1, [r7, #36]	; 0x24
 800d8e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d8ec:	b2d2      	uxtb	r2, r2
 800d8ee:	701a      	strb	r2, [r3, #0]
 800d8f0:	6a3b      	ldr	r3, [r7, #32]
 800d8f2:	09db      	lsrs	r3, r3, #7
 800d8f4:	623b      	str	r3, [r7, #32]
 800d8f6:	6a3b      	ldr	r3, [r7, #32]
 800d8f8:	2b7f      	cmp	r3, #127	; 0x7f
 800d8fa:	d8f0      	bhi.n	800d8de <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fe:	1c5a      	adds	r2, r3, #1
 800d900:	627a      	str	r2, [r7, #36]	; 0x24
 800d902:	6a3a      	ldr	r2, [r7, #32]
 800d904:	b2d2      	uxtb	r2, r2
 800d906:	701a      	strb	r2, [r3, #0]
 800d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	6979      	ldr	r1, [r7, #20]
 800d910:	69b8      	ldr	r0, [r7, #24]
 800d912:	f7ff fcb9 	bl	800d288 <_SendPacket>
  RECORD_END();
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	f383 8811 	msr	BASEPRI, r3
}
 800d91c:	bf00      	nop
 800d91e:	3748      	adds	r7, #72	; 0x48
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	2001a234 	.word	0x2001a234

0800d928 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800d928:	b580      	push	{r7, lr}
 800d92a:	b08c      	sub	sp, #48	; 0x30
 800d92c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800d92e:	4b58      	ldr	r3, [pc, #352]	; (800da90 <SEGGER_SYSVIEW_Start+0x168>)
 800d930:	2201      	movs	r2, #1
 800d932:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800d934:	f3ef 8311 	mrs	r3, BASEPRI
 800d938:	f04f 0120 	mov.w	r1, #32
 800d93c:	f381 8811 	msr	BASEPRI, r1
 800d940:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800d942:	4b53      	ldr	r3, [pc, #332]	; (800da90 <SEGGER_SYSVIEW_Start+0x168>)
 800d944:	785b      	ldrb	r3, [r3, #1]
 800d946:	220a      	movs	r2, #10
 800d948:	4952      	ldr	r1, [pc, #328]	; (800da94 <SEGGER_SYSVIEW_Start+0x16c>)
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7f2 fc60 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800d956:	200a      	movs	r0, #10
 800d958:	f7ff fd7c 	bl	800d454 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d95c:	f3ef 8311 	mrs	r3, BASEPRI
 800d960:	f04f 0120 	mov.w	r1, #32
 800d964:	f381 8811 	msr	BASEPRI, r1
 800d968:	60bb      	str	r3, [r7, #8]
 800d96a:	484b      	ldr	r0, [pc, #300]	; (800da98 <SEGGER_SYSVIEW_Start+0x170>)
 800d96c:	f7ff fb9d 	bl	800d0aa <_PreparePacket>
 800d970:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d97a:	4b45      	ldr	r3, [pc, #276]	; (800da90 <SEGGER_SYSVIEW_Start+0x168>)
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d980:	e00b      	b.n	800d99a <SEGGER_SYSVIEW_Start+0x72>
 800d982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d984:	b2da      	uxtb	r2, r3
 800d986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d988:	1c59      	adds	r1, r3, #1
 800d98a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d98c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d990:	b2d2      	uxtb	r2, r2
 800d992:	701a      	strb	r2, [r3, #0]
 800d994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d996:	09db      	lsrs	r3, r3, #7
 800d998:	62bb      	str	r3, [r7, #40]	; 0x28
 800d99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d99c:	2b7f      	cmp	r3, #127	; 0x7f
 800d99e:	d8f0      	bhi.n	800d982 <SEGGER_SYSVIEW_Start+0x5a>
 800d9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a2:	1c5a      	adds	r2, r3, #1
 800d9a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d9a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9a8:	b2d2      	uxtb	r2, r2
 800d9aa:	701a      	strb	r2, [r3, #0]
 800d9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	627b      	str	r3, [r7, #36]	; 0x24
 800d9b4:	4b36      	ldr	r3, [pc, #216]	; (800da90 <SEGGER_SYSVIEW_Start+0x168>)
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	623b      	str	r3, [r7, #32]
 800d9ba:	e00b      	b.n	800d9d4 <SEGGER_SYSVIEW_Start+0xac>
 800d9bc:	6a3b      	ldr	r3, [r7, #32]
 800d9be:	b2da      	uxtb	r2, r3
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c2:	1c59      	adds	r1, r3, #1
 800d9c4:	6279      	str	r1, [r7, #36]	; 0x24
 800d9c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d9ca:	b2d2      	uxtb	r2, r2
 800d9cc:	701a      	strb	r2, [r3, #0]
 800d9ce:	6a3b      	ldr	r3, [r7, #32]
 800d9d0:	09db      	lsrs	r3, r3, #7
 800d9d2:	623b      	str	r3, [r7, #32]
 800d9d4:	6a3b      	ldr	r3, [r7, #32]
 800d9d6:	2b7f      	cmp	r3, #127	; 0x7f
 800d9d8:	d8f0      	bhi.n	800d9bc <SEGGER_SYSVIEW_Start+0x94>
 800d9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9dc:	1c5a      	adds	r2, r3, #1
 800d9de:	627a      	str	r2, [r7, #36]	; 0x24
 800d9e0:	6a3a      	ldr	r2, [r7, #32]
 800d9e2:	b2d2      	uxtb	r2, r2
 800d9e4:	701a      	strb	r2, [r3, #0]
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	61fb      	str	r3, [r7, #28]
 800d9ee:	4b28      	ldr	r3, [pc, #160]	; (800da90 <SEGGER_SYSVIEW_Start+0x168>)
 800d9f0:	691b      	ldr	r3, [r3, #16]
 800d9f2:	61bb      	str	r3, [r7, #24]
 800d9f4:	e00b      	b.n	800da0e <SEGGER_SYSVIEW_Start+0xe6>
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	b2da      	uxtb	r2, r3
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	1c59      	adds	r1, r3, #1
 800d9fe:	61f9      	str	r1, [r7, #28]
 800da00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800da04:	b2d2      	uxtb	r2, r2
 800da06:	701a      	strb	r2, [r3, #0]
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	09db      	lsrs	r3, r3, #7
 800da0c:	61bb      	str	r3, [r7, #24]
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	2b7f      	cmp	r3, #127	; 0x7f
 800da12:	d8f0      	bhi.n	800d9f6 <SEGGER_SYSVIEW_Start+0xce>
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	1c5a      	adds	r2, r3, #1
 800da18:	61fa      	str	r2, [r7, #28]
 800da1a:	69ba      	ldr	r2, [r7, #24]
 800da1c:	b2d2      	uxtb	r2, r2
 800da1e:	701a      	strb	r2, [r3, #0]
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	617b      	str	r3, [r7, #20]
 800da28:	2300      	movs	r3, #0
 800da2a:	613b      	str	r3, [r7, #16]
 800da2c:	e00b      	b.n	800da46 <SEGGER_SYSVIEW_Start+0x11e>
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	b2da      	uxtb	r2, r3
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	1c59      	adds	r1, r3, #1
 800da36:	6179      	str	r1, [r7, #20]
 800da38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800da3c:	b2d2      	uxtb	r2, r2
 800da3e:	701a      	strb	r2, [r3, #0]
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	09db      	lsrs	r3, r3, #7
 800da44:	613b      	str	r3, [r7, #16]
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	2b7f      	cmp	r3, #127	; 0x7f
 800da4a:	d8f0      	bhi.n	800da2e <SEGGER_SYSVIEW_Start+0x106>
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	1c5a      	adds	r2, r3, #1
 800da50:	617a      	str	r2, [r7, #20]
 800da52:	693a      	ldr	r2, [r7, #16]
 800da54:	b2d2      	uxtb	r2, r2
 800da56:	701a      	strb	r2, [r3, #0]
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800da5c:	2218      	movs	r2, #24
 800da5e:	6839      	ldr	r1, [r7, #0]
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f7ff fc11 	bl	800d288 <_SendPacket>
      RECORD_END();
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800da6c:	4b08      	ldr	r3, [pc, #32]	; (800da90 <SEGGER_SYSVIEW_Start+0x168>)
 800da6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da70:	2b00      	cmp	r3, #0
 800da72:	d002      	beq.n	800da7a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800da74:	4b06      	ldr	r3, [pc, #24]	; (800da90 <SEGGER_SYSVIEW_Start+0x168>)
 800da76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da78:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800da7a:	f000 f9c7 	bl	800de0c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800da7e:	f000 f9b1 	bl	800dde4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800da82:	f000 fc5f 	bl	800e344 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800da86:	bf00      	nop
 800da88:	3730      	adds	r7, #48	; 0x30
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	2001a204 	.word	0x2001a204
 800da94:	08012460 	.word	0x08012460
 800da98:	2001a234 	.word	0x2001a234

0800da9c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b082      	sub	sp, #8
 800daa0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800daa2:	f3ef 8311 	mrs	r3, BASEPRI
 800daa6:	f04f 0120 	mov.w	r1, #32
 800daaa:	f381 8811 	msr	BASEPRI, r1
 800daae:	607b      	str	r3, [r7, #4]
 800dab0:	480b      	ldr	r0, [pc, #44]	; (800dae0 <SEGGER_SYSVIEW_Stop+0x44>)
 800dab2:	f7ff fafa 	bl	800d0aa <_PreparePacket>
 800dab6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800dab8:	4b0a      	ldr	r3, [pc, #40]	; (800dae4 <SEGGER_SYSVIEW_Stop+0x48>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d007      	beq.n	800dad0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800dac0:	220b      	movs	r2, #11
 800dac2:	6839      	ldr	r1, [r7, #0]
 800dac4:	6838      	ldr	r0, [r7, #0]
 800dac6:	f7ff fbdf 	bl	800d288 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800daca:	4b06      	ldr	r3, [pc, #24]	; (800dae4 <SEGGER_SYSVIEW_Stop+0x48>)
 800dacc:	2200      	movs	r2, #0
 800dace:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f383 8811 	msr	BASEPRI, r3
}
 800dad6:	bf00      	nop
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	2001a234 	.word	0x2001a234
 800dae4:	2001a204 	.word	0x2001a204

0800dae8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800dae8:	b580      	push	{r7, lr}
 800daea:	b08c      	sub	sp, #48	; 0x30
 800daec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800daee:	f3ef 8311 	mrs	r3, BASEPRI
 800daf2:	f04f 0120 	mov.w	r1, #32
 800daf6:	f381 8811 	msr	BASEPRI, r1
 800dafa:	60fb      	str	r3, [r7, #12]
 800dafc:	4845      	ldr	r0, [pc, #276]	; (800dc14 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800dafe:	f7ff fad4 	bl	800d0aa <_PreparePacket>
 800db02:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db0c:	4b42      	ldr	r3, [pc, #264]	; (800dc18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	62bb      	str	r3, [r7, #40]	; 0x28
 800db12:	e00b      	b.n	800db2c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800db14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db16:	b2da      	uxtb	r2, r3
 800db18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1a:	1c59      	adds	r1, r3, #1
 800db1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800db1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800db22:	b2d2      	uxtb	r2, r2
 800db24:	701a      	strb	r2, [r3, #0]
 800db26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db28:	09db      	lsrs	r3, r3, #7
 800db2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800db2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db2e:	2b7f      	cmp	r3, #127	; 0x7f
 800db30:	d8f0      	bhi.n	800db14 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800db32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db34:	1c5a      	adds	r2, r3, #1
 800db36:	62fa      	str	r2, [r7, #44]	; 0x2c
 800db38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db3a:	b2d2      	uxtb	r2, r2
 800db3c:	701a      	strb	r2, [r3, #0]
 800db3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db40:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	627b      	str	r3, [r7, #36]	; 0x24
 800db46:	4b34      	ldr	r3, [pc, #208]	; (800dc18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800db48:	689b      	ldr	r3, [r3, #8]
 800db4a:	623b      	str	r3, [r7, #32]
 800db4c:	e00b      	b.n	800db66 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800db4e:	6a3b      	ldr	r3, [r7, #32]
 800db50:	b2da      	uxtb	r2, r3
 800db52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db54:	1c59      	adds	r1, r3, #1
 800db56:	6279      	str	r1, [r7, #36]	; 0x24
 800db58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800db5c:	b2d2      	uxtb	r2, r2
 800db5e:	701a      	strb	r2, [r3, #0]
 800db60:	6a3b      	ldr	r3, [r7, #32]
 800db62:	09db      	lsrs	r3, r3, #7
 800db64:	623b      	str	r3, [r7, #32]
 800db66:	6a3b      	ldr	r3, [r7, #32]
 800db68:	2b7f      	cmp	r3, #127	; 0x7f
 800db6a:	d8f0      	bhi.n	800db4e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6e:	1c5a      	adds	r2, r3, #1
 800db70:	627a      	str	r2, [r7, #36]	; 0x24
 800db72:	6a3a      	ldr	r2, [r7, #32]
 800db74:	b2d2      	uxtb	r2, r2
 800db76:	701a      	strb	r2, [r3, #0]
 800db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	61fb      	str	r3, [r7, #28]
 800db80:	4b25      	ldr	r3, [pc, #148]	; (800dc18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800db82:	691b      	ldr	r3, [r3, #16]
 800db84:	61bb      	str	r3, [r7, #24]
 800db86:	e00b      	b.n	800dba0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	1c59      	adds	r1, r3, #1
 800db90:	61f9      	str	r1, [r7, #28]
 800db92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800db96:	b2d2      	uxtb	r2, r2
 800db98:	701a      	strb	r2, [r3, #0]
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	09db      	lsrs	r3, r3, #7
 800db9e:	61bb      	str	r3, [r7, #24]
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	2b7f      	cmp	r3, #127	; 0x7f
 800dba4:	d8f0      	bhi.n	800db88 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800dba6:	69fb      	ldr	r3, [r7, #28]
 800dba8:	1c5a      	adds	r2, r3, #1
 800dbaa:	61fa      	str	r2, [r7, #28]
 800dbac:	69ba      	ldr	r2, [r7, #24]
 800dbae:	b2d2      	uxtb	r2, r2
 800dbb0:	701a      	strb	r2, [r3, #0]
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	617b      	str	r3, [r7, #20]
 800dbba:	2300      	movs	r3, #0
 800dbbc:	613b      	str	r3, [r7, #16]
 800dbbe:	e00b      	b.n	800dbd8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	b2da      	uxtb	r2, r3
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	1c59      	adds	r1, r3, #1
 800dbc8:	6179      	str	r1, [r7, #20]
 800dbca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dbce:	b2d2      	uxtb	r2, r2
 800dbd0:	701a      	strb	r2, [r3, #0]
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	09db      	lsrs	r3, r3, #7
 800dbd6:	613b      	str	r3, [r7, #16]
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	2b7f      	cmp	r3, #127	; 0x7f
 800dbdc:	d8f0      	bhi.n	800dbc0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	1c5a      	adds	r2, r3, #1
 800dbe2:	617a      	str	r2, [r7, #20]
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	b2d2      	uxtb	r2, r2
 800dbe8:	701a      	strb	r2, [r3, #0]
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800dbee:	2218      	movs	r2, #24
 800dbf0:	6879      	ldr	r1, [r7, #4]
 800dbf2:	68b8      	ldr	r0, [r7, #8]
 800dbf4:	f7ff fb48 	bl	800d288 <_SendPacket>
  RECORD_END();
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800dbfe:	4b06      	ldr	r3, [pc, #24]	; (800dc18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800dc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d002      	beq.n	800dc0c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800dc06:	4b04      	ldr	r3, [pc, #16]	; (800dc18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800dc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc0a:	4798      	blx	r3
  }
}
 800dc0c:	bf00      	nop
 800dc0e:	3730      	adds	r7, #48	; 0x30
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	2001a234 	.word	0x2001a234
 800dc18:	2001a204 	.word	0x2001a204

0800dc1c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b092      	sub	sp, #72	; 0x48
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800dc24:	f3ef 8311 	mrs	r3, BASEPRI
 800dc28:	f04f 0120 	mov.w	r1, #32
 800dc2c:	f381 8811 	msr	BASEPRI, r1
 800dc30:	617b      	str	r3, [r7, #20]
 800dc32:	486a      	ldr	r0, [pc, #424]	; (800dddc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800dc34:	f7ff fa39 	bl	800d0aa <_PreparePacket>
 800dc38:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	647b      	str	r3, [r7, #68]	; 0x44
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	4b66      	ldr	r3, [pc, #408]	; (800dde0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800dc48:	691b      	ldr	r3, [r3, #16]
 800dc4a:	1ad3      	subs	r3, r2, r3
 800dc4c:	643b      	str	r3, [r7, #64]	; 0x40
 800dc4e:	e00b      	b.n	800dc68 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800dc50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc52:	b2da      	uxtb	r2, r3
 800dc54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc56:	1c59      	adds	r1, r3, #1
 800dc58:	6479      	str	r1, [r7, #68]	; 0x44
 800dc5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dc5e:	b2d2      	uxtb	r2, r2
 800dc60:	701a      	strb	r2, [r3, #0]
 800dc62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc64:	09db      	lsrs	r3, r3, #7
 800dc66:	643b      	str	r3, [r7, #64]	; 0x40
 800dc68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc6a:	2b7f      	cmp	r3, #127	; 0x7f
 800dc6c:	d8f0      	bhi.n	800dc50 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800dc6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc70:	1c5a      	adds	r2, r3, #1
 800dc72:	647a      	str	r2, [r7, #68]	; 0x44
 800dc74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc76:	b2d2      	uxtb	r2, r2
 800dc78:	701a      	strb	r2, [r3, #0]
 800dc7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc88:	e00b      	b.n	800dca2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800dc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8c:	b2da      	uxtb	r2, r3
 800dc8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc90:	1c59      	adds	r1, r3, #1
 800dc92:	63f9      	str	r1, [r7, #60]	; 0x3c
 800dc94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dc98:	b2d2      	uxtb	r2, r2
 800dc9a:	701a      	strb	r2, [r3, #0]
 800dc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9e:	09db      	lsrs	r3, r3, #7
 800dca0:	63bb      	str	r3, [r7, #56]	; 0x38
 800dca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca4:	2b7f      	cmp	r3, #127	; 0x7f
 800dca6:	d8f0      	bhi.n	800dc8a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800dca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcaa:	1c5a      	adds	r2, r3, #1
 800dcac:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dcae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcb0:	b2d2      	uxtb	r2, r2
 800dcb2:	701a      	strb	r2, [r3, #0]
 800dcb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcb6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	2220      	movs	r2, #32
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f7ff f9a5 	bl	800d010 <_EncodeStr>
 800dcc6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800dcc8:	2209      	movs	r2, #9
 800dcca:	68f9      	ldr	r1, [r7, #12]
 800dccc:	6938      	ldr	r0, [r7, #16]
 800dcce:	f7ff fadb 	bl	800d288 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	637b      	str	r3, [r7, #52]	; 0x34
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	4b40      	ldr	r3, [pc, #256]	; (800dde0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800dce0:	691b      	ldr	r3, [r3, #16]
 800dce2:	1ad3      	subs	r3, r2, r3
 800dce4:	633b      	str	r3, [r7, #48]	; 0x30
 800dce6:	e00b      	b.n	800dd00 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800dce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcee:	1c59      	adds	r1, r3, #1
 800dcf0:	6379      	str	r1, [r7, #52]	; 0x34
 800dcf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dcf6:	b2d2      	uxtb	r2, r2
 800dcf8:	701a      	strb	r2, [r3, #0]
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfc:	09db      	lsrs	r3, r3, #7
 800dcfe:	633b      	str	r3, [r7, #48]	; 0x30
 800dd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd02:	2b7f      	cmp	r3, #127	; 0x7f
 800dd04:	d8f0      	bhi.n	800dce8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800dd06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd08:	1c5a      	adds	r2, r3, #1
 800dd0a:	637a      	str	r2, [r7, #52]	; 0x34
 800dd0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd0e:	b2d2      	uxtb	r2, r2
 800dd10:	701a      	strb	r2, [r3, #0]
 800dd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	68db      	ldr	r3, [r3, #12]
 800dd1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd20:	e00b      	b.n	800dd3a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800dd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd28:	1c59      	adds	r1, r3, #1
 800dd2a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800dd2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dd30:	b2d2      	uxtb	r2, r2
 800dd32:	701a      	strb	r2, [r3, #0]
 800dd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd36:	09db      	lsrs	r3, r3, #7
 800dd38:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3c:	2b7f      	cmp	r3, #127	; 0x7f
 800dd3e:	d8f0      	bhi.n	800dd22 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800dd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd42:	1c5a      	adds	r2, r3, #1
 800dd44:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd48:	b2d2      	uxtb	r2, r2
 800dd4a:	701a      	strb	r2, [r3, #0]
 800dd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	627b      	str	r3, [r7, #36]	; 0x24
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	691b      	ldr	r3, [r3, #16]
 800dd58:	623b      	str	r3, [r7, #32]
 800dd5a:	e00b      	b.n	800dd74 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800dd5c:	6a3b      	ldr	r3, [r7, #32]
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd62:	1c59      	adds	r1, r3, #1
 800dd64:	6279      	str	r1, [r7, #36]	; 0x24
 800dd66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dd6a:	b2d2      	uxtb	r2, r2
 800dd6c:	701a      	strb	r2, [r3, #0]
 800dd6e:	6a3b      	ldr	r3, [r7, #32]
 800dd70:	09db      	lsrs	r3, r3, #7
 800dd72:	623b      	str	r3, [r7, #32]
 800dd74:	6a3b      	ldr	r3, [r7, #32]
 800dd76:	2b7f      	cmp	r3, #127	; 0x7f
 800dd78:	d8f0      	bhi.n	800dd5c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800dd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7c:	1c5a      	adds	r2, r3, #1
 800dd7e:	627a      	str	r2, [r7, #36]	; 0x24
 800dd80:	6a3a      	ldr	r2, [r7, #32]
 800dd82:	b2d2      	uxtb	r2, r2
 800dd84:	701a      	strb	r2, [r3, #0]
 800dd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	61fb      	str	r3, [r7, #28]
 800dd8e:	2300      	movs	r3, #0
 800dd90:	61bb      	str	r3, [r7, #24]
 800dd92:	e00b      	b.n	800ddac <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	1c59      	adds	r1, r3, #1
 800dd9c:	61f9      	str	r1, [r7, #28]
 800dd9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dda2:	b2d2      	uxtb	r2, r2
 800dda4:	701a      	strb	r2, [r3, #0]
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	09db      	lsrs	r3, r3, #7
 800ddaa:	61bb      	str	r3, [r7, #24]
 800ddac:	69bb      	ldr	r3, [r7, #24]
 800ddae:	2b7f      	cmp	r3, #127	; 0x7f
 800ddb0:	d8f0      	bhi.n	800dd94 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	1c5a      	adds	r2, r3, #1
 800ddb6:	61fa      	str	r2, [r7, #28]
 800ddb8:	69ba      	ldr	r2, [r7, #24]
 800ddba:	b2d2      	uxtb	r2, r2
 800ddbc:	701a      	strb	r2, [r3, #0]
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800ddc2:	2215      	movs	r2, #21
 800ddc4:	68f9      	ldr	r1, [r7, #12]
 800ddc6:	6938      	ldr	r0, [r7, #16]
 800ddc8:	f7ff fa5e 	bl	800d288 <_SendPacket>
  RECORD_END();
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	f383 8811 	msr	BASEPRI, r3
}
 800ddd2:	bf00      	nop
 800ddd4:	3748      	adds	r7, #72	; 0x48
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	2001a234 	.word	0x2001a234
 800dde0:	2001a204 	.word	0x2001a204

0800dde4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800dde4:	b580      	push	{r7, lr}
 800dde6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800dde8:	4b07      	ldr	r3, [pc, #28]	; (800de08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ddea:	6a1b      	ldr	r3, [r3, #32]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d008      	beq.n	800de02 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800ddf0:	4b05      	ldr	r3, [pc, #20]	; (800de08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ddf2:	6a1b      	ldr	r3, [r3, #32]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d003      	beq.n	800de02 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800ddfa:	4b03      	ldr	r3, [pc, #12]	; (800de08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ddfc:	6a1b      	ldr	r3, [r3, #32]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	4798      	blx	r3
  }
}
 800de02:	bf00      	nop
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	2001a204 	.word	0x2001a204

0800de0c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800de0c:	b590      	push	{r4, r7, lr}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800de12:	4b15      	ldr	r3, [pc, #84]	; (800de68 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800de14:	6a1b      	ldr	r3, [r3, #32]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d01a      	beq.n	800de50 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800de1a:	4b13      	ldr	r3, [pc, #76]	; (800de68 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800de1c:	6a1b      	ldr	r3, [r3, #32]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d015      	beq.n	800de50 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800de24:	4b10      	ldr	r3, [pc, #64]	; (800de68 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800de26:	6a1b      	ldr	r3, [r3, #32]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4798      	blx	r3
 800de2c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800de30:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800de32:	e9d7 0100 	ldrd	r0, r1, [r7]
 800de36:	f04f 0200 	mov.w	r2, #0
 800de3a:	f04f 0300 	mov.w	r3, #0
 800de3e:	000a      	movs	r2, r1
 800de40:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800de42:	4613      	mov	r3, r2
 800de44:	461a      	mov	r2, r3
 800de46:	4621      	mov	r1, r4
 800de48:	200d      	movs	r0, #13
 800de4a:	f7ff fb5d 	bl	800d508 <SEGGER_SYSVIEW_RecordU32x2>
 800de4e:	e006      	b.n	800de5e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800de50:	4b06      	ldr	r3, [pc, #24]	; (800de6c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4619      	mov	r1, r3
 800de56:	200c      	movs	r0, #12
 800de58:	f7ff fb1a 	bl	800d490 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800de5c:	bf00      	nop
 800de5e:	bf00      	nop
 800de60:	370c      	adds	r7, #12
 800de62:	46bd      	mov	sp, r7
 800de64:	bd90      	pop	{r4, r7, pc}
 800de66:	bf00      	nop
 800de68:	2001a204 	.word	0x2001a204
 800de6c:	e0001004 	.word	0xe0001004

0800de70 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800de70:	b580      	push	{r7, lr}
 800de72:	b086      	sub	sp, #24
 800de74:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800de76:	f3ef 8311 	mrs	r3, BASEPRI
 800de7a:	f04f 0120 	mov.w	r1, #32
 800de7e:	f381 8811 	msr	BASEPRI, r1
 800de82:	60fb      	str	r3, [r7, #12]
 800de84:	4819      	ldr	r0, [pc, #100]	; (800deec <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800de86:	f7ff f910 	bl	800d0aa <_PreparePacket>
 800de8a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800de90:	4b17      	ldr	r3, [pc, #92]	; (800def0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de98:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	617b      	str	r3, [r7, #20]
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	613b      	str	r3, [r7, #16]
 800dea2:	e00b      	b.n	800debc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	b2da      	uxtb	r2, r3
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	1c59      	adds	r1, r3, #1
 800deac:	6179      	str	r1, [r7, #20]
 800deae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800deb2:	b2d2      	uxtb	r2, r2
 800deb4:	701a      	strb	r2, [r3, #0]
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	09db      	lsrs	r3, r3, #7
 800deba:	613b      	str	r3, [r7, #16]
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	2b7f      	cmp	r3, #127	; 0x7f
 800dec0:	d8f0      	bhi.n	800dea4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	1c5a      	adds	r2, r3, #1
 800dec6:	617a      	str	r2, [r7, #20]
 800dec8:	693a      	ldr	r2, [r7, #16]
 800deca:	b2d2      	uxtb	r2, r2
 800decc:	701a      	strb	r2, [r3, #0]
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800ded2:	2202      	movs	r2, #2
 800ded4:	6879      	ldr	r1, [r7, #4]
 800ded6:	68b8      	ldr	r0, [r7, #8]
 800ded8:	f7ff f9d6 	bl	800d288 <_SendPacket>
  RECORD_END();
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f383 8811 	msr	BASEPRI, r3
}
 800dee2:	bf00      	nop
 800dee4:	3718      	adds	r7, #24
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	2001a234 	.word	0x2001a234
 800def0:	e000ed04 	.word	0xe000ed04

0800def4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800defa:	f3ef 8311 	mrs	r3, BASEPRI
 800defe:	f04f 0120 	mov.w	r1, #32
 800df02:	f381 8811 	msr	BASEPRI, r1
 800df06:	607b      	str	r3, [r7, #4]
 800df08:	4807      	ldr	r0, [pc, #28]	; (800df28 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800df0a:	f7ff f8ce 	bl	800d0aa <_PreparePacket>
 800df0e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800df10:	2203      	movs	r2, #3
 800df12:	6839      	ldr	r1, [r7, #0]
 800df14:	6838      	ldr	r0, [r7, #0]
 800df16:	f7ff f9b7 	bl	800d288 <_SendPacket>
  RECORD_END();
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f383 8811 	msr	BASEPRI, r3
}
 800df20:	bf00      	nop
 800df22:	3708      	adds	r7, #8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	2001a234 	.word	0x2001a234

0800df2c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800df32:	f3ef 8311 	mrs	r3, BASEPRI
 800df36:	f04f 0120 	mov.w	r1, #32
 800df3a:	f381 8811 	msr	BASEPRI, r1
 800df3e:	607b      	str	r3, [r7, #4]
 800df40:	4807      	ldr	r0, [pc, #28]	; (800df60 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800df42:	f7ff f8b2 	bl	800d0aa <_PreparePacket>
 800df46:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800df48:	2212      	movs	r2, #18
 800df4a:	6839      	ldr	r1, [r7, #0]
 800df4c:	6838      	ldr	r0, [r7, #0]
 800df4e:	f7ff f99b 	bl	800d288 <_SendPacket>
  RECORD_END();
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f383 8811 	msr	BASEPRI, r3
}
 800df58:	bf00      	nop
 800df5a:	3708      	adds	r7, #8
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	2001a234 	.word	0x2001a234

0800df64 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800df6a:	f3ef 8311 	mrs	r3, BASEPRI
 800df6e:	f04f 0120 	mov.w	r1, #32
 800df72:	f381 8811 	msr	BASEPRI, r1
 800df76:	607b      	str	r3, [r7, #4]
 800df78:	4807      	ldr	r0, [pc, #28]	; (800df98 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800df7a:	f7ff f896 	bl	800d0aa <_PreparePacket>
 800df7e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800df80:	2211      	movs	r2, #17
 800df82:	6839      	ldr	r1, [r7, #0]
 800df84:	6838      	ldr	r0, [r7, #0]
 800df86:	f7ff f97f 	bl	800d288 <_SendPacket>
  RECORD_END();
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f383 8811 	msr	BASEPRI, r3
}
 800df90:	bf00      	nop
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}
 800df98:	2001a234 	.word	0x2001a234

0800df9c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b088      	sub	sp, #32
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800dfa4:	f3ef 8311 	mrs	r3, BASEPRI
 800dfa8:	f04f 0120 	mov.w	r1, #32
 800dfac:	f381 8811 	msr	BASEPRI, r1
 800dfb0:	617b      	str	r3, [r7, #20]
 800dfb2:	4819      	ldr	r0, [pc, #100]	; (800e018 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800dfb4:	f7ff f879 	bl	800d0aa <_PreparePacket>
 800dfb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800dfbe:	4b17      	ldr	r3, [pc, #92]	; (800e01c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800dfc0:	691b      	ldr	r3, [r3, #16]
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	1ad3      	subs	r3, r2, r3
 800dfc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	61fb      	str	r3, [r7, #28]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	61bb      	str	r3, [r7, #24]
 800dfd0:	e00b      	b.n	800dfea <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800dfd2:	69bb      	ldr	r3, [r7, #24]
 800dfd4:	b2da      	uxtb	r2, r3
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	1c59      	adds	r1, r3, #1
 800dfda:	61f9      	str	r1, [r7, #28]
 800dfdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dfe0:	b2d2      	uxtb	r2, r2
 800dfe2:	701a      	strb	r2, [r3, #0]
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	09db      	lsrs	r3, r3, #7
 800dfe8:	61bb      	str	r3, [r7, #24]
 800dfea:	69bb      	ldr	r3, [r7, #24]
 800dfec:	2b7f      	cmp	r3, #127	; 0x7f
 800dfee:	d8f0      	bhi.n	800dfd2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	1c5a      	adds	r2, r3, #1
 800dff4:	61fa      	str	r2, [r7, #28]
 800dff6:	69ba      	ldr	r2, [r7, #24]
 800dff8:	b2d2      	uxtb	r2, r2
 800dffa:	701a      	strb	r2, [r3, #0]
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800e000:	2208      	movs	r2, #8
 800e002:	68f9      	ldr	r1, [r7, #12]
 800e004:	6938      	ldr	r0, [r7, #16]
 800e006:	f7ff f93f 	bl	800d288 <_SendPacket>
  RECORD_END();
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	f383 8811 	msr	BASEPRI, r3
}
 800e010:	bf00      	nop
 800e012:	3720      	adds	r7, #32
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	2001a234 	.word	0x2001a234
 800e01c:	2001a204 	.word	0x2001a204

0800e020 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800e020:	b580      	push	{r7, lr}
 800e022:	b088      	sub	sp, #32
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800e028:	f3ef 8311 	mrs	r3, BASEPRI
 800e02c:	f04f 0120 	mov.w	r1, #32
 800e030:	f381 8811 	msr	BASEPRI, r1
 800e034:	617b      	str	r3, [r7, #20]
 800e036:	4819      	ldr	r0, [pc, #100]	; (800e09c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800e038:	f7ff f837 	bl	800d0aa <_PreparePacket>
 800e03c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800e042:	4b17      	ldr	r3, [pc, #92]	; (800e0a0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	1ad3      	subs	r3, r2, r3
 800e04a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	61fb      	str	r3, [r7, #28]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	61bb      	str	r3, [r7, #24]
 800e054:	e00b      	b.n	800e06e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	b2da      	uxtb	r2, r3
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	1c59      	adds	r1, r3, #1
 800e05e:	61f9      	str	r1, [r7, #28]
 800e060:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e064:	b2d2      	uxtb	r2, r2
 800e066:	701a      	strb	r2, [r3, #0]
 800e068:	69bb      	ldr	r3, [r7, #24]
 800e06a:	09db      	lsrs	r3, r3, #7
 800e06c:	61bb      	str	r3, [r7, #24]
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	2b7f      	cmp	r3, #127	; 0x7f
 800e072:	d8f0      	bhi.n	800e056 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	1c5a      	adds	r2, r3, #1
 800e078:	61fa      	str	r2, [r7, #28]
 800e07a:	69ba      	ldr	r2, [r7, #24]
 800e07c:	b2d2      	uxtb	r2, r2
 800e07e:	701a      	strb	r2, [r3, #0]
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800e084:	2204      	movs	r2, #4
 800e086:	68f9      	ldr	r1, [r7, #12]
 800e088:	6938      	ldr	r0, [r7, #16]
 800e08a:	f7ff f8fd 	bl	800d288 <_SendPacket>
  RECORD_END();
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f383 8811 	msr	BASEPRI, r3
}
 800e094:	bf00      	nop
 800e096:	3720      	adds	r7, #32
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	2001a234 	.word	0x2001a234
 800e0a0:	2001a204 	.word	0x2001a204

0800e0a4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b088      	sub	sp, #32
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800e0ac:	f3ef 8311 	mrs	r3, BASEPRI
 800e0b0:	f04f 0120 	mov.w	r1, #32
 800e0b4:	f381 8811 	msr	BASEPRI, r1
 800e0b8:	617b      	str	r3, [r7, #20]
 800e0ba:	4819      	ldr	r0, [pc, #100]	; (800e120 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800e0bc:	f7fe fff5 	bl	800d0aa <_PreparePacket>
 800e0c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800e0c6:	4b17      	ldr	r3, [pc, #92]	; (800e124 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800e0c8:	691b      	ldr	r3, [r3, #16]
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	1ad3      	subs	r3, r2, r3
 800e0ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	61fb      	str	r3, [r7, #28]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	61bb      	str	r3, [r7, #24]
 800e0d8:	e00b      	b.n	800e0f2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800e0da:	69bb      	ldr	r3, [r7, #24]
 800e0dc:	b2da      	uxtb	r2, r3
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	1c59      	adds	r1, r3, #1
 800e0e2:	61f9      	str	r1, [r7, #28]
 800e0e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e0e8:	b2d2      	uxtb	r2, r2
 800e0ea:	701a      	strb	r2, [r3, #0]
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	09db      	lsrs	r3, r3, #7
 800e0f0:	61bb      	str	r3, [r7, #24]
 800e0f2:	69bb      	ldr	r3, [r7, #24]
 800e0f4:	2b7f      	cmp	r3, #127	; 0x7f
 800e0f6:	d8f0      	bhi.n	800e0da <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	1c5a      	adds	r2, r3, #1
 800e0fc:	61fa      	str	r2, [r7, #28]
 800e0fe:	69ba      	ldr	r2, [r7, #24]
 800e100:	b2d2      	uxtb	r2, r2
 800e102:	701a      	strb	r2, [r3, #0]
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800e108:	2206      	movs	r2, #6
 800e10a:	68f9      	ldr	r1, [r7, #12]
 800e10c:	6938      	ldr	r0, [r7, #16]
 800e10e:	f7ff f8bb 	bl	800d288 <_SendPacket>
  RECORD_END();
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	f383 8811 	msr	BASEPRI, r3
}
 800e118:	bf00      	nop
 800e11a:	3720      	adds	r7, #32
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	2001a234 	.word	0x2001a234
 800e124:	2001a204 	.word	0x2001a204

0800e128 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08a      	sub	sp, #40	; 0x28
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800e132:	f3ef 8311 	mrs	r3, BASEPRI
 800e136:	f04f 0120 	mov.w	r1, #32
 800e13a:	f381 8811 	msr	BASEPRI, r1
 800e13e:	617b      	str	r3, [r7, #20]
 800e140:	4827      	ldr	r0, [pc, #156]	; (800e1e0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800e142:	f7fe ffb2 	bl	800d0aa <_PreparePacket>
 800e146:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800e14c:	4b25      	ldr	r3, [pc, #148]	; (800e1e4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800e14e:	691b      	ldr	r3, [r3, #16]
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	1ad3      	subs	r3, r2, r3
 800e154:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	627b      	str	r3, [r7, #36]	; 0x24
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	623b      	str	r3, [r7, #32]
 800e15e:	e00b      	b.n	800e178 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800e160:	6a3b      	ldr	r3, [r7, #32]
 800e162:	b2da      	uxtb	r2, r3
 800e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e166:	1c59      	adds	r1, r3, #1
 800e168:	6279      	str	r1, [r7, #36]	; 0x24
 800e16a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e16e:	b2d2      	uxtb	r2, r2
 800e170:	701a      	strb	r2, [r3, #0]
 800e172:	6a3b      	ldr	r3, [r7, #32]
 800e174:	09db      	lsrs	r3, r3, #7
 800e176:	623b      	str	r3, [r7, #32]
 800e178:	6a3b      	ldr	r3, [r7, #32]
 800e17a:	2b7f      	cmp	r3, #127	; 0x7f
 800e17c:	d8f0      	bhi.n	800e160 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800e17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e180:	1c5a      	adds	r2, r3, #1
 800e182:	627a      	str	r2, [r7, #36]	; 0x24
 800e184:	6a3a      	ldr	r2, [r7, #32]
 800e186:	b2d2      	uxtb	r2, r2
 800e188:	701a      	strb	r2, [r3, #0]
 800e18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	61fb      	str	r3, [r7, #28]
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	61bb      	str	r3, [r7, #24]
 800e196:	e00b      	b.n	800e1b0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800e198:	69bb      	ldr	r3, [r7, #24]
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	1c59      	adds	r1, r3, #1
 800e1a0:	61f9      	str	r1, [r7, #28]
 800e1a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e1a6:	b2d2      	uxtb	r2, r2
 800e1a8:	701a      	strb	r2, [r3, #0]
 800e1aa:	69bb      	ldr	r3, [r7, #24]
 800e1ac:	09db      	lsrs	r3, r3, #7
 800e1ae:	61bb      	str	r3, [r7, #24]
 800e1b0:	69bb      	ldr	r3, [r7, #24]
 800e1b2:	2b7f      	cmp	r3, #127	; 0x7f
 800e1b4:	d8f0      	bhi.n	800e198 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	1c5a      	adds	r2, r3, #1
 800e1ba:	61fa      	str	r2, [r7, #28]
 800e1bc:	69ba      	ldr	r2, [r7, #24]
 800e1be:	b2d2      	uxtb	r2, r2
 800e1c0:	701a      	strb	r2, [r3, #0]
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800e1c6:	2207      	movs	r2, #7
 800e1c8:	68f9      	ldr	r1, [r7, #12]
 800e1ca:	6938      	ldr	r0, [r7, #16]
 800e1cc:	f7ff f85c 	bl	800d288 <_SendPacket>
  RECORD_END();
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	f383 8811 	msr	BASEPRI, r3
}
 800e1d6:	bf00      	nop
 800e1d8:	3728      	adds	r7, #40	; 0x28
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	2001a234 	.word	0x2001a234
 800e1e4:	2001a204 	.word	0x2001a204

0800e1e8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800e1f0:	4b04      	ldr	r3, [pc, #16]	; (800e204 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800e1f2:	691b      	ldr	r3, [r3, #16]
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	1ad3      	subs	r3, r2, r3
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr
 800e204:	2001a204 	.word	0x2001a204

0800e208 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800e208:	b580      	push	{r7, lr}
 800e20a:	b08c      	sub	sp, #48	; 0x30
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	4603      	mov	r3, r0
 800e210:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800e212:	4b3b      	ldr	r3, [pc, #236]	; (800e300 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d06d      	beq.n	800e2f6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800e21a:	4b39      	ldr	r3, [pc, #228]	; (800e300 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800e220:	2300      	movs	r3, #0
 800e222:	62bb      	str	r3, [r7, #40]	; 0x28
 800e224:	e008      	b.n	800e238 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800e226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800e22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d007      	beq.n	800e242 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800e232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e234:	3301      	adds	r3, #1
 800e236:	62bb      	str	r3, [r7, #40]	; 0x28
 800e238:	79fb      	ldrb	r3, [r7, #7]
 800e23a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d3f2      	bcc.n	800e226 <SEGGER_SYSVIEW_SendModule+0x1e>
 800e240:	e000      	b.n	800e244 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800e242:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800e244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e246:	2b00      	cmp	r3, #0
 800e248:	d055      	beq.n	800e2f6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e24a:	f3ef 8311 	mrs	r3, BASEPRI
 800e24e:	f04f 0120 	mov.w	r1, #32
 800e252:	f381 8811 	msr	BASEPRI, r1
 800e256:	617b      	str	r3, [r7, #20]
 800e258:	482a      	ldr	r0, [pc, #168]	; (800e304 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800e25a:	f7fe ff26 	bl	800d0aa <_PreparePacket>
 800e25e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	627b      	str	r3, [r7, #36]	; 0x24
 800e268:	79fb      	ldrb	r3, [r7, #7]
 800e26a:	623b      	str	r3, [r7, #32]
 800e26c:	e00b      	b.n	800e286 <SEGGER_SYSVIEW_SendModule+0x7e>
 800e26e:	6a3b      	ldr	r3, [r7, #32]
 800e270:	b2da      	uxtb	r2, r3
 800e272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e274:	1c59      	adds	r1, r3, #1
 800e276:	6279      	str	r1, [r7, #36]	; 0x24
 800e278:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e27c:	b2d2      	uxtb	r2, r2
 800e27e:	701a      	strb	r2, [r3, #0]
 800e280:	6a3b      	ldr	r3, [r7, #32]
 800e282:	09db      	lsrs	r3, r3, #7
 800e284:	623b      	str	r3, [r7, #32]
 800e286:	6a3b      	ldr	r3, [r7, #32]
 800e288:	2b7f      	cmp	r3, #127	; 0x7f
 800e28a:	d8f0      	bhi.n	800e26e <SEGGER_SYSVIEW_SendModule+0x66>
 800e28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28e:	1c5a      	adds	r2, r3, #1
 800e290:	627a      	str	r2, [r7, #36]	; 0x24
 800e292:	6a3a      	ldr	r2, [r7, #32]
 800e294:	b2d2      	uxtb	r2, r2
 800e296:	701a      	strb	r2, [r3, #0]
 800e298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	61fb      	str	r3, [r7, #28]
 800e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	61bb      	str	r3, [r7, #24]
 800e2a6:	e00b      	b.n	800e2c0 <SEGGER_SYSVIEW_SendModule+0xb8>
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	b2da      	uxtb	r2, r3
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	1c59      	adds	r1, r3, #1
 800e2b0:	61f9      	str	r1, [r7, #28]
 800e2b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e2b6:	b2d2      	uxtb	r2, r2
 800e2b8:	701a      	strb	r2, [r3, #0]
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	09db      	lsrs	r3, r3, #7
 800e2be:	61bb      	str	r3, [r7, #24]
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	2b7f      	cmp	r3, #127	; 0x7f
 800e2c4:	d8f0      	bhi.n	800e2a8 <SEGGER_SYSVIEW_SendModule+0xa0>
 800e2c6:	69fb      	ldr	r3, [r7, #28]
 800e2c8:	1c5a      	adds	r2, r3, #1
 800e2ca:	61fa      	str	r2, [r7, #28]
 800e2cc:	69ba      	ldr	r2, [r7, #24]
 800e2ce:	b2d2      	uxtb	r2, r2
 800e2d0:	701a      	strb	r2, [r3, #0]
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2280      	movs	r2, #128	; 0x80
 800e2dc:	4619      	mov	r1, r3
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f7fe fe96 	bl	800d010 <_EncodeStr>
 800e2e4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800e2e6:	2216      	movs	r2, #22
 800e2e8:	68f9      	ldr	r1, [r7, #12]
 800e2ea:	6938      	ldr	r0, [r7, #16]
 800e2ec:	f7fe ffcc 	bl	800d288 <_SendPacket>
      RECORD_END();
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800e2f6:	bf00      	nop
 800e2f8:	3730      	adds	r7, #48	; 0x30
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	2001a22c 	.word	0x2001a22c
 800e304:	2001a234 	.word	0x2001a234

0800e308 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800e308:	b580      	push	{r7, lr}
 800e30a:	b082      	sub	sp, #8
 800e30c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800e30e:	4b0c      	ldr	r3, [pc, #48]	; (800e340 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d00f      	beq.n	800e336 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800e316:	4b0a      	ldr	r3, [pc, #40]	; (800e340 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d002      	beq.n	800e32a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	691b      	ldr	r3, [r3, #16]
 800e32e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1f2      	bne.n	800e31c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800e336:	bf00      	nop
 800e338:	3708      	adds	r7, #8
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	2001a22c 	.word	0x2001a22c

0800e344 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800e344:	b580      	push	{r7, lr}
 800e346:	b086      	sub	sp, #24
 800e348:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800e34a:	f3ef 8311 	mrs	r3, BASEPRI
 800e34e:	f04f 0120 	mov.w	r1, #32
 800e352:	f381 8811 	msr	BASEPRI, r1
 800e356:	60fb      	str	r3, [r7, #12]
 800e358:	4817      	ldr	r0, [pc, #92]	; (800e3b8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800e35a:	f7fe fea6 	bl	800d0aa <_PreparePacket>
 800e35e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	617b      	str	r3, [r7, #20]
 800e368:	4b14      	ldr	r3, [pc, #80]	; (800e3bc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	613b      	str	r3, [r7, #16]
 800e36e:	e00b      	b.n	800e388 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	b2da      	uxtb	r2, r3
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	1c59      	adds	r1, r3, #1
 800e378:	6179      	str	r1, [r7, #20]
 800e37a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e37e:	b2d2      	uxtb	r2, r2
 800e380:	701a      	strb	r2, [r3, #0]
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	09db      	lsrs	r3, r3, #7
 800e386:	613b      	str	r3, [r7, #16]
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	2b7f      	cmp	r3, #127	; 0x7f
 800e38c:	d8f0      	bhi.n	800e370 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	1c5a      	adds	r2, r3, #1
 800e392:	617a      	str	r2, [r7, #20]
 800e394:	693a      	ldr	r2, [r7, #16]
 800e396:	b2d2      	uxtb	r2, r2
 800e398:	701a      	strb	r2, [r3, #0]
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800e39e:	221b      	movs	r2, #27
 800e3a0:	6879      	ldr	r1, [r7, #4]
 800e3a2:	68b8      	ldr	r0, [r7, #8]
 800e3a4:	f7fe ff70 	bl	800d288 <_SendPacket>
  RECORD_END();
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f383 8811 	msr	BASEPRI, r3
}
 800e3ae:	bf00      	nop
 800e3b0:	3718      	adds	r7, #24
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	2001a234 	.word	0x2001a234
 800e3bc:	2001a230 	.word	0x2001a230

0800e3c0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b08a      	sub	sp, #40	; 0x28
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e3c8:	f3ef 8311 	mrs	r3, BASEPRI
 800e3cc:	f04f 0120 	mov.w	r1, #32
 800e3d0:	f381 8811 	msr	BASEPRI, r1
 800e3d4:	617b      	str	r3, [r7, #20]
 800e3d6:	4827      	ldr	r0, [pc, #156]	; (800e474 <SEGGER_SYSVIEW_Warn+0xb4>)
 800e3d8:	f7fe fe67 	bl	800d0aa <_PreparePacket>
 800e3dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800e3de:	2280      	movs	r2, #128	; 0x80
 800e3e0:	6879      	ldr	r1, [r7, #4]
 800e3e2:	6938      	ldr	r0, [r7, #16]
 800e3e4:	f7fe fe14 	bl	800d010 <_EncodeStr>
 800e3e8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	627b      	str	r3, [r7, #36]	; 0x24
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	623b      	str	r3, [r7, #32]
 800e3f2:	e00b      	b.n	800e40c <SEGGER_SYSVIEW_Warn+0x4c>
 800e3f4:	6a3b      	ldr	r3, [r7, #32]
 800e3f6:	b2da      	uxtb	r2, r3
 800e3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fa:	1c59      	adds	r1, r3, #1
 800e3fc:	6279      	str	r1, [r7, #36]	; 0x24
 800e3fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e402:	b2d2      	uxtb	r2, r2
 800e404:	701a      	strb	r2, [r3, #0]
 800e406:	6a3b      	ldr	r3, [r7, #32]
 800e408:	09db      	lsrs	r3, r3, #7
 800e40a:	623b      	str	r3, [r7, #32]
 800e40c:	6a3b      	ldr	r3, [r7, #32]
 800e40e:	2b7f      	cmp	r3, #127	; 0x7f
 800e410:	d8f0      	bhi.n	800e3f4 <SEGGER_SYSVIEW_Warn+0x34>
 800e412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e414:	1c5a      	adds	r2, r3, #1
 800e416:	627a      	str	r2, [r7, #36]	; 0x24
 800e418:	6a3a      	ldr	r2, [r7, #32]
 800e41a:	b2d2      	uxtb	r2, r2
 800e41c:	701a      	strb	r2, [r3, #0]
 800e41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e420:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	61fb      	str	r3, [r7, #28]
 800e426:	2300      	movs	r3, #0
 800e428:	61bb      	str	r3, [r7, #24]
 800e42a:	e00b      	b.n	800e444 <SEGGER_SYSVIEW_Warn+0x84>
 800e42c:	69bb      	ldr	r3, [r7, #24]
 800e42e:	b2da      	uxtb	r2, r3
 800e430:	69fb      	ldr	r3, [r7, #28]
 800e432:	1c59      	adds	r1, r3, #1
 800e434:	61f9      	str	r1, [r7, #28]
 800e436:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e43a:	b2d2      	uxtb	r2, r2
 800e43c:	701a      	strb	r2, [r3, #0]
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	09db      	lsrs	r3, r3, #7
 800e442:	61bb      	str	r3, [r7, #24]
 800e444:	69bb      	ldr	r3, [r7, #24]
 800e446:	2b7f      	cmp	r3, #127	; 0x7f
 800e448:	d8f0      	bhi.n	800e42c <SEGGER_SYSVIEW_Warn+0x6c>
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	1c5a      	adds	r2, r3, #1
 800e44e:	61fa      	str	r2, [r7, #28]
 800e450:	69ba      	ldr	r2, [r7, #24]
 800e452:	b2d2      	uxtb	r2, r2
 800e454:	701a      	strb	r2, [r3, #0]
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800e45a:	221a      	movs	r2, #26
 800e45c:	68f9      	ldr	r1, [r7, #12]
 800e45e:	6938      	ldr	r0, [r7, #16]
 800e460:	f7fe ff12 	bl	800d288 <_SendPacket>
  RECORD_END();
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	f383 8811 	msr	BASEPRI, r3
}
 800e46a:	bf00      	nop
 800e46c:	3728      	adds	r7, #40	; 0x28
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	2001a234 	.word	0x2001a234

0800e478 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
 800e484:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800e486:	683a      	ldr	r2, [r7, #0]
 800e488:	6879      	ldr	r1, [r7, #4]
 800e48a:	2000      	movs	r0, #0
 800e48c:	f7fe fd9a 	bl	800cfc4 <SEGGER_RTT_Write>
  return len;
 800e490:	683b      	ldr	r3, [r7, #0]
}
 800e492:	4618      	mov	r0, r3
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <atoi>:
 800e49a:	220a      	movs	r2, #10
 800e49c:	2100      	movs	r1, #0
 800e49e:	f000 b883 	b.w	800e5a8 <strtol>
	...

0800e4a4 <_strtol_l.constprop.0>:
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4aa:	d001      	beq.n	800e4b0 <_strtol_l.constprop.0+0xc>
 800e4ac:	2b24      	cmp	r3, #36	; 0x24
 800e4ae:	d906      	bls.n	800e4be <_strtol_l.constprop.0+0x1a>
 800e4b0:	f000 fe74 	bl	800f19c <__errno>
 800e4b4:	2316      	movs	r3, #22
 800e4b6:	6003      	str	r3, [r0, #0]
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e5a4 <_strtol_l.constprop.0+0x100>
 800e4c2:	460d      	mov	r5, r1
 800e4c4:	462e      	mov	r6, r5
 800e4c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e4ce:	f017 0708 	ands.w	r7, r7, #8
 800e4d2:	d1f7      	bne.n	800e4c4 <_strtol_l.constprop.0+0x20>
 800e4d4:	2c2d      	cmp	r4, #45	; 0x2d
 800e4d6:	d132      	bne.n	800e53e <_strtol_l.constprop.0+0x9a>
 800e4d8:	782c      	ldrb	r4, [r5, #0]
 800e4da:	2701      	movs	r7, #1
 800e4dc:	1cb5      	adds	r5, r6, #2
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d05b      	beq.n	800e59a <_strtol_l.constprop.0+0xf6>
 800e4e2:	2b10      	cmp	r3, #16
 800e4e4:	d109      	bne.n	800e4fa <_strtol_l.constprop.0+0x56>
 800e4e6:	2c30      	cmp	r4, #48	; 0x30
 800e4e8:	d107      	bne.n	800e4fa <_strtol_l.constprop.0+0x56>
 800e4ea:	782c      	ldrb	r4, [r5, #0]
 800e4ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e4f0:	2c58      	cmp	r4, #88	; 0x58
 800e4f2:	d14d      	bne.n	800e590 <_strtol_l.constprop.0+0xec>
 800e4f4:	786c      	ldrb	r4, [r5, #1]
 800e4f6:	2310      	movs	r3, #16
 800e4f8:	3502      	adds	r5, #2
 800e4fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e4fe:	f108 38ff 	add.w	r8, r8, #4294967295
 800e502:	f04f 0e00 	mov.w	lr, #0
 800e506:	fbb8 f9f3 	udiv	r9, r8, r3
 800e50a:	4676      	mov	r6, lr
 800e50c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e510:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e514:	f1bc 0f09 	cmp.w	ip, #9
 800e518:	d816      	bhi.n	800e548 <_strtol_l.constprop.0+0xa4>
 800e51a:	4664      	mov	r4, ip
 800e51c:	42a3      	cmp	r3, r4
 800e51e:	dd24      	ble.n	800e56a <_strtol_l.constprop.0+0xc6>
 800e520:	f1be 3fff 	cmp.w	lr, #4294967295
 800e524:	d008      	beq.n	800e538 <_strtol_l.constprop.0+0x94>
 800e526:	45b1      	cmp	r9, r6
 800e528:	d31c      	bcc.n	800e564 <_strtol_l.constprop.0+0xc0>
 800e52a:	d101      	bne.n	800e530 <_strtol_l.constprop.0+0x8c>
 800e52c:	45a2      	cmp	sl, r4
 800e52e:	db19      	blt.n	800e564 <_strtol_l.constprop.0+0xc0>
 800e530:	fb06 4603 	mla	r6, r6, r3, r4
 800e534:	f04f 0e01 	mov.w	lr, #1
 800e538:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e53c:	e7e8      	b.n	800e510 <_strtol_l.constprop.0+0x6c>
 800e53e:	2c2b      	cmp	r4, #43	; 0x2b
 800e540:	bf04      	itt	eq
 800e542:	782c      	ldrbeq	r4, [r5, #0]
 800e544:	1cb5      	addeq	r5, r6, #2
 800e546:	e7ca      	b.n	800e4de <_strtol_l.constprop.0+0x3a>
 800e548:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e54c:	f1bc 0f19 	cmp.w	ip, #25
 800e550:	d801      	bhi.n	800e556 <_strtol_l.constprop.0+0xb2>
 800e552:	3c37      	subs	r4, #55	; 0x37
 800e554:	e7e2      	b.n	800e51c <_strtol_l.constprop.0+0x78>
 800e556:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e55a:	f1bc 0f19 	cmp.w	ip, #25
 800e55e:	d804      	bhi.n	800e56a <_strtol_l.constprop.0+0xc6>
 800e560:	3c57      	subs	r4, #87	; 0x57
 800e562:	e7db      	b.n	800e51c <_strtol_l.constprop.0+0x78>
 800e564:	f04f 3eff 	mov.w	lr, #4294967295
 800e568:	e7e6      	b.n	800e538 <_strtol_l.constprop.0+0x94>
 800e56a:	f1be 3fff 	cmp.w	lr, #4294967295
 800e56e:	d105      	bne.n	800e57c <_strtol_l.constprop.0+0xd8>
 800e570:	2322      	movs	r3, #34	; 0x22
 800e572:	6003      	str	r3, [r0, #0]
 800e574:	4646      	mov	r6, r8
 800e576:	b942      	cbnz	r2, 800e58a <_strtol_l.constprop.0+0xe6>
 800e578:	4630      	mov	r0, r6
 800e57a:	e79e      	b.n	800e4ba <_strtol_l.constprop.0+0x16>
 800e57c:	b107      	cbz	r7, 800e580 <_strtol_l.constprop.0+0xdc>
 800e57e:	4276      	negs	r6, r6
 800e580:	2a00      	cmp	r2, #0
 800e582:	d0f9      	beq.n	800e578 <_strtol_l.constprop.0+0xd4>
 800e584:	f1be 0f00 	cmp.w	lr, #0
 800e588:	d000      	beq.n	800e58c <_strtol_l.constprop.0+0xe8>
 800e58a:	1e69      	subs	r1, r5, #1
 800e58c:	6011      	str	r1, [r2, #0]
 800e58e:	e7f3      	b.n	800e578 <_strtol_l.constprop.0+0xd4>
 800e590:	2430      	movs	r4, #48	; 0x30
 800e592:	2b00      	cmp	r3, #0
 800e594:	d1b1      	bne.n	800e4fa <_strtol_l.constprop.0+0x56>
 800e596:	2308      	movs	r3, #8
 800e598:	e7af      	b.n	800e4fa <_strtol_l.constprop.0+0x56>
 800e59a:	2c30      	cmp	r4, #48	; 0x30
 800e59c:	d0a5      	beq.n	800e4ea <_strtol_l.constprop.0+0x46>
 800e59e:	230a      	movs	r3, #10
 800e5a0:	e7ab      	b.n	800e4fa <_strtol_l.constprop.0+0x56>
 800e5a2:	bf00      	nop
 800e5a4:	0801246b 	.word	0x0801246b

0800e5a8 <strtol>:
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	460a      	mov	r2, r1
 800e5ac:	4601      	mov	r1, r0
 800e5ae:	4802      	ldr	r0, [pc, #8]	; (800e5b8 <strtol+0x10>)
 800e5b0:	6800      	ldr	r0, [r0, #0]
 800e5b2:	f7ff bf77 	b.w	800e4a4 <_strtol_l.constprop.0>
 800e5b6:	bf00      	nop
 800e5b8:	200001e0 	.word	0x200001e0

0800e5bc <__cvt>:
 800e5bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5c0:	ec55 4b10 	vmov	r4, r5, d0
 800e5c4:	2d00      	cmp	r5, #0
 800e5c6:	460e      	mov	r6, r1
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	462b      	mov	r3, r5
 800e5cc:	bfbb      	ittet	lt
 800e5ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e5d2:	461d      	movlt	r5, r3
 800e5d4:	2300      	movge	r3, #0
 800e5d6:	232d      	movlt	r3, #45	; 0x2d
 800e5d8:	700b      	strb	r3, [r1, #0]
 800e5da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e5e0:	4691      	mov	r9, r2
 800e5e2:	f023 0820 	bic.w	r8, r3, #32
 800e5e6:	bfbc      	itt	lt
 800e5e8:	4622      	movlt	r2, r4
 800e5ea:	4614      	movlt	r4, r2
 800e5ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e5f0:	d005      	beq.n	800e5fe <__cvt+0x42>
 800e5f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e5f6:	d100      	bne.n	800e5fa <__cvt+0x3e>
 800e5f8:	3601      	adds	r6, #1
 800e5fa:	2102      	movs	r1, #2
 800e5fc:	e000      	b.n	800e600 <__cvt+0x44>
 800e5fe:	2103      	movs	r1, #3
 800e600:	ab03      	add	r3, sp, #12
 800e602:	9301      	str	r3, [sp, #4]
 800e604:	ab02      	add	r3, sp, #8
 800e606:	9300      	str	r3, [sp, #0]
 800e608:	ec45 4b10 	vmov	d0, r4, r5
 800e60c:	4653      	mov	r3, sl
 800e60e:	4632      	mov	r2, r6
 800e610:	f000 fe8a 	bl	800f328 <_dtoa_r>
 800e614:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e618:	4607      	mov	r7, r0
 800e61a:	d102      	bne.n	800e622 <__cvt+0x66>
 800e61c:	f019 0f01 	tst.w	r9, #1
 800e620:	d022      	beq.n	800e668 <__cvt+0xac>
 800e622:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e626:	eb07 0906 	add.w	r9, r7, r6
 800e62a:	d110      	bne.n	800e64e <__cvt+0x92>
 800e62c:	783b      	ldrb	r3, [r7, #0]
 800e62e:	2b30      	cmp	r3, #48	; 0x30
 800e630:	d10a      	bne.n	800e648 <__cvt+0x8c>
 800e632:	2200      	movs	r2, #0
 800e634:	2300      	movs	r3, #0
 800e636:	4620      	mov	r0, r4
 800e638:	4629      	mov	r1, r5
 800e63a:	f7f2 fab5 	bl	8000ba8 <__aeabi_dcmpeq>
 800e63e:	b918      	cbnz	r0, 800e648 <__cvt+0x8c>
 800e640:	f1c6 0601 	rsb	r6, r6, #1
 800e644:	f8ca 6000 	str.w	r6, [sl]
 800e648:	f8da 3000 	ldr.w	r3, [sl]
 800e64c:	4499      	add	r9, r3
 800e64e:	2200      	movs	r2, #0
 800e650:	2300      	movs	r3, #0
 800e652:	4620      	mov	r0, r4
 800e654:	4629      	mov	r1, r5
 800e656:	f7f2 faa7 	bl	8000ba8 <__aeabi_dcmpeq>
 800e65a:	b108      	cbz	r0, 800e660 <__cvt+0xa4>
 800e65c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e660:	2230      	movs	r2, #48	; 0x30
 800e662:	9b03      	ldr	r3, [sp, #12]
 800e664:	454b      	cmp	r3, r9
 800e666:	d307      	bcc.n	800e678 <__cvt+0xbc>
 800e668:	9b03      	ldr	r3, [sp, #12]
 800e66a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e66c:	1bdb      	subs	r3, r3, r7
 800e66e:	4638      	mov	r0, r7
 800e670:	6013      	str	r3, [r2, #0]
 800e672:	b004      	add	sp, #16
 800e674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e678:	1c59      	adds	r1, r3, #1
 800e67a:	9103      	str	r1, [sp, #12]
 800e67c:	701a      	strb	r2, [r3, #0]
 800e67e:	e7f0      	b.n	800e662 <__cvt+0xa6>

0800e680 <__exponent>:
 800e680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e682:	4603      	mov	r3, r0
 800e684:	2900      	cmp	r1, #0
 800e686:	bfb8      	it	lt
 800e688:	4249      	neglt	r1, r1
 800e68a:	f803 2b02 	strb.w	r2, [r3], #2
 800e68e:	bfb4      	ite	lt
 800e690:	222d      	movlt	r2, #45	; 0x2d
 800e692:	222b      	movge	r2, #43	; 0x2b
 800e694:	2909      	cmp	r1, #9
 800e696:	7042      	strb	r2, [r0, #1]
 800e698:	dd2a      	ble.n	800e6f0 <__exponent+0x70>
 800e69a:	f10d 0207 	add.w	r2, sp, #7
 800e69e:	4617      	mov	r7, r2
 800e6a0:	260a      	movs	r6, #10
 800e6a2:	4694      	mov	ip, r2
 800e6a4:	fb91 f5f6 	sdiv	r5, r1, r6
 800e6a8:	fb06 1415 	mls	r4, r6, r5, r1
 800e6ac:	3430      	adds	r4, #48	; 0x30
 800e6ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e6b2:	460c      	mov	r4, r1
 800e6b4:	2c63      	cmp	r4, #99	; 0x63
 800e6b6:	f102 32ff 	add.w	r2, r2, #4294967295
 800e6ba:	4629      	mov	r1, r5
 800e6bc:	dcf1      	bgt.n	800e6a2 <__exponent+0x22>
 800e6be:	3130      	adds	r1, #48	; 0x30
 800e6c0:	f1ac 0402 	sub.w	r4, ip, #2
 800e6c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e6c8:	1c41      	adds	r1, r0, #1
 800e6ca:	4622      	mov	r2, r4
 800e6cc:	42ba      	cmp	r2, r7
 800e6ce:	d30a      	bcc.n	800e6e6 <__exponent+0x66>
 800e6d0:	f10d 0209 	add.w	r2, sp, #9
 800e6d4:	eba2 020c 	sub.w	r2, r2, ip
 800e6d8:	42bc      	cmp	r4, r7
 800e6da:	bf88      	it	hi
 800e6dc:	2200      	movhi	r2, #0
 800e6de:	4413      	add	r3, r2
 800e6e0:	1a18      	subs	r0, r3, r0
 800e6e2:	b003      	add	sp, #12
 800e6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e6ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e6ee:	e7ed      	b.n	800e6cc <__exponent+0x4c>
 800e6f0:	2330      	movs	r3, #48	; 0x30
 800e6f2:	3130      	adds	r1, #48	; 0x30
 800e6f4:	7083      	strb	r3, [r0, #2]
 800e6f6:	70c1      	strb	r1, [r0, #3]
 800e6f8:	1d03      	adds	r3, r0, #4
 800e6fa:	e7f1      	b.n	800e6e0 <__exponent+0x60>

0800e6fc <_printf_float>:
 800e6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e700:	ed2d 8b02 	vpush	{d8}
 800e704:	b08d      	sub	sp, #52	; 0x34
 800e706:	460c      	mov	r4, r1
 800e708:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e70c:	4616      	mov	r6, r2
 800e70e:	461f      	mov	r7, r3
 800e710:	4605      	mov	r5, r0
 800e712:	f000 fd0b 	bl	800f12c <_localeconv_r>
 800e716:	f8d0 a000 	ldr.w	sl, [r0]
 800e71a:	4650      	mov	r0, sl
 800e71c:	f7f1 fe18 	bl	8000350 <strlen>
 800e720:	2300      	movs	r3, #0
 800e722:	930a      	str	r3, [sp, #40]	; 0x28
 800e724:	6823      	ldr	r3, [r4, #0]
 800e726:	9305      	str	r3, [sp, #20]
 800e728:	f8d8 3000 	ldr.w	r3, [r8]
 800e72c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e730:	3307      	adds	r3, #7
 800e732:	f023 0307 	bic.w	r3, r3, #7
 800e736:	f103 0208 	add.w	r2, r3, #8
 800e73a:	f8c8 2000 	str.w	r2, [r8]
 800e73e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e742:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e746:	9307      	str	r3, [sp, #28]
 800e748:	f8cd 8018 	str.w	r8, [sp, #24]
 800e74c:	ee08 0a10 	vmov	s16, r0
 800e750:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e758:	4b9e      	ldr	r3, [pc, #632]	; (800e9d4 <_printf_float+0x2d8>)
 800e75a:	f04f 32ff 	mov.w	r2, #4294967295
 800e75e:	f7f2 fa55 	bl	8000c0c <__aeabi_dcmpun>
 800e762:	bb88      	cbnz	r0, 800e7c8 <_printf_float+0xcc>
 800e764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e768:	4b9a      	ldr	r3, [pc, #616]	; (800e9d4 <_printf_float+0x2d8>)
 800e76a:	f04f 32ff 	mov.w	r2, #4294967295
 800e76e:	f7f2 fa2f 	bl	8000bd0 <__aeabi_dcmple>
 800e772:	bb48      	cbnz	r0, 800e7c8 <_printf_float+0xcc>
 800e774:	2200      	movs	r2, #0
 800e776:	2300      	movs	r3, #0
 800e778:	4640      	mov	r0, r8
 800e77a:	4649      	mov	r1, r9
 800e77c:	f7f2 fa1e 	bl	8000bbc <__aeabi_dcmplt>
 800e780:	b110      	cbz	r0, 800e788 <_printf_float+0x8c>
 800e782:	232d      	movs	r3, #45	; 0x2d
 800e784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e788:	4a93      	ldr	r2, [pc, #588]	; (800e9d8 <_printf_float+0x2dc>)
 800e78a:	4b94      	ldr	r3, [pc, #592]	; (800e9dc <_printf_float+0x2e0>)
 800e78c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e790:	bf94      	ite	ls
 800e792:	4690      	movls	r8, r2
 800e794:	4698      	movhi	r8, r3
 800e796:	2303      	movs	r3, #3
 800e798:	6123      	str	r3, [r4, #16]
 800e79a:	9b05      	ldr	r3, [sp, #20]
 800e79c:	f023 0304 	bic.w	r3, r3, #4
 800e7a0:	6023      	str	r3, [r4, #0]
 800e7a2:	f04f 0900 	mov.w	r9, #0
 800e7a6:	9700      	str	r7, [sp, #0]
 800e7a8:	4633      	mov	r3, r6
 800e7aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800e7ac:	4621      	mov	r1, r4
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	f000 f9da 	bl	800eb68 <_printf_common>
 800e7b4:	3001      	adds	r0, #1
 800e7b6:	f040 8090 	bne.w	800e8da <_printf_float+0x1de>
 800e7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e7be:	b00d      	add	sp, #52	; 0x34
 800e7c0:	ecbd 8b02 	vpop	{d8}
 800e7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c8:	4642      	mov	r2, r8
 800e7ca:	464b      	mov	r3, r9
 800e7cc:	4640      	mov	r0, r8
 800e7ce:	4649      	mov	r1, r9
 800e7d0:	f7f2 fa1c 	bl	8000c0c <__aeabi_dcmpun>
 800e7d4:	b140      	cbz	r0, 800e7e8 <_printf_float+0xec>
 800e7d6:	464b      	mov	r3, r9
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	bfbc      	itt	lt
 800e7dc:	232d      	movlt	r3, #45	; 0x2d
 800e7de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e7e2:	4a7f      	ldr	r2, [pc, #508]	; (800e9e0 <_printf_float+0x2e4>)
 800e7e4:	4b7f      	ldr	r3, [pc, #508]	; (800e9e4 <_printf_float+0x2e8>)
 800e7e6:	e7d1      	b.n	800e78c <_printf_float+0x90>
 800e7e8:	6863      	ldr	r3, [r4, #4]
 800e7ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e7ee:	9206      	str	r2, [sp, #24]
 800e7f0:	1c5a      	adds	r2, r3, #1
 800e7f2:	d13f      	bne.n	800e874 <_printf_float+0x178>
 800e7f4:	2306      	movs	r3, #6
 800e7f6:	6063      	str	r3, [r4, #4]
 800e7f8:	9b05      	ldr	r3, [sp, #20]
 800e7fa:	6861      	ldr	r1, [r4, #4]
 800e7fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e800:	2300      	movs	r3, #0
 800e802:	9303      	str	r3, [sp, #12]
 800e804:	ab0a      	add	r3, sp, #40	; 0x28
 800e806:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e80a:	ab09      	add	r3, sp, #36	; 0x24
 800e80c:	ec49 8b10 	vmov	d0, r8, r9
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	6022      	str	r2, [r4, #0]
 800e814:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e818:	4628      	mov	r0, r5
 800e81a:	f7ff fecf 	bl	800e5bc <__cvt>
 800e81e:	9b06      	ldr	r3, [sp, #24]
 800e820:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e822:	2b47      	cmp	r3, #71	; 0x47
 800e824:	4680      	mov	r8, r0
 800e826:	d108      	bne.n	800e83a <_printf_float+0x13e>
 800e828:	1cc8      	adds	r0, r1, #3
 800e82a:	db02      	blt.n	800e832 <_printf_float+0x136>
 800e82c:	6863      	ldr	r3, [r4, #4]
 800e82e:	4299      	cmp	r1, r3
 800e830:	dd41      	ble.n	800e8b6 <_printf_float+0x1ba>
 800e832:	f1ab 0302 	sub.w	r3, fp, #2
 800e836:	fa5f fb83 	uxtb.w	fp, r3
 800e83a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e83e:	d820      	bhi.n	800e882 <_printf_float+0x186>
 800e840:	3901      	subs	r1, #1
 800e842:	465a      	mov	r2, fp
 800e844:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e848:	9109      	str	r1, [sp, #36]	; 0x24
 800e84a:	f7ff ff19 	bl	800e680 <__exponent>
 800e84e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e850:	1813      	adds	r3, r2, r0
 800e852:	2a01      	cmp	r2, #1
 800e854:	4681      	mov	r9, r0
 800e856:	6123      	str	r3, [r4, #16]
 800e858:	dc02      	bgt.n	800e860 <_printf_float+0x164>
 800e85a:	6822      	ldr	r2, [r4, #0]
 800e85c:	07d2      	lsls	r2, r2, #31
 800e85e:	d501      	bpl.n	800e864 <_printf_float+0x168>
 800e860:	3301      	adds	r3, #1
 800e862:	6123      	str	r3, [r4, #16]
 800e864:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d09c      	beq.n	800e7a6 <_printf_float+0xaa>
 800e86c:	232d      	movs	r3, #45	; 0x2d
 800e86e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e872:	e798      	b.n	800e7a6 <_printf_float+0xaa>
 800e874:	9a06      	ldr	r2, [sp, #24]
 800e876:	2a47      	cmp	r2, #71	; 0x47
 800e878:	d1be      	bne.n	800e7f8 <_printf_float+0xfc>
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d1bc      	bne.n	800e7f8 <_printf_float+0xfc>
 800e87e:	2301      	movs	r3, #1
 800e880:	e7b9      	b.n	800e7f6 <_printf_float+0xfa>
 800e882:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e886:	d118      	bne.n	800e8ba <_printf_float+0x1be>
 800e888:	2900      	cmp	r1, #0
 800e88a:	6863      	ldr	r3, [r4, #4]
 800e88c:	dd0b      	ble.n	800e8a6 <_printf_float+0x1aa>
 800e88e:	6121      	str	r1, [r4, #16]
 800e890:	b913      	cbnz	r3, 800e898 <_printf_float+0x19c>
 800e892:	6822      	ldr	r2, [r4, #0]
 800e894:	07d0      	lsls	r0, r2, #31
 800e896:	d502      	bpl.n	800e89e <_printf_float+0x1a2>
 800e898:	3301      	adds	r3, #1
 800e89a:	440b      	add	r3, r1
 800e89c:	6123      	str	r3, [r4, #16]
 800e89e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e8a0:	f04f 0900 	mov.w	r9, #0
 800e8a4:	e7de      	b.n	800e864 <_printf_float+0x168>
 800e8a6:	b913      	cbnz	r3, 800e8ae <_printf_float+0x1b2>
 800e8a8:	6822      	ldr	r2, [r4, #0]
 800e8aa:	07d2      	lsls	r2, r2, #31
 800e8ac:	d501      	bpl.n	800e8b2 <_printf_float+0x1b6>
 800e8ae:	3302      	adds	r3, #2
 800e8b0:	e7f4      	b.n	800e89c <_printf_float+0x1a0>
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e7f2      	b.n	800e89c <_printf_float+0x1a0>
 800e8b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8bc:	4299      	cmp	r1, r3
 800e8be:	db05      	blt.n	800e8cc <_printf_float+0x1d0>
 800e8c0:	6823      	ldr	r3, [r4, #0]
 800e8c2:	6121      	str	r1, [r4, #16]
 800e8c4:	07d8      	lsls	r0, r3, #31
 800e8c6:	d5ea      	bpl.n	800e89e <_printf_float+0x1a2>
 800e8c8:	1c4b      	adds	r3, r1, #1
 800e8ca:	e7e7      	b.n	800e89c <_printf_float+0x1a0>
 800e8cc:	2900      	cmp	r1, #0
 800e8ce:	bfd4      	ite	le
 800e8d0:	f1c1 0202 	rsble	r2, r1, #2
 800e8d4:	2201      	movgt	r2, #1
 800e8d6:	4413      	add	r3, r2
 800e8d8:	e7e0      	b.n	800e89c <_printf_float+0x1a0>
 800e8da:	6823      	ldr	r3, [r4, #0]
 800e8dc:	055a      	lsls	r2, r3, #21
 800e8de:	d407      	bmi.n	800e8f0 <_printf_float+0x1f4>
 800e8e0:	6923      	ldr	r3, [r4, #16]
 800e8e2:	4642      	mov	r2, r8
 800e8e4:	4631      	mov	r1, r6
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	47b8      	blx	r7
 800e8ea:	3001      	adds	r0, #1
 800e8ec:	d12c      	bne.n	800e948 <_printf_float+0x24c>
 800e8ee:	e764      	b.n	800e7ba <_printf_float+0xbe>
 800e8f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e8f4:	f240 80e0 	bls.w	800eab8 <_printf_float+0x3bc>
 800e8f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	2300      	movs	r3, #0
 800e900:	f7f2 f952 	bl	8000ba8 <__aeabi_dcmpeq>
 800e904:	2800      	cmp	r0, #0
 800e906:	d034      	beq.n	800e972 <_printf_float+0x276>
 800e908:	4a37      	ldr	r2, [pc, #220]	; (800e9e8 <_printf_float+0x2ec>)
 800e90a:	2301      	movs	r3, #1
 800e90c:	4631      	mov	r1, r6
 800e90e:	4628      	mov	r0, r5
 800e910:	47b8      	blx	r7
 800e912:	3001      	adds	r0, #1
 800e914:	f43f af51 	beq.w	800e7ba <_printf_float+0xbe>
 800e918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e91c:	429a      	cmp	r2, r3
 800e91e:	db02      	blt.n	800e926 <_printf_float+0x22a>
 800e920:	6823      	ldr	r3, [r4, #0]
 800e922:	07d8      	lsls	r0, r3, #31
 800e924:	d510      	bpl.n	800e948 <_printf_float+0x24c>
 800e926:	ee18 3a10 	vmov	r3, s16
 800e92a:	4652      	mov	r2, sl
 800e92c:	4631      	mov	r1, r6
 800e92e:	4628      	mov	r0, r5
 800e930:	47b8      	blx	r7
 800e932:	3001      	adds	r0, #1
 800e934:	f43f af41 	beq.w	800e7ba <_printf_float+0xbe>
 800e938:	f04f 0800 	mov.w	r8, #0
 800e93c:	f104 091a 	add.w	r9, r4, #26
 800e940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e942:	3b01      	subs	r3, #1
 800e944:	4543      	cmp	r3, r8
 800e946:	dc09      	bgt.n	800e95c <_printf_float+0x260>
 800e948:	6823      	ldr	r3, [r4, #0]
 800e94a:	079b      	lsls	r3, r3, #30
 800e94c:	f100 8107 	bmi.w	800eb5e <_printf_float+0x462>
 800e950:	68e0      	ldr	r0, [r4, #12]
 800e952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e954:	4298      	cmp	r0, r3
 800e956:	bfb8      	it	lt
 800e958:	4618      	movlt	r0, r3
 800e95a:	e730      	b.n	800e7be <_printf_float+0xc2>
 800e95c:	2301      	movs	r3, #1
 800e95e:	464a      	mov	r2, r9
 800e960:	4631      	mov	r1, r6
 800e962:	4628      	mov	r0, r5
 800e964:	47b8      	blx	r7
 800e966:	3001      	adds	r0, #1
 800e968:	f43f af27 	beq.w	800e7ba <_printf_float+0xbe>
 800e96c:	f108 0801 	add.w	r8, r8, #1
 800e970:	e7e6      	b.n	800e940 <_printf_float+0x244>
 800e972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e974:	2b00      	cmp	r3, #0
 800e976:	dc39      	bgt.n	800e9ec <_printf_float+0x2f0>
 800e978:	4a1b      	ldr	r2, [pc, #108]	; (800e9e8 <_printf_float+0x2ec>)
 800e97a:	2301      	movs	r3, #1
 800e97c:	4631      	mov	r1, r6
 800e97e:	4628      	mov	r0, r5
 800e980:	47b8      	blx	r7
 800e982:	3001      	adds	r0, #1
 800e984:	f43f af19 	beq.w	800e7ba <_printf_float+0xbe>
 800e988:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e98c:	4313      	orrs	r3, r2
 800e98e:	d102      	bne.n	800e996 <_printf_float+0x29a>
 800e990:	6823      	ldr	r3, [r4, #0]
 800e992:	07d9      	lsls	r1, r3, #31
 800e994:	d5d8      	bpl.n	800e948 <_printf_float+0x24c>
 800e996:	ee18 3a10 	vmov	r3, s16
 800e99a:	4652      	mov	r2, sl
 800e99c:	4631      	mov	r1, r6
 800e99e:	4628      	mov	r0, r5
 800e9a0:	47b8      	blx	r7
 800e9a2:	3001      	adds	r0, #1
 800e9a4:	f43f af09 	beq.w	800e7ba <_printf_float+0xbe>
 800e9a8:	f04f 0900 	mov.w	r9, #0
 800e9ac:	f104 0a1a 	add.w	sl, r4, #26
 800e9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9b2:	425b      	negs	r3, r3
 800e9b4:	454b      	cmp	r3, r9
 800e9b6:	dc01      	bgt.n	800e9bc <_printf_float+0x2c0>
 800e9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9ba:	e792      	b.n	800e8e2 <_printf_float+0x1e6>
 800e9bc:	2301      	movs	r3, #1
 800e9be:	4652      	mov	r2, sl
 800e9c0:	4631      	mov	r1, r6
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	47b8      	blx	r7
 800e9c6:	3001      	adds	r0, #1
 800e9c8:	f43f aef7 	beq.w	800e7ba <_printf_float+0xbe>
 800e9cc:	f109 0901 	add.w	r9, r9, #1
 800e9d0:	e7ee      	b.n	800e9b0 <_printf_float+0x2b4>
 800e9d2:	bf00      	nop
 800e9d4:	7fefffff 	.word	0x7fefffff
 800e9d8:	0801256b 	.word	0x0801256b
 800e9dc:	0801256f 	.word	0x0801256f
 800e9e0:	08012573 	.word	0x08012573
 800e9e4:	08012577 	.word	0x08012577
 800e9e8:	0801257b 	.word	0x0801257b
 800e9ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	bfa8      	it	ge
 800e9f4:	461a      	movge	r2, r3
 800e9f6:	2a00      	cmp	r2, #0
 800e9f8:	4691      	mov	r9, r2
 800e9fa:	dc37      	bgt.n	800ea6c <_printf_float+0x370>
 800e9fc:	f04f 0b00 	mov.w	fp, #0
 800ea00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea04:	f104 021a 	add.w	r2, r4, #26
 800ea08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea0a:	9305      	str	r3, [sp, #20]
 800ea0c:	eba3 0309 	sub.w	r3, r3, r9
 800ea10:	455b      	cmp	r3, fp
 800ea12:	dc33      	bgt.n	800ea7c <_printf_float+0x380>
 800ea14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	db3b      	blt.n	800ea94 <_printf_float+0x398>
 800ea1c:	6823      	ldr	r3, [r4, #0]
 800ea1e:	07da      	lsls	r2, r3, #31
 800ea20:	d438      	bmi.n	800ea94 <_printf_float+0x398>
 800ea22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ea26:	eba2 0903 	sub.w	r9, r2, r3
 800ea2a:	9b05      	ldr	r3, [sp, #20]
 800ea2c:	1ad2      	subs	r2, r2, r3
 800ea2e:	4591      	cmp	r9, r2
 800ea30:	bfa8      	it	ge
 800ea32:	4691      	movge	r9, r2
 800ea34:	f1b9 0f00 	cmp.w	r9, #0
 800ea38:	dc35      	bgt.n	800eaa6 <_printf_float+0x3aa>
 800ea3a:	f04f 0800 	mov.w	r8, #0
 800ea3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea42:	f104 0a1a 	add.w	sl, r4, #26
 800ea46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea4a:	1a9b      	subs	r3, r3, r2
 800ea4c:	eba3 0309 	sub.w	r3, r3, r9
 800ea50:	4543      	cmp	r3, r8
 800ea52:	f77f af79 	ble.w	800e948 <_printf_float+0x24c>
 800ea56:	2301      	movs	r3, #1
 800ea58:	4652      	mov	r2, sl
 800ea5a:	4631      	mov	r1, r6
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	47b8      	blx	r7
 800ea60:	3001      	adds	r0, #1
 800ea62:	f43f aeaa 	beq.w	800e7ba <_printf_float+0xbe>
 800ea66:	f108 0801 	add.w	r8, r8, #1
 800ea6a:	e7ec      	b.n	800ea46 <_printf_float+0x34a>
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	4631      	mov	r1, r6
 800ea70:	4642      	mov	r2, r8
 800ea72:	4628      	mov	r0, r5
 800ea74:	47b8      	blx	r7
 800ea76:	3001      	adds	r0, #1
 800ea78:	d1c0      	bne.n	800e9fc <_printf_float+0x300>
 800ea7a:	e69e      	b.n	800e7ba <_printf_float+0xbe>
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	4631      	mov	r1, r6
 800ea80:	4628      	mov	r0, r5
 800ea82:	9205      	str	r2, [sp, #20]
 800ea84:	47b8      	blx	r7
 800ea86:	3001      	adds	r0, #1
 800ea88:	f43f ae97 	beq.w	800e7ba <_printf_float+0xbe>
 800ea8c:	9a05      	ldr	r2, [sp, #20]
 800ea8e:	f10b 0b01 	add.w	fp, fp, #1
 800ea92:	e7b9      	b.n	800ea08 <_printf_float+0x30c>
 800ea94:	ee18 3a10 	vmov	r3, s16
 800ea98:	4652      	mov	r2, sl
 800ea9a:	4631      	mov	r1, r6
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	47b8      	blx	r7
 800eaa0:	3001      	adds	r0, #1
 800eaa2:	d1be      	bne.n	800ea22 <_printf_float+0x326>
 800eaa4:	e689      	b.n	800e7ba <_printf_float+0xbe>
 800eaa6:	9a05      	ldr	r2, [sp, #20]
 800eaa8:	464b      	mov	r3, r9
 800eaaa:	4442      	add	r2, r8
 800eaac:	4631      	mov	r1, r6
 800eaae:	4628      	mov	r0, r5
 800eab0:	47b8      	blx	r7
 800eab2:	3001      	adds	r0, #1
 800eab4:	d1c1      	bne.n	800ea3a <_printf_float+0x33e>
 800eab6:	e680      	b.n	800e7ba <_printf_float+0xbe>
 800eab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eaba:	2a01      	cmp	r2, #1
 800eabc:	dc01      	bgt.n	800eac2 <_printf_float+0x3c6>
 800eabe:	07db      	lsls	r3, r3, #31
 800eac0:	d53a      	bpl.n	800eb38 <_printf_float+0x43c>
 800eac2:	2301      	movs	r3, #1
 800eac4:	4642      	mov	r2, r8
 800eac6:	4631      	mov	r1, r6
 800eac8:	4628      	mov	r0, r5
 800eaca:	47b8      	blx	r7
 800eacc:	3001      	adds	r0, #1
 800eace:	f43f ae74 	beq.w	800e7ba <_printf_float+0xbe>
 800ead2:	ee18 3a10 	vmov	r3, s16
 800ead6:	4652      	mov	r2, sl
 800ead8:	4631      	mov	r1, r6
 800eada:	4628      	mov	r0, r5
 800eadc:	47b8      	blx	r7
 800eade:	3001      	adds	r0, #1
 800eae0:	f43f ae6b 	beq.w	800e7ba <_printf_float+0xbe>
 800eae4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eae8:	2200      	movs	r2, #0
 800eaea:	2300      	movs	r3, #0
 800eaec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800eaf0:	f7f2 f85a 	bl	8000ba8 <__aeabi_dcmpeq>
 800eaf4:	b9d8      	cbnz	r0, 800eb2e <_printf_float+0x432>
 800eaf6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800eafa:	f108 0201 	add.w	r2, r8, #1
 800eafe:	4631      	mov	r1, r6
 800eb00:	4628      	mov	r0, r5
 800eb02:	47b8      	blx	r7
 800eb04:	3001      	adds	r0, #1
 800eb06:	d10e      	bne.n	800eb26 <_printf_float+0x42a>
 800eb08:	e657      	b.n	800e7ba <_printf_float+0xbe>
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	4652      	mov	r2, sl
 800eb0e:	4631      	mov	r1, r6
 800eb10:	4628      	mov	r0, r5
 800eb12:	47b8      	blx	r7
 800eb14:	3001      	adds	r0, #1
 800eb16:	f43f ae50 	beq.w	800e7ba <_printf_float+0xbe>
 800eb1a:	f108 0801 	add.w	r8, r8, #1
 800eb1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb20:	3b01      	subs	r3, #1
 800eb22:	4543      	cmp	r3, r8
 800eb24:	dcf1      	bgt.n	800eb0a <_printf_float+0x40e>
 800eb26:	464b      	mov	r3, r9
 800eb28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eb2c:	e6da      	b.n	800e8e4 <_printf_float+0x1e8>
 800eb2e:	f04f 0800 	mov.w	r8, #0
 800eb32:	f104 0a1a 	add.w	sl, r4, #26
 800eb36:	e7f2      	b.n	800eb1e <_printf_float+0x422>
 800eb38:	2301      	movs	r3, #1
 800eb3a:	4642      	mov	r2, r8
 800eb3c:	e7df      	b.n	800eafe <_printf_float+0x402>
 800eb3e:	2301      	movs	r3, #1
 800eb40:	464a      	mov	r2, r9
 800eb42:	4631      	mov	r1, r6
 800eb44:	4628      	mov	r0, r5
 800eb46:	47b8      	blx	r7
 800eb48:	3001      	adds	r0, #1
 800eb4a:	f43f ae36 	beq.w	800e7ba <_printf_float+0xbe>
 800eb4e:	f108 0801 	add.w	r8, r8, #1
 800eb52:	68e3      	ldr	r3, [r4, #12]
 800eb54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb56:	1a5b      	subs	r3, r3, r1
 800eb58:	4543      	cmp	r3, r8
 800eb5a:	dcf0      	bgt.n	800eb3e <_printf_float+0x442>
 800eb5c:	e6f8      	b.n	800e950 <_printf_float+0x254>
 800eb5e:	f04f 0800 	mov.w	r8, #0
 800eb62:	f104 0919 	add.w	r9, r4, #25
 800eb66:	e7f4      	b.n	800eb52 <_printf_float+0x456>

0800eb68 <_printf_common>:
 800eb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb6c:	4616      	mov	r6, r2
 800eb6e:	4699      	mov	r9, r3
 800eb70:	688a      	ldr	r2, [r1, #8]
 800eb72:	690b      	ldr	r3, [r1, #16]
 800eb74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	bfb8      	it	lt
 800eb7c:	4613      	movlt	r3, r2
 800eb7e:	6033      	str	r3, [r6, #0]
 800eb80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb84:	4607      	mov	r7, r0
 800eb86:	460c      	mov	r4, r1
 800eb88:	b10a      	cbz	r2, 800eb8e <_printf_common+0x26>
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	6033      	str	r3, [r6, #0]
 800eb8e:	6823      	ldr	r3, [r4, #0]
 800eb90:	0699      	lsls	r1, r3, #26
 800eb92:	bf42      	ittt	mi
 800eb94:	6833      	ldrmi	r3, [r6, #0]
 800eb96:	3302      	addmi	r3, #2
 800eb98:	6033      	strmi	r3, [r6, #0]
 800eb9a:	6825      	ldr	r5, [r4, #0]
 800eb9c:	f015 0506 	ands.w	r5, r5, #6
 800eba0:	d106      	bne.n	800ebb0 <_printf_common+0x48>
 800eba2:	f104 0a19 	add.w	sl, r4, #25
 800eba6:	68e3      	ldr	r3, [r4, #12]
 800eba8:	6832      	ldr	r2, [r6, #0]
 800ebaa:	1a9b      	subs	r3, r3, r2
 800ebac:	42ab      	cmp	r3, r5
 800ebae:	dc26      	bgt.n	800ebfe <_printf_common+0x96>
 800ebb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ebb4:	1e13      	subs	r3, r2, #0
 800ebb6:	6822      	ldr	r2, [r4, #0]
 800ebb8:	bf18      	it	ne
 800ebba:	2301      	movne	r3, #1
 800ebbc:	0692      	lsls	r2, r2, #26
 800ebbe:	d42b      	bmi.n	800ec18 <_printf_common+0xb0>
 800ebc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebc4:	4649      	mov	r1, r9
 800ebc6:	4638      	mov	r0, r7
 800ebc8:	47c0      	blx	r8
 800ebca:	3001      	adds	r0, #1
 800ebcc:	d01e      	beq.n	800ec0c <_printf_common+0xa4>
 800ebce:	6823      	ldr	r3, [r4, #0]
 800ebd0:	6922      	ldr	r2, [r4, #16]
 800ebd2:	f003 0306 	and.w	r3, r3, #6
 800ebd6:	2b04      	cmp	r3, #4
 800ebd8:	bf02      	ittt	eq
 800ebda:	68e5      	ldreq	r5, [r4, #12]
 800ebdc:	6833      	ldreq	r3, [r6, #0]
 800ebde:	1aed      	subeq	r5, r5, r3
 800ebe0:	68a3      	ldr	r3, [r4, #8]
 800ebe2:	bf0c      	ite	eq
 800ebe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebe8:	2500      	movne	r5, #0
 800ebea:	4293      	cmp	r3, r2
 800ebec:	bfc4      	itt	gt
 800ebee:	1a9b      	subgt	r3, r3, r2
 800ebf0:	18ed      	addgt	r5, r5, r3
 800ebf2:	2600      	movs	r6, #0
 800ebf4:	341a      	adds	r4, #26
 800ebf6:	42b5      	cmp	r5, r6
 800ebf8:	d11a      	bne.n	800ec30 <_printf_common+0xc8>
 800ebfa:	2000      	movs	r0, #0
 800ebfc:	e008      	b.n	800ec10 <_printf_common+0xa8>
 800ebfe:	2301      	movs	r3, #1
 800ec00:	4652      	mov	r2, sl
 800ec02:	4649      	mov	r1, r9
 800ec04:	4638      	mov	r0, r7
 800ec06:	47c0      	blx	r8
 800ec08:	3001      	adds	r0, #1
 800ec0a:	d103      	bne.n	800ec14 <_printf_common+0xac>
 800ec0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec14:	3501      	adds	r5, #1
 800ec16:	e7c6      	b.n	800eba6 <_printf_common+0x3e>
 800ec18:	18e1      	adds	r1, r4, r3
 800ec1a:	1c5a      	adds	r2, r3, #1
 800ec1c:	2030      	movs	r0, #48	; 0x30
 800ec1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec22:	4422      	add	r2, r4
 800ec24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec2c:	3302      	adds	r3, #2
 800ec2e:	e7c7      	b.n	800ebc0 <_printf_common+0x58>
 800ec30:	2301      	movs	r3, #1
 800ec32:	4622      	mov	r2, r4
 800ec34:	4649      	mov	r1, r9
 800ec36:	4638      	mov	r0, r7
 800ec38:	47c0      	blx	r8
 800ec3a:	3001      	adds	r0, #1
 800ec3c:	d0e6      	beq.n	800ec0c <_printf_common+0xa4>
 800ec3e:	3601      	adds	r6, #1
 800ec40:	e7d9      	b.n	800ebf6 <_printf_common+0x8e>
	...

0800ec44 <_printf_i>:
 800ec44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec48:	7e0f      	ldrb	r7, [r1, #24]
 800ec4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec4c:	2f78      	cmp	r7, #120	; 0x78
 800ec4e:	4691      	mov	r9, r2
 800ec50:	4680      	mov	r8, r0
 800ec52:	460c      	mov	r4, r1
 800ec54:	469a      	mov	sl, r3
 800ec56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ec5a:	d807      	bhi.n	800ec6c <_printf_i+0x28>
 800ec5c:	2f62      	cmp	r7, #98	; 0x62
 800ec5e:	d80a      	bhi.n	800ec76 <_printf_i+0x32>
 800ec60:	2f00      	cmp	r7, #0
 800ec62:	f000 80d4 	beq.w	800ee0e <_printf_i+0x1ca>
 800ec66:	2f58      	cmp	r7, #88	; 0x58
 800ec68:	f000 80c0 	beq.w	800edec <_printf_i+0x1a8>
 800ec6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec74:	e03a      	b.n	800ecec <_printf_i+0xa8>
 800ec76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec7a:	2b15      	cmp	r3, #21
 800ec7c:	d8f6      	bhi.n	800ec6c <_printf_i+0x28>
 800ec7e:	a101      	add	r1, pc, #4	; (adr r1, 800ec84 <_printf_i+0x40>)
 800ec80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec84:	0800ecdd 	.word	0x0800ecdd
 800ec88:	0800ecf1 	.word	0x0800ecf1
 800ec8c:	0800ec6d 	.word	0x0800ec6d
 800ec90:	0800ec6d 	.word	0x0800ec6d
 800ec94:	0800ec6d 	.word	0x0800ec6d
 800ec98:	0800ec6d 	.word	0x0800ec6d
 800ec9c:	0800ecf1 	.word	0x0800ecf1
 800eca0:	0800ec6d 	.word	0x0800ec6d
 800eca4:	0800ec6d 	.word	0x0800ec6d
 800eca8:	0800ec6d 	.word	0x0800ec6d
 800ecac:	0800ec6d 	.word	0x0800ec6d
 800ecb0:	0800edf5 	.word	0x0800edf5
 800ecb4:	0800ed1d 	.word	0x0800ed1d
 800ecb8:	0800edaf 	.word	0x0800edaf
 800ecbc:	0800ec6d 	.word	0x0800ec6d
 800ecc0:	0800ec6d 	.word	0x0800ec6d
 800ecc4:	0800ee17 	.word	0x0800ee17
 800ecc8:	0800ec6d 	.word	0x0800ec6d
 800eccc:	0800ed1d 	.word	0x0800ed1d
 800ecd0:	0800ec6d 	.word	0x0800ec6d
 800ecd4:	0800ec6d 	.word	0x0800ec6d
 800ecd8:	0800edb7 	.word	0x0800edb7
 800ecdc:	682b      	ldr	r3, [r5, #0]
 800ecde:	1d1a      	adds	r2, r3, #4
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	602a      	str	r2, [r5, #0]
 800ece4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ece8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ecec:	2301      	movs	r3, #1
 800ecee:	e09f      	b.n	800ee30 <_printf_i+0x1ec>
 800ecf0:	6820      	ldr	r0, [r4, #0]
 800ecf2:	682b      	ldr	r3, [r5, #0]
 800ecf4:	0607      	lsls	r7, r0, #24
 800ecf6:	f103 0104 	add.w	r1, r3, #4
 800ecfa:	6029      	str	r1, [r5, #0]
 800ecfc:	d501      	bpl.n	800ed02 <_printf_i+0xbe>
 800ecfe:	681e      	ldr	r6, [r3, #0]
 800ed00:	e003      	b.n	800ed0a <_printf_i+0xc6>
 800ed02:	0646      	lsls	r6, r0, #25
 800ed04:	d5fb      	bpl.n	800ecfe <_printf_i+0xba>
 800ed06:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ed0a:	2e00      	cmp	r6, #0
 800ed0c:	da03      	bge.n	800ed16 <_printf_i+0xd2>
 800ed0e:	232d      	movs	r3, #45	; 0x2d
 800ed10:	4276      	negs	r6, r6
 800ed12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed16:	485a      	ldr	r0, [pc, #360]	; (800ee80 <_printf_i+0x23c>)
 800ed18:	230a      	movs	r3, #10
 800ed1a:	e012      	b.n	800ed42 <_printf_i+0xfe>
 800ed1c:	682b      	ldr	r3, [r5, #0]
 800ed1e:	6820      	ldr	r0, [r4, #0]
 800ed20:	1d19      	adds	r1, r3, #4
 800ed22:	6029      	str	r1, [r5, #0]
 800ed24:	0605      	lsls	r5, r0, #24
 800ed26:	d501      	bpl.n	800ed2c <_printf_i+0xe8>
 800ed28:	681e      	ldr	r6, [r3, #0]
 800ed2a:	e002      	b.n	800ed32 <_printf_i+0xee>
 800ed2c:	0641      	lsls	r1, r0, #25
 800ed2e:	d5fb      	bpl.n	800ed28 <_printf_i+0xe4>
 800ed30:	881e      	ldrh	r6, [r3, #0]
 800ed32:	4853      	ldr	r0, [pc, #332]	; (800ee80 <_printf_i+0x23c>)
 800ed34:	2f6f      	cmp	r7, #111	; 0x6f
 800ed36:	bf0c      	ite	eq
 800ed38:	2308      	moveq	r3, #8
 800ed3a:	230a      	movne	r3, #10
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed42:	6865      	ldr	r5, [r4, #4]
 800ed44:	60a5      	str	r5, [r4, #8]
 800ed46:	2d00      	cmp	r5, #0
 800ed48:	bfa2      	ittt	ge
 800ed4a:	6821      	ldrge	r1, [r4, #0]
 800ed4c:	f021 0104 	bicge.w	r1, r1, #4
 800ed50:	6021      	strge	r1, [r4, #0]
 800ed52:	b90e      	cbnz	r6, 800ed58 <_printf_i+0x114>
 800ed54:	2d00      	cmp	r5, #0
 800ed56:	d04b      	beq.n	800edf0 <_printf_i+0x1ac>
 800ed58:	4615      	mov	r5, r2
 800ed5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ed5e:	fb03 6711 	mls	r7, r3, r1, r6
 800ed62:	5dc7      	ldrb	r7, [r0, r7]
 800ed64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ed68:	4637      	mov	r7, r6
 800ed6a:	42bb      	cmp	r3, r7
 800ed6c:	460e      	mov	r6, r1
 800ed6e:	d9f4      	bls.n	800ed5a <_printf_i+0x116>
 800ed70:	2b08      	cmp	r3, #8
 800ed72:	d10b      	bne.n	800ed8c <_printf_i+0x148>
 800ed74:	6823      	ldr	r3, [r4, #0]
 800ed76:	07de      	lsls	r6, r3, #31
 800ed78:	d508      	bpl.n	800ed8c <_printf_i+0x148>
 800ed7a:	6923      	ldr	r3, [r4, #16]
 800ed7c:	6861      	ldr	r1, [r4, #4]
 800ed7e:	4299      	cmp	r1, r3
 800ed80:	bfde      	ittt	le
 800ed82:	2330      	movle	r3, #48	; 0x30
 800ed84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ed8c:	1b52      	subs	r2, r2, r5
 800ed8e:	6122      	str	r2, [r4, #16]
 800ed90:	f8cd a000 	str.w	sl, [sp]
 800ed94:	464b      	mov	r3, r9
 800ed96:	aa03      	add	r2, sp, #12
 800ed98:	4621      	mov	r1, r4
 800ed9a:	4640      	mov	r0, r8
 800ed9c:	f7ff fee4 	bl	800eb68 <_printf_common>
 800eda0:	3001      	adds	r0, #1
 800eda2:	d14a      	bne.n	800ee3a <_printf_i+0x1f6>
 800eda4:	f04f 30ff 	mov.w	r0, #4294967295
 800eda8:	b004      	add	sp, #16
 800edaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edae:	6823      	ldr	r3, [r4, #0]
 800edb0:	f043 0320 	orr.w	r3, r3, #32
 800edb4:	6023      	str	r3, [r4, #0]
 800edb6:	4833      	ldr	r0, [pc, #204]	; (800ee84 <_printf_i+0x240>)
 800edb8:	2778      	movs	r7, #120	; 0x78
 800edba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800edbe:	6823      	ldr	r3, [r4, #0]
 800edc0:	6829      	ldr	r1, [r5, #0]
 800edc2:	061f      	lsls	r7, r3, #24
 800edc4:	f851 6b04 	ldr.w	r6, [r1], #4
 800edc8:	d402      	bmi.n	800edd0 <_printf_i+0x18c>
 800edca:	065f      	lsls	r7, r3, #25
 800edcc:	bf48      	it	mi
 800edce:	b2b6      	uxthmi	r6, r6
 800edd0:	07df      	lsls	r7, r3, #31
 800edd2:	bf48      	it	mi
 800edd4:	f043 0320 	orrmi.w	r3, r3, #32
 800edd8:	6029      	str	r1, [r5, #0]
 800edda:	bf48      	it	mi
 800eddc:	6023      	strmi	r3, [r4, #0]
 800edde:	b91e      	cbnz	r6, 800ede8 <_printf_i+0x1a4>
 800ede0:	6823      	ldr	r3, [r4, #0]
 800ede2:	f023 0320 	bic.w	r3, r3, #32
 800ede6:	6023      	str	r3, [r4, #0]
 800ede8:	2310      	movs	r3, #16
 800edea:	e7a7      	b.n	800ed3c <_printf_i+0xf8>
 800edec:	4824      	ldr	r0, [pc, #144]	; (800ee80 <_printf_i+0x23c>)
 800edee:	e7e4      	b.n	800edba <_printf_i+0x176>
 800edf0:	4615      	mov	r5, r2
 800edf2:	e7bd      	b.n	800ed70 <_printf_i+0x12c>
 800edf4:	682b      	ldr	r3, [r5, #0]
 800edf6:	6826      	ldr	r6, [r4, #0]
 800edf8:	6961      	ldr	r1, [r4, #20]
 800edfa:	1d18      	adds	r0, r3, #4
 800edfc:	6028      	str	r0, [r5, #0]
 800edfe:	0635      	lsls	r5, r6, #24
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	d501      	bpl.n	800ee08 <_printf_i+0x1c4>
 800ee04:	6019      	str	r1, [r3, #0]
 800ee06:	e002      	b.n	800ee0e <_printf_i+0x1ca>
 800ee08:	0670      	lsls	r0, r6, #25
 800ee0a:	d5fb      	bpl.n	800ee04 <_printf_i+0x1c0>
 800ee0c:	8019      	strh	r1, [r3, #0]
 800ee0e:	2300      	movs	r3, #0
 800ee10:	6123      	str	r3, [r4, #16]
 800ee12:	4615      	mov	r5, r2
 800ee14:	e7bc      	b.n	800ed90 <_printf_i+0x14c>
 800ee16:	682b      	ldr	r3, [r5, #0]
 800ee18:	1d1a      	adds	r2, r3, #4
 800ee1a:	602a      	str	r2, [r5, #0]
 800ee1c:	681d      	ldr	r5, [r3, #0]
 800ee1e:	6862      	ldr	r2, [r4, #4]
 800ee20:	2100      	movs	r1, #0
 800ee22:	4628      	mov	r0, r5
 800ee24:	f7f1 fa44 	bl	80002b0 <memchr>
 800ee28:	b108      	cbz	r0, 800ee2e <_printf_i+0x1ea>
 800ee2a:	1b40      	subs	r0, r0, r5
 800ee2c:	6060      	str	r0, [r4, #4]
 800ee2e:	6863      	ldr	r3, [r4, #4]
 800ee30:	6123      	str	r3, [r4, #16]
 800ee32:	2300      	movs	r3, #0
 800ee34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee38:	e7aa      	b.n	800ed90 <_printf_i+0x14c>
 800ee3a:	6923      	ldr	r3, [r4, #16]
 800ee3c:	462a      	mov	r2, r5
 800ee3e:	4649      	mov	r1, r9
 800ee40:	4640      	mov	r0, r8
 800ee42:	47d0      	blx	sl
 800ee44:	3001      	adds	r0, #1
 800ee46:	d0ad      	beq.n	800eda4 <_printf_i+0x160>
 800ee48:	6823      	ldr	r3, [r4, #0]
 800ee4a:	079b      	lsls	r3, r3, #30
 800ee4c:	d413      	bmi.n	800ee76 <_printf_i+0x232>
 800ee4e:	68e0      	ldr	r0, [r4, #12]
 800ee50:	9b03      	ldr	r3, [sp, #12]
 800ee52:	4298      	cmp	r0, r3
 800ee54:	bfb8      	it	lt
 800ee56:	4618      	movlt	r0, r3
 800ee58:	e7a6      	b.n	800eda8 <_printf_i+0x164>
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	4632      	mov	r2, r6
 800ee5e:	4649      	mov	r1, r9
 800ee60:	4640      	mov	r0, r8
 800ee62:	47d0      	blx	sl
 800ee64:	3001      	adds	r0, #1
 800ee66:	d09d      	beq.n	800eda4 <_printf_i+0x160>
 800ee68:	3501      	adds	r5, #1
 800ee6a:	68e3      	ldr	r3, [r4, #12]
 800ee6c:	9903      	ldr	r1, [sp, #12]
 800ee6e:	1a5b      	subs	r3, r3, r1
 800ee70:	42ab      	cmp	r3, r5
 800ee72:	dcf2      	bgt.n	800ee5a <_printf_i+0x216>
 800ee74:	e7eb      	b.n	800ee4e <_printf_i+0x20a>
 800ee76:	2500      	movs	r5, #0
 800ee78:	f104 0619 	add.w	r6, r4, #25
 800ee7c:	e7f5      	b.n	800ee6a <_printf_i+0x226>
 800ee7e:	bf00      	nop
 800ee80:	0801257d 	.word	0x0801257d
 800ee84:	0801258e 	.word	0x0801258e

0800ee88 <std>:
 800ee88:	2300      	movs	r3, #0
 800ee8a:	b510      	push	{r4, lr}
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	e9c0 3300 	strd	r3, r3, [r0]
 800ee92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee96:	6083      	str	r3, [r0, #8]
 800ee98:	8181      	strh	r1, [r0, #12]
 800ee9a:	6643      	str	r3, [r0, #100]	; 0x64
 800ee9c:	81c2      	strh	r2, [r0, #14]
 800ee9e:	6183      	str	r3, [r0, #24]
 800eea0:	4619      	mov	r1, r3
 800eea2:	2208      	movs	r2, #8
 800eea4:	305c      	adds	r0, #92	; 0x5c
 800eea6:	f000 f938 	bl	800f11a <memset>
 800eeaa:	4b0d      	ldr	r3, [pc, #52]	; (800eee0 <std+0x58>)
 800eeac:	6263      	str	r3, [r4, #36]	; 0x24
 800eeae:	4b0d      	ldr	r3, [pc, #52]	; (800eee4 <std+0x5c>)
 800eeb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800eeb2:	4b0d      	ldr	r3, [pc, #52]	; (800eee8 <std+0x60>)
 800eeb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eeb6:	4b0d      	ldr	r3, [pc, #52]	; (800eeec <std+0x64>)
 800eeb8:	6323      	str	r3, [r4, #48]	; 0x30
 800eeba:	4b0d      	ldr	r3, [pc, #52]	; (800eef0 <std+0x68>)
 800eebc:	6224      	str	r4, [r4, #32]
 800eebe:	429c      	cmp	r4, r3
 800eec0:	d006      	beq.n	800eed0 <std+0x48>
 800eec2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800eec6:	4294      	cmp	r4, r2
 800eec8:	d002      	beq.n	800eed0 <std+0x48>
 800eeca:	33d0      	adds	r3, #208	; 0xd0
 800eecc:	429c      	cmp	r4, r3
 800eece:	d105      	bne.n	800eedc <std+0x54>
 800eed0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eed8:	f000 b98a 	b.w	800f1f0 <__retarget_lock_init_recursive>
 800eedc:	bd10      	pop	{r4, pc}
 800eede:	bf00      	nop
 800eee0:	0800f075 	.word	0x0800f075
 800eee4:	0800f097 	.word	0x0800f097
 800eee8:	0800f0cf 	.word	0x0800f0cf
 800eeec:	0800f0f3 	.word	0x0800f0f3
 800eef0:	2001a318 	.word	0x2001a318

0800eef4 <stdio_exit_handler>:
 800eef4:	4a02      	ldr	r2, [pc, #8]	; (800ef00 <stdio_exit_handler+0xc>)
 800eef6:	4903      	ldr	r1, [pc, #12]	; (800ef04 <stdio_exit_handler+0x10>)
 800eef8:	4803      	ldr	r0, [pc, #12]	; (800ef08 <stdio_exit_handler+0x14>)
 800eefa:	f000 b869 	b.w	800efd0 <_fwalk_sglue>
 800eefe:	bf00      	nop
 800ef00:	2000001c 	.word	0x2000001c
 800ef04:	08010c01 	.word	0x08010c01
 800ef08:	20000194 	.word	0x20000194

0800ef0c <cleanup_stdio>:
 800ef0c:	6841      	ldr	r1, [r0, #4]
 800ef0e:	4b0c      	ldr	r3, [pc, #48]	; (800ef40 <cleanup_stdio+0x34>)
 800ef10:	4299      	cmp	r1, r3
 800ef12:	b510      	push	{r4, lr}
 800ef14:	4604      	mov	r4, r0
 800ef16:	d001      	beq.n	800ef1c <cleanup_stdio+0x10>
 800ef18:	f001 fe72 	bl	8010c00 <_fflush_r>
 800ef1c:	68a1      	ldr	r1, [r4, #8]
 800ef1e:	4b09      	ldr	r3, [pc, #36]	; (800ef44 <cleanup_stdio+0x38>)
 800ef20:	4299      	cmp	r1, r3
 800ef22:	d002      	beq.n	800ef2a <cleanup_stdio+0x1e>
 800ef24:	4620      	mov	r0, r4
 800ef26:	f001 fe6b 	bl	8010c00 <_fflush_r>
 800ef2a:	68e1      	ldr	r1, [r4, #12]
 800ef2c:	4b06      	ldr	r3, [pc, #24]	; (800ef48 <cleanup_stdio+0x3c>)
 800ef2e:	4299      	cmp	r1, r3
 800ef30:	d004      	beq.n	800ef3c <cleanup_stdio+0x30>
 800ef32:	4620      	mov	r0, r4
 800ef34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef38:	f001 be62 	b.w	8010c00 <_fflush_r>
 800ef3c:	bd10      	pop	{r4, pc}
 800ef3e:	bf00      	nop
 800ef40:	2001a318 	.word	0x2001a318
 800ef44:	2001a380 	.word	0x2001a380
 800ef48:	2001a3e8 	.word	0x2001a3e8

0800ef4c <global_stdio_init.part.0>:
 800ef4c:	b510      	push	{r4, lr}
 800ef4e:	4b0b      	ldr	r3, [pc, #44]	; (800ef7c <global_stdio_init.part.0+0x30>)
 800ef50:	4c0b      	ldr	r4, [pc, #44]	; (800ef80 <global_stdio_init.part.0+0x34>)
 800ef52:	4a0c      	ldr	r2, [pc, #48]	; (800ef84 <global_stdio_init.part.0+0x38>)
 800ef54:	601a      	str	r2, [r3, #0]
 800ef56:	4620      	mov	r0, r4
 800ef58:	2200      	movs	r2, #0
 800ef5a:	2104      	movs	r1, #4
 800ef5c:	f7ff ff94 	bl	800ee88 <std>
 800ef60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ef64:	2201      	movs	r2, #1
 800ef66:	2109      	movs	r1, #9
 800ef68:	f7ff ff8e 	bl	800ee88 <std>
 800ef6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ef70:	2202      	movs	r2, #2
 800ef72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef76:	2112      	movs	r1, #18
 800ef78:	f7ff bf86 	b.w	800ee88 <std>
 800ef7c:	2001a450 	.word	0x2001a450
 800ef80:	2001a318 	.word	0x2001a318
 800ef84:	0800eef5 	.word	0x0800eef5

0800ef88 <__sfp_lock_acquire>:
 800ef88:	4801      	ldr	r0, [pc, #4]	; (800ef90 <__sfp_lock_acquire+0x8>)
 800ef8a:	f000 b932 	b.w	800f1f2 <__retarget_lock_acquire_recursive>
 800ef8e:	bf00      	nop
 800ef90:	2001a459 	.word	0x2001a459

0800ef94 <__sfp_lock_release>:
 800ef94:	4801      	ldr	r0, [pc, #4]	; (800ef9c <__sfp_lock_release+0x8>)
 800ef96:	f000 b92d 	b.w	800f1f4 <__retarget_lock_release_recursive>
 800ef9a:	bf00      	nop
 800ef9c:	2001a459 	.word	0x2001a459

0800efa0 <__sinit>:
 800efa0:	b510      	push	{r4, lr}
 800efa2:	4604      	mov	r4, r0
 800efa4:	f7ff fff0 	bl	800ef88 <__sfp_lock_acquire>
 800efa8:	6a23      	ldr	r3, [r4, #32]
 800efaa:	b11b      	cbz	r3, 800efb4 <__sinit+0x14>
 800efac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efb0:	f7ff bff0 	b.w	800ef94 <__sfp_lock_release>
 800efb4:	4b04      	ldr	r3, [pc, #16]	; (800efc8 <__sinit+0x28>)
 800efb6:	6223      	str	r3, [r4, #32]
 800efb8:	4b04      	ldr	r3, [pc, #16]	; (800efcc <__sinit+0x2c>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d1f5      	bne.n	800efac <__sinit+0xc>
 800efc0:	f7ff ffc4 	bl	800ef4c <global_stdio_init.part.0>
 800efc4:	e7f2      	b.n	800efac <__sinit+0xc>
 800efc6:	bf00      	nop
 800efc8:	0800ef0d 	.word	0x0800ef0d
 800efcc:	2001a450 	.word	0x2001a450

0800efd0 <_fwalk_sglue>:
 800efd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efd4:	4607      	mov	r7, r0
 800efd6:	4688      	mov	r8, r1
 800efd8:	4614      	mov	r4, r2
 800efda:	2600      	movs	r6, #0
 800efdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800efe0:	f1b9 0901 	subs.w	r9, r9, #1
 800efe4:	d505      	bpl.n	800eff2 <_fwalk_sglue+0x22>
 800efe6:	6824      	ldr	r4, [r4, #0]
 800efe8:	2c00      	cmp	r4, #0
 800efea:	d1f7      	bne.n	800efdc <_fwalk_sglue+0xc>
 800efec:	4630      	mov	r0, r6
 800efee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eff2:	89ab      	ldrh	r3, [r5, #12]
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d907      	bls.n	800f008 <_fwalk_sglue+0x38>
 800eff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800effc:	3301      	adds	r3, #1
 800effe:	d003      	beq.n	800f008 <_fwalk_sglue+0x38>
 800f000:	4629      	mov	r1, r5
 800f002:	4638      	mov	r0, r7
 800f004:	47c0      	blx	r8
 800f006:	4306      	orrs	r6, r0
 800f008:	3568      	adds	r5, #104	; 0x68
 800f00a:	e7e9      	b.n	800efe0 <_fwalk_sglue+0x10>

0800f00c <sniprintf>:
 800f00c:	b40c      	push	{r2, r3}
 800f00e:	b530      	push	{r4, r5, lr}
 800f010:	4b17      	ldr	r3, [pc, #92]	; (800f070 <sniprintf+0x64>)
 800f012:	1e0c      	subs	r4, r1, #0
 800f014:	681d      	ldr	r5, [r3, #0]
 800f016:	b09d      	sub	sp, #116	; 0x74
 800f018:	da08      	bge.n	800f02c <sniprintf+0x20>
 800f01a:	238b      	movs	r3, #139	; 0x8b
 800f01c:	602b      	str	r3, [r5, #0]
 800f01e:	f04f 30ff 	mov.w	r0, #4294967295
 800f022:	b01d      	add	sp, #116	; 0x74
 800f024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f028:	b002      	add	sp, #8
 800f02a:	4770      	bx	lr
 800f02c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f030:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f034:	bf14      	ite	ne
 800f036:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f03a:	4623      	moveq	r3, r4
 800f03c:	9304      	str	r3, [sp, #16]
 800f03e:	9307      	str	r3, [sp, #28]
 800f040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f044:	9002      	str	r0, [sp, #8]
 800f046:	9006      	str	r0, [sp, #24]
 800f048:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f04c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f04e:	ab21      	add	r3, sp, #132	; 0x84
 800f050:	a902      	add	r1, sp, #8
 800f052:	4628      	mov	r0, r5
 800f054:	9301      	str	r3, [sp, #4]
 800f056:	f001 fc4f 	bl	80108f8 <_svfiprintf_r>
 800f05a:	1c43      	adds	r3, r0, #1
 800f05c:	bfbc      	itt	lt
 800f05e:	238b      	movlt	r3, #139	; 0x8b
 800f060:	602b      	strlt	r3, [r5, #0]
 800f062:	2c00      	cmp	r4, #0
 800f064:	d0dd      	beq.n	800f022 <sniprintf+0x16>
 800f066:	9b02      	ldr	r3, [sp, #8]
 800f068:	2200      	movs	r2, #0
 800f06a:	701a      	strb	r2, [r3, #0]
 800f06c:	e7d9      	b.n	800f022 <sniprintf+0x16>
 800f06e:	bf00      	nop
 800f070:	200001e0 	.word	0x200001e0

0800f074 <__sread>:
 800f074:	b510      	push	{r4, lr}
 800f076:	460c      	mov	r4, r1
 800f078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f07c:	f000 f87c 	bl	800f178 <_read_r>
 800f080:	2800      	cmp	r0, #0
 800f082:	bfab      	itete	ge
 800f084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f086:	89a3      	ldrhlt	r3, [r4, #12]
 800f088:	181b      	addge	r3, r3, r0
 800f08a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f08e:	bfac      	ite	ge
 800f090:	6563      	strge	r3, [r4, #84]	; 0x54
 800f092:	81a3      	strhlt	r3, [r4, #12]
 800f094:	bd10      	pop	{r4, pc}

0800f096 <__swrite>:
 800f096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f09a:	461f      	mov	r7, r3
 800f09c:	898b      	ldrh	r3, [r1, #12]
 800f09e:	05db      	lsls	r3, r3, #23
 800f0a0:	4605      	mov	r5, r0
 800f0a2:	460c      	mov	r4, r1
 800f0a4:	4616      	mov	r6, r2
 800f0a6:	d505      	bpl.n	800f0b4 <__swrite+0x1e>
 800f0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f000 f850 	bl	800f154 <_lseek_r>
 800f0b4:	89a3      	ldrh	r3, [r4, #12]
 800f0b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f0be:	81a3      	strh	r3, [r4, #12]
 800f0c0:	4632      	mov	r2, r6
 800f0c2:	463b      	mov	r3, r7
 800f0c4:	4628      	mov	r0, r5
 800f0c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ca:	f7ff b9d5 	b.w	800e478 <_write_r>

0800f0ce <__sseek>:
 800f0ce:	b510      	push	{r4, lr}
 800f0d0:	460c      	mov	r4, r1
 800f0d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0d6:	f000 f83d 	bl	800f154 <_lseek_r>
 800f0da:	1c43      	adds	r3, r0, #1
 800f0dc:	89a3      	ldrh	r3, [r4, #12]
 800f0de:	bf15      	itete	ne
 800f0e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f0e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f0e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f0ea:	81a3      	strheq	r3, [r4, #12]
 800f0ec:	bf18      	it	ne
 800f0ee:	81a3      	strhne	r3, [r4, #12]
 800f0f0:	bd10      	pop	{r4, pc}

0800f0f2 <__sclose>:
 800f0f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0f6:	f000 b81d 	b.w	800f134 <_close_r>

0800f0fa <memcmp>:
 800f0fa:	b510      	push	{r4, lr}
 800f0fc:	3901      	subs	r1, #1
 800f0fe:	4402      	add	r2, r0
 800f100:	4290      	cmp	r0, r2
 800f102:	d101      	bne.n	800f108 <memcmp+0xe>
 800f104:	2000      	movs	r0, #0
 800f106:	e005      	b.n	800f114 <memcmp+0x1a>
 800f108:	7803      	ldrb	r3, [r0, #0]
 800f10a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f10e:	42a3      	cmp	r3, r4
 800f110:	d001      	beq.n	800f116 <memcmp+0x1c>
 800f112:	1b18      	subs	r0, r3, r4
 800f114:	bd10      	pop	{r4, pc}
 800f116:	3001      	adds	r0, #1
 800f118:	e7f2      	b.n	800f100 <memcmp+0x6>

0800f11a <memset>:
 800f11a:	4402      	add	r2, r0
 800f11c:	4603      	mov	r3, r0
 800f11e:	4293      	cmp	r3, r2
 800f120:	d100      	bne.n	800f124 <memset+0xa>
 800f122:	4770      	bx	lr
 800f124:	f803 1b01 	strb.w	r1, [r3], #1
 800f128:	e7f9      	b.n	800f11e <memset+0x4>
	...

0800f12c <_localeconv_r>:
 800f12c:	4800      	ldr	r0, [pc, #0]	; (800f130 <_localeconv_r+0x4>)
 800f12e:	4770      	bx	lr
 800f130:	20000118 	.word	0x20000118

0800f134 <_close_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	4d06      	ldr	r5, [pc, #24]	; (800f150 <_close_r+0x1c>)
 800f138:	2300      	movs	r3, #0
 800f13a:	4604      	mov	r4, r0
 800f13c:	4608      	mov	r0, r1
 800f13e:	602b      	str	r3, [r5, #0]
 800f140:	f7f5 fb67 	bl	8004812 <_close>
 800f144:	1c43      	adds	r3, r0, #1
 800f146:	d102      	bne.n	800f14e <_close_r+0x1a>
 800f148:	682b      	ldr	r3, [r5, #0]
 800f14a:	b103      	cbz	r3, 800f14e <_close_r+0x1a>
 800f14c:	6023      	str	r3, [r4, #0]
 800f14e:	bd38      	pop	{r3, r4, r5, pc}
 800f150:	2001a454 	.word	0x2001a454

0800f154 <_lseek_r>:
 800f154:	b538      	push	{r3, r4, r5, lr}
 800f156:	4d07      	ldr	r5, [pc, #28]	; (800f174 <_lseek_r+0x20>)
 800f158:	4604      	mov	r4, r0
 800f15a:	4608      	mov	r0, r1
 800f15c:	4611      	mov	r1, r2
 800f15e:	2200      	movs	r2, #0
 800f160:	602a      	str	r2, [r5, #0]
 800f162:	461a      	mov	r2, r3
 800f164:	f7f5 fb7c 	bl	8004860 <_lseek>
 800f168:	1c43      	adds	r3, r0, #1
 800f16a:	d102      	bne.n	800f172 <_lseek_r+0x1e>
 800f16c:	682b      	ldr	r3, [r5, #0]
 800f16e:	b103      	cbz	r3, 800f172 <_lseek_r+0x1e>
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	bd38      	pop	{r3, r4, r5, pc}
 800f174:	2001a454 	.word	0x2001a454

0800f178 <_read_r>:
 800f178:	b538      	push	{r3, r4, r5, lr}
 800f17a:	4d07      	ldr	r5, [pc, #28]	; (800f198 <_read_r+0x20>)
 800f17c:	4604      	mov	r4, r0
 800f17e:	4608      	mov	r0, r1
 800f180:	4611      	mov	r1, r2
 800f182:	2200      	movs	r2, #0
 800f184:	602a      	str	r2, [r5, #0]
 800f186:	461a      	mov	r2, r3
 800f188:	f7f5 fb26 	bl	80047d8 <_read>
 800f18c:	1c43      	adds	r3, r0, #1
 800f18e:	d102      	bne.n	800f196 <_read_r+0x1e>
 800f190:	682b      	ldr	r3, [r5, #0]
 800f192:	b103      	cbz	r3, 800f196 <_read_r+0x1e>
 800f194:	6023      	str	r3, [r4, #0]
 800f196:	bd38      	pop	{r3, r4, r5, pc}
 800f198:	2001a454 	.word	0x2001a454

0800f19c <__errno>:
 800f19c:	4b01      	ldr	r3, [pc, #4]	; (800f1a4 <__errno+0x8>)
 800f19e:	6818      	ldr	r0, [r3, #0]
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop
 800f1a4:	200001e0 	.word	0x200001e0

0800f1a8 <__libc_init_array>:
 800f1a8:	b570      	push	{r4, r5, r6, lr}
 800f1aa:	4d0d      	ldr	r5, [pc, #52]	; (800f1e0 <__libc_init_array+0x38>)
 800f1ac:	4c0d      	ldr	r4, [pc, #52]	; (800f1e4 <__libc_init_array+0x3c>)
 800f1ae:	1b64      	subs	r4, r4, r5
 800f1b0:	10a4      	asrs	r4, r4, #2
 800f1b2:	2600      	movs	r6, #0
 800f1b4:	42a6      	cmp	r6, r4
 800f1b6:	d109      	bne.n	800f1cc <__libc_init_array+0x24>
 800f1b8:	4d0b      	ldr	r5, [pc, #44]	; (800f1e8 <__libc_init_array+0x40>)
 800f1ba:	4c0c      	ldr	r4, [pc, #48]	; (800f1ec <__libc_init_array+0x44>)
 800f1bc:	f003 f828 	bl	8012210 <_init>
 800f1c0:	1b64      	subs	r4, r4, r5
 800f1c2:	10a4      	asrs	r4, r4, #2
 800f1c4:	2600      	movs	r6, #0
 800f1c6:	42a6      	cmp	r6, r4
 800f1c8:	d105      	bne.n	800f1d6 <__libc_init_array+0x2e>
 800f1ca:	bd70      	pop	{r4, r5, r6, pc}
 800f1cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1d0:	4798      	blx	r3
 800f1d2:	3601      	adds	r6, #1
 800f1d4:	e7ee      	b.n	800f1b4 <__libc_init_array+0xc>
 800f1d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1da:	4798      	blx	r3
 800f1dc:	3601      	adds	r6, #1
 800f1de:	e7f2      	b.n	800f1c6 <__libc_init_array+0x1e>
 800f1e0:	08012818 	.word	0x08012818
 800f1e4:	08012818 	.word	0x08012818
 800f1e8:	08012818 	.word	0x08012818
 800f1ec:	0801281c 	.word	0x0801281c

0800f1f0 <__retarget_lock_init_recursive>:
 800f1f0:	4770      	bx	lr

0800f1f2 <__retarget_lock_acquire_recursive>:
 800f1f2:	4770      	bx	lr

0800f1f4 <__retarget_lock_release_recursive>:
 800f1f4:	4770      	bx	lr

0800f1f6 <memcpy>:
 800f1f6:	440a      	add	r2, r1
 800f1f8:	4291      	cmp	r1, r2
 800f1fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800f1fe:	d100      	bne.n	800f202 <memcpy+0xc>
 800f200:	4770      	bx	lr
 800f202:	b510      	push	{r4, lr}
 800f204:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f208:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f20c:	4291      	cmp	r1, r2
 800f20e:	d1f9      	bne.n	800f204 <memcpy+0xe>
 800f210:	bd10      	pop	{r4, pc}

0800f212 <quorem>:
 800f212:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f216:	6903      	ldr	r3, [r0, #16]
 800f218:	690c      	ldr	r4, [r1, #16]
 800f21a:	42a3      	cmp	r3, r4
 800f21c:	4607      	mov	r7, r0
 800f21e:	db7e      	blt.n	800f31e <quorem+0x10c>
 800f220:	3c01      	subs	r4, #1
 800f222:	f101 0814 	add.w	r8, r1, #20
 800f226:	f100 0514 	add.w	r5, r0, #20
 800f22a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f22e:	9301      	str	r3, [sp, #4]
 800f230:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f234:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f238:	3301      	adds	r3, #1
 800f23a:	429a      	cmp	r2, r3
 800f23c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f240:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f244:	fbb2 f6f3 	udiv	r6, r2, r3
 800f248:	d331      	bcc.n	800f2ae <quorem+0x9c>
 800f24a:	f04f 0e00 	mov.w	lr, #0
 800f24e:	4640      	mov	r0, r8
 800f250:	46ac      	mov	ip, r5
 800f252:	46f2      	mov	sl, lr
 800f254:	f850 2b04 	ldr.w	r2, [r0], #4
 800f258:	b293      	uxth	r3, r2
 800f25a:	fb06 e303 	mla	r3, r6, r3, lr
 800f25e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f262:	0c1a      	lsrs	r2, r3, #16
 800f264:	b29b      	uxth	r3, r3
 800f266:	ebaa 0303 	sub.w	r3, sl, r3
 800f26a:	f8dc a000 	ldr.w	sl, [ip]
 800f26e:	fa13 f38a 	uxtah	r3, r3, sl
 800f272:	fb06 220e 	mla	r2, r6, lr, r2
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	9b00      	ldr	r3, [sp, #0]
 800f27a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f27e:	b292      	uxth	r2, r2
 800f280:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f288:	f8bd 3000 	ldrh.w	r3, [sp]
 800f28c:	4581      	cmp	r9, r0
 800f28e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f292:	f84c 3b04 	str.w	r3, [ip], #4
 800f296:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f29a:	d2db      	bcs.n	800f254 <quorem+0x42>
 800f29c:	f855 300b 	ldr.w	r3, [r5, fp]
 800f2a0:	b92b      	cbnz	r3, 800f2ae <quorem+0x9c>
 800f2a2:	9b01      	ldr	r3, [sp, #4]
 800f2a4:	3b04      	subs	r3, #4
 800f2a6:	429d      	cmp	r5, r3
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	d32c      	bcc.n	800f306 <quorem+0xf4>
 800f2ac:	613c      	str	r4, [r7, #16]
 800f2ae:	4638      	mov	r0, r7
 800f2b0:	f001 f9ba 	bl	8010628 <__mcmp>
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	db22      	blt.n	800f2fe <quorem+0xec>
 800f2b8:	3601      	adds	r6, #1
 800f2ba:	4629      	mov	r1, r5
 800f2bc:	2000      	movs	r0, #0
 800f2be:	f858 2b04 	ldr.w	r2, [r8], #4
 800f2c2:	f8d1 c000 	ldr.w	ip, [r1]
 800f2c6:	b293      	uxth	r3, r2
 800f2c8:	1ac3      	subs	r3, r0, r3
 800f2ca:	0c12      	lsrs	r2, r2, #16
 800f2cc:	fa13 f38c 	uxtah	r3, r3, ip
 800f2d0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f2d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f2de:	45c1      	cmp	r9, r8
 800f2e0:	f841 3b04 	str.w	r3, [r1], #4
 800f2e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f2e8:	d2e9      	bcs.n	800f2be <quorem+0xac>
 800f2ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f2ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f2f2:	b922      	cbnz	r2, 800f2fe <quorem+0xec>
 800f2f4:	3b04      	subs	r3, #4
 800f2f6:	429d      	cmp	r5, r3
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	d30a      	bcc.n	800f312 <quorem+0x100>
 800f2fc:	613c      	str	r4, [r7, #16]
 800f2fe:	4630      	mov	r0, r6
 800f300:	b003      	add	sp, #12
 800f302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f306:	6812      	ldr	r2, [r2, #0]
 800f308:	3b04      	subs	r3, #4
 800f30a:	2a00      	cmp	r2, #0
 800f30c:	d1ce      	bne.n	800f2ac <quorem+0x9a>
 800f30e:	3c01      	subs	r4, #1
 800f310:	e7c9      	b.n	800f2a6 <quorem+0x94>
 800f312:	6812      	ldr	r2, [r2, #0]
 800f314:	3b04      	subs	r3, #4
 800f316:	2a00      	cmp	r2, #0
 800f318:	d1f0      	bne.n	800f2fc <quorem+0xea>
 800f31a:	3c01      	subs	r4, #1
 800f31c:	e7eb      	b.n	800f2f6 <quorem+0xe4>
 800f31e:	2000      	movs	r0, #0
 800f320:	e7ee      	b.n	800f300 <quorem+0xee>
 800f322:	0000      	movs	r0, r0
 800f324:	0000      	movs	r0, r0
	...

0800f328 <_dtoa_r>:
 800f328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f32c:	ed2d 8b04 	vpush	{d8-d9}
 800f330:	69c5      	ldr	r5, [r0, #28]
 800f332:	b093      	sub	sp, #76	; 0x4c
 800f334:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f338:	ec57 6b10 	vmov	r6, r7, d0
 800f33c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f340:	9107      	str	r1, [sp, #28]
 800f342:	4604      	mov	r4, r0
 800f344:	920a      	str	r2, [sp, #40]	; 0x28
 800f346:	930d      	str	r3, [sp, #52]	; 0x34
 800f348:	b975      	cbnz	r5, 800f368 <_dtoa_r+0x40>
 800f34a:	2010      	movs	r0, #16
 800f34c:	f000 fe2a 	bl	800ffa4 <malloc>
 800f350:	4602      	mov	r2, r0
 800f352:	61e0      	str	r0, [r4, #28]
 800f354:	b920      	cbnz	r0, 800f360 <_dtoa_r+0x38>
 800f356:	4bae      	ldr	r3, [pc, #696]	; (800f610 <_dtoa_r+0x2e8>)
 800f358:	21ef      	movs	r1, #239	; 0xef
 800f35a:	48ae      	ldr	r0, [pc, #696]	; (800f614 <_dtoa_r+0x2ec>)
 800f35c:	f001 fca2 	bl	8010ca4 <__assert_func>
 800f360:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f364:	6005      	str	r5, [r0, #0]
 800f366:	60c5      	str	r5, [r0, #12]
 800f368:	69e3      	ldr	r3, [r4, #28]
 800f36a:	6819      	ldr	r1, [r3, #0]
 800f36c:	b151      	cbz	r1, 800f384 <_dtoa_r+0x5c>
 800f36e:	685a      	ldr	r2, [r3, #4]
 800f370:	604a      	str	r2, [r1, #4]
 800f372:	2301      	movs	r3, #1
 800f374:	4093      	lsls	r3, r2
 800f376:	608b      	str	r3, [r1, #8]
 800f378:	4620      	mov	r0, r4
 800f37a:	f000 ff19 	bl	80101b0 <_Bfree>
 800f37e:	69e3      	ldr	r3, [r4, #28]
 800f380:	2200      	movs	r2, #0
 800f382:	601a      	str	r2, [r3, #0]
 800f384:	1e3b      	subs	r3, r7, #0
 800f386:	bfbb      	ittet	lt
 800f388:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f38c:	9303      	strlt	r3, [sp, #12]
 800f38e:	2300      	movge	r3, #0
 800f390:	2201      	movlt	r2, #1
 800f392:	bfac      	ite	ge
 800f394:	f8c8 3000 	strge.w	r3, [r8]
 800f398:	f8c8 2000 	strlt.w	r2, [r8]
 800f39c:	4b9e      	ldr	r3, [pc, #632]	; (800f618 <_dtoa_r+0x2f0>)
 800f39e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f3a2:	ea33 0308 	bics.w	r3, r3, r8
 800f3a6:	d11b      	bne.n	800f3e0 <_dtoa_r+0xb8>
 800f3a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f3aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800f3ae:	6013      	str	r3, [r2, #0]
 800f3b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f3b4:	4333      	orrs	r3, r6
 800f3b6:	f000 8593 	beq.w	800fee0 <_dtoa_r+0xbb8>
 800f3ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f3bc:	b963      	cbnz	r3, 800f3d8 <_dtoa_r+0xb0>
 800f3be:	4b97      	ldr	r3, [pc, #604]	; (800f61c <_dtoa_r+0x2f4>)
 800f3c0:	e027      	b.n	800f412 <_dtoa_r+0xea>
 800f3c2:	4b97      	ldr	r3, [pc, #604]	; (800f620 <_dtoa_r+0x2f8>)
 800f3c4:	9300      	str	r3, [sp, #0]
 800f3c6:	3308      	adds	r3, #8
 800f3c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f3ca:	6013      	str	r3, [r2, #0]
 800f3cc:	9800      	ldr	r0, [sp, #0]
 800f3ce:	b013      	add	sp, #76	; 0x4c
 800f3d0:	ecbd 8b04 	vpop	{d8-d9}
 800f3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3d8:	4b90      	ldr	r3, [pc, #576]	; (800f61c <_dtoa_r+0x2f4>)
 800f3da:	9300      	str	r3, [sp, #0]
 800f3dc:	3303      	adds	r3, #3
 800f3de:	e7f3      	b.n	800f3c8 <_dtoa_r+0xa0>
 800f3e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	ec51 0b17 	vmov	r0, r1, d7
 800f3ea:	eeb0 8a47 	vmov.f32	s16, s14
 800f3ee:	eef0 8a67 	vmov.f32	s17, s15
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	f7f1 fbd8 	bl	8000ba8 <__aeabi_dcmpeq>
 800f3f8:	4681      	mov	r9, r0
 800f3fa:	b160      	cbz	r0, 800f416 <_dtoa_r+0xee>
 800f3fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f3fe:	2301      	movs	r3, #1
 800f400:	6013      	str	r3, [r2, #0]
 800f402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f404:	2b00      	cmp	r3, #0
 800f406:	f000 8568 	beq.w	800feda <_dtoa_r+0xbb2>
 800f40a:	4b86      	ldr	r3, [pc, #536]	; (800f624 <_dtoa_r+0x2fc>)
 800f40c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f40e:	6013      	str	r3, [r2, #0]
 800f410:	3b01      	subs	r3, #1
 800f412:	9300      	str	r3, [sp, #0]
 800f414:	e7da      	b.n	800f3cc <_dtoa_r+0xa4>
 800f416:	aa10      	add	r2, sp, #64	; 0x40
 800f418:	a911      	add	r1, sp, #68	; 0x44
 800f41a:	4620      	mov	r0, r4
 800f41c:	eeb0 0a48 	vmov.f32	s0, s16
 800f420:	eef0 0a68 	vmov.f32	s1, s17
 800f424:	f001 f9a6 	bl	8010774 <__d2b>
 800f428:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f42c:	4682      	mov	sl, r0
 800f42e:	2d00      	cmp	r5, #0
 800f430:	d07f      	beq.n	800f532 <_dtoa_r+0x20a>
 800f432:	ee18 3a90 	vmov	r3, s17
 800f436:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f43a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f43e:	ec51 0b18 	vmov	r0, r1, d8
 800f442:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f446:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f44a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f44e:	4619      	mov	r1, r3
 800f450:	2200      	movs	r2, #0
 800f452:	4b75      	ldr	r3, [pc, #468]	; (800f628 <_dtoa_r+0x300>)
 800f454:	f7f0 ff88 	bl	8000368 <__aeabi_dsub>
 800f458:	a367      	add	r3, pc, #412	; (adr r3, 800f5f8 <_dtoa_r+0x2d0>)
 800f45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45e:	f7f1 f93b 	bl	80006d8 <__aeabi_dmul>
 800f462:	a367      	add	r3, pc, #412	; (adr r3, 800f600 <_dtoa_r+0x2d8>)
 800f464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f468:	f7f0 ff80 	bl	800036c <__adddf3>
 800f46c:	4606      	mov	r6, r0
 800f46e:	4628      	mov	r0, r5
 800f470:	460f      	mov	r7, r1
 800f472:	f7f1 f8c7 	bl	8000604 <__aeabi_i2d>
 800f476:	a364      	add	r3, pc, #400	; (adr r3, 800f608 <_dtoa_r+0x2e0>)
 800f478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f47c:	f7f1 f92c 	bl	80006d8 <__aeabi_dmul>
 800f480:	4602      	mov	r2, r0
 800f482:	460b      	mov	r3, r1
 800f484:	4630      	mov	r0, r6
 800f486:	4639      	mov	r1, r7
 800f488:	f7f0 ff70 	bl	800036c <__adddf3>
 800f48c:	4606      	mov	r6, r0
 800f48e:	460f      	mov	r7, r1
 800f490:	f7f1 fbd2 	bl	8000c38 <__aeabi_d2iz>
 800f494:	2200      	movs	r2, #0
 800f496:	4683      	mov	fp, r0
 800f498:	2300      	movs	r3, #0
 800f49a:	4630      	mov	r0, r6
 800f49c:	4639      	mov	r1, r7
 800f49e:	f7f1 fb8d 	bl	8000bbc <__aeabi_dcmplt>
 800f4a2:	b148      	cbz	r0, 800f4b8 <_dtoa_r+0x190>
 800f4a4:	4658      	mov	r0, fp
 800f4a6:	f7f1 f8ad 	bl	8000604 <__aeabi_i2d>
 800f4aa:	4632      	mov	r2, r6
 800f4ac:	463b      	mov	r3, r7
 800f4ae:	f7f1 fb7b 	bl	8000ba8 <__aeabi_dcmpeq>
 800f4b2:	b908      	cbnz	r0, 800f4b8 <_dtoa_r+0x190>
 800f4b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f4b8:	f1bb 0f16 	cmp.w	fp, #22
 800f4bc:	d857      	bhi.n	800f56e <_dtoa_r+0x246>
 800f4be:	4b5b      	ldr	r3, [pc, #364]	; (800f62c <_dtoa_r+0x304>)
 800f4c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c8:	ec51 0b18 	vmov	r0, r1, d8
 800f4cc:	f7f1 fb76 	bl	8000bbc <__aeabi_dcmplt>
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	d04e      	beq.n	800f572 <_dtoa_r+0x24a>
 800f4d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f4d8:	2300      	movs	r3, #0
 800f4da:	930c      	str	r3, [sp, #48]	; 0x30
 800f4dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f4de:	1b5b      	subs	r3, r3, r5
 800f4e0:	1e5a      	subs	r2, r3, #1
 800f4e2:	bf45      	ittet	mi
 800f4e4:	f1c3 0301 	rsbmi	r3, r3, #1
 800f4e8:	9305      	strmi	r3, [sp, #20]
 800f4ea:	2300      	movpl	r3, #0
 800f4ec:	2300      	movmi	r3, #0
 800f4ee:	9206      	str	r2, [sp, #24]
 800f4f0:	bf54      	ite	pl
 800f4f2:	9305      	strpl	r3, [sp, #20]
 800f4f4:	9306      	strmi	r3, [sp, #24]
 800f4f6:	f1bb 0f00 	cmp.w	fp, #0
 800f4fa:	db3c      	blt.n	800f576 <_dtoa_r+0x24e>
 800f4fc:	9b06      	ldr	r3, [sp, #24]
 800f4fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f502:	445b      	add	r3, fp
 800f504:	9306      	str	r3, [sp, #24]
 800f506:	2300      	movs	r3, #0
 800f508:	9308      	str	r3, [sp, #32]
 800f50a:	9b07      	ldr	r3, [sp, #28]
 800f50c:	2b09      	cmp	r3, #9
 800f50e:	d868      	bhi.n	800f5e2 <_dtoa_r+0x2ba>
 800f510:	2b05      	cmp	r3, #5
 800f512:	bfc4      	itt	gt
 800f514:	3b04      	subgt	r3, #4
 800f516:	9307      	strgt	r3, [sp, #28]
 800f518:	9b07      	ldr	r3, [sp, #28]
 800f51a:	f1a3 0302 	sub.w	r3, r3, #2
 800f51e:	bfcc      	ite	gt
 800f520:	2500      	movgt	r5, #0
 800f522:	2501      	movle	r5, #1
 800f524:	2b03      	cmp	r3, #3
 800f526:	f200 8085 	bhi.w	800f634 <_dtoa_r+0x30c>
 800f52a:	e8df f003 	tbb	[pc, r3]
 800f52e:	3b2e      	.short	0x3b2e
 800f530:	5839      	.short	0x5839
 800f532:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f536:	441d      	add	r5, r3
 800f538:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f53c:	2b20      	cmp	r3, #32
 800f53e:	bfc1      	itttt	gt
 800f540:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f544:	fa08 f803 	lslgt.w	r8, r8, r3
 800f548:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f54c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f550:	bfd6      	itet	le
 800f552:	f1c3 0320 	rsble	r3, r3, #32
 800f556:	ea48 0003 	orrgt.w	r0, r8, r3
 800f55a:	fa06 f003 	lslle.w	r0, r6, r3
 800f55e:	f7f1 f841 	bl	80005e4 <__aeabi_ui2d>
 800f562:	2201      	movs	r2, #1
 800f564:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f568:	3d01      	subs	r5, #1
 800f56a:	920e      	str	r2, [sp, #56]	; 0x38
 800f56c:	e76f      	b.n	800f44e <_dtoa_r+0x126>
 800f56e:	2301      	movs	r3, #1
 800f570:	e7b3      	b.n	800f4da <_dtoa_r+0x1b2>
 800f572:	900c      	str	r0, [sp, #48]	; 0x30
 800f574:	e7b2      	b.n	800f4dc <_dtoa_r+0x1b4>
 800f576:	9b05      	ldr	r3, [sp, #20]
 800f578:	eba3 030b 	sub.w	r3, r3, fp
 800f57c:	9305      	str	r3, [sp, #20]
 800f57e:	f1cb 0300 	rsb	r3, fp, #0
 800f582:	9308      	str	r3, [sp, #32]
 800f584:	2300      	movs	r3, #0
 800f586:	930b      	str	r3, [sp, #44]	; 0x2c
 800f588:	e7bf      	b.n	800f50a <_dtoa_r+0x1e2>
 800f58a:	2300      	movs	r3, #0
 800f58c:	9309      	str	r3, [sp, #36]	; 0x24
 800f58e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f590:	2b00      	cmp	r3, #0
 800f592:	dc52      	bgt.n	800f63a <_dtoa_r+0x312>
 800f594:	2301      	movs	r3, #1
 800f596:	9301      	str	r3, [sp, #4]
 800f598:	9304      	str	r3, [sp, #16]
 800f59a:	461a      	mov	r2, r3
 800f59c:	920a      	str	r2, [sp, #40]	; 0x28
 800f59e:	e00b      	b.n	800f5b8 <_dtoa_r+0x290>
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	e7f3      	b.n	800f58c <_dtoa_r+0x264>
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5aa:	445b      	add	r3, fp
 800f5ac:	9301      	str	r3, [sp, #4]
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	9304      	str	r3, [sp, #16]
 800f5b4:	bfb8      	it	lt
 800f5b6:	2301      	movlt	r3, #1
 800f5b8:	69e0      	ldr	r0, [r4, #28]
 800f5ba:	2100      	movs	r1, #0
 800f5bc:	2204      	movs	r2, #4
 800f5be:	f102 0614 	add.w	r6, r2, #20
 800f5c2:	429e      	cmp	r6, r3
 800f5c4:	d93d      	bls.n	800f642 <_dtoa_r+0x31a>
 800f5c6:	6041      	str	r1, [r0, #4]
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	f000 fdb1 	bl	8010130 <_Balloc>
 800f5ce:	9000      	str	r0, [sp, #0]
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	d139      	bne.n	800f648 <_dtoa_r+0x320>
 800f5d4:	4b16      	ldr	r3, [pc, #88]	; (800f630 <_dtoa_r+0x308>)
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	f240 11af 	movw	r1, #431	; 0x1af
 800f5dc:	e6bd      	b.n	800f35a <_dtoa_r+0x32>
 800f5de:	2301      	movs	r3, #1
 800f5e0:	e7e1      	b.n	800f5a6 <_dtoa_r+0x27e>
 800f5e2:	2501      	movs	r5, #1
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	9307      	str	r3, [sp, #28]
 800f5e8:	9509      	str	r5, [sp, #36]	; 0x24
 800f5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ee:	9301      	str	r3, [sp, #4]
 800f5f0:	9304      	str	r3, [sp, #16]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	2312      	movs	r3, #18
 800f5f6:	e7d1      	b.n	800f59c <_dtoa_r+0x274>
 800f5f8:	636f4361 	.word	0x636f4361
 800f5fc:	3fd287a7 	.word	0x3fd287a7
 800f600:	8b60c8b3 	.word	0x8b60c8b3
 800f604:	3fc68a28 	.word	0x3fc68a28
 800f608:	509f79fb 	.word	0x509f79fb
 800f60c:	3fd34413 	.word	0x3fd34413
 800f610:	080125b6 	.word	0x080125b6
 800f614:	080125cd 	.word	0x080125cd
 800f618:	7ff00000 	.word	0x7ff00000
 800f61c:	080125b2 	.word	0x080125b2
 800f620:	080125a9 	.word	0x080125a9
 800f624:	0801257c 	.word	0x0801257c
 800f628:	3ff80000 	.word	0x3ff80000
 800f62c:	080126b8 	.word	0x080126b8
 800f630:	08012625 	.word	0x08012625
 800f634:	2301      	movs	r3, #1
 800f636:	9309      	str	r3, [sp, #36]	; 0x24
 800f638:	e7d7      	b.n	800f5ea <_dtoa_r+0x2c2>
 800f63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f63c:	9301      	str	r3, [sp, #4]
 800f63e:	9304      	str	r3, [sp, #16]
 800f640:	e7ba      	b.n	800f5b8 <_dtoa_r+0x290>
 800f642:	3101      	adds	r1, #1
 800f644:	0052      	lsls	r2, r2, #1
 800f646:	e7ba      	b.n	800f5be <_dtoa_r+0x296>
 800f648:	69e3      	ldr	r3, [r4, #28]
 800f64a:	9a00      	ldr	r2, [sp, #0]
 800f64c:	601a      	str	r2, [r3, #0]
 800f64e:	9b04      	ldr	r3, [sp, #16]
 800f650:	2b0e      	cmp	r3, #14
 800f652:	f200 80a8 	bhi.w	800f7a6 <_dtoa_r+0x47e>
 800f656:	2d00      	cmp	r5, #0
 800f658:	f000 80a5 	beq.w	800f7a6 <_dtoa_r+0x47e>
 800f65c:	f1bb 0f00 	cmp.w	fp, #0
 800f660:	dd38      	ble.n	800f6d4 <_dtoa_r+0x3ac>
 800f662:	4bc0      	ldr	r3, [pc, #768]	; (800f964 <_dtoa_r+0x63c>)
 800f664:	f00b 020f 	and.w	r2, fp, #15
 800f668:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f66c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f670:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f674:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f678:	d019      	beq.n	800f6ae <_dtoa_r+0x386>
 800f67a:	4bbb      	ldr	r3, [pc, #748]	; (800f968 <_dtoa_r+0x640>)
 800f67c:	ec51 0b18 	vmov	r0, r1, d8
 800f680:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f684:	f7f1 f952 	bl	800092c <__aeabi_ddiv>
 800f688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f68c:	f008 080f 	and.w	r8, r8, #15
 800f690:	2503      	movs	r5, #3
 800f692:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f968 <_dtoa_r+0x640>
 800f696:	f1b8 0f00 	cmp.w	r8, #0
 800f69a:	d10a      	bne.n	800f6b2 <_dtoa_r+0x38a>
 800f69c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6a0:	4632      	mov	r2, r6
 800f6a2:	463b      	mov	r3, r7
 800f6a4:	f7f1 f942 	bl	800092c <__aeabi_ddiv>
 800f6a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6ac:	e02b      	b.n	800f706 <_dtoa_r+0x3de>
 800f6ae:	2502      	movs	r5, #2
 800f6b0:	e7ef      	b.n	800f692 <_dtoa_r+0x36a>
 800f6b2:	f018 0f01 	tst.w	r8, #1
 800f6b6:	d008      	beq.n	800f6ca <_dtoa_r+0x3a2>
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	4639      	mov	r1, r7
 800f6bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f6c0:	f7f1 f80a 	bl	80006d8 <__aeabi_dmul>
 800f6c4:	3501      	adds	r5, #1
 800f6c6:	4606      	mov	r6, r0
 800f6c8:	460f      	mov	r7, r1
 800f6ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f6ce:	f109 0908 	add.w	r9, r9, #8
 800f6d2:	e7e0      	b.n	800f696 <_dtoa_r+0x36e>
 800f6d4:	f000 809f 	beq.w	800f816 <_dtoa_r+0x4ee>
 800f6d8:	f1cb 0600 	rsb	r6, fp, #0
 800f6dc:	4ba1      	ldr	r3, [pc, #644]	; (800f964 <_dtoa_r+0x63c>)
 800f6de:	4fa2      	ldr	r7, [pc, #648]	; (800f968 <_dtoa_r+0x640>)
 800f6e0:	f006 020f 	and.w	r2, r6, #15
 800f6e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ec:	ec51 0b18 	vmov	r0, r1, d8
 800f6f0:	f7f0 fff2 	bl	80006d8 <__aeabi_dmul>
 800f6f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6f8:	1136      	asrs	r6, r6, #4
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	2502      	movs	r5, #2
 800f6fe:	2e00      	cmp	r6, #0
 800f700:	d17e      	bne.n	800f800 <_dtoa_r+0x4d8>
 800f702:	2b00      	cmp	r3, #0
 800f704:	d1d0      	bne.n	800f6a8 <_dtoa_r+0x380>
 800f706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f708:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	f000 8084 	beq.w	800f81a <_dtoa_r+0x4f2>
 800f712:	4b96      	ldr	r3, [pc, #600]	; (800f96c <_dtoa_r+0x644>)
 800f714:	2200      	movs	r2, #0
 800f716:	4640      	mov	r0, r8
 800f718:	4649      	mov	r1, r9
 800f71a:	f7f1 fa4f 	bl	8000bbc <__aeabi_dcmplt>
 800f71e:	2800      	cmp	r0, #0
 800f720:	d07b      	beq.n	800f81a <_dtoa_r+0x4f2>
 800f722:	9b04      	ldr	r3, [sp, #16]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d078      	beq.n	800f81a <_dtoa_r+0x4f2>
 800f728:	9b01      	ldr	r3, [sp, #4]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	dd39      	ble.n	800f7a2 <_dtoa_r+0x47a>
 800f72e:	4b90      	ldr	r3, [pc, #576]	; (800f970 <_dtoa_r+0x648>)
 800f730:	2200      	movs	r2, #0
 800f732:	4640      	mov	r0, r8
 800f734:	4649      	mov	r1, r9
 800f736:	f7f0 ffcf 	bl	80006d8 <__aeabi_dmul>
 800f73a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f73e:	9e01      	ldr	r6, [sp, #4]
 800f740:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f744:	3501      	adds	r5, #1
 800f746:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f74a:	4628      	mov	r0, r5
 800f74c:	f7f0 ff5a 	bl	8000604 <__aeabi_i2d>
 800f750:	4642      	mov	r2, r8
 800f752:	464b      	mov	r3, r9
 800f754:	f7f0 ffc0 	bl	80006d8 <__aeabi_dmul>
 800f758:	4b86      	ldr	r3, [pc, #536]	; (800f974 <_dtoa_r+0x64c>)
 800f75a:	2200      	movs	r2, #0
 800f75c:	f7f0 fe06 	bl	800036c <__adddf3>
 800f760:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f768:	9303      	str	r3, [sp, #12]
 800f76a:	2e00      	cmp	r6, #0
 800f76c:	d158      	bne.n	800f820 <_dtoa_r+0x4f8>
 800f76e:	4b82      	ldr	r3, [pc, #520]	; (800f978 <_dtoa_r+0x650>)
 800f770:	2200      	movs	r2, #0
 800f772:	4640      	mov	r0, r8
 800f774:	4649      	mov	r1, r9
 800f776:	f7f0 fdf7 	bl	8000368 <__aeabi_dsub>
 800f77a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f77e:	4680      	mov	r8, r0
 800f780:	4689      	mov	r9, r1
 800f782:	f7f1 fa39 	bl	8000bf8 <__aeabi_dcmpgt>
 800f786:	2800      	cmp	r0, #0
 800f788:	f040 8296 	bne.w	800fcb8 <_dtoa_r+0x990>
 800f78c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f790:	4640      	mov	r0, r8
 800f792:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f796:	4649      	mov	r1, r9
 800f798:	f7f1 fa10 	bl	8000bbc <__aeabi_dcmplt>
 800f79c:	2800      	cmp	r0, #0
 800f79e:	f040 8289 	bne.w	800fcb4 <_dtoa_r+0x98c>
 800f7a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f7a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	f2c0 814e 	blt.w	800fa4a <_dtoa_r+0x722>
 800f7ae:	f1bb 0f0e 	cmp.w	fp, #14
 800f7b2:	f300 814a 	bgt.w	800fa4a <_dtoa_r+0x722>
 800f7b6:	4b6b      	ldr	r3, [pc, #428]	; (800f964 <_dtoa_r+0x63c>)
 800f7b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f7bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f7c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	f280 80dc 	bge.w	800f980 <_dtoa_r+0x658>
 800f7c8:	9b04      	ldr	r3, [sp, #16]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	f300 80d8 	bgt.w	800f980 <_dtoa_r+0x658>
 800f7d0:	f040 826f 	bne.w	800fcb2 <_dtoa_r+0x98a>
 800f7d4:	4b68      	ldr	r3, [pc, #416]	; (800f978 <_dtoa_r+0x650>)
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	4640      	mov	r0, r8
 800f7da:	4649      	mov	r1, r9
 800f7dc:	f7f0 ff7c 	bl	80006d8 <__aeabi_dmul>
 800f7e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f7e4:	f7f1 f9fe 	bl	8000be4 <__aeabi_dcmpge>
 800f7e8:	9e04      	ldr	r6, [sp, #16]
 800f7ea:	4637      	mov	r7, r6
 800f7ec:	2800      	cmp	r0, #0
 800f7ee:	f040 8245 	bne.w	800fc7c <_dtoa_r+0x954>
 800f7f2:	9d00      	ldr	r5, [sp, #0]
 800f7f4:	2331      	movs	r3, #49	; 0x31
 800f7f6:	f805 3b01 	strb.w	r3, [r5], #1
 800f7fa:	f10b 0b01 	add.w	fp, fp, #1
 800f7fe:	e241      	b.n	800fc84 <_dtoa_r+0x95c>
 800f800:	07f2      	lsls	r2, r6, #31
 800f802:	d505      	bpl.n	800f810 <_dtoa_r+0x4e8>
 800f804:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f808:	f7f0 ff66 	bl	80006d8 <__aeabi_dmul>
 800f80c:	3501      	adds	r5, #1
 800f80e:	2301      	movs	r3, #1
 800f810:	1076      	asrs	r6, r6, #1
 800f812:	3708      	adds	r7, #8
 800f814:	e773      	b.n	800f6fe <_dtoa_r+0x3d6>
 800f816:	2502      	movs	r5, #2
 800f818:	e775      	b.n	800f706 <_dtoa_r+0x3de>
 800f81a:	9e04      	ldr	r6, [sp, #16]
 800f81c:	465f      	mov	r7, fp
 800f81e:	e792      	b.n	800f746 <_dtoa_r+0x41e>
 800f820:	9900      	ldr	r1, [sp, #0]
 800f822:	4b50      	ldr	r3, [pc, #320]	; (800f964 <_dtoa_r+0x63c>)
 800f824:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f828:	4431      	add	r1, r6
 800f82a:	9102      	str	r1, [sp, #8]
 800f82c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f82e:	eeb0 9a47 	vmov.f32	s18, s14
 800f832:	eef0 9a67 	vmov.f32	s19, s15
 800f836:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f83a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f83e:	2900      	cmp	r1, #0
 800f840:	d044      	beq.n	800f8cc <_dtoa_r+0x5a4>
 800f842:	494e      	ldr	r1, [pc, #312]	; (800f97c <_dtoa_r+0x654>)
 800f844:	2000      	movs	r0, #0
 800f846:	f7f1 f871 	bl	800092c <__aeabi_ddiv>
 800f84a:	ec53 2b19 	vmov	r2, r3, d9
 800f84e:	f7f0 fd8b 	bl	8000368 <__aeabi_dsub>
 800f852:	9d00      	ldr	r5, [sp, #0]
 800f854:	ec41 0b19 	vmov	d9, r0, r1
 800f858:	4649      	mov	r1, r9
 800f85a:	4640      	mov	r0, r8
 800f85c:	f7f1 f9ec 	bl	8000c38 <__aeabi_d2iz>
 800f860:	4606      	mov	r6, r0
 800f862:	f7f0 fecf 	bl	8000604 <__aeabi_i2d>
 800f866:	4602      	mov	r2, r0
 800f868:	460b      	mov	r3, r1
 800f86a:	4640      	mov	r0, r8
 800f86c:	4649      	mov	r1, r9
 800f86e:	f7f0 fd7b 	bl	8000368 <__aeabi_dsub>
 800f872:	3630      	adds	r6, #48	; 0x30
 800f874:	f805 6b01 	strb.w	r6, [r5], #1
 800f878:	ec53 2b19 	vmov	r2, r3, d9
 800f87c:	4680      	mov	r8, r0
 800f87e:	4689      	mov	r9, r1
 800f880:	f7f1 f99c 	bl	8000bbc <__aeabi_dcmplt>
 800f884:	2800      	cmp	r0, #0
 800f886:	d164      	bne.n	800f952 <_dtoa_r+0x62a>
 800f888:	4642      	mov	r2, r8
 800f88a:	464b      	mov	r3, r9
 800f88c:	4937      	ldr	r1, [pc, #220]	; (800f96c <_dtoa_r+0x644>)
 800f88e:	2000      	movs	r0, #0
 800f890:	f7f0 fd6a 	bl	8000368 <__aeabi_dsub>
 800f894:	ec53 2b19 	vmov	r2, r3, d9
 800f898:	f7f1 f990 	bl	8000bbc <__aeabi_dcmplt>
 800f89c:	2800      	cmp	r0, #0
 800f89e:	f040 80b6 	bne.w	800fa0e <_dtoa_r+0x6e6>
 800f8a2:	9b02      	ldr	r3, [sp, #8]
 800f8a4:	429d      	cmp	r5, r3
 800f8a6:	f43f af7c 	beq.w	800f7a2 <_dtoa_r+0x47a>
 800f8aa:	4b31      	ldr	r3, [pc, #196]	; (800f970 <_dtoa_r+0x648>)
 800f8ac:	ec51 0b19 	vmov	r0, r1, d9
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	f7f0 ff11 	bl	80006d8 <__aeabi_dmul>
 800f8b6:	4b2e      	ldr	r3, [pc, #184]	; (800f970 <_dtoa_r+0x648>)
 800f8b8:	ec41 0b19 	vmov	d9, r0, r1
 800f8bc:	2200      	movs	r2, #0
 800f8be:	4640      	mov	r0, r8
 800f8c0:	4649      	mov	r1, r9
 800f8c2:	f7f0 ff09 	bl	80006d8 <__aeabi_dmul>
 800f8c6:	4680      	mov	r8, r0
 800f8c8:	4689      	mov	r9, r1
 800f8ca:	e7c5      	b.n	800f858 <_dtoa_r+0x530>
 800f8cc:	ec51 0b17 	vmov	r0, r1, d7
 800f8d0:	f7f0 ff02 	bl	80006d8 <__aeabi_dmul>
 800f8d4:	9b02      	ldr	r3, [sp, #8]
 800f8d6:	9d00      	ldr	r5, [sp, #0]
 800f8d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f8da:	ec41 0b19 	vmov	d9, r0, r1
 800f8de:	4649      	mov	r1, r9
 800f8e0:	4640      	mov	r0, r8
 800f8e2:	f7f1 f9a9 	bl	8000c38 <__aeabi_d2iz>
 800f8e6:	4606      	mov	r6, r0
 800f8e8:	f7f0 fe8c 	bl	8000604 <__aeabi_i2d>
 800f8ec:	3630      	adds	r6, #48	; 0x30
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	4640      	mov	r0, r8
 800f8f4:	4649      	mov	r1, r9
 800f8f6:	f7f0 fd37 	bl	8000368 <__aeabi_dsub>
 800f8fa:	f805 6b01 	strb.w	r6, [r5], #1
 800f8fe:	9b02      	ldr	r3, [sp, #8]
 800f900:	429d      	cmp	r5, r3
 800f902:	4680      	mov	r8, r0
 800f904:	4689      	mov	r9, r1
 800f906:	f04f 0200 	mov.w	r2, #0
 800f90a:	d124      	bne.n	800f956 <_dtoa_r+0x62e>
 800f90c:	4b1b      	ldr	r3, [pc, #108]	; (800f97c <_dtoa_r+0x654>)
 800f90e:	ec51 0b19 	vmov	r0, r1, d9
 800f912:	f7f0 fd2b 	bl	800036c <__adddf3>
 800f916:	4602      	mov	r2, r0
 800f918:	460b      	mov	r3, r1
 800f91a:	4640      	mov	r0, r8
 800f91c:	4649      	mov	r1, r9
 800f91e:	f7f1 f96b 	bl	8000bf8 <__aeabi_dcmpgt>
 800f922:	2800      	cmp	r0, #0
 800f924:	d173      	bne.n	800fa0e <_dtoa_r+0x6e6>
 800f926:	ec53 2b19 	vmov	r2, r3, d9
 800f92a:	4914      	ldr	r1, [pc, #80]	; (800f97c <_dtoa_r+0x654>)
 800f92c:	2000      	movs	r0, #0
 800f92e:	f7f0 fd1b 	bl	8000368 <__aeabi_dsub>
 800f932:	4602      	mov	r2, r0
 800f934:	460b      	mov	r3, r1
 800f936:	4640      	mov	r0, r8
 800f938:	4649      	mov	r1, r9
 800f93a:	f7f1 f93f 	bl	8000bbc <__aeabi_dcmplt>
 800f93e:	2800      	cmp	r0, #0
 800f940:	f43f af2f 	beq.w	800f7a2 <_dtoa_r+0x47a>
 800f944:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f946:	1e6b      	subs	r3, r5, #1
 800f948:	930f      	str	r3, [sp, #60]	; 0x3c
 800f94a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f94e:	2b30      	cmp	r3, #48	; 0x30
 800f950:	d0f8      	beq.n	800f944 <_dtoa_r+0x61c>
 800f952:	46bb      	mov	fp, r7
 800f954:	e04a      	b.n	800f9ec <_dtoa_r+0x6c4>
 800f956:	4b06      	ldr	r3, [pc, #24]	; (800f970 <_dtoa_r+0x648>)
 800f958:	f7f0 febe 	bl	80006d8 <__aeabi_dmul>
 800f95c:	4680      	mov	r8, r0
 800f95e:	4689      	mov	r9, r1
 800f960:	e7bd      	b.n	800f8de <_dtoa_r+0x5b6>
 800f962:	bf00      	nop
 800f964:	080126b8 	.word	0x080126b8
 800f968:	08012690 	.word	0x08012690
 800f96c:	3ff00000 	.word	0x3ff00000
 800f970:	40240000 	.word	0x40240000
 800f974:	401c0000 	.word	0x401c0000
 800f978:	40140000 	.word	0x40140000
 800f97c:	3fe00000 	.word	0x3fe00000
 800f980:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f984:	9d00      	ldr	r5, [sp, #0]
 800f986:	4642      	mov	r2, r8
 800f988:	464b      	mov	r3, r9
 800f98a:	4630      	mov	r0, r6
 800f98c:	4639      	mov	r1, r7
 800f98e:	f7f0 ffcd 	bl	800092c <__aeabi_ddiv>
 800f992:	f7f1 f951 	bl	8000c38 <__aeabi_d2iz>
 800f996:	9001      	str	r0, [sp, #4]
 800f998:	f7f0 fe34 	bl	8000604 <__aeabi_i2d>
 800f99c:	4642      	mov	r2, r8
 800f99e:	464b      	mov	r3, r9
 800f9a0:	f7f0 fe9a 	bl	80006d8 <__aeabi_dmul>
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	460b      	mov	r3, r1
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	4639      	mov	r1, r7
 800f9ac:	f7f0 fcdc 	bl	8000368 <__aeabi_dsub>
 800f9b0:	9e01      	ldr	r6, [sp, #4]
 800f9b2:	9f04      	ldr	r7, [sp, #16]
 800f9b4:	3630      	adds	r6, #48	; 0x30
 800f9b6:	f805 6b01 	strb.w	r6, [r5], #1
 800f9ba:	9e00      	ldr	r6, [sp, #0]
 800f9bc:	1bae      	subs	r6, r5, r6
 800f9be:	42b7      	cmp	r7, r6
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	d134      	bne.n	800fa30 <_dtoa_r+0x708>
 800f9c6:	f7f0 fcd1 	bl	800036c <__adddf3>
 800f9ca:	4642      	mov	r2, r8
 800f9cc:	464b      	mov	r3, r9
 800f9ce:	4606      	mov	r6, r0
 800f9d0:	460f      	mov	r7, r1
 800f9d2:	f7f1 f911 	bl	8000bf8 <__aeabi_dcmpgt>
 800f9d6:	b9c8      	cbnz	r0, 800fa0c <_dtoa_r+0x6e4>
 800f9d8:	4642      	mov	r2, r8
 800f9da:	464b      	mov	r3, r9
 800f9dc:	4630      	mov	r0, r6
 800f9de:	4639      	mov	r1, r7
 800f9e0:	f7f1 f8e2 	bl	8000ba8 <__aeabi_dcmpeq>
 800f9e4:	b110      	cbz	r0, 800f9ec <_dtoa_r+0x6c4>
 800f9e6:	9b01      	ldr	r3, [sp, #4]
 800f9e8:	07db      	lsls	r3, r3, #31
 800f9ea:	d40f      	bmi.n	800fa0c <_dtoa_r+0x6e4>
 800f9ec:	4651      	mov	r1, sl
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f000 fbde 	bl	80101b0 <_Bfree>
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f9f8:	702b      	strb	r3, [r5, #0]
 800f9fa:	f10b 0301 	add.w	r3, fp, #1
 800f9fe:	6013      	str	r3, [r2, #0]
 800fa00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	f43f ace2 	beq.w	800f3cc <_dtoa_r+0xa4>
 800fa08:	601d      	str	r5, [r3, #0]
 800fa0a:	e4df      	b.n	800f3cc <_dtoa_r+0xa4>
 800fa0c:	465f      	mov	r7, fp
 800fa0e:	462b      	mov	r3, r5
 800fa10:	461d      	mov	r5, r3
 800fa12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa16:	2a39      	cmp	r2, #57	; 0x39
 800fa18:	d106      	bne.n	800fa28 <_dtoa_r+0x700>
 800fa1a:	9a00      	ldr	r2, [sp, #0]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d1f7      	bne.n	800fa10 <_dtoa_r+0x6e8>
 800fa20:	9900      	ldr	r1, [sp, #0]
 800fa22:	2230      	movs	r2, #48	; 0x30
 800fa24:	3701      	adds	r7, #1
 800fa26:	700a      	strb	r2, [r1, #0]
 800fa28:	781a      	ldrb	r2, [r3, #0]
 800fa2a:	3201      	adds	r2, #1
 800fa2c:	701a      	strb	r2, [r3, #0]
 800fa2e:	e790      	b.n	800f952 <_dtoa_r+0x62a>
 800fa30:	4ba3      	ldr	r3, [pc, #652]	; (800fcc0 <_dtoa_r+0x998>)
 800fa32:	2200      	movs	r2, #0
 800fa34:	f7f0 fe50 	bl	80006d8 <__aeabi_dmul>
 800fa38:	2200      	movs	r2, #0
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	4606      	mov	r6, r0
 800fa3e:	460f      	mov	r7, r1
 800fa40:	f7f1 f8b2 	bl	8000ba8 <__aeabi_dcmpeq>
 800fa44:	2800      	cmp	r0, #0
 800fa46:	d09e      	beq.n	800f986 <_dtoa_r+0x65e>
 800fa48:	e7d0      	b.n	800f9ec <_dtoa_r+0x6c4>
 800fa4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa4c:	2a00      	cmp	r2, #0
 800fa4e:	f000 80ca 	beq.w	800fbe6 <_dtoa_r+0x8be>
 800fa52:	9a07      	ldr	r2, [sp, #28]
 800fa54:	2a01      	cmp	r2, #1
 800fa56:	f300 80ad 	bgt.w	800fbb4 <_dtoa_r+0x88c>
 800fa5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa5c:	2a00      	cmp	r2, #0
 800fa5e:	f000 80a5 	beq.w	800fbac <_dtoa_r+0x884>
 800fa62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fa66:	9e08      	ldr	r6, [sp, #32]
 800fa68:	9d05      	ldr	r5, [sp, #20]
 800fa6a:	9a05      	ldr	r2, [sp, #20]
 800fa6c:	441a      	add	r2, r3
 800fa6e:	9205      	str	r2, [sp, #20]
 800fa70:	9a06      	ldr	r2, [sp, #24]
 800fa72:	2101      	movs	r1, #1
 800fa74:	441a      	add	r2, r3
 800fa76:	4620      	mov	r0, r4
 800fa78:	9206      	str	r2, [sp, #24]
 800fa7a:	f000 fc4f 	bl	801031c <__i2b>
 800fa7e:	4607      	mov	r7, r0
 800fa80:	b165      	cbz	r5, 800fa9c <_dtoa_r+0x774>
 800fa82:	9b06      	ldr	r3, [sp, #24]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	dd09      	ble.n	800fa9c <_dtoa_r+0x774>
 800fa88:	42ab      	cmp	r3, r5
 800fa8a:	9a05      	ldr	r2, [sp, #20]
 800fa8c:	bfa8      	it	ge
 800fa8e:	462b      	movge	r3, r5
 800fa90:	1ad2      	subs	r2, r2, r3
 800fa92:	9205      	str	r2, [sp, #20]
 800fa94:	9a06      	ldr	r2, [sp, #24]
 800fa96:	1aed      	subs	r5, r5, r3
 800fa98:	1ad3      	subs	r3, r2, r3
 800fa9a:	9306      	str	r3, [sp, #24]
 800fa9c:	9b08      	ldr	r3, [sp, #32]
 800fa9e:	b1f3      	cbz	r3, 800fade <_dtoa_r+0x7b6>
 800faa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	f000 80a3 	beq.w	800fbee <_dtoa_r+0x8c6>
 800faa8:	2e00      	cmp	r6, #0
 800faaa:	dd10      	ble.n	800face <_dtoa_r+0x7a6>
 800faac:	4639      	mov	r1, r7
 800faae:	4632      	mov	r2, r6
 800fab0:	4620      	mov	r0, r4
 800fab2:	f000 fcf3 	bl	801049c <__pow5mult>
 800fab6:	4652      	mov	r2, sl
 800fab8:	4601      	mov	r1, r0
 800faba:	4607      	mov	r7, r0
 800fabc:	4620      	mov	r0, r4
 800fabe:	f000 fc43 	bl	8010348 <__multiply>
 800fac2:	4651      	mov	r1, sl
 800fac4:	4680      	mov	r8, r0
 800fac6:	4620      	mov	r0, r4
 800fac8:	f000 fb72 	bl	80101b0 <_Bfree>
 800facc:	46c2      	mov	sl, r8
 800face:	9b08      	ldr	r3, [sp, #32]
 800fad0:	1b9a      	subs	r2, r3, r6
 800fad2:	d004      	beq.n	800fade <_dtoa_r+0x7b6>
 800fad4:	4651      	mov	r1, sl
 800fad6:	4620      	mov	r0, r4
 800fad8:	f000 fce0 	bl	801049c <__pow5mult>
 800fadc:	4682      	mov	sl, r0
 800fade:	2101      	movs	r1, #1
 800fae0:	4620      	mov	r0, r4
 800fae2:	f000 fc1b 	bl	801031c <__i2b>
 800fae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fae8:	2b00      	cmp	r3, #0
 800faea:	4606      	mov	r6, r0
 800faec:	f340 8081 	ble.w	800fbf2 <_dtoa_r+0x8ca>
 800faf0:	461a      	mov	r2, r3
 800faf2:	4601      	mov	r1, r0
 800faf4:	4620      	mov	r0, r4
 800faf6:	f000 fcd1 	bl	801049c <__pow5mult>
 800fafa:	9b07      	ldr	r3, [sp, #28]
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	4606      	mov	r6, r0
 800fb00:	dd7a      	ble.n	800fbf8 <_dtoa_r+0x8d0>
 800fb02:	f04f 0800 	mov.w	r8, #0
 800fb06:	6933      	ldr	r3, [r6, #16]
 800fb08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fb0c:	6918      	ldr	r0, [r3, #16]
 800fb0e:	f000 fbb7 	bl	8010280 <__hi0bits>
 800fb12:	f1c0 0020 	rsb	r0, r0, #32
 800fb16:	9b06      	ldr	r3, [sp, #24]
 800fb18:	4418      	add	r0, r3
 800fb1a:	f010 001f 	ands.w	r0, r0, #31
 800fb1e:	f000 8094 	beq.w	800fc4a <_dtoa_r+0x922>
 800fb22:	f1c0 0320 	rsb	r3, r0, #32
 800fb26:	2b04      	cmp	r3, #4
 800fb28:	f340 8085 	ble.w	800fc36 <_dtoa_r+0x90e>
 800fb2c:	9b05      	ldr	r3, [sp, #20]
 800fb2e:	f1c0 001c 	rsb	r0, r0, #28
 800fb32:	4403      	add	r3, r0
 800fb34:	9305      	str	r3, [sp, #20]
 800fb36:	9b06      	ldr	r3, [sp, #24]
 800fb38:	4403      	add	r3, r0
 800fb3a:	4405      	add	r5, r0
 800fb3c:	9306      	str	r3, [sp, #24]
 800fb3e:	9b05      	ldr	r3, [sp, #20]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	dd05      	ble.n	800fb50 <_dtoa_r+0x828>
 800fb44:	4651      	mov	r1, sl
 800fb46:	461a      	mov	r2, r3
 800fb48:	4620      	mov	r0, r4
 800fb4a:	f000 fd01 	bl	8010550 <__lshift>
 800fb4e:	4682      	mov	sl, r0
 800fb50:	9b06      	ldr	r3, [sp, #24]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	dd05      	ble.n	800fb62 <_dtoa_r+0x83a>
 800fb56:	4631      	mov	r1, r6
 800fb58:	461a      	mov	r2, r3
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f000 fcf8 	bl	8010550 <__lshift>
 800fb60:	4606      	mov	r6, r0
 800fb62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d072      	beq.n	800fc4e <_dtoa_r+0x926>
 800fb68:	4631      	mov	r1, r6
 800fb6a:	4650      	mov	r0, sl
 800fb6c:	f000 fd5c 	bl	8010628 <__mcmp>
 800fb70:	2800      	cmp	r0, #0
 800fb72:	da6c      	bge.n	800fc4e <_dtoa_r+0x926>
 800fb74:	2300      	movs	r3, #0
 800fb76:	4651      	mov	r1, sl
 800fb78:	220a      	movs	r2, #10
 800fb7a:	4620      	mov	r0, r4
 800fb7c:	f000 fb3a 	bl	80101f4 <__multadd>
 800fb80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb82:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb86:	4682      	mov	sl, r0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	f000 81b0 	beq.w	800feee <_dtoa_r+0xbc6>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	4639      	mov	r1, r7
 800fb92:	220a      	movs	r2, #10
 800fb94:	4620      	mov	r0, r4
 800fb96:	f000 fb2d 	bl	80101f4 <__multadd>
 800fb9a:	9b01      	ldr	r3, [sp, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	4607      	mov	r7, r0
 800fba0:	f300 8096 	bgt.w	800fcd0 <_dtoa_r+0x9a8>
 800fba4:	9b07      	ldr	r3, [sp, #28]
 800fba6:	2b02      	cmp	r3, #2
 800fba8:	dc59      	bgt.n	800fc5e <_dtoa_r+0x936>
 800fbaa:	e091      	b.n	800fcd0 <_dtoa_r+0x9a8>
 800fbac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fbae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fbb2:	e758      	b.n	800fa66 <_dtoa_r+0x73e>
 800fbb4:	9b04      	ldr	r3, [sp, #16]
 800fbb6:	1e5e      	subs	r6, r3, #1
 800fbb8:	9b08      	ldr	r3, [sp, #32]
 800fbba:	42b3      	cmp	r3, r6
 800fbbc:	bfbf      	itttt	lt
 800fbbe:	9b08      	ldrlt	r3, [sp, #32]
 800fbc0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800fbc2:	9608      	strlt	r6, [sp, #32]
 800fbc4:	1af3      	sublt	r3, r6, r3
 800fbc6:	bfb4      	ite	lt
 800fbc8:	18d2      	addlt	r2, r2, r3
 800fbca:	1b9e      	subge	r6, r3, r6
 800fbcc:	9b04      	ldr	r3, [sp, #16]
 800fbce:	bfbc      	itt	lt
 800fbd0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800fbd2:	2600      	movlt	r6, #0
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	bfb7      	itett	lt
 800fbd8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800fbdc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800fbe0:	1a9d      	sublt	r5, r3, r2
 800fbe2:	2300      	movlt	r3, #0
 800fbe4:	e741      	b.n	800fa6a <_dtoa_r+0x742>
 800fbe6:	9e08      	ldr	r6, [sp, #32]
 800fbe8:	9d05      	ldr	r5, [sp, #20]
 800fbea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fbec:	e748      	b.n	800fa80 <_dtoa_r+0x758>
 800fbee:	9a08      	ldr	r2, [sp, #32]
 800fbf0:	e770      	b.n	800fad4 <_dtoa_r+0x7ac>
 800fbf2:	9b07      	ldr	r3, [sp, #28]
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	dc19      	bgt.n	800fc2c <_dtoa_r+0x904>
 800fbf8:	9b02      	ldr	r3, [sp, #8]
 800fbfa:	b9bb      	cbnz	r3, 800fc2c <_dtoa_r+0x904>
 800fbfc:	9b03      	ldr	r3, [sp, #12]
 800fbfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc02:	b99b      	cbnz	r3, 800fc2c <_dtoa_r+0x904>
 800fc04:	9b03      	ldr	r3, [sp, #12]
 800fc06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fc0a:	0d1b      	lsrs	r3, r3, #20
 800fc0c:	051b      	lsls	r3, r3, #20
 800fc0e:	b183      	cbz	r3, 800fc32 <_dtoa_r+0x90a>
 800fc10:	9b05      	ldr	r3, [sp, #20]
 800fc12:	3301      	adds	r3, #1
 800fc14:	9305      	str	r3, [sp, #20]
 800fc16:	9b06      	ldr	r3, [sp, #24]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	9306      	str	r3, [sp, #24]
 800fc1c:	f04f 0801 	mov.w	r8, #1
 800fc20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	f47f af6f 	bne.w	800fb06 <_dtoa_r+0x7de>
 800fc28:	2001      	movs	r0, #1
 800fc2a:	e774      	b.n	800fb16 <_dtoa_r+0x7ee>
 800fc2c:	f04f 0800 	mov.w	r8, #0
 800fc30:	e7f6      	b.n	800fc20 <_dtoa_r+0x8f8>
 800fc32:	4698      	mov	r8, r3
 800fc34:	e7f4      	b.n	800fc20 <_dtoa_r+0x8f8>
 800fc36:	d082      	beq.n	800fb3e <_dtoa_r+0x816>
 800fc38:	9a05      	ldr	r2, [sp, #20]
 800fc3a:	331c      	adds	r3, #28
 800fc3c:	441a      	add	r2, r3
 800fc3e:	9205      	str	r2, [sp, #20]
 800fc40:	9a06      	ldr	r2, [sp, #24]
 800fc42:	441a      	add	r2, r3
 800fc44:	441d      	add	r5, r3
 800fc46:	9206      	str	r2, [sp, #24]
 800fc48:	e779      	b.n	800fb3e <_dtoa_r+0x816>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	e7f4      	b.n	800fc38 <_dtoa_r+0x910>
 800fc4e:	9b04      	ldr	r3, [sp, #16]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	dc37      	bgt.n	800fcc4 <_dtoa_r+0x99c>
 800fc54:	9b07      	ldr	r3, [sp, #28]
 800fc56:	2b02      	cmp	r3, #2
 800fc58:	dd34      	ble.n	800fcc4 <_dtoa_r+0x99c>
 800fc5a:	9b04      	ldr	r3, [sp, #16]
 800fc5c:	9301      	str	r3, [sp, #4]
 800fc5e:	9b01      	ldr	r3, [sp, #4]
 800fc60:	b963      	cbnz	r3, 800fc7c <_dtoa_r+0x954>
 800fc62:	4631      	mov	r1, r6
 800fc64:	2205      	movs	r2, #5
 800fc66:	4620      	mov	r0, r4
 800fc68:	f000 fac4 	bl	80101f4 <__multadd>
 800fc6c:	4601      	mov	r1, r0
 800fc6e:	4606      	mov	r6, r0
 800fc70:	4650      	mov	r0, sl
 800fc72:	f000 fcd9 	bl	8010628 <__mcmp>
 800fc76:	2800      	cmp	r0, #0
 800fc78:	f73f adbb 	bgt.w	800f7f2 <_dtoa_r+0x4ca>
 800fc7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc7e:	9d00      	ldr	r5, [sp, #0]
 800fc80:	ea6f 0b03 	mvn.w	fp, r3
 800fc84:	f04f 0800 	mov.w	r8, #0
 800fc88:	4631      	mov	r1, r6
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	f000 fa90 	bl	80101b0 <_Bfree>
 800fc90:	2f00      	cmp	r7, #0
 800fc92:	f43f aeab 	beq.w	800f9ec <_dtoa_r+0x6c4>
 800fc96:	f1b8 0f00 	cmp.w	r8, #0
 800fc9a:	d005      	beq.n	800fca8 <_dtoa_r+0x980>
 800fc9c:	45b8      	cmp	r8, r7
 800fc9e:	d003      	beq.n	800fca8 <_dtoa_r+0x980>
 800fca0:	4641      	mov	r1, r8
 800fca2:	4620      	mov	r0, r4
 800fca4:	f000 fa84 	bl	80101b0 <_Bfree>
 800fca8:	4639      	mov	r1, r7
 800fcaa:	4620      	mov	r0, r4
 800fcac:	f000 fa80 	bl	80101b0 <_Bfree>
 800fcb0:	e69c      	b.n	800f9ec <_dtoa_r+0x6c4>
 800fcb2:	2600      	movs	r6, #0
 800fcb4:	4637      	mov	r7, r6
 800fcb6:	e7e1      	b.n	800fc7c <_dtoa_r+0x954>
 800fcb8:	46bb      	mov	fp, r7
 800fcba:	4637      	mov	r7, r6
 800fcbc:	e599      	b.n	800f7f2 <_dtoa_r+0x4ca>
 800fcbe:	bf00      	nop
 800fcc0:	40240000 	.word	0x40240000
 800fcc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	f000 80c8 	beq.w	800fe5c <_dtoa_r+0xb34>
 800fccc:	9b04      	ldr	r3, [sp, #16]
 800fcce:	9301      	str	r3, [sp, #4]
 800fcd0:	2d00      	cmp	r5, #0
 800fcd2:	dd05      	ble.n	800fce0 <_dtoa_r+0x9b8>
 800fcd4:	4639      	mov	r1, r7
 800fcd6:	462a      	mov	r2, r5
 800fcd8:	4620      	mov	r0, r4
 800fcda:	f000 fc39 	bl	8010550 <__lshift>
 800fcde:	4607      	mov	r7, r0
 800fce0:	f1b8 0f00 	cmp.w	r8, #0
 800fce4:	d05b      	beq.n	800fd9e <_dtoa_r+0xa76>
 800fce6:	6879      	ldr	r1, [r7, #4]
 800fce8:	4620      	mov	r0, r4
 800fcea:	f000 fa21 	bl	8010130 <_Balloc>
 800fcee:	4605      	mov	r5, r0
 800fcf0:	b928      	cbnz	r0, 800fcfe <_dtoa_r+0x9d6>
 800fcf2:	4b83      	ldr	r3, [pc, #524]	; (800ff00 <_dtoa_r+0xbd8>)
 800fcf4:	4602      	mov	r2, r0
 800fcf6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fcfa:	f7ff bb2e 	b.w	800f35a <_dtoa_r+0x32>
 800fcfe:	693a      	ldr	r2, [r7, #16]
 800fd00:	3202      	adds	r2, #2
 800fd02:	0092      	lsls	r2, r2, #2
 800fd04:	f107 010c 	add.w	r1, r7, #12
 800fd08:	300c      	adds	r0, #12
 800fd0a:	f7ff fa74 	bl	800f1f6 <memcpy>
 800fd0e:	2201      	movs	r2, #1
 800fd10:	4629      	mov	r1, r5
 800fd12:	4620      	mov	r0, r4
 800fd14:	f000 fc1c 	bl	8010550 <__lshift>
 800fd18:	9b00      	ldr	r3, [sp, #0]
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	9304      	str	r3, [sp, #16]
 800fd1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd22:	4413      	add	r3, r2
 800fd24:	9308      	str	r3, [sp, #32]
 800fd26:	9b02      	ldr	r3, [sp, #8]
 800fd28:	f003 0301 	and.w	r3, r3, #1
 800fd2c:	46b8      	mov	r8, r7
 800fd2e:	9306      	str	r3, [sp, #24]
 800fd30:	4607      	mov	r7, r0
 800fd32:	9b04      	ldr	r3, [sp, #16]
 800fd34:	4631      	mov	r1, r6
 800fd36:	3b01      	subs	r3, #1
 800fd38:	4650      	mov	r0, sl
 800fd3a:	9301      	str	r3, [sp, #4]
 800fd3c:	f7ff fa69 	bl	800f212 <quorem>
 800fd40:	4641      	mov	r1, r8
 800fd42:	9002      	str	r0, [sp, #8]
 800fd44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fd48:	4650      	mov	r0, sl
 800fd4a:	f000 fc6d 	bl	8010628 <__mcmp>
 800fd4e:	463a      	mov	r2, r7
 800fd50:	9005      	str	r0, [sp, #20]
 800fd52:	4631      	mov	r1, r6
 800fd54:	4620      	mov	r0, r4
 800fd56:	f000 fc83 	bl	8010660 <__mdiff>
 800fd5a:	68c2      	ldr	r2, [r0, #12]
 800fd5c:	4605      	mov	r5, r0
 800fd5e:	bb02      	cbnz	r2, 800fda2 <_dtoa_r+0xa7a>
 800fd60:	4601      	mov	r1, r0
 800fd62:	4650      	mov	r0, sl
 800fd64:	f000 fc60 	bl	8010628 <__mcmp>
 800fd68:	4602      	mov	r2, r0
 800fd6a:	4629      	mov	r1, r5
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	9209      	str	r2, [sp, #36]	; 0x24
 800fd70:	f000 fa1e 	bl	80101b0 <_Bfree>
 800fd74:	9b07      	ldr	r3, [sp, #28]
 800fd76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd78:	9d04      	ldr	r5, [sp, #16]
 800fd7a:	ea43 0102 	orr.w	r1, r3, r2
 800fd7e:	9b06      	ldr	r3, [sp, #24]
 800fd80:	4319      	orrs	r1, r3
 800fd82:	d110      	bne.n	800fda6 <_dtoa_r+0xa7e>
 800fd84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fd88:	d029      	beq.n	800fdde <_dtoa_r+0xab6>
 800fd8a:	9b05      	ldr	r3, [sp, #20]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	dd02      	ble.n	800fd96 <_dtoa_r+0xa6e>
 800fd90:	9b02      	ldr	r3, [sp, #8]
 800fd92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fd96:	9b01      	ldr	r3, [sp, #4]
 800fd98:	f883 9000 	strb.w	r9, [r3]
 800fd9c:	e774      	b.n	800fc88 <_dtoa_r+0x960>
 800fd9e:	4638      	mov	r0, r7
 800fda0:	e7ba      	b.n	800fd18 <_dtoa_r+0x9f0>
 800fda2:	2201      	movs	r2, #1
 800fda4:	e7e1      	b.n	800fd6a <_dtoa_r+0xa42>
 800fda6:	9b05      	ldr	r3, [sp, #20]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	db04      	blt.n	800fdb6 <_dtoa_r+0xa8e>
 800fdac:	9907      	ldr	r1, [sp, #28]
 800fdae:	430b      	orrs	r3, r1
 800fdb0:	9906      	ldr	r1, [sp, #24]
 800fdb2:	430b      	orrs	r3, r1
 800fdb4:	d120      	bne.n	800fdf8 <_dtoa_r+0xad0>
 800fdb6:	2a00      	cmp	r2, #0
 800fdb8:	dded      	ble.n	800fd96 <_dtoa_r+0xa6e>
 800fdba:	4651      	mov	r1, sl
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	4620      	mov	r0, r4
 800fdc0:	f000 fbc6 	bl	8010550 <__lshift>
 800fdc4:	4631      	mov	r1, r6
 800fdc6:	4682      	mov	sl, r0
 800fdc8:	f000 fc2e 	bl	8010628 <__mcmp>
 800fdcc:	2800      	cmp	r0, #0
 800fdce:	dc03      	bgt.n	800fdd8 <_dtoa_r+0xab0>
 800fdd0:	d1e1      	bne.n	800fd96 <_dtoa_r+0xa6e>
 800fdd2:	f019 0f01 	tst.w	r9, #1
 800fdd6:	d0de      	beq.n	800fd96 <_dtoa_r+0xa6e>
 800fdd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fddc:	d1d8      	bne.n	800fd90 <_dtoa_r+0xa68>
 800fdde:	9a01      	ldr	r2, [sp, #4]
 800fde0:	2339      	movs	r3, #57	; 0x39
 800fde2:	7013      	strb	r3, [r2, #0]
 800fde4:	462b      	mov	r3, r5
 800fde6:	461d      	mov	r5, r3
 800fde8:	3b01      	subs	r3, #1
 800fdea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fdee:	2a39      	cmp	r2, #57	; 0x39
 800fdf0:	d06c      	beq.n	800fecc <_dtoa_r+0xba4>
 800fdf2:	3201      	adds	r2, #1
 800fdf4:	701a      	strb	r2, [r3, #0]
 800fdf6:	e747      	b.n	800fc88 <_dtoa_r+0x960>
 800fdf8:	2a00      	cmp	r2, #0
 800fdfa:	dd07      	ble.n	800fe0c <_dtoa_r+0xae4>
 800fdfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fe00:	d0ed      	beq.n	800fdde <_dtoa_r+0xab6>
 800fe02:	9a01      	ldr	r2, [sp, #4]
 800fe04:	f109 0301 	add.w	r3, r9, #1
 800fe08:	7013      	strb	r3, [r2, #0]
 800fe0a:	e73d      	b.n	800fc88 <_dtoa_r+0x960>
 800fe0c:	9b04      	ldr	r3, [sp, #16]
 800fe0e:	9a08      	ldr	r2, [sp, #32]
 800fe10:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fe14:	4293      	cmp	r3, r2
 800fe16:	d043      	beq.n	800fea0 <_dtoa_r+0xb78>
 800fe18:	4651      	mov	r1, sl
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	220a      	movs	r2, #10
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f000 f9e8 	bl	80101f4 <__multadd>
 800fe24:	45b8      	cmp	r8, r7
 800fe26:	4682      	mov	sl, r0
 800fe28:	f04f 0300 	mov.w	r3, #0
 800fe2c:	f04f 020a 	mov.w	r2, #10
 800fe30:	4641      	mov	r1, r8
 800fe32:	4620      	mov	r0, r4
 800fe34:	d107      	bne.n	800fe46 <_dtoa_r+0xb1e>
 800fe36:	f000 f9dd 	bl	80101f4 <__multadd>
 800fe3a:	4680      	mov	r8, r0
 800fe3c:	4607      	mov	r7, r0
 800fe3e:	9b04      	ldr	r3, [sp, #16]
 800fe40:	3301      	adds	r3, #1
 800fe42:	9304      	str	r3, [sp, #16]
 800fe44:	e775      	b.n	800fd32 <_dtoa_r+0xa0a>
 800fe46:	f000 f9d5 	bl	80101f4 <__multadd>
 800fe4a:	4639      	mov	r1, r7
 800fe4c:	4680      	mov	r8, r0
 800fe4e:	2300      	movs	r3, #0
 800fe50:	220a      	movs	r2, #10
 800fe52:	4620      	mov	r0, r4
 800fe54:	f000 f9ce 	bl	80101f4 <__multadd>
 800fe58:	4607      	mov	r7, r0
 800fe5a:	e7f0      	b.n	800fe3e <_dtoa_r+0xb16>
 800fe5c:	9b04      	ldr	r3, [sp, #16]
 800fe5e:	9301      	str	r3, [sp, #4]
 800fe60:	9d00      	ldr	r5, [sp, #0]
 800fe62:	4631      	mov	r1, r6
 800fe64:	4650      	mov	r0, sl
 800fe66:	f7ff f9d4 	bl	800f212 <quorem>
 800fe6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fe6e:	9b00      	ldr	r3, [sp, #0]
 800fe70:	f805 9b01 	strb.w	r9, [r5], #1
 800fe74:	1aea      	subs	r2, r5, r3
 800fe76:	9b01      	ldr	r3, [sp, #4]
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	dd07      	ble.n	800fe8c <_dtoa_r+0xb64>
 800fe7c:	4651      	mov	r1, sl
 800fe7e:	2300      	movs	r3, #0
 800fe80:	220a      	movs	r2, #10
 800fe82:	4620      	mov	r0, r4
 800fe84:	f000 f9b6 	bl	80101f4 <__multadd>
 800fe88:	4682      	mov	sl, r0
 800fe8a:	e7ea      	b.n	800fe62 <_dtoa_r+0xb3a>
 800fe8c:	9b01      	ldr	r3, [sp, #4]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	bfc8      	it	gt
 800fe92:	461d      	movgt	r5, r3
 800fe94:	9b00      	ldr	r3, [sp, #0]
 800fe96:	bfd8      	it	le
 800fe98:	2501      	movle	r5, #1
 800fe9a:	441d      	add	r5, r3
 800fe9c:	f04f 0800 	mov.w	r8, #0
 800fea0:	4651      	mov	r1, sl
 800fea2:	2201      	movs	r2, #1
 800fea4:	4620      	mov	r0, r4
 800fea6:	f000 fb53 	bl	8010550 <__lshift>
 800feaa:	4631      	mov	r1, r6
 800feac:	4682      	mov	sl, r0
 800feae:	f000 fbbb 	bl	8010628 <__mcmp>
 800feb2:	2800      	cmp	r0, #0
 800feb4:	dc96      	bgt.n	800fde4 <_dtoa_r+0xabc>
 800feb6:	d102      	bne.n	800febe <_dtoa_r+0xb96>
 800feb8:	f019 0f01 	tst.w	r9, #1
 800febc:	d192      	bne.n	800fde4 <_dtoa_r+0xabc>
 800febe:	462b      	mov	r3, r5
 800fec0:	461d      	mov	r5, r3
 800fec2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fec6:	2a30      	cmp	r2, #48	; 0x30
 800fec8:	d0fa      	beq.n	800fec0 <_dtoa_r+0xb98>
 800feca:	e6dd      	b.n	800fc88 <_dtoa_r+0x960>
 800fecc:	9a00      	ldr	r2, [sp, #0]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d189      	bne.n	800fde6 <_dtoa_r+0xabe>
 800fed2:	f10b 0b01 	add.w	fp, fp, #1
 800fed6:	2331      	movs	r3, #49	; 0x31
 800fed8:	e796      	b.n	800fe08 <_dtoa_r+0xae0>
 800feda:	4b0a      	ldr	r3, [pc, #40]	; (800ff04 <_dtoa_r+0xbdc>)
 800fedc:	f7ff ba99 	b.w	800f412 <_dtoa_r+0xea>
 800fee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	f47f aa6d 	bne.w	800f3c2 <_dtoa_r+0x9a>
 800fee8:	4b07      	ldr	r3, [pc, #28]	; (800ff08 <_dtoa_r+0xbe0>)
 800feea:	f7ff ba92 	b.w	800f412 <_dtoa_r+0xea>
 800feee:	9b01      	ldr	r3, [sp, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	dcb5      	bgt.n	800fe60 <_dtoa_r+0xb38>
 800fef4:	9b07      	ldr	r3, [sp, #28]
 800fef6:	2b02      	cmp	r3, #2
 800fef8:	f73f aeb1 	bgt.w	800fc5e <_dtoa_r+0x936>
 800fefc:	e7b0      	b.n	800fe60 <_dtoa_r+0xb38>
 800fefe:	bf00      	nop
 800ff00:	08012625 	.word	0x08012625
 800ff04:	0801257b 	.word	0x0801257b
 800ff08:	080125a9 	.word	0x080125a9

0800ff0c <_free_r>:
 800ff0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff0e:	2900      	cmp	r1, #0
 800ff10:	d044      	beq.n	800ff9c <_free_r+0x90>
 800ff12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff16:	9001      	str	r0, [sp, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ff1e:	bfb8      	it	lt
 800ff20:	18e4      	addlt	r4, r4, r3
 800ff22:	f000 f8f9 	bl	8010118 <__malloc_lock>
 800ff26:	4a1e      	ldr	r2, [pc, #120]	; (800ffa0 <_free_r+0x94>)
 800ff28:	9801      	ldr	r0, [sp, #4]
 800ff2a:	6813      	ldr	r3, [r2, #0]
 800ff2c:	b933      	cbnz	r3, 800ff3c <_free_r+0x30>
 800ff2e:	6063      	str	r3, [r4, #4]
 800ff30:	6014      	str	r4, [r2, #0]
 800ff32:	b003      	add	sp, #12
 800ff34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff38:	f000 b8f4 	b.w	8010124 <__malloc_unlock>
 800ff3c:	42a3      	cmp	r3, r4
 800ff3e:	d908      	bls.n	800ff52 <_free_r+0x46>
 800ff40:	6825      	ldr	r5, [r4, #0]
 800ff42:	1961      	adds	r1, r4, r5
 800ff44:	428b      	cmp	r3, r1
 800ff46:	bf01      	itttt	eq
 800ff48:	6819      	ldreq	r1, [r3, #0]
 800ff4a:	685b      	ldreq	r3, [r3, #4]
 800ff4c:	1949      	addeq	r1, r1, r5
 800ff4e:	6021      	streq	r1, [r4, #0]
 800ff50:	e7ed      	b.n	800ff2e <_free_r+0x22>
 800ff52:	461a      	mov	r2, r3
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	b10b      	cbz	r3, 800ff5c <_free_r+0x50>
 800ff58:	42a3      	cmp	r3, r4
 800ff5a:	d9fa      	bls.n	800ff52 <_free_r+0x46>
 800ff5c:	6811      	ldr	r1, [r2, #0]
 800ff5e:	1855      	adds	r5, r2, r1
 800ff60:	42a5      	cmp	r5, r4
 800ff62:	d10b      	bne.n	800ff7c <_free_r+0x70>
 800ff64:	6824      	ldr	r4, [r4, #0]
 800ff66:	4421      	add	r1, r4
 800ff68:	1854      	adds	r4, r2, r1
 800ff6a:	42a3      	cmp	r3, r4
 800ff6c:	6011      	str	r1, [r2, #0]
 800ff6e:	d1e0      	bne.n	800ff32 <_free_r+0x26>
 800ff70:	681c      	ldr	r4, [r3, #0]
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	6053      	str	r3, [r2, #4]
 800ff76:	440c      	add	r4, r1
 800ff78:	6014      	str	r4, [r2, #0]
 800ff7a:	e7da      	b.n	800ff32 <_free_r+0x26>
 800ff7c:	d902      	bls.n	800ff84 <_free_r+0x78>
 800ff7e:	230c      	movs	r3, #12
 800ff80:	6003      	str	r3, [r0, #0]
 800ff82:	e7d6      	b.n	800ff32 <_free_r+0x26>
 800ff84:	6825      	ldr	r5, [r4, #0]
 800ff86:	1961      	adds	r1, r4, r5
 800ff88:	428b      	cmp	r3, r1
 800ff8a:	bf04      	itt	eq
 800ff8c:	6819      	ldreq	r1, [r3, #0]
 800ff8e:	685b      	ldreq	r3, [r3, #4]
 800ff90:	6063      	str	r3, [r4, #4]
 800ff92:	bf04      	itt	eq
 800ff94:	1949      	addeq	r1, r1, r5
 800ff96:	6021      	streq	r1, [r4, #0]
 800ff98:	6054      	str	r4, [r2, #4]
 800ff9a:	e7ca      	b.n	800ff32 <_free_r+0x26>
 800ff9c:	b003      	add	sp, #12
 800ff9e:	bd30      	pop	{r4, r5, pc}
 800ffa0:	2001a45c 	.word	0x2001a45c

0800ffa4 <malloc>:
 800ffa4:	4b02      	ldr	r3, [pc, #8]	; (800ffb0 <malloc+0xc>)
 800ffa6:	4601      	mov	r1, r0
 800ffa8:	6818      	ldr	r0, [r3, #0]
 800ffaa:	f000 b823 	b.w	800fff4 <_malloc_r>
 800ffae:	bf00      	nop
 800ffb0:	200001e0 	.word	0x200001e0

0800ffb4 <sbrk_aligned>:
 800ffb4:	b570      	push	{r4, r5, r6, lr}
 800ffb6:	4e0e      	ldr	r6, [pc, #56]	; (800fff0 <sbrk_aligned+0x3c>)
 800ffb8:	460c      	mov	r4, r1
 800ffba:	6831      	ldr	r1, [r6, #0]
 800ffbc:	4605      	mov	r5, r0
 800ffbe:	b911      	cbnz	r1, 800ffc6 <sbrk_aligned+0x12>
 800ffc0:	f000 fe60 	bl	8010c84 <_sbrk_r>
 800ffc4:	6030      	str	r0, [r6, #0]
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	4628      	mov	r0, r5
 800ffca:	f000 fe5b 	bl	8010c84 <_sbrk_r>
 800ffce:	1c43      	adds	r3, r0, #1
 800ffd0:	d00a      	beq.n	800ffe8 <sbrk_aligned+0x34>
 800ffd2:	1cc4      	adds	r4, r0, #3
 800ffd4:	f024 0403 	bic.w	r4, r4, #3
 800ffd8:	42a0      	cmp	r0, r4
 800ffda:	d007      	beq.n	800ffec <sbrk_aligned+0x38>
 800ffdc:	1a21      	subs	r1, r4, r0
 800ffde:	4628      	mov	r0, r5
 800ffe0:	f000 fe50 	bl	8010c84 <_sbrk_r>
 800ffe4:	3001      	adds	r0, #1
 800ffe6:	d101      	bne.n	800ffec <sbrk_aligned+0x38>
 800ffe8:	f04f 34ff 	mov.w	r4, #4294967295
 800ffec:	4620      	mov	r0, r4
 800ffee:	bd70      	pop	{r4, r5, r6, pc}
 800fff0:	2001a460 	.word	0x2001a460

0800fff4 <_malloc_r>:
 800fff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fff8:	1ccd      	adds	r5, r1, #3
 800fffa:	f025 0503 	bic.w	r5, r5, #3
 800fffe:	3508      	adds	r5, #8
 8010000:	2d0c      	cmp	r5, #12
 8010002:	bf38      	it	cc
 8010004:	250c      	movcc	r5, #12
 8010006:	2d00      	cmp	r5, #0
 8010008:	4607      	mov	r7, r0
 801000a:	db01      	blt.n	8010010 <_malloc_r+0x1c>
 801000c:	42a9      	cmp	r1, r5
 801000e:	d905      	bls.n	801001c <_malloc_r+0x28>
 8010010:	230c      	movs	r3, #12
 8010012:	603b      	str	r3, [r7, #0]
 8010014:	2600      	movs	r6, #0
 8010016:	4630      	mov	r0, r6
 8010018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801001c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80100f0 <_malloc_r+0xfc>
 8010020:	f000 f87a 	bl	8010118 <__malloc_lock>
 8010024:	f8d8 3000 	ldr.w	r3, [r8]
 8010028:	461c      	mov	r4, r3
 801002a:	bb5c      	cbnz	r4, 8010084 <_malloc_r+0x90>
 801002c:	4629      	mov	r1, r5
 801002e:	4638      	mov	r0, r7
 8010030:	f7ff ffc0 	bl	800ffb4 <sbrk_aligned>
 8010034:	1c43      	adds	r3, r0, #1
 8010036:	4604      	mov	r4, r0
 8010038:	d155      	bne.n	80100e6 <_malloc_r+0xf2>
 801003a:	f8d8 4000 	ldr.w	r4, [r8]
 801003e:	4626      	mov	r6, r4
 8010040:	2e00      	cmp	r6, #0
 8010042:	d145      	bne.n	80100d0 <_malloc_r+0xdc>
 8010044:	2c00      	cmp	r4, #0
 8010046:	d048      	beq.n	80100da <_malloc_r+0xe6>
 8010048:	6823      	ldr	r3, [r4, #0]
 801004a:	4631      	mov	r1, r6
 801004c:	4638      	mov	r0, r7
 801004e:	eb04 0903 	add.w	r9, r4, r3
 8010052:	f000 fe17 	bl	8010c84 <_sbrk_r>
 8010056:	4581      	cmp	r9, r0
 8010058:	d13f      	bne.n	80100da <_malloc_r+0xe6>
 801005a:	6821      	ldr	r1, [r4, #0]
 801005c:	1a6d      	subs	r5, r5, r1
 801005e:	4629      	mov	r1, r5
 8010060:	4638      	mov	r0, r7
 8010062:	f7ff ffa7 	bl	800ffb4 <sbrk_aligned>
 8010066:	3001      	adds	r0, #1
 8010068:	d037      	beq.n	80100da <_malloc_r+0xe6>
 801006a:	6823      	ldr	r3, [r4, #0]
 801006c:	442b      	add	r3, r5
 801006e:	6023      	str	r3, [r4, #0]
 8010070:	f8d8 3000 	ldr.w	r3, [r8]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d038      	beq.n	80100ea <_malloc_r+0xf6>
 8010078:	685a      	ldr	r2, [r3, #4]
 801007a:	42a2      	cmp	r2, r4
 801007c:	d12b      	bne.n	80100d6 <_malloc_r+0xe2>
 801007e:	2200      	movs	r2, #0
 8010080:	605a      	str	r2, [r3, #4]
 8010082:	e00f      	b.n	80100a4 <_malloc_r+0xb0>
 8010084:	6822      	ldr	r2, [r4, #0]
 8010086:	1b52      	subs	r2, r2, r5
 8010088:	d41f      	bmi.n	80100ca <_malloc_r+0xd6>
 801008a:	2a0b      	cmp	r2, #11
 801008c:	d917      	bls.n	80100be <_malloc_r+0xca>
 801008e:	1961      	adds	r1, r4, r5
 8010090:	42a3      	cmp	r3, r4
 8010092:	6025      	str	r5, [r4, #0]
 8010094:	bf18      	it	ne
 8010096:	6059      	strne	r1, [r3, #4]
 8010098:	6863      	ldr	r3, [r4, #4]
 801009a:	bf08      	it	eq
 801009c:	f8c8 1000 	streq.w	r1, [r8]
 80100a0:	5162      	str	r2, [r4, r5]
 80100a2:	604b      	str	r3, [r1, #4]
 80100a4:	4638      	mov	r0, r7
 80100a6:	f104 060b 	add.w	r6, r4, #11
 80100aa:	f000 f83b 	bl	8010124 <__malloc_unlock>
 80100ae:	f026 0607 	bic.w	r6, r6, #7
 80100b2:	1d23      	adds	r3, r4, #4
 80100b4:	1af2      	subs	r2, r6, r3
 80100b6:	d0ae      	beq.n	8010016 <_malloc_r+0x22>
 80100b8:	1b9b      	subs	r3, r3, r6
 80100ba:	50a3      	str	r3, [r4, r2]
 80100bc:	e7ab      	b.n	8010016 <_malloc_r+0x22>
 80100be:	42a3      	cmp	r3, r4
 80100c0:	6862      	ldr	r2, [r4, #4]
 80100c2:	d1dd      	bne.n	8010080 <_malloc_r+0x8c>
 80100c4:	f8c8 2000 	str.w	r2, [r8]
 80100c8:	e7ec      	b.n	80100a4 <_malloc_r+0xb0>
 80100ca:	4623      	mov	r3, r4
 80100cc:	6864      	ldr	r4, [r4, #4]
 80100ce:	e7ac      	b.n	801002a <_malloc_r+0x36>
 80100d0:	4634      	mov	r4, r6
 80100d2:	6876      	ldr	r6, [r6, #4]
 80100d4:	e7b4      	b.n	8010040 <_malloc_r+0x4c>
 80100d6:	4613      	mov	r3, r2
 80100d8:	e7cc      	b.n	8010074 <_malloc_r+0x80>
 80100da:	230c      	movs	r3, #12
 80100dc:	603b      	str	r3, [r7, #0]
 80100de:	4638      	mov	r0, r7
 80100e0:	f000 f820 	bl	8010124 <__malloc_unlock>
 80100e4:	e797      	b.n	8010016 <_malloc_r+0x22>
 80100e6:	6025      	str	r5, [r4, #0]
 80100e8:	e7dc      	b.n	80100a4 <_malloc_r+0xb0>
 80100ea:	605b      	str	r3, [r3, #4]
 80100ec:	deff      	udf	#255	; 0xff
 80100ee:	bf00      	nop
 80100f0:	2001a45c 	.word	0x2001a45c

080100f4 <__ascii_mbtowc>:
 80100f4:	b082      	sub	sp, #8
 80100f6:	b901      	cbnz	r1, 80100fa <__ascii_mbtowc+0x6>
 80100f8:	a901      	add	r1, sp, #4
 80100fa:	b142      	cbz	r2, 801010e <__ascii_mbtowc+0x1a>
 80100fc:	b14b      	cbz	r3, 8010112 <__ascii_mbtowc+0x1e>
 80100fe:	7813      	ldrb	r3, [r2, #0]
 8010100:	600b      	str	r3, [r1, #0]
 8010102:	7812      	ldrb	r2, [r2, #0]
 8010104:	1e10      	subs	r0, r2, #0
 8010106:	bf18      	it	ne
 8010108:	2001      	movne	r0, #1
 801010a:	b002      	add	sp, #8
 801010c:	4770      	bx	lr
 801010e:	4610      	mov	r0, r2
 8010110:	e7fb      	b.n	801010a <__ascii_mbtowc+0x16>
 8010112:	f06f 0001 	mvn.w	r0, #1
 8010116:	e7f8      	b.n	801010a <__ascii_mbtowc+0x16>

08010118 <__malloc_lock>:
 8010118:	4801      	ldr	r0, [pc, #4]	; (8010120 <__malloc_lock+0x8>)
 801011a:	f7ff b86a 	b.w	800f1f2 <__retarget_lock_acquire_recursive>
 801011e:	bf00      	nop
 8010120:	2001a458 	.word	0x2001a458

08010124 <__malloc_unlock>:
 8010124:	4801      	ldr	r0, [pc, #4]	; (801012c <__malloc_unlock+0x8>)
 8010126:	f7ff b865 	b.w	800f1f4 <__retarget_lock_release_recursive>
 801012a:	bf00      	nop
 801012c:	2001a458 	.word	0x2001a458

08010130 <_Balloc>:
 8010130:	b570      	push	{r4, r5, r6, lr}
 8010132:	69c6      	ldr	r6, [r0, #28]
 8010134:	4604      	mov	r4, r0
 8010136:	460d      	mov	r5, r1
 8010138:	b976      	cbnz	r6, 8010158 <_Balloc+0x28>
 801013a:	2010      	movs	r0, #16
 801013c:	f7ff ff32 	bl	800ffa4 <malloc>
 8010140:	4602      	mov	r2, r0
 8010142:	61e0      	str	r0, [r4, #28]
 8010144:	b920      	cbnz	r0, 8010150 <_Balloc+0x20>
 8010146:	4b18      	ldr	r3, [pc, #96]	; (80101a8 <_Balloc+0x78>)
 8010148:	4818      	ldr	r0, [pc, #96]	; (80101ac <_Balloc+0x7c>)
 801014a:	216b      	movs	r1, #107	; 0x6b
 801014c:	f000 fdaa 	bl	8010ca4 <__assert_func>
 8010150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010154:	6006      	str	r6, [r0, #0]
 8010156:	60c6      	str	r6, [r0, #12]
 8010158:	69e6      	ldr	r6, [r4, #28]
 801015a:	68f3      	ldr	r3, [r6, #12]
 801015c:	b183      	cbz	r3, 8010180 <_Balloc+0x50>
 801015e:	69e3      	ldr	r3, [r4, #28]
 8010160:	68db      	ldr	r3, [r3, #12]
 8010162:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010166:	b9b8      	cbnz	r0, 8010198 <_Balloc+0x68>
 8010168:	2101      	movs	r1, #1
 801016a:	fa01 f605 	lsl.w	r6, r1, r5
 801016e:	1d72      	adds	r2, r6, #5
 8010170:	0092      	lsls	r2, r2, #2
 8010172:	4620      	mov	r0, r4
 8010174:	f000 fdb4 	bl	8010ce0 <_calloc_r>
 8010178:	b160      	cbz	r0, 8010194 <_Balloc+0x64>
 801017a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801017e:	e00e      	b.n	801019e <_Balloc+0x6e>
 8010180:	2221      	movs	r2, #33	; 0x21
 8010182:	2104      	movs	r1, #4
 8010184:	4620      	mov	r0, r4
 8010186:	f000 fdab 	bl	8010ce0 <_calloc_r>
 801018a:	69e3      	ldr	r3, [r4, #28]
 801018c:	60f0      	str	r0, [r6, #12]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d1e4      	bne.n	801015e <_Balloc+0x2e>
 8010194:	2000      	movs	r0, #0
 8010196:	bd70      	pop	{r4, r5, r6, pc}
 8010198:	6802      	ldr	r2, [r0, #0]
 801019a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801019e:	2300      	movs	r3, #0
 80101a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80101a4:	e7f7      	b.n	8010196 <_Balloc+0x66>
 80101a6:	bf00      	nop
 80101a8:	080125b6 	.word	0x080125b6
 80101ac:	08012636 	.word	0x08012636

080101b0 <_Bfree>:
 80101b0:	b570      	push	{r4, r5, r6, lr}
 80101b2:	69c6      	ldr	r6, [r0, #28]
 80101b4:	4605      	mov	r5, r0
 80101b6:	460c      	mov	r4, r1
 80101b8:	b976      	cbnz	r6, 80101d8 <_Bfree+0x28>
 80101ba:	2010      	movs	r0, #16
 80101bc:	f7ff fef2 	bl	800ffa4 <malloc>
 80101c0:	4602      	mov	r2, r0
 80101c2:	61e8      	str	r0, [r5, #28]
 80101c4:	b920      	cbnz	r0, 80101d0 <_Bfree+0x20>
 80101c6:	4b09      	ldr	r3, [pc, #36]	; (80101ec <_Bfree+0x3c>)
 80101c8:	4809      	ldr	r0, [pc, #36]	; (80101f0 <_Bfree+0x40>)
 80101ca:	218f      	movs	r1, #143	; 0x8f
 80101cc:	f000 fd6a 	bl	8010ca4 <__assert_func>
 80101d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101d4:	6006      	str	r6, [r0, #0]
 80101d6:	60c6      	str	r6, [r0, #12]
 80101d8:	b13c      	cbz	r4, 80101ea <_Bfree+0x3a>
 80101da:	69eb      	ldr	r3, [r5, #28]
 80101dc:	6862      	ldr	r2, [r4, #4]
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80101e4:	6021      	str	r1, [r4, #0]
 80101e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80101ea:	bd70      	pop	{r4, r5, r6, pc}
 80101ec:	080125b6 	.word	0x080125b6
 80101f0:	08012636 	.word	0x08012636

080101f4 <__multadd>:
 80101f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101f8:	690d      	ldr	r5, [r1, #16]
 80101fa:	4607      	mov	r7, r0
 80101fc:	460c      	mov	r4, r1
 80101fe:	461e      	mov	r6, r3
 8010200:	f101 0c14 	add.w	ip, r1, #20
 8010204:	2000      	movs	r0, #0
 8010206:	f8dc 3000 	ldr.w	r3, [ip]
 801020a:	b299      	uxth	r1, r3
 801020c:	fb02 6101 	mla	r1, r2, r1, r6
 8010210:	0c1e      	lsrs	r6, r3, #16
 8010212:	0c0b      	lsrs	r3, r1, #16
 8010214:	fb02 3306 	mla	r3, r2, r6, r3
 8010218:	b289      	uxth	r1, r1
 801021a:	3001      	adds	r0, #1
 801021c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010220:	4285      	cmp	r5, r0
 8010222:	f84c 1b04 	str.w	r1, [ip], #4
 8010226:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801022a:	dcec      	bgt.n	8010206 <__multadd+0x12>
 801022c:	b30e      	cbz	r6, 8010272 <__multadd+0x7e>
 801022e:	68a3      	ldr	r3, [r4, #8]
 8010230:	42ab      	cmp	r3, r5
 8010232:	dc19      	bgt.n	8010268 <__multadd+0x74>
 8010234:	6861      	ldr	r1, [r4, #4]
 8010236:	4638      	mov	r0, r7
 8010238:	3101      	adds	r1, #1
 801023a:	f7ff ff79 	bl	8010130 <_Balloc>
 801023e:	4680      	mov	r8, r0
 8010240:	b928      	cbnz	r0, 801024e <__multadd+0x5a>
 8010242:	4602      	mov	r2, r0
 8010244:	4b0c      	ldr	r3, [pc, #48]	; (8010278 <__multadd+0x84>)
 8010246:	480d      	ldr	r0, [pc, #52]	; (801027c <__multadd+0x88>)
 8010248:	21ba      	movs	r1, #186	; 0xba
 801024a:	f000 fd2b 	bl	8010ca4 <__assert_func>
 801024e:	6922      	ldr	r2, [r4, #16]
 8010250:	3202      	adds	r2, #2
 8010252:	f104 010c 	add.w	r1, r4, #12
 8010256:	0092      	lsls	r2, r2, #2
 8010258:	300c      	adds	r0, #12
 801025a:	f7fe ffcc 	bl	800f1f6 <memcpy>
 801025e:	4621      	mov	r1, r4
 8010260:	4638      	mov	r0, r7
 8010262:	f7ff ffa5 	bl	80101b0 <_Bfree>
 8010266:	4644      	mov	r4, r8
 8010268:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801026c:	3501      	adds	r5, #1
 801026e:	615e      	str	r6, [r3, #20]
 8010270:	6125      	str	r5, [r4, #16]
 8010272:	4620      	mov	r0, r4
 8010274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010278:	08012625 	.word	0x08012625
 801027c:	08012636 	.word	0x08012636

08010280 <__hi0bits>:
 8010280:	0c03      	lsrs	r3, r0, #16
 8010282:	041b      	lsls	r3, r3, #16
 8010284:	b9d3      	cbnz	r3, 80102bc <__hi0bits+0x3c>
 8010286:	0400      	lsls	r0, r0, #16
 8010288:	2310      	movs	r3, #16
 801028a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801028e:	bf04      	itt	eq
 8010290:	0200      	lsleq	r0, r0, #8
 8010292:	3308      	addeq	r3, #8
 8010294:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010298:	bf04      	itt	eq
 801029a:	0100      	lsleq	r0, r0, #4
 801029c:	3304      	addeq	r3, #4
 801029e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80102a2:	bf04      	itt	eq
 80102a4:	0080      	lsleq	r0, r0, #2
 80102a6:	3302      	addeq	r3, #2
 80102a8:	2800      	cmp	r0, #0
 80102aa:	db05      	blt.n	80102b8 <__hi0bits+0x38>
 80102ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80102b0:	f103 0301 	add.w	r3, r3, #1
 80102b4:	bf08      	it	eq
 80102b6:	2320      	moveq	r3, #32
 80102b8:	4618      	mov	r0, r3
 80102ba:	4770      	bx	lr
 80102bc:	2300      	movs	r3, #0
 80102be:	e7e4      	b.n	801028a <__hi0bits+0xa>

080102c0 <__lo0bits>:
 80102c0:	6803      	ldr	r3, [r0, #0]
 80102c2:	f013 0207 	ands.w	r2, r3, #7
 80102c6:	d00c      	beq.n	80102e2 <__lo0bits+0x22>
 80102c8:	07d9      	lsls	r1, r3, #31
 80102ca:	d422      	bmi.n	8010312 <__lo0bits+0x52>
 80102cc:	079a      	lsls	r2, r3, #30
 80102ce:	bf49      	itett	mi
 80102d0:	085b      	lsrmi	r3, r3, #1
 80102d2:	089b      	lsrpl	r3, r3, #2
 80102d4:	6003      	strmi	r3, [r0, #0]
 80102d6:	2201      	movmi	r2, #1
 80102d8:	bf5c      	itt	pl
 80102da:	6003      	strpl	r3, [r0, #0]
 80102dc:	2202      	movpl	r2, #2
 80102de:	4610      	mov	r0, r2
 80102e0:	4770      	bx	lr
 80102e2:	b299      	uxth	r1, r3
 80102e4:	b909      	cbnz	r1, 80102ea <__lo0bits+0x2a>
 80102e6:	0c1b      	lsrs	r3, r3, #16
 80102e8:	2210      	movs	r2, #16
 80102ea:	b2d9      	uxtb	r1, r3
 80102ec:	b909      	cbnz	r1, 80102f2 <__lo0bits+0x32>
 80102ee:	3208      	adds	r2, #8
 80102f0:	0a1b      	lsrs	r3, r3, #8
 80102f2:	0719      	lsls	r1, r3, #28
 80102f4:	bf04      	itt	eq
 80102f6:	091b      	lsreq	r3, r3, #4
 80102f8:	3204      	addeq	r2, #4
 80102fa:	0799      	lsls	r1, r3, #30
 80102fc:	bf04      	itt	eq
 80102fe:	089b      	lsreq	r3, r3, #2
 8010300:	3202      	addeq	r2, #2
 8010302:	07d9      	lsls	r1, r3, #31
 8010304:	d403      	bmi.n	801030e <__lo0bits+0x4e>
 8010306:	085b      	lsrs	r3, r3, #1
 8010308:	f102 0201 	add.w	r2, r2, #1
 801030c:	d003      	beq.n	8010316 <__lo0bits+0x56>
 801030e:	6003      	str	r3, [r0, #0]
 8010310:	e7e5      	b.n	80102de <__lo0bits+0x1e>
 8010312:	2200      	movs	r2, #0
 8010314:	e7e3      	b.n	80102de <__lo0bits+0x1e>
 8010316:	2220      	movs	r2, #32
 8010318:	e7e1      	b.n	80102de <__lo0bits+0x1e>
	...

0801031c <__i2b>:
 801031c:	b510      	push	{r4, lr}
 801031e:	460c      	mov	r4, r1
 8010320:	2101      	movs	r1, #1
 8010322:	f7ff ff05 	bl	8010130 <_Balloc>
 8010326:	4602      	mov	r2, r0
 8010328:	b928      	cbnz	r0, 8010336 <__i2b+0x1a>
 801032a:	4b05      	ldr	r3, [pc, #20]	; (8010340 <__i2b+0x24>)
 801032c:	4805      	ldr	r0, [pc, #20]	; (8010344 <__i2b+0x28>)
 801032e:	f240 1145 	movw	r1, #325	; 0x145
 8010332:	f000 fcb7 	bl	8010ca4 <__assert_func>
 8010336:	2301      	movs	r3, #1
 8010338:	6144      	str	r4, [r0, #20]
 801033a:	6103      	str	r3, [r0, #16]
 801033c:	bd10      	pop	{r4, pc}
 801033e:	bf00      	nop
 8010340:	08012625 	.word	0x08012625
 8010344:	08012636 	.word	0x08012636

08010348 <__multiply>:
 8010348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801034c:	4691      	mov	r9, r2
 801034e:	690a      	ldr	r2, [r1, #16]
 8010350:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010354:	429a      	cmp	r2, r3
 8010356:	bfb8      	it	lt
 8010358:	460b      	movlt	r3, r1
 801035a:	460c      	mov	r4, r1
 801035c:	bfbc      	itt	lt
 801035e:	464c      	movlt	r4, r9
 8010360:	4699      	movlt	r9, r3
 8010362:	6927      	ldr	r7, [r4, #16]
 8010364:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010368:	68a3      	ldr	r3, [r4, #8]
 801036a:	6861      	ldr	r1, [r4, #4]
 801036c:	eb07 060a 	add.w	r6, r7, sl
 8010370:	42b3      	cmp	r3, r6
 8010372:	b085      	sub	sp, #20
 8010374:	bfb8      	it	lt
 8010376:	3101      	addlt	r1, #1
 8010378:	f7ff feda 	bl	8010130 <_Balloc>
 801037c:	b930      	cbnz	r0, 801038c <__multiply+0x44>
 801037e:	4602      	mov	r2, r0
 8010380:	4b44      	ldr	r3, [pc, #272]	; (8010494 <__multiply+0x14c>)
 8010382:	4845      	ldr	r0, [pc, #276]	; (8010498 <__multiply+0x150>)
 8010384:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010388:	f000 fc8c 	bl	8010ca4 <__assert_func>
 801038c:	f100 0514 	add.w	r5, r0, #20
 8010390:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010394:	462b      	mov	r3, r5
 8010396:	2200      	movs	r2, #0
 8010398:	4543      	cmp	r3, r8
 801039a:	d321      	bcc.n	80103e0 <__multiply+0x98>
 801039c:	f104 0314 	add.w	r3, r4, #20
 80103a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80103a4:	f109 0314 	add.w	r3, r9, #20
 80103a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80103ac:	9202      	str	r2, [sp, #8]
 80103ae:	1b3a      	subs	r2, r7, r4
 80103b0:	3a15      	subs	r2, #21
 80103b2:	f022 0203 	bic.w	r2, r2, #3
 80103b6:	3204      	adds	r2, #4
 80103b8:	f104 0115 	add.w	r1, r4, #21
 80103bc:	428f      	cmp	r7, r1
 80103be:	bf38      	it	cc
 80103c0:	2204      	movcc	r2, #4
 80103c2:	9201      	str	r2, [sp, #4]
 80103c4:	9a02      	ldr	r2, [sp, #8]
 80103c6:	9303      	str	r3, [sp, #12]
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d80c      	bhi.n	80103e6 <__multiply+0x9e>
 80103cc:	2e00      	cmp	r6, #0
 80103ce:	dd03      	ble.n	80103d8 <__multiply+0x90>
 80103d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d05b      	beq.n	8010490 <__multiply+0x148>
 80103d8:	6106      	str	r6, [r0, #16]
 80103da:	b005      	add	sp, #20
 80103dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103e0:	f843 2b04 	str.w	r2, [r3], #4
 80103e4:	e7d8      	b.n	8010398 <__multiply+0x50>
 80103e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80103ea:	f1ba 0f00 	cmp.w	sl, #0
 80103ee:	d024      	beq.n	801043a <__multiply+0xf2>
 80103f0:	f104 0e14 	add.w	lr, r4, #20
 80103f4:	46a9      	mov	r9, r5
 80103f6:	f04f 0c00 	mov.w	ip, #0
 80103fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80103fe:	f8d9 1000 	ldr.w	r1, [r9]
 8010402:	fa1f fb82 	uxth.w	fp, r2
 8010406:	b289      	uxth	r1, r1
 8010408:	fb0a 110b 	mla	r1, sl, fp, r1
 801040c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010410:	f8d9 2000 	ldr.w	r2, [r9]
 8010414:	4461      	add	r1, ip
 8010416:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801041a:	fb0a c20b 	mla	r2, sl, fp, ip
 801041e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010422:	b289      	uxth	r1, r1
 8010424:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010428:	4577      	cmp	r7, lr
 801042a:	f849 1b04 	str.w	r1, [r9], #4
 801042e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010432:	d8e2      	bhi.n	80103fa <__multiply+0xb2>
 8010434:	9a01      	ldr	r2, [sp, #4]
 8010436:	f845 c002 	str.w	ip, [r5, r2]
 801043a:	9a03      	ldr	r2, [sp, #12]
 801043c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010440:	3304      	adds	r3, #4
 8010442:	f1b9 0f00 	cmp.w	r9, #0
 8010446:	d021      	beq.n	801048c <__multiply+0x144>
 8010448:	6829      	ldr	r1, [r5, #0]
 801044a:	f104 0c14 	add.w	ip, r4, #20
 801044e:	46ae      	mov	lr, r5
 8010450:	f04f 0a00 	mov.w	sl, #0
 8010454:	f8bc b000 	ldrh.w	fp, [ip]
 8010458:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801045c:	fb09 220b 	mla	r2, r9, fp, r2
 8010460:	4452      	add	r2, sl
 8010462:	b289      	uxth	r1, r1
 8010464:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010468:	f84e 1b04 	str.w	r1, [lr], #4
 801046c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010470:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010474:	f8be 1000 	ldrh.w	r1, [lr]
 8010478:	fb09 110a 	mla	r1, r9, sl, r1
 801047c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010480:	4567      	cmp	r7, ip
 8010482:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010486:	d8e5      	bhi.n	8010454 <__multiply+0x10c>
 8010488:	9a01      	ldr	r2, [sp, #4]
 801048a:	50a9      	str	r1, [r5, r2]
 801048c:	3504      	adds	r5, #4
 801048e:	e799      	b.n	80103c4 <__multiply+0x7c>
 8010490:	3e01      	subs	r6, #1
 8010492:	e79b      	b.n	80103cc <__multiply+0x84>
 8010494:	08012625 	.word	0x08012625
 8010498:	08012636 	.word	0x08012636

0801049c <__pow5mult>:
 801049c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104a0:	4615      	mov	r5, r2
 80104a2:	f012 0203 	ands.w	r2, r2, #3
 80104a6:	4606      	mov	r6, r0
 80104a8:	460f      	mov	r7, r1
 80104aa:	d007      	beq.n	80104bc <__pow5mult+0x20>
 80104ac:	4c25      	ldr	r4, [pc, #148]	; (8010544 <__pow5mult+0xa8>)
 80104ae:	3a01      	subs	r2, #1
 80104b0:	2300      	movs	r3, #0
 80104b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80104b6:	f7ff fe9d 	bl	80101f4 <__multadd>
 80104ba:	4607      	mov	r7, r0
 80104bc:	10ad      	asrs	r5, r5, #2
 80104be:	d03d      	beq.n	801053c <__pow5mult+0xa0>
 80104c0:	69f4      	ldr	r4, [r6, #28]
 80104c2:	b97c      	cbnz	r4, 80104e4 <__pow5mult+0x48>
 80104c4:	2010      	movs	r0, #16
 80104c6:	f7ff fd6d 	bl	800ffa4 <malloc>
 80104ca:	4602      	mov	r2, r0
 80104cc:	61f0      	str	r0, [r6, #28]
 80104ce:	b928      	cbnz	r0, 80104dc <__pow5mult+0x40>
 80104d0:	4b1d      	ldr	r3, [pc, #116]	; (8010548 <__pow5mult+0xac>)
 80104d2:	481e      	ldr	r0, [pc, #120]	; (801054c <__pow5mult+0xb0>)
 80104d4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80104d8:	f000 fbe4 	bl	8010ca4 <__assert_func>
 80104dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80104e0:	6004      	str	r4, [r0, #0]
 80104e2:	60c4      	str	r4, [r0, #12]
 80104e4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80104e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80104ec:	b94c      	cbnz	r4, 8010502 <__pow5mult+0x66>
 80104ee:	f240 2171 	movw	r1, #625	; 0x271
 80104f2:	4630      	mov	r0, r6
 80104f4:	f7ff ff12 	bl	801031c <__i2b>
 80104f8:	2300      	movs	r3, #0
 80104fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80104fe:	4604      	mov	r4, r0
 8010500:	6003      	str	r3, [r0, #0]
 8010502:	f04f 0900 	mov.w	r9, #0
 8010506:	07eb      	lsls	r3, r5, #31
 8010508:	d50a      	bpl.n	8010520 <__pow5mult+0x84>
 801050a:	4639      	mov	r1, r7
 801050c:	4622      	mov	r2, r4
 801050e:	4630      	mov	r0, r6
 8010510:	f7ff ff1a 	bl	8010348 <__multiply>
 8010514:	4639      	mov	r1, r7
 8010516:	4680      	mov	r8, r0
 8010518:	4630      	mov	r0, r6
 801051a:	f7ff fe49 	bl	80101b0 <_Bfree>
 801051e:	4647      	mov	r7, r8
 8010520:	106d      	asrs	r5, r5, #1
 8010522:	d00b      	beq.n	801053c <__pow5mult+0xa0>
 8010524:	6820      	ldr	r0, [r4, #0]
 8010526:	b938      	cbnz	r0, 8010538 <__pow5mult+0x9c>
 8010528:	4622      	mov	r2, r4
 801052a:	4621      	mov	r1, r4
 801052c:	4630      	mov	r0, r6
 801052e:	f7ff ff0b 	bl	8010348 <__multiply>
 8010532:	6020      	str	r0, [r4, #0]
 8010534:	f8c0 9000 	str.w	r9, [r0]
 8010538:	4604      	mov	r4, r0
 801053a:	e7e4      	b.n	8010506 <__pow5mult+0x6a>
 801053c:	4638      	mov	r0, r7
 801053e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010542:	bf00      	nop
 8010544:	08012780 	.word	0x08012780
 8010548:	080125b6 	.word	0x080125b6
 801054c:	08012636 	.word	0x08012636

08010550 <__lshift>:
 8010550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010554:	460c      	mov	r4, r1
 8010556:	6849      	ldr	r1, [r1, #4]
 8010558:	6923      	ldr	r3, [r4, #16]
 801055a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801055e:	68a3      	ldr	r3, [r4, #8]
 8010560:	4607      	mov	r7, r0
 8010562:	4691      	mov	r9, r2
 8010564:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010568:	f108 0601 	add.w	r6, r8, #1
 801056c:	42b3      	cmp	r3, r6
 801056e:	db0b      	blt.n	8010588 <__lshift+0x38>
 8010570:	4638      	mov	r0, r7
 8010572:	f7ff fddd 	bl	8010130 <_Balloc>
 8010576:	4605      	mov	r5, r0
 8010578:	b948      	cbnz	r0, 801058e <__lshift+0x3e>
 801057a:	4602      	mov	r2, r0
 801057c:	4b28      	ldr	r3, [pc, #160]	; (8010620 <__lshift+0xd0>)
 801057e:	4829      	ldr	r0, [pc, #164]	; (8010624 <__lshift+0xd4>)
 8010580:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010584:	f000 fb8e 	bl	8010ca4 <__assert_func>
 8010588:	3101      	adds	r1, #1
 801058a:	005b      	lsls	r3, r3, #1
 801058c:	e7ee      	b.n	801056c <__lshift+0x1c>
 801058e:	2300      	movs	r3, #0
 8010590:	f100 0114 	add.w	r1, r0, #20
 8010594:	f100 0210 	add.w	r2, r0, #16
 8010598:	4618      	mov	r0, r3
 801059a:	4553      	cmp	r3, sl
 801059c:	db33      	blt.n	8010606 <__lshift+0xb6>
 801059e:	6920      	ldr	r0, [r4, #16]
 80105a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80105a4:	f104 0314 	add.w	r3, r4, #20
 80105a8:	f019 091f 	ands.w	r9, r9, #31
 80105ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80105b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80105b4:	d02b      	beq.n	801060e <__lshift+0xbe>
 80105b6:	f1c9 0e20 	rsb	lr, r9, #32
 80105ba:	468a      	mov	sl, r1
 80105bc:	2200      	movs	r2, #0
 80105be:	6818      	ldr	r0, [r3, #0]
 80105c0:	fa00 f009 	lsl.w	r0, r0, r9
 80105c4:	4310      	orrs	r0, r2
 80105c6:	f84a 0b04 	str.w	r0, [sl], #4
 80105ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80105ce:	459c      	cmp	ip, r3
 80105d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80105d4:	d8f3      	bhi.n	80105be <__lshift+0x6e>
 80105d6:	ebac 0304 	sub.w	r3, ip, r4
 80105da:	3b15      	subs	r3, #21
 80105dc:	f023 0303 	bic.w	r3, r3, #3
 80105e0:	3304      	adds	r3, #4
 80105e2:	f104 0015 	add.w	r0, r4, #21
 80105e6:	4584      	cmp	ip, r0
 80105e8:	bf38      	it	cc
 80105ea:	2304      	movcc	r3, #4
 80105ec:	50ca      	str	r2, [r1, r3]
 80105ee:	b10a      	cbz	r2, 80105f4 <__lshift+0xa4>
 80105f0:	f108 0602 	add.w	r6, r8, #2
 80105f4:	3e01      	subs	r6, #1
 80105f6:	4638      	mov	r0, r7
 80105f8:	612e      	str	r6, [r5, #16]
 80105fa:	4621      	mov	r1, r4
 80105fc:	f7ff fdd8 	bl	80101b0 <_Bfree>
 8010600:	4628      	mov	r0, r5
 8010602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010606:	f842 0f04 	str.w	r0, [r2, #4]!
 801060a:	3301      	adds	r3, #1
 801060c:	e7c5      	b.n	801059a <__lshift+0x4a>
 801060e:	3904      	subs	r1, #4
 8010610:	f853 2b04 	ldr.w	r2, [r3], #4
 8010614:	f841 2f04 	str.w	r2, [r1, #4]!
 8010618:	459c      	cmp	ip, r3
 801061a:	d8f9      	bhi.n	8010610 <__lshift+0xc0>
 801061c:	e7ea      	b.n	80105f4 <__lshift+0xa4>
 801061e:	bf00      	nop
 8010620:	08012625 	.word	0x08012625
 8010624:	08012636 	.word	0x08012636

08010628 <__mcmp>:
 8010628:	b530      	push	{r4, r5, lr}
 801062a:	6902      	ldr	r2, [r0, #16]
 801062c:	690c      	ldr	r4, [r1, #16]
 801062e:	1b12      	subs	r2, r2, r4
 8010630:	d10e      	bne.n	8010650 <__mcmp+0x28>
 8010632:	f100 0314 	add.w	r3, r0, #20
 8010636:	3114      	adds	r1, #20
 8010638:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801063c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010640:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010644:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010648:	42a5      	cmp	r5, r4
 801064a:	d003      	beq.n	8010654 <__mcmp+0x2c>
 801064c:	d305      	bcc.n	801065a <__mcmp+0x32>
 801064e:	2201      	movs	r2, #1
 8010650:	4610      	mov	r0, r2
 8010652:	bd30      	pop	{r4, r5, pc}
 8010654:	4283      	cmp	r3, r0
 8010656:	d3f3      	bcc.n	8010640 <__mcmp+0x18>
 8010658:	e7fa      	b.n	8010650 <__mcmp+0x28>
 801065a:	f04f 32ff 	mov.w	r2, #4294967295
 801065e:	e7f7      	b.n	8010650 <__mcmp+0x28>

08010660 <__mdiff>:
 8010660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010664:	460c      	mov	r4, r1
 8010666:	4606      	mov	r6, r0
 8010668:	4611      	mov	r1, r2
 801066a:	4620      	mov	r0, r4
 801066c:	4690      	mov	r8, r2
 801066e:	f7ff ffdb 	bl	8010628 <__mcmp>
 8010672:	1e05      	subs	r5, r0, #0
 8010674:	d110      	bne.n	8010698 <__mdiff+0x38>
 8010676:	4629      	mov	r1, r5
 8010678:	4630      	mov	r0, r6
 801067a:	f7ff fd59 	bl	8010130 <_Balloc>
 801067e:	b930      	cbnz	r0, 801068e <__mdiff+0x2e>
 8010680:	4b3a      	ldr	r3, [pc, #232]	; (801076c <__mdiff+0x10c>)
 8010682:	4602      	mov	r2, r0
 8010684:	f240 2137 	movw	r1, #567	; 0x237
 8010688:	4839      	ldr	r0, [pc, #228]	; (8010770 <__mdiff+0x110>)
 801068a:	f000 fb0b 	bl	8010ca4 <__assert_func>
 801068e:	2301      	movs	r3, #1
 8010690:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010698:	bfa4      	itt	ge
 801069a:	4643      	movge	r3, r8
 801069c:	46a0      	movge	r8, r4
 801069e:	4630      	mov	r0, r6
 80106a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80106a4:	bfa6      	itte	ge
 80106a6:	461c      	movge	r4, r3
 80106a8:	2500      	movge	r5, #0
 80106aa:	2501      	movlt	r5, #1
 80106ac:	f7ff fd40 	bl	8010130 <_Balloc>
 80106b0:	b920      	cbnz	r0, 80106bc <__mdiff+0x5c>
 80106b2:	4b2e      	ldr	r3, [pc, #184]	; (801076c <__mdiff+0x10c>)
 80106b4:	4602      	mov	r2, r0
 80106b6:	f240 2145 	movw	r1, #581	; 0x245
 80106ba:	e7e5      	b.n	8010688 <__mdiff+0x28>
 80106bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80106c0:	6926      	ldr	r6, [r4, #16]
 80106c2:	60c5      	str	r5, [r0, #12]
 80106c4:	f104 0914 	add.w	r9, r4, #20
 80106c8:	f108 0514 	add.w	r5, r8, #20
 80106cc:	f100 0e14 	add.w	lr, r0, #20
 80106d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80106d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80106d8:	f108 0210 	add.w	r2, r8, #16
 80106dc:	46f2      	mov	sl, lr
 80106de:	2100      	movs	r1, #0
 80106e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80106e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80106e8:	fa11 f88b 	uxtah	r8, r1, fp
 80106ec:	b299      	uxth	r1, r3
 80106ee:	0c1b      	lsrs	r3, r3, #16
 80106f0:	eba8 0801 	sub.w	r8, r8, r1
 80106f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80106f8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80106fc:	fa1f f888 	uxth.w	r8, r8
 8010700:	1419      	asrs	r1, r3, #16
 8010702:	454e      	cmp	r6, r9
 8010704:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010708:	f84a 3b04 	str.w	r3, [sl], #4
 801070c:	d8e8      	bhi.n	80106e0 <__mdiff+0x80>
 801070e:	1b33      	subs	r3, r6, r4
 8010710:	3b15      	subs	r3, #21
 8010712:	f023 0303 	bic.w	r3, r3, #3
 8010716:	3304      	adds	r3, #4
 8010718:	3415      	adds	r4, #21
 801071a:	42a6      	cmp	r6, r4
 801071c:	bf38      	it	cc
 801071e:	2304      	movcc	r3, #4
 8010720:	441d      	add	r5, r3
 8010722:	4473      	add	r3, lr
 8010724:	469e      	mov	lr, r3
 8010726:	462e      	mov	r6, r5
 8010728:	4566      	cmp	r6, ip
 801072a:	d30e      	bcc.n	801074a <__mdiff+0xea>
 801072c:	f10c 0203 	add.w	r2, ip, #3
 8010730:	1b52      	subs	r2, r2, r5
 8010732:	f022 0203 	bic.w	r2, r2, #3
 8010736:	3d03      	subs	r5, #3
 8010738:	45ac      	cmp	ip, r5
 801073a:	bf38      	it	cc
 801073c:	2200      	movcc	r2, #0
 801073e:	4413      	add	r3, r2
 8010740:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010744:	b17a      	cbz	r2, 8010766 <__mdiff+0x106>
 8010746:	6107      	str	r7, [r0, #16]
 8010748:	e7a4      	b.n	8010694 <__mdiff+0x34>
 801074a:	f856 8b04 	ldr.w	r8, [r6], #4
 801074e:	fa11 f288 	uxtah	r2, r1, r8
 8010752:	1414      	asrs	r4, r2, #16
 8010754:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010758:	b292      	uxth	r2, r2
 801075a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801075e:	f84e 2b04 	str.w	r2, [lr], #4
 8010762:	1421      	asrs	r1, r4, #16
 8010764:	e7e0      	b.n	8010728 <__mdiff+0xc8>
 8010766:	3f01      	subs	r7, #1
 8010768:	e7ea      	b.n	8010740 <__mdiff+0xe0>
 801076a:	bf00      	nop
 801076c:	08012625 	.word	0x08012625
 8010770:	08012636 	.word	0x08012636

08010774 <__d2b>:
 8010774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010778:	460f      	mov	r7, r1
 801077a:	2101      	movs	r1, #1
 801077c:	ec59 8b10 	vmov	r8, r9, d0
 8010780:	4616      	mov	r6, r2
 8010782:	f7ff fcd5 	bl	8010130 <_Balloc>
 8010786:	4604      	mov	r4, r0
 8010788:	b930      	cbnz	r0, 8010798 <__d2b+0x24>
 801078a:	4602      	mov	r2, r0
 801078c:	4b24      	ldr	r3, [pc, #144]	; (8010820 <__d2b+0xac>)
 801078e:	4825      	ldr	r0, [pc, #148]	; (8010824 <__d2b+0xb0>)
 8010790:	f240 310f 	movw	r1, #783	; 0x30f
 8010794:	f000 fa86 	bl	8010ca4 <__assert_func>
 8010798:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801079c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80107a0:	bb2d      	cbnz	r5, 80107ee <__d2b+0x7a>
 80107a2:	9301      	str	r3, [sp, #4]
 80107a4:	f1b8 0300 	subs.w	r3, r8, #0
 80107a8:	d026      	beq.n	80107f8 <__d2b+0x84>
 80107aa:	4668      	mov	r0, sp
 80107ac:	9300      	str	r3, [sp, #0]
 80107ae:	f7ff fd87 	bl	80102c0 <__lo0bits>
 80107b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80107b6:	b1e8      	cbz	r0, 80107f4 <__d2b+0x80>
 80107b8:	f1c0 0320 	rsb	r3, r0, #32
 80107bc:	fa02 f303 	lsl.w	r3, r2, r3
 80107c0:	430b      	orrs	r3, r1
 80107c2:	40c2      	lsrs	r2, r0
 80107c4:	6163      	str	r3, [r4, #20]
 80107c6:	9201      	str	r2, [sp, #4]
 80107c8:	9b01      	ldr	r3, [sp, #4]
 80107ca:	61a3      	str	r3, [r4, #24]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	bf14      	ite	ne
 80107d0:	2202      	movne	r2, #2
 80107d2:	2201      	moveq	r2, #1
 80107d4:	6122      	str	r2, [r4, #16]
 80107d6:	b1bd      	cbz	r5, 8010808 <__d2b+0x94>
 80107d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80107dc:	4405      	add	r5, r0
 80107de:	603d      	str	r5, [r7, #0]
 80107e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80107e4:	6030      	str	r0, [r6, #0]
 80107e6:	4620      	mov	r0, r4
 80107e8:	b003      	add	sp, #12
 80107ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80107f2:	e7d6      	b.n	80107a2 <__d2b+0x2e>
 80107f4:	6161      	str	r1, [r4, #20]
 80107f6:	e7e7      	b.n	80107c8 <__d2b+0x54>
 80107f8:	a801      	add	r0, sp, #4
 80107fa:	f7ff fd61 	bl	80102c0 <__lo0bits>
 80107fe:	9b01      	ldr	r3, [sp, #4]
 8010800:	6163      	str	r3, [r4, #20]
 8010802:	3020      	adds	r0, #32
 8010804:	2201      	movs	r2, #1
 8010806:	e7e5      	b.n	80107d4 <__d2b+0x60>
 8010808:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801080c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010810:	6038      	str	r0, [r7, #0]
 8010812:	6918      	ldr	r0, [r3, #16]
 8010814:	f7ff fd34 	bl	8010280 <__hi0bits>
 8010818:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801081c:	e7e2      	b.n	80107e4 <__d2b+0x70>
 801081e:	bf00      	nop
 8010820:	08012625 	.word	0x08012625
 8010824:	08012636 	.word	0x08012636

08010828 <__ascii_wctomb>:
 8010828:	b149      	cbz	r1, 801083e <__ascii_wctomb+0x16>
 801082a:	2aff      	cmp	r2, #255	; 0xff
 801082c:	bf85      	ittet	hi
 801082e:	238a      	movhi	r3, #138	; 0x8a
 8010830:	6003      	strhi	r3, [r0, #0]
 8010832:	700a      	strbls	r2, [r1, #0]
 8010834:	f04f 30ff 	movhi.w	r0, #4294967295
 8010838:	bf98      	it	ls
 801083a:	2001      	movls	r0, #1
 801083c:	4770      	bx	lr
 801083e:	4608      	mov	r0, r1
 8010840:	4770      	bx	lr

08010842 <__ssputs_r>:
 8010842:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010846:	688e      	ldr	r6, [r1, #8]
 8010848:	461f      	mov	r7, r3
 801084a:	42be      	cmp	r6, r7
 801084c:	680b      	ldr	r3, [r1, #0]
 801084e:	4682      	mov	sl, r0
 8010850:	460c      	mov	r4, r1
 8010852:	4690      	mov	r8, r2
 8010854:	d82c      	bhi.n	80108b0 <__ssputs_r+0x6e>
 8010856:	898a      	ldrh	r2, [r1, #12]
 8010858:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801085c:	d026      	beq.n	80108ac <__ssputs_r+0x6a>
 801085e:	6965      	ldr	r5, [r4, #20]
 8010860:	6909      	ldr	r1, [r1, #16]
 8010862:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010866:	eba3 0901 	sub.w	r9, r3, r1
 801086a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801086e:	1c7b      	adds	r3, r7, #1
 8010870:	444b      	add	r3, r9
 8010872:	106d      	asrs	r5, r5, #1
 8010874:	429d      	cmp	r5, r3
 8010876:	bf38      	it	cc
 8010878:	461d      	movcc	r5, r3
 801087a:	0553      	lsls	r3, r2, #21
 801087c:	d527      	bpl.n	80108ce <__ssputs_r+0x8c>
 801087e:	4629      	mov	r1, r5
 8010880:	f7ff fbb8 	bl	800fff4 <_malloc_r>
 8010884:	4606      	mov	r6, r0
 8010886:	b360      	cbz	r0, 80108e2 <__ssputs_r+0xa0>
 8010888:	6921      	ldr	r1, [r4, #16]
 801088a:	464a      	mov	r2, r9
 801088c:	f7fe fcb3 	bl	800f1f6 <memcpy>
 8010890:	89a3      	ldrh	r3, [r4, #12]
 8010892:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801089a:	81a3      	strh	r3, [r4, #12]
 801089c:	6126      	str	r6, [r4, #16]
 801089e:	6165      	str	r5, [r4, #20]
 80108a0:	444e      	add	r6, r9
 80108a2:	eba5 0509 	sub.w	r5, r5, r9
 80108a6:	6026      	str	r6, [r4, #0]
 80108a8:	60a5      	str	r5, [r4, #8]
 80108aa:	463e      	mov	r6, r7
 80108ac:	42be      	cmp	r6, r7
 80108ae:	d900      	bls.n	80108b2 <__ssputs_r+0x70>
 80108b0:	463e      	mov	r6, r7
 80108b2:	6820      	ldr	r0, [r4, #0]
 80108b4:	4632      	mov	r2, r6
 80108b6:	4641      	mov	r1, r8
 80108b8:	f000 f9ca 	bl	8010c50 <memmove>
 80108bc:	68a3      	ldr	r3, [r4, #8]
 80108be:	1b9b      	subs	r3, r3, r6
 80108c0:	60a3      	str	r3, [r4, #8]
 80108c2:	6823      	ldr	r3, [r4, #0]
 80108c4:	4433      	add	r3, r6
 80108c6:	6023      	str	r3, [r4, #0]
 80108c8:	2000      	movs	r0, #0
 80108ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ce:	462a      	mov	r2, r5
 80108d0:	f000 fa1c 	bl	8010d0c <_realloc_r>
 80108d4:	4606      	mov	r6, r0
 80108d6:	2800      	cmp	r0, #0
 80108d8:	d1e0      	bne.n	801089c <__ssputs_r+0x5a>
 80108da:	6921      	ldr	r1, [r4, #16]
 80108dc:	4650      	mov	r0, sl
 80108de:	f7ff fb15 	bl	800ff0c <_free_r>
 80108e2:	230c      	movs	r3, #12
 80108e4:	f8ca 3000 	str.w	r3, [sl]
 80108e8:	89a3      	ldrh	r3, [r4, #12]
 80108ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108ee:	81a3      	strh	r3, [r4, #12]
 80108f0:	f04f 30ff 	mov.w	r0, #4294967295
 80108f4:	e7e9      	b.n	80108ca <__ssputs_r+0x88>
	...

080108f8 <_svfiprintf_r>:
 80108f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108fc:	4698      	mov	r8, r3
 80108fe:	898b      	ldrh	r3, [r1, #12]
 8010900:	061b      	lsls	r3, r3, #24
 8010902:	b09d      	sub	sp, #116	; 0x74
 8010904:	4607      	mov	r7, r0
 8010906:	460d      	mov	r5, r1
 8010908:	4614      	mov	r4, r2
 801090a:	d50e      	bpl.n	801092a <_svfiprintf_r+0x32>
 801090c:	690b      	ldr	r3, [r1, #16]
 801090e:	b963      	cbnz	r3, 801092a <_svfiprintf_r+0x32>
 8010910:	2140      	movs	r1, #64	; 0x40
 8010912:	f7ff fb6f 	bl	800fff4 <_malloc_r>
 8010916:	6028      	str	r0, [r5, #0]
 8010918:	6128      	str	r0, [r5, #16]
 801091a:	b920      	cbnz	r0, 8010926 <_svfiprintf_r+0x2e>
 801091c:	230c      	movs	r3, #12
 801091e:	603b      	str	r3, [r7, #0]
 8010920:	f04f 30ff 	mov.w	r0, #4294967295
 8010924:	e0d0      	b.n	8010ac8 <_svfiprintf_r+0x1d0>
 8010926:	2340      	movs	r3, #64	; 0x40
 8010928:	616b      	str	r3, [r5, #20]
 801092a:	2300      	movs	r3, #0
 801092c:	9309      	str	r3, [sp, #36]	; 0x24
 801092e:	2320      	movs	r3, #32
 8010930:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010934:	f8cd 800c 	str.w	r8, [sp, #12]
 8010938:	2330      	movs	r3, #48	; 0x30
 801093a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010ae0 <_svfiprintf_r+0x1e8>
 801093e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010942:	f04f 0901 	mov.w	r9, #1
 8010946:	4623      	mov	r3, r4
 8010948:	469a      	mov	sl, r3
 801094a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801094e:	b10a      	cbz	r2, 8010954 <_svfiprintf_r+0x5c>
 8010950:	2a25      	cmp	r2, #37	; 0x25
 8010952:	d1f9      	bne.n	8010948 <_svfiprintf_r+0x50>
 8010954:	ebba 0b04 	subs.w	fp, sl, r4
 8010958:	d00b      	beq.n	8010972 <_svfiprintf_r+0x7a>
 801095a:	465b      	mov	r3, fp
 801095c:	4622      	mov	r2, r4
 801095e:	4629      	mov	r1, r5
 8010960:	4638      	mov	r0, r7
 8010962:	f7ff ff6e 	bl	8010842 <__ssputs_r>
 8010966:	3001      	adds	r0, #1
 8010968:	f000 80a9 	beq.w	8010abe <_svfiprintf_r+0x1c6>
 801096c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801096e:	445a      	add	r2, fp
 8010970:	9209      	str	r2, [sp, #36]	; 0x24
 8010972:	f89a 3000 	ldrb.w	r3, [sl]
 8010976:	2b00      	cmp	r3, #0
 8010978:	f000 80a1 	beq.w	8010abe <_svfiprintf_r+0x1c6>
 801097c:	2300      	movs	r3, #0
 801097e:	f04f 32ff 	mov.w	r2, #4294967295
 8010982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010986:	f10a 0a01 	add.w	sl, sl, #1
 801098a:	9304      	str	r3, [sp, #16]
 801098c:	9307      	str	r3, [sp, #28]
 801098e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010992:	931a      	str	r3, [sp, #104]	; 0x68
 8010994:	4654      	mov	r4, sl
 8010996:	2205      	movs	r2, #5
 8010998:	f814 1b01 	ldrb.w	r1, [r4], #1
 801099c:	4850      	ldr	r0, [pc, #320]	; (8010ae0 <_svfiprintf_r+0x1e8>)
 801099e:	f7ef fc87 	bl	80002b0 <memchr>
 80109a2:	9a04      	ldr	r2, [sp, #16]
 80109a4:	b9d8      	cbnz	r0, 80109de <_svfiprintf_r+0xe6>
 80109a6:	06d0      	lsls	r0, r2, #27
 80109a8:	bf44      	itt	mi
 80109aa:	2320      	movmi	r3, #32
 80109ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109b0:	0711      	lsls	r1, r2, #28
 80109b2:	bf44      	itt	mi
 80109b4:	232b      	movmi	r3, #43	; 0x2b
 80109b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109ba:	f89a 3000 	ldrb.w	r3, [sl]
 80109be:	2b2a      	cmp	r3, #42	; 0x2a
 80109c0:	d015      	beq.n	80109ee <_svfiprintf_r+0xf6>
 80109c2:	9a07      	ldr	r2, [sp, #28]
 80109c4:	4654      	mov	r4, sl
 80109c6:	2000      	movs	r0, #0
 80109c8:	f04f 0c0a 	mov.w	ip, #10
 80109cc:	4621      	mov	r1, r4
 80109ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109d2:	3b30      	subs	r3, #48	; 0x30
 80109d4:	2b09      	cmp	r3, #9
 80109d6:	d94d      	bls.n	8010a74 <_svfiprintf_r+0x17c>
 80109d8:	b1b0      	cbz	r0, 8010a08 <_svfiprintf_r+0x110>
 80109da:	9207      	str	r2, [sp, #28]
 80109dc:	e014      	b.n	8010a08 <_svfiprintf_r+0x110>
 80109de:	eba0 0308 	sub.w	r3, r0, r8
 80109e2:	fa09 f303 	lsl.w	r3, r9, r3
 80109e6:	4313      	orrs	r3, r2
 80109e8:	9304      	str	r3, [sp, #16]
 80109ea:	46a2      	mov	sl, r4
 80109ec:	e7d2      	b.n	8010994 <_svfiprintf_r+0x9c>
 80109ee:	9b03      	ldr	r3, [sp, #12]
 80109f0:	1d19      	adds	r1, r3, #4
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	9103      	str	r1, [sp, #12]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	bfbb      	ittet	lt
 80109fa:	425b      	neglt	r3, r3
 80109fc:	f042 0202 	orrlt.w	r2, r2, #2
 8010a00:	9307      	strge	r3, [sp, #28]
 8010a02:	9307      	strlt	r3, [sp, #28]
 8010a04:	bfb8      	it	lt
 8010a06:	9204      	strlt	r2, [sp, #16]
 8010a08:	7823      	ldrb	r3, [r4, #0]
 8010a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8010a0c:	d10c      	bne.n	8010a28 <_svfiprintf_r+0x130>
 8010a0e:	7863      	ldrb	r3, [r4, #1]
 8010a10:	2b2a      	cmp	r3, #42	; 0x2a
 8010a12:	d134      	bne.n	8010a7e <_svfiprintf_r+0x186>
 8010a14:	9b03      	ldr	r3, [sp, #12]
 8010a16:	1d1a      	adds	r2, r3, #4
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	9203      	str	r2, [sp, #12]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	bfb8      	it	lt
 8010a20:	f04f 33ff 	movlt.w	r3, #4294967295
 8010a24:	3402      	adds	r4, #2
 8010a26:	9305      	str	r3, [sp, #20]
 8010a28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010af0 <_svfiprintf_r+0x1f8>
 8010a2c:	7821      	ldrb	r1, [r4, #0]
 8010a2e:	2203      	movs	r2, #3
 8010a30:	4650      	mov	r0, sl
 8010a32:	f7ef fc3d 	bl	80002b0 <memchr>
 8010a36:	b138      	cbz	r0, 8010a48 <_svfiprintf_r+0x150>
 8010a38:	9b04      	ldr	r3, [sp, #16]
 8010a3a:	eba0 000a 	sub.w	r0, r0, sl
 8010a3e:	2240      	movs	r2, #64	; 0x40
 8010a40:	4082      	lsls	r2, r0
 8010a42:	4313      	orrs	r3, r2
 8010a44:	3401      	adds	r4, #1
 8010a46:	9304      	str	r3, [sp, #16]
 8010a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a4c:	4825      	ldr	r0, [pc, #148]	; (8010ae4 <_svfiprintf_r+0x1ec>)
 8010a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a52:	2206      	movs	r2, #6
 8010a54:	f7ef fc2c 	bl	80002b0 <memchr>
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	d038      	beq.n	8010ace <_svfiprintf_r+0x1d6>
 8010a5c:	4b22      	ldr	r3, [pc, #136]	; (8010ae8 <_svfiprintf_r+0x1f0>)
 8010a5e:	bb1b      	cbnz	r3, 8010aa8 <_svfiprintf_r+0x1b0>
 8010a60:	9b03      	ldr	r3, [sp, #12]
 8010a62:	3307      	adds	r3, #7
 8010a64:	f023 0307 	bic.w	r3, r3, #7
 8010a68:	3308      	adds	r3, #8
 8010a6a:	9303      	str	r3, [sp, #12]
 8010a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a6e:	4433      	add	r3, r6
 8010a70:	9309      	str	r3, [sp, #36]	; 0x24
 8010a72:	e768      	b.n	8010946 <_svfiprintf_r+0x4e>
 8010a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a78:	460c      	mov	r4, r1
 8010a7a:	2001      	movs	r0, #1
 8010a7c:	e7a6      	b.n	80109cc <_svfiprintf_r+0xd4>
 8010a7e:	2300      	movs	r3, #0
 8010a80:	3401      	adds	r4, #1
 8010a82:	9305      	str	r3, [sp, #20]
 8010a84:	4619      	mov	r1, r3
 8010a86:	f04f 0c0a 	mov.w	ip, #10
 8010a8a:	4620      	mov	r0, r4
 8010a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a90:	3a30      	subs	r2, #48	; 0x30
 8010a92:	2a09      	cmp	r2, #9
 8010a94:	d903      	bls.n	8010a9e <_svfiprintf_r+0x1a6>
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d0c6      	beq.n	8010a28 <_svfiprintf_r+0x130>
 8010a9a:	9105      	str	r1, [sp, #20]
 8010a9c:	e7c4      	b.n	8010a28 <_svfiprintf_r+0x130>
 8010a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	e7f0      	b.n	8010a8a <_svfiprintf_r+0x192>
 8010aa8:	ab03      	add	r3, sp, #12
 8010aaa:	9300      	str	r3, [sp, #0]
 8010aac:	462a      	mov	r2, r5
 8010aae:	4b0f      	ldr	r3, [pc, #60]	; (8010aec <_svfiprintf_r+0x1f4>)
 8010ab0:	a904      	add	r1, sp, #16
 8010ab2:	4638      	mov	r0, r7
 8010ab4:	f7fd fe22 	bl	800e6fc <_printf_float>
 8010ab8:	1c42      	adds	r2, r0, #1
 8010aba:	4606      	mov	r6, r0
 8010abc:	d1d6      	bne.n	8010a6c <_svfiprintf_r+0x174>
 8010abe:	89ab      	ldrh	r3, [r5, #12]
 8010ac0:	065b      	lsls	r3, r3, #25
 8010ac2:	f53f af2d 	bmi.w	8010920 <_svfiprintf_r+0x28>
 8010ac6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ac8:	b01d      	add	sp, #116	; 0x74
 8010aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ace:	ab03      	add	r3, sp, #12
 8010ad0:	9300      	str	r3, [sp, #0]
 8010ad2:	462a      	mov	r2, r5
 8010ad4:	4b05      	ldr	r3, [pc, #20]	; (8010aec <_svfiprintf_r+0x1f4>)
 8010ad6:	a904      	add	r1, sp, #16
 8010ad8:	4638      	mov	r0, r7
 8010ada:	f7fe f8b3 	bl	800ec44 <_printf_i>
 8010ade:	e7eb      	b.n	8010ab8 <_svfiprintf_r+0x1c0>
 8010ae0:	0801278c 	.word	0x0801278c
 8010ae4:	08012796 	.word	0x08012796
 8010ae8:	0800e6fd 	.word	0x0800e6fd
 8010aec:	08010843 	.word	0x08010843
 8010af0:	08012792 	.word	0x08012792

08010af4 <__sflush_r>:
 8010af4:	898a      	ldrh	r2, [r1, #12]
 8010af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010afa:	4605      	mov	r5, r0
 8010afc:	0710      	lsls	r0, r2, #28
 8010afe:	460c      	mov	r4, r1
 8010b00:	d458      	bmi.n	8010bb4 <__sflush_r+0xc0>
 8010b02:	684b      	ldr	r3, [r1, #4]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	dc05      	bgt.n	8010b14 <__sflush_r+0x20>
 8010b08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	dc02      	bgt.n	8010b14 <__sflush_r+0x20>
 8010b0e:	2000      	movs	r0, #0
 8010b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b16:	2e00      	cmp	r6, #0
 8010b18:	d0f9      	beq.n	8010b0e <__sflush_r+0x1a>
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010b20:	682f      	ldr	r7, [r5, #0]
 8010b22:	6a21      	ldr	r1, [r4, #32]
 8010b24:	602b      	str	r3, [r5, #0]
 8010b26:	d032      	beq.n	8010b8e <__sflush_r+0x9a>
 8010b28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010b2a:	89a3      	ldrh	r3, [r4, #12]
 8010b2c:	075a      	lsls	r2, r3, #29
 8010b2e:	d505      	bpl.n	8010b3c <__sflush_r+0x48>
 8010b30:	6863      	ldr	r3, [r4, #4]
 8010b32:	1ac0      	subs	r0, r0, r3
 8010b34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b36:	b10b      	cbz	r3, 8010b3c <__sflush_r+0x48>
 8010b38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010b3a:	1ac0      	subs	r0, r0, r3
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	4602      	mov	r2, r0
 8010b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b42:	6a21      	ldr	r1, [r4, #32]
 8010b44:	4628      	mov	r0, r5
 8010b46:	47b0      	blx	r6
 8010b48:	1c43      	adds	r3, r0, #1
 8010b4a:	89a3      	ldrh	r3, [r4, #12]
 8010b4c:	d106      	bne.n	8010b5c <__sflush_r+0x68>
 8010b4e:	6829      	ldr	r1, [r5, #0]
 8010b50:	291d      	cmp	r1, #29
 8010b52:	d82b      	bhi.n	8010bac <__sflush_r+0xb8>
 8010b54:	4a29      	ldr	r2, [pc, #164]	; (8010bfc <__sflush_r+0x108>)
 8010b56:	410a      	asrs	r2, r1
 8010b58:	07d6      	lsls	r6, r2, #31
 8010b5a:	d427      	bmi.n	8010bac <__sflush_r+0xb8>
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	6062      	str	r2, [r4, #4]
 8010b60:	04d9      	lsls	r1, r3, #19
 8010b62:	6922      	ldr	r2, [r4, #16]
 8010b64:	6022      	str	r2, [r4, #0]
 8010b66:	d504      	bpl.n	8010b72 <__sflush_r+0x7e>
 8010b68:	1c42      	adds	r2, r0, #1
 8010b6a:	d101      	bne.n	8010b70 <__sflush_r+0x7c>
 8010b6c:	682b      	ldr	r3, [r5, #0]
 8010b6e:	b903      	cbnz	r3, 8010b72 <__sflush_r+0x7e>
 8010b70:	6560      	str	r0, [r4, #84]	; 0x54
 8010b72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b74:	602f      	str	r7, [r5, #0]
 8010b76:	2900      	cmp	r1, #0
 8010b78:	d0c9      	beq.n	8010b0e <__sflush_r+0x1a>
 8010b7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b7e:	4299      	cmp	r1, r3
 8010b80:	d002      	beq.n	8010b88 <__sflush_r+0x94>
 8010b82:	4628      	mov	r0, r5
 8010b84:	f7ff f9c2 	bl	800ff0c <_free_r>
 8010b88:	2000      	movs	r0, #0
 8010b8a:	6360      	str	r0, [r4, #52]	; 0x34
 8010b8c:	e7c0      	b.n	8010b10 <__sflush_r+0x1c>
 8010b8e:	2301      	movs	r3, #1
 8010b90:	4628      	mov	r0, r5
 8010b92:	47b0      	blx	r6
 8010b94:	1c41      	adds	r1, r0, #1
 8010b96:	d1c8      	bne.n	8010b2a <__sflush_r+0x36>
 8010b98:	682b      	ldr	r3, [r5, #0]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d0c5      	beq.n	8010b2a <__sflush_r+0x36>
 8010b9e:	2b1d      	cmp	r3, #29
 8010ba0:	d001      	beq.n	8010ba6 <__sflush_r+0xb2>
 8010ba2:	2b16      	cmp	r3, #22
 8010ba4:	d101      	bne.n	8010baa <__sflush_r+0xb6>
 8010ba6:	602f      	str	r7, [r5, #0]
 8010ba8:	e7b1      	b.n	8010b0e <__sflush_r+0x1a>
 8010baa:	89a3      	ldrh	r3, [r4, #12]
 8010bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bb0:	81a3      	strh	r3, [r4, #12]
 8010bb2:	e7ad      	b.n	8010b10 <__sflush_r+0x1c>
 8010bb4:	690f      	ldr	r7, [r1, #16]
 8010bb6:	2f00      	cmp	r7, #0
 8010bb8:	d0a9      	beq.n	8010b0e <__sflush_r+0x1a>
 8010bba:	0793      	lsls	r3, r2, #30
 8010bbc:	680e      	ldr	r6, [r1, #0]
 8010bbe:	bf08      	it	eq
 8010bc0:	694b      	ldreq	r3, [r1, #20]
 8010bc2:	600f      	str	r7, [r1, #0]
 8010bc4:	bf18      	it	ne
 8010bc6:	2300      	movne	r3, #0
 8010bc8:	eba6 0807 	sub.w	r8, r6, r7
 8010bcc:	608b      	str	r3, [r1, #8]
 8010bce:	f1b8 0f00 	cmp.w	r8, #0
 8010bd2:	dd9c      	ble.n	8010b0e <__sflush_r+0x1a>
 8010bd4:	6a21      	ldr	r1, [r4, #32]
 8010bd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010bd8:	4643      	mov	r3, r8
 8010bda:	463a      	mov	r2, r7
 8010bdc:	4628      	mov	r0, r5
 8010bde:	47b0      	blx	r6
 8010be0:	2800      	cmp	r0, #0
 8010be2:	dc06      	bgt.n	8010bf2 <__sflush_r+0xfe>
 8010be4:	89a3      	ldrh	r3, [r4, #12]
 8010be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bea:	81a3      	strh	r3, [r4, #12]
 8010bec:	f04f 30ff 	mov.w	r0, #4294967295
 8010bf0:	e78e      	b.n	8010b10 <__sflush_r+0x1c>
 8010bf2:	4407      	add	r7, r0
 8010bf4:	eba8 0800 	sub.w	r8, r8, r0
 8010bf8:	e7e9      	b.n	8010bce <__sflush_r+0xda>
 8010bfa:	bf00      	nop
 8010bfc:	dfbffffe 	.word	0xdfbffffe

08010c00 <_fflush_r>:
 8010c00:	b538      	push	{r3, r4, r5, lr}
 8010c02:	690b      	ldr	r3, [r1, #16]
 8010c04:	4605      	mov	r5, r0
 8010c06:	460c      	mov	r4, r1
 8010c08:	b913      	cbnz	r3, 8010c10 <_fflush_r+0x10>
 8010c0a:	2500      	movs	r5, #0
 8010c0c:	4628      	mov	r0, r5
 8010c0e:	bd38      	pop	{r3, r4, r5, pc}
 8010c10:	b118      	cbz	r0, 8010c1a <_fflush_r+0x1a>
 8010c12:	6a03      	ldr	r3, [r0, #32]
 8010c14:	b90b      	cbnz	r3, 8010c1a <_fflush_r+0x1a>
 8010c16:	f7fe f9c3 	bl	800efa0 <__sinit>
 8010c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d0f3      	beq.n	8010c0a <_fflush_r+0xa>
 8010c22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010c24:	07d0      	lsls	r0, r2, #31
 8010c26:	d404      	bmi.n	8010c32 <_fflush_r+0x32>
 8010c28:	0599      	lsls	r1, r3, #22
 8010c2a:	d402      	bmi.n	8010c32 <_fflush_r+0x32>
 8010c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c2e:	f7fe fae0 	bl	800f1f2 <__retarget_lock_acquire_recursive>
 8010c32:	4628      	mov	r0, r5
 8010c34:	4621      	mov	r1, r4
 8010c36:	f7ff ff5d 	bl	8010af4 <__sflush_r>
 8010c3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c3c:	07da      	lsls	r2, r3, #31
 8010c3e:	4605      	mov	r5, r0
 8010c40:	d4e4      	bmi.n	8010c0c <_fflush_r+0xc>
 8010c42:	89a3      	ldrh	r3, [r4, #12]
 8010c44:	059b      	lsls	r3, r3, #22
 8010c46:	d4e1      	bmi.n	8010c0c <_fflush_r+0xc>
 8010c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c4a:	f7fe fad3 	bl	800f1f4 <__retarget_lock_release_recursive>
 8010c4e:	e7dd      	b.n	8010c0c <_fflush_r+0xc>

08010c50 <memmove>:
 8010c50:	4288      	cmp	r0, r1
 8010c52:	b510      	push	{r4, lr}
 8010c54:	eb01 0402 	add.w	r4, r1, r2
 8010c58:	d902      	bls.n	8010c60 <memmove+0x10>
 8010c5a:	4284      	cmp	r4, r0
 8010c5c:	4623      	mov	r3, r4
 8010c5e:	d807      	bhi.n	8010c70 <memmove+0x20>
 8010c60:	1e43      	subs	r3, r0, #1
 8010c62:	42a1      	cmp	r1, r4
 8010c64:	d008      	beq.n	8010c78 <memmove+0x28>
 8010c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c6e:	e7f8      	b.n	8010c62 <memmove+0x12>
 8010c70:	4402      	add	r2, r0
 8010c72:	4601      	mov	r1, r0
 8010c74:	428a      	cmp	r2, r1
 8010c76:	d100      	bne.n	8010c7a <memmove+0x2a>
 8010c78:	bd10      	pop	{r4, pc}
 8010c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c82:	e7f7      	b.n	8010c74 <memmove+0x24>

08010c84 <_sbrk_r>:
 8010c84:	b538      	push	{r3, r4, r5, lr}
 8010c86:	4d06      	ldr	r5, [pc, #24]	; (8010ca0 <_sbrk_r+0x1c>)
 8010c88:	2300      	movs	r3, #0
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	4608      	mov	r0, r1
 8010c8e:	602b      	str	r3, [r5, #0]
 8010c90:	f001 fab0 	bl	80121f4 <_sbrk>
 8010c94:	1c43      	adds	r3, r0, #1
 8010c96:	d102      	bne.n	8010c9e <_sbrk_r+0x1a>
 8010c98:	682b      	ldr	r3, [r5, #0]
 8010c9a:	b103      	cbz	r3, 8010c9e <_sbrk_r+0x1a>
 8010c9c:	6023      	str	r3, [r4, #0]
 8010c9e:	bd38      	pop	{r3, r4, r5, pc}
 8010ca0:	2001a454 	.word	0x2001a454

08010ca4 <__assert_func>:
 8010ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010ca6:	4614      	mov	r4, r2
 8010ca8:	461a      	mov	r2, r3
 8010caa:	4b09      	ldr	r3, [pc, #36]	; (8010cd0 <__assert_func+0x2c>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	4605      	mov	r5, r0
 8010cb0:	68d8      	ldr	r0, [r3, #12]
 8010cb2:	b14c      	cbz	r4, 8010cc8 <__assert_func+0x24>
 8010cb4:	4b07      	ldr	r3, [pc, #28]	; (8010cd4 <__assert_func+0x30>)
 8010cb6:	9100      	str	r1, [sp, #0]
 8010cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010cbc:	4906      	ldr	r1, [pc, #24]	; (8010cd8 <__assert_func+0x34>)
 8010cbe:	462b      	mov	r3, r5
 8010cc0:	f000 f854 	bl	8010d6c <fiprintf>
 8010cc4:	f000 f864 	bl	8010d90 <abort>
 8010cc8:	4b04      	ldr	r3, [pc, #16]	; (8010cdc <__assert_func+0x38>)
 8010cca:	461c      	mov	r4, r3
 8010ccc:	e7f3      	b.n	8010cb6 <__assert_func+0x12>
 8010cce:	bf00      	nop
 8010cd0:	200001e0 	.word	0x200001e0
 8010cd4:	0801279d 	.word	0x0801279d
 8010cd8:	080127aa 	.word	0x080127aa
 8010cdc:	080127d8 	.word	0x080127d8

08010ce0 <_calloc_r>:
 8010ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ce2:	fba1 2402 	umull	r2, r4, r1, r2
 8010ce6:	b94c      	cbnz	r4, 8010cfc <_calloc_r+0x1c>
 8010ce8:	4611      	mov	r1, r2
 8010cea:	9201      	str	r2, [sp, #4]
 8010cec:	f7ff f982 	bl	800fff4 <_malloc_r>
 8010cf0:	9a01      	ldr	r2, [sp, #4]
 8010cf2:	4605      	mov	r5, r0
 8010cf4:	b930      	cbnz	r0, 8010d04 <_calloc_r+0x24>
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	b003      	add	sp, #12
 8010cfa:	bd30      	pop	{r4, r5, pc}
 8010cfc:	220c      	movs	r2, #12
 8010cfe:	6002      	str	r2, [r0, #0]
 8010d00:	2500      	movs	r5, #0
 8010d02:	e7f8      	b.n	8010cf6 <_calloc_r+0x16>
 8010d04:	4621      	mov	r1, r4
 8010d06:	f7fe fa08 	bl	800f11a <memset>
 8010d0a:	e7f4      	b.n	8010cf6 <_calloc_r+0x16>

08010d0c <_realloc_r>:
 8010d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d10:	4680      	mov	r8, r0
 8010d12:	4614      	mov	r4, r2
 8010d14:	460e      	mov	r6, r1
 8010d16:	b921      	cbnz	r1, 8010d22 <_realloc_r+0x16>
 8010d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d1c:	4611      	mov	r1, r2
 8010d1e:	f7ff b969 	b.w	800fff4 <_malloc_r>
 8010d22:	b92a      	cbnz	r2, 8010d30 <_realloc_r+0x24>
 8010d24:	f7ff f8f2 	bl	800ff0c <_free_r>
 8010d28:	4625      	mov	r5, r4
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d30:	f000 f835 	bl	8010d9e <_malloc_usable_size_r>
 8010d34:	4284      	cmp	r4, r0
 8010d36:	4607      	mov	r7, r0
 8010d38:	d802      	bhi.n	8010d40 <_realloc_r+0x34>
 8010d3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010d3e:	d812      	bhi.n	8010d66 <_realloc_r+0x5a>
 8010d40:	4621      	mov	r1, r4
 8010d42:	4640      	mov	r0, r8
 8010d44:	f7ff f956 	bl	800fff4 <_malloc_r>
 8010d48:	4605      	mov	r5, r0
 8010d4a:	2800      	cmp	r0, #0
 8010d4c:	d0ed      	beq.n	8010d2a <_realloc_r+0x1e>
 8010d4e:	42bc      	cmp	r4, r7
 8010d50:	4622      	mov	r2, r4
 8010d52:	4631      	mov	r1, r6
 8010d54:	bf28      	it	cs
 8010d56:	463a      	movcs	r2, r7
 8010d58:	f7fe fa4d 	bl	800f1f6 <memcpy>
 8010d5c:	4631      	mov	r1, r6
 8010d5e:	4640      	mov	r0, r8
 8010d60:	f7ff f8d4 	bl	800ff0c <_free_r>
 8010d64:	e7e1      	b.n	8010d2a <_realloc_r+0x1e>
 8010d66:	4635      	mov	r5, r6
 8010d68:	e7df      	b.n	8010d2a <_realloc_r+0x1e>
	...

08010d6c <fiprintf>:
 8010d6c:	b40e      	push	{r1, r2, r3}
 8010d6e:	b503      	push	{r0, r1, lr}
 8010d70:	4601      	mov	r1, r0
 8010d72:	ab03      	add	r3, sp, #12
 8010d74:	4805      	ldr	r0, [pc, #20]	; (8010d8c <fiprintf+0x20>)
 8010d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d7a:	6800      	ldr	r0, [r0, #0]
 8010d7c:	9301      	str	r3, [sp, #4]
 8010d7e:	f000 f83f 	bl	8010e00 <_vfiprintf_r>
 8010d82:	b002      	add	sp, #8
 8010d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d88:	b003      	add	sp, #12
 8010d8a:	4770      	bx	lr
 8010d8c:	200001e0 	.word	0x200001e0

08010d90 <abort>:
 8010d90:	b508      	push	{r3, lr}
 8010d92:	2006      	movs	r0, #6
 8010d94:	f000 fa0c 	bl	80111b0 <raise>
 8010d98:	2001      	movs	r0, #1
 8010d9a:	f7f3 fd13 	bl	80047c4 <_exit>

08010d9e <_malloc_usable_size_r>:
 8010d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010da2:	1f18      	subs	r0, r3, #4
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	bfbc      	itt	lt
 8010da8:	580b      	ldrlt	r3, [r1, r0]
 8010daa:	18c0      	addlt	r0, r0, r3
 8010dac:	4770      	bx	lr

08010dae <__sfputc_r>:
 8010dae:	6893      	ldr	r3, [r2, #8]
 8010db0:	3b01      	subs	r3, #1
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	b410      	push	{r4}
 8010db6:	6093      	str	r3, [r2, #8]
 8010db8:	da08      	bge.n	8010dcc <__sfputc_r+0x1e>
 8010dba:	6994      	ldr	r4, [r2, #24]
 8010dbc:	42a3      	cmp	r3, r4
 8010dbe:	db01      	blt.n	8010dc4 <__sfputc_r+0x16>
 8010dc0:	290a      	cmp	r1, #10
 8010dc2:	d103      	bne.n	8010dcc <__sfputc_r+0x1e>
 8010dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dc8:	f000 b934 	b.w	8011034 <__swbuf_r>
 8010dcc:	6813      	ldr	r3, [r2, #0]
 8010dce:	1c58      	adds	r0, r3, #1
 8010dd0:	6010      	str	r0, [r2, #0]
 8010dd2:	7019      	strb	r1, [r3, #0]
 8010dd4:	4608      	mov	r0, r1
 8010dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dda:	4770      	bx	lr

08010ddc <__sfputs_r>:
 8010ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dde:	4606      	mov	r6, r0
 8010de0:	460f      	mov	r7, r1
 8010de2:	4614      	mov	r4, r2
 8010de4:	18d5      	adds	r5, r2, r3
 8010de6:	42ac      	cmp	r4, r5
 8010de8:	d101      	bne.n	8010dee <__sfputs_r+0x12>
 8010dea:	2000      	movs	r0, #0
 8010dec:	e007      	b.n	8010dfe <__sfputs_r+0x22>
 8010dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010df2:	463a      	mov	r2, r7
 8010df4:	4630      	mov	r0, r6
 8010df6:	f7ff ffda 	bl	8010dae <__sfputc_r>
 8010dfa:	1c43      	adds	r3, r0, #1
 8010dfc:	d1f3      	bne.n	8010de6 <__sfputs_r+0xa>
 8010dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010e00 <_vfiprintf_r>:
 8010e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e04:	460d      	mov	r5, r1
 8010e06:	b09d      	sub	sp, #116	; 0x74
 8010e08:	4614      	mov	r4, r2
 8010e0a:	4698      	mov	r8, r3
 8010e0c:	4606      	mov	r6, r0
 8010e0e:	b118      	cbz	r0, 8010e18 <_vfiprintf_r+0x18>
 8010e10:	6a03      	ldr	r3, [r0, #32]
 8010e12:	b90b      	cbnz	r3, 8010e18 <_vfiprintf_r+0x18>
 8010e14:	f7fe f8c4 	bl	800efa0 <__sinit>
 8010e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e1a:	07d9      	lsls	r1, r3, #31
 8010e1c:	d405      	bmi.n	8010e2a <_vfiprintf_r+0x2a>
 8010e1e:	89ab      	ldrh	r3, [r5, #12]
 8010e20:	059a      	lsls	r2, r3, #22
 8010e22:	d402      	bmi.n	8010e2a <_vfiprintf_r+0x2a>
 8010e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e26:	f7fe f9e4 	bl	800f1f2 <__retarget_lock_acquire_recursive>
 8010e2a:	89ab      	ldrh	r3, [r5, #12]
 8010e2c:	071b      	lsls	r3, r3, #28
 8010e2e:	d501      	bpl.n	8010e34 <_vfiprintf_r+0x34>
 8010e30:	692b      	ldr	r3, [r5, #16]
 8010e32:	b99b      	cbnz	r3, 8010e5c <_vfiprintf_r+0x5c>
 8010e34:	4629      	mov	r1, r5
 8010e36:	4630      	mov	r0, r6
 8010e38:	f000 f93a 	bl	80110b0 <__swsetup_r>
 8010e3c:	b170      	cbz	r0, 8010e5c <_vfiprintf_r+0x5c>
 8010e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e40:	07dc      	lsls	r4, r3, #31
 8010e42:	d504      	bpl.n	8010e4e <_vfiprintf_r+0x4e>
 8010e44:	f04f 30ff 	mov.w	r0, #4294967295
 8010e48:	b01d      	add	sp, #116	; 0x74
 8010e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e4e:	89ab      	ldrh	r3, [r5, #12]
 8010e50:	0598      	lsls	r0, r3, #22
 8010e52:	d4f7      	bmi.n	8010e44 <_vfiprintf_r+0x44>
 8010e54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e56:	f7fe f9cd 	bl	800f1f4 <__retarget_lock_release_recursive>
 8010e5a:	e7f3      	b.n	8010e44 <_vfiprintf_r+0x44>
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8010e60:	2320      	movs	r3, #32
 8010e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e66:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e6a:	2330      	movs	r3, #48	; 0x30
 8010e6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011020 <_vfiprintf_r+0x220>
 8010e70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e74:	f04f 0901 	mov.w	r9, #1
 8010e78:	4623      	mov	r3, r4
 8010e7a:	469a      	mov	sl, r3
 8010e7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e80:	b10a      	cbz	r2, 8010e86 <_vfiprintf_r+0x86>
 8010e82:	2a25      	cmp	r2, #37	; 0x25
 8010e84:	d1f9      	bne.n	8010e7a <_vfiprintf_r+0x7a>
 8010e86:	ebba 0b04 	subs.w	fp, sl, r4
 8010e8a:	d00b      	beq.n	8010ea4 <_vfiprintf_r+0xa4>
 8010e8c:	465b      	mov	r3, fp
 8010e8e:	4622      	mov	r2, r4
 8010e90:	4629      	mov	r1, r5
 8010e92:	4630      	mov	r0, r6
 8010e94:	f7ff ffa2 	bl	8010ddc <__sfputs_r>
 8010e98:	3001      	adds	r0, #1
 8010e9a:	f000 80a9 	beq.w	8010ff0 <_vfiprintf_r+0x1f0>
 8010e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ea0:	445a      	add	r2, fp
 8010ea2:	9209      	str	r2, [sp, #36]	; 0x24
 8010ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	f000 80a1 	beq.w	8010ff0 <_vfiprintf_r+0x1f0>
 8010eae:	2300      	movs	r3, #0
 8010eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8010eb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010eb8:	f10a 0a01 	add.w	sl, sl, #1
 8010ebc:	9304      	str	r3, [sp, #16]
 8010ebe:	9307      	str	r3, [sp, #28]
 8010ec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ec4:	931a      	str	r3, [sp, #104]	; 0x68
 8010ec6:	4654      	mov	r4, sl
 8010ec8:	2205      	movs	r2, #5
 8010eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ece:	4854      	ldr	r0, [pc, #336]	; (8011020 <_vfiprintf_r+0x220>)
 8010ed0:	f7ef f9ee 	bl	80002b0 <memchr>
 8010ed4:	9a04      	ldr	r2, [sp, #16]
 8010ed6:	b9d8      	cbnz	r0, 8010f10 <_vfiprintf_r+0x110>
 8010ed8:	06d1      	lsls	r1, r2, #27
 8010eda:	bf44      	itt	mi
 8010edc:	2320      	movmi	r3, #32
 8010ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ee2:	0713      	lsls	r3, r2, #28
 8010ee4:	bf44      	itt	mi
 8010ee6:	232b      	movmi	r3, #43	; 0x2b
 8010ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010eec:	f89a 3000 	ldrb.w	r3, [sl]
 8010ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8010ef2:	d015      	beq.n	8010f20 <_vfiprintf_r+0x120>
 8010ef4:	9a07      	ldr	r2, [sp, #28]
 8010ef6:	4654      	mov	r4, sl
 8010ef8:	2000      	movs	r0, #0
 8010efa:	f04f 0c0a 	mov.w	ip, #10
 8010efe:	4621      	mov	r1, r4
 8010f00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f04:	3b30      	subs	r3, #48	; 0x30
 8010f06:	2b09      	cmp	r3, #9
 8010f08:	d94d      	bls.n	8010fa6 <_vfiprintf_r+0x1a6>
 8010f0a:	b1b0      	cbz	r0, 8010f3a <_vfiprintf_r+0x13a>
 8010f0c:	9207      	str	r2, [sp, #28]
 8010f0e:	e014      	b.n	8010f3a <_vfiprintf_r+0x13a>
 8010f10:	eba0 0308 	sub.w	r3, r0, r8
 8010f14:	fa09 f303 	lsl.w	r3, r9, r3
 8010f18:	4313      	orrs	r3, r2
 8010f1a:	9304      	str	r3, [sp, #16]
 8010f1c:	46a2      	mov	sl, r4
 8010f1e:	e7d2      	b.n	8010ec6 <_vfiprintf_r+0xc6>
 8010f20:	9b03      	ldr	r3, [sp, #12]
 8010f22:	1d19      	adds	r1, r3, #4
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	9103      	str	r1, [sp, #12]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	bfbb      	ittet	lt
 8010f2c:	425b      	neglt	r3, r3
 8010f2e:	f042 0202 	orrlt.w	r2, r2, #2
 8010f32:	9307      	strge	r3, [sp, #28]
 8010f34:	9307      	strlt	r3, [sp, #28]
 8010f36:	bfb8      	it	lt
 8010f38:	9204      	strlt	r2, [sp, #16]
 8010f3a:	7823      	ldrb	r3, [r4, #0]
 8010f3c:	2b2e      	cmp	r3, #46	; 0x2e
 8010f3e:	d10c      	bne.n	8010f5a <_vfiprintf_r+0x15a>
 8010f40:	7863      	ldrb	r3, [r4, #1]
 8010f42:	2b2a      	cmp	r3, #42	; 0x2a
 8010f44:	d134      	bne.n	8010fb0 <_vfiprintf_r+0x1b0>
 8010f46:	9b03      	ldr	r3, [sp, #12]
 8010f48:	1d1a      	adds	r2, r3, #4
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	9203      	str	r2, [sp, #12]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	bfb8      	it	lt
 8010f52:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f56:	3402      	adds	r4, #2
 8010f58:	9305      	str	r3, [sp, #20]
 8010f5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011030 <_vfiprintf_r+0x230>
 8010f5e:	7821      	ldrb	r1, [r4, #0]
 8010f60:	2203      	movs	r2, #3
 8010f62:	4650      	mov	r0, sl
 8010f64:	f7ef f9a4 	bl	80002b0 <memchr>
 8010f68:	b138      	cbz	r0, 8010f7a <_vfiprintf_r+0x17a>
 8010f6a:	9b04      	ldr	r3, [sp, #16]
 8010f6c:	eba0 000a 	sub.w	r0, r0, sl
 8010f70:	2240      	movs	r2, #64	; 0x40
 8010f72:	4082      	lsls	r2, r0
 8010f74:	4313      	orrs	r3, r2
 8010f76:	3401      	adds	r4, #1
 8010f78:	9304      	str	r3, [sp, #16]
 8010f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f7e:	4829      	ldr	r0, [pc, #164]	; (8011024 <_vfiprintf_r+0x224>)
 8010f80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f84:	2206      	movs	r2, #6
 8010f86:	f7ef f993 	bl	80002b0 <memchr>
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	d03f      	beq.n	801100e <_vfiprintf_r+0x20e>
 8010f8e:	4b26      	ldr	r3, [pc, #152]	; (8011028 <_vfiprintf_r+0x228>)
 8010f90:	bb1b      	cbnz	r3, 8010fda <_vfiprintf_r+0x1da>
 8010f92:	9b03      	ldr	r3, [sp, #12]
 8010f94:	3307      	adds	r3, #7
 8010f96:	f023 0307 	bic.w	r3, r3, #7
 8010f9a:	3308      	adds	r3, #8
 8010f9c:	9303      	str	r3, [sp, #12]
 8010f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fa0:	443b      	add	r3, r7
 8010fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8010fa4:	e768      	b.n	8010e78 <_vfiprintf_r+0x78>
 8010fa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010faa:	460c      	mov	r4, r1
 8010fac:	2001      	movs	r0, #1
 8010fae:	e7a6      	b.n	8010efe <_vfiprintf_r+0xfe>
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	3401      	adds	r4, #1
 8010fb4:	9305      	str	r3, [sp, #20]
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	f04f 0c0a 	mov.w	ip, #10
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fc2:	3a30      	subs	r2, #48	; 0x30
 8010fc4:	2a09      	cmp	r2, #9
 8010fc6:	d903      	bls.n	8010fd0 <_vfiprintf_r+0x1d0>
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d0c6      	beq.n	8010f5a <_vfiprintf_r+0x15a>
 8010fcc:	9105      	str	r1, [sp, #20]
 8010fce:	e7c4      	b.n	8010f5a <_vfiprintf_r+0x15a>
 8010fd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fd4:	4604      	mov	r4, r0
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	e7f0      	b.n	8010fbc <_vfiprintf_r+0x1bc>
 8010fda:	ab03      	add	r3, sp, #12
 8010fdc:	9300      	str	r3, [sp, #0]
 8010fde:	462a      	mov	r2, r5
 8010fe0:	4b12      	ldr	r3, [pc, #72]	; (801102c <_vfiprintf_r+0x22c>)
 8010fe2:	a904      	add	r1, sp, #16
 8010fe4:	4630      	mov	r0, r6
 8010fe6:	f7fd fb89 	bl	800e6fc <_printf_float>
 8010fea:	4607      	mov	r7, r0
 8010fec:	1c78      	adds	r0, r7, #1
 8010fee:	d1d6      	bne.n	8010f9e <_vfiprintf_r+0x19e>
 8010ff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ff2:	07d9      	lsls	r1, r3, #31
 8010ff4:	d405      	bmi.n	8011002 <_vfiprintf_r+0x202>
 8010ff6:	89ab      	ldrh	r3, [r5, #12]
 8010ff8:	059a      	lsls	r2, r3, #22
 8010ffa:	d402      	bmi.n	8011002 <_vfiprintf_r+0x202>
 8010ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ffe:	f7fe f8f9 	bl	800f1f4 <__retarget_lock_release_recursive>
 8011002:	89ab      	ldrh	r3, [r5, #12]
 8011004:	065b      	lsls	r3, r3, #25
 8011006:	f53f af1d 	bmi.w	8010e44 <_vfiprintf_r+0x44>
 801100a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801100c:	e71c      	b.n	8010e48 <_vfiprintf_r+0x48>
 801100e:	ab03      	add	r3, sp, #12
 8011010:	9300      	str	r3, [sp, #0]
 8011012:	462a      	mov	r2, r5
 8011014:	4b05      	ldr	r3, [pc, #20]	; (801102c <_vfiprintf_r+0x22c>)
 8011016:	a904      	add	r1, sp, #16
 8011018:	4630      	mov	r0, r6
 801101a:	f7fd fe13 	bl	800ec44 <_printf_i>
 801101e:	e7e4      	b.n	8010fea <_vfiprintf_r+0x1ea>
 8011020:	0801278c 	.word	0x0801278c
 8011024:	08012796 	.word	0x08012796
 8011028:	0800e6fd 	.word	0x0800e6fd
 801102c:	08010ddd 	.word	0x08010ddd
 8011030:	08012792 	.word	0x08012792

08011034 <__swbuf_r>:
 8011034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011036:	460e      	mov	r6, r1
 8011038:	4614      	mov	r4, r2
 801103a:	4605      	mov	r5, r0
 801103c:	b118      	cbz	r0, 8011046 <__swbuf_r+0x12>
 801103e:	6a03      	ldr	r3, [r0, #32]
 8011040:	b90b      	cbnz	r3, 8011046 <__swbuf_r+0x12>
 8011042:	f7fd ffad 	bl	800efa0 <__sinit>
 8011046:	69a3      	ldr	r3, [r4, #24]
 8011048:	60a3      	str	r3, [r4, #8]
 801104a:	89a3      	ldrh	r3, [r4, #12]
 801104c:	071a      	lsls	r2, r3, #28
 801104e:	d525      	bpl.n	801109c <__swbuf_r+0x68>
 8011050:	6923      	ldr	r3, [r4, #16]
 8011052:	b31b      	cbz	r3, 801109c <__swbuf_r+0x68>
 8011054:	6823      	ldr	r3, [r4, #0]
 8011056:	6922      	ldr	r2, [r4, #16]
 8011058:	1a98      	subs	r0, r3, r2
 801105a:	6963      	ldr	r3, [r4, #20]
 801105c:	b2f6      	uxtb	r6, r6
 801105e:	4283      	cmp	r3, r0
 8011060:	4637      	mov	r7, r6
 8011062:	dc04      	bgt.n	801106e <__swbuf_r+0x3a>
 8011064:	4621      	mov	r1, r4
 8011066:	4628      	mov	r0, r5
 8011068:	f7ff fdca 	bl	8010c00 <_fflush_r>
 801106c:	b9e0      	cbnz	r0, 80110a8 <__swbuf_r+0x74>
 801106e:	68a3      	ldr	r3, [r4, #8]
 8011070:	3b01      	subs	r3, #1
 8011072:	60a3      	str	r3, [r4, #8]
 8011074:	6823      	ldr	r3, [r4, #0]
 8011076:	1c5a      	adds	r2, r3, #1
 8011078:	6022      	str	r2, [r4, #0]
 801107a:	701e      	strb	r6, [r3, #0]
 801107c:	6962      	ldr	r2, [r4, #20]
 801107e:	1c43      	adds	r3, r0, #1
 8011080:	429a      	cmp	r2, r3
 8011082:	d004      	beq.n	801108e <__swbuf_r+0x5a>
 8011084:	89a3      	ldrh	r3, [r4, #12]
 8011086:	07db      	lsls	r3, r3, #31
 8011088:	d506      	bpl.n	8011098 <__swbuf_r+0x64>
 801108a:	2e0a      	cmp	r6, #10
 801108c:	d104      	bne.n	8011098 <__swbuf_r+0x64>
 801108e:	4621      	mov	r1, r4
 8011090:	4628      	mov	r0, r5
 8011092:	f7ff fdb5 	bl	8010c00 <_fflush_r>
 8011096:	b938      	cbnz	r0, 80110a8 <__swbuf_r+0x74>
 8011098:	4638      	mov	r0, r7
 801109a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801109c:	4621      	mov	r1, r4
 801109e:	4628      	mov	r0, r5
 80110a0:	f000 f806 	bl	80110b0 <__swsetup_r>
 80110a4:	2800      	cmp	r0, #0
 80110a6:	d0d5      	beq.n	8011054 <__swbuf_r+0x20>
 80110a8:	f04f 37ff 	mov.w	r7, #4294967295
 80110ac:	e7f4      	b.n	8011098 <__swbuf_r+0x64>
	...

080110b0 <__swsetup_r>:
 80110b0:	b538      	push	{r3, r4, r5, lr}
 80110b2:	4b2a      	ldr	r3, [pc, #168]	; (801115c <__swsetup_r+0xac>)
 80110b4:	4605      	mov	r5, r0
 80110b6:	6818      	ldr	r0, [r3, #0]
 80110b8:	460c      	mov	r4, r1
 80110ba:	b118      	cbz	r0, 80110c4 <__swsetup_r+0x14>
 80110bc:	6a03      	ldr	r3, [r0, #32]
 80110be:	b90b      	cbnz	r3, 80110c4 <__swsetup_r+0x14>
 80110c0:	f7fd ff6e 	bl	800efa0 <__sinit>
 80110c4:	89a3      	ldrh	r3, [r4, #12]
 80110c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110ca:	0718      	lsls	r0, r3, #28
 80110cc:	d422      	bmi.n	8011114 <__swsetup_r+0x64>
 80110ce:	06d9      	lsls	r1, r3, #27
 80110d0:	d407      	bmi.n	80110e2 <__swsetup_r+0x32>
 80110d2:	2309      	movs	r3, #9
 80110d4:	602b      	str	r3, [r5, #0]
 80110d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80110da:	81a3      	strh	r3, [r4, #12]
 80110dc:	f04f 30ff 	mov.w	r0, #4294967295
 80110e0:	e034      	b.n	801114c <__swsetup_r+0x9c>
 80110e2:	0758      	lsls	r0, r3, #29
 80110e4:	d512      	bpl.n	801110c <__swsetup_r+0x5c>
 80110e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110e8:	b141      	cbz	r1, 80110fc <__swsetup_r+0x4c>
 80110ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110ee:	4299      	cmp	r1, r3
 80110f0:	d002      	beq.n	80110f8 <__swsetup_r+0x48>
 80110f2:	4628      	mov	r0, r5
 80110f4:	f7fe ff0a 	bl	800ff0c <_free_r>
 80110f8:	2300      	movs	r3, #0
 80110fa:	6363      	str	r3, [r4, #52]	; 0x34
 80110fc:	89a3      	ldrh	r3, [r4, #12]
 80110fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011102:	81a3      	strh	r3, [r4, #12]
 8011104:	2300      	movs	r3, #0
 8011106:	6063      	str	r3, [r4, #4]
 8011108:	6923      	ldr	r3, [r4, #16]
 801110a:	6023      	str	r3, [r4, #0]
 801110c:	89a3      	ldrh	r3, [r4, #12]
 801110e:	f043 0308 	orr.w	r3, r3, #8
 8011112:	81a3      	strh	r3, [r4, #12]
 8011114:	6923      	ldr	r3, [r4, #16]
 8011116:	b94b      	cbnz	r3, 801112c <__swsetup_r+0x7c>
 8011118:	89a3      	ldrh	r3, [r4, #12]
 801111a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801111e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011122:	d003      	beq.n	801112c <__swsetup_r+0x7c>
 8011124:	4621      	mov	r1, r4
 8011126:	4628      	mov	r0, r5
 8011128:	f000 f884 	bl	8011234 <__smakebuf_r>
 801112c:	89a0      	ldrh	r0, [r4, #12]
 801112e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011132:	f010 0301 	ands.w	r3, r0, #1
 8011136:	d00a      	beq.n	801114e <__swsetup_r+0x9e>
 8011138:	2300      	movs	r3, #0
 801113a:	60a3      	str	r3, [r4, #8]
 801113c:	6963      	ldr	r3, [r4, #20]
 801113e:	425b      	negs	r3, r3
 8011140:	61a3      	str	r3, [r4, #24]
 8011142:	6923      	ldr	r3, [r4, #16]
 8011144:	b943      	cbnz	r3, 8011158 <__swsetup_r+0xa8>
 8011146:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801114a:	d1c4      	bne.n	80110d6 <__swsetup_r+0x26>
 801114c:	bd38      	pop	{r3, r4, r5, pc}
 801114e:	0781      	lsls	r1, r0, #30
 8011150:	bf58      	it	pl
 8011152:	6963      	ldrpl	r3, [r4, #20]
 8011154:	60a3      	str	r3, [r4, #8]
 8011156:	e7f4      	b.n	8011142 <__swsetup_r+0x92>
 8011158:	2000      	movs	r0, #0
 801115a:	e7f7      	b.n	801114c <__swsetup_r+0x9c>
 801115c:	200001e0 	.word	0x200001e0

08011160 <_raise_r>:
 8011160:	291f      	cmp	r1, #31
 8011162:	b538      	push	{r3, r4, r5, lr}
 8011164:	4604      	mov	r4, r0
 8011166:	460d      	mov	r5, r1
 8011168:	d904      	bls.n	8011174 <_raise_r+0x14>
 801116a:	2316      	movs	r3, #22
 801116c:	6003      	str	r3, [r0, #0]
 801116e:	f04f 30ff 	mov.w	r0, #4294967295
 8011172:	bd38      	pop	{r3, r4, r5, pc}
 8011174:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011176:	b112      	cbz	r2, 801117e <_raise_r+0x1e>
 8011178:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801117c:	b94b      	cbnz	r3, 8011192 <_raise_r+0x32>
 801117e:	4620      	mov	r0, r4
 8011180:	f000 f830 	bl	80111e4 <_getpid_r>
 8011184:	462a      	mov	r2, r5
 8011186:	4601      	mov	r1, r0
 8011188:	4620      	mov	r0, r4
 801118a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801118e:	f000 b817 	b.w	80111c0 <_kill_r>
 8011192:	2b01      	cmp	r3, #1
 8011194:	d00a      	beq.n	80111ac <_raise_r+0x4c>
 8011196:	1c59      	adds	r1, r3, #1
 8011198:	d103      	bne.n	80111a2 <_raise_r+0x42>
 801119a:	2316      	movs	r3, #22
 801119c:	6003      	str	r3, [r0, #0]
 801119e:	2001      	movs	r0, #1
 80111a0:	e7e7      	b.n	8011172 <_raise_r+0x12>
 80111a2:	2400      	movs	r4, #0
 80111a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80111a8:	4628      	mov	r0, r5
 80111aa:	4798      	blx	r3
 80111ac:	2000      	movs	r0, #0
 80111ae:	e7e0      	b.n	8011172 <_raise_r+0x12>

080111b0 <raise>:
 80111b0:	4b02      	ldr	r3, [pc, #8]	; (80111bc <raise+0xc>)
 80111b2:	4601      	mov	r1, r0
 80111b4:	6818      	ldr	r0, [r3, #0]
 80111b6:	f7ff bfd3 	b.w	8011160 <_raise_r>
 80111ba:	bf00      	nop
 80111bc:	200001e0 	.word	0x200001e0

080111c0 <_kill_r>:
 80111c0:	b538      	push	{r3, r4, r5, lr}
 80111c2:	4d07      	ldr	r5, [pc, #28]	; (80111e0 <_kill_r+0x20>)
 80111c4:	2300      	movs	r3, #0
 80111c6:	4604      	mov	r4, r0
 80111c8:	4608      	mov	r0, r1
 80111ca:	4611      	mov	r1, r2
 80111cc:	602b      	str	r3, [r5, #0]
 80111ce:	f7f3 fae9 	bl	80047a4 <_kill>
 80111d2:	1c43      	adds	r3, r0, #1
 80111d4:	d102      	bne.n	80111dc <_kill_r+0x1c>
 80111d6:	682b      	ldr	r3, [r5, #0]
 80111d8:	b103      	cbz	r3, 80111dc <_kill_r+0x1c>
 80111da:	6023      	str	r3, [r4, #0]
 80111dc:	bd38      	pop	{r3, r4, r5, pc}
 80111de:	bf00      	nop
 80111e0:	2001a454 	.word	0x2001a454

080111e4 <_getpid_r>:
 80111e4:	f7f3 bad6 	b.w	8004794 <_getpid>

080111e8 <__swhatbuf_r>:
 80111e8:	b570      	push	{r4, r5, r6, lr}
 80111ea:	460c      	mov	r4, r1
 80111ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111f0:	2900      	cmp	r1, #0
 80111f2:	b096      	sub	sp, #88	; 0x58
 80111f4:	4615      	mov	r5, r2
 80111f6:	461e      	mov	r6, r3
 80111f8:	da0d      	bge.n	8011216 <__swhatbuf_r+0x2e>
 80111fa:	89a3      	ldrh	r3, [r4, #12]
 80111fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011200:	f04f 0100 	mov.w	r1, #0
 8011204:	bf0c      	ite	eq
 8011206:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801120a:	2340      	movne	r3, #64	; 0x40
 801120c:	2000      	movs	r0, #0
 801120e:	6031      	str	r1, [r6, #0]
 8011210:	602b      	str	r3, [r5, #0]
 8011212:	b016      	add	sp, #88	; 0x58
 8011214:	bd70      	pop	{r4, r5, r6, pc}
 8011216:	466a      	mov	r2, sp
 8011218:	f000 f848 	bl	80112ac <_fstat_r>
 801121c:	2800      	cmp	r0, #0
 801121e:	dbec      	blt.n	80111fa <__swhatbuf_r+0x12>
 8011220:	9901      	ldr	r1, [sp, #4]
 8011222:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011226:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801122a:	4259      	negs	r1, r3
 801122c:	4159      	adcs	r1, r3
 801122e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011232:	e7eb      	b.n	801120c <__swhatbuf_r+0x24>

08011234 <__smakebuf_r>:
 8011234:	898b      	ldrh	r3, [r1, #12]
 8011236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011238:	079d      	lsls	r5, r3, #30
 801123a:	4606      	mov	r6, r0
 801123c:	460c      	mov	r4, r1
 801123e:	d507      	bpl.n	8011250 <__smakebuf_r+0x1c>
 8011240:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011244:	6023      	str	r3, [r4, #0]
 8011246:	6123      	str	r3, [r4, #16]
 8011248:	2301      	movs	r3, #1
 801124a:	6163      	str	r3, [r4, #20]
 801124c:	b002      	add	sp, #8
 801124e:	bd70      	pop	{r4, r5, r6, pc}
 8011250:	ab01      	add	r3, sp, #4
 8011252:	466a      	mov	r2, sp
 8011254:	f7ff ffc8 	bl	80111e8 <__swhatbuf_r>
 8011258:	9900      	ldr	r1, [sp, #0]
 801125a:	4605      	mov	r5, r0
 801125c:	4630      	mov	r0, r6
 801125e:	f7fe fec9 	bl	800fff4 <_malloc_r>
 8011262:	b948      	cbnz	r0, 8011278 <__smakebuf_r+0x44>
 8011264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011268:	059a      	lsls	r2, r3, #22
 801126a:	d4ef      	bmi.n	801124c <__smakebuf_r+0x18>
 801126c:	f023 0303 	bic.w	r3, r3, #3
 8011270:	f043 0302 	orr.w	r3, r3, #2
 8011274:	81a3      	strh	r3, [r4, #12]
 8011276:	e7e3      	b.n	8011240 <__smakebuf_r+0xc>
 8011278:	89a3      	ldrh	r3, [r4, #12]
 801127a:	6020      	str	r0, [r4, #0]
 801127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011280:	81a3      	strh	r3, [r4, #12]
 8011282:	9b00      	ldr	r3, [sp, #0]
 8011284:	6163      	str	r3, [r4, #20]
 8011286:	9b01      	ldr	r3, [sp, #4]
 8011288:	6120      	str	r0, [r4, #16]
 801128a:	b15b      	cbz	r3, 80112a4 <__smakebuf_r+0x70>
 801128c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011290:	4630      	mov	r0, r6
 8011292:	f000 f81d 	bl	80112d0 <_isatty_r>
 8011296:	b128      	cbz	r0, 80112a4 <__smakebuf_r+0x70>
 8011298:	89a3      	ldrh	r3, [r4, #12]
 801129a:	f023 0303 	bic.w	r3, r3, #3
 801129e:	f043 0301 	orr.w	r3, r3, #1
 80112a2:	81a3      	strh	r3, [r4, #12]
 80112a4:	89a3      	ldrh	r3, [r4, #12]
 80112a6:	431d      	orrs	r5, r3
 80112a8:	81a5      	strh	r5, [r4, #12]
 80112aa:	e7cf      	b.n	801124c <__smakebuf_r+0x18>

080112ac <_fstat_r>:
 80112ac:	b538      	push	{r3, r4, r5, lr}
 80112ae:	4d07      	ldr	r5, [pc, #28]	; (80112cc <_fstat_r+0x20>)
 80112b0:	2300      	movs	r3, #0
 80112b2:	4604      	mov	r4, r0
 80112b4:	4608      	mov	r0, r1
 80112b6:	4611      	mov	r1, r2
 80112b8:	602b      	str	r3, [r5, #0]
 80112ba:	f7f3 fab6 	bl	800482a <_fstat>
 80112be:	1c43      	adds	r3, r0, #1
 80112c0:	d102      	bne.n	80112c8 <_fstat_r+0x1c>
 80112c2:	682b      	ldr	r3, [r5, #0]
 80112c4:	b103      	cbz	r3, 80112c8 <_fstat_r+0x1c>
 80112c6:	6023      	str	r3, [r4, #0]
 80112c8:	bd38      	pop	{r3, r4, r5, pc}
 80112ca:	bf00      	nop
 80112cc:	2001a454 	.word	0x2001a454

080112d0 <_isatty_r>:
 80112d0:	b538      	push	{r3, r4, r5, lr}
 80112d2:	4d06      	ldr	r5, [pc, #24]	; (80112ec <_isatty_r+0x1c>)
 80112d4:	2300      	movs	r3, #0
 80112d6:	4604      	mov	r4, r0
 80112d8:	4608      	mov	r0, r1
 80112da:	602b      	str	r3, [r5, #0]
 80112dc:	f7f3 fab5 	bl	800484a <_isatty>
 80112e0:	1c43      	adds	r3, r0, #1
 80112e2:	d102      	bne.n	80112ea <_isatty_r+0x1a>
 80112e4:	682b      	ldr	r3, [r5, #0]
 80112e6:	b103      	cbz	r3, 80112ea <_isatty_r+0x1a>
 80112e8:	6023      	str	r3, [r4, #0]
 80112ea:	bd38      	pop	{r3, r4, r5, pc}
 80112ec:	2001a454 	.word	0x2001a454

080112f0 <pow>:
 80112f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f2:	ed2d 8b02 	vpush	{d8}
 80112f6:	eeb0 8a40 	vmov.f32	s16, s0
 80112fa:	eef0 8a60 	vmov.f32	s17, s1
 80112fe:	ec55 4b11 	vmov	r4, r5, d1
 8011302:	f000 f995 	bl	8011630 <__ieee754_pow>
 8011306:	4622      	mov	r2, r4
 8011308:	462b      	mov	r3, r5
 801130a:	4620      	mov	r0, r4
 801130c:	4629      	mov	r1, r5
 801130e:	ec57 6b10 	vmov	r6, r7, d0
 8011312:	f7ef fc7b 	bl	8000c0c <__aeabi_dcmpun>
 8011316:	2800      	cmp	r0, #0
 8011318:	d13b      	bne.n	8011392 <pow+0xa2>
 801131a:	ec51 0b18 	vmov	r0, r1, d8
 801131e:	2200      	movs	r2, #0
 8011320:	2300      	movs	r3, #0
 8011322:	f7ef fc41 	bl	8000ba8 <__aeabi_dcmpeq>
 8011326:	b1b8      	cbz	r0, 8011358 <pow+0x68>
 8011328:	2200      	movs	r2, #0
 801132a:	2300      	movs	r3, #0
 801132c:	4620      	mov	r0, r4
 801132e:	4629      	mov	r1, r5
 8011330:	f7ef fc3a 	bl	8000ba8 <__aeabi_dcmpeq>
 8011334:	2800      	cmp	r0, #0
 8011336:	d146      	bne.n	80113c6 <pow+0xd6>
 8011338:	ec45 4b10 	vmov	d0, r4, r5
 801133c:	f000 f848 	bl	80113d0 <finite>
 8011340:	b338      	cbz	r0, 8011392 <pow+0xa2>
 8011342:	2200      	movs	r2, #0
 8011344:	2300      	movs	r3, #0
 8011346:	4620      	mov	r0, r4
 8011348:	4629      	mov	r1, r5
 801134a:	f7ef fc37 	bl	8000bbc <__aeabi_dcmplt>
 801134e:	b300      	cbz	r0, 8011392 <pow+0xa2>
 8011350:	f7fd ff24 	bl	800f19c <__errno>
 8011354:	2322      	movs	r3, #34	; 0x22
 8011356:	e01b      	b.n	8011390 <pow+0xa0>
 8011358:	ec47 6b10 	vmov	d0, r6, r7
 801135c:	f000 f838 	bl	80113d0 <finite>
 8011360:	b9e0      	cbnz	r0, 801139c <pow+0xac>
 8011362:	eeb0 0a48 	vmov.f32	s0, s16
 8011366:	eef0 0a68 	vmov.f32	s1, s17
 801136a:	f000 f831 	bl	80113d0 <finite>
 801136e:	b1a8      	cbz	r0, 801139c <pow+0xac>
 8011370:	ec45 4b10 	vmov	d0, r4, r5
 8011374:	f000 f82c 	bl	80113d0 <finite>
 8011378:	b180      	cbz	r0, 801139c <pow+0xac>
 801137a:	4632      	mov	r2, r6
 801137c:	463b      	mov	r3, r7
 801137e:	4630      	mov	r0, r6
 8011380:	4639      	mov	r1, r7
 8011382:	f7ef fc43 	bl	8000c0c <__aeabi_dcmpun>
 8011386:	2800      	cmp	r0, #0
 8011388:	d0e2      	beq.n	8011350 <pow+0x60>
 801138a:	f7fd ff07 	bl	800f19c <__errno>
 801138e:	2321      	movs	r3, #33	; 0x21
 8011390:	6003      	str	r3, [r0, #0]
 8011392:	ecbd 8b02 	vpop	{d8}
 8011396:	ec47 6b10 	vmov	d0, r6, r7
 801139a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801139c:	2200      	movs	r2, #0
 801139e:	2300      	movs	r3, #0
 80113a0:	4630      	mov	r0, r6
 80113a2:	4639      	mov	r1, r7
 80113a4:	f7ef fc00 	bl	8000ba8 <__aeabi_dcmpeq>
 80113a8:	2800      	cmp	r0, #0
 80113aa:	d0f2      	beq.n	8011392 <pow+0xa2>
 80113ac:	eeb0 0a48 	vmov.f32	s0, s16
 80113b0:	eef0 0a68 	vmov.f32	s1, s17
 80113b4:	f000 f80c 	bl	80113d0 <finite>
 80113b8:	2800      	cmp	r0, #0
 80113ba:	d0ea      	beq.n	8011392 <pow+0xa2>
 80113bc:	ec45 4b10 	vmov	d0, r4, r5
 80113c0:	f000 f806 	bl	80113d0 <finite>
 80113c4:	e7c3      	b.n	801134e <pow+0x5e>
 80113c6:	4f01      	ldr	r7, [pc, #4]	; (80113cc <pow+0xdc>)
 80113c8:	2600      	movs	r6, #0
 80113ca:	e7e2      	b.n	8011392 <pow+0xa2>
 80113cc:	3ff00000 	.word	0x3ff00000

080113d0 <finite>:
 80113d0:	b082      	sub	sp, #8
 80113d2:	ed8d 0b00 	vstr	d0, [sp]
 80113d6:	9801      	ldr	r0, [sp, #4]
 80113d8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80113dc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80113e0:	0fc0      	lsrs	r0, r0, #31
 80113e2:	b002      	add	sp, #8
 80113e4:	4770      	bx	lr
	...

080113e8 <__ieee754_sqrt>:
 80113e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ec:	ec55 4b10 	vmov	r4, r5, d0
 80113f0:	4e67      	ldr	r6, [pc, #412]	; (8011590 <__ieee754_sqrt+0x1a8>)
 80113f2:	43ae      	bics	r6, r5
 80113f4:	ee10 0a10 	vmov	r0, s0
 80113f8:	ee10 2a10 	vmov	r2, s0
 80113fc:	4629      	mov	r1, r5
 80113fe:	462b      	mov	r3, r5
 8011400:	d10d      	bne.n	801141e <__ieee754_sqrt+0x36>
 8011402:	f7ef f969 	bl	80006d8 <__aeabi_dmul>
 8011406:	4602      	mov	r2, r0
 8011408:	460b      	mov	r3, r1
 801140a:	4620      	mov	r0, r4
 801140c:	4629      	mov	r1, r5
 801140e:	f7ee ffad 	bl	800036c <__adddf3>
 8011412:	4604      	mov	r4, r0
 8011414:	460d      	mov	r5, r1
 8011416:	ec45 4b10 	vmov	d0, r4, r5
 801141a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801141e:	2d00      	cmp	r5, #0
 8011420:	dc0b      	bgt.n	801143a <__ieee754_sqrt+0x52>
 8011422:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011426:	4326      	orrs	r6, r4
 8011428:	d0f5      	beq.n	8011416 <__ieee754_sqrt+0x2e>
 801142a:	b135      	cbz	r5, 801143a <__ieee754_sqrt+0x52>
 801142c:	f7ee ff9c 	bl	8000368 <__aeabi_dsub>
 8011430:	4602      	mov	r2, r0
 8011432:	460b      	mov	r3, r1
 8011434:	f7ef fa7a 	bl	800092c <__aeabi_ddiv>
 8011438:	e7eb      	b.n	8011412 <__ieee754_sqrt+0x2a>
 801143a:	1509      	asrs	r1, r1, #20
 801143c:	f000 808d 	beq.w	801155a <__ieee754_sqrt+0x172>
 8011440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011444:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801144c:	07c9      	lsls	r1, r1, #31
 801144e:	bf5c      	itt	pl
 8011450:	005b      	lslpl	r3, r3, #1
 8011452:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011456:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801145a:	bf58      	it	pl
 801145c:	0052      	lslpl	r2, r2, #1
 801145e:	2500      	movs	r5, #0
 8011460:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011464:	1076      	asrs	r6, r6, #1
 8011466:	0052      	lsls	r2, r2, #1
 8011468:	f04f 0e16 	mov.w	lr, #22
 801146c:	46ac      	mov	ip, r5
 801146e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011472:	eb0c 0001 	add.w	r0, ip, r1
 8011476:	4298      	cmp	r0, r3
 8011478:	bfde      	ittt	le
 801147a:	1a1b      	suble	r3, r3, r0
 801147c:	eb00 0c01 	addle.w	ip, r0, r1
 8011480:	186d      	addle	r5, r5, r1
 8011482:	005b      	lsls	r3, r3, #1
 8011484:	f1be 0e01 	subs.w	lr, lr, #1
 8011488:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801148c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011490:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011494:	d1ed      	bne.n	8011472 <__ieee754_sqrt+0x8a>
 8011496:	4674      	mov	r4, lr
 8011498:	2720      	movs	r7, #32
 801149a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801149e:	4563      	cmp	r3, ip
 80114a0:	eb01 000e 	add.w	r0, r1, lr
 80114a4:	dc02      	bgt.n	80114ac <__ieee754_sqrt+0xc4>
 80114a6:	d113      	bne.n	80114d0 <__ieee754_sqrt+0xe8>
 80114a8:	4290      	cmp	r0, r2
 80114aa:	d811      	bhi.n	80114d0 <__ieee754_sqrt+0xe8>
 80114ac:	2800      	cmp	r0, #0
 80114ae:	eb00 0e01 	add.w	lr, r0, r1
 80114b2:	da57      	bge.n	8011564 <__ieee754_sqrt+0x17c>
 80114b4:	f1be 0f00 	cmp.w	lr, #0
 80114b8:	db54      	blt.n	8011564 <__ieee754_sqrt+0x17c>
 80114ba:	f10c 0801 	add.w	r8, ip, #1
 80114be:	eba3 030c 	sub.w	r3, r3, ip
 80114c2:	4290      	cmp	r0, r2
 80114c4:	bf88      	it	hi
 80114c6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80114ca:	1a12      	subs	r2, r2, r0
 80114cc:	440c      	add	r4, r1
 80114ce:	46c4      	mov	ip, r8
 80114d0:	005b      	lsls	r3, r3, #1
 80114d2:	3f01      	subs	r7, #1
 80114d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80114d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80114dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80114e0:	d1dd      	bne.n	801149e <__ieee754_sqrt+0xb6>
 80114e2:	4313      	orrs	r3, r2
 80114e4:	d01b      	beq.n	801151e <__ieee754_sqrt+0x136>
 80114e6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011594 <__ieee754_sqrt+0x1ac>
 80114ea:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8011598 <__ieee754_sqrt+0x1b0>
 80114ee:	e9da 0100 	ldrd	r0, r1, [sl]
 80114f2:	e9db 2300 	ldrd	r2, r3, [fp]
 80114f6:	f7ee ff37 	bl	8000368 <__aeabi_dsub>
 80114fa:	e9da 8900 	ldrd	r8, r9, [sl]
 80114fe:	4602      	mov	r2, r0
 8011500:	460b      	mov	r3, r1
 8011502:	4640      	mov	r0, r8
 8011504:	4649      	mov	r1, r9
 8011506:	f7ef fb63 	bl	8000bd0 <__aeabi_dcmple>
 801150a:	b140      	cbz	r0, 801151e <__ieee754_sqrt+0x136>
 801150c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011510:	e9da 0100 	ldrd	r0, r1, [sl]
 8011514:	e9db 2300 	ldrd	r2, r3, [fp]
 8011518:	d126      	bne.n	8011568 <__ieee754_sqrt+0x180>
 801151a:	3501      	adds	r5, #1
 801151c:	463c      	mov	r4, r7
 801151e:	106a      	asrs	r2, r5, #1
 8011520:	0863      	lsrs	r3, r4, #1
 8011522:	07e9      	lsls	r1, r5, #31
 8011524:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011528:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801152c:	bf48      	it	mi
 801152e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011532:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011536:	461c      	mov	r4, r3
 8011538:	e76d      	b.n	8011416 <__ieee754_sqrt+0x2e>
 801153a:	0ad3      	lsrs	r3, r2, #11
 801153c:	3815      	subs	r0, #21
 801153e:	0552      	lsls	r2, r2, #21
 8011540:	2b00      	cmp	r3, #0
 8011542:	d0fa      	beq.n	801153a <__ieee754_sqrt+0x152>
 8011544:	02dc      	lsls	r4, r3, #11
 8011546:	d50a      	bpl.n	801155e <__ieee754_sqrt+0x176>
 8011548:	f1c1 0420 	rsb	r4, r1, #32
 801154c:	fa22 f404 	lsr.w	r4, r2, r4
 8011550:	1e4d      	subs	r5, r1, #1
 8011552:	408a      	lsls	r2, r1
 8011554:	4323      	orrs	r3, r4
 8011556:	1b41      	subs	r1, r0, r5
 8011558:	e772      	b.n	8011440 <__ieee754_sqrt+0x58>
 801155a:	4608      	mov	r0, r1
 801155c:	e7f0      	b.n	8011540 <__ieee754_sqrt+0x158>
 801155e:	005b      	lsls	r3, r3, #1
 8011560:	3101      	adds	r1, #1
 8011562:	e7ef      	b.n	8011544 <__ieee754_sqrt+0x15c>
 8011564:	46e0      	mov	r8, ip
 8011566:	e7aa      	b.n	80114be <__ieee754_sqrt+0xd6>
 8011568:	f7ee ff00 	bl	800036c <__adddf3>
 801156c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011570:	4602      	mov	r2, r0
 8011572:	460b      	mov	r3, r1
 8011574:	4640      	mov	r0, r8
 8011576:	4649      	mov	r1, r9
 8011578:	f7ef fb20 	bl	8000bbc <__aeabi_dcmplt>
 801157c:	b120      	cbz	r0, 8011588 <__ieee754_sqrt+0x1a0>
 801157e:	1ca0      	adds	r0, r4, #2
 8011580:	bf08      	it	eq
 8011582:	3501      	addeq	r5, #1
 8011584:	3402      	adds	r4, #2
 8011586:	e7ca      	b.n	801151e <__ieee754_sqrt+0x136>
 8011588:	3401      	adds	r4, #1
 801158a:	f024 0401 	bic.w	r4, r4, #1
 801158e:	e7c6      	b.n	801151e <__ieee754_sqrt+0x136>
 8011590:	7ff00000 	.word	0x7ff00000
 8011594:	200001e8 	.word	0x200001e8
 8011598:	200001f0 	.word	0x200001f0

0801159c <round>:
 801159c:	ec53 2b10 	vmov	r2, r3, d0
 80115a0:	b570      	push	{r4, r5, r6, lr}
 80115a2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80115a6:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80115aa:	2813      	cmp	r0, #19
 80115ac:	ee10 5a10 	vmov	r5, s0
 80115b0:	4619      	mov	r1, r3
 80115b2:	dc18      	bgt.n	80115e6 <round+0x4a>
 80115b4:	2800      	cmp	r0, #0
 80115b6:	da09      	bge.n	80115cc <round+0x30>
 80115b8:	3001      	adds	r0, #1
 80115ba:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80115be:	d103      	bne.n	80115c8 <round+0x2c>
 80115c0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80115c4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80115c8:	2300      	movs	r3, #0
 80115ca:	e02a      	b.n	8011622 <round+0x86>
 80115cc:	4c16      	ldr	r4, [pc, #88]	; (8011628 <round+0x8c>)
 80115ce:	4104      	asrs	r4, r0
 80115d0:	ea03 0604 	and.w	r6, r3, r4
 80115d4:	4316      	orrs	r6, r2
 80115d6:	d011      	beq.n	80115fc <round+0x60>
 80115d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80115dc:	4103      	asrs	r3, r0
 80115de:	440b      	add	r3, r1
 80115e0:	ea23 0104 	bic.w	r1, r3, r4
 80115e4:	e7f0      	b.n	80115c8 <round+0x2c>
 80115e6:	2833      	cmp	r0, #51	; 0x33
 80115e8:	dd0b      	ble.n	8011602 <round+0x66>
 80115ea:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80115ee:	d105      	bne.n	80115fc <round+0x60>
 80115f0:	ee10 0a10 	vmov	r0, s0
 80115f4:	f7ee feba 	bl	800036c <__adddf3>
 80115f8:	4602      	mov	r2, r0
 80115fa:	460b      	mov	r3, r1
 80115fc:	ec43 2b10 	vmov	d0, r2, r3
 8011600:	bd70      	pop	{r4, r5, r6, pc}
 8011602:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8011606:	f04f 34ff 	mov.w	r4, #4294967295
 801160a:	40f4      	lsrs	r4, r6
 801160c:	4214      	tst	r4, r2
 801160e:	d0f5      	beq.n	80115fc <round+0x60>
 8011610:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8011614:	2301      	movs	r3, #1
 8011616:	4083      	lsls	r3, r0
 8011618:	195b      	adds	r3, r3, r5
 801161a:	bf28      	it	cs
 801161c:	3101      	addcs	r1, #1
 801161e:	ea23 0304 	bic.w	r3, r3, r4
 8011622:	461a      	mov	r2, r3
 8011624:	460b      	mov	r3, r1
 8011626:	e7e9      	b.n	80115fc <round+0x60>
 8011628:	000fffff 	.word	0x000fffff
 801162c:	00000000 	.word	0x00000000

08011630 <__ieee754_pow>:
 8011630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011634:	ed2d 8b06 	vpush	{d8-d10}
 8011638:	b089      	sub	sp, #36	; 0x24
 801163a:	ed8d 1b00 	vstr	d1, [sp]
 801163e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011642:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011646:	ea58 0102 	orrs.w	r1, r8, r2
 801164a:	ec57 6b10 	vmov	r6, r7, d0
 801164e:	d115      	bne.n	801167c <__ieee754_pow+0x4c>
 8011650:	19b3      	adds	r3, r6, r6
 8011652:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011656:	4152      	adcs	r2, r2
 8011658:	4299      	cmp	r1, r3
 801165a:	4b89      	ldr	r3, [pc, #548]	; (8011880 <__ieee754_pow+0x250>)
 801165c:	4193      	sbcs	r3, r2
 801165e:	f080 84d1 	bcs.w	8012004 <__ieee754_pow+0x9d4>
 8011662:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011666:	4630      	mov	r0, r6
 8011668:	4639      	mov	r1, r7
 801166a:	f7ee fe7f 	bl	800036c <__adddf3>
 801166e:	ec41 0b10 	vmov	d0, r0, r1
 8011672:	b009      	add	sp, #36	; 0x24
 8011674:	ecbd 8b06 	vpop	{d8-d10}
 8011678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801167c:	4b81      	ldr	r3, [pc, #516]	; (8011884 <__ieee754_pow+0x254>)
 801167e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011682:	429c      	cmp	r4, r3
 8011684:	ee10 aa10 	vmov	sl, s0
 8011688:	463d      	mov	r5, r7
 801168a:	dc06      	bgt.n	801169a <__ieee754_pow+0x6a>
 801168c:	d101      	bne.n	8011692 <__ieee754_pow+0x62>
 801168e:	2e00      	cmp	r6, #0
 8011690:	d1e7      	bne.n	8011662 <__ieee754_pow+0x32>
 8011692:	4598      	cmp	r8, r3
 8011694:	dc01      	bgt.n	801169a <__ieee754_pow+0x6a>
 8011696:	d10f      	bne.n	80116b8 <__ieee754_pow+0x88>
 8011698:	b172      	cbz	r2, 80116b8 <__ieee754_pow+0x88>
 801169a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801169e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80116a2:	ea55 050a 	orrs.w	r5, r5, sl
 80116a6:	d1dc      	bne.n	8011662 <__ieee754_pow+0x32>
 80116a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80116ac:	18db      	adds	r3, r3, r3
 80116ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80116b2:	4152      	adcs	r2, r2
 80116b4:	429d      	cmp	r5, r3
 80116b6:	e7d0      	b.n	801165a <__ieee754_pow+0x2a>
 80116b8:	2d00      	cmp	r5, #0
 80116ba:	da3b      	bge.n	8011734 <__ieee754_pow+0x104>
 80116bc:	4b72      	ldr	r3, [pc, #456]	; (8011888 <__ieee754_pow+0x258>)
 80116be:	4598      	cmp	r8, r3
 80116c0:	dc51      	bgt.n	8011766 <__ieee754_pow+0x136>
 80116c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80116c6:	4598      	cmp	r8, r3
 80116c8:	f340 84ab 	ble.w	8012022 <__ieee754_pow+0x9f2>
 80116cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80116d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80116d4:	2b14      	cmp	r3, #20
 80116d6:	dd0f      	ble.n	80116f8 <__ieee754_pow+0xc8>
 80116d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80116dc:	fa22 f103 	lsr.w	r1, r2, r3
 80116e0:	fa01 f303 	lsl.w	r3, r1, r3
 80116e4:	4293      	cmp	r3, r2
 80116e6:	f040 849c 	bne.w	8012022 <__ieee754_pow+0x9f2>
 80116ea:	f001 0101 	and.w	r1, r1, #1
 80116ee:	f1c1 0302 	rsb	r3, r1, #2
 80116f2:	9304      	str	r3, [sp, #16]
 80116f4:	b182      	cbz	r2, 8011718 <__ieee754_pow+0xe8>
 80116f6:	e05f      	b.n	80117b8 <__ieee754_pow+0x188>
 80116f8:	2a00      	cmp	r2, #0
 80116fa:	d15b      	bne.n	80117b4 <__ieee754_pow+0x184>
 80116fc:	f1c3 0314 	rsb	r3, r3, #20
 8011700:	fa48 f103 	asr.w	r1, r8, r3
 8011704:	fa01 f303 	lsl.w	r3, r1, r3
 8011708:	4543      	cmp	r3, r8
 801170a:	f040 8487 	bne.w	801201c <__ieee754_pow+0x9ec>
 801170e:	f001 0101 	and.w	r1, r1, #1
 8011712:	f1c1 0302 	rsb	r3, r1, #2
 8011716:	9304      	str	r3, [sp, #16]
 8011718:	4b5c      	ldr	r3, [pc, #368]	; (801188c <__ieee754_pow+0x25c>)
 801171a:	4598      	cmp	r8, r3
 801171c:	d132      	bne.n	8011784 <__ieee754_pow+0x154>
 801171e:	f1b9 0f00 	cmp.w	r9, #0
 8011722:	f280 8477 	bge.w	8012014 <__ieee754_pow+0x9e4>
 8011726:	4959      	ldr	r1, [pc, #356]	; (801188c <__ieee754_pow+0x25c>)
 8011728:	4632      	mov	r2, r6
 801172a:	463b      	mov	r3, r7
 801172c:	2000      	movs	r0, #0
 801172e:	f7ef f8fd 	bl	800092c <__aeabi_ddiv>
 8011732:	e79c      	b.n	801166e <__ieee754_pow+0x3e>
 8011734:	2300      	movs	r3, #0
 8011736:	9304      	str	r3, [sp, #16]
 8011738:	2a00      	cmp	r2, #0
 801173a:	d13d      	bne.n	80117b8 <__ieee754_pow+0x188>
 801173c:	4b51      	ldr	r3, [pc, #324]	; (8011884 <__ieee754_pow+0x254>)
 801173e:	4598      	cmp	r8, r3
 8011740:	d1ea      	bne.n	8011718 <__ieee754_pow+0xe8>
 8011742:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011746:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801174a:	ea53 030a 	orrs.w	r3, r3, sl
 801174e:	f000 8459 	beq.w	8012004 <__ieee754_pow+0x9d4>
 8011752:	4b4f      	ldr	r3, [pc, #316]	; (8011890 <__ieee754_pow+0x260>)
 8011754:	429c      	cmp	r4, r3
 8011756:	dd08      	ble.n	801176a <__ieee754_pow+0x13a>
 8011758:	f1b9 0f00 	cmp.w	r9, #0
 801175c:	f2c0 8456 	blt.w	801200c <__ieee754_pow+0x9dc>
 8011760:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011764:	e783      	b.n	801166e <__ieee754_pow+0x3e>
 8011766:	2302      	movs	r3, #2
 8011768:	e7e5      	b.n	8011736 <__ieee754_pow+0x106>
 801176a:	f1b9 0f00 	cmp.w	r9, #0
 801176e:	f04f 0000 	mov.w	r0, #0
 8011772:	f04f 0100 	mov.w	r1, #0
 8011776:	f6bf af7a 	bge.w	801166e <__ieee754_pow+0x3e>
 801177a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801177e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011782:	e774      	b.n	801166e <__ieee754_pow+0x3e>
 8011784:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011788:	d106      	bne.n	8011798 <__ieee754_pow+0x168>
 801178a:	4632      	mov	r2, r6
 801178c:	463b      	mov	r3, r7
 801178e:	4630      	mov	r0, r6
 8011790:	4639      	mov	r1, r7
 8011792:	f7ee ffa1 	bl	80006d8 <__aeabi_dmul>
 8011796:	e76a      	b.n	801166e <__ieee754_pow+0x3e>
 8011798:	4b3e      	ldr	r3, [pc, #248]	; (8011894 <__ieee754_pow+0x264>)
 801179a:	4599      	cmp	r9, r3
 801179c:	d10c      	bne.n	80117b8 <__ieee754_pow+0x188>
 801179e:	2d00      	cmp	r5, #0
 80117a0:	db0a      	blt.n	80117b8 <__ieee754_pow+0x188>
 80117a2:	ec47 6b10 	vmov	d0, r6, r7
 80117a6:	b009      	add	sp, #36	; 0x24
 80117a8:	ecbd 8b06 	vpop	{d8-d10}
 80117ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b0:	f7ff be1a 	b.w	80113e8 <__ieee754_sqrt>
 80117b4:	2300      	movs	r3, #0
 80117b6:	9304      	str	r3, [sp, #16]
 80117b8:	ec47 6b10 	vmov	d0, r6, r7
 80117bc:	f000 fc62 	bl	8012084 <fabs>
 80117c0:	ec51 0b10 	vmov	r0, r1, d0
 80117c4:	f1ba 0f00 	cmp.w	sl, #0
 80117c8:	d129      	bne.n	801181e <__ieee754_pow+0x1ee>
 80117ca:	b124      	cbz	r4, 80117d6 <__ieee754_pow+0x1a6>
 80117cc:	4b2f      	ldr	r3, [pc, #188]	; (801188c <__ieee754_pow+0x25c>)
 80117ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d123      	bne.n	801181e <__ieee754_pow+0x1ee>
 80117d6:	f1b9 0f00 	cmp.w	r9, #0
 80117da:	da05      	bge.n	80117e8 <__ieee754_pow+0x1b8>
 80117dc:	4602      	mov	r2, r0
 80117de:	460b      	mov	r3, r1
 80117e0:	2000      	movs	r0, #0
 80117e2:	492a      	ldr	r1, [pc, #168]	; (801188c <__ieee754_pow+0x25c>)
 80117e4:	f7ef f8a2 	bl	800092c <__aeabi_ddiv>
 80117e8:	2d00      	cmp	r5, #0
 80117ea:	f6bf af40 	bge.w	801166e <__ieee754_pow+0x3e>
 80117ee:	9b04      	ldr	r3, [sp, #16]
 80117f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80117f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80117f8:	431c      	orrs	r4, r3
 80117fa:	d108      	bne.n	801180e <__ieee754_pow+0x1de>
 80117fc:	4602      	mov	r2, r0
 80117fe:	460b      	mov	r3, r1
 8011800:	4610      	mov	r0, r2
 8011802:	4619      	mov	r1, r3
 8011804:	f7ee fdb0 	bl	8000368 <__aeabi_dsub>
 8011808:	4602      	mov	r2, r0
 801180a:	460b      	mov	r3, r1
 801180c:	e78f      	b.n	801172e <__ieee754_pow+0xfe>
 801180e:	9b04      	ldr	r3, [sp, #16]
 8011810:	2b01      	cmp	r3, #1
 8011812:	f47f af2c 	bne.w	801166e <__ieee754_pow+0x3e>
 8011816:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801181a:	4619      	mov	r1, r3
 801181c:	e727      	b.n	801166e <__ieee754_pow+0x3e>
 801181e:	0feb      	lsrs	r3, r5, #31
 8011820:	3b01      	subs	r3, #1
 8011822:	9306      	str	r3, [sp, #24]
 8011824:	9a06      	ldr	r2, [sp, #24]
 8011826:	9b04      	ldr	r3, [sp, #16]
 8011828:	4313      	orrs	r3, r2
 801182a:	d102      	bne.n	8011832 <__ieee754_pow+0x202>
 801182c:	4632      	mov	r2, r6
 801182e:	463b      	mov	r3, r7
 8011830:	e7e6      	b.n	8011800 <__ieee754_pow+0x1d0>
 8011832:	4b19      	ldr	r3, [pc, #100]	; (8011898 <__ieee754_pow+0x268>)
 8011834:	4598      	cmp	r8, r3
 8011836:	f340 80fb 	ble.w	8011a30 <__ieee754_pow+0x400>
 801183a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801183e:	4598      	cmp	r8, r3
 8011840:	4b13      	ldr	r3, [pc, #76]	; (8011890 <__ieee754_pow+0x260>)
 8011842:	dd0c      	ble.n	801185e <__ieee754_pow+0x22e>
 8011844:	429c      	cmp	r4, r3
 8011846:	dc0f      	bgt.n	8011868 <__ieee754_pow+0x238>
 8011848:	f1b9 0f00 	cmp.w	r9, #0
 801184c:	da0f      	bge.n	801186e <__ieee754_pow+0x23e>
 801184e:	2000      	movs	r0, #0
 8011850:	b009      	add	sp, #36	; 0x24
 8011852:	ecbd 8b06 	vpop	{d8-d10}
 8011856:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801185a:	f000 bcc2 	b.w	80121e2 <__math_oflow>
 801185e:	429c      	cmp	r4, r3
 8011860:	dbf2      	blt.n	8011848 <__ieee754_pow+0x218>
 8011862:	4b0a      	ldr	r3, [pc, #40]	; (801188c <__ieee754_pow+0x25c>)
 8011864:	429c      	cmp	r4, r3
 8011866:	dd19      	ble.n	801189c <__ieee754_pow+0x26c>
 8011868:	f1b9 0f00 	cmp.w	r9, #0
 801186c:	dcef      	bgt.n	801184e <__ieee754_pow+0x21e>
 801186e:	2000      	movs	r0, #0
 8011870:	b009      	add	sp, #36	; 0x24
 8011872:	ecbd 8b06 	vpop	{d8-d10}
 8011876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801187a:	f000 bca9 	b.w	80121d0 <__math_uflow>
 801187e:	bf00      	nop
 8011880:	fff00000 	.word	0xfff00000
 8011884:	7ff00000 	.word	0x7ff00000
 8011888:	433fffff 	.word	0x433fffff
 801188c:	3ff00000 	.word	0x3ff00000
 8011890:	3fefffff 	.word	0x3fefffff
 8011894:	3fe00000 	.word	0x3fe00000
 8011898:	41e00000 	.word	0x41e00000
 801189c:	4b60      	ldr	r3, [pc, #384]	; (8011a20 <__ieee754_pow+0x3f0>)
 801189e:	2200      	movs	r2, #0
 80118a0:	f7ee fd62 	bl	8000368 <__aeabi_dsub>
 80118a4:	a354      	add	r3, pc, #336	; (adr r3, 80119f8 <__ieee754_pow+0x3c8>)
 80118a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118aa:	4604      	mov	r4, r0
 80118ac:	460d      	mov	r5, r1
 80118ae:	f7ee ff13 	bl	80006d8 <__aeabi_dmul>
 80118b2:	a353      	add	r3, pc, #332	; (adr r3, 8011a00 <__ieee754_pow+0x3d0>)
 80118b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b8:	4606      	mov	r6, r0
 80118ba:	460f      	mov	r7, r1
 80118bc:	4620      	mov	r0, r4
 80118be:	4629      	mov	r1, r5
 80118c0:	f7ee ff0a 	bl	80006d8 <__aeabi_dmul>
 80118c4:	4b57      	ldr	r3, [pc, #348]	; (8011a24 <__ieee754_pow+0x3f4>)
 80118c6:	4682      	mov	sl, r0
 80118c8:	468b      	mov	fp, r1
 80118ca:	2200      	movs	r2, #0
 80118cc:	4620      	mov	r0, r4
 80118ce:	4629      	mov	r1, r5
 80118d0:	f7ee ff02 	bl	80006d8 <__aeabi_dmul>
 80118d4:	4602      	mov	r2, r0
 80118d6:	460b      	mov	r3, r1
 80118d8:	a14b      	add	r1, pc, #300	; (adr r1, 8011a08 <__ieee754_pow+0x3d8>)
 80118da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118de:	f7ee fd43 	bl	8000368 <__aeabi_dsub>
 80118e2:	4622      	mov	r2, r4
 80118e4:	462b      	mov	r3, r5
 80118e6:	f7ee fef7 	bl	80006d8 <__aeabi_dmul>
 80118ea:	4602      	mov	r2, r0
 80118ec:	460b      	mov	r3, r1
 80118ee:	2000      	movs	r0, #0
 80118f0:	494d      	ldr	r1, [pc, #308]	; (8011a28 <__ieee754_pow+0x3f8>)
 80118f2:	f7ee fd39 	bl	8000368 <__aeabi_dsub>
 80118f6:	4622      	mov	r2, r4
 80118f8:	4680      	mov	r8, r0
 80118fa:	4689      	mov	r9, r1
 80118fc:	462b      	mov	r3, r5
 80118fe:	4620      	mov	r0, r4
 8011900:	4629      	mov	r1, r5
 8011902:	f7ee fee9 	bl	80006d8 <__aeabi_dmul>
 8011906:	4602      	mov	r2, r0
 8011908:	460b      	mov	r3, r1
 801190a:	4640      	mov	r0, r8
 801190c:	4649      	mov	r1, r9
 801190e:	f7ee fee3 	bl	80006d8 <__aeabi_dmul>
 8011912:	a33f      	add	r3, pc, #252	; (adr r3, 8011a10 <__ieee754_pow+0x3e0>)
 8011914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011918:	f7ee fede 	bl	80006d8 <__aeabi_dmul>
 801191c:	4602      	mov	r2, r0
 801191e:	460b      	mov	r3, r1
 8011920:	4650      	mov	r0, sl
 8011922:	4659      	mov	r1, fp
 8011924:	f7ee fd20 	bl	8000368 <__aeabi_dsub>
 8011928:	4602      	mov	r2, r0
 801192a:	460b      	mov	r3, r1
 801192c:	4680      	mov	r8, r0
 801192e:	4689      	mov	r9, r1
 8011930:	4630      	mov	r0, r6
 8011932:	4639      	mov	r1, r7
 8011934:	f7ee fd1a 	bl	800036c <__adddf3>
 8011938:	2000      	movs	r0, #0
 801193a:	4632      	mov	r2, r6
 801193c:	463b      	mov	r3, r7
 801193e:	4604      	mov	r4, r0
 8011940:	460d      	mov	r5, r1
 8011942:	f7ee fd11 	bl	8000368 <__aeabi_dsub>
 8011946:	4602      	mov	r2, r0
 8011948:	460b      	mov	r3, r1
 801194a:	4640      	mov	r0, r8
 801194c:	4649      	mov	r1, r9
 801194e:	f7ee fd0b 	bl	8000368 <__aeabi_dsub>
 8011952:	9b04      	ldr	r3, [sp, #16]
 8011954:	9a06      	ldr	r2, [sp, #24]
 8011956:	3b01      	subs	r3, #1
 8011958:	4313      	orrs	r3, r2
 801195a:	4682      	mov	sl, r0
 801195c:	468b      	mov	fp, r1
 801195e:	f040 81e7 	bne.w	8011d30 <__ieee754_pow+0x700>
 8011962:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011a18 <__ieee754_pow+0x3e8>
 8011966:	eeb0 8a47 	vmov.f32	s16, s14
 801196a:	eef0 8a67 	vmov.f32	s17, s15
 801196e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011972:	2600      	movs	r6, #0
 8011974:	4632      	mov	r2, r6
 8011976:	463b      	mov	r3, r7
 8011978:	e9dd 0100 	ldrd	r0, r1, [sp]
 801197c:	f7ee fcf4 	bl	8000368 <__aeabi_dsub>
 8011980:	4622      	mov	r2, r4
 8011982:	462b      	mov	r3, r5
 8011984:	f7ee fea8 	bl	80006d8 <__aeabi_dmul>
 8011988:	e9dd 2300 	ldrd	r2, r3, [sp]
 801198c:	4680      	mov	r8, r0
 801198e:	4689      	mov	r9, r1
 8011990:	4650      	mov	r0, sl
 8011992:	4659      	mov	r1, fp
 8011994:	f7ee fea0 	bl	80006d8 <__aeabi_dmul>
 8011998:	4602      	mov	r2, r0
 801199a:	460b      	mov	r3, r1
 801199c:	4640      	mov	r0, r8
 801199e:	4649      	mov	r1, r9
 80119a0:	f7ee fce4 	bl	800036c <__adddf3>
 80119a4:	4632      	mov	r2, r6
 80119a6:	463b      	mov	r3, r7
 80119a8:	4680      	mov	r8, r0
 80119aa:	4689      	mov	r9, r1
 80119ac:	4620      	mov	r0, r4
 80119ae:	4629      	mov	r1, r5
 80119b0:	f7ee fe92 	bl	80006d8 <__aeabi_dmul>
 80119b4:	460b      	mov	r3, r1
 80119b6:	4604      	mov	r4, r0
 80119b8:	460d      	mov	r5, r1
 80119ba:	4602      	mov	r2, r0
 80119bc:	4649      	mov	r1, r9
 80119be:	4640      	mov	r0, r8
 80119c0:	f7ee fcd4 	bl	800036c <__adddf3>
 80119c4:	4b19      	ldr	r3, [pc, #100]	; (8011a2c <__ieee754_pow+0x3fc>)
 80119c6:	4299      	cmp	r1, r3
 80119c8:	ec45 4b19 	vmov	d9, r4, r5
 80119cc:	4606      	mov	r6, r0
 80119ce:	460f      	mov	r7, r1
 80119d0:	468b      	mov	fp, r1
 80119d2:	f340 82f0 	ble.w	8011fb6 <__ieee754_pow+0x986>
 80119d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80119da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80119de:	4303      	orrs	r3, r0
 80119e0:	f000 81e4 	beq.w	8011dac <__ieee754_pow+0x77c>
 80119e4:	ec51 0b18 	vmov	r0, r1, d8
 80119e8:	2200      	movs	r2, #0
 80119ea:	2300      	movs	r3, #0
 80119ec:	f7ef f8e6 	bl	8000bbc <__aeabi_dcmplt>
 80119f0:	3800      	subs	r0, #0
 80119f2:	bf18      	it	ne
 80119f4:	2001      	movne	r0, #1
 80119f6:	e72b      	b.n	8011850 <__ieee754_pow+0x220>
 80119f8:	60000000 	.word	0x60000000
 80119fc:	3ff71547 	.word	0x3ff71547
 8011a00:	f85ddf44 	.word	0xf85ddf44
 8011a04:	3e54ae0b 	.word	0x3e54ae0b
 8011a08:	55555555 	.word	0x55555555
 8011a0c:	3fd55555 	.word	0x3fd55555
 8011a10:	652b82fe 	.word	0x652b82fe
 8011a14:	3ff71547 	.word	0x3ff71547
 8011a18:	00000000 	.word	0x00000000
 8011a1c:	bff00000 	.word	0xbff00000
 8011a20:	3ff00000 	.word	0x3ff00000
 8011a24:	3fd00000 	.word	0x3fd00000
 8011a28:	3fe00000 	.word	0x3fe00000
 8011a2c:	408fffff 	.word	0x408fffff
 8011a30:	4bd5      	ldr	r3, [pc, #852]	; (8011d88 <__ieee754_pow+0x758>)
 8011a32:	402b      	ands	r3, r5
 8011a34:	2200      	movs	r2, #0
 8011a36:	b92b      	cbnz	r3, 8011a44 <__ieee754_pow+0x414>
 8011a38:	4bd4      	ldr	r3, [pc, #848]	; (8011d8c <__ieee754_pow+0x75c>)
 8011a3a:	f7ee fe4d 	bl	80006d8 <__aeabi_dmul>
 8011a3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011a42:	460c      	mov	r4, r1
 8011a44:	1523      	asrs	r3, r4, #20
 8011a46:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011a4a:	4413      	add	r3, r2
 8011a4c:	9305      	str	r3, [sp, #20]
 8011a4e:	4bd0      	ldr	r3, [pc, #832]	; (8011d90 <__ieee754_pow+0x760>)
 8011a50:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011a54:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011a58:	429c      	cmp	r4, r3
 8011a5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011a5e:	dd08      	ble.n	8011a72 <__ieee754_pow+0x442>
 8011a60:	4bcc      	ldr	r3, [pc, #816]	; (8011d94 <__ieee754_pow+0x764>)
 8011a62:	429c      	cmp	r4, r3
 8011a64:	f340 8162 	ble.w	8011d2c <__ieee754_pow+0x6fc>
 8011a68:	9b05      	ldr	r3, [sp, #20]
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	9305      	str	r3, [sp, #20]
 8011a6e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011a72:	2400      	movs	r4, #0
 8011a74:	00e3      	lsls	r3, r4, #3
 8011a76:	9307      	str	r3, [sp, #28]
 8011a78:	4bc7      	ldr	r3, [pc, #796]	; (8011d98 <__ieee754_pow+0x768>)
 8011a7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011a7e:	ed93 7b00 	vldr	d7, [r3]
 8011a82:	4629      	mov	r1, r5
 8011a84:	ec53 2b17 	vmov	r2, r3, d7
 8011a88:	eeb0 9a47 	vmov.f32	s18, s14
 8011a8c:	eef0 9a67 	vmov.f32	s19, s15
 8011a90:	4682      	mov	sl, r0
 8011a92:	f7ee fc69 	bl	8000368 <__aeabi_dsub>
 8011a96:	4652      	mov	r2, sl
 8011a98:	4606      	mov	r6, r0
 8011a9a:	460f      	mov	r7, r1
 8011a9c:	462b      	mov	r3, r5
 8011a9e:	ec51 0b19 	vmov	r0, r1, d9
 8011aa2:	f7ee fc63 	bl	800036c <__adddf3>
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	2000      	movs	r0, #0
 8011aac:	49bb      	ldr	r1, [pc, #748]	; (8011d9c <__ieee754_pow+0x76c>)
 8011aae:	f7ee ff3d 	bl	800092c <__aeabi_ddiv>
 8011ab2:	ec41 0b1a 	vmov	d10, r0, r1
 8011ab6:	4602      	mov	r2, r0
 8011ab8:	460b      	mov	r3, r1
 8011aba:	4630      	mov	r0, r6
 8011abc:	4639      	mov	r1, r7
 8011abe:	f7ee fe0b 	bl	80006d8 <__aeabi_dmul>
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ac8:	9302      	str	r3, [sp, #8]
 8011aca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011ace:	46ab      	mov	fp, r5
 8011ad0:	106d      	asrs	r5, r5, #1
 8011ad2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011ad6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011ada:	ec41 0b18 	vmov	d8, r0, r1
 8011ade:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	4640      	mov	r0, r8
 8011ae6:	4649      	mov	r1, r9
 8011ae8:	4614      	mov	r4, r2
 8011aea:	461d      	mov	r5, r3
 8011aec:	f7ee fdf4 	bl	80006d8 <__aeabi_dmul>
 8011af0:	4602      	mov	r2, r0
 8011af2:	460b      	mov	r3, r1
 8011af4:	4630      	mov	r0, r6
 8011af6:	4639      	mov	r1, r7
 8011af8:	f7ee fc36 	bl	8000368 <__aeabi_dsub>
 8011afc:	ec53 2b19 	vmov	r2, r3, d9
 8011b00:	4606      	mov	r6, r0
 8011b02:	460f      	mov	r7, r1
 8011b04:	4620      	mov	r0, r4
 8011b06:	4629      	mov	r1, r5
 8011b08:	f7ee fc2e 	bl	8000368 <__aeabi_dsub>
 8011b0c:	4602      	mov	r2, r0
 8011b0e:	460b      	mov	r3, r1
 8011b10:	4650      	mov	r0, sl
 8011b12:	4659      	mov	r1, fp
 8011b14:	f7ee fc28 	bl	8000368 <__aeabi_dsub>
 8011b18:	4642      	mov	r2, r8
 8011b1a:	464b      	mov	r3, r9
 8011b1c:	f7ee fddc 	bl	80006d8 <__aeabi_dmul>
 8011b20:	4602      	mov	r2, r0
 8011b22:	460b      	mov	r3, r1
 8011b24:	4630      	mov	r0, r6
 8011b26:	4639      	mov	r1, r7
 8011b28:	f7ee fc1e 	bl	8000368 <__aeabi_dsub>
 8011b2c:	ec53 2b1a 	vmov	r2, r3, d10
 8011b30:	f7ee fdd2 	bl	80006d8 <__aeabi_dmul>
 8011b34:	ec53 2b18 	vmov	r2, r3, d8
 8011b38:	ec41 0b19 	vmov	d9, r0, r1
 8011b3c:	ec51 0b18 	vmov	r0, r1, d8
 8011b40:	f7ee fdca 	bl	80006d8 <__aeabi_dmul>
 8011b44:	a37c      	add	r3, pc, #496	; (adr r3, 8011d38 <__ieee754_pow+0x708>)
 8011b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	460d      	mov	r5, r1
 8011b4e:	f7ee fdc3 	bl	80006d8 <__aeabi_dmul>
 8011b52:	a37b      	add	r3, pc, #492	; (adr r3, 8011d40 <__ieee754_pow+0x710>)
 8011b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b58:	f7ee fc08 	bl	800036c <__adddf3>
 8011b5c:	4622      	mov	r2, r4
 8011b5e:	462b      	mov	r3, r5
 8011b60:	f7ee fdba 	bl	80006d8 <__aeabi_dmul>
 8011b64:	a378      	add	r3, pc, #480	; (adr r3, 8011d48 <__ieee754_pow+0x718>)
 8011b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6a:	f7ee fbff 	bl	800036c <__adddf3>
 8011b6e:	4622      	mov	r2, r4
 8011b70:	462b      	mov	r3, r5
 8011b72:	f7ee fdb1 	bl	80006d8 <__aeabi_dmul>
 8011b76:	a376      	add	r3, pc, #472	; (adr r3, 8011d50 <__ieee754_pow+0x720>)
 8011b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b7c:	f7ee fbf6 	bl	800036c <__adddf3>
 8011b80:	4622      	mov	r2, r4
 8011b82:	462b      	mov	r3, r5
 8011b84:	f7ee fda8 	bl	80006d8 <__aeabi_dmul>
 8011b88:	a373      	add	r3, pc, #460	; (adr r3, 8011d58 <__ieee754_pow+0x728>)
 8011b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b8e:	f7ee fbed 	bl	800036c <__adddf3>
 8011b92:	4622      	mov	r2, r4
 8011b94:	462b      	mov	r3, r5
 8011b96:	f7ee fd9f 	bl	80006d8 <__aeabi_dmul>
 8011b9a:	a371      	add	r3, pc, #452	; (adr r3, 8011d60 <__ieee754_pow+0x730>)
 8011b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba0:	f7ee fbe4 	bl	800036c <__adddf3>
 8011ba4:	4622      	mov	r2, r4
 8011ba6:	4606      	mov	r6, r0
 8011ba8:	460f      	mov	r7, r1
 8011baa:	462b      	mov	r3, r5
 8011bac:	4620      	mov	r0, r4
 8011bae:	4629      	mov	r1, r5
 8011bb0:	f7ee fd92 	bl	80006d8 <__aeabi_dmul>
 8011bb4:	4602      	mov	r2, r0
 8011bb6:	460b      	mov	r3, r1
 8011bb8:	4630      	mov	r0, r6
 8011bba:	4639      	mov	r1, r7
 8011bbc:	f7ee fd8c 	bl	80006d8 <__aeabi_dmul>
 8011bc0:	4642      	mov	r2, r8
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	460d      	mov	r5, r1
 8011bc6:	464b      	mov	r3, r9
 8011bc8:	ec51 0b18 	vmov	r0, r1, d8
 8011bcc:	f7ee fbce 	bl	800036c <__adddf3>
 8011bd0:	ec53 2b19 	vmov	r2, r3, d9
 8011bd4:	f7ee fd80 	bl	80006d8 <__aeabi_dmul>
 8011bd8:	4622      	mov	r2, r4
 8011bda:	462b      	mov	r3, r5
 8011bdc:	f7ee fbc6 	bl	800036c <__adddf3>
 8011be0:	4642      	mov	r2, r8
 8011be2:	4682      	mov	sl, r0
 8011be4:	468b      	mov	fp, r1
 8011be6:	464b      	mov	r3, r9
 8011be8:	4640      	mov	r0, r8
 8011bea:	4649      	mov	r1, r9
 8011bec:	f7ee fd74 	bl	80006d8 <__aeabi_dmul>
 8011bf0:	4b6b      	ldr	r3, [pc, #428]	; (8011da0 <__ieee754_pow+0x770>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	4606      	mov	r6, r0
 8011bf6:	460f      	mov	r7, r1
 8011bf8:	f7ee fbb8 	bl	800036c <__adddf3>
 8011bfc:	4652      	mov	r2, sl
 8011bfe:	465b      	mov	r3, fp
 8011c00:	f7ee fbb4 	bl	800036c <__adddf3>
 8011c04:	2000      	movs	r0, #0
 8011c06:	4604      	mov	r4, r0
 8011c08:	460d      	mov	r5, r1
 8011c0a:	4602      	mov	r2, r0
 8011c0c:	460b      	mov	r3, r1
 8011c0e:	4640      	mov	r0, r8
 8011c10:	4649      	mov	r1, r9
 8011c12:	f7ee fd61 	bl	80006d8 <__aeabi_dmul>
 8011c16:	4b62      	ldr	r3, [pc, #392]	; (8011da0 <__ieee754_pow+0x770>)
 8011c18:	4680      	mov	r8, r0
 8011c1a:	4689      	mov	r9, r1
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	4620      	mov	r0, r4
 8011c20:	4629      	mov	r1, r5
 8011c22:	f7ee fba1 	bl	8000368 <__aeabi_dsub>
 8011c26:	4632      	mov	r2, r6
 8011c28:	463b      	mov	r3, r7
 8011c2a:	f7ee fb9d 	bl	8000368 <__aeabi_dsub>
 8011c2e:	4602      	mov	r2, r0
 8011c30:	460b      	mov	r3, r1
 8011c32:	4650      	mov	r0, sl
 8011c34:	4659      	mov	r1, fp
 8011c36:	f7ee fb97 	bl	8000368 <__aeabi_dsub>
 8011c3a:	ec53 2b18 	vmov	r2, r3, d8
 8011c3e:	f7ee fd4b 	bl	80006d8 <__aeabi_dmul>
 8011c42:	4622      	mov	r2, r4
 8011c44:	4606      	mov	r6, r0
 8011c46:	460f      	mov	r7, r1
 8011c48:	462b      	mov	r3, r5
 8011c4a:	ec51 0b19 	vmov	r0, r1, d9
 8011c4e:	f7ee fd43 	bl	80006d8 <__aeabi_dmul>
 8011c52:	4602      	mov	r2, r0
 8011c54:	460b      	mov	r3, r1
 8011c56:	4630      	mov	r0, r6
 8011c58:	4639      	mov	r1, r7
 8011c5a:	f7ee fb87 	bl	800036c <__adddf3>
 8011c5e:	4606      	mov	r6, r0
 8011c60:	460f      	mov	r7, r1
 8011c62:	4602      	mov	r2, r0
 8011c64:	460b      	mov	r3, r1
 8011c66:	4640      	mov	r0, r8
 8011c68:	4649      	mov	r1, r9
 8011c6a:	f7ee fb7f 	bl	800036c <__adddf3>
 8011c6e:	a33e      	add	r3, pc, #248	; (adr r3, 8011d68 <__ieee754_pow+0x738>)
 8011c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c74:	2000      	movs	r0, #0
 8011c76:	4604      	mov	r4, r0
 8011c78:	460d      	mov	r5, r1
 8011c7a:	f7ee fd2d 	bl	80006d8 <__aeabi_dmul>
 8011c7e:	4642      	mov	r2, r8
 8011c80:	ec41 0b18 	vmov	d8, r0, r1
 8011c84:	464b      	mov	r3, r9
 8011c86:	4620      	mov	r0, r4
 8011c88:	4629      	mov	r1, r5
 8011c8a:	f7ee fb6d 	bl	8000368 <__aeabi_dsub>
 8011c8e:	4602      	mov	r2, r0
 8011c90:	460b      	mov	r3, r1
 8011c92:	4630      	mov	r0, r6
 8011c94:	4639      	mov	r1, r7
 8011c96:	f7ee fb67 	bl	8000368 <__aeabi_dsub>
 8011c9a:	a335      	add	r3, pc, #212	; (adr r3, 8011d70 <__ieee754_pow+0x740>)
 8011c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca0:	f7ee fd1a 	bl	80006d8 <__aeabi_dmul>
 8011ca4:	a334      	add	r3, pc, #208	; (adr r3, 8011d78 <__ieee754_pow+0x748>)
 8011ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011caa:	4606      	mov	r6, r0
 8011cac:	460f      	mov	r7, r1
 8011cae:	4620      	mov	r0, r4
 8011cb0:	4629      	mov	r1, r5
 8011cb2:	f7ee fd11 	bl	80006d8 <__aeabi_dmul>
 8011cb6:	4602      	mov	r2, r0
 8011cb8:	460b      	mov	r3, r1
 8011cba:	4630      	mov	r0, r6
 8011cbc:	4639      	mov	r1, r7
 8011cbe:	f7ee fb55 	bl	800036c <__adddf3>
 8011cc2:	9a07      	ldr	r2, [sp, #28]
 8011cc4:	4b37      	ldr	r3, [pc, #220]	; (8011da4 <__ieee754_pow+0x774>)
 8011cc6:	4413      	add	r3, r2
 8011cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ccc:	f7ee fb4e 	bl	800036c <__adddf3>
 8011cd0:	4682      	mov	sl, r0
 8011cd2:	9805      	ldr	r0, [sp, #20]
 8011cd4:	468b      	mov	fp, r1
 8011cd6:	f7ee fc95 	bl	8000604 <__aeabi_i2d>
 8011cda:	9a07      	ldr	r2, [sp, #28]
 8011cdc:	4b32      	ldr	r3, [pc, #200]	; (8011da8 <__ieee754_pow+0x778>)
 8011cde:	4413      	add	r3, r2
 8011ce0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011ce4:	4606      	mov	r6, r0
 8011ce6:	460f      	mov	r7, r1
 8011ce8:	4652      	mov	r2, sl
 8011cea:	465b      	mov	r3, fp
 8011cec:	ec51 0b18 	vmov	r0, r1, d8
 8011cf0:	f7ee fb3c 	bl	800036c <__adddf3>
 8011cf4:	4642      	mov	r2, r8
 8011cf6:	464b      	mov	r3, r9
 8011cf8:	f7ee fb38 	bl	800036c <__adddf3>
 8011cfc:	4632      	mov	r2, r6
 8011cfe:	463b      	mov	r3, r7
 8011d00:	f7ee fb34 	bl	800036c <__adddf3>
 8011d04:	2000      	movs	r0, #0
 8011d06:	4632      	mov	r2, r6
 8011d08:	463b      	mov	r3, r7
 8011d0a:	4604      	mov	r4, r0
 8011d0c:	460d      	mov	r5, r1
 8011d0e:	f7ee fb2b 	bl	8000368 <__aeabi_dsub>
 8011d12:	4642      	mov	r2, r8
 8011d14:	464b      	mov	r3, r9
 8011d16:	f7ee fb27 	bl	8000368 <__aeabi_dsub>
 8011d1a:	ec53 2b18 	vmov	r2, r3, d8
 8011d1e:	f7ee fb23 	bl	8000368 <__aeabi_dsub>
 8011d22:	4602      	mov	r2, r0
 8011d24:	460b      	mov	r3, r1
 8011d26:	4650      	mov	r0, sl
 8011d28:	4659      	mov	r1, fp
 8011d2a:	e610      	b.n	801194e <__ieee754_pow+0x31e>
 8011d2c:	2401      	movs	r4, #1
 8011d2e:	e6a1      	b.n	8011a74 <__ieee754_pow+0x444>
 8011d30:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011d80 <__ieee754_pow+0x750>
 8011d34:	e617      	b.n	8011966 <__ieee754_pow+0x336>
 8011d36:	bf00      	nop
 8011d38:	4a454eef 	.word	0x4a454eef
 8011d3c:	3fca7e28 	.word	0x3fca7e28
 8011d40:	93c9db65 	.word	0x93c9db65
 8011d44:	3fcd864a 	.word	0x3fcd864a
 8011d48:	a91d4101 	.word	0xa91d4101
 8011d4c:	3fd17460 	.word	0x3fd17460
 8011d50:	518f264d 	.word	0x518f264d
 8011d54:	3fd55555 	.word	0x3fd55555
 8011d58:	db6fabff 	.word	0xdb6fabff
 8011d5c:	3fdb6db6 	.word	0x3fdb6db6
 8011d60:	33333303 	.word	0x33333303
 8011d64:	3fe33333 	.word	0x3fe33333
 8011d68:	e0000000 	.word	0xe0000000
 8011d6c:	3feec709 	.word	0x3feec709
 8011d70:	dc3a03fd 	.word	0xdc3a03fd
 8011d74:	3feec709 	.word	0x3feec709
 8011d78:	145b01f5 	.word	0x145b01f5
 8011d7c:	be3e2fe0 	.word	0xbe3e2fe0
 8011d80:	00000000 	.word	0x00000000
 8011d84:	3ff00000 	.word	0x3ff00000
 8011d88:	7ff00000 	.word	0x7ff00000
 8011d8c:	43400000 	.word	0x43400000
 8011d90:	0003988e 	.word	0x0003988e
 8011d94:	000bb679 	.word	0x000bb679
 8011d98:	080127e0 	.word	0x080127e0
 8011d9c:	3ff00000 	.word	0x3ff00000
 8011da0:	40080000 	.word	0x40080000
 8011da4:	08012800 	.word	0x08012800
 8011da8:	080127f0 	.word	0x080127f0
 8011dac:	a3b3      	add	r3, pc, #716	; (adr r3, 801207c <__ieee754_pow+0xa4c>)
 8011dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db2:	4640      	mov	r0, r8
 8011db4:	4649      	mov	r1, r9
 8011db6:	f7ee fad9 	bl	800036c <__adddf3>
 8011dba:	4622      	mov	r2, r4
 8011dbc:	ec41 0b1a 	vmov	d10, r0, r1
 8011dc0:	462b      	mov	r3, r5
 8011dc2:	4630      	mov	r0, r6
 8011dc4:	4639      	mov	r1, r7
 8011dc6:	f7ee facf 	bl	8000368 <__aeabi_dsub>
 8011dca:	4602      	mov	r2, r0
 8011dcc:	460b      	mov	r3, r1
 8011dce:	ec51 0b1a 	vmov	r0, r1, d10
 8011dd2:	f7ee ff11 	bl	8000bf8 <__aeabi_dcmpgt>
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	f47f ae04 	bne.w	80119e4 <__ieee754_pow+0x3b4>
 8011ddc:	4aa2      	ldr	r2, [pc, #648]	; (8012068 <__ieee754_pow+0xa38>)
 8011dde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011de2:	4293      	cmp	r3, r2
 8011de4:	f340 8107 	ble.w	8011ff6 <__ieee754_pow+0x9c6>
 8011de8:	151b      	asrs	r3, r3, #20
 8011dea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011dee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011df2:	fa4a fa03 	asr.w	sl, sl, r3
 8011df6:	44da      	add	sl, fp
 8011df8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8011dfc:	489b      	ldr	r0, [pc, #620]	; (801206c <__ieee754_pow+0xa3c>)
 8011dfe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011e02:	4108      	asrs	r0, r1
 8011e04:	ea00 030a 	and.w	r3, r0, sl
 8011e08:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8011e0c:	f1c1 0114 	rsb	r1, r1, #20
 8011e10:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011e14:	fa4a fa01 	asr.w	sl, sl, r1
 8011e18:	f1bb 0f00 	cmp.w	fp, #0
 8011e1c:	f04f 0200 	mov.w	r2, #0
 8011e20:	4620      	mov	r0, r4
 8011e22:	4629      	mov	r1, r5
 8011e24:	bfb8      	it	lt
 8011e26:	f1ca 0a00 	rsblt	sl, sl, #0
 8011e2a:	f7ee fa9d 	bl	8000368 <__aeabi_dsub>
 8011e2e:	ec41 0b19 	vmov	d9, r0, r1
 8011e32:	4642      	mov	r2, r8
 8011e34:	464b      	mov	r3, r9
 8011e36:	ec51 0b19 	vmov	r0, r1, d9
 8011e3a:	f7ee fa97 	bl	800036c <__adddf3>
 8011e3e:	a37a      	add	r3, pc, #488	; (adr r3, 8012028 <__ieee754_pow+0x9f8>)
 8011e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e44:	2000      	movs	r0, #0
 8011e46:	4604      	mov	r4, r0
 8011e48:	460d      	mov	r5, r1
 8011e4a:	f7ee fc45 	bl	80006d8 <__aeabi_dmul>
 8011e4e:	ec53 2b19 	vmov	r2, r3, d9
 8011e52:	4606      	mov	r6, r0
 8011e54:	460f      	mov	r7, r1
 8011e56:	4620      	mov	r0, r4
 8011e58:	4629      	mov	r1, r5
 8011e5a:	f7ee fa85 	bl	8000368 <__aeabi_dsub>
 8011e5e:	4602      	mov	r2, r0
 8011e60:	460b      	mov	r3, r1
 8011e62:	4640      	mov	r0, r8
 8011e64:	4649      	mov	r1, r9
 8011e66:	f7ee fa7f 	bl	8000368 <__aeabi_dsub>
 8011e6a:	a371      	add	r3, pc, #452	; (adr r3, 8012030 <__ieee754_pow+0xa00>)
 8011e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e70:	f7ee fc32 	bl	80006d8 <__aeabi_dmul>
 8011e74:	a370      	add	r3, pc, #448	; (adr r3, 8012038 <__ieee754_pow+0xa08>)
 8011e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e7a:	4680      	mov	r8, r0
 8011e7c:	4689      	mov	r9, r1
 8011e7e:	4620      	mov	r0, r4
 8011e80:	4629      	mov	r1, r5
 8011e82:	f7ee fc29 	bl	80006d8 <__aeabi_dmul>
 8011e86:	4602      	mov	r2, r0
 8011e88:	460b      	mov	r3, r1
 8011e8a:	4640      	mov	r0, r8
 8011e8c:	4649      	mov	r1, r9
 8011e8e:	f7ee fa6d 	bl	800036c <__adddf3>
 8011e92:	4604      	mov	r4, r0
 8011e94:	460d      	mov	r5, r1
 8011e96:	4602      	mov	r2, r0
 8011e98:	460b      	mov	r3, r1
 8011e9a:	4630      	mov	r0, r6
 8011e9c:	4639      	mov	r1, r7
 8011e9e:	f7ee fa65 	bl	800036c <__adddf3>
 8011ea2:	4632      	mov	r2, r6
 8011ea4:	463b      	mov	r3, r7
 8011ea6:	4680      	mov	r8, r0
 8011ea8:	4689      	mov	r9, r1
 8011eaa:	f7ee fa5d 	bl	8000368 <__aeabi_dsub>
 8011eae:	4602      	mov	r2, r0
 8011eb0:	460b      	mov	r3, r1
 8011eb2:	4620      	mov	r0, r4
 8011eb4:	4629      	mov	r1, r5
 8011eb6:	f7ee fa57 	bl	8000368 <__aeabi_dsub>
 8011eba:	4642      	mov	r2, r8
 8011ebc:	4606      	mov	r6, r0
 8011ebe:	460f      	mov	r7, r1
 8011ec0:	464b      	mov	r3, r9
 8011ec2:	4640      	mov	r0, r8
 8011ec4:	4649      	mov	r1, r9
 8011ec6:	f7ee fc07 	bl	80006d8 <__aeabi_dmul>
 8011eca:	a35d      	add	r3, pc, #372	; (adr r3, 8012040 <__ieee754_pow+0xa10>)
 8011ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	460d      	mov	r5, r1
 8011ed4:	f7ee fc00 	bl	80006d8 <__aeabi_dmul>
 8011ed8:	a35b      	add	r3, pc, #364	; (adr r3, 8012048 <__ieee754_pow+0xa18>)
 8011eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ede:	f7ee fa43 	bl	8000368 <__aeabi_dsub>
 8011ee2:	4622      	mov	r2, r4
 8011ee4:	462b      	mov	r3, r5
 8011ee6:	f7ee fbf7 	bl	80006d8 <__aeabi_dmul>
 8011eea:	a359      	add	r3, pc, #356	; (adr r3, 8012050 <__ieee754_pow+0xa20>)
 8011eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef0:	f7ee fa3c 	bl	800036c <__adddf3>
 8011ef4:	4622      	mov	r2, r4
 8011ef6:	462b      	mov	r3, r5
 8011ef8:	f7ee fbee 	bl	80006d8 <__aeabi_dmul>
 8011efc:	a356      	add	r3, pc, #344	; (adr r3, 8012058 <__ieee754_pow+0xa28>)
 8011efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f02:	f7ee fa31 	bl	8000368 <__aeabi_dsub>
 8011f06:	4622      	mov	r2, r4
 8011f08:	462b      	mov	r3, r5
 8011f0a:	f7ee fbe5 	bl	80006d8 <__aeabi_dmul>
 8011f0e:	a354      	add	r3, pc, #336	; (adr r3, 8012060 <__ieee754_pow+0xa30>)
 8011f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f14:	f7ee fa2a 	bl	800036c <__adddf3>
 8011f18:	4622      	mov	r2, r4
 8011f1a:	462b      	mov	r3, r5
 8011f1c:	f7ee fbdc 	bl	80006d8 <__aeabi_dmul>
 8011f20:	4602      	mov	r2, r0
 8011f22:	460b      	mov	r3, r1
 8011f24:	4640      	mov	r0, r8
 8011f26:	4649      	mov	r1, r9
 8011f28:	f7ee fa1e 	bl	8000368 <__aeabi_dsub>
 8011f2c:	4604      	mov	r4, r0
 8011f2e:	460d      	mov	r5, r1
 8011f30:	4602      	mov	r2, r0
 8011f32:	460b      	mov	r3, r1
 8011f34:	4640      	mov	r0, r8
 8011f36:	4649      	mov	r1, r9
 8011f38:	f7ee fbce 	bl	80006d8 <__aeabi_dmul>
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	ec41 0b19 	vmov	d9, r0, r1
 8011f42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011f46:	4620      	mov	r0, r4
 8011f48:	4629      	mov	r1, r5
 8011f4a:	f7ee fa0d 	bl	8000368 <__aeabi_dsub>
 8011f4e:	4602      	mov	r2, r0
 8011f50:	460b      	mov	r3, r1
 8011f52:	ec51 0b19 	vmov	r0, r1, d9
 8011f56:	f7ee fce9 	bl	800092c <__aeabi_ddiv>
 8011f5a:	4632      	mov	r2, r6
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	460d      	mov	r5, r1
 8011f60:	463b      	mov	r3, r7
 8011f62:	4640      	mov	r0, r8
 8011f64:	4649      	mov	r1, r9
 8011f66:	f7ee fbb7 	bl	80006d8 <__aeabi_dmul>
 8011f6a:	4632      	mov	r2, r6
 8011f6c:	463b      	mov	r3, r7
 8011f6e:	f7ee f9fd 	bl	800036c <__adddf3>
 8011f72:	4602      	mov	r2, r0
 8011f74:	460b      	mov	r3, r1
 8011f76:	4620      	mov	r0, r4
 8011f78:	4629      	mov	r1, r5
 8011f7a:	f7ee f9f5 	bl	8000368 <__aeabi_dsub>
 8011f7e:	4642      	mov	r2, r8
 8011f80:	464b      	mov	r3, r9
 8011f82:	f7ee f9f1 	bl	8000368 <__aeabi_dsub>
 8011f86:	460b      	mov	r3, r1
 8011f88:	4602      	mov	r2, r0
 8011f8a:	4939      	ldr	r1, [pc, #228]	; (8012070 <__ieee754_pow+0xa40>)
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	f7ee f9eb 	bl	8000368 <__aeabi_dsub>
 8011f92:	ec41 0b10 	vmov	d0, r0, r1
 8011f96:	ee10 3a90 	vmov	r3, s1
 8011f9a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011fa2:	da2b      	bge.n	8011ffc <__ieee754_pow+0x9cc>
 8011fa4:	4650      	mov	r0, sl
 8011fa6:	f000 f877 	bl	8012098 <scalbn>
 8011faa:	ec51 0b10 	vmov	r0, r1, d0
 8011fae:	ec53 2b18 	vmov	r2, r3, d8
 8011fb2:	f7ff bbee 	b.w	8011792 <__ieee754_pow+0x162>
 8011fb6:	4b2f      	ldr	r3, [pc, #188]	; (8012074 <__ieee754_pow+0xa44>)
 8011fb8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011fbc:	429e      	cmp	r6, r3
 8011fbe:	f77f af0d 	ble.w	8011ddc <__ieee754_pow+0x7ac>
 8011fc2:	4b2d      	ldr	r3, [pc, #180]	; (8012078 <__ieee754_pow+0xa48>)
 8011fc4:	440b      	add	r3, r1
 8011fc6:	4303      	orrs	r3, r0
 8011fc8:	d009      	beq.n	8011fde <__ieee754_pow+0x9ae>
 8011fca:	ec51 0b18 	vmov	r0, r1, d8
 8011fce:	2200      	movs	r2, #0
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	f7ee fdf3 	bl	8000bbc <__aeabi_dcmplt>
 8011fd6:	3800      	subs	r0, #0
 8011fd8:	bf18      	it	ne
 8011fda:	2001      	movne	r0, #1
 8011fdc:	e448      	b.n	8011870 <__ieee754_pow+0x240>
 8011fde:	4622      	mov	r2, r4
 8011fe0:	462b      	mov	r3, r5
 8011fe2:	f7ee f9c1 	bl	8000368 <__aeabi_dsub>
 8011fe6:	4642      	mov	r2, r8
 8011fe8:	464b      	mov	r3, r9
 8011fea:	f7ee fdfb 	bl	8000be4 <__aeabi_dcmpge>
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	f43f aef4 	beq.w	8011ddc <__ieee754_pow+0x7ac>
 8011ff4:	e7e9      	b.n	8011fca <__ieee754_pow+0x99a>
 8011ff6:	f04f 0a00 	mov.w	sl, #0
 8011ffa:	e71a      	b.n	8011e32 <__ieee754_pow+0x802>
 8011ffc:	ec51 0b10 	vmov	r0, r1, d0
 8012000:	4619      	mov	r1, r3
 8012002:	e7d4      	b.n	8011fae <__ieee754_pow+0x97e>
 8012004:	491a      	ldr	r1, [pc, #104]	; (8012070 <__ieee754_pow+0xa40>)
 8012006:	2000      	movs	r0, #0
 8012008:	f7ff bb31 	b.w	801166e <__ieee754_pow+0x3e>
 801200c:	2000      	movs	r0, #0
 801200e:	2100      	movs	r1, #0
 8012010:	f7ff bb2d 	b.w	801166e <__ieee754_pow+0x3e>
 8012014:	4630      	mov	r0, r6
 8012016:	4639      	mov	r1, r7
 8012018:	f7ff bb29 	b.w	801166e <__ieee754_pow+0x3e>
 801201c:	9204      	str	r2, [sp, #16]
 801201e:	f7ff bb7b 	b.w	8011718 <__ieee754_pow+0xe8>
 8012022:	2300      	movs	r3, #0
 8012024:	f7ff bb65 	b.w	80116f2 <__ieee754_pow+0xc2>
 8012028:	00000000 	.word	0x00000000
 801202c:	3fe62e43 	.word	0x3fe62e43
 8012030:	fefa39ef 	.word	0xfefa39ef
 8012034:	3fe62e42 	.word	0x3fe62e42
 8012038:	0ca86c39 	.word	0x0ca86c39
 801203c:	be205c61 	.word	0xbe205c61
 8012040:	72bea4d0 	.word	0x72bea4d0
 8012044:	3e663769 	.word	0x3e663769
 8012048:	c5d26bf1 	.word	0xc5d26bf1
 801204c:	3ebbbd41 	.word	0x3ebbbd41
 8012050:	af25de2c 	.word	0xaf25de2c
 8012054:	3f11566a 	.word	0x3f11566a
 8012058:	16bebd93 	.word	0x16bebd93
 801205c:	3f66c16c 	.word	0x3f66c16c
 8012060:	5555553e 	.word	0x5555553e
 8012064:	3fc55555 	.word	0x3fc55555
 8012068:	3fe00000 	.word	0x3fe00000
 801206c:	fff00000 	.word	0xfff00000
 8012070:	3ff00000 	.word	0x3ff00000
 8012074:	4090cbff 	.word	0x4090cbff
 8012078:	3f6f3400 	.word	0x3f6f3400
 801207c:	652b82fe 	.word	0x652b82fe
 8012080:	3c971547 	.word	0x3c971547

08012084 <fabs>:
 8012084:	ec51 0b10 	vmov	r0, r1, d0
 8012088:	ee10 2a10 	vmov	r2, s0
 801208c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012090:	ec43 2b10 	vmov	d0, r2, r3
 8012094:	4770      	bx	lr
	...

08012098 <scalbn>:
 8012098:	b570      	push	{r4, r5, r6, lr}
 801209a:	ec55 4b10 	vmov	r4, r5, d0
 801209e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80120a2:	4606      	mov	r6, r0
 80120a4:	462b      	mov	r3, r5
 80120a6:	b999      	cbnz	r1, 80120d0 <scalbn+0x38>
 80120a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80120ac:	4323      	orrs	r3, r4
 80120ae:	d03f      	beq.n	8012130 <scalbn+0x98>
 80120b0:	4b35      	ldr	r3, [pc, #212]	; (8012188 <scalbn+0xf0>)
 80120b2:	4629      	mov	r1, r5
 80120b4:	ee10 0a10 	vmov	r0, s0
 80120b8:	2200      	movs	r2, #0
 80120ba:	f7ee fb0d 	bl	80006d8 <__aeabi_dmul>
 80120be:	4b33      	ldr	r3, [pc, #204]	; (801218c <scalbn+0xf4>)
 80120c0:	429e      	cmp	r6, r3
 80120c2:	4604      	mov	r4, r0
 80120c4:	460d      	mov	r5, r1
 80120c6:	da10      	bge.n	80120ea <scalbn+0x52>
 80120c8:	a327      	add	r3, pc, #156	; (adr r3, 8012168 <scalbn+0xd0>)
 80120ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ce:	e01f      	b.n	8012110 <scalbn+0x78>
 80120d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80120d4:	4291      	cmp	r1, r2
 80120d6:	d10c      	bne.n	80120f2 <scalbn+0x5a>
 80120d8:	ee10 2a10 	vmov	r2, s0
 80120dc:	4620      	mov	r0, r4
 80120de:	4629      	mov	r1, r5
 80120e0:	f7ee f944 	bl	800036c <__adddf3>
 80120e4:	4604      	mov	r4, r0
 80120e6:	460d      	mov	r5, r1
 80120e8:	e022      	b.n	8012130 <scalbn+0x98>
 80120ea:	460b      	mov	r3, r1
 80120ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80120f0:	3936      	subs	r1, #54	; 0x36
 80120f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80120f6:	4296      	cmp	r6, r2
 80120f8:	dd0d      	ble.n	8012116 <scalbn+0x7e>
 80120fa:	2d00      	cmp	r5, #0
 80120fc:	a11c      	add	r1, pc, #112	; (adr r1, 8012170 <scalbn+0xd8>)
 80120fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012102:	da02      	bge.n	801210a <scalbn+0x72>
 8012104:	a11c      	add	r1, pc, #112	; (adr r1, 8012178 <scalbn+0xe0>)
 8012106:	e9d1 0100 	ldrd	r0, r1, [r1]
 801210a:	a319      	add	r3, pc, #100	; (adr r3, 8012170 <scalbn+0xd8>)
 801210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012110:	f7ee fae2 	bl	80006d8 <__aeabi_dmul>
 8012114:	e7e6      	b.n	80120e4 <scalbn+0x4c>
 8012116:	1872      	adds	r2, r6, r1
 8012118:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801211c:	428a      	cmp	r2, r1
 801211e:	dcec      	bgt.n	80120fa <scalbn+0x62>
 8012120:	2a00      	cmp	r2, #0
 8012122:	dd08      	ble.n	8012136 <scalbn+0x9e>
 8012124:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012128:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801212c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012130:	ec45 4b10 	vmov	d0, r4, r5
 8012134:	bd70      	pop	{r4, r5, r6, pc}
 8012136:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801213a:	da08      	bge.n	801214e <scalbn+0xb6>
 801213c:	2d00      	cmp	r5, #0
 801213e:	a10a      	add	r1, pc, #40	; (adr r1, 8012168 <scalbn+0xd0>)
 8012140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012144:	dac0      	bge.n	80120c8 <scalbn+0x30>
 8012146:	a10e      	add	r1, pc, #56	; (adr r1, 8012180 <scalbn+0xe8>)
 8012148:	e9d1 0100 	ldrd	r0, r1, [r1]
 801214c:	e7bc      	b.n	80120c8 <scalbn+0x30>
 801214e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012152:	3236      	adds	r2, #54	; 0x36
 8012154:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012158:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801215c:	4620      	mov	r0, r4
 801215e:	4b0c      	ldr	r3, [pc, #48]	; (8012190 <scalbn+0xf8>)
 8012160:	2200      	movs	r2, #0
 8012162:	e7d5      	b.n	8012110 <scalbn+0x78>
 8012164:	f3af 8000 	nop.w
 8012168:	c2f8f359 	.word	0xc2f8f359
 801216c:	01a56e1f 	.word	0x01a56e1f
 8012170:	8800759c 	.word	0x8800759c
 8012174:	7e37e43c 	.word	0x7e37e43c
 8012178:	8800759c 	.word	0x8800759c
 801217c:	fe37e43c 	.word	0xfe37e43c
 8012180:	c2f8f359 	.word	0xc2f8f359
 8012184:	81a56e1f 	.word	0x81a56e1f
 8012188:	43500000 	.word	0x43500000
 801218c:	ffff3cb0 	.word	0xffff3cb0
 8012190:	3c900000 	.word	0x3c900000

08012194 <with_errno>:
 8012194:	b570      	push	{r4, r5, r6, lr}
 8012196:	4604      	mov	r4, r0
 8012198:	460d      	mov	r5, r1
 801219a:	4616      	mov	r6, r2
 801219c:	f7fc fffe 	bl	800f19c <__errno>
 80121a0:	4629      	mov	r1, r5
 80121a2:	6006      	str	r6, [r0, #0]
 80121a4:	4620      	mov	r0, r4
 80121a6:	bd70      	pop	{r4, r5, r6, pc}

080121a8 <xflow>:
 80121a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121aa:	4614      	mov	r4, r2
 80121ac:	461d      	mov	r5, r3
 80121ae:	b108      	cbz	r0, 80121b4 <xflow+0xc>
 80121b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80121b4:	e9cd 2300 	strd	r2, r3, [sp]
 80121b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80121bc:	4620      	mov	r0, r4
 80121be:	4629      	mov	r1, r5
 80121c0:	f7ee fa8a 	bl	80006d8 <__aeabi_dmul>
 80121c4:	2222      	movs	r2, #34	; 0x22
 80121c6:	b003      	add	sp, #12
 80121c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121cc:	f7ff bfe2 	b.w	8012194 <with_errno>

080121d0 <__math_uflow>:
 80121d0:	b508      	push	{r3, lr}
 80121d2:	2200      	movs	r2, #0
 80121d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80121d8:	f7ff ffe6 	bl	80121a8 <xflow>
 80121dc:	ec41 0b10 	vmov	d0, r0, r1
 80121e0:	bd08      	pop	{r3, pc}

080121e2 <__math_oflow>:
 80121e2:	b508      	push	{r3, lr}
 80121e4:	2200      	movs	r2, #0
 80121e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80121ea:	f7ff ffdd 	bl	80121a8 <xflow>
 80121ee:	ec41 0b10 	vmov	d0, r0, r1
 80121f2:	bd08      	pop	{r3, pc}

080121f4 <_sbrk>:
 80121f4:	4a04      	ldr	r2, [pc, #16]	; (8012208 <_sbrk+0x14>)
 80121f6:	6811      	ldr	r1, [r2, #0]
 80121f8:	4603      	mov	r3, r0
 80121fa:	b909      	cbnz	r1, 8012200 <_sbrk+0xc>
 80121fc:	4903      	ldr	r1, [pc, #12]	; (801220c <_sbrk+0x18>)
 80121fe:	6011      	str	r1, [r2, #0]
 8012200:	6810      	ldr	r0, [r2, #0]
 8012202:	4403      	add	r3, r0
 8012204:	6013      	str	r3, [r2, #0]
 8012206:	4770      	bx	lr
 8012208:	2001a464 	.word	0x2001a464
 801220c:	2001a468 	.word	0x2001a468

08012210 <_init>:
 8012210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012212:	bf00      	nop
 8012214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012216:	bc08      	pop	{r3}
 8012218:	469e      	mov	lr, r3
 801221a:	4770      	bx	lr

0801221c <_fini>:
 801221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801221e:	bf00      	nop
 8012220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012222:	bc08      	pop	{r3}
 8012224:	469e      	mov	lr, r3
 8012226:	4770      	bx	lr
