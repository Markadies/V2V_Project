
First_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c828  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800c9f8  0800c9f8  0001c9f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cebc  0800cebc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cebc  0800cebc  0001cebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cec4  0800cec4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cec4  0800cec4  0001cec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cec8  0800cec8  0001cec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800cecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013b10  200001dc  0800d0a8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013cec  0800d0a8  00023cec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f809  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a1b  00000000  00000000  0003fa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c80  00000000  00000000  00044478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001628  00000000  00000000  000460f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000694e  00000000  00000000  00047720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002421a  00000000  00000000  0004e06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5aaa  00000000  00000000  00072288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008710  00000000  00000000  00157d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00160444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c9e0 	.word	0x0800c9e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800c9e0 	.word	0x0800c9e0

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200135d0 	.word	0x200135d0
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <strlen>:
 8000350:	4603      	mov	r3, r0
 8000352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000356:	2a00      	cmp	r2, #0
 8000358:	d1fb      	bne.n	8000352 <strlen+0x2>
 800035a:	1a18      	subs	r0, r3, r0
 800035c:	3801      	subs	r0, #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	; 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2iz>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c40:	d215      	bcs.n	8000c6e <__aeabi_d2iz+0x36>
 8000c42:	d511      	bpl.n	8000c68 <__aeabi_d2iz+0x30>
 8000c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d912      	bls.n	8000c74 <__aeabi_d2iz+0x3c>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	4770      	bx	lr
 8000c68:	f04f 0000 	mov.w	r0, #0
 8000c6c:	4770      	bx	lr
 8000c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c72:	d105      	bne.n	8000c80 <__aeabi_d2iz+0x48>
 8000c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	bf08      	it	eq
 8000c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2uiz>:
 8000c88:	004a      	lsls	r2, r1, #1
 8000c8a:	d211      	bcs.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c90:	d211      	bcs.n	8000cb6 <__aeabi_d2uiz+0x2e>
 8000c92:	d50d      	bpl.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c9c:	d40e      	bmi.n	8000cbc <__aeabi_d2uiz+0x34>
 8000c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000caa:	fa23 f002 	lsr.w	r0, r3, r2
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cba:	d102      	bne.n	8000cc2 <__aeabi_d2uiz+0x3a>
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	4770      	bx	lr
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2f>:
 8000cc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ccc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cd0:	bf24      	itt	cs
 8000cd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cda:	d90d      	bls.n	8000cf8 <__aeabi_d2f+0x30>
 8000cdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ce0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ce4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ce8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cfc:	d121      	bne.n	8000d42 <__aeabi_d2f+0x7a>
 8000cfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d02:	bfbc      	itt	lt
 8000d04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d08:	4770      	bxlt	lr
 8000d0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d12:	f1c2 0218 	rsb	r2, r2, #24
 8000d16:	f1c2 0c20 	rsb	ip, r2, #32
 8000d1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d22:	bf18      	it	ne
 8000d24:	f040 0001 	orrne.w	r0, r0, #1
 8000d28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d34:	ea40 000c 	orr.w	r0, r0, ip
 8000d38:	fa23 f302 	lsr.w	r3, r3, r2
 8000d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d40:	e7cc      	b.n	8000cdc <__aeabi_d2f+0x14>
 8000d42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d46:	d107      	bne.n	8000d58 <__aeabi_d2f+0x90>
 8000d48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d56:	4770      	bxne	lr
 8000d58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b970 	b.w	8001060 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f806 	bl	8000d98 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__udivmoddi4>:
 8000d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d9c:	9e08      	ldr	r6, [sp, #32]
 8000d9e:	460d      	mov	r5, r1
 8000da0:	4604      	mov	r4, r0
 8000da2:	460f      	mov	r7, r1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d14a      	bne.n	8000e3e <__udivmoddi4+0xa6>
 8000da8:	428a      	cmp	r2, r1
 8000daa:	4694      	mov	ip, r2
 8000dac:	d965      	bls.n	8000e7a <__udivmoddi4+0xe2>
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	b143      	cbz	r3, 8000dc6 <__udivmoddi4+0x2e>
 8000db4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db8:	f1c3 0220 	rsb	r2, r3, #32
 8000dbc:	409f      	lsls	r7, r3
 8000dbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	409c      	lsls	r4, r3
 8000dc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dca:	fa1f f58c 	uxth.w	r5, ip
 8000dce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dd2:	0c22      	lsrs	r2, r4, #16
 8000dd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ddc:	fb01 f005 	mul.w	r0, r1, r5
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x62>
 8000de4:	eb1c 0202 	adds.w	r2, ip, r2
 8000de8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dec:	f080 811c 	bcs.w	8001028 <__udivmoddi4+0x290>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f240 8119 	bls.w	8001028 <__udivmoddi4+0x290>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a12      	subs	r2, r2, r0
 8000dfc:	b2a4      	uxth	r4, r4
 8000dfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0a:	fb00 f505 	mul.w	r5, r0, r5
 8000e0e:	42a5      	cmp	r5, r4
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x90>
 8000e12:	eb1c 0404 	adds.w	r4, ip, r4
 8000e16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x294>
 8000e1e:	42a5      	cmp	r5, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x294>
 8000e24:	4464      	add	r4, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11e      	cbz	r6, 8000e3a <__udivmoddi4+0xa2>
 8000e32:	40dc      	lsrs	r4, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0xbc>
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	f000 80ed 	beq.w	8001022 <__udivmoddi4+0x28a>
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e54:	fab3 f183 	clz	r1, r3
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d149      	bne.n	8000ef0 <__udivmoddi4+0x158>
 8000e5c:	42ab      	cmp	r3, r5
 8000e5e:	d302      	bcc.n	8000e66 <__udivmoddi4+0xce>
 8000e60:	4282      	cmp	r2, r0
 8000e62:	f200 80f8 	bhi.w	8001056 <__udivmoddi4+0x2be>
 8000e66:	1a84      	subs	r4, r0, r2
 8000e68:	eb65 0203 	sbc.w	r2, r5, r3
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4617      	mov	r7, r2
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d0e2      	beq.n	8000e3a <__udivmoddi4+0xa2>
 8000e74:	e9c6 4700 	strd	r4, r7, [r6]
 8000e78:	e7df      	b.n	8000e3a <__udivmoddi4+0xa2>
 8000e7a:	b902      	cbnz	r2, 8000e7e <__udivmoddi4+0xe6>
 8000e7c:	deff      	udf	#255	; 0xff
 8000e7e:	fab2 f382 	clz	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8090 	bne.w	8000fa8 <__udivmoddi4+0x210>
 8000e88:	1a8a      	subs	r2, r1, r2
 8000e8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	2101      	movs	r1, #1
 8000e94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e98:	fb07 2015 	mls	r0, r7, r5, r2
 8000e9c:	0c22      	lsrs	r2, r4, #16
 8000e9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ea2:	fb0e f005 	mul.w	r0, lr, r5
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x124>
 8000eaa:	eb1c 0202 	adds.w	r2, ip, r2
 8000eae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x122>
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	f200 80cb 	bhi.w	8001050 <__udivmoddi4+0x2b8>
 8000eba:	4645      	mov	r5, r8
 8000ebc:	1a12      	subs	r2, r2, r0
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ec4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ecc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed0:	45a6      	cmp	lr, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x14e>
 8000ed4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000edc:	d202      	bcs.n	8000ee4 <__udivmoddi4+0x14c>
 8000ede:	45a6      	cmp	lr, r4
 8000ee0:	f200 80bb 	bhi.w	800105a <__udivmoddi4+0x2c2>
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	eba4 040e 	sub.w	r4, r4, lr
 8000eea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eee:	e79f      	b.n	8000e30 <__udivmoddi4+0x98>
 8000ef0:	f1c1 0720 	rsb	r7, r1, #32
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000efe:	fa05 f401 	lsl.w	r4, r5, r1
 8000f02:	fa20 f307 	lsr.w	r3, r0, r7
 8000f06:	40fd      	lsrs	r5, r7
 8000f08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	fb09 5518 	mls	r5, r9, r8, r5
 8000f1a:	0c1c      	lsrs	r4, r3, #16
 8000f1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f20:	fb08 f50e 	mul.w	r5, r8, lr
 8000f24:	42a5      	cmp	r5, r4
 8000f26:	fa02 f201 	lsl.w	r2, r2, r1
 8000f2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f2e:	d90b      	bls.n	8000f48 <__udivmoddi4+0x1b0>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f38:	f080 8088 	bcs.w	800104c <__udivmoddi4+0x2b4>
 8000f3c:	42a5      	cmp	r5, r4
 8000f3e:	f240 8085 	bls.w	800104c <__udivmoddi4+0x2b4>
 8000f42:	f1a8 0802 	sub.w	r8, r8, #2
 8000f46:	4464      	add	r4, ip
 8000f48:	1b64      	subs	r4, r4, r5
 8000f4a:	b29d      	uxth	r5, r3
 8000f4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f50:	fb09 4413 	mls	r4, r9, r3, r4
 8000f54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x1da>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f68:	d26c      	bcs.n	8001044 <__udivmoddi4+0x2ac>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	d96a      	bls.n	8001044 <__udivmoddi4+0x2ac>
 8000f6e:	3b02      	subs	r3, #2
 8000f70:	4464      	add	r4, ip
 8000f72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f76:	fba3 9502 	umull	r9, r5, r3, r2
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	42ac      	cmp	r4, r5
 8000f80:	46c8      	mov	r8, r9
 8000f82:	46ae      	mov	lr, r5
 8000f84:	d356      	bcc.n	8001034 <__udivmoddi4+0x29c>
 8000f86:	d053      	beq.n	8001030 <__udivmoddi4+0x298>
 8000f88:	b156      	cbz	r6, 8000fa0 <__udivmoddi4+0x208>
 8000f8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f92:	fa04 f707 	lsl.w	r7, r4, r7
 8000f96:	40ca      	lsrs	r2, r1
 8000f98:	40cc      	lsrs	r4, r1
 8000f9a:	4317      	orrs	r7, r2
 8000f9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa8:	f1c3 0120 	rsb	r1, r3, #32
 8000fac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000fb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000fb8:	409d      	lsls	r5, r3
 8000fba:	432a      	orrs	r2, r5
 8000fbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc0:	fa1f fe8c 	uxth.w	lr, ip
 8000fc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fcc:	0c11      	lsrs	r1, r2, #16
 8000fce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fd2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fd6:	428d      	cmp	r5, r1
 8000fd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x258>
 8000fde:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fe6:	d22f      	bcs.n	8001048 <__udivmoddi4+0x2b0>
 8000fe8:	428d      	cmp	r5, r1
 8000fea:	d92d      	bls.n	8001048 <__udivmoddi4+0x2b0>
 8000fec:	3802      	subs	r0, #2
 8000fee:	4461      	add	r1, ip
 8000ff0:	1b49      	subs	r1, r1, r5
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ff8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	fb05 f10e 	mul.w	r1, r5, lr
 8001004:	4291      	cmp	r1, r2
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x282>
 8001008:	eb1c 0202 	adds.w	r2, ip, r2
 800100c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001010:	d216      	bcs.n	8001040 <__udivmoddi4+0x2a8>
 8001012:	4291      	cmp	r1, r2
 8001014:	d914      	bls.n	8001040 <__udivmoddi4+0x2a8>
 8001016:	3d02      	subs	r5, #2
 8001018:	4462      	add	r2, ip
 800101a:	1a52      	subs	r2, r2, r1
 800101c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001020:	e738      	b.n	8000e94 <__udivmoddi4+0xfc>
 8001022:	4631      	mov	r1, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e708      	b.n	8000e3a <__udivmoddi4+0xa2>
 8001028:	4639      	mov	r1, r7
 800102a:	e6e6      	b.n	8000dfa <__udivmoddi4+0x62>
 800102c:	4610      	mov	r0, r2
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x90>
 8001030:	4548      	cmp	r0, r9
 8001032:	d2a9      	bcs.n	8000f88 <__udivmoddi4+0x1f0>
 8001034:	ebb9 0802 	subs.w	r8, r9, r2
 8001038:	eb65 0e0c 	sbc.w	lr, r5, ip
 800103c:	3b01      	subs	r3, #1
 800103e:	e7a3      	b.n	8000f88 <__udivmoddi4+0x1f0>
 8001040:	4645      	mov	r5, r8
 8001042:	e7ea      	b.n	800101a <__udivmoddi4+0x282>
 8001044:	462b      	mov	r3, r5
 8001046:	e794      	b.n	8000f72 <__udivmoddi4+0x1da>
 8001048:	4640      	mov	r0, r8
 800104a:	e7d1      	b.n	8000ff0 <__udivmoddi4+0x258>
 800104c:	46d0      	mov	r8, sl
 800104e:	e77b      	b.n	8000f48 <__udivmoddi4+0x1b0>
 8001050:	3d02      	subs	r5, #2
 8001052:	4462      	add	r2, ip
 8001054:	e732      	b.n	8000ebc <__udivmoddi4+0x124>
 8001056:	4608      	mov	r0, r1
 8001058:	e70a      	b.n	8000e70 <__udivmoddi4+0xd8>
 800105a:	4464      	add	r4, ip
 800105c:	3802      	subs	r0, #2
 800105e:	e742      	b.n	8000ee6 <__udivmoddi4+0x14e>

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <Buzzer_voidHighSound>:
#endif


}
void Buzzer_voidHighSound(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0


#endif
#elif Buzzer_Timer_Connected == TIMER12
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1
	TIM12->CCR1=90;
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <Buzzer_voidHighSound+0x18>)
 800106a:	225a      	movs	r2, #90	; 0x5a
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 800106e:	2100      	movs	r1, #0
 8001070:	4803      	ldr	r0, [pc, #12]	; (8001080 <Buzzer_voidHighSound+0x1c>)
 8001072:	f003 fabd 	bl	80045f0 <HAL_TIM_PWM_Start>

#endif



}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40001800 	.word	0x40001800
 8001080:	200005e0 	.word	0x200005e0

08001084 <HAL_TIM_IC_CaptureCallback>:


/***************************************Interrupts_Call_Backs********************************************************/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001094:	d10c      	bne.n	80010b0 <HAL_TIM_IC_CaptureCallback+0x2c>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7f1b      	ldrb	r3, [r3, #28]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d003      	beq.n	80010a6 <HAL_TIM_IC_CaptureCallback+0x22>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7f1b      	ldrb	r3, [r3, #28]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d104      	bne.n	80010b0 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		edges_counter++;
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_TIM_IC_CaptureCallback+0x38>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_TIM_IC_CaptureCallback+0x38>)
 80010ae:	6013      	str	r3, [r2, #0]
	}
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	200001f8 	.word	0x200001f8

080010c0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	/*BT interrupt*/
	if(huart->Instance==USART3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <HAL_UART_RxCpltCallback+0x24>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d104      	bne.n	80010dc <HAL_UART_RxCpltCallback+0x1c>
	{
		HAL_UART_Receive_IT(&huart3, &received_char, 1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	4904      	ldr	r1, [pc, #16]	; (80010e8 <HAL_UART_RxCpltCallback+0x28>)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <HAL_UART_RxCpltCallback+0x2c>)
 80010d8:	f004 fa11 	bl	80054fe <HAL_UART_Receive_IT>

		/*Give the semaphore*/

	}
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40004800 	.word	0x40004800
 80010e8:	20000738 	.word	0x20000738
 80010ec:	200006b0 	.word	0x200006b0

080010f0 <vApplicationIdleHook>:

/*********************************************Application_Hook*************************************************************/
void vApplicationIdleHook(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	/*The processer will go to sleep in the IDLE Task*/
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80010f4:	2101      	movs	r1, #1
 80010f6:	2000      	movs	r0, #0
 80010f8:	f002 fb6c 	bl	80037d4 <HAL_PWR_EnterSLEEPMode>

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <LCD_HighLightIntensity_Warning>:

/***************************************Static Functions Definition***********************************************/
static void LCD_Print_WarningSign(void);

void LCD_HighLightIntensity_Warning()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0

	/*Printing the warning sign*/
	LCD_Print_WarningSign();
 8001104:	f000 f82c 	bl	8001160 <LCD_Print_WarningSign>

	/*Printing the warning message to the driver*/
	LCD_voidSetPositionXY(1,0);
 8001108:	2100      	movs	r1, #0
 800110a:	2001      	movs	r0, #1
 800110c:	f000 f986 	bl	800141c <LCD_voidSetPositionXY>
	LCD_voidSendString("Dim your");
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <LCD_HighLightIntensity_Warning+0x28>)
 8001112:	f000 f967 	bl	80013e4 <LCD_voidSendString>

	LCD_voidSetPositionXY(2,0);
 8001116:	2100      	movs	r1, #0
 8001118:	2002      	movs	r0, #2
 800111a:	f000 f97f 	bl	800141c <LCD_voidSetPositionXY>
	LCD_voidSendString("Light ASAP!");
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <LCD_HighLightIntensity_Warning+0x2c>)
 8001120:	f000 f960 	bl	80013e4 <LCD_voidSendString>

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800c9f8 	.word	0x0800c9f8
 800112c:	0800ca04 	.word	0x0800ca04

08001130 <LCD_AvoidHardBraking>:


void LCD_AvoidHardBraking(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	/*Printing the warning sign*/
	LCD_Print_WarningSign();
 8001134:	f000 f814 	bl	8001160 <LCD_Print_WarningSign>

	/*Printing the warning message to the driver*/
	LCD_voidSetPositionXY(1,0);
 8001138:	2100      	movs	r1, #0
 800113a:	2001      	movs	r0, #1
 800113c:	f000 f96e 	bl	800141c <LCD_voidSetPositionXY>
	LCD_voidSendString("Hit Brakes");
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <LCD_AvoidHardBraking+0x28>)
 8001142:	f000 f94f 	bl	80013e4 <LCD_voidSendString>

	LCD_voidSetPositionXY(2,3);
 8001146:	2103      	movs	r1, #3
 8001148:	2002      	movs	r0, #2
 800114a:	f000 f967 	bl	800141c <LCD_voidSetPositionXY>
	LCD_voidSendString("ASAP!!!");
 800114e:	4803      	ldr	r0, [pc, #12]	; (800115c <LCD_AvoidHardBraking+0x2c>)
 8001150:	f000 f948 	bl	80013e4 <LCD_voidSendString>

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	0800ca10 	.word	0x0800ca10
 800115c:	0800ca1c 	.word	0x0800ca1c

08001160 <LCD_Print_WarningSign>:
	LCD_voidSendString("Slow Down");


}
static void LCD_Print_WarningSign(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b096      	sub	sp, #88	; 0x58
 8001164:	af00      	add	r7, sp, #0
	/*Saving the elemetents of each block of the LCD in multiple arrays to be sent to the special charachter function*/

	uint8_t LCD_R1_C16_Array[8] =
 8001166:	4a4e      	ldr	r2, [pc, #312]	; (80012a0 <LCD_Print_WarningSign+0x140>)
 8001168:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800116c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001170:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00001110,
			0b00001110,
			0b00001110
	};
	uint8_t LCD_R1_C15_Array[8] =
 8001174:	4a4b      	ldr	r2, [pc, #300]	; (80012a4 <LCD_Print_WarningSign+0x144>)
 8001176:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800117a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800117e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00010000,
			0b00000000
	};

	uint8_t LCD_R1_C14_Array[8] =
 8001182:	4a49      	ldr	r2, [pc, #292]	; (80012a8 <LCD_Print_WarningSign+0x148>)
 8001184:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001188:	e892 0003 	ldmia.w	r2, {r0, r1}
 800118c:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00000001
	};
	uint8_t LCD_R1_C18_Array[8] =
 8001190:	4a46      	ldr	r2, [pc, #280]	; (80012ac <LCD_Print_WarningSign+0x14c>)
 8001192:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001196:	e892 0003 	ldmia.w	r2, {r0, r1}
 800119a:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00010000
	};
	uint8_t LCD_R2_C14_Array[8] =
 800119e:	4a44      	ldr	r2, [pc, #272]	; (80012b0 <LCD_Print_WarningSign+0x150>)
 80011a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011a8:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	uint8_t LCD_R2_C18_Array[8] =
 80011ac:	4a41      	ldr	r2, [pc, #260]	; (80012b4 <LCD_Print_WarningSign+0x154>)
 80011ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b6:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C13_Array[8] =
 80011ba:	4a3f      	ldr	r2, [pc, #252]	; (80012b8 <LCD_Print_WarningSign+0x158>)
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c4:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000010,
			0b00000100,
			0b00001000,
			0b00011111
	};
	uint8_t LCD_R2_C19_Array[8] =
 80011c8:	4a3c      	ldr	r2, [pc, #240]	; (80012bc <LCD_Print_WarningSign+0x15c>)
 80011ca:	f107 0318 	add.w	r3, r7, #24
 80011ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d2:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00000100,
			0b00000010,
			0b00011111
	};
	uint8_t LCD_R2_C15_Array[8] =
 80011d6:	4a3a      	ldr	r2, [pc, #232]	; (80012c0 <LCD_Print_WarningSign+0x160>)
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e0:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C17_Array[8] =
 80011e4:	4a36      	ldr	r2, [pc, #216]	; (80012c0 <LCD_Print_WarningSign+0x160>)
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ee:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C16_Array[8] =
 80011f2:	4a34      	ldr	r2, [pc, #208]	; (80012c4 <LCD_Print_WarningSign+0x164>)
 80011f4:	463b      	mov	r3, r7
 80011f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011fa:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	LCD_voidDrawSpecialCharachter(&LCD_R1_C14_Array, 0, 1, 14);
 80011fe:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001202:	230e      	movs	r3, #14
 8001204:	2201      	movs	r2, #1
 8001206:	2100      	movs	r1, #0
 8001208:	f000 f94e 	bl	80014a8 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C15_Array, 0, 1, 15);
 800120c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001210:	230f      	movs	r3, #15
 8001212:	2201      	movs	r2, #1
 8001214:	2100      	movs	r1, #0
 8001216:	f000 f947 	bl	80014a8 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C16_Array, 0, 1, 16);
 800121a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800121e:	2310      	movs	r3, #16
 8001220:	2201      	movs	r2, #1
 8001222:	2100      	movs	r1, #0
 8001224:	f000 f940 	bl	80014a8 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C18_Array, 0, 1, 18);
 8001228:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800122c:	2312      	movs	r3, #18
 800122e:	2201      	movs	r2, #1
 8001230:	2100      	movs	r1, #0
 8001232:	f000 f939 	bl	80014a8 <LCD_voidDrawSpecialCharachter>

	LCD_voidDrawSpecialCharachter(&LCD_R2_C13_Array, 0, 2, 13);
 8001236:	f107 0020 	add.w	r0, r7, #32
 800123a:	230d      	movs	r3, #13
 800123c:	2202      	movs	r2, #2
 800123e:	2100      	movs	r1, #0
 8001240:	f000 f932 	bl	80014a8 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C14_Array, 0, 2, 14);
 8001244:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001248:	230e      	movs	r3, #14
 800124a:	2202      	movs	r2, #2
 800124c:	2100      	movs	r1, #0
 800124e:	f000 f92b 	bl	80014a8 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C15_Array, 0, 2, 15);
 8001252:	f107 0010 	add.w	r0, r7, #16
 8001256:	230f      	movs	r3, #15
 8001258:	2202      	movs	r2, #2
 800125a:	2100      	movs	r1, #0
 800125c:	f000 f924 	bl	80014a8 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C16_Array, 0, 2, 16);
 8001260:	4638      	mov	r0, r7
 8001262:	2310      	movs	r3, #16
 8001264:	2202      	movs	r2, #2
 8001266:	2100      	movs	r1, #0
 8001268:	f000 f91e 	bl	80014a8 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C17_Array, 0, 2, 17);
 800126c:	f107 0008 	add.w	r0, r7, #8
 8001270:	2311      	movs	r3, #17
 8001272:	2202      	movs	r2, #2
 8001274:	2100      	movs	r1, #0
 8001276:	f000 f917 	bl	80014a8 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C18_Array, 0, 2, 18);
 800127a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800127e:	2312      	movs	r3, #18
 8001280:	2202      	movs	r2, #2
 8001282:	2100      	movs	r1, #0
 8001284:	f000 f910 	bl	80014a8 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C19_Array, 0, 2, 19);
 8001288:	f107 0018 	add.w	r0, r7, #24
 800128c:	2313      	movs	r3, #19
 800128e:	2202      	movs	r2, #2
 8001290:	2100      	movs	r1, #0
 8001292:	f000 f909 	bl	80014a8 <LCD_voidDrawSpecialCharachter>



}
 8001296:	bf00      	nop
 8001298:	3758      	adds	r7, #88	; 0x58
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	0800ca44 	.word	0x0800ca44
 80012a4:	0800ca4c 	.word	0x0800ca4c
 80012a8:	0800ca54 	.word	0x0800ca54
 80012ac:	0800ca5c 	.word	0x0800ca5c
 80012b0:	0800ca64 	.word	0x0800ca64
 80012b4:	0800ca6c 	.word	0x0800ca6c
 80012b8:	0800ca74 	.word	0x0800ca74
 80012bc:	0800ca7c 	.word	0x0800ca7c
 80012c0:	0800ca84 	.word	0x0800ca84
 80012c4:	0800ca8c 	.word	0x0800ca8c

080012c8 <LCD_voidInit>:
#define LCD_SLAVE_ADDRESS 0b01001110

extern I2C_HandleTypeDef hi2c1;

void LCD_voidInit(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	/*Setting 4 bits interface(Twice as the datasheet specefies)*/
	LCD_voidSendCommand(0b00110011);
 80012cc:	2033      	movs	r0, #51	; 0x33
 80012ce:	f000 f829 	bl	8001324 <LCD_voidSendCommand>
	LCD_voidSendCommand(0b00110010);
 80012d2:	2032      	movs	r0, #50	; 0x32
 80012d4:	f000 f826 	bl	8001324 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012d8:	2032      	movs	r0, #50	; 0x32
 80012da:	f001 fae9 	bl	80028b0 <HAL_Delay>
	/*Setting the LCD Function*/
	LCD_voidSendCommand(0b00101000);
 80012de:	2028      	movs	r0, #40	; 0x28
 80012e0:	f000 f820 	bl	8001324 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012e4:	2032      	movs	r0, #50	; 0x32
 80012e6:	f001 fae3 	bl	80028b0 <HAL_Delay>
	/*Clearing the display*/
	LCD_voidSendCommand(0b00000001);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f000 f81a 	bl	8001324 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012f0:	2032      	movs	r0, #50	; 0x32
 80012f2:	f001 fadd 	bl	80028b0 <HAL_Delay>
	/*Set the entry mode*/
	LCD_voidSendCommand(0b00000110);
 80012f6:	2006      	movs	r0, #6
 80012f8:	f000 f814 	bl	8001324 <LCD_voidSendCommand>
	HAL_Delay(50);
 80012fc:	2032      	movs	r0, #50	; 0x32
 80012fe:	f001 fad7 	bl	80028b0 <HAL_Delay>
	/*Set the display to on*/
	LCD_voidSendCommand(0b00001100);
 8001302:	200c      	movs	r0, #12
 8001304:	f000 f80e 	bl	8001324 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001308:	2032      	movs	r0, #50	; 0x32
 800130a:	f001 fad1 	bl	80028b0 <HAL_Delay>
	/*Set the cursor to home */
	LCD_voidSendCommand(0b00000010);
 800130e:	2002      	movs	r0, #2
 8001310:	f000 f808 	bl	8001324 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001314:	2032      	movs	r0, #50	; 0x32
 8001316:	f001 facb 	bl	80028b0 <HAL_Delay>
	/*and the Data address to 0*/
	LCD_voidSendCommand(0b10000000);
 800131a:	2080      	movs	r0, #128	; 0x80
 800131c:	f000 f802 	bl	8001324 <LCD_voidSendCommand>

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8_t Copy_uint8Command)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af02      	add	r7, sp, #8
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
 *
 *
 * 0b00000001 --> DataU --> 0b000000000-->0b00000001100
 *
 * */
	Local_uint8Local_uint8DataU=(Copy_uint8Command&0b11110000);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f023 030f 	bic.w	r3, r3, #15
 8001334:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Command<<4)&0b11110000);
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001100; //EN=1 RS=0
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	f043 030c 	orr.w	r3, r3, #12
 8001342:	b2db      	uxtb	r3, r3
 8001344:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001000; //EN=0 RS=0
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	b2db      	uxtb	r3, r3
 800134e:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001100; //EN=1 RS=0
 8001350:	7bbb      	ldrb	r3, [r7, #14]
 8001352:	f043 030c 	orr.w	r3, r3, #12
 8001356:	b2db      	uxtb	r3, r3
 8001358:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001000; //EN=0 RS=0
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	b2db      	uxtb	r3, r3
 8001362:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001364:	f107 0208 	add.w	r2, r7, #8
 8001368:	2364      	movs	r3, #100	; 0x64
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2304      	movs	r3, #4
 800136e:	214e      	movs	r1, #78	; 0x4e
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <LCD_voidSendCommand+0x5c>)
 8001372:	f001 ff27 	bl	80031c4 <HAL_I2C_Master_Transmit>
}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000040c 	.word	0x2000040c

08001384 <LCD_voidSendCharachter>:

void LCD_voidSendCharachter(uint8_t Copy_uint8Charachter)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af02      	add	r7, sp, #8
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_uint8Local_uint8DataU,Local_uint8Local_uint8DataL;
	uint8_t Local_uint8Local_uint8DataT[4];
	Local_uint8Local_uint8DataU=(Copy_uint8Charachter&0b11110000);
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f023 030f 	bic.w	r3, r3, #15
 8001394:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Charachter<<4)&0b11110000);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001101; //EN=1 RS=0
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	f043 030d 	orr.w	r3, r3, #13
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001001; //EN=0 RS=0
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	f043 0309 	orr.w	r3, r3, #9
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001101; //EN=1 RS=0
 80013b0:	7bbb      	ldrb	r3, [r7, #14]
 80013b2:	f043 030d 	orr.w	r3, r3, #13
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001001; //EN=0 RS=0
 80013ba:	7bbb      	ldrb	r3, [r7, #14]
 80013bc:	f043 0309 	orr.w	r3, r3, #9
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 80013c4:	f107 0208 	add.w	r2, r7, #8
 80013c8:	2364      	movs	r3, #100	; 0x64
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2304      	movs	r3, #4
 80013ce:	214e      	movs	r1, #78	; 0x4e
 80013d0:	4803      	ldr	r0, [pc, #12]	; (80013e0 <LCD_voidSendCharachter+0x5c>)
 80013d2:	f001 fef7 	bl	80031c4 <HAL_I2C_Master_Transmit>

}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000040c 	.word	0x2000040c

080013e4 <LCD_voidSendString>:

void LCD_voidSendString (uint8_t *Copy_pu8StringOfCharachters)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8Counter=0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 80013f0:	e009      	b.n	8001406 <LCD_voidSendString+0x22>
	{
		LCD_voidSendCharachter(Copy_pu8StringOfCharachters[Local_uint8Counter]);
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ffc2 	bl	8001384 <LCD_voidSendCharachter>
		Local_uint8Counter++;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	3301      	adds	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1ef      	bne.n	80013f2 <LCD_voidSendString+0xe>
	}


}
 8001412:	bf00      	nop
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <LCD_voidSetPositionXY>:
void LCD_voidSetPositionXY(uint8_t Copy_uint8Row,uint8_t Copy_uint8Column)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	460a      	mov	r2, r1
 8001426:	71fb      	strb	r3, [r7, #7]
 8001428:	4613      	mov	r3, r2
 800142a:	71bb      	strb	r3, [r7, #6]
	//1,add,add,add,add,add,add,add,0,0
	uint8_t Local_uint8PositionAddress = 0b10000000;
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	73fb      	strb	r3, [r7, #15]
	switch(Copy_uint8Row){
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b03      	cmp	r3, #3
 8001434:	d82d      	bhi.n	8001492 <LCD_voidSetPositionXY+0x76>
 8001436:	a201      	add	r2, pc, #4	; (adr r2, 800143c <LCD_voidSetPositionXY+0x20>)
 8001438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143c:	0800144d 	.word	0x0800144d
 8001440:	08001457 	.word	0x08001457
 8001444:	0800146b 	.word	0x0800146b
 8001448:	0800147f 	.word	0x0800147f
	case 0:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 0);
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	4313      	orrs	r3, r2
 8001452:	73fb      	strb	r3, [r7, #15]
		break;
 8001454:	e01d      	b.n	8001492 <LCD_voidSetPositionXY+0x76>
	case 1:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 64);
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	3340      	adds	r3, #64	; 0x40
 800145a:	b2db      	uxtb	r3, r3
 800145c:	b25a      	sxtb	r2, r3
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4313      	orrs	r3, r2
 8001464:	b25b      	sxtb	r3, r3
 8001466:	73fb      	strb	r3, [r7, #15]
		break;
 8001468:	e013      	b.n	8001492 <LCD_voidSetPositionXY+0x76>
	case 2:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 20);
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	3314      	adds	r3, #20
 800146e:	b2db      	uxtb	r3, r3
 8001470:	b25a      	sxtb	r2, r3
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4313      	orrs	r3, r2
 8001478:	b25b      	sxtb	r3, r3
 800147a:	73fb      	strb	r3, [r7, #15]
		break;
 800147c:	e009      	b.n	8001492 <LCD_voidSetPositionXY+0x76>
	case 3:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 84);
 800147e:	79bb      	ldrb	r3, [r7, #6]
 8001480:	3354      	adds	r3, #84	; 0x54
 8001482:	b2db      	uxtb	r3, r3
 8001484:	b25a      	sxtb	r2, r3
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4313      	orrs	r3, r2
 800148c:	b25b      	sxtb	r3, r3
 800148e:	73fb      	strb	r3, [r7, #15]
		break;
 8001490:	bf00      	nop
	}
		LCD_voidSendCommand(Local_uint8PositionAddress);
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff45 	bl	8001324 <LCD_voidSendCommand>
		HAL_Delay(1);
 800149a:	2001      	movs	r0, #1
 800149c:	f001 fa08 	bl	80028b0 <HAL_Delay>

}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <LCD_voidDrawSpecialCharachter>:
		}
	}
}

void LCD_voidDrawSpecialCharachter(uint8_t*Copy_puint8Pattern,uint8_t Copy_uint8LocationNum,uint8_t Copy_uint8RowNum,uint8_t Copy_uint8ColNum)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	4608      	mov	r0, r1
 80014b2:	4611      	mov	r1, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	70fb      	strb	r3, [r7, #3]
 80014ba:	460b      	mov	r3, r1
 80014bc:	70bb      	strb	r3, [r7, #2]
 80014be:	4613      	mov	r3, r2
 80014c0:	707b      	strb	r3, [r7, #1]
	/*Accessing the CGRAM address*/
	uint8_t Local_uint8CGRAMAddress,Local_uint8Counter;
	Local_uint8CGRAMAddress=Copy_uint8LocationNum*8;
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	73bb      	strb	r3, [r7, #14]
	/*Accessing CGRAM of lcd by command 0b01xxxxxx*/
	LCD_voidSendCommand(Local_uint8CGRAMAddress+64);
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	3340      	adds	r3, #64	; 0x40
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff28 	bl	8001324 <LCD_voidSendCommand>
	/*Write the pattern on CGRAM*/
	/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes
	 * in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	e009      	b.n	80014ee <LCD_voidDrawSpecialCharachter+0x46>
	{
		LCD_voidSendCharachter(Copy_puint8Pattern[Local_uint8Counter]);
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff4e 	bl	8001384 <LCD_voidSendCharachter>
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	3301      	adds	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	2b07      	cmp	r3, #7
 80014f2:	d9f2      	bls.n	80014da <LCD_voidDrawSpecialCharachter+0x32>
	}
	/*Keda e7na 7atena al pattern fe location mo3yn fel CGRAM, fa na2esna bas neb3at al pattern lel DDRAM 34an n7oto fel LCD */
	/*kona fo2 3malna command 34an ne access al CGRAM 34an ne access al DDRAM lazem command tany
	 * wel set position feha asln al command dah*/
	LCD_voidSetPositionXY(Copy_uint8RowNum,Copy_uint8ColNum);
 80014f4:	787a      	ldrb	r2, [r7, #1]
 80014f6:	78bb      	ldrb	r3, [r7, #2]
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff8e 	bl	800141c <LCD_voidSetPositionXY>
	LCD_voidSendCharachter(Copy_uint8LocationNum);
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff3e 	bl	8001384 <LCD_voidSendCharachter>
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <TASK_LCDBuzzer>:


}

void TASK_LCDBuzzer (void *pvParameters)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af02      	add	r7, sp, #8
 8001516:	6078      	str	r0, [r7, #4]
	uint32_t Local_uint8NotificationValue;

	while(1)
	{
		xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint8NotificationValue, portMAX_DELAY);
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	9200      	str	r2, [sp, #0]
 8001522:	f04f 32ff 	mov.w	r2, #4294967295
 8001526:	2100      	movs	r1, #0
 8001528:	2000      	movs	r0, #0
 800152a:	f006 f9fd 	bl	8007928 <xTaskGenericNotifyWait>

		switch(Local_uint8NotificationValue)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d104      	bne.n	800153e <TASK_LCDBuzzer+0x2e>
		{
		case Notify_TASK_LCDBuzzer_Break:

			Buzzer_voidHighSound();
 8001534:	f7ff fd96 	bl	8001064 <Buzzer_voidHighSound>
			LCD_AvoidHardBraking();
 8001538:	f7ff fdfa 	bl	8001130 <LCD_AvoidHardBraking>
			break;
 800153c:	e000      	b.n	8001540 <TASK_LCDBuzzer+0x30>

		default:
			/*Do Nothing*/
			break;
 800153e:	bf00      	nop
		xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint8NotificationValue, portMAX_DELAY);
 8001540:	e7ea      	b.n	8001518 <TASK_LCDBuzzer+0x8>

08001542 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001542:	b480      	push	{r7}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	6039      	str	r1, [r7, #0]
 800154c:	71fb      	strb	r3, [r7, #7]
	 * increments by 1 for future storing, it doesnt coincide with the tail
	 * the % UART_BUFFER_SIZE checking if the index of the next storing procedure
	 * is bigger than the buffer size(ex this iteration stores in 512 byte and the next one
	 * will be in the 513 so i should reset the (i) to zero to repeat again)*/

  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001554:	3301      	adds	r3, #1
 8001556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800155a:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d009      	beq.n	800157c <store_char+0x3a>
  {
	  /*Storing the charachter in the recent head pointed location*/
    buffer->buffer[buffer->head] = c;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	79f9      	ldrb	r1, [r7, #7]
 8001572:	54d1      	strb	r1, [r2, r3]

    /*After storing the character, incrementing the head for the next storing */
    buffer->head = i;
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f003 0320 	and.w	r3, r3, #32
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d013      	beq.n	80015d2 <Uart_isr+0x4a>
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	f003 0320 	and.w	r3, r3, #32
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00e      	beq.n	80015d2 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <Uart_isr+0xb4>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ffb9 	bl	8001542 <store_char>
        return;
 80015d0:	e031      	b.n	8001636 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d02c      	beq.n	8001636 <Uart_isr+0xae>
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d027      	beq.n	8001636 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <Uart_isr+0xb8>)
 80015e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <Uart_isr+0xb8>)
 80015ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d108      	bne.n	8001608 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001604:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001606:	e015      	b.n	8001634 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <Uart_isr+0xb8>)
 800160a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800160e:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <Uart_isr+0xb8>)
 8001610:	5cd3      	ldrb	r3, [r2, r3]
 8001612:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <Uart_isr+0xb8>)
 8001616:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800161a:	3301      	adds	r3, #1
 800161c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001620:	4a07      	ldr	r2, [pc, #28]	; (8001640 <Uart_isr+0xb8>)
 8001622:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	7bba      	ldrb	r2, [r7, #14]
 8001632:	605a      	str	r2, [r3, #4]
    	return;
 8001634:	bf00      	nop
    }
}
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000408 	.word	0x20000408
 8001640:	20000200 	.word	0x20000200

08001644 <Calculate_Car_Speed>:
#include "calculateSpeed.h"

extern uint32_t edges_counter;

float Calculate_Car_Speed()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
	float Local_uint16Speed;
	Local_uint16Speed = (edges_counter/50)/(2000.0*60);
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <Calculate_Car_Speed+0x48>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a10      	ldr	r2, [pc, #64]	; (8001690 <Calculate_Car_Speed+0x4c>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ffc4 	bl	80005e4 <__aeabi_ui2d>
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <Calculate_Car_Speed+0x50>)
 8001662:	f7ff f963 	bl	800092c <__aeabi_ddiv>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fb2b 	bl	8000cc8 <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	607b      	str	r3, [r7, #4]
	edges_counter=0;
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <Calculate_Car_Speed+0x48>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
	return Local_uint16Speed;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	ee07 3a90 	vmov	s15, r3
}
 8001682:	eeb0 0a67 	vmov.f32	s0, s15
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200001f8 	.word	0x200001f8
 8001690:	51eb851f 	.word	0x51eb851f
 8001694:	40fd4c00 	.word	0x40fd4c00

08001698 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800169e:	f001 f8c5 	bl	800282c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80016a2:	f000 f857 	bl	8001754 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80016a6:	f000 fb4b 	bl	8001d40 <MX_GPIO_Init>
	MX_I2C1_Init();
 80016aa:	f000 f8bf 	bl	800182c <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80016ae:	f000 fac9 	bl	8001c44 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80016b2:	f000 faf1 	bl	8001c98 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 80016b6:	f000 f943 	bl	8001940 <MX_TIM2_Init>
	MX_I2C2_Init();
 80016ba:	f000 f8e5 	bl	8001888 <MX_I2C2_Init>
	MX_I2C3_Init();
 80016be:	f000 f911 	bl	80018e4 <MX_I2C3_Init>
	MX_TIM3_Init();
 80016c2:	f000 f9a1 	bl	8001a08 <MX_TIM3_Init>
	MX_UART5_Init();
 80016c6:	f000 fa93 	bl	8001bf0 <MX_UART5_Init>
	MX_TIM6_Init();
 80016ca:	f000 fa17 	bl	8001afc <MX_TIM6_Init>
	MX_TIM12_Init();
 80016ce:	f000 fa4b 	bl	8001b68 <MX_TIM12_Init>
	MX_USART6_UART_Init();
 80016d2:	f000 fb0b 	bl	8001cec <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3,&received_char , 1);
 80016d6:	2201      	movs	r2, #1
 80016d8:	4919      	ldr	r1, [pc, #100]	; (8001740 <main+0xa8>)
 80016da:	481a      	ldr	r0, [pc, #104]	; (8001744 <main+0xac>)
 80016dc:	f003 ff0f 	bl	80054fe <HAL_UART_Receive_IT>
	LCD_voidInit();
 80016e0:	f7ff fdf2 	bl	80012c8 <LCD_voidInit>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <main+0xb0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <main+0xb0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	60da      	str	r2, [r3, #12]
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80016f4:	2100      	movs	r1, #0
 80016f6:	4814      	ldr	r0, [pc, #80]	; (8001748 <main+0xb0>)
 80016f8:	f003 f842 	bl	8004780 <HAL_TIM_IC_Start_IT>
	//	LightSensor_voidInit();
	LCD_HighLightIntensity_Warning();
 80016fc:	f7ff fd00 	bl	8001100 <LCD_HighLightIntensity_Warning>
  /* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	SEGGER_SYSVIEW_Start();
 8001700:	f007 ff04 	bl	800950c <SEGGER_SYSVIEW_Start>

	Task1_Status=xTaskCreate(TASK_LCDBuzzer, "LED1", 200, NULL, 2, &Task1_Handle);
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	2302      	movs	r3, #2
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2300      	movs	r3, #0
 800170e:	22c8      	movs	r2, #200	; 0xc8
 8001710:	490e      	ldr	r1, [pc, #56]	; (800174c <main+0xb4>)
 8001712:	480f      	ldr	r0, [pc, #60]	; (8001750 <main+0xb8>)
 8001714:	f005 f9de 	bl	8006ad4 <xTaskCreate>
 8001718:	60f8      	str	r0, [r7, #12]

	configASSERT(Task1_Status==pdPASS);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d00a      	beq.n	8001736 <main+0x9e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001724:	f383 8811 	msr	BASEPRI, r3
 8001728:	f3bf 8f6f 	isb	sy
 800172c:	f3bf 8f4f 	dsb	sy
 8001730:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001732:	bf00      	nop
 8001734:	e7fe      	b.n	8001734 <main+0x9c>

	vTaskStartScheduler();
 8001736:	f005 fb55 	bl	8006de4 <vTaskStartScheduler>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		Buzzer_voidHighSound();
 800173a:	f7ff fc93 	bl	8001064 <Buzzer_voidHighSound>
 800173e:	e7fc      	b.n	800173a <main+0xa2>
 8001740:	20000738 	.word	0x20000738
 8001744:	200006b0 	.word	0x200006b0
 8001748:	20000508 	.word	0x20000508
 800174c:	0800ca94 	.word	0x0800ca94
 8001750:	08001511 	.word	0x08001511

08001754 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b094      	sub	sp, #80	; 0x50
 8001758:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	2234      	movs	r2, #52	; 0x34
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f009 f9a7 	bl	800aab6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <SystemClock_Config+0xd0>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	4a28      	ldr	r2, [pc, #160]	; (8001824 <SystemClock_Config+0xd0>)
 8001782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001786:	6413      	str	r3, [r2, #64]	; 0x40
 8001788:	4b26      	ldr	r3, [pc, #152]	; (8001824 <SystemClock_Config+0xd0>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001794:	2300      	movs	r3, #0
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <SystemClock_Config+0xd4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017a0:	4a21      	ldr	r2, [pc, #132]	; (8001828 <SystemClock_Config+0xd4>)
 80017a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <SystemClock_Config+0xd4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b8:	2301      	movs	r3, #1
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017bc:	2310      	movs	r3, #16
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c0:	2302      	movs	r3, #2
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80017c8:	2308      	movs	r3, #8
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 80017cc:	2340      	movs	r3, #64	; 0x40
 80017ce:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80017d8:	2302      	movs	r3, #2
 80017da:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fb09 	bl	8003df8 <HAL_RCC_OscConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80017ec:	f000 fb32 	bl	8001e54 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f0:	230f      	movs	r3, #15
 80017f2:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f4:	2302      	movs	r3, #2
 80017f6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001804:	f107 0308 	add.w	r3, r7, #8
 8001808:	2101      	movs	r1, #1
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fffe 	bl	800380c <HAL_RCC_ClockConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8001816:	f000 fb1d 	bl	8001e54 <Error_Handler>
	}
}
 800181a:	bf00      	nop
 800181c:	3750      	adds	r7, #80	; 0x50
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40007000 	.word	0x40007000

0800182c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <MX_I2C1_Init+0x54>)
 8001832:	4a14      	ldr	r2, [pc, #80]	; (8001884 <MX_I2C1_Init+0x58>)
 8001834:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 1000;
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_I2C1_Init+0x54>)
 8001838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800183c:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <MX_I2C1_Init+0x54>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001844:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_I2C1_Init+0x54>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <MX_I2C1_Init+0x54>)
 800184c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001850:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <MX_I2C1_Init+0x54>)
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_I2C1_Init+0x54>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <MX_I2C1_Init+0x54>)
 8001860:	2200      	movs	r2, #0
 8001862:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_I2C1_Init+0x54>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_I2C1_Init+0x54>)
 800186c:	f001 fb66 	bl	8002f3c <HAL_I2C_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_I2C1_Init+0x4e>
	{
		Error_Handler();
 8001876:	f000 faed 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000040c 	.word	0x2000040c
 8001884:	40005400 	.word	0x40005400

08001888 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <MX_I2C2_Init+0x54>)
 800188e:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <MX_I2C2_Init+0x58>)
 8001890:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 1000;
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <MX_I2C2_Init+0x54>)
 8001894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001898:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <MX_I2C2_Init+0x54>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 120;
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_I2C2_Init+0x54>)
 80018a2:	2278      	movs	r2, #120	; 0x78
 80018a4:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <MX_I2C2_Init+0x54>)
 80018a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ac:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <MX_I2C2_Init+0x54>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_I2C2_Init+0x54>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <MX_I2C2_Init+0x54>)
 80018bc:	2200      	movs	r2, #0
 80018be:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_I2C2_Init+0x54>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_I2C2_Init+0x54>)
 80018c8:	f001 fb38 	bl	8002f3c <HAL_I2C_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_I2C2_Init+0x4e>
	{
		Error_Handler();
 80018d2:	f000 fabf 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000460 	.word	0x20000460
 80018e0:	40005800 	.word	0x40005800

080018e4 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_I2C3_Init+0x50>)
 80018ea:	4a13      	ldr	r2, [pc, #76]	; (8001938 <MX_I2C3_Init+0x54>)
 80018ec:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_I2C3_Init+0x50>)
 80018f0:	4a12      	ldr	r2, [pc, #72]	; (800193c <MX_I2C3_Init+0x58>)
 80018f2:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_I2C3_Init+0x50>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_I2C3_Init+0x50>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_I2C3_Init+0x50>)
 8001902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001906:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <MX_I2C3_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_I2C3_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <MX_I2C3_Init+0x50>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_I2C3_Init+0x50>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <MX_I2C3_Init+0x50>)
 8001922:	f001 fb0b 	bl	8002f3c <HAL_I2C_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 800192c:	f000 fa92 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200004b4 	.word	0x200004b4
 8001938:	40005c00 	.word	0x40005c00
 800193c:	000186a0 	.word	0x000186a0

08001940 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001946:	f107 0320 	add.w	r3, r7, #32
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]
 800195e:	615a      	str	r2, [r3, #20]
 8001960:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001962:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <MX_TIM2_Init+0xc4>)
 8001964:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001968:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15999;
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <MX_TIM2_Init+0xc4>)
 800196c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001970:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <MX_TIM2_Init+0xc4>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 12000;
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <MX_TIM2_Init+0xc4>)
 800197a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800197e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001980:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <MX_TIM2_Init+0xc4>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <MX_TIM2_Init+0xc4>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800198c:	481d      	ldr	r0, [pc, #116]	; (8001a04 <MX_TIM2_Init+0xc4>)
 800198e:	f002 fd91 	bl	80044b4 <HAL_TIM_OC_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8001998:	f000 fa5c 	bl	8001e54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019a4:	f107 0320 	add.w	r3, r7, #32
 80019a8:	4619      	mov	r1, r3
 80019aa:	4816      	ldr	r0, [pc, #88]	; (8001a04 <MX_TIM2_Init+0xc4>)
 80019ac:	f003 fcca 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 80019b6:	f000 fa4d 	bl	8001e54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	480c      	ldr	r0, [pc, #48]	; (8001a04 <MX_TIM2_Init+0xc4>)
 80019d2:	f003 f905 	bl	8004be0 <HAL_TIM_OC_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM2_Init+0xa0>
	{
		Error_Handler();
 80019dc:	f000 fa3a 	bl	8001e54 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2204      	movs	r2, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM2_Init+0xc4>)
 80019e8:	f003 f8fa 	bl	8004be0 <HAL_TIM_OC_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM2_Init+0xb6>
	{
		Error_Handler();
 80019f2:	f000 fa2f 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80019f6:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM2_Init+0xc4>)
 80019f8:	f000 fbac 	bl	8002154 <HAL_TIM_MspPostInit>

}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000508 	.word	0x20000508

08001a08 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	611a      	str	r2, [r3, #16]
 8001a26:	615a      	str	r2, [r3, #20]
 8001a28:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001a2a:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <MX_TIM3_Init+0xec>)
 8001a2c:	4a32      	ldr	r2, [pc, #200]	; (8001af8 <MX_TIM3_Init+0xf0>)
 8001a2e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 320-1;
 8001a30:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <MX_TIM3_Init+0xec>)
 8001a32:	f240 123f 	movw	r2, #319	; 0x13f
 8001a36:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <MX_TIM3_Init+0xec>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <MX_TIM3_Init+0xec>)
 8001a40:	2263      	movs	r2, #99	; 0x63
 8001a42:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <MX_TIM3_Init+0xec>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <MX_TIM3_Init+0xec>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a50:	4828      	ldr	r0, [pc, #160]	; (8001af4 <MX_TIM3_Init+0xec>)
 8001a52:	f002 fd7e 	bl	8004552 <HAL_TIM_PWM_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 8001a5c:	f000 f9fa 	bl	8001e54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4821      	ldr	r0, [pc, #132]	; (8001af4 <MX_TIM3_Init+0xec>)
 8001a70:	f003 fc68 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 8001a7a:	f000 f9eb 	bl	8001e54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7e:	2360      	movs	r3, #96	; 0x60
 8001a80:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2200      	movs	r2, #0
 8001a92:	4619      	mov	r1, r3
 8001a94:	4817      	ldr	r0, [pc, #92]	; (8001af4 <MX_TIM3_Init+0xec>)
 8001a96:	f003 f8ff 	bl	8004c98 <HAL_TIM_PWM_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 8001aa0:	f000 f9d8 	bl	8001e54 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4812      	ldr	r0, [pc, #72]	; (8001af4 <MX_TIM3_Init+0xec>)
 8001aac:	f003 f8f4 	bl	8004c98 <HAL_TIM_PWM_ConfigChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8001ab6:	f000 f9cd 	bl	8001e54 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2208      	movs	r2, #8
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <MX_TIM3_Init+0xec>)
 8001ac2:	f003 f8e9 	bl	8004c98 <HAL_TIM_PWM_ConfigChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0xc8>
	{
		Error_Handler();
 8001acc:	f000 f9c2 	bl	8001e54 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4807      	ldr	r0, [pc, #28]	; (8001af4 <MX_TIM3_Init+0xec>)
 8001ad8:	f003 f8de 	bl	8004c98 <HAL_TIM_PWM_ConfigChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM3_Init+0xde>
	{
		Error_Handler();
 8001ae2:	f000 f9b7 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <MX_TIM3_Init+0xec>)
 8001ae8:	f000 fb34 	bl	8002154 <HAL_TIM_MspPostInit>

}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	; 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000550 	.word	0x20000550
 8001af8:	40000400 	.word	0x40000400

08001afc <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b02:	463b      	mov	r3, r7
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <MX_TIM6_Init+0x64>)
 8001b0c:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <MX_TIM6_Init+0x68>)
 8001b0e:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <MX_TIM6_Init+0x64>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_TIM6_Init+0x64>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_TIM6_Init+0x64>)
 8001b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b22:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_TIM6_Init+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b2a:	480d      	ldr	r0, [pc, #52]	; (8001b60 <MX_TIM6_Init+0x64>)
 8001b2c:	f002 fc02 	bl	8004334 <HAL_TIM_Base_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 8001b36:	f000 f98d 	bl	8001e54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b42:	463b      	mov	r3, r7
 8001b44:	4619      	mov	r1, r3
 8001b46:	4806      	ldr	r0, [pc, #24]	; (8001b60 <MX_TIM6_Init+0x64>)
 8001b48:	f003 fbfc 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 8001b52:	f000 f97f 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000598 	.word	0x20000598
 8001b64:	40001000 	.word	0x40001000

08001b68 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
 8001b7c:	615a      	str	r2, [r3, #20]
 8001b7e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <MX_TIM12_Init+0x80>)
 8001b82:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <MX_TIM12_Init+0x84>)
 8001b84:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 160-1;
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <MX_TIM12_Init+0x80>)
 8001b88:	229f      	movs	r2, #159	; 0x9f
 8001b8a:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <MX_TIM12_Init+0x80>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 100-1;
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <MX_TIM12_Init+0x80>)
 8001b94:	2263      	movs	r2, #99	; 0x63
 8001b96:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <MX_TIM12_Init+0x80>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <MX_TIM12_Init+0x80>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001ba4:	4810      	ldr	r0, [pc, #64]	; (8001be8 <MX_TIM12_Init+0x80>)
 8001ba6:	f002 fcd4 	bl	8004552 <HAL_TIM_PWM_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM12_Init+0x4c>
	{
		Error_Handler();
 8001bb0:	f000 f950 	bl	8001e54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb4:	2360      	movs	r3, #96	; 0x60
 8001bb6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4807      	ldr	r0, [pc, #28]	; (8001be8 <MX_TIM12_Init+0x80>)
 8001bcc:	f003 f864 	bl	8004c98 <HAL_TIM_PWM_ConfigChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM12_Init+0x72>
	{
		Error_Handler();
 8001bd6:	f000 f93d 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8001bda:	4803      	ldr	r0, [pc, #12]	; (8001be8 <MX_TIM12_Init+0x80>)
 8001bdc:	f000 faba 	bl	8002154 <HAL_TIM_MspPostInit>

}
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200005e0 	.word	0x200005e0
 8001bec:	40001800 	.word	0x40001800

08001bf0 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_UART5_Init+0x4c>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <MX_UART5_Init+0x50>)
 8001bf8:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <MX_UART5_Init+0x4c>)
 8001bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c00:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_UART5_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_UART5_Init+0x4c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <MX_UART5_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_UART5_Init+0x4c>)
 8001c16:	220c      	movs	r2, #12
 8001c18:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <MX_UART5_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_UART5_Init+0x4c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_UART5_Init+0x4c>)
 8001c28:	f003 fc1c 	bl	8005464 <HAL_UART_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_UART5_Init+0x46>
	{
		Error_Handler();
 8001c32:	f000 f90f 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000628 	.word	0x20000628
 8001c40:	40005000 	.word	0x40005000

08001c44 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <MX_USART1_UART_Init+0x50>)
 8001c4c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c54:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c7c:	f003 fbf2 	bl	8005464 <HAL_UART_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001c86:	f000 f8e5 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	2000066c 	.word	0x2000066c
 8001c94:	40011000 	.word	0x40011000

08001c98 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_USART3_UART_Init+0x4c>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <MX_USART3_UART_Init+0x50>)
 8001ca0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <MX_USART3_UART_Init+0x4c>)
 8001ca4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ca8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_USART3_UART_Init+0x4c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <MX_USART3_UART_Init+0x4c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_USART3_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MX_USART3_UART_Init+0x4c>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <MX_USART3_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_USART3_UART_Init+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_USART3_UART_Init+0x4c>)
 8001cd0:	f003 fbc8 	bl	8005464 <HAL_UART_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001cda:	f000 f8bb 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200006b0 	.word	0x200006b0
 8001ce8:	40004800 	.word	0x40004800

08001cec <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <MX_USART6_UART_Init+0x50>)
 8001cf4:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001cf8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cfc:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001d24:	f003 fb9e 	bl	8005464 <HAL_UART_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 8001d2e:	f000 f891 	bl	8001e54 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200006f4 	.word	0x200006f4
 8001d3c:	40011400 	.word	0x40011400

08001d40 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <MX_GPIO_Init+0xe4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <MX_GPIO_Init+0xe4>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <MX_GPIO_Init+0xe4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <MX_GPIO_Init+0xe4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a2a      	ldr	r2, [pc, #168]	; (8001e24 <MX_GPIO_Init+0xe4>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <MX_GPIO_Init+0xe4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <MX_GPIO_Init+0xe4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a23      	ldr	r2, [pc, #140]	; (8001e24 <MX_GPIO_Init+0xe4>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <MX_GPIO_Init+0xe4>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <MX_GPIO_Init+0xe4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a1c      	ldr	r2, [pc, #112]	; (8001e24 <MX_GPIO_Init+0xe4>)
 8001db4:	f043 0308 	orr.w	r3, r3, #8
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <MX_GPIO_Init+0xe4>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f242 311c 	movw	r1, #8988	; 0x231c
 8001dcc:	4816      	ldr	r0, [pc, #88]	; (8001e28 <MX_GPIO_Init+0xe8>)
 8001dce:	f001 f89b 	bl	8002f08 <HAL_GPIO_WritePin>
			|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001dd8:	4814      	ldr	r0, [pc, #80]	; (8001e2c <MX_GPIO_Init+0xec>)
 8001dda:	f001 f895 	bl	8002f08 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001dde:	f242 331c 	movw	r3, #8988	; 0x231c
 8001de2:	617b      	str	r3, [r7, #20]
			|GPIO_PIN_8|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4619      	mov	r1, r3
 8001df6:	480c      	ldr	r0, [pc, #48]	; (8001e28 <MX_GPIO_Init+0xe8>)
 8001df8:	f000 fef2 	bl	8002be0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8001dfc:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001e00:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e02:	2301      	movs	r3, #1
 8001e04:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_GPIO_Init+0xec>)
 8001e16:	f000 fee3 	bl	8002be0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	; 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	40020400 	.word	0x40020400

08001e30 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d101      	bne.n	8001e46 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001e42:	f000 fd15 	bl	8002870 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40001400 	.word	0x40001400

08001e54 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e58:	b672      	cpsid	i
}
 8001e5a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e5c:	e7fe      	b.n	8001e5c <Error_Handler+0x8>
	...

08001e60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_MspInit+0x4c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_MspInit+0x4c>)
 8001e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e74:	6453      	str	r3, [r2, #68]	; 0x44
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_MspInit+0x4c>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_MspInit+0x4c>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <HAL_MspInit+0x4c>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e90:	6413      	str	r3, [r2, #64]	; 0x40
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_MspInit+0x4c>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800

08001eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08e      	sub	sp, #56	; 0x38
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a5b      	ldr	r2, [pc, #364]	; (800203c <HAL_I2C_MspInit+0x18c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d12c      	bne.n	8001f2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
 8001ed6:	4b5a      	ldr	r3, [pc, #360]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a59      	ldr	r2, [pc, #356]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b57      	ldr	r3, [pc, #348]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
 8001eec:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eee:	23c0      	movs	r3, #192	; 0xc0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef2:	2312      	movs	r3, #18
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001efe:	2304      	movs	r3, #4
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f06:	4619      	mov	r1, r3
 8001f08:	484e      	ldr	r0, [pc, #312]	; (8002044 <HAL_I2C_MspInit+0x194>)
 8001f0a:	f000 fe69 	bl	8002be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	4b4b      	ldr	r3, [pc, #300]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a4a      	ldr	r2, [pc, #296]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b48      	ldr	r3, [pc, #288]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f2a:	e082      	b.n	8002032 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a45      	ldr	r2, [pc, #276]	; (8002048 <HAL_I2C_MspInit+0x198>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d12d      	bne.n	8001f92 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	4b41      	ldr	r3, [pc, #260]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a40      	ldr	r2, [pc, #256]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001f52:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f58:	2312      	movs	r3, #18
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f64:	2304      	movs	r3, #4
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4835      	ldr	r0, [pc, #212]	; (8002044 <HAL_I2C_MspInit+0x194>)
 8001f70:	f000 fe36 	bl	8002be0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	4b31      	ldr	r3, [pc, #196]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	4a30      	ldr	r2, [pc, #192]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001f7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f82:	6413      	str	r3, [r2, #64]	; 0x40
 8001f84:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	697b      	ldr	r3, [r7, #20]
}
 8001f90:	e04f      	b.n	8002032 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a2d      	ldr	r2, [pc, #180]	; (800204c <HAL_I2C_MspInit+0x19c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d14a      	bne.n	8002032 <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	4b27      	ldr	r3, [pc, #156]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	4a26      	ldr	r2, [pc, #152]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6313      	str	r3, [r2, #48]	; 0x30
 8001fac:	4b24      	ldr	r3, [pc, #144]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	4a1f      	ldr	r2, [pc, #124]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fda:	2312      	movs	r3, #18
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4817      	ldr	r0, [pc, #92]	; (8002050 <HAL_I2C_MspInit+0x1a0>)
 8001ff2:	f000 fdf5 	bl	8002be0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ff6:	2310      	movs	r3, #16
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ffa:	2312      	movs	r3, #18
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002002:	2303      	movs	r3, #3
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002006:	2304      	movs	r3, #4
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200e:	4619      	mov	r1, r3
 8002010:	480c      	ldr	r0, [pc, #48]	; (8002044 <HAL_I2C_MspInit+0x194>)
 8002012:	f000 fde5 	bl	8002be0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_I2C_MspInit+0x190>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8002020:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_I2C_MspInit+0x190>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
}
 8002032:	bf00      	nop
 8002034:	3738      	adds	r7, #56	; 0x38
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40005400 	.word	0x40005400
 8002040:	40023800 	.word	0x40023800
 8002044:	40020400 	.word	0x40020400
 8002048:	40005800 	.word	0x40005800
 800204c:	40005c00 	.word	0x40005c00
 8002050:	40020000 	.word	0x40020000

08002054 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d115      	bne.n	8002092 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <HAL_TIM_OC_MspInit+0x48>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a0b      	ldr	r2, [pc, #44]	; (800209c <HAL_TIM_OC_MspInit+0x48>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_TIM_OC_MspInit+0x48>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	201c      	movs	r0, #28
 8002088:	f000 fcee 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800208c:	201c      	movs	r0, #28
 800208e:	f000 fd07 	bl	8002aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800

080020a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a15      	ldr	r2, [pc, #84]	; (8002104 <HAL_TIM_PWM_MspInit+0x64>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10e      	bne.n	80020d0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_TIM_PWM_MspInit+0x68>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a13      	ldr	r2, [pc, #76]	; (8002108 <HAL_TIM_PWM_MspInit+0x68>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_TIM_PWM_MspInit+0x68>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80020ce:	e012      	b.n	80020f6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <HAL_TIM_PWM_MspInit+0x6c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d10d      	bne.n	80020f6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_TIM_PWM_MspInit+0x68>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_TIM_PWM_MspInit+0x68>)
 80020e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_TIM_PWM_MspInit+0x68>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40000400 	.word	0x40000400
 8002108:	40023800 	.word	0x40023800
 800210c:	40001800 	.word	0x40001800

08002110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0b      	ldr	r2, [pc, #44]	; (800214c <HAL_TIM_Base_MspInit+0x3c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d10d      	bne.n	800213e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_TIM_Base_MspInit+0x40>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a09      	ldr	r2, [pc, #36]	; (8002150 <HAL_TIM_Base_MspInit+0x40>)
 800212c:	f043 0310 	orr.w	r3, r3, #16
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <HAL_TIM_Base_MspInit+0x40>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40001000 	.word	0x40001000
 8002150:	40023800 	.word	0x40023800

08002154 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08c      	sub	sp, #48	; 0x30
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002174:	d11e      	bne.n	80021b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	4b43      	ldr	r3, [pc, #268]	; (8002288 <HAL_TIM_MspPostInit+0x134>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a42      	ldr	r2, [pc, #264]	; (8002288 <HAL_TIM_MspPostInit+0x134>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b40      	ldr	r3, [pc, #256]	; (8002288 <HAL_TIM_MspPostInit+0x134>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002192:	2303      	movs	r3, #3
 8002194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021a2:	2301      	movs	r3, #1
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	4837      	ldr	r0, [pc, #220]	; (800228c <HAL_TIM_MspPostInit+0x138>)
 80021ae:	f000 fd17 	bl	8002be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80021b2:	e065      	b.n	8002280 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a35      	ldr	r2, [pc, #212]	; (8002290 <HAL_TIM_MspPostInit+0x13c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d13c      	bne.n	8002238 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	4b31      	ldr	r3, [pc, #196]	; (8002288 <HAL_TIM_MspPostInit+0x134>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a30      	ldr	r2, [pc, #192]	; (8002288 <HAL_TIM_MspPostInit+0x134>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <HAL_TIM_MspPostInit+0x134>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <HAL_TIM_MspPostInit+0x134>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a29      	ldr	r2, [pc, #164]	; (8002288 <HAL_TIM_MspPostInit+0x134>)
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b27      	ldr	r3, [pc, #156]	; (8002288 <HAL_TIM_MspPostInit+0x134>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021f6:	23c0      	movs	r3, #192	; 0xc0
 80021f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002206:	2302      	movs	r3, #2
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	4619      	mov	r1, r3
 8002210:	481e      	ldr	r0, [pc, #120]	; (800228c <HAL_TIM_MspPostInit+0x138>)
 8002212:	f000 fce5 	bl	8002be0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002216:	2303      	movs	r3, #3
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002226:	2302      	movs	r3, #2
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4818      	ldr	r0, [pc, #96]	; (8002294 <HAL_TIM_MspPostInit+0x140>)
 8002232:	f000 fcd5 	bl	8002be0 <HAL_GPIO_Init>
}
 8002236:	e023      	b.n	8002280 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM12)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a16      	ldr	r2, [pc, #88]	; (8002298 <HAL_TIM_MspPostInit+0x144>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d11e      	bne.n	8002280 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_TIM_MspPostInit+0x134>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <HAL_TIM_MspPostInit+0x134>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HAL_TIM_MspPostInit+0x134>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800225e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002270:	2309      	movs	r3, #9
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 031c 	add.w	r3, r7, #28
 8002278:	4619      	mov	r1, r3
 800227a:	4806      	ldr	r0, [pc, #24]	; (8002294 <HAL_TIM_MspPostInit+0x140>)
 800227c:	f000 fcb0 	bl	8002be0 <HAL_GPIO_Init>
}
 8002280:	bf00      	nop
 8002282:	3730      	adds	r7, #48	; 0x30
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	40020000 	.word	0x40020000
 8002290:	40000400 	.word	0x40000400
 8002294:	40020400 	.word	0x40020400
 8002298:	40001800 	.word	0x40001800

0800229c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b090      	sub	sp, #64	; 0x40
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a80      	ldr	r2, [pc, #512]	; (80024bc <HAL_UART_MspInit+0x220>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d153      	bne.n	8002366 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c2:	4b7f      	ldr	r3, [pc, #508]	; (80024c0 <HAL_UART_MspInit+0x224>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	4a7e      	ldr	r2, [pc, #504]	; (80024c0 <HAL_UART_MspInit+0x224>)
 80022c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022cc:	6413      	str	r3, [r2, #64]	; 0x40
 80022ce:	4b7c      	ldr	r3, [pc, #496]	; (80024c0 <HAL_UART_MspInit+0x224>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
 80022de:	4b78      	ldr	r3, [pc, #480]	; (80024c0 <HAL_UART_MspInit+0x224>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a77      	ldr	r2, [pc, #476]	; (80024c0 <HAL_UART_MspInit+0x224>)
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b75      	ldr	r3, [pc, #468]	; (80024c0 <HAL_UART_MspInit+0x224>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
 80022fa:	4b71      	ldr	r3, [pc, #452]	; (80024c0 <HAL_UART_MspInit+0x224>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a70      	ldr	r2, [pc, #448]	; (80024c0 <HAL_UART_MspInit+0x224>)
 8002300:	f043 0308 	orr.w	r3, r3, #8
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b6e      	ldr	r3, [pc, #440]	; (80024c0 <HAL_UART_MspInit+0x224>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	623b      	str	r3, [r7, #32]
 8002310:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002324:	2308      	movs	r3, #8
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232c:	4619      	mov	r1, r3
 800232e:	4865      	ldr	r0, [pc, #404]	; (80024c4 <HAL_UART_MspInit+0x228>)
 8002330:	f000 fc56 	bl	8002be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002334:	2304      	movs	r3, #4
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002344:	2308      	movs	r3, #8
 8002346:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234c:	4619      	mov	r1, r3
 800234e:	485e      	ldr	r0, [pc, #376]	; (80024c8 <HAL_UART_MspInit+0x22c>)
 8002350:	f000 fc46 	bl	8002be0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2100      	movs	r1, #0
 8002358:	2035      	movs	r0, #53	; 0x35
 800235a:	f000 fb85 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800235e:	2035      	movs	r0, #53	; 0x35
 8002360:	f000 fb9e 	bl	8002aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002364:	e0a6      	b.n	80024b4 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a58      	ldr	r2, [pc, #352]	; (80024cc <HAL_UART_MspInit+0x230>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d135      	bne.n	80023dc <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	4b52      	ldr	r3, [pc, #328]	; (80024c0 <HAL_UART_MspInit+0x224>)
 8002376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002378:	4a51      	ldr	r2, [pc, #324]	; (80024c0 <HAL_UART_MspInit+0x224>)
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	6453      	str	r3, [r2, #68]	; 0x44
 8002380:	4b4f      	ldr	r3, [pc, #316]	; (80024c0 <HAL_UART_MspInit+0x224>)
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	4b4b      	ldr	r3, [pc, #300]	; (80024c0 <HAL_UART_MspInit+0x224>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4a4a      	ldr	r2, [pc, #296]	; (80024c0 <HAL_UART_MspInit+0x224>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6313      	str	r3, [r2, #48]	; 0x30
 800239c:	4b48      	ldr	r3, [pc, #288]	; (80024c0 <HAL_UART_MspInit+0x224>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023ba:	2307      	movs	r3, #7
 80023bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c2:	4619      	mov	r1, r3
 80023c4:	4842      	ldr	r0, [pc, #264]	; (80024d0 <HAL_UART_MspInit+0x234>)
 80023c6:	f000 fc0b 	bl	8002be0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2106      	movs	r1, #6
 80023ce:	2025      	movs	r0, #37	; 0x25
 80023d0:	f000 fb4a 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023d4:	2025      	movs	r0, #37	; 0x25
 80023d6:	f000 fb63 	bl	8002aa0 <HAL_NVIC_EnableIRQ>
}
 80023da:	e06b      	b.n	80024b4 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART3)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a3c      	ldr	r2, [pc, #240]	; (80024d4 <HAL_UART_MspInit+0x238>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d135      	bne.n	8002452 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	4b35      	ldr	r3, [pc, #212]	; (80024c0 <HAL_UART_MspInit+0x224>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a34      	ldr	r2, [pc, #208]	; (80024c0 <HAL_UART_MspInit+0x224>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b32      	ldr	r3, [pc, #200]	; (80024c0 <HAL_UART_MspInit+0x224>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <HAL_UART_MspInit+0x224>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a2d      	ldr	r2, [pc, #180]	; (80024c0 <HAL_UART_MspInit+0x224>)
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <HAL_UART_MspInit+0x224>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800241e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002430:	2307      	movs	r3, #7
 8002432:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002438:	4619      	mov	r1, r3
 800243a:	4822      	ldr	r0, [pc, #136]	; (80024c4 <HAL_UART_MspInit+0x228>)
 800243c:	f000 fbd0 	bl	8002be0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2101      	movs	r1, #1
 8002444:	2027      	movs	r0, #39	; 0x27
 8002446:	f000 fb0f 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800244a:	2027      	movs	r0, #39	; 0x27
 800244c:	f000 fb28 	bl	8002aa0 <HAL_NVIC_EnableIRQ>
}
 8002450:	e030      	b.n	80024b4 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART6)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a20      	ldr	r2, [pc, #128]	; (80024d8 <HAL_UART_MspInit+0x23c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d12b      	bne.n	80024b4 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <HAL_UART_MspInit+0x224>)
 8002462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002464:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <HAL_UART_MspInit+0x224>)
 8002466:	f043 0320 	orr.w	r3, r3, #32
 800246a:	6453      	str	r3, [r2, #68]	; 0x44
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_UART_MspInit+0x224>)
 800246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <HAL_UART_MspInit+0x224>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <HAL_UART_MspInit+0x224>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6313      	str	r3, [r2, #48]	; 0x30
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_UART_MspInit+0x224>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002494:	23c0      	movs	r3, #192	; 0xc0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024a4:	2308      	movs	r3, #8
 80024a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ac:	4619      	mov	r1, r3
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <HAL_UART_MspInit+0x228>)
 80024b0:	f000 fb96 	bl	8002be0 <HAL_GPIO_Init>
}
 80024b4:	bf00      	nop
 80024b6:	3740      	adds	r7, #64	; 0x40
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40005000 	.word	0x40005000
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020800 	.word	0x40020800
 80024c8:	40020c00 	.word	0x40020c00
 80024cc:	40011000 	.word	0x40011000
 80024d0:	40020000 	.word	0x40020000
 80024d4:	40004800 	.word	0x40004800
 80024d8:	40011400 	.word	0x40011400

080024dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08e      	sub	sp, #56	; 0x38
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	4b33      	ldr	r3, [pc, #204]	; (80025c0 <HAL_InitTick+0xe4>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	4a32      	ldr	r2, [pc, #200]	; (80025c0 <HAL_InitTick+0xe4>)
 80024f6:	f043 0320 	orr.w	r3, r3, #32
 80024fa:	6413      	str	r3, [r2, #64]	; 0x40
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <HAL_InitTick+0xe4>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002508:	f107 0210 	add.w	r2, r7, #16
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f001 fa94 	bl	8003a40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002522:	f001 fa65 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 8002526:	6378      	str	r0, [r7, #52]	; 0x34
 8002528:	e004      	b.n	8002534 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800252a:	f001 fa61 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 800252e:	4603      	mov	r3, r0
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002536:	4a23      	ldr	r2, [pc, #140]	; (80025c4 <HAL_InitTick+0xe8>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	0c9b      	lsrs	r3, r3, #18
 800253e:	3b01      	subs	r3, #1
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_InitTick+0xec>)
 8002544:	4a21      	ldr	r2, [pc, #132]	; (80025cc <HAL_InitTick+0xf0>)
 8002546:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <HAL_InitTick+0xec>)
 800254a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800254e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002550:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <HAL_InitTick+0xec>)
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002556:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <HAL_InitTick+0xec>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255c:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_InitTick+0xec>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002562:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_InitTick+0xec>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002568:	4817      	ldr	r0, [pc, #92]	; (80025c8 <HAL_InitTick+0xec>)
 800256a:	f001 fee3 	bl	8004334 <HAL_TIM_Base_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002574:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002578:	2b00      	cmp	r3, #0
 800257a:	d11b      	bne.n	80025b4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800257c:	4812      	ldr	r0, [pc, #72]	; (80025c8 <HAL_InitTick+0xec>)
 800257e:	f001 ff29 	bl	80043d4 <HAL_TIM_Base_Start_IT>
 8002582:	4603      	mov	r3, r0
 8002584:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002588:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800258c:	2b00      	cmp	r3, #0
 800258e:	d111      	bne.n	80025b4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002590:	2037      	movs	r0, #55	; 0x37
 8002592:	f000 fa85 	bl	8002aa0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b0f      	cmp	r3, #15
 800259a:	d808      	bhi.n	80025ae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800259c:	2200      	movs	r2, #0
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	2037      	movs	r0, #55	; 0x37
 80025a2:	f000 fa61 	bl	8002a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <HAL_InitTick+0xf4>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	e002      	b.n	80025b4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80025b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3738      	adds	r7, #56	; 0x38
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	431bde83 	.word	0x431bde83
 80025c8:	2000073c 	.word	0x2000073c
 80025cc:	40001400 	.word	0x40001400
 80025d0:	20000004 	.word	0x20000004

080025d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <NMI_Handler+0x4>

080025da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025de:	e7fe      	b.n	80025de <HardFault_Handler+0x4>

080025e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <MemManage_Handler+0x4>

080025e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ea:	e7fe      	b.n	80025ea <BusFault_Handler+0x4>

080025ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <UsageFault_Handler+0x4>
	...

080025f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <TIM2_IRQHandler+0x74>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b01      	cmp	r3, #1
 8002604:	d126      	bne.n	8002654 <TIM2_IRQHandler+0x60>
		// Timer overflow interrupt
		Global_Speed = round(Calculate_Car_Speed());
 8002606:	f7ff f81d 	bl	8001644 <Calculate_Car_Speed>
 800260a:	ee10 3a10 	vmov	r3, s0
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe f80a 	bl	8000628 <__aeabi_f2d>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	ec43 2b10 	vmov	d0, r2, r3
 800261c:	f00a f98a 	bl	800c934 <round>
 8002620:	ec53 2b10 	vmov	r2, r3, d0
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	f7fe fb2e 	bl	8000c88 <__aeabi_d2uiz>
 800262c:	4603      	mov	r3, r0
 800262e:	b29a      	uxth	r2, r3
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <TIM2_IRQHandler+0x78>)
 8002632:	801a      	strh	r2, [r3, #0]
        if(Global_GPS_Speed_Completetion==Nothing_Completed)
 8002634:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <TIM2_IRQHandler+0x7c>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d103      	bne.n	8002644 <TIM2_IRQHandler+0x50>
        {
        	Global_GPS_Speed_Completetion=Half_Completed_Speed;
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <TIM2_IRQHandler+0x7c>)
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e00c      	b.n	800265e <TIM2_IRQHandler+0x6a>

        }
        else if(Global_GPS_Speed_Completetion==Half_Completed_GPS)
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <TIM2_IRQHandler+0x7c>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d108      	bne.n	800265e <TIM2_IRQHandler+0x6a>
        {
        	Global_GPS_Speed_Completetion=Nothing_Completed;
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <TIM2_IRQHandler+0x7c>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	e004      	b.n	800265e <TIM2_IRQHandler+0x6a>
        	/*Notify the ESPPeriodicTask*/
        	//xTaskNotifyFromISR();
        }

	}else {
		edges_counter++;
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <TIM2_IRQHandler+0x80>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3301      	adds	r3, #1
 800265a:	4a06      	ldr	r2, [pc, #24]	; (8002674 <TIM2_IRQHandler+0x80>)
 800265c:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800265e:	4802      	ldr	r0, [pc, #8]	; (8002668 <TIM2_IRQHandler+0x74>)
 8002660:	f002 f9b6 	bl	80049d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000508 	.word	0x20000508
 800266c:	2000073a 	.word	0x2000073a
 8002670:	200001fc 	.word	0x200001fc
 8002674:	200001f8 	.word	0x200001f8

08002678 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 800267c:	4803      	ldr	r0, [pc, #12]	; (800268c <USART1_IRQHandler+0x14>)
 800267e:	f7fe ff83 	bl	8001588 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002682:	4802      	ldr	r0, [pc, #8]	; (800268c <USART1_IRQHandler+0x14>)
 8002684:	f002 ff6c 	bl	8005560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	2000066c 	.word	0x2000066c

08002690 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <USART3_IRQHandler+0x10>)
 8002696:	f002 ff63 	bl	8005560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200006b0 	.word	0x200006b0

080026a4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <UART5_IRQHandler+0x10>)
 80026aa:	f002 ff59 	bl	8005560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000628 	.word	0x20000628

080026b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <TIM7_IRQHandler+0x10>)
 80026be:	f002 f987 	bl	80049d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000073c 	.word	0x2000073c

080026cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return 1;
 80026d0:	2301      	movs	r3, #1
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <_kill>:

int _kill(int pid, int sig)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026e6:	f008 fa27 	bl	800ab38 <__errno>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2216      	movs	r2, #22
 80026ee:	601a      	str	r2, [r3, #0]
  return -1;
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_exit>:

void _exit (int status)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002704:	f04f 31ff 	mov.w	r1, #4294967295
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ffe7 	bl	80026dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800270e:	e7fe      	b.n	800270e <_exit+0x12>

08002710 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	e00a      	b.n	8002738 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002722:	f3af 8000 	nop.w
 8002726:	4601      	mov	r1, r0
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	60ba      	str	r2, [r7, #8]
 800272e:	b2ca      	uxtb	r2, r1
 8002730:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3301      	adds	r3, #1
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	dbf0      	blt.n	8002722 <_read+0x12>
  }

  return len;
 8002740:	687b      	ldr	r3, [r7, #4]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <_close>:
  }
  return len;
}

int _close(int file)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002772:	605a      	str	r2, [r3, #4]
  return 0;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <_isatty>:

int _isatty(int file)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <SystemInit+0x20>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <SystemInit+0x20>)
 80027c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002810 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027dc:	480d      	ldr	r0, [pc, #52]	; (8002814 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027de:	490e      	ldr	r1, [pc, #56]	; (8002818 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027e0:	4a0e      	ldr	r2, [pc, #56]	; (800281c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e4:	e002      	b.n	80027ec <LoopCopyDataInit>

080027e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ea:	3304      	adds	r3, #4

080027ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f0:	d3f9      	bcc.n	80027e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027f2:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027f4:	4c0b      	ldr	r4, [pc, #44]	; (8002824 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f8:	e001      	b.n	80027fe <LoopFillZerobss>

080027fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027fc:	3204      	adds	r2, #4

080027fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002800:	d3fb      	bcc.n	80027fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002802:	f7ff ffd7 	bl	80027b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002806:	f008 f99d 	bl	800ab44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800280a:	f7fe ff45 	bl	8001698 <main>
  bx  lr    
 800280e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002810:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002818:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800281c:	0800cecc 	.word	0x0800cecc
  ldr r2, =_sbss
 8002820:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002824:	20013cec 	.word	0x20013cec

08002828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002828:	e7fe      	b.n	8002828 <ADC_IRQHandler>
	...

0800282c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002830:	4b0e      	ldr	r3, [pc, #56]	; (800286c <HAL_Init+0x40>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0d      	ldr	r2, [pc, #52]	; (800286c <HAL_Init+0x40>)
 8002836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800283a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_Init+0x40>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <HAL_Init+0x40>)
 8002842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <HAL_Init+0x40>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a07      	ldr	r2, [pc, #28]	; (800286c <HAL_Init+0x40>)
 800284e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002854:	2003      	movs	r0, #3
 8002856:	f000 f8fc 	bl	8002a52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800285a:	200f      	movs	r0, #15
 800285c:	f7ff fe3e 	bl	80024dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002860:	f7ff fafe 	bl	8001e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40023c00 	.word	0x40023c00

08002870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_IncTick+0x20>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_IncTick+0x24>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4413      	add	r3, r2
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <HAL_IncTick+0x24>)
 8002882:	6013      	str	r3, [r2, #0]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000008 	.word	0x20000008
 8002894:	20000784 	.word	0x20000784

08002898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return uwTick;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_GetTick+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000784 	.word	0x20000784

080028b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b8:	f7ff ffee 	bl	8002898 <HAL_GetTick>
 80028bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c8:	d005      	beq.n	80028d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_Delay+0x44>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028d6:	bf00      	nop
 80028d8:	f7ff ffde 	bl	8002898 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d8f7      	bhi.n	80028d8 <HAL_Delay+0x28>
  {
  }
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000008 	.word	0x20000008

080028f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <__NVIC_SetPriorityGrouping+0x44>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002914:	4013      	ands	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292a:	4a04      	ldr	r2, [pc, #16]	; (800293c <__NVIC_SetPriorityGrouping+0x44>)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	60d3      	str	r3, [r2, #12]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <__NVIC_GetPriorityGrouping+0x18>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	f003 0307 	and.w	r3, r3, #7
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	2b00      	cmp	r3, #0
 800296c:	db0b      	blt.n	8002986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	4907      	ldr	r1, [pc, #28]	; (8002994 <__NVIC_EnableIRQ+0x38>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2001      	movs	r0, #1
 800297e:	fa00 f202 	lsl.w	r2, r0, r2
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000e100 	.word	0xe000e100

08002998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	6039      	str	r1, [r7, #0]
 80029a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	db0a      	blt.n	80029c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	490c      	ldr	r1, [pc, #48]	; (80029e4 <__NVIC_SetPriority+0x4c>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	0112      	lsls	r2, r2, #4
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	440b      	add	r3, r1
 80029bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c0:	e00a      	b.n	80029d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4908      	ldr	r1, [pc, #32]	; (80029e8 <__NVIC_SetPriority+0x50>)
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	3b04      	subs	r3, #4
 80029d0:	0112      	lsls	r2, r2, #4
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	440b      	add	r3, r1
 80029d6:	761a      	strb	r2, [r3, #24]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000e100 	.word	0xe000e100
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	; 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f1c3 0307 	rsb	r3, r3, #7
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	bf28      	it	cs
 8002a0a:	2304      	movcs	r3, #4
 8002a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3304      	adds	r3, #4
 8002a12:	2b06      	cmp	r3, #6
 8002a14:	d902      	bls.n	8002a1c <NVIC_EncodePriority+0x30>
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3b03      	subs	r3, #3
 8002a1a:	e000      	b.n	8002a1e <NVIC_EncodePriority+0x32>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	f04f 32ff 	mov.w	r2, #4294967295
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	401a      	ands	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a34:	f04f 31ff 	mov.w	r1, #4294967295
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	43d9      	mvns	r1, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	4313      	orrs	r3, r2
         );
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3724      	adds	r7, #36	; 0x24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ff4c 	bl	80028f8 <__NVIC_SetPriorityGrouping>
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a7a:	f7ff ff61 	bl	8002940 <__NVIC_GetPriorityGrouping>
 8002a7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	6978      	ldr	r0, [r7, #20]
 8002a86:	f7ff ffb1 	bl	80029ec <NVIC_EncodePriority>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ff80 	bl	8002998 <__NVIC_SetPriority>
}
 8002a98:	bf00      	nop
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff54 	bl	800295c <__NVIC_EnableIRQ>
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aca:	f7ff fee5 	bl	8002898 <HAL_GetTick>
 8002ace:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d008      	beq.n	8002aee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e052      	b.n	8002b94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0216 	bic.w	r2, r2, #22
 8002afc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d103      	bne.n	8002b1e <HAL_DMA_Abort+0x62>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0208 	bic.w	r2, r2, #8
 8002b2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b3e:	e013      	b.n	8002b68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b40:	f7ff feaa 	bl	8002898 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d90c      	bls.n	8002b68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2203      	movs	r2, #3
 8002b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e015      	b.n	8002b94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1e4      	bne.n	8002b40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	223f      	movs	r2, #63	; 0x3f
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d004      	beq.n	8002bba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2280      	movs	r2, #128	; 0x80
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00c      	b.n	8002bd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2205      	movs	r2, #5
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	e165      	b.n	8002ec8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	f040 8154 	bne.w	8002ec2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d005      	beq.n	8002c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d130      	bne.n	8002c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 0201 	and.w	r2, r3, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d017      	beq.n	8002cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d123      	bne.n	8002d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	08da      	lsrs	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3208      	adds	r2, #8
 8002ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	220f      	movs	r2, #15
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	08da      	lsrs	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3208      	adds	r2, #8
 8002d1e:	69b9      	ldr	r1, [r7, #24]
 8002d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0203 	and.w	r2, r3, #3
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80ae 	beq.w	8002ec2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4b5d      	ldr	r3, [pc, #372]	; (8002ee0 <HAL_GPIO_Init+0x300>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	4a5c      	ldr	r2, [pc, #368]	; (8002ee0 <HAL_GPIO_Init+0x300>)
 8002d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d74:	6453      	str	r3, [r2, #68]	; 0x44
 8002d76:	4b5a      	ldr	r3, [pc, #360]	; (8002ee0 <HAL_GPIO_Init+0x300>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d82:	4a58      	ldr	r2, [pc, #352]	; (8002ee4 <HAL_GPIO_Init+0x304>)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	3302      	adds	r3, #2
 8002d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	220f      	movs	r2, #15
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4f      	ldr	r2, [pc, #316]	; (8002ee8 <HAL_GPIO_Init+0x308>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d025      	beq.n	8002dfa <HAL_GPIO_Init+0x21a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4e      	ldr	r2, [pc, #312]	; (8002eec <HAL_GPIO_Init+0x30c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01f      	beq.n	8002df6 <HAL_GPIO_Init+0x216>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4d      	ldr	r2, [pc, #308]	; (8002ef0 <HAL_GPIO_Init+0x310>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d019      	beq.n	8002df2 <HAL_GPIO_Init+0x212>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4c      	ldr	r2, [pc, #304]	; (8002ef4 <HAL_GPIO_Init+0x314>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <HAL_GPIO_Init+0x20e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4b      	ldr	r2, [pc, #300]	; (8002ef8 <HAL_GPIO_Init+0x318>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00d      	beq.n	8002dea <HAL_GPIO_Init+0x20a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4a      	ldr	r2, [pc, #296]	; (8002efc <HAL_GPIO_Init+0x31c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <HAL_GPIO_Init+0x206>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a49      	ldr	r2, [pc, #292]	; (8002f00 <HAL_GPIO_Init+0x320>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_GPIO_Init+0x202>
 8002dde:	2306      	movs	r3, #6
 8002de0:	e00c      	b.n	8002dfc <HAL_GPIO_Init+0x21c>
 8002de2:	2307      	movs	r3, #7
 8002de4:	e00a      	b.n	8002dfc <HAL_GPIO_Init+0x21c>
 8002de6:	2305      	movs	r3, #5
 8002de8:	e008      	b.n	8002dfc <HAL_GPIO_Init+0x21c>
 8002dea:	2304      	movs	r3, #4
 8002dec:	e006      	b.n	8002dfc <HAL_GPIO_Init+0x21c>
 8002dee:	2303      	movs	r3, #3
 8002df0:	e004      	b.n	8002dfc <HAL_GPIO_Init+0x21c>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e002      	b.n	8002dfc <HAL_GPIO_Init+0x21c>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <HAL_GPIO_Init+0x21c>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	f002 0203 	and.w	r2, r2, #3
 8002e02:	0092      	lsls	r2, r2, #2
 8002e04:	4093      	lsls	r3, r2
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e0c:	4935      	ldr	r1, [pc, #212]	; (8002ee4 <HAL_GPIO_Init+0x304>)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	3302      	adds	r3, #2
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e1a:	4b3a      	ldr	r3, [pc, #232]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e3e:	4a31      	ldr	r2, [pc, #196]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e44:	4b2f      	ldr	r3, [pc, #188]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e68:	4a26      	ldr	r2, [pc, #152]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e6e:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e92:	4a1c      	ldr	r2, [pc, #112]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e98:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ebc:	4a11      	ldr	r2, [pc, #68]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b0f      	cmp	r3, #15
 8002ecc:	f67f ae96 	bls.w	8002bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	3724      	adds	r7, #36	; 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40013800 	.word	0x40013800
 8002ee8:	40020000 	.word	0x40020000
 8002eec:	40020400 	.word	0x40020400
 8002ef0:	40020800 	.word	0x40020800
 8002ef4:	40020c00 	.word	0x40020c00
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40021400 	.word	0x40021400
 8002f00:	40021800 	.word	0x40021800
 8002f04:	40013c00 	.word	0x40013c00

08002f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
 8002f14:	4613      	mov	r3, r2
 8002f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f18:	787b      	ldrb	r3, [r7, #1]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f24:	e003      	b.n	8002f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f26:	887b      	ldrh	r3, [r7, #2]
 8002f28:	041a      	lsls	r2, r3, #16
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	619a      	str	r2, [r3, #24]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e12b      	b.n	80031a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fe ffa4 	bl	8001eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	; 0x24
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fa0:	f000 fd26 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 8002fa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4a81      	ldr	r2, [pc, #516]	; (80031b0 <HAL_I2C_Init+0x274>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d807      	bhi.n	8002fc0 <HAL_I2C_Init+0x84>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a80      	ldr	r2, [pc, #512]	; (80031b4 <HAL_I2C_Init+0x278>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	bf94      	ite	ls
 8002fb8:	2301      	movls	r3, #1
 8002fba:	2300      	movhi	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e006      	b.n	8002fce <HAL_I2C_Init+0x92>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a7d      	ldr	r2, [pc, #500]	; (80031b8 <HAL_I2C_Init+0x27c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	bf94      	ite	ls
 8002fc8:	2301      	movls	r3, #1
 8002fca:	2300      	movhi	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0e7      	b.n	80031a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a78      	ldr	r2, [pc, #480]	; (80031bc <HAL_I2C_Init+0x280>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	0c9b      	lsrs	r3, r3, #18
 8002fe0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a6a      	ldr	r2, [pc, #424]	; (80031b0 <HAL_I2C_Init+0x274>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d802      	bhi.n	8003010 <HAL_I2C_Init+0xd4>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3301      	adds	r3, #1
 800300e:	e009      	b.n	8003024 <HAL_I2C_Init+0xe8>
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	4a69      	ldr	r2, [pc, #420]	; (80031c0 <HAL_I2C_Init+0x284>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	3301      	adds	r3, #1
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	430b      	orrs	r3, r1
 800302a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003036:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	495c      	ldr	r1, [pc, #368]	; (80031b0 <HAL_I2C_Init+0x274>)
 8003040:	428b      	cmp	r3, r1
 8003042:	d819      	bhi.n	8003078 <HAL_I2C_Init+0x13c>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e59      	subs	r1, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003052:	1c59      	adds	r1, r3, #1
 8003054:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003058:	400b      	ands	r3, r1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_I2C_Init+0x138>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1e59      	subs	r1, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fbb1 f3f3 	udiv	r3, r1, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003072:	e051      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 8003074:	2304      	movs	r3, #4
 8003076:	e04f      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d111      	bne.n	80030a4 <HAL_I2C_Init+0x168>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e58      	subs	r0, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	440b      	add	r3, r1
 800308e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003092:	3301      	adds	r3, #1
 8003094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	e012      	b.n	80030ca <HAL_I2C_Init+0x18e>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1e58      	subs	r0, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	0099      	lsls	r1, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_I2C_Init+0x196>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e022      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10e      	bne.n	80030f8 <HAL_I2C_Init+0x1bc>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1e58      	subs	r0, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	440b      	add	r3, r1
 80030e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ec:	3301      	adds	r3, #1
 80030ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030f6:	e00f      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	0099      	lsls	r1, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	6809      	ldr	r1, [r1, #0]
 800311c:	4313      	orrs	r3, r2
 800311e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69da      	ldr	r2, [r3, #28]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6911      	ldr	r1, [r2, #16]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68d2      	ldr	r2, [r2, #12]
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	430b      	orrs	r3, r1
 800315a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	000186a0 	.word	0x000186a0
 80031b4:	001e847f 	.word	0x001e847f
 80031b8:	003d08ff 	.word	0x003d08ff
 80031bc:	431bde83 	.word	0x431bde83
 80031c0:	10624dd3 	.word	0x10624dd3

080031c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	461a      	mov	r2, r3
 80031d0:	460b      	mov	r3, r1
 80031d2:	817b      	strh	r3, [r7, #10]
 80031d4:	4613      	mov	r3, r2
 80031d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031d8:	f7ff fb5e 	bl	8002898 <HAL_GetTick>
 80031dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	f040 80e0 	bne.w	80033ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2319      	movs	r3, #25
 80031f2:	2201      	movs	r2, #1
 80031f4:	4970      	ldr	r1, [pc, #448]	; (80033b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f964 	bl	80034c4 <I2C_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003202:	2302      	movs	r3, #2
 8003204:	e0d3      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_I2C_Master_Transmit+0x50>
 8003210:	2302      	movs	r3, #2
 8003212:	e0cc      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ea>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d007      	beq.n	800323a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003248:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2221      	movs	r2, #33	; 0x21
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2210      	movs	r2, #16
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	893a      	ldrh	r2, [r7, #8]
 800326a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4a50      	ldr	r2, [pc, #320]	; (80033bc <HAL_I2C_Master_Transmit+0x1f8>)
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800327c:	8979      	ldrh	r1, [r7, #10]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	6a3a      	ldr	r2, [r7, #32]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f89c 	bl	80033c0 <I2C_MasterRequestWrite>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e08d      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032a8:	e066      	b.n	8003378 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	6a39      	ldr	r1, [r7, #32]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f9de 	bl	8003670 <I2C_WaitOnTXEFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00d      	beq.n	80032d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d107      	bne.n	80032d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e06b      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	781a      	ldrb	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b04      	cmp	r3, #4
 8003312:	d11b      	bne.n	800334c <HAL_I2C_Master_Transmit+0x188>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	d017      	beq.n	800334c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	781a      	ldrb	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	6a39      	ldr	r1, [r7, #32]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f9ce 	bl	80036f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	2b04      	cmp	r3, #4
 8003362:	d107      	bne.n	8003374 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003372:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e01a      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	2b00      	cmp	r3, #0
 800337e:	d194      	bne.n	80032aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e000      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
  }
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	00100002 	.word	0x00100002
 80033bc:	ffff0000 	.word	0xffff0000

080033c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	460b      	mov	r3, r1
 80033ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d006      	beq.n	80033ea <I2C_MasterRequestWrite+0x2a>
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d003      	beq.n	80033ea <I2C_MasterRequestWrite+0x2a>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033e8:	d108      	bne.n	80033fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e00b      	b.n	8003414 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	2b12      	cmp	r3, #18
 8003402:	d107      	bne.n	8003414 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003412:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f84f 	bl	80034c4 <I2C_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00d      	beq.n	8003448 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800343a:	d103      	bne.n	8003444 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e035      	b.n	80034b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003450:	d108      	bne.n	8003464 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003452:	897b      	ldrh	r3, [r7, #10]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003460:	611a      	str	r2, [r3, #16]
 8003462:	e01b      	b.n	800349c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003464:	897b      	ldrh	r3, [r7, #10]
 8003466:	11db      	asrs	r3, r3, #7
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 0306 	and.w	r3, r3, #6
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f063 030f 	orn	r3, r3, #15
 8003474:	b2da      	uxtb	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	490e      	ldr	r1, [pc, #56]	; (80034bc <I2C_MasterRequestWrite+0xfc>)
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f875 	bl	8003572 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e010      	b.n	80034b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003492:	897b      	ldrh	r3, [r7, #10]
 8003494:	b2da      	uxtb	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4907      	ldr	r1, [pc, #28]	; (80034c0 <I2C_MasterRequestWrite+0x100>)
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f865 	bl	8003572 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	00010008 	.word	0x00010008
 80034c0:	00010002 	.word	0x00010002

080034c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d4:	e025      	b.n	8003522 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d021      	beq.n	8003522 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034de:	f7ff f9db 	bl	8002898 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d302      	bcc.n	80034f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d116      	bne.n	8003522 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e023      	b.n	800356a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	0c1b      	lsrs	r3, r3, #16
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d10d      	bne.n	8003548 <I2C_WaitOnFlagUntilTimeout+0x84>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	43da      	mvns	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4013      	ands	r3, r2
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	e00c      	b.n	8003562 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	43da      	mvns	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4013      	ands	r3, r2
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	bf0c      	ite	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	2300      	movne	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	461a      	mov	r2, r3
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	429a      	cmp	r2, r3
 8003566:	d0b6      	beq.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003580:	e051      	b.n	8003626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003590:	d123      	bne.n	80035da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f043 0204 	orr.w	r2, r3, #4
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e046      	b.n	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d021      	beq.n	8003626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e2:	f7ff f959 	bl	8002898 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d116      	bne.n	8003626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f043 0220 	orr.w	r2, r3, #32
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e020      	b.n	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b01      	cmp	r3, #1
 800362e:	d10c      	bne.n	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	43da      	mvns	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4013      	ands	r3, r2
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	bf14      	ite	ne
 8003642:	2301      	movne	r3, #1
 8003644:	2300      	moveq	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	e00b      	b.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	43da      	mvns	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d18d      	bne.n	8003582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800367c:	e02d      	b.n	80036da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f878 	bl	8003774 <I2C_IsAcknowledgeFailed>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e02d      	b.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d021      	beq.n	80036da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003696:	f7ff f8ff 	bl	8002898 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d302      	bcc.n	80036ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d116      	bne.n	80036da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e007      	b.n	80036ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e4:	2b80      	cmp	r3, #128	; 0x80
 80036e6:	d1ca      	bne.n	800367e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036fe:	e02d      	b.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f837 	bl	8003774 <I2C_IsAcknowledgeFailed>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e02d      	b.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003716:	d021      	beq.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003718:	f7ff f8be 	bl	8002898 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	429a      	cmp	r2, r3
 8003726:	d302      	bcc.n	800372e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d116      	bne.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e007      	b.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d1ca      	bne.n	8003700 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378a:	d11b      	bne.n	80037c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003794:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	f043 0204 	orr.w	r2, r3, #4
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80037e0:	4b09      	ldr	r3, [pc, #36]	; (8003808 <HAL_PWR_EnterSLEEPMode+0x34>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	4a08      	ldr	r2, [pc, #32]	; (8003808 <HAL_PWR_EnterSLEEPMode+0x34>)
 80037e6:	f023 0304 	bic.w	r3, r3, #4
 80037ea:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80037f2:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80037f4:	e002      	b.n	80037fc <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80037f6:	bf40      	sev
    __WFE();
 80037f8:	bf20      	wfe
    __WFE();
 80037fa:	bf20      	wfe
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0cc      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003820:	4b68      	ldr	r3, [pc, #416]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d90c      	bls.n	8003848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b65      	ldr	r3, [pc, #404]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b63      	ldr	r3, [pc, #396]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0b8      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d020      	beq.n	8003896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003860:	4b59      	ldr	r3, [pc, #356]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4a58      	ldr	r2, [pc, #352]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800386a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003878:	4b53      	ldr	r3, [pc, #332]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4a52      	ldr	r2, [pc, #328]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003884:	4b50      	ldr	r3, [pc, #320]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	494d      	ldr	r1, [pc, #308]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d044      	beq.n	800392c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d119      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e07f      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d003      	beq.n	80038ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d107      	bne.n	80038da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ca:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e06f      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038da:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e067      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ea:	4b37      	ldr	r3, [pc, #220]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f023 0203 	bic.w	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4934      	ldr	r1, [pc, #208]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038fc:	f7fe ffcc 	bl	8002898 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003902:	e00a      	b.n	800391a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003904:	f7fe ffc8 	bl	8002898 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e04f      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391a:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 020c 	and.w	r2, r3, #12
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	429a      	cmp	r2, r3
 800392a:	d1eb      	bne.n	8003904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800392c:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d20c      	bcs.n	8003954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e032      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4916      	ldr	r1, [pc, #88]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397e:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	490e      	ldr	r1, [pc, #56]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003992:	f000 f887 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003996:	4602      	mov	r2, r0
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	490a      	ldr	r1, [pc, #40]	; (80039cc <HAL_RCC_ClockConfig+0x1c0>)
 80039a4:	5ccb      	ldrb	r3, [r1, r3]
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_RCC_ClockConfig+0x1c8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe fd92 	bl	80024dc <HAL_InitTick>

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023c00 	.word	0x40023c00
 80039c8:	40023800 	.word	0x40023800
 80039cc:	0800cb24 	.word	0x0800cb24
 80039d0:	20000000 	.word	0x20000000
 80039d4:	20000004 	.word	0x20000004

080039d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039dc:	4b03      	ldr	r3, [pc, #12]	; (80039ec <HAL_RCC_GetHCLKFreq+0x14>)
 80039de:	681b      	ldr	r3, [r3, #0]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000000 	.word	0x20000000

080039f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039f4:	f7ff fff0 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	0a9b      	lsrs	r3, r3, #10
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4903      	ldr	r1, [pc, #12]	; (8003a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40023800 	.word	0x40023800
 8003a14:	0800cb34 	.word	0x0800cb34

08003a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a1c:	f7ff ffdc 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	0b5b      	lsrs	r3, r3, #13
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4903      	ldr	r1, [pc, #12]	; (8003a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	0800cb34 	.word	0x0800cb34

08003a40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	220f      	movs	r2, #15
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a50:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_RCC_GetClockConfig+0x5c>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0203 	and.w	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <HAL_RCC_GetClockConfig+0x5c>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <HAL_RCC_GetClockConfig+0x5c>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <HAL_RCC_GetClockConfig+0x5c>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	08db      	lsrs	r3, r3, #3
 8003a7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a82:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <HAL_RCC_GetClockConfig+0x60>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 020f 	and.w	r2, r3, #15
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	601a      	str	r2, [r3, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40023c00 	.word	0x40023c00

08003aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa8:	b0a6      	sub	sp, #152	; 0x98
 8003aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aca:	4bc8      	ldr	r3, [pc, #800]	; (8003dec <HAL_RCC_GetSysClockFreq+0x348>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b0c      	cmp	r3, #12
 8003ad4:	f200 817e 	bhi.w	8003dd4 <HAL_RCC_GetSysClockFreq+0x330>
 8003ad8:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ade:	bf00      	nop
 8003ae0:	08003b15 	.word	0x08003b15
 8003ae4:	08003dd5 	.word	0x08003dd5
 8003ae8:	08003dd5 	.word	0x08003dd5
 8003aec:	08003dd5 	.word	0x08003dd5
 8003af0:	08003b1d 	.word	0x08003b1d
 8003af4:	08003dd5 	.word	0x08003dd5
 8003af8:	08003dd5 	.word	0x08003dd5
 8003afc:	08003dd5 	.word	0x08003dd5
 8003b00:	08003b25 	.word	0x08003b25
 8003b04:	08003dd5 	.word	0x08003dd5
 8003b08:	08003dd5 	.word	0x08003dd5
 8003b0c:	08003dd5 	.word	0x08003dd5
 8003b10:	08003c8f 	.word	0x08003c8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b14:	4bb6      	ldr	r3, [pc, #728]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003b1a:	e15f      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b1c:	4bb5      	ldr	r3, [pc, #724]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003b22:	e15b      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b24:	4bb1      	ldr	r3, [pc, #708]	; (8003dec <HAL_RCC_GetSysClockFreq+0x348>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b30:	4bae      	ldr	r3, [pc, #696]	; (8003dec <HAL_RCC_GetSysClockFreq+0x348>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d031      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3c:	4bab      	ldr	r3, [pc, #684]	; (8003dec <HAL_RCC_GetSysClockFreq+0x348>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	099b      	lsrs	r3, r3, #6
 8003b42:	2200      	movs	r2, #0
 8003b44:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4e:	663b      	str	r3, [r7, #96]	; 0x60
 8003b50:	2300      	movs	r3, #0
 8003b52:	667b      	str	r3, [r7, #100]	; 0x64
 8003b54:	4ba7      	ldr	r3, [pc, #668]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b56:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003b5a:	462a      	mov	r2, r5
 8003b5c:	fb03 f202 	mul.w	r2, r3, r2
 8003b60:	2300      	movs	r3, #0
 8003b62:	4621      	mov	r1, r4
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	4aa2      	ldr	r2, [pc, #648]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	fba1 1202 	umull	r1, r2, r1, r2
 8003b72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b74:	460a      	mov	r2, r1
 8003b76:	67ba      	str	r2, [r7, #120]	; 0x78
 8003b78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003b7a:	4413      	add	r3, r2
 8003b7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b82:	2200      	movs	r2, #0
 8003b84:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b86:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b8c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b90:	f7fd f8ea 	bl	8000d68 <__aeabi_uldivmod>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4613      	mov	r3, r2
 8003b9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b9e:	e064      	b.n	8003c6a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba0:	4b92      	ldr	r3, [pc, #584]	; (8003dec <HAL_RCC_GetSysClockFreq+0x348>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	653b      	str	r3, [r7, #80]	; 0x50
 8003baa:	657a      	str	r2, [r7, #84]	; 0x54
 8003bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	462b      	mov	r3, r5
 8003bc0:	f04f 0000 	mov.w	r0, #0
 8003bc4:	f04f 0100 	mov.w	r1, #0
 8003bc8:	0159      	lsls	r1, r3, #5
 8003bca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bce:	0150      	lsls	r0, r2, #5
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	1a51      	subs	r1, r2, r1
 8003bd8:	6139      	str	r1, [r7, #16]
 8003bda:	4629      	mov	r1, r5
 8003bdc:	eb63 0301 	sbc.w	r3, r3, r1
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bee:	4659      	mov	r1, fp
 8003bf0:	018b      	lsls	r3, r1, #6
 8003bf2:	4651      	mov	r1, sl
 8003bf4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bf8:	4651      	mov	r1, sl
 8003bfa:	018a      	lsls	r2, r1, #6
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	ebb2 0801 	subs.w	r8, r2, r1
 8003c02:	4659      	mov	r1, fp
 8003c04:	eb63 0901 	sbc.w	r9, r3, r1
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c1c:	4690      	mov	r8, r2
 8003c1e:	4699      	mov	r9, r3
 8003c20:	4623      	mov	r3, r4
 8003c22:	eb18 0303 	adds.w	r3, r8, r3
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	462b      	mov	r3, r5
 8003c2a:	eb49 0303 	adc.w	r3, r9, r3
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	028b      	lsls	r3, r1, #10
 8003c40:	4621      	mov	r1, r4
 8003c42:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c46:	4621      	mov	r1, r4
 8003c48:	028a      	lsls	r2, r1, #10
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c52:	2200      	movs	r2, #0
 8003c54:	643b      	str	r3, [r7, #64]	; 0x40
 8003c56:	647a      	str	r2, [r7, #68]	; 0x44
 8003c58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c5c:	f7fd f884 	bl	8000d68 <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4613      	mov	r3, r2
 8003c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c6a:	4b60      	ldr	r3, [pc, #384]	; (8003dec <HAL_RCC_GetSysClockFreq+0x348>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	0c1b      	lsrs	r3, r3, #16
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	3301      	adds	r3, #1
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003c7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003c8c:	e0a6      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c8e:	4b57      	ldr	r3, [pc, #348]	; (8003dec <HAL_RCC_GetSysClockFreq+0x348>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c9a:	4b54      	ldr	r3, [pc, #336]	; (8003dec <HAL_RCC_GetSysClockFreq+0x348>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d02a      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca6:	4b51      	ldr	r3, [pc, #324]	; (8003dec <HAL_RCC_GetSysClockFreq+0x348>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	099b      	lsrs	r3, r3, #6
 8003cac:	2200      	movs	r2, #0
 8003cae:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4b4e      	ldr	r3, [pc, #312]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003cbc:	fb03 f201 	mul.w	r2, r3, r1
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	fb00 f303 	mul.w	r3, r0, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	4a4a      	ldr	r2, [pc, #296]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x350>)
 8003cca:	fba0 1202 	umull	r1, r2, r0, r2
 8003cce:	677a      	str	r2, [r7, #116]	; 0x74
 8003cd0:	460a      	mov	r2, r1
 8003cd2:	673a      	str	r2, [r7, #112]	; 0x70
 8003cd4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003cd6:	4413      	add	r3, r2
 8003cd8:	677b      	str	r3, [r7, #116]	; 0x74
 8003cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cde:	2200      	movs	r2, #0
 8003ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce2:	637a      	str	r2, [r7, #52]	; 0x34
 8003ce4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ce8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003cec:	f7fd f83c 	bl	8000d68 <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cfa:	e05b      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cfc:	4b3b      	ldr	r3, [pc, #236]	; (8003dec <HAL_RCC_GetSysClockFreq+0x348>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	2200      	movs	r2, #0
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0e:	623b      	str	r3, [r7, #32]
 8003d10:	2300      	movs	r3, #0
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
 8003d14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d18:	4642      	mov	r2, r8
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	f04f 0000 	mov.w	r0, #0
 8003d20:	f04f 0100 	mov.w	r1, #0
 8003d24:	0159      	lsls	r1, r3, #5
 8003d26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d2a:	0150      	lsls	r0, r2, #5
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4641      	mov	r1, r8
 8003d32:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d36:	4649      	mov	r1, r9
 8003d38:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d50:	ebb2 040a 	subs.w	r4, r2, sl
 8003d54:	eb63 050b 	sbc.w	r5, r3, fp
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	00eb      	lsls	r3, r5, #3
 8003d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d66:	00e2      	lsls	r2, r4, #3
 8003d68:	4614      	mov	r4, r2
 8003d6a:	461d      	mov	r5, r3
 8003d6c:	4643      	mov	r3, r8
 8003d6e:	18e3      	adds	r3, r4, r3
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	464b      	mov	r3, r9
 8003d74:	eb45 0303 	adc.w	r3, r5, r3
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d86:	4629      	mov	r1, r5
 8003d88:	028b      	lsls	r3, r1, #10
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d90:	4621      	mov	r1, r4
 8003d92:	028a      	lsls	r2, r1, #10
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	61bb      	str	r3, [r7, #24]
 8003da0:	61fa      	str	r2, [r7, #28]
 8003da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da6:	f7fc ffdf 	bl	8000d68 <__aeabi_uldivmod>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4613      	mov	r3, r2
 8003db0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003db4:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <HAL_RCC_GetSysClockFreq+0x348>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	0f1b      	lsrs	r3, r3, #28
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003dc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003dd2:	e003      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003dda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3798      	adds	r7, #152	; 0x98
 8003de4:	46bd      	mov	sp, r7
 8003de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800
 8003df0:	00f42400 	.word	0x00f42400
 8003df4:	017d7840 	.word	0x017d7840

08003df8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e28d      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8083 	beq.w	8003f1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e18:	4b94      	ldr	r3, [pc, #592]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d019      	beq.n	8003e58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e24:	4b91      	ldr	r3, [pc, #580]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e30:	4b8e      	ldr	r3, [pc, #568]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e3c:	d00c      	beq.n	8003e58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e3e:	4b8b      	ldr	r3, [pc, #556]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d112      	bne.n	8003e70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e4a:	4b88      	ldr	r3, [pc, #544]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e56:	d10b      	bne.n	8003e70 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e58:	4b84      	ldr	r3, [pc, #528]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d05b      	beq.n	8003f1c <HAL_RCC_OscConfig+0x124>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d157      	bne.n	8003f1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e25a      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e78:	d106      	bne.n	8003e88 <HAL_RCC_OscConfig+0x90>
 8003e7a:	4b7c      	ldr	r3, [pc, #496]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a7b      	ldr	r2, [pc, #492]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	e01d      	b.n	8003ec4 <HAL_RCC_OscConfig+0xcc>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e90:	d10c      	bne.n	8003eac <HAL_RCC_OscConfig+0xb4>
 8003e92:	4b76      	ldr	r3, [pc, #472]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a75      	ldr	r2, [pc, #468]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	4b73      	ldr	r3, [pc, #460]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a72      	ldr	r2, [pc, #456]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	e00b      	b.n	8003ec4 <HAL_RCC_OscConfig+0xcc>
 8003eac:	4b6f      	ldr	r3, [pc, #444]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a6e      	ldr	r2, [pc, #440]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	4b6c      	ldr	r3, [pc, #432]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a6b      	ldr	r2, [pc, #428]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d013      	beq.n	8003ef4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fe fce4 	bl	8002898 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7fe fce0 	bl	8002898 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	; 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e21f      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	4b61      	ldr	r3, [pc, #388]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0xdc>
 8003ef2:	e014      	b.n	8003f1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fe fcd0 	bl	8002898 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003efc:	f7fe fccc 	bl	8002898 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b64      	cmp	r3, #100	; 0x64
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e20b      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0e:	4b57      	ldr	r3, [pc, #348]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x104>
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d06f      	beq.n	800400a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f2a:	4b50      	ldr	r3, [pc, #320]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d017      	beq.n	8003f66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f36:	4b4d      	ldr	r3, [pc, #308]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d105      	bne.n	8003f4e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f42:	4b4a      	ldr	r3, [pc, #296]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f4e:	4b47      	ldr	r3, [pc, #284]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f56:	2b0c      	cmp	r3, #12
 8003f58:	d11c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f5a:	4b44      	ldr	r3, [pc, #272]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d116      	bne.n	8003f94 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f66:	4b41      	ldr	r3, [pc, #260]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_RCC_OscConfig+0x186>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d001      	beq.n	8003f7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e1d3      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7e:	4b3b      	ldr	r3, [pc, #236]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4937      	ldr	r1, [pc, #220]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f92:	e03a      	b.n	800400a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d020      	beq.n	8003fde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f9c:	4b34      	ldr	r3, [pc, #208]	; (8004070 <HAL_RCC_OscConfig+0x278>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7fe fc79 	bl	8002898 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003faa:	f7fe fc75 	bl	8002898 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e1b4      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fbc:	4b2b      	ldr	r3, [pc, #172]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc8:	4b28      	ldr	r3, [pc, #160]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	4925      	ldr	r1, [pc, #148]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	600b      	str	r3, [r1, #0]
 8003fdc:	e015      	b.n	800400a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fde:	4b24      	ldr	r3, [pc, #144]	; (8004070 <HAL_RCC_OscConfig+0x278>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fe fc58 	bl	8002898 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fec:	f7fe fc54 	bl	8002898 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e193      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d036      	beq.n	8004084 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d016      	beq.n	800404c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800401e:	4b15      	ldr	r3, [pc, #84]	; (8004074 <HAL_RCC_OscConfig+0x27c>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004024:	f7fe fc38 	bl	8002898 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800402c:	f7fe fc34 	bl	8002898 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e173      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403e:	4b0b      	ldr	r3, [pc, #44]	; (800406c <HAL_RCC_OscConfig+0x274>)
 8004040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x234>
 800404a:	e01b      	b.n	8004084 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <HAL_RCC_OscConfig+0x27c>)
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004052:	f7fe fc21 	bl	8002898 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004058:	e00e      	b.n	8004078 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800405a:	f7fe fc1d 	bl	8002898 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d907      	bls.n	8004078 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e15c      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
 800406c:	40023800 	.word	0x40023800
 8004070:	42470000 	.word	0x42470000
 8004074:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004078:	4b8a      	ldr	r3, [pc, #552]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 800407a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ea      	bne.n	800405a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8097 	beq.w	80041c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004092:	2300      	movs	r3, #0
 8004094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004096:	4b83      	ldr	r3, [pc, #524]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10f      	bne.n	80040c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	4b7f      	ldr	r3, [pc, #508]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	4a7e      	ldr	r2, [pc, #504]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 80040ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b0:	6413      	str	r3, [r2, #64]	; 0x40
 80040b2:	4b7c      	ldr	r3, [pc, #496]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040be:	2301      	movs	r3, #1
 80040c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c2:	4b79      	ldr	r3, [pc, #484]	; (80042a8 <HAL_RCC_OscConfig+0x4b0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d118      	bne.n	8004100 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ce:	4b76      	ldr	r3, [pc, #472]	; (80042a8 <HAL_RCC_OscConfig+0x4b0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a75      	ldr	r2, [pc, #468]	; (80042a8 <HAL_RCC_OscConfig+0x4b0>)
 80040d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040da:	f7fe fbdd 	bl	8002898 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e2:	f7fe fbd9 	bl	8002898 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e118      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f4:	4b6c      	ldr	r3, [pc, #432]	; (80042a8 <HAL_RCC_OscConfig+0x4b0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d106      	bne.n	8004116 <HAL_RCC_OscConfig+0x31e>
 8004108:	4b66      	ldr	r3, [pc, #408]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	4a65      	ldr	r2, [pc, #404]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6713      	str	r3, [r2, #112]	; 0x70
 8004114:	e01c      	b.n	8004150 <HAL_RCC_OscConfig+0x358>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b05      	cmp	r3, #5
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x340>
 800411e:	4b61      	ldr	r3, [pc, #388]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	4a60      	ldr	r2, [pc, #384]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 8004124:	f043 0304 	orr.w	r3, r3, #4
 8004128:	6713      	str	r3, [r2, #112]	; 0x70
 800412a:	4b5e      	ldr	r3, [pc, #376]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	4a5d      	ldr	r2, [pc, #372]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	6713      	str	r3, [r2, #112]	; 0x70
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0x358>
 8004138:	4b5a      	ldr	r3, [pc, #360]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413c:	4a59      	ldr	r2, [pc, #356]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	6713      	str	r3, [r2, #112]	; 0x70
 8004144:	4b57      	ldr	r3, [pc, #348]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	4a56      	ldr	r2, [pc, #344]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 800414a:	f023 0304 	bic.w	r3, r3, #4
 800414e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7fe fb9e 	bl	8002898 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fe fb9a 	bl	8002898 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e0d7      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004176:	4b4b      	ldr	r3, [pc, #300]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0ee      	beq.n	8004160 <HAL_RCC_OscConfig+0x368>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004184:	f7fe fb88 	bl	8002898 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800418c:	f7fe fb84 	bl	8002898 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	; 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e0c1      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a2:	4b40      	ldr	r3, [pc, #256]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1ee      	bne.n	800418c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d105      	bne.n	80041c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b4:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	4a3a      	ldr	r2, [pc, #232]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 80041ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80ad 	beq.w	8004324 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ca:	4b36      	ldr	r3, [pc, #216]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d060      	beq.n	8004298 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d145      	bne.n	800426a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041de:	4b33      	ldr	r3, [pc, #204]	; (80042ac <HAL_RCC_OscConfig+0x4b4>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fe fb58 	bl	8002898 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fe fb54 	bl	8002898 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e093      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fe:	4b29      	ldr	r3, [pc, #164]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	019b      	lsls	r3, r3, #6
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	085b      	lsrs	r3, r3, #1
 8004222:	3b01      	subs	r3, #1
 8004224:	041b      	lsls	r3, r3, #16
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	061b      	lsls	r3, r3, #24
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	071b      	lsls	r3, r3, #28
 8004236:	491b      	ldr	r1, [pc, #108]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 8004238:	4313      	orrs	r3, r2
 800423a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800423c:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <HAL_RCC_OscConfig+0x4b4>)
 800423e:	2201      	movs	r2, #1
 8004240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004242:	f7fe fb29 	bl	8002898 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424a:	f7fe fb25 	bl	8002898 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e064      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800425c:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x452>
 8004268:	e05c      	b.n	8004324 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <HAL_RCC_OscConfig+0x4b4>)
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fe fb12 	bl	8002898 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004278:	f7fe fb0e 	bl	8002898 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e04d      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <HAL_RCC_OscConfig+0x4ac>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x480>
 8004296:	e045      	b.n	8004324 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d107      	bne.n	80042b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e040      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
 80042a4:	40023800 	.word	0x40023800
 80042a8:	40007000 	.word	0x40007000
 80042ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042b0:	4b1f      	ldr	r3, [pc, #124]	; (8004330 <HAL_RCC_OscConfig+0x538>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d030      	beq.n	8004320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d129      	bne.n	8004320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d122      	bne.n	8004320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042e0:	4013      	ands	r3, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d119      	bne.n	8004320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	085b      	lsrs	r3, r3, #1
 80042f8:	3b01      	subs	r3, #1
 80042fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d10f      	bne.n	8004320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800430c:	429a      	cmp	r2, r3
 800430e:	d107      	bne.n	8004320 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40023800 	.word	0x40023800

08004334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e041      	b.n	80043ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fd fed8 	bl	8002110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f000 fd70 	bl	8004e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d001      	beq.n	80043ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e04e      	b.n	800448a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a23      	ldr	r2, [pc, #140]	; (8004498 <HAL_TIM_Base_Start_IT+0xc4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d022      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x80>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004416:	d01d      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x80>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1f      	ldr	r2, [pc, #124]	; (800449c <HAL_TIM_Base_Start_IT+0xc8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d018      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x80>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d013      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x80>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1c      	ldr	r2, [pc, #112]	; (80044a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00e      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x80>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1b      	ldr	r2, [pc, #108]	; (80044a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d009      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x80>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a19      	ldr	r2, [pc, #100]	; (80044ac <HAL_TIM_Base_Start_IT+0xd8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x80>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a18      	ldr	r2, [pc, #96]	; (80044b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d111      	bne.n	8004478 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b06      	cmp	r3, #6
 8004464:	d010      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004476:	e007      	b.n	8004488 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40010400 	.word	0x40010400
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40001800 	.word	0x40001800

080044b4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e041      	b.n	800454a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fd fdba 	bl	8002054 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3304      	adds	r3, #4
 80044f0:	4619      	mov	r1, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	f000 fcb0 	bl	8004e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e041      	b.n	80045e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d106      	bne.n	800457e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7fd fd91 	bl	80020a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2202      	movs	r2, #2
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3304      	adds	r3, #4
 800458e:	4619      	mov	r1, r3
 8004590:	4610      	mov	r0, r2
 8004592:	f000 fc61 	bl	8004e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <HAL_TIM_PWM_Start+0x24>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e022      	b.n	800465a <HAL_TIM_PWM_Start+0x6a>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b04      	cmp	r3, #4
 8004618:	d109      	bne.n	800462e <HAL_TIM_PWM_Start+0x3e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	bf14      	ite	ne
 8004626:	2301      	movne	r3, #1
 8004628:	2300      	moveq	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	e015      	b.n	800465a <HAL_TIM_PWM_Start+0x6a>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d109      	bne.n	8004648 <HAL_TIM_PWM_Start+0x58>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e008      	b.n	800465a <HAL_TIM_PWM_Start+0x6a>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	bf14      	ite	ne
 8004654:	2301      	movne	r3, #1
 8004656:	2300      	moveq	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e07c      	b.n	800475c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <HAL_TIM_PWM_Start+0x82>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004670:	e013      	b.n	800469a <HAL_TIM_PWM_Start+0xaa>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b04      	cmp	r3, #4
 8004676:	d104      	bne.n	8004682 <HAL_TIM_PWM_Start+0x92>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004680:	e00b      	b.n	800469a <HAL_TIM_PWM_Start+0xaa>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d104      	bne.n	8004692 <HAL_TIM_PWM_Start+0xa2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004690:	e003      	b.n	800469a <HAL_TIM_PWM_Start+0xaa>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2201      	movs	r2, #1
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fe28 	bl	80052f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2d      	ldr	r2, [pc, #180]	; (8004764 <HAL_TIM_PWM_Start+0x174>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <HAL_TIM_PWM_Start+0xcc>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a2c      	ldr	r2, [pc, #176]	; (8004768 <HAL_TIM_PWM_Start+0x178>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d101      	bne.n	80046c0 <HAL_TIM_PWM_Start+0xd0>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_TIM_PWM_Start+0xd2>
 80046c0:	2300      	movs	r3, #0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a22      	ldr	r2, [pc, #136]	; (8004764 <HAL_TIM_PWM_Start+0x174>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d022      	beq.n	8004726 <HAL_TIM_PWM_Start+0x136>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e8:	d01d      	beq.n	8004726 <HAL_TIM_PWM_Start+0x136>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1f      	ldr	r2, [pc, #124]	; (800476c <HAL_TIM_PWM_Start+0x17c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d018      	beq.n	8004726 <HAL_TIM_PWM_Start+0x136>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1d      	ldr	r2, [pc, #116]	; (8004770 <HAL_TIM_PWM_Start+0x180>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_TIM_PWM_Start+0x136>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1c      	ldr	r2, [pc, #112]	; (8004774 <HAL_TIM_PWM_Start+0x184>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_TIM_PWM_Start+0x136>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a16      	ldr	r2, [pc, #88]	; (8004768 <HAL_TIM_PWM_Start+0x178>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_TIM_PWM_Start+0x136>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a18      	ldr	r2, [pc, #96]	; (8004778 <HAL_TIM_PWM_Start+0x188>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_TIM_PWM_Start+0x136>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a16      	ldr	r2, [pc, #88]	; (800477c <HAL_TIM_PWM_Start+0x18c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d111      	bne.n	800474a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b06      	cmp	r3, #6
 8004736:	d010      	beq.n	800475a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004748:	e007      	b.n	800475a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0201 	orr.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40010000 	.word	0x40010000
 8004768:	40010400 	.word	0x40010400
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800
 8004774:	40000c00 	.word	0x40000c00
 8004778:	40014000 	.word	0x40014000
 800477c:	40001800 	.word	0x40001800

08004780 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d104      	bne.n	800479e <HAL_TIM_IC_Start_IT+0x1e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800479a:	b2db      	uxtb	r3, r3
 800479c:	e013      	b.n	80047c6 <HAL_TIM_IC_Start_IT+0x46>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d104      	bne.n	80047ae <HAL_TIM_IC_Start_IT+0x2e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	e00b      	b.n	80047c6 <HAL_TIM_IC_Start_IT+0x46>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d104      	bne.n	80047be <HAL_TIM_IC_Start_IT+0x3e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	e003      	b.n	80047c6 <HAL_TIM_IC_Start_IT+0x46>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d104      	bne.n	80047d8 <HAL_TIM_IC_Start_IT+0x58>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	e013      	b.n	8004800 <HAL_TIM_IC_Start_IT+0x80>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d104      	bne.n	80047e8 <HAL_TIM_IC_Start_IT+0x68>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	e00b      	b.n	8004800 <HAL_TIM_IC_Start_IT+0x80>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d104      	bne.n	80047f8 <HAL_TIM_IC_Start_IT+0x78>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	e003      	b.n	8004800 <HAL_TIM_IC_Start_IT+0x80>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004802:	7bbb      	ldrb	r3, [r7, #14]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d102      	bne.n	800480e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004808:	7b7b      	ldrb	r3, [r7, #13]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d001      	beq.n	8004812 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e0cc      	b.n	80049ac <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d104      	bne.n	8004822 <HAL_TIM_IC_Start_IT+0xa2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004820:	e013      	b.n	800484a <HAL_TIM_IC_Start_IT+0xca>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b04      	cmp	r3, #4
 8004826:	d104      	bne.n	8004832 <HAL_TIM_IC_Start_IT+0xb2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004830:	e00b      	b.n	800484a <HAL_TIM_IC_Start_IT+0xca>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b08      	cmp	r3, #8
 8004836:	d104      	bne.n	8004842 <HAL_TIM_IC_Start_IT+0xc2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004840:	e003      	b.n	800484a <HAL_TIM_IC_Start_IT+0xca>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d104      	bne.n	800485a <HAL_TIM_IC_Start_IT+0xda>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004858:	e013      	b.n	8004882 <HAL_TIM_IC_Start_IT+0x102>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b04      	cmp	r3, #4
 800485e:	d104      	bne.n	800486a <HAL_TIM_IC_Start_IT+0xea>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004868:	e00b      	b.n	8004882 <HAL_TIM_IC_Start_IT+0x102>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b08      	cmp	r3, #8
 800486e:	d104      	bne.n	800487a <HAL_TIM_IC_Start_IT+0xfa>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004878:	e003      	b.n	8004882 <HAL_TIM_IC_Start_IT+0x102>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2202      	movs	r2, #2
 800487e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b0c      	cmp	r3, #12
 8004886:	d841      	bhi.n	800490c <HAL_TIM_IC_Start_IT+0x18c>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <HAL_TIM_IC_Start_IT+0x110>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048c5 	.word	0x080048c5
 8004894:	0800490d 	.word	0x0800490d
 8004898:	0800490d 	.word	0x0800490d
 800489c:	0800490d 	.word	0x0800490d
 80048a0:	080048d7 	.word	0x080048d7
 80048a4:	0800490d 	.word	0x0800490d
 80048a8:	0800490d 	.word	0x0800490d
 80048ac:	0800490d 	.word	0x0800490d
 80048b0:	080048e9 	.word	0x080048e9
 80048b4:	0800490d 	.word	0x0800490d
 80048b8:	0800490d 	.word	0x0800490d
 80048bc:	0800490d 	.word	0x0800490d
 80048c0:	080048fb 	.word	0x080048fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0202 	orr.w	r2, r2, #2
 80048d2:	60da      	str	r2, [r3, #12]
      break;
 80048d4:	e01d      	b.n	8004912 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0204 	orr.w	r2, r2, #4
 80048e4:	60da      	str	r2, [r3, #12]
      break;
 80048e6:	e014      	b.n	8004912 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0208 	orr.w	r2, r2, #8
 80048f6:	60da      	str	r2, [r3, #12]
      break;
 80048f8:	e00b      	b.n	8004912 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0210 	orr.w	r2, r2, #16
 8004908:	60da      	str	r2, [r3, #12]
      break;
 800490a:	e002      	b.n	8004912 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
      break;
 8004910:	bf00      	nop
  }

  if (status == HAL_OK)
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d148      	bne.n	80049aa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2201      	movs	r2, #1
 800491e:	6839      	ldr	r1, [r7, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fce9 	bl	80052f8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <HAL_TIM_IC_Start_IT+0x234>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d022      	beq.n	8004976 <HAL_TIM_IC_Start_IT+0x1f6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004938:	d01d      	beq.n	8004976 <HAL_TIM_IC_Start_IT+0x1f6>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1e      	ldr	r2, [pc, #120]	; (80049b8 <HAL_TIM_IC_Start_IT+0x238>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d018      	beq.n	8004976 <HAL_TIM_IC_Start_IT+0x1f6>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1c      	ldr	r2, [pc, #112]	; (80049bc <HAL_TIM_IC_Start_IT+0x23c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d013      	beq.n	8004976 <HAL_TIM_IC_Start_IT+0x1f6>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1b      	ldr	r2, [pc, #108]	; (80049c0 <HAL_TIM_IC_Start_IT+0x240>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00e      	beq.n	8004976 <HAL_TIM_IC_Start_IT+0x1f6>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <HAL_TIM_IC_Start_IT+0x244>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d009      	beq.n	8004976 <HAL_TIM_IC_Start_IT+0x1f6>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <HAL_TIM_IC_Start_IT+0x248>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d004      	beq.n	8004976 <HAL_TIM_IC_Start_IT+0x1f6>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a16      	ldr	r2, [pc, #88]	; (80049cc <HAL_TIM_IC_Start_IT+0x24c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d111      	bne.n	800499a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b06      	cmp	r3, #6
 8004986:	d010      	beq.n	80049aa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004998:	e007      	b.n	80049aa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0201 	orr.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40010000 	.word	0x40010000
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40000800 	.word	0x40000800
 80049c0:	40000c00 	.word	0x40000c00
 80049c4:	40010400 	.word	0x40010400
 80049c8:	40014000 	.word	0x40014000
 80049cc:	40001800 	.word	0x40001800

080049d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d122      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d11b      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0202 	mvn.w	r2, #2
 80049fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fc fb36 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f9fe 	bl	8004e1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fa05 	bl	8004e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0204 	mvn.w	r2, #4
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fc fb0c 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f9d4 	bl	8004e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f9db 	bl	8004e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0208 	mvn.w	r2, #8
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fc fae2 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f9aa 	bl	8004e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f9b1 	bl	8004e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b10      	cmp	r3, #16
 8004ae0:	d122      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d11b      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0210 	mvn.w	r2, #16
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2208      	movs	r2, #8
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc fab8 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f980 	bl	8004e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f987 	bl	8004e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d10e      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d107      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0201 	mvn.w	r2, #1
 8004b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fd f96e 	bl	8001e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5e:	2b80      	cmp	r3, #128	; 0x80
 8004b60:	d10e      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6c:	2b80      	cmp	r3, #128	; 0x80
 8004b6e:	d107      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fc68 	bl	8005450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8a:	2b40      	cmp	r3, #64	; 0x40
 8004b8c:	d10e      	bne.n	8004bac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d107      	bne.n	8004bac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f94c 	bl	8004e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d107      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0220 	mvn.w	r2, #32
 8004bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fc32 	bl	800543c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bd8:	bf00      	nop
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_TIM_OC_ConfigChannel+0x1e>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e048      	b.n	8004c90 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b0c      	cmp	r3, #12
 8004c0a:	d839      	bhi.n	8004c80 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004c0c:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c12:	bf00      	nop
 8004c14:	08004c49 	.word	0x08004c49
 8004c18:	08004c81 	.word	0x08004c81
 8004c1c:	08004c81 	.word	0x08004c81
 8004c20:	08004c81 	.word	0x08004c81
 8004c24:	08004c57 	.word	0x08004c57
 8004c28:	08004c81 	.word	0x08004c81
 8004c2c:	08004c81 	.word	0x08004c81
 8004c30:	08004c81 	.word	0x08004c81
 8004c34:	08004c65 	.word	0x08004c65
 8004c38:	08004c81 	.word	0x08004c81
 8004c3c:	08004c81 	.word	0x08004c81
 8004c40:	08004c81 	.word	0x08004c81
 8004c44:	08004c73 	.word	0x08004c73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 f9a2 	bl	8004f98 <TIM_OC1_SetConfig>
      break;
 8004c54:	e017      	b.n	8004c86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fa0b 	bl	8005078 <TIM_OC2_SetConfig>
      break;
 8004c62:	e010      	b.n	8004c86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fa7a 	bl	8005164 <TIM_OC3_SetConfig>
      break;
 8004c70:	e009      	b.n	8004c86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 fae7 	bl	800524c <TIM_OC4_SetConfig>
      break;
 8004c7e:	e002      	b.n	8004c86 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	75fb      	strb	r3, [r7, #23]
      break;
 8004c84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e0ae      	b.n	8004e14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b0c      	cmp	r3, #12
 8004cc2:	f200 809f 	bhi.w	8004e04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cc6:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ccc:	08004d01 	.word	0x08004d01
 8004cd0:	08004e05 	.word	0x08004e05
 8004cd4:	08004e05 	.word	0x08004e05
 8004cd8:	08004e05 	.word	0x08004e05
 8004cdc:	08004d41 	.word	0x08004d41
 8004ce0:	08004e05 	.word	0x08004e05
 8004ce4:	08004e05 	.word	0x08004e05
 8004ce8:	08004e05 	.word	0x08004e05
 8004cec:	08004d83 	.word	0x08004d83
 8004cf0:	08004e05 	.word	0x08004e05
 8004cf4:	08004e05 	.word	0x08004e05
 8004cf8:	08004e05 	.word	0x08004e05
 8004cfc:	08004dc3 	.word	0x08004dc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 f946 	bl	8004f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0208 	orr.w	r2, r2, #8
 8004d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0204 	bic.w	r2, r2, #4
 8004d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6999      	ldr	r1, [r3, #24]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	619a      	str	r2, [r3, #24]
      break;
 8004d3e:	e064      	b.n	8004e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f996 	bl	8005078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6999      	ldr	r1, [r3, #24]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	021a      	lsls	r2, r3, #8
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	619a      	str	r2, [r3, #24]
      break;
 8004d80:	e043      	b.n	8004e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 f9eb 	bl	8005164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0208 	orr.w	r2, r2, #8
 8004d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0204 	bic.w	r2, r2, #4
 8004dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69d9      	ldr	r1, [r3, #28]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	61da      	str	r2, [r3, #28]
      break;
 8004dc0:	e023      	b.n	8004e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68b9      	ldr	r1, [r7, #8]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fa3f 	bl	800524c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69d9      	ldr	r1, [r3, #28]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	021a      	lsls	r2, r3, #8
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	61da      	str	r2, [r3, #28]
      break;
 8004e02:	e002      	b.n	8004e0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	75fb      	strb	r3, [r7, #23]
      break;
 8004e08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a40      	ldr	r2, [pc, #256]	; (8004f6c <TIM_Base_SetConfig+0x114>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d013      	beq.n	8004e98 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e76:	d00f      	beq.n	8004e98 <TIM_Base_SetConfig+0x40>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a3d      	ldr	r2, [pc, #244]	; (8004f70 <TIM_Base_SetConfig+0x118>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00b      	beq.n	8004e98 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a3c      	ldr	r2, [pc, #240]	; (8004f74 <TIM_Base_SetConfig+0x11c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d007      	beq.n	8004e98 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a3b      	ldr	r2, [pc, #236]	; (8004f78 <TIM_Base_SetConfig+0x120>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a3a      	ldr	r2, [pc, #232]	; (8004f7c <TIM_Base_SetConfig+0x124>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d108      	bne.n	8004eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a2f      	ldr	r2, [pc, #188]	; (8004f6c <TIM_Base_SetConfig+0x114>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d02b      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb8:	d027      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2c      	ldr	r2, [pc, #176]	; (8004f70 <TIM_Base_SetConfig+0x118>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d023      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2b      	ldr	r2, [pc, #172]	; (8004f74 <TIM_Base_SetConfig+0x11c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01f      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2a      	ldr	r2, [pc, #168]	; (8004f78 <TIM_Base_SetConfig+0x120>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d01b      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a29      	ldr	r2, [pc, #164]	; (8004f7c <TIM_Base_SetConfig+0x124>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d017      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a28      	ldr	r2, [pc, #160]	; (8004f80 <TIM_Base_SetConfig+0x128>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a27      	ldr	r2, [pc, #156]	; (8004f84 <TIM_Base_SetConfig+0x12c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00f      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a26      	ldr	r2, [pc, #152]	; (8004f88 <TIM_Base_SetConfig+0x130>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00b      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a25      	ldr	r2, [pc, #148]	; (8004f8c <TIM_Base_SetConfig+0x134>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d007      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a24      	ldr	r2, [pc, #144]	; (8004f90 <TIM_Base_SetConfig+0x138>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a23      	ldr	r2, [pc, #140]	; (8004f94 <TIM_Base_SetConfig+0x13c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d108      	bne.n	8004f1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <TIM_Base_SetConfig+0x114>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d003      	beq.n	8004f50 <TIM_Base_SetConfig+0xf8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a0c      	ldr	r2, [pc, #48]	; (8004f7c <TIM_Base_SetConfig+0x124>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d103      	bne.n	8004f58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	615a      	str	r2, [r3, #20]
}
 8004f5e:	bf00      	nop
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40000800 	.word	0x40000800
 8004f78:	40000c00 	.word	0x40000c00
 8004f7c:	40010400 	.word	0x40010400
 8004f80:	40014000 	.word	0x40014000
 8004f84:	40014400 	.word	0x40014400
 8004f88:	40014800 	.word	0x40014800
 8004f8c:	40001800 	.word	0x40001800
 8004f90:	40001c00 	.word	0x40001c00
 8004f94:	40002000 	.word	0x40002000

08004f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f023 0201 	bic.w	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f023 0302 	bic.w	r3, r3, #2
 8004fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a20      	ldr	r2, [pc, #128]	; (8005070 <TIM_OC1_SetConfig+0xd8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_OC1_SetConfig+0x64>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a1f      	ldr	r2, [pc, #124]	; (8005074 <TIM_OC1_SetConfig+0xdc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d10c      	bne.n	8005016 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f023 0308 	bic.w	r3, r3, #8
 8005002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f023 0304 	bic.w	r3, r3, #4
 8005014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a15      	ldr	r2, [pc, #84]	; (8005070 <TIM_OC1_SetConfig+0xd8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_OC1_SetConfig+0x8e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a14      	ldr	r2, [pc, #80]	; (8005074 <TIM_OC1_SetConfig+0xdc>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d111      	bne.n	800504a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800502c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	621a      	str	r2, [r3, #32]
}
 8005064:	bf00      	nop
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	40010000 	.word	0x40010000
 8005074:	40010400 	.word	0x40010400

08005078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f023 0210 	bic.w	r2, r3, #16
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	021b      	lsls	r3, r3, #8
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0320 	bic.w	r3, r3, #32
 80050c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a22      	ldr	r2, [pc, #136]	; (800515c <TIM_OC2_SetConfig+0xe4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_OC2_SetConfig+0x68>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a21      	ldr	r2, [pc, #132]	; (8005160 <TIM_OC2_SetConfig+0xe8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10d      	bne.n	80050fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a17      	ldr	r2, [pc, #92]	; (800515c <TIM_OC2_SetConfig+0xe4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_OC2_SetConfig+0x94>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a16      	ldr	r2, [pc, #88]	; (8005160 <TIM_OC2_SetConfig+0xe8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d113      	bne.n	8005134 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800511a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	621a      	str	r2, [r3, #32]
}
 800514e:	bf00      	nop
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40010000 	.word	0x40010000
 8005160:	40010400 	.word	0x40010400

08005164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0303 	bic.w	r3, r3, #3
 800519a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a21      	ldr	r2, [pc, #132]	; (8005244 <TIM_OC3_SetConfig+0xe0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d003      	beq.n	80051ca <TIM_OC3_SetConfig+0x66>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a20      	ldr	r2, [pc, #128]	; (8005248 <TIM_OC3_SetConfig+0xe4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d10d      	bne.n	80051e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	021b      	lsls	r3, r3, #8
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a16      	ldr	r2, [pc, #88]	; (8005244 <TIM_OC3_SetConfig+0xe0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_OC3_SetConfig+0x92>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a15      	ldr	r2, [pc, #84]	; (8005248 <TIM_OC3_SetConfig+0xe4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d113      	bne.n	800521e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	621a      	str	r2, [r3, #32]
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40010000 	.word	0x40010000
 8005248:	40010400 	.word	0x40010400

0800524c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	031b      	lsls	r3, r3, #12
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a12      	ldr	r2, [pc, #72]	; (80052f0 <TIM_OC4_SetConfig+0xa4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d003      	beq.n	80052b4 <TIM_OC4_SetConfig+0x68>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a11      	ldr	r2, [pc, #68]	; (80052f4 <TIM_OC4_SetConfig+0xa8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d109      	bne.n	80052c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	019b      	lsls	r3, r3, #6
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	621a      	str	r2, [r3, #32]
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40010400 	.word	0x40010400

080052f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	2201      	movs	r2, #1
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1a      	ldr	r2, [r3, #32]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	43db      	mvns	r3, r3
 800531a:	401a      	ands	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1a      	ldr	r2, [r3, #32]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	fa01 f303 	lsl.w	r3, r1, r3
 8005330:	431a      	orrs	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e05a      	b.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a21      	ldr	r2, [pc, #132]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d022      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a8:	d01d      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1d      	ldr	r2, [pc, #116]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d018      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1a      	ldr	r2, [pc, #104]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00e      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a18      	ldr	r2, [pc, #96]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d009      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a17      	ldr	r2, [pc, #92]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a15      	ldr	r2, [pc, #84]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10c      	bne.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40010000 	.word	0x40010000
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40010400 	.word	0x40010400
 8005434:	40014000 	.word	0x40014000
 8005438:	40001800 	.word	0x40001800

0800543c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e03f      	b.n	80054f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fc ff06 	bl	800229c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2224      	movs	r2, #36	; 0x24
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fcdf 	bl	8005e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	4613      	mov	r3, r2
 800550a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b20      	cmp	r3, #32
 8005516:	d11d      	bne.n	8005554 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <HAL_UART_Receive_IT+0x26>
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e016      	b.n	8005556 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_UART_Receive_IT+0x38>
 8005532:	2302      	movs	r3, #2
 8005534:	e00f      	b.n	8005556 <HAL_UART_Receive_IT+0x58>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005544:	88fb      	ldrh	r3, [r7, #6]
 8005546:	461a      	mov	r2, r3
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 fab6 	bl	8005abc <UART_Start_Receive_IT>
 8005550:	4603      	mov	r3, r0
 8005552:	e000      	b.n	8005556 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005554:	2302      	movs	r3, #2
  }
}
 8005556:	4618      	mov	r0, r3
 8005558:	3710      	adds	r7, #16
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b0ba      	sub	sp, #232	; 0xe8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005586:	2300      	movs	r3, #0
 8005588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800558c:	2300      	movs	r3, #0
 800558e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800559e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10f      	bne.n	80055c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d009      	beq.n	80055c6 <HAL_UART_IRQHandler+0x66>
 80055b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fb99 	bl	8005cf6 <UART_Receive_IT>
      return;
 80055c4:	e256      	b.n	8005a74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 80de 	beq.w	800578c <HAL_UART_IRQHandler+0x22c>
 80055d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d106      	bne.n	80055ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 80d1 	beq.w	800578c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <HAL_UART_IRQHandler+0xae>
 80055f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d005      	beq.n	800560e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f043 0201 	orr.w	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800560e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00b      	beq.n	8005632 <HAL_UART_IRQHandler+0xd2>
 800561a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f043 0202 	orr.w	r2, r3, #2
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00b      	beq.n	8005656 <HAL_UART_IRQHandler+0xf6>
 800563e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	f043 0204 	orr.w	r2, r3, #4
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d011      	beq.n	8005686 <HAL_UART_IRQHandler+0x126>
 8005662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d105      	bne.n	800567a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800566e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f043 0208 	orr.w	r2, r3, #8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 81ed 	beq.w	8005a6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <HAL_UART_IRQHandler+0x14e>
 800569c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fb24 	bl	8005cf6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	bf0c      	ite	eq
 80056bc:	2301      	moveq	r3, #1
 80056be:	2300      	movne	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d103      	bne.n	80056da <HAL_UART_IRQHandler+0x17a>
 80056d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d04f      	beq.n	800577a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fa2c 	bl	8005b38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d141      	bne.n	8005772 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3314      	adds	r3, #20
 80056f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800570c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3314      	adds	r3, #20
 8005716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800571a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800571e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1d9      	bne.n	80056ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	2b00      	cmp	r3, #0
 8005740:	d013      	beq.n	800576a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	4a7d      	ldr	r2, [pc, #500]	; (800593c <HAL_UART_IRQHandler+0x3dc>)
 8005748:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	4618      	mov	r0, r3
 8005750:	f7fd fa24 	bl	8002b9c <HAL_DMA_Abort_IT>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d016      	beq.n	8005788 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005764:	4610      	mov	r0, r2
 8005766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005768:	e00e      	b.n	8005788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f990 	bl	8005a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005770:	e00a      	b.n	8005788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f98c 	bl	8005a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005778:	e006      	b.n	8005788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f988 	bl	8005a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005786:	e170      	b.n	8005a6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005788:	bf00      	nop
    return;
 800578a:	e16e      	b.n	8005a6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	2b01      	cmp	r3, #1
 8005792:	f040 814a 	bne.w	8005a2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 8143 	beq.w	8005a2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80057a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 813c 	beq.w	8005a2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057b2:	2300      	movs	r3, #0
 80057b4:	60bb      	str	r3, [r7, #8]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	60bb      	str	r3, [r7, #8]
 80057c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d2:	2b40      	cmp	r3, #64	; 0x40
 80057d4:	f040 80b4 	bne.w	8005940 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 8140 	beq.w	8005a6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057f6:	429a      	cmp	r2, r3
 80057f8:	f080 8139 	bcs.w	8005a6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005802:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800580e:	f000 8088 	beq.w	8005922 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005820:	e853 3f00 	ldrex	r3, [r3]
 8005824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800582c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800583e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005842:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800584a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1d9      	bne.n	8005812 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3314      	adds	r3, #20
 8005864:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800586e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3314      	adds	r3, #20
 800587e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005882:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005886:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800588a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e1      	bne.n	800585e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3314      	adds	r3, #20
 80058a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3314      	adds	r3, #20
 80058ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e3      	bne.n	800589a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	330c      	adds	r3, #12
 80058e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ea:	e853 3f00 	ldrex	r3, [r3]
 80058ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f2:	f023 0310 	bic.w	r3, r3, #16
 80058f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	330c      	adds	r3, #12
 8005900:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005904:	65ba      	str	r2, [r7, #88]	; 0x58
 8005906:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005908:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800590a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800590c:	e841 2300 	strex	r3, r2, [r1]
 8005910:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1e3      	bne.n	80058e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	4618      	mov	r0, r3
 800591e:	f7fd f8cd 	bl	8002abc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800592a:	b29b      	uxth	r3, r3
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	b29b      	uxth	r3, r3
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f8b6 	bl	8005aa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005938:	e099      	b.n	8005a6e <HAL_UART_IRQHandler+0x50e>
 800593a:	bf00      	nop
 800593c:	08005bff 	.word	0x08005bff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005948:	b29b      	uxth	r3, r3
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 808b 	beq.w	8005a72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800595c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 8086 	beq.w	8005a72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	330c      	adds	r3, #12
 800596c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800597c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800598a:	647a      	str	r2, [r7, #68]	; 0x44
 800598c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e3      	bne.n	8005966 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3314      	adds	r3, #20
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	623b      	str	r3, [r7, #32]
   return(result);
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3314      	adds	r3, #20
 80059be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059c2:	633a      	str	r2, [r7, #48]	; 0x30
 80059c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e3      	bne.n	800599e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	330c      	adds	r3, #12
 80059ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	e853 3f00 	ldrex	r3, [r3]
 80059f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0310 	bic.w	r3, r3, #16
 80059fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	330c      	adds	r3, #12
 8005a04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a08:	61fa      	str	r2, [r7, #28]
 8005a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	69b9      	ldr	r1, [r7, #24]
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	617b      	str	r3, [r7, #20]
   return(result);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e3      	bne.n	80059e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a20:	4619      	mov	r1, r3
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f83e 	bl	8005aa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a28:	e023      	b.n	8005a72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d009      	beq.n	8005a4a <HAL_UART_IRQHandler+0x4ea>
 8005a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f8ef 	bl	8005c26 <UART_Transmit_IT>
    return;
 8005a48:	e014      	b.n	8005a74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00e      	beq.n	8005a74 <HAL_UART_IRQHandler+0x514>
 8005a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d008      	beq.n	8005a74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f92f 	bl	8005cc6 <UART_EndTransmit_IT>
    return;
 8005a68:	e004      	b.n	8005a74 <HAL_UART_IRQHandler+0x514>
    return;
 8005a6a:	bf00      	nop
 8005a6c:	e002      	b.n	8005a74 <HAL_UART_IRQHandler+0x514>
      return;
 8005a6e:	bf00      	nop
 8005a70:	e000      	b.n	8005a74 <HAL_UART_IRQHandler+0x514>
      return;
 8005a72:	bf00      	nop
  }
}
 8005a74:	37e8      	adds	r7, #232	; 0xe8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop

08005a7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	88fa      	ldrh	r2, [r7, #6]
 8005ad4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	88fa      	ldrh	r2, [r7, #6]
 8005ada:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2222      	movs	r2, #34	; 0x22
 8005ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d007      	beq.n	8005b0a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b08:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695a      	ldr	r2, [r3, #20]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0201 	orr.w	r2, r2, #1
 8005b18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0220 	orr.w	r2, r2, #32
 8005b28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b095      	sub	sp, #84	; 0x54
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	330c      	adds	r3, #12
 8005b46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4a:	e853 3f00 	ldrex	r3, [r3]
 8005b4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	330c      	adds	r3, #12
 8005b5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b60:	643a      	str	r2, [r7, #64]	; 0x40
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e5      	bne.n	8005b40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3314      	adds	r3, #20
 8005b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	e853 3f00 	ldrex	r3, [r3]
 8005b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f023 0301 	bic.w	r3, r3, #1
 8005b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3314      	adds	r3, #20
 8005b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e5      	bne.n	8005b74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d119      	bne.n	8005be4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	330c      	adds	r3, #12
 8005bb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f023 0310 	bic.w	r3, r3, #16
 8005bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	330c      	adds	r3, #12
 8005bce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bd0:	61ba      	str	r2, [r7, #24]
 8005bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	6979      	ldr	r1, [r7, #20]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e5      	bne.n	8005bb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bf2:	bf00      	nop
 8005bf4:	3754      	adds	r7, #84	; 0x54
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f7ff ff39 	bl	8005a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b21      	cmp	r3, #33	; 0x21
 8005c38:	d13e      	bne.n	8005cb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c42:	d114      	bne.n	8005c6e <UART_Transmit_IT+0x48>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d110      	bne.n	8005c6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	1c9a      	adds	r2, r3, #2
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	621a      	str	r2, [r3, #32]
 8005c6c:	e008      	b.n	8005c80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	1c59      	adds	r1, r3, #1
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6211      	str	r1, [r2, #32]
 8005c78:	781a      	ldrb	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10f      	bne.n	8005cb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ca2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	e000      	b.n	8005cba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cb8:	2302      	movs	r3, #2
  }
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff fec8 	bl	8005a7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b08c      	sub	sp, #48	; 0x30
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b22      	cmp	r3, #34	; 0x22
 8005d08:	f040 80ab 	bne.w	8005e62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d14:	d117      	bne.n	8005d46 <UART_Receive_IT+0x50>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d113      	bne.n	8005d46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	1c9a      	adds	r2, r3, #2
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	629a      	str	r2, [r3, #40]	; 0x28
 8005d44:	e026      	b.n	8005d94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d58:	d007      	beq.n	8005d6a <UART_Receive_IT+0x74>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <UART_Receive_IT+0x82>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	e008      	b.n	8005d8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4619      	mov	r1, r3
 8005da2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d15a      	bne.n	8005e5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0220 	bic.w	r2, r2, #32
 8005db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695a      	ldr	r2, [r3, #20]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0201 	bic.w	r2, r2, #1
 8005dd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d135      	bne.n	8005e54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f023 0310 	bic.w	r3, r3, #16
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	330c      	adds	r3, #12
 8005e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0e:	623a      	str	r2, [r7, #32]
 8005e10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	69f9      	ldr	r1, [r7, #28]
 8005e14:	6a3a      	ldr	r2, [r7, #32]
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e5      	bne.n	8005dee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b10      	cmp	r3, #16
 8005e2e:	d10a      	bne.n	8005e46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff fe29 	bl	8005aa4 <HAL_UARTEx_RxEventCallback>
 8005e52:	e002      	b.n	8005e5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7fb f933 	bl	80010c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e002      	b.n	8005e64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e000      	b.n	8005e64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e62:	2302      	movs	r3, #2
  }
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3730      	adds	r7, #48	; 0x30
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e70:	b0c0      	sub	sp, #256	; 0x100
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e88:	68d9      	ldr	r1, [r3, #12]
 8005e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	ea40 0301 	orr.w	r3, r0, r1
 8005e94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ec4:	f021 010c 	bic.w	r1, r1, #12
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee6:	6999      	ldr	r1, [r3, #24]
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	ea40 0301 	orr.w	r3, r0, r1
 8005ef2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	4b8f      	ldr	r3, [pc, #572]	; (8006138 <UART_SetConfig+0x2cc>)
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d005      	beq.n	8005f0c <UART_SetConfig+0xa0>
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	4b8d      	ldr	r3, [pc, #564]	; (800613c <UART_SetConfig+0x2d0>)
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d104      	bne.n	8005f16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f0c:	f7fd fd84 	bl	8003a18 <HAL_RCC_GetPCLK2Freq>
 8005f10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f14:	e003      	b.n	8005f1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f16:	f7fd fd6b 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 8005f1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f28:	f040 810c 	bne.w	8006144 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f30:	2200      	movs	r2, #0
 8005f32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f3e:	4622      	mov	r2, r4
 8005f40:	462b      	mov	r3, r5
 8005f42:	1891      	adds	r1, r2, r2
 8005f44:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f46:	415b      	adcs	r3, r3
 8005f48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f4e:	4621      	mov	r1, r4
 8005f50:	eb12 0801 	adds.w	r8, r2, r1
 8005f54:	4629      	mov	r1, r5
 8005f56:	eb43 0901 	adc.w	r9, r3, r1
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f6e:	4690      	mov	r8, r2
 8005f70:	4699      	mov	r9, r3
 8005f72:	4623      	mov	r3, r4
 8005f74:	eb18 0303 	adds.w	r3, r8, r3
 8005f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f7c:	462b      	mov	r3, r5
 8005f7e:	eb49 0303 	adc.w	r3, r9, r3
 8005f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	18db      	adds	r3, r3, r3
 8005f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	eb42 0303 	adc.w	r3, r2, r3
 8005fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8005fa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fb0:	f7fa feda 	bl	8000d68 <__aeabi_uldivmod>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4b61      	ldr	r3, [pc, #388]	; (8006140 <UART_SetConfig+0x2d4>)
 8005fba:	fba3 2302 	umull	r2, r3, r3, r2
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	011c      	lsls	r4, r3, #4
 8005fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005fd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005fd4:	4642      	mov	r2, r8
 8005fd6:	464b      	mov	r3, r9
 8005fd8:	1891      	adds	r1, r2, r2
 8005fda:	64b9      	str	r1, [r7, #72]	; 0x48
 8005fdc:	415b      	adcs	r3, r3
 8005fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fe4:	4641      	mov	r1, r8
 8005fe6:	eb12 0a01 	adds.w	sl, r2, r1
 8005fea:	4649      	mov	r1, r9
 8005fec:	eb43 0b01 	adc.w	fp, r3, r1
 8005ff0:	f04f 0200 	mov.w	r2, #0
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ffc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006004:	4692      	mov	sl, r2
 8006006:	469b      	mov	fp, r3
 8006008:	4643      	mov	r3, r8
 800600a:	eb1a 0303 	adds.w	r3, sl, r3
 800600e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006012:	464b      	mov	r3, r9
 8006014:	eb4b 0303 	adc.w	r3, fp, r3
 8006018:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006028:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800602c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006030:	460b      	mov	r3, r1
 8006032:	18db      	adds	r3, r3, r3
 8006034:	643b      	str	r3, [r7, #64]	; 0x40
 8006036:	4613      	mov	r3, r2
 8006038:	eb42 0303 	adc.w	r3, r2, r3
 800603c:	647b      	str	r3, [r7, #68]	; 0x44
 800603e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006042:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006046:	f7fa fe8f 	bl	8000d68 <__aeabi_uldivmod>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4611      	mov	r1, r2
 8006050:	4b3b      	ldr	r3, [pc, #236]	; (8006140 <UART_SetConfig+0x2d4>)
 8006052:	fba3 2301 	umull	r2, r3, r3, r1
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	2264      	movs	r2, #100	; 0x64
 800605a:	fb02 f303 	mul.w	r3, r2, r3
 800605e:	1acb      	subs	r3, r1, r3
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006066:	4b36      	ldr	r3, [pc, #216]	; (8006140 <UART_SetConfig+0x2d4>)
 8006068:	fba3 2302 	umull	r2, r3, r3, r2
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	005b      	lsls	r3, r3, #1
 8006070:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006074:	441c      	add	r4, r3
 8006076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800607a:	2200      	movs	r2, #0
 800607c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006080:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006084:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006088:	4642      	mov	r2, r8
 800608a:	464b      	mov	r3, r9
 800608c:	1891      	adds	r1, r2, r2
 800608e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006090:	415b      	adcs	r3, r3
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006094:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006098:	4641      	mov	r1, r8
 800609a:	1851      	adds	r1, r2, r1
 800609c:	6339      	str	r1, [r7, #48]	; 0x30
 800609e:	4649      	mov	r1, r9
 80060a0:	414b      	adcs	r3, r1
 80060a2:	637b      	str	r3, [r7, #52]	; 0x34
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	f04f 0300 	mov.w	r3, #0
 80060ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060b0:	4659      	mov	r1, fp
 80060b2:	00cb      	lsls	r3, r1, #3
 80060b4:	4651      	mov	r1, sl
 80060b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ba:	4651      	mov	r1, sl
 80060bc:	00ca      	lsls	r2, r1, #3
 80060be:	4610      	mov	r0, r2
 80060c0:	4619      	mov	r1, r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	4642      	mov	r2, r8
 80060c6:	189b      	adds	r3, r3, r2
 80060c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060cc:	464b      	mov	r3, r9
 80060ce:	460a      	mov	r2, r1
 80060d0:	eb42 0303 	adc.w	r3, r2, r3
 80060d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80060e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060ec:	460b      	mov	r3, r1
 80060ee:	18db      	adds	r3, r3, r3
 80060f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060f2:	4613      	mov	r3, r2
 80060f4:	eb42 0303 	adc.w	r3, r2, r3
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006102:	f7fa fe31 	bl	8000d68 <__aeabi_uldivmod>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <UART_SetConfig+0x2d4>)
 800610c:	fba3 1302 	umull	r1, r3, r3, r2
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	2164      	movs	r1, #100	; 0x64
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	3332      	adds	r3, #50	; 0x32
 800611e:	4a08      	ldr	r2, [pc, #32]	; (8006140 <UART_SetConfig+0x2d4>)
 8006120:	fba2 2303 	umull	r2, r3, r2, r3
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	f003 0207 	and.w	r2, r3, #7
 800612a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4422      	add	r2, r4
 8006132:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006134:	e106      	b.n	8006344 <UART_SetConfig+0x4d8>
 8006136:	bf00      	nop
 8006138:	40011000 	.word	0x40011000
 800613c:	40011400 	.word	0x40011400
 8006140:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006148:	2200      	movs	r2, #0
 800614a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800614e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006152:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006156:	4642      	mov	r2, r8
 8006158:	464b      	mov	r3, r9
 800615a:	1891      	adds	r1, r2, r2
 800615c:	6239      	str	r1, [r7, #32]
 800615e:	415b      	adcs	r3, r3
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
 8006162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006166:	4641      	mov	r1, r8
 8006168:	1854      	adds	r4, r2, r1
 800616a:	4649      	mov	r1, r9
 800616c:	eb43 0501 	adc.w	r5, r3, r1
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	00eb      	lsls	r3, r5, #3
 800617a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800617e:	00e2      	lsls	r2, r4, #3
 8006180:	4614      	mov	r4, r2
 8006182:	461d      	mov	r5, r3
 8006184:	4643      	mov	r3, r8
 8006186:	18e3      	adds	r3, r4, r3
 8006188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800618c:	464b      	mov	r3, r9
 800618e:	eb45 0303 	adc.w	r3, r5, r3
 8006192:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	f04f 0300 	mov.w	r3, #0
 80061ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061b2:	4629      	mov	r1, r5
 80061b4:	008b      	lsls	r3, r1, #2
 80061b6:	4621      	mov	r1, r4
 80061b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061bc:	4621      	mov	r1, r4
 80061be:	008a      	lsls	r2, r1, #2
 80061c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061c4:	f7fa fdd0 	bl	8000d68 <__aeabi_uldivmod>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4b60      	ldr	r3, [pc, #384]	; (8006350 <UART_SetConfig+0x4e4>)
 80061ce:	fba3 2302 	umull	r2, r3, r3, r2
 80061d2:	095b      	lsrs	r3, r3, #5
 80061d4:	011c      	lsls	r4, r3, #4
 80061d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80061e8:	4642      	mov	r2, r8
 80061ea:	464b      	mov	r3, r9
 80061ec:	1891      	adds	r1, r2, r2
 80061ee:	61b9      	str	r1, [r7, #24]
 80061f0:	415b      	adcs	r3, r3
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061f8:	4641      	mov	r1, r8
 80061fa:	1851      	adds	r1, r2, r1
 80061fc:	6139      	str	r1, [r7, #16]
 80061fe:	4649      	mov	r1, r9
 8006200:	414b      	adcs	r3, r1
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006210:	4659      	mov	r1, fp
 8006212:	00cb      	lsls	r3, r1, #3
 8006214:	4651      	mov	r1, sl
 8006216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800621a:	4651      	mov	r1, sl
 800621c:	00ca      	lsls	r2, r1, #3
 800621e:	4610      	mov	r0, r2
 8006220:	4619      	mov	r1, r3
 8006222:	4603      	mov	r3, r0
 8006224:	4642      	mov	r2, r8
 8006226:	189b      	adds	r3, r3, r2
 8006228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800622c:	464b      	mov	r3, r9
 800622e:	460a      	mov	r2, r1
 8006230:	eb42 0303 	adc.w	r3, r2, r3
 8006234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	67bb      	str	r3, [r7, #120]	; 0x78
 8006242:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	f04f 0300 	mov.w	r3, #0
 800624c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006250:	4649      	mov	r1, r9
 8006252:	008b      	lsls	r3, r1, #2
 8006254:	4641      	mov	r1, r8
 8006256:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800625a:	4641      	mov	r1, r8
 800625c:	008a      	lsls	r2, r1, #2
 800625e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006262:	f7fa fd81 	bl	8000d68 <__aeabi_uldivmod>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4611      	mov	r1, r2
 800626c:	4b38      	ldr	r3, [pc, #224]	; (8006350 <UART_SetConfig+0x4e4>)
 800626e:	fba3 2301 	umull	r2, r3, r3, r1
 8006272:	095b      	lsrs	r3, r3, #5
 8006274:	2264      	movs	r2, #100	; 0x64
 8006276:	fb02 f303 	mul.w	r3, r2, r3
 800627a:	1acb      	subs	r3, r1, r3
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	3332      	adds	r3, #50	; 0x32
 8006280:	4a33      	ldr	r2, [pc, #204]	; (8006350 <UART_SetConfig+0x4e4>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800628c:	441c      	add	r4, r3
 800628e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006292:	2200      	movs	r2, #0
 8006294:	673b      	str	r3, [r7, #112]	; 0x70
 8006296:	677a      	str	r2, [r7, #116]	; 0x74
 8006298:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800629c:	4642      	mov	r2, r8
 800629e:	464b      	mov	r3, r9
 80062a0:	1891      	adds	r1, r2, r2
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	415b      	adcs	r3, r3
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062ac:	4641      	mov	r1, r8
 80062ae:	1851      	adds	r1, r2, r1
 80062b0:	6039      	str	r1, [r7, #0]
 80062b2:	4649      	mov	r1, r9
 80062b4:	414b      	adcs	r3, r1
 80062b6:	607b      	str	r3, [r7, #4]
 80062b8:	f04f 0200 	mov.w	r2, #0
 80062bc:	f04f 0300 	mov.w	r3, #0
 80062c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062c4:	4659      	mov	r1, fp
 80062c6:	00cb      	lsls	r3, r1, #3
 80062c8:	4651      	mov	r1, sl
 80062ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062ce:	4651      	mov	r1, sl
 80062d0:	00ca      	lsls	r2, r1, #3
 80062d2:	4610      	mov	r0, r2
 80062d4:	4619      	mov	r1, r3
 80062d6:	4603      	mov	r3, r0
 80062d8:	4642      	mov	r2, r8
 80062da:	189b      	adds	r3, r3, r2
 80062dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80062de:	464b      	mov	r3, r9
 80062e0:	460a      	mov	r2, r1
 80062e2:	eb42 0303 	adc.w	r3, r2, r3
 80062e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	663b      	str	r3, [r7, #96]	; 0x60
 80062f2:	667a      	str	r2, [r7, #100]	; 0x64
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006300:	4649      	mov	r1, r9
 8006302:	008b      	lsls	r3, r1, #2
 8006304:	4641      	mov	r1, r8
 8006306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800630a:	4641      	mov	r1, r8
 800630c:	008a      	lsls	r2, r1, #2
 800630e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006312:	f7fa fd29 	bl	8000d68 <__aeabi_uldivmod>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <UART_SetConfig+0x4e4>)
 800631c:	fba3 1302 	umull	r1, r3, r3, r2
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	2164      	movs	r1, #100	; 0x64
 8006324:	fb01 f303 	mul.w	r3, r1, r3
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	3332      	adds	r3, #50	; 0x32
 800632e:	4a08      	ldr	r2, [pc, #32]	; (8006350 <UART_SetConfig+0x4e4>)
 8006330:	fba2 2303 	umull	r2, r3, r2, r3
 8006334:	095b      	lsrs	r3, r3, #5
 8006336:	f003 020f 	and.w	r2, r3, #15
 800633a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4422      	add	r2, r4
 8006342:	609a      	str	r2, [r3, #8]
}
 8006344:	bf00      	nop
 8006346:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800634a:	46bd      	mov	sp, r7
 800634c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006350:	51eb851f 	.word	0x51eb851f

08006354 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f103 0208 	add.w	r2, r3, #8
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f04f 32ff 	mov.w	r2, #4294967295
 800636c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f103 0208 	add.w	r2, r3, #8
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f103 0208 	add.w	r2, r3, #8
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80063ae:	b480      	push	{r7}
 80063b0:	b085      	sub	sp, #20
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c4:	d103      	bne.n	80063ce <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	e00c      	b.n	80063e8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3308      	adds	r3, #8
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	e002      	b.n	80063dc <vListInsert+0x2e>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d2f6      	bcs.n	80063d6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	601a      	str	r2, [r3, #0]
}
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6892      	ldr	r2, [r2, #8]
 8006436:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6852      	ldr	r2, [r2, #4]
 8006440:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	429a      	cmp	r2, r3
 800644a:	d103      	bne.n	8006454 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	1e5a      	subs	r2, r3, #1
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800647e:	2301      	movs	r3, #1
 8006480:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10a      	bne.n	80064a2 <xQueueGenericReset+0x2e>
        __asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	60fb      	str	r3, [r7, #12]
    }
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d05d      	beq.n	8006564 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d059      	beq.n	8006564 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b8:	2100      	movs	r1, #0
 80064ba:	fba3 2302 	umull	r2, r3, r3, r2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d000      	beq.n	80064c4 <xQueueGenericReset+0x50>
 80064c2:	2101      	movs	r1, #1
 80064c4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d14c      	bne.n	8006564 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80064ca:	f001 fee5 	bl	8008298 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d6:	6939      	ldr	r1, [r7, #16]
 80064d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	441a      	add	r2, r3
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2200      	movs	r2, #0
 80064e8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fa:	3b01      	subs	r3, #1
 80064fc:	6939      	ldr	r1, [r7, #16]
 80064fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	441a      	add	r2, r3
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	22ff      	movs	r2, #255	; 0xff
 800650e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	22ff      	movs	r2, #255	; 0xff
 8006516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d114      	bne.n	800654a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01a      	beq.n	800655e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	3310      	adds	r3, #16
 800652c:	4618      	mov	r0, r3
 800652e:	f000 ffc9 	bl	80074c4 <xTaskRemoveFromEventList>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d012      	beq.n	800655e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006538:	4b15      	ldr	r3, [pc, #84]	; (8006590 <xQueueGenericReset+0x11c>)
 800653a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	e009      	b.n	800655e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	3310      	adds	r3, #16
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff ff00 	bl	8006354 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	3324      	adds	r3, #36	; 0x24
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff fefb 	bl	8006354 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800655e:	f001 fecb 	bl	80082f8 <vPortExitCritical>
 8006562:	e001      	b.n	8006568 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8006564:	2300      	movs	r3, #0
 8006566:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <xQueueGenericReset+0x110>
        __asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	60bb      	str	r3, [r7, #8]
    }
 8006580:	bf00      	nop
 8006582:	e7fe      	b.n	8006582 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8006584:	697b      	ldr	r3, [r7, #20]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	e000ed04 	.word	0xe000ed04

08006594 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	; 0x28
 8006598:	af02      	add	r7, sp, #8
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	4613      	mov	r3, r2
 80065a0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d02e      	beq.n	800660a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80065ac:	2100      	movs	r1, #0
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	fba3 2302 	umull	r2, r3, r3, r2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d000      	beq.n	80065bc <xQueueGenericCreate+0x28>
 80065ba:	2101      	movs	r1, #1
 80065bc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d123      	bne.n	800660a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80065ca:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80065ce:	d81c      	bhi.n	800660a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	fb02 f303 	mul.w	r3, r2, r3
 80065d8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	3350      	adds	r3, #80	; 0x50
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 ff44 	bl	800846c <pvPortMalloc>
 80065e4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01c      	beq.n	8006626 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	3350      	adds	r3, #80	; 0x50
 80065f4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065f6:	79fa      	ldrb	r2, [r7, #7]
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	4613      	mov	r3, r2
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f814 	bl	8006630 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8006608:	e00d      	b.n	8006626 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <xQueueGenericCreate+0x92>
        __asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	613b      	str	r3, [r7, #16]
    }
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006626:	69fb      	ldr	r3, [r7, #28]
    }
 8006628:	4618      	mov	r0, r3
 800662a:	3720      	adds	r7, #32
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d103      	bne.n	800664c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	e002      	b.n	8006652 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800665e:	2101      	movs	r1, #1
 8006660:	69b8      	ldr	r0, [r7, #24]
 8006662:	f7ff ff07 	bl	8006474 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	78fa      	ldrb	r2, [r7, #3]
 800666a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	2073      	movs	r0, #115	; 0x73
 8006676:	f002 fe41 	bl	80092fc <SEGGER_SYSVIEW_RecordU32x3>
}
 800667a:	bf00      	nop
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006684:	b590      	push	{r4, r7, lr}
 8006686:	b08f      	sub	sp, #60	; 0x3c
 8006688:	af02      	add	r7, sp, #8
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006690:	2300      	movs	r3, #0
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <xQueueReceive+0x30>
        __asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	623b      	str	r3, [r7, #32]
    }
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d103      	bne.n	80066c2 <xQueueReceive+0x3e>
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <xQueueReceive+0x42>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <xQueueReceive+0x44>
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <xQueueReceive+0x5e>
        __asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	61fb      	str	r3, [r7, #28]
    }
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066e2:	f001 f903 	bl	80078ec <xTaskGetSchedulerState>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d102      	bne.n	80066f2 <xQueueReceive+0x6e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <xQueueReceive+0x72>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <xQueueReceive+0x74>
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <xQueueReceive+0x8e>
        __asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	61bb      	str	r3, [r7, #24]
    }
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006712:	f001 fdc1 	bl	8008298 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	2b00      	cmp	r3, #0
 8006720:	d02f      	beq.n	8006782 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006726:	f000 f8bd 	bl	80068a4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672c:	4618      	mov	r0, r3
 800672e:	f003 faed 	bl	8009d0c <SEGGER_SYSVIEW_ShrinkId>
 8006732:	4604      	mov	r4, r0
 8006734:	2000      	movs	r0, #0
 8006736:	f003 fae9 	bl	8009d0c <SEGGER_SYSVIEW_ShrinkId>
 800673a:	4602      	mov	r2, r0
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2101      	movs	r1, #1
 8006740:	9100      	str	r1, [sp, #0]
 8006742:	4621      	mov	r1, r4
 8006744:	205c      	movs	r0, #92	; 0x5c
 8006746:	f002 fe4f 	bl	80093e8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	1e5a      	subs	r2, r3, #1
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00f      	beq.n	800677a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675c:	3310      	adds	r3, #16
 800675e:	4618      	mov	r0, r3
 8006760:	f000 feb0 	bl	80074c4 <xTaskRemoveFromEventList>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d007      	beq.n	800677a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800676a:	4b4d      	ldr	r3, [pc, #308]	; (80068a0 <xQueueReceive+0x21c>)
 800676c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800677a:	f001 fdbd 	bl	80082f8 <vPortExitCritical>
                return pdPASS;
 800677e:	2301      	movs	r3, #1
 8006780:	e08a      	b.n	8006898 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d113      	bne.n	80067b0 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006788:	f001 fdb6 	bl	80082f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	4618      	mov	r0, r3
 8006790:	f003 fabc 	bl	8009d0c <SEGGER_SYSVIEW_ShrinkId>
 8006794:	4604      	mov	r4, r0
 8006796:	2000      	movs	r0, #0
 8006798:	f003 fab8 	bl	8009d0c <SEGGER_SYSVIEW_ShrinkId>
 800679c:	4602      	mov	r2, r0
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2101      	movs	r1, #1
 80067a2:	9100      	str	r1, [sp, #0]
 80067a4:	4621      	mov	r1, r4
 80067a6:	205c      	movs	r0, #92	; 0x5c
 80067a8:	f002 fe1e 	bl	80093e8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80067ac:	2300      	movs	r3, #0
 80067ae:	e073      	b.n	8006898 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d106      	bne.n	80067c4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80067b6:	f107 0310 	add.w	r3, r7, #16
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 ff5a 	bl	8007674 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80067c0:	2301      	movs	r3, #1
 80067c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80067c4:	f001 fd98 	bl	80082f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80067c8:	f000 fb6e 	bl	8006ea8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80067cc:	f001 fd64 	bl	8008298 <vPortEnterCritical>
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067d6:	b25b      	sxtb	r3, r3
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d103      	bne.n	80067e6 <xQueueReceive+0x162>
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ec:	b25b      	sxtb	r3, r3
 80067ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f2:	d103      	bne.n	80067fc <xQueueReceive+0x178>
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067fc:	f001 fd7c 	bl	80082f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006800:	1d3a      	adds	r2, r7, #4
 8006802:	f107 0310 	add.w	r3, r7, #16
 8006806:	4611      	mov	r1, r2
 8006808:	4618      	mov	r0, r3
 800680a:	f000 ff49 	bl	80076a0 <xTaskCheckForTimeOut>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d124      	bne.n	800685e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006816:	f000 f8bd 	bl	8006994 <prvIsQueueEmpty>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d018      	beq.n	8006852 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	3324      	adds	r3, #36	; 0x24
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	4611      	mov	r1, r2
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fddf 	bl	80073ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800682e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006830:	f000 f85e 	bl	80068f0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006834:	f000 fb46 	bl	8006ec4 <xTaskResumeAll>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	f47f af69 	bne.w	8006712 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8006840:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <xQueueReceive+0x21c>)
 8006842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	e75f      	b.n	8006712 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006854:	f000 f84c 	bl	80068f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006858:	f000 fb34 	bl	8006ec4 <xTaskResumeAll>
 800685c:	e759      	b.n	8006712 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800685e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006860:	f000 f846 	bl	80068f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006864:	f000 fb2e 	bl	8006ec4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800686a:	f000 f893 	bl	8006994 <prvIsQueueEmpty>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	f43f af4e 	beq.w	8006712 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	4618      	mov	r0, r3
 800687a:	f003 fa47 	bl	8009d0c <SEGGER_SYSVIEW_ShrinkId>
 800687e:	4604      	mov	r4, r0
 8006880:	2000      	movs	r0, #0
 8006882:	f003 fa43 	bl	8009d0c <SEGGER_SYSVIEW_ShrinkId>
 8006886:	4602      	mov	r2, r0
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2101      	movs	r1, #1
 800688c:	9100      	str	r1, [sp, #0]
 800688e:	4621      	mov	r1, r4
 8006890:	205c      	movs	r0, #92	; 0x5c
 8006892:	f002 fda9 	bl	80093e8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8006896:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006898:	4618      	mov	r0, r3
 800689a:	3734      	adds	r7, #52	; 0x34
 800689c:	46bd      	mov	sp, r7
 800689e:	bd90      	pop	{r4, r7, pc}
 80068a0:	e000ed04 	.word	0xe000ed04

080068a4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d018      	beq.n	80068e8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	441a      	add	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d303      	bcc.n	80068d8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68d9      	ldr	r1, [r3, #12]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	461a      	mov	r2, r3
 80068e2:	6838      	ldr	r0, [r7, #0]
 80068e4:	f004 f955 	bl	800ab92 <memcpy>
    }
}
 80068e8:	bf00      	nop
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80068f8:	f001 fcce 	bl	8008298 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006902:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006904:	e011      	b.n	800692a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	2b00      	cmp	r3, #0
 800690c:	d012      	beq.n	8006934 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3324      	adds	r3, #36	; 0x24
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fdd6 	bl	80074c4 <xTaskRemoveFromEventList>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800691e:	f000 ff25 	bl	800776c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	3b01      	subs	r3, #1
 8006926:	b2db      	uxtb	r3, r3
 8006928:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800692a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800692e:	2b00      	cmp	r3, #0
 8006930:	dce9      	bgt.n	8006906 <prvUnlockQueue+0x16>
 8006932:	e000      	b.n	8006936 <prvUnlockQueue+0x46>
                    break;
 8006934:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	22ff      	movs	r2, #255	; 0xff
 800693a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800693e:	f001 fcdb 	bl	80082f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006942:	f001 fca9 	bl	8008298 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800694c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800694e:	e011      	b.n	8006974 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d012      	beq.n	800697e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3310      	adds	r3, #16
 800695c:	4618      	mov	r0, r3
 800695e:	f000 fdb1 	bl	80074c4 <xTaskRemoveFromEventList>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006968:	f000 ff00 	bl	800776c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	3b01      	subs	r3, #1
 8006970:	b2db      	uxtb	r3, r3
 8006972:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006974:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006978:	2b00      	cmp	r3, #0
 800697a:	dce9      	bgt.n	8006950 <prvUnlockQueue+0x60>
 800697c:	e000      	b.n	8006980 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800697e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	22ff      	movs	r2, #255	; 0xff
 8006984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006988:	f001 fcb6 	bl	80082f8 <vPortExitCritical>
}
 800698c:	bf00      	nop
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800699c:	f001 fc7c 	bl	8008298 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d102      	bne.n	80069ae <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80069a8:	2301      	movs	r3, #1
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	e001      	b.n	80069b2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80069b2:	f001 fca1 	bl	80082f8 <vPortExitCritical>

    return xReturn;
 80069b6:	68fb      	ldr	r3, [r7, #12]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80069ca:	2300      	movs	r3, #0
 80069cc:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <vQueueAddToRegistry+0x2a>
        __asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	60fb      	str	r3, [r7, #12]
    }
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d024      	beq.n	8006a3a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	e01e      	b.n	8006a34 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80069f6:	4a1c      	ldr	r2, [pc, #112]	; (8006a68 <vQueueAddToRegistry+0xa8>)
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	4413      	add	r3, r2
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d105      	bne.n	8006a12 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	4a17      	ldr	r2, [pc, #92]	; (8006a68 <vQueueAddToRegistry+0xa8>)
 8006a0c:	4413      	add	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
                    break;
 8006a10:	e013      	b.n	8006a3a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <vQueueAddToRegistry+0x6e>
 8006a18:	4a13      	ldr	r2, [pc, #76]	; (8006a68 <vQueueAddToRegistry+0xa8>)
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	4a0f      	ldr	r2, [pc, #60]	; (8006a68 <vQueueAddToRegistry+0xa8>)
 8006a2a:	4413      	add	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	3301      	adds	r3, #1
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2b07      	cmp	r3, #7
 8006a38:	d9dd      	bls.n	80069f6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00f      	beq.n	8006a60 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f003 f95c 	bl	8009d0c <SEGGER_SYSVIEW_ShrinkId>
 8006a54:	4601      	mov	r1, r0
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	2071      	movs	r0, #113	; 0x71
 8006a5c:	f002 fbf4 	bl	8009248 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8006a60:	bf00      	nop
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20000788 	.word	0x20000788

08006a6c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006a7c:	f001 fc0c 	bl	8008298 <vPortEnterCritical>
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a86:	b25b      	sxtb	r3, r3
 8006a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8c:	d103      	bne.n	8006a96 <vQueueWaitForMessageRestricted+0x2a>
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a9c:	b25b      	sxtb	r3, r3
 8006a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa2:	d103      	bne.n	8006aac <vQueueWaitForMessageRestricted+0x40>
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aac:	f001 fc24 	bl	80082f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d106      	bne.n	8006ac6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	3324      	adds	r3, #36	; 0x24
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 fcb7 	bl	8007434 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006ac6:	6978      	ldr	r0, [r7, #20]
 8006ac8:	f7ff ff12 	bl	80068f0 <prvUnlockQueue>
    }
 8006acc:	bf00      	nop
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08c      	sub	sp, #48	; 0x30
 8006ad8:	af04      	add	r7, sp, #16
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	603b      	str	r3, [r7, #0]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ae4:	88fb      	ldrh	r3, [r7, #6]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f001 fcbf 	bl	800846c <pvPortMalloc>
 8006aee:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d013      	beq.n	8006b1e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006af6:	2058      	movs	r0, #88	; 0x58
 8006af8:	f001 fcb8 	bl	800846c <pvPortMalloc>
 8006afc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8006b04:	2258      	movs	r2, #88	; 0x58
 8006b06:	2100      	movs	r1, #0
 8006b08:	69f8      	ldr	r0, [r7, #28]
 8006b0a:	f003 ffd4 	bl	800aab6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	631a      	str	r2, [r3, #48]	; 0x30
 8006b14:	e005      	b.n	8006b22 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8006b16:	6978      	ldr	r0, [r7, #20]
 8006b18:	f001 fd62 	bl	80085e0 <vPortFree>
 8006b1c:	e001      	b.n	8006b22 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d013      	beq.n	8006b50 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b28:	88fa      	ldrh	r2, [r7, #6]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9303      	str	r3, [sp, #12]
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	9302      	str	r3, [sp, #8]
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f80e 	bl	8006b60 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006b44:	69f8      	ldr	r0, [r7, #28]
 8006b46:	f000 f899 	bl	8006c7c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	61bb      	str	r3, [r7, #24]
 8006b4e:	e002      	b.n	8006b56 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b50:	f04f 33ff 	mov.w	r3, #4294967295
 8006b54:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006b56:	69bb      	ldr	r3, [r7, #24]
    }
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	461a      	mov	r2, r3
 8006b78:	21a5      	movs	r1, #165	; 0xa5
 8006b7a:	f003 ff9c 	bl	800aab6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f023 0307 	bic.w	r3, r3, #7
 8006b96:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f003 0307 	and.w	r3, r3, #7
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00a      	beq.n	8006bb8 <prvInitialiseNewTask+0x58>
        __asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	617b      	str	r3, [r7, #20]
    }
 8006bb4:	bf00      	nop
 8006bb6:	e7fe      	b.n	8006bb6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d01e      	beq.n	8006bfc <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	61fb      	str	r3, [r7, #28]
 8006bc2:	e012      	b.n	8006bea <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	4413      	add	r3, r2
 8006bca:	7819      	ldrb	r1, [r3, #0]
 8006bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	3334      	adds	r3, #52	; 0x34
 8006bd4:	460a      	mov	r2, r1
 8006bd6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	4413      	add	r3, r2
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d006      	beq.n	8006bf2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	3301      	adds	r3, #1
 8006be8:	61fb      	str	r3, [r7, #28]
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	2b09      	cmp	r3, #9
 8006bee:	d9e9      	bls.n	8006bc4 <prvInitialiseNewTask+0x64>
 8006bf0:	e000      	b.n	8006bf4 <prvInitialiseNewTask+0x94>
            {
                break;
 8006bf2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d90a      	bls.n	8006c18 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	613b      	str	r3, [r7, #16]
    }
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d901      	bls.n	8006c22 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c1e:	2304      	movs	r3, #4
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c26:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c2c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	3304      	adds	r3, #4
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7ff fbae 	bl	8006394 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	3318      	adds	r3, #24
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff fba9 	bl	8006394 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c46:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	f1c3 0205 	rsb	r2, r3, #5
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c56:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	69b8      	ldr	r0, [r7, #24]
 8006c5e:	f001 f9ef 	bl	8008040 <pxPortInitialiseStack>
 8006c62:	4602      	mov	r2, r0
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c72:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006c74:	bf00      	nop
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006c7c:	b5b0      	push	{r4, r5, r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af02      	add	r7, sp, #8
 8006c82:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006c84:	f001 fb08 	bl	8008298 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006c88:	4b4f      	ldr	r3, [pc, #316]	; (8006dc8 <prvAddNewTaskToReadyList+0x14c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	4a4e      	ldr	r2, [pc, #312]	; (8006dc8 <prvAddNewTaskToReadyList+0x14c>)
 8006c90:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006c92:	4b4e      	ldr	r3, [pc, #312]	; (8006dcc <prvAddNewTaskToReadyList+0x150>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d109      	bne.n	8006cae <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006c9a:	4a4c      	ldr	r2, [pc, #304]	; (8006dcc <prvAddNewTaskToReadyList+0x150>)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ca0:	4b49      	ldr	r3, [pc, #292]	; (8006dc8 <prvAddNewTaskToReadyList+0x14c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d110      	bne.n	8006cca <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006ca8:	f000 fd86 	bl	80077b8 <prvInitialiseTaskLists>
 8006cac:	e00d      	b.n	8006cca <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006cae:	4b48      	ldr	r3, [pc, #288]	; (8006dd0 <prvAddNewTaskToReadyList+0x154>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d109      	bne.n	8006cca <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cb6:	4b45      	ldr	r3, [pc, #276]	; (8006dcc <prvAddNewTaskToReadyList+0x150>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d802      	bhi.n	8006cca <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006cc4:	4a41      	ldr	r2, [pc, #260]	; (8006dcc <prvAddNewTaskToReadyList+0x150>)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006cca:	4b42      	ldr	r3, [pc, #264]	; (8006dd4 <prvAddNewTaskToReadyList+0x158>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	4a40      	ldr	r2, [pc, #256]	; (8006dd4 <prvAddNewTaskToReadyList+0x158>)
 8006cd2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cd4:	4b3f      	ldr	r3, [pc, #252]	; (8006dd4 <prvAddNewTaskToReadyList+0x158>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d016      	beq.n	8006d10 <prvAddNewTaskToReadyList+0x94>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f002 ff4b 	bl	8009b80 <SEGGER_SYSVIEW_OnTaskCreate>
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	461d      	mov	r5, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	461c      	mov	r4, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	1ae3      	subs	r3, r4, r3
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	462b      	mov	r3, r5
 8006d0c:	f001 fd7a 	bl	8008804 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f002 ffb8 	bl	8009c88 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	409a      	lsls	r2, r3
 8006d20:	4b2d      	ldr	r3, [pc, #180]	; (8006dd8 <prvAddNewTaskToReadyList+0x15c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	4a2c      	ldr	r2, [pc, #176]	; (8006dd8 <prvAddNewTaskToReadyList+0x15c>)
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2e:	492b      	ldr	r1, [pc, #172]	; (8006ddc <prvAddNewTaskToReadyList+0x160>)
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	440b      	add	r3, r1
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	609a      	str	r2, [r3, #8]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	60da      	str	r2, [r3, #12]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	3204      	adds	r2, #4
 8006d56:	605a      	str	r2, [r3, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	1d1a      	adds	r2, r3, #4
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	609a      	str	r2, [r3, #8]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d64:	4613      	mov	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4a1b      	ldr	r2, [pc, #108]	; (8006ddc <prvAddNewTaskToReadyList+0x160>)
 8006d6e:	441a      	add	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	615a      	str	r2, [r3, #20]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d78:	4918      	ldr	r1, [pc, #96]	; (8006ddc <prvAddNewTaskToReadyList+0x160>)
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	1c59      	adds	r1, r3, #1
 8006d88:	4814      	ldr	r0, [pc, #80]	; (8006ddc <prvAddNewTaskToReadyList+0x160>)
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4403      	add	r3, r0
 8006d94:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006d96:	f001 faaf 	bl	80082f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006d9a:	4b0d      	ldr	r3, [pc, #52]	; (8006dd0 <prvAddNewTaskToReadyList+0x154>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00e      	beq.n	8006dc0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006da2:	4b0a      	ldr	r3, [pc, #40]	; (8006dcc <prvAddNewTaskToReadyList+0x150>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d207      	bcs.n	8006dc0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006db0:	4b0b      	ldr	r3, [pc, #44]	; (8006de0 <prvAddNewTaskToReadyList+0x164>)
 8006db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006dc0:	bf00      	nop
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8006dc8:	200008a0 	.word	0x200008a0
 8006dcc:	200007c8 	.word	0x200007c8
 8006dd0:	200008ac 	.word	0x200008ac
 8006dd4:	200008bc 	.word	0x200008bc
 8006dd8:	200008a8 	.word	0x200008a8
 8006ddc:	200007cc 	.word	0x200007cc
 8006de0:	e000ed04 	.word	0xe000ed04

08006de4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8006dea:	4b27      	ldr	r3, [pc, #156]	; (8006e88 <vTaskStartScheduler+0xa4>)
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	2300      	movs	r3, #0
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	2300      	movs	r3, #0
 8006df4:	2282      	movs	r2, #130	; 0x82
 8006df6:	4925      	ldr	r1, [pc, #148]	; (8006e8c <vTaskStartScheduler+0xa8>)
 8006df8:	4825      	ldr	r0, [pc, #148]	; (8006e90 <vTaskStartScheduler+0xac>)
 8006dfa:	f7ff fe6b 	bl	8006ad4 <xTaskCreate>
 8006dfe:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d102      	bne.n	8006e0c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8006e06:	f000 fe97 	bl	8007b38 <xTimerCreateTimerTask>
 8006e0a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d124      	bne.n	8006e5c <vTaskStartScheduler+0x78>
        __asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	60bb      	str	r3, [r7, #8]
    }
 8006e24:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8006e26:	4b1b      	ldr	r3, [pc, #108]	; (8006e94 <vTaskStartScheduler+0xb0>)
 8006e28:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006e2e:	4b1a      	ldr	r3, [pc, #104]	; (8006e98 <vTaskStartScheduler+0xb4>)
 8006e30:	2201      	movs	r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e34:	4b19      	ldr	r3, [pc, #100]	; (8006e9c <vTaskStartScheduler+0xb8>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8006e3a:	4b19      	ldr	r3, [pc, #100]	; (8006ea0 <vTaskStartScheduler+0xbc>)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	4b12      	ldr	r3, [pc, #72]	; (8006e88 <vTaskStartScheduler+0xa4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d102      	bne.n	8006e4c <vTaskStartScheduler+0x68>
 8006e46:	f002 fe7f 	bl	8009b48 <SEGGER_SYSVIEW_OnIdle>
 8006e4a:	e004      	b.n	8006e56 <vTaskStartScheduler+0x72>
 8006e4c:	4b14      	ldr	r3, [pc, #80]	; (8006ea0 <vTaskStartScheduler+0xbc>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f002 fed7 	bl	8009c04 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8006e56:	f001 f97d 	bl	8008154 <xPortStartScheduler>
 8006e5a:	e00e      	b.n	8006e7a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e62:	d10a      	bne.n	8006e7a <vTaskStartScheduler+0x96>
        __asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	607b      	str	r3, [r7, #4]
    }
 8006e76:	bf00      	nop
 8006e78:	e7fe      	b.n	8006e78 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006e7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <vTaskStartScheduler+0xc0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
}
 8006e7e:	bf00      	nop
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	200008c4 	.word	0x200008c4
 8006e8c:	0800ca9c 	.word	0x0800ca9c
 8006e90:	08007785 	.word	0x08007785
 8006e94:	200008c0 	.word	0x200008c0
 8006e98:	200008ac 	.word	0x200008ac
 8006e9c:	200008a4 	.word	0x200008a4
 8006ea0:	200007c8 	.word	0x200007c8
 8006ea4:	2000000c 	.word	0x2000000c

08006ea8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <vTaskSuspendAll+0x18>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	4a03      	ldr	r2, [pc, #12]	; (8006ec0 <vTaskSuspendAll+0x18>)
 8006eb4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006eb6:	bf00      	nop
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	200008c8 	.word	0x200008c8

08006ec4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006ed2:	4b73      	ldr	r3, [pc, #460]	; (80070a0 <xTaskResumeAll+0x1dc>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10a      	bne.n	8006ef0 <xTaskResumeAll+0x2c>
        __asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	607b      	str	r3, [r7, #4]
    }
 8006eec:	bf00      	nop
 8006eee:	e7fe      	b.n	8006eee <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006ef0:	f001 f9d2 	bl	8008298 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006ef4:	4b6a      	ldr	r3, [pc, #424]	; (80070a0 <xTaskResumeAll+0x1dc>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	4a69      	ldr	r2, [pc, #420]	; (80070a0 <xTaskResumeAll+0x1dc>)
 8006efc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006efe:	4b68      	ldr	r3, [pc, #416]	; (80070a0 <xTaskResumeAll+0x1dc>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f040 80c4 	bne.w	8007090 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f08:	4b66      	ldr	r3, [pc, #408]	; (80070a4 <xTaskResumeAll+0x1e0>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 80bf 	beq.w	8007090 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f12:	e08e      	b.n	8007032 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f14:	4b64      	ldr	r3, [pc, #400]	; (80070a8 <xTaskResumeAll+0x1e4>)
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f20:	613b      	str	r3, [r7, #16]
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	6a12      	ldr	r2, [r2, #32]
 8006f2a:	609a      	str	r2, [r3, #8]
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	69d2      	ldr	r2, [r2, #28]
 8006f34:	605a      	str	r2, [r3, #4]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	3318      	adds	r3, #24
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d103      	bne.n	8006f4a <xTaskResumeAll+0x86>
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	6a1a      	ldr	r2, [r3, #32]
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	605a      	str	r2, [r3, #4]
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	629a      	str	r2, [r3, #40]	; 0x28
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	1e5a      	subs	r2, r3, #1
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	69fa      	ldr	r2, [r7, #28]
 8006f66:	68d2      	ldr	r2, [r2, #12]
 8006f68:	609a      	str	r2, [r3, #8]
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	69fa      	ldr	r2, [r7, #28]
 8006f70:	6892      	ldr	r2, [r2, #8]
 8006f72:	605a      	str	r2, [r3, #4]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d103      	bne.n	8006f88 <xTaskResumeAll+0xc4>
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	605a      	str	r2, [r3, #4]
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	615a      	str	r2, [r3, #20]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	1e5a      	subs	r2, r3, #1
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f002 fe74 	bl	8009c88 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	409a      	lsls	r2, r3
 8006fa8:	4b40      	ldr	r3, [pc, #256]	; (80070ac <xTaskResumeAll+0x1e8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	4a3f      	ldr	r2, [pc, #252]	; (80070ac <xTaskResumeAll+0x1e8>)
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb6:	493e      	ldr	r1, [pc, #248]	; (80070b0 <xTaskResumeAll+0x1ec>)
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60bb      	str	r3, [r7, #8]
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	609a      	str	r2, [r3, #8]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	60da      	str	r2, [r3, #12]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	69fa      	ldr	r2, [r7, #28]
 8006fdc:	3204      	adds	r2, #4
 8006fde:	605a      	str	r2, [r3, #4]
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	1d1a      	adds	r2, r3, #4
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	609a      	str	r2, [r3, #8]
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4a2e      	ldr	r2, [pc, #184]	; (80070b0 <xTaskResumeAll+0x1ec>)
 8006ff6:	441a      	add	r2, r3
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	615a      	str	r2, [r3, #20]
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007000:	492b      	ldr	r1, [pc, #172]	; (80070b0 <xTaskResumeAll+0x1ec>)
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	1c59      	adds	r1, r3, #1
 8007010:	4827      	ldr	r0, [pc, #156]	; (80070b0 <xTaskResumeAll+0x1ec>)
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4403      	add	r3, r0
 800701c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007022:	4b24      	ldr	r3, [pc, #144]	; (80070b4 <xTaskResumeAll+0x1f0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	429a      	cmp	r2, r3
 800702a:	d302      	bcc.n	8007032 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 800702c:	4b22      	ldr	r3, [pc, #136]	; (80070b8 <xTaskResumeAll+0x1f4>)
 800702e:	2201      	movs	r2, #1
 8007030:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007032:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <xTaskResumeAll+0x1e4>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f47f af6c 	bne.w	8006f14 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007042:	f000 fc37 	bl	80078b4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007046:	4b1d      	ldr	r3, [pc, #116]	; (80070bc <xTaskResumeAll+0x1f8>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d010      	beq.n	8007074 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007052:	f000 f847 	bl	80070e4 <xTaskIncrementTick>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 800705c:	4b16      	ldr	r3, [pc, #88]	; (80070b8 <xTaskResumeAll+0x1f4>)
 800705e:	2201      	movs	r2, #1
 8007060:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	3b01      	subs	r3, #1
 8007066:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1f1      	bne.n	8007052 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800706e:	4b13      	ldr	r3, [pc, #76]	; (80070bc <xTaskResumeAll+0x1f8>)
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007074:	4b10      	ldr	r3, [pc, #64]	; (80070b8 <xTaskResumeAll+0x1f4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d009      	beq.n	8007090 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800707c:	2301      	movs	r3, #1
 800707e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007080:	4b0f      	ldr	r3, [pc, #60]	; (80070c0 <xTaskResumeAll+0x1fc>)
 8007082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007090:	f001 f932 	bl	80082f8 <vPortExitCritical>

    return xAlreadyYielded;
 8007094:	69bb      	ldr	r3, [r7, #24]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3720      	adds	r7, #32
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	200008c8 	.word	0x200008c8
 80070a4:	200008a0 	.word	0x200008a0
 80070a8:	20000860 	.word	0x20000860
 80070ac:	200008a8 	.word	0x200008a8
 80070b0:	200007cc 	.word	0x200007cc
 80070b4:	200007c8 	.word	0x200007c8
 80070b8:	200008b4 	.word	0x200008b4
 80070bc:	200008b0 	.word	0x200008b0
 80070c0:	e000ed04 	.word	0xe000ed04

080070c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80070ca:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <xTaskGetTickCount+0x1c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80070d0:	687b      	ldr	r3, [r7, #4]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	200008a4 	.word	0x200008a4

080070e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08a      	sub	sp, #40	; 0x28
 80070e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80070ea:	2300      	movs	r3, #0
 80070ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ee:	4b7f      	ldr	r3, [pc, #508]	; (80072ec <xTaskIncrementTick+0x208>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f040 80f0 	bne.w	80072d8 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070f8:	4b7d      	ldr	r3, [pc, #500]	; (80072f0 <xTaskIncrementTick+0x20c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007100:	4a7b      	ldr	r2, [pc, #492]	; (80072f0 <xTaskIncrementTick+0x20c>)
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d120      	bne.n	800714e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800710c:	4b79      	ldr	r3, [pc, #484]	; (80072f4 <xTaskIncrementTick+0x210>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <xTaskIncrementTick+0x48>
        __asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	607b      	str	r3, [r7, #4]
    }
 8007128:	bf00      	nop
 800712a:	e7fe      	b.n	800712a <xTaskIncrementTick+0x46>
 800712c:	4b71      	ldr	r3, [pc, #452]	; (80072f4 <xTaskIncrementTick+0x210>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	61fb      	str	r3, [r7, #28]
 8007132:	4b71      	ldr	r3, [pc, #452]	; (80072f8 <xTaskIncrementTick+0x214>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a6f      	ldr	r2, [pc, #444]	; (80072f4 <xTaskIncrementTick+0x210>)
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	4a6f      	ldr	r2, [pc, #444]	; (80072f8 <xTaskIncrementTick+0x214>)
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	4b6e      	ldr	r3, [pc, #440]	; (80072fc <xTaskIncrementTick+0x218>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3301      	adds	r3, #1
 8007146:	4a6d      	ldr	r2, [pc, #436]	; (80072fc <xTaskIncrementTick+0x218>)
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	f000 fbb3 	bl	80078b4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800714e:	4b6c      	ldr	r3, [pc, #432]	; (8007300 <xTaskIncrementTick+0x21c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6a3a      	ldr	r2, [r7, #32]
 8007154:	429a      	cmp	r2, r3
 8007156:	f0c0 80aa 	bcc.w	80072ae <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800715a:	4b66      	ldr	r3, [pc, #408]	; (80072f4 <xTaskIncrementTick+0x210>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d104      	bne.n	800716e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007164:	4b66      	ldr	r3, [pc, #408]	; (8007300 <xTaskIncrementTick+0x21c>)
 8007166:	f04f 32ff 	mov.w	r2, #4294967295
 800716a:	601a      	str	r2, [r3, #0]
                    break;
 800716c:	e09f      	b.n	80072ae <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800716e:	4b61      	ldr	r3, [pc, #388]	; (80072f4 <xTaskIncrementTick+0x210>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800717e:	6a3a      	ldr	r2, [r7, #32]
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	429a      	cmp	r2, r3
 8007184:	d203      	bcs.n	800718e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007186:	4a5e      	ldr	r2, [pc, #376]	; (8007300 <xTaskIncrementTick+0x21c>)
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800718c:	e08f      	b.n	80072ae <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	613b      	str	r3, [r7, #16]
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	68d2      	ldr	r2, [r2, #12]
 800719c:	609a      	str	r2, [r3, #8]
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	6892      	ldr	r2, [r2, #8]
 80071a6:	605a      	str	r2, [r3, #4]
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	3304      	adds	r3, #4
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d103      	bne.n	80071bc <xTaskIncrementTick+0xd8>
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	605a      	str	r2, [r3, #4]
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	2200      	movs	r2, #0
 80071c0:	615a      	str	r2, [r3, #20]
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	1e5a      	subs	r2, r3, #1
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d01e      	beq.n	8007212 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	6a12      	ldr	r2, [r2, #32]
 80071e2:	609a      	str	r2, [r3, #8]
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	69d2      	ldr	r2, [r2, #28]
 80071ec:	605a      	str	r2, [r3, #4]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	3318      	adds	r3, #24
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d103      	bne.n	8007202 <xTaskIncrementTick+0x11e>
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	6a1a      	ldr	r2, [r3, #32]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	605a      	str	r2, [r3, #4]
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2200      	movs	r2, #0
 8007206:	629a      	str	r2, [r3, #40]	; 0x28
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	1e5a      	subs	r2, r3, #1
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	4618      	mov	r0, r3
 8007216:	f002 fd37 	bl	8009c88 <SEGGER_SYSVIEW_OnTaskStartReady>
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721e:	2201      	movs	r2, #1
 8007220:	409a      	lsls	r2, r3
 8007222:	4b38      	ldr	r3, [pc, #224]	; (8007304 <xTaskIncrementTick+0x220>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4313      	orrs	r3, r2
 8007228:	4a36      	ldr	r2, [pc, #216]	; (8007304 <xTaskIncrementTick+0x220>)
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	4935      	ldr	r1, [pc, #212]	; (8007308 <xTaskIncrementTick+0x224>)
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	440b      	add	r3, r1
 800723c:	3304      	adds	r3, #4
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	609a      	str	r2, [r3, #8]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	60da      	str	r2, [r3, #12]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	3204      	adds	r2, #4
 8007258:	605a      	str	r2, [r3, #4]
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	1d1a      	adds	r2, r3, #4
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	609a      	str	r2, [r3, #8]
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4a26      	ldr	r2, [pc, #152]	; (8007308 <xTaskIncrementTick+0x224>)
 8007270:	441a      	add	r2, r3
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	615a      	str	r2, [r3, #20]
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727a:	4923      	ldr	r1, [pc, #140]	; (8007308 <xTaskIncrementTick+0x224>)
 800727c:	4613      	mov	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	1c59      	adds	r1, r3, #1
 800728a:	481f      	ldr	r0, [pc, #124]	; (8007308 <xTaskIncrementTick+0x224>)
 800728c:	4613      	mov	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4403      	add	r3, r0
 8007296:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800729c:	4b1b      	ldr	r3, [pc, #108]	; (800730c <xTaskIncrementTick+0x228>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a2:	429a      	cmp	r2, r3
 80072a4:	f67f af59 	bls.w	800715a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80072a8:	2301      	movs	r3, #1
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072ac:	e755      	b.n	800715a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072ae:	4b17      	ldr	r3, [pc, #92]	; (800730c <xTaskIncrementTick+0x228>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b4:	4914      	ldr	r1, [pc, #80]	; (8007308 <xTaskIncrementTick+0x224>)
 80072b6:	4613      	mov	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	440b      	add	r3, r1
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d901      	bls.n	80072ca <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 80072c6:	2301      	movs	r3, #1
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80072ca:	4b11      	ldr	r3, [pc, #68]	; (8007310 <xTaskIncrementTick+0x22c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d007      	beq.n	80072e2 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80072d2:	2301      	movs	r3, #1
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
 80072d6:	e004      	b.n	80072e2 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80072d8:	4b0e      	ldr	r3, [pc, #56]	; (8007314 <xTaskIncrementTick+0x230>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3301      	adds	r3, #1
 80072de:	4a0d      	ldr	r2, [pc, #52]	; (8007314 <xTaskIncrementTick+0x230>)
 80072e0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3728      	adds	r7, #40	; 0x28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	200008c8 	.word	0x200008c8
 80072f0:	200008a4 	.word	0x200008a4
 80072f4:	20000858 	.word	0x20000858
 80072f8:	2000085c 	.word	0x2000085c
 80072fc:	200008b8 	.word	0x200008b8
 8007300:	200008c0 	.word	0x200008c0
 8007304:	200008a8 	.word	0x200008a8
 8007308:	200007cc 	.word	0x200007cc
 800730c:	200007c8 	.word	0x200007c8
 8007310:	200008b4 	.word	0x200008b4
 8007314:	200008b0 	.word	0x200008b0

08007318 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800731e:	4b2d      	ldr	r3, [pc, #180]	; (80073d4 <vTaskSwitchContext+0xbc>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007326:	4b2c      	ldr	r3, [pc, #176]	; (80073d8 <vTaskSwitchContext+0xc0>)
 8007328:	2201      	movs	r2, #1
 800732a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800732c:	e04d      	b.n	80073ca <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800732e:	4b2a      	ldr	r3, [pc, #168]	; (80073d8 <vTaskSwitchContext+0xc0>)
 8007330:	2200      	movs	r2, #0
 8007332:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007334:	4b29      	ldr	r3, [pc, #164]	; (80073dc <vTaskSwitchContext+0xc4>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	fab3 f383 	clz	r3, r3
 8007340:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8007342:	7afb      	ldrb	r3, [r7, #11]
 8007344:	f1c3 031f 	rsb	r3, r3, #31
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	4925      	ldr	r1, [pc, #148]	; (80073e0 <vTaskSwitchContext+0xc8>)
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10a      	bne.n	8007374 <vTaskSwitchContext+0x5c>
        __asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	607b      	str	r3, [r7, #4]
    }
 8007370:	bf00      	nop
 8007372:	e7fe      	b.n	8007372 <vTaskSwitchContext+0x5a>
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4a18      	ldr	r2, [pc, #96]	; (80073e0 <vTaskSwitchContext+0xc8>)
 8007380:	4413      	add	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	605a      	str	r2, [r3, #4]
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	3308      	adds	r3, #8
 8007396:	429a      	cmp	r2, r3
 8007398:	d104      	bne.n	80073a4 <vTaskSwitchContext+0x8c>
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	605a      	str	r2, [r3, #4]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	4a0e      	ldr	r2, [pc, #56]	; (80073e4 <vTaskSwitchContext+0xcc>)
 80073ac:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80073ae:	4b0d      	ldr	r3, [pc, #52]	; (80073e4 <vTaskSwitchContext+0xcc>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <vTaskSwitchContext+0xd0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d102      	bne.n	80073c0 <vTaskSwitchContext+0xa8>
 80073ba:	f002 fbc5 	bl	8009b48 <SEGGER_SYSVIEW_OnIdle>
}
 80073be:	e004      	b.n	80073ca <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80073c0:	4b08      	ldr	r3, [pc, #32]	; (80073e4 <vTaskSwitchContext+0xcc>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f002 fc1d 	bl	8009c04 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80073ca:	bf00      	nop
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	200008c8 	.word	0x200008c8
 80073d8:	200008b4 	.word	0x200008b4
 80073dc:	200008a8 	.word	0x200008a8
 80073e0:	200007cc 	.word	0x200007cc
 80073e4:	200007c8 	.word	0x200007c8
 80073e8:	200008c4 	.word	0x200008c4

080073ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	60fb      	str	r3, [r7, #12]
    }
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007412:	4b07      	ldr	r3, [pc, #28]	; (8007430 <vTaskPlaceOnEventList+0x44>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3318      	adds	r3, #24
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fe ffc7 	bl	80063ae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007420:	2101      	movs	r1, #1
 8007422:	6838      	ldr	r0, [r7, #0]
 8007424:	f000 fb08 	bl	8007a38 <prvAddCurrentTaskToDelayedList>
}
 8007428:	bf00      	nop
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	200007c8 	.word	0x200007c8

08007434 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10a      	bne.n	800745c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	613b      	str	r3, [r7, #16]
    }
 8007458:	bf00      	nop
 800745a:	e7fe      	b.n	800745a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	617b      	str	r3, [r7, #20]
 8007462:	4b17      	ldr	r3, [pc, #92]	; (80074c0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	61da      	str	r2, [r3, #28]
 800746a:	4b15      	ldr	r3, [pc, #84]	; (80074c0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	6892      	ldr	r2, [r2, #8]
 8007472:	621a      	str	r2, [r3, #32]
 8007474:	4b12      	ldr	r3, [pc, #72]	; (80074c0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	3218      	adds	r2, #24
 800747e:	605a      	str	r2, [r3, #4]
 8007480:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f103 0218 	add.w	r2, r3, #24
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	609a      	str	r2, [r3, #8]
 800748c:	4b0c      	ldr	r3, [pc, #48]	; (80074c0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	629a      	str	r2, [r3, #40]	; 0x28
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80074a4:	f04f 33ff 	mov.w	r3, #4294967295
 80074a8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80074aa:	2024      	movs	r0, #36	; 0x24
 80074ac:	f001 fe72 	bl	8009194 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	68b8      	ldr	r0, [r7, #8]
 80074b4:	f000 fac0 	bl	8007a38 <prvAddCurrentTaskToDelayedList>
    }
 80074b8:	bf00      	nop
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	200007c8 	.word	0x200007c8

080074c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08a      	sub	sp, #40	; 0x28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10a      	bne.n	80074f0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80074da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	60fb      	str	r3, [r7, #12]
    }
 80074ec:	bf00      	nop
 80074ee:	e7fe      	b.n	80074ee <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f4:	61fb      	str	r3, [r7, #28]
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	6a3a      	ldr	r2, [r7, #32]
 80074fc:	6a12      	ldr	r2, [r2, #32]
 80074fe:	609a      	str	r2, [r3, #8]
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	6a3a      	ldr	r2, [r7, #32]
 8007506:	69d2      	ldr	r2, [r2, #28]
 8007508:	605a      	str	r2, [r3, #4]
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	3318      	adds	r3, #24
 8007512:	429a      	cmp	r2, r3
 8007514:	d103      	bne.n	800751e <xTaskRemoveFromEventList+0x5a>
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	6a1a      	ldr	r2, [r3, #32]
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	605a      	str	r2, [r3, #4]
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	2200      	movs	r2, #0
 8007522:	629a      	str	r2, [r3, #40]	; 0x28
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	1e5a      	subs	r2, r3, #1
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800752e:	4b4b      	ldr	r3, [pc, #300]	; (800765c <xTaskRemoveFromEventList+0x198>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d162      	bne.n	80075fc <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	6a3a      	ldr	r2, [r7, #32]
 8007542:	68d2      	ldr	r2, [r2, #12]
 8007544:	609a      	str	r2, [r3, #8]
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	6a3a      	ldr	r2, [r7, #32]
 800754c:	6892      	ldr	r2, [r2, #8]
 800754e:	605a      	str	r2, [r3, #4]
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	3304      	adds	r3, #4
 8007558:	429a      	cmp	r2, r3
 800755a:	d103      	bne.n	8007564 <xTaskRemoveFromEventList+0xa0>
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	68da      	ldr	r2, [r3, #12]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	605a      	str	r2, [r3, #4]
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	2200      	movs	r2, #0
 8007568:	615a      	str	r2, [r3, #20]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	1e5a      	subs	r2, r3, #1
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	4618      	mov	r0, r3
 8007578:	f002 fb86 	bl	8009c88 <SEGGER_SYSVIEW_OnTaskStartReady>
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	2201      	movs	r2, #1
 8007582:	409a      	lsls	r2, r3
 8007584:	4b36      	ldr	r3, [pc, #216]	; (8007660 <xTaskRemoveFromEventList+0x19c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4313      	orrs	r3, r2
 800758a:	4a35      	ldr	r2, [pc, #212]	; (8007660 <xTaskRemoveFromEventList+0x19c>)
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007592:	4934      	ldr	r1, [pc, #208]	; (8007664 <xTaskRemoveFromEventList+0x1a0>)
 8007594:	4613      	mov	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	440b      	add	r3, r1
 800759e:	3304      	adds	r3, #4
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	613b      	str	r3, [r7, #16]
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	609a      	str	r2, [r3, #8]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	60da      	str	r2, [r3, #12]
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	6a3a      	ldr	r2, [r7, #32]
 80075b8:	3204      	adds	r2, #4
 80075ba:	605a      	str	r2, [r3, #4]
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	1d1a      	adds	r2, r3, #4
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	609a      	str	r2, [r3, #8]
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c8:	4613      	mov	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4a24      	ldr	r2, [pc, #144]	; (8007664 <xTaskRemoveFromEventList+0x1a0>)
 80075d2:	441a      	add	r2, r3
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	615a      	str	r2, [r3, #20]
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075dc:	4921      	ldr	r1, [pc, #132]	; (8007664 <xTaskRemoveFromEventList+0x1a0>)
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	440b      	add	r3, r1
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	1c59      	adds	r1, r3, #1
 80075ec:	481d      	ldr	r0, [pc, #116]	; (8007664 <xTaskRemoveFromEventList+0x1a0>)
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4403      	add	r3, r0
 80075f8:	6019      	str	r1, [r3, #0]
 80075fa:	e01b      	b.n	8007634 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075fc:	4b1a      	ldr	r3, [pc, #104]	; (8007668 <xTaskRemoveFromEventList+0x1a4>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	61bb      	str	r3, [r7, #24]
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	61da      	str	r2, [r3, #28]
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	621a      	str	r2, [r3, #32]
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	6a3a      	ldr	r2, [r7, #32]
 8007616:	3218      	adds	r2, #24
 8007618:	605a      	str	r2, [r3, #4]
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	f103 0218 	add.w	r2, r3, #24
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	609a      	str	r2, [r3, #8]
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	4a10      	ldr	r2, [pc, #64]	; (8007668 <xTaskRemoveFromEventList+0x1a4>)
 8007628:	629a      	str	r2, [r3, #40]	; 0x28
 800762a:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <xTaskRemoveFromEventList+0x1a4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3301      	adds	r3, #1
 8007630:	4a0d      	ldr	r2, [pc, #52]	; (8007668 <xTaskRemoveFromEventList+0x1a4>)
 8007632:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007638:	4b0c      	ldr	r3, [pc, #48]	; (800766c <xTaskRemoveFromEventList+0x1a8>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	429a      	cmp	r2, r3
 8007640:	d905      	bls.n	800764e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007642:	2301      	movs	r3, #1
 8007644:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007646:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <xTaskRemoveFromEventList+0x1ac>)
 8007648:	2201      	movs	r2, #1
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	e001      	b.n	8007652 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800764e:	2300      	movs	r3, #0
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007654:	4618      	mov	r0, r3
 8007656:	3728      	adds	r7, #40	; 0x28
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	200008c8 	.word	0x200008c8
 8007660:	200008a8 	.word	0x200008a8
 8007664:	200007cc 	.word	0x200007cc
 8007668:	20000860 	.word	0x20000860
 800766c:	200007c8 	.word	0x200007c8
 8007670:	200008b4 	.word	0x200008b4

08007674 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800767c:	4b06      	ldr	r3, [pc, #24]	; (8007698 <vTaskInternalSetTimeOutState+0x24>)
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007684:	4b05      	ldr	r3, [pc, #20]	; (800769c <vTaskInternalSetTimeOutState+0x28>)
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	605a      	str	r2, [r3, #4]
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	200008b8 	.word	0x200008b8
 800769c:	200008a4 	.word	0x200008a4

080076a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b088      	sub	sp, #32
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10a      	bne.n	80076c6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	613b      	str	r3, [r7, #16]
    }
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	60fb      	str	r3, [r7, #12]
    }
 80076de:	bf00      	nop
 80076e0:	e7fe      	b.n	80076e0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80076e2:	f000 fdd9 	bl	8008298 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80076e6:	4b1f      	ldr	r3, [pc, #124]	; (8007764 <xTaskCheckForTimeOut+0xc4>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fe:	d102      	bne.n	8007706 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007700:	2300      	movs	r3, #0
 8007702:	61fb      	str	r3, [r7, #28]
 8007704:	e026      	b.n	8007754 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	4b17      	ldr	r3, [pc, #92]	; (8007768 <xTaskCheckForTimeOut+0xc8>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d00a      	beq.n	8007728 <xTaskCheckForTimeOut+0x88>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	429a      	cmp	r2, r3
 800771a:	d305      	bcc.n	8007728 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800771c:	2301      	movs	r3, #1
 800771e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	e015      	b.n	8007754 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	429a      	cmp	r2, r3
 8007730:	d20b      	bcs.n	800774a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	1ad2      	subs	r2, r2, r3
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff ff98 	bl	8007674 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007744:	2300      	movs	r3, #0
 8007746:	61fb      	str	r3, [r7, #28]
 8007748:	e004      	b.n	8007754 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2200      	movs	r2, #0
 800774e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007750:	2301      	movs	r3, #1
 8007752:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007754:	f000 fdd0 	bl	80082f8 <vPortExitCritical>

    return xReturn;
 8007758:	69fb      	ldr	r3, [r7, #28]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3720      	adds	r7, #32
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	200008a4 	.word	0x200008a4
 8007768:	200008b8 	.word	0x200008b8

0800776c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007770:	4b03      	ldr	r3, [pc, #12]	; (8007780 <vTaskMissedYield+0x14>)
 8007772:	2201      	movs	r2, #1
 8007774:	601a      	str	r2, [r3, #0]
}
 8007776:	bf00      	nop
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	200008b4 	.word	0x200008b4

08007784 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800778c:	f000 f854 	bl	8007838 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007790:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <prvIdleTask+0x2c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d907      	bls.n	80077a8 <prvIdleTask+0x24>
            {
                taskYIELD();
 8007798:	4b06      	ldr	r3, [pc, #24]	; (80077b4 <prvIdleTask+0x30>)
 800779a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 80077a8:	f7f9 fca2 	bl	80010f0 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 80077ac:	e7ee      	b.n	800778c <prvIdleTask+0x8>
 80077ae:	bf00      	nop
 80077b0:	200007cc 	.word	0x200007cc
 80077b4:	e000ed04 	.word	0xe000ed04

080077b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077be:	2300      	movs	r3, #0
 80077c0:	607b      	str	r3, [r7, #4]
 80077c2:	e00c      	b.n	80077de <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	4613      	mov	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4a12      	ldr	r2, [pc, #72]	; (8007818 <prvInitialiseTaskLists+0x60>)
 80077d0:	4413      	add	r3, r2
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe fdbe 	bl	8006354 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3301      	adds	r3, #1
 80077dc:	607b      	str	r3, [r7, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b04      	cmp	r3, #4
 80077e2:	d9ef      	bls.n	80077c4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80077e4:	480d      	ldr	r0, [pc, #52]	; (800781c <prvInitialiseTaskLists+0x64>)
 80077e6:	f7fe fdb5 	bl	8006354 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80077ea:	480d      	ldr	r0, [pc, #52]	; (8007820 <prvInitialiseTaskLists+0x68>)
 80077ec:	f7fe fdb2 	bl	8006354 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80077f0:	480c      	ldr	r0, [pc, #48]	; (8007824 <prvInitialiseTaskLists+0x6c>)
 80077f2:	f7fe fdaf 	bl	8006354 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80077f6:	480c      	ldr	r0, [pc, #48]	; (8007828 <prvInitialiseTaskLists+0x70>)
 80077f8:	f7fe fdac 	bl	8006354 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80077fc:	480b      	ldr	r0, [pc, #44]	; (800782c <prvInitialiseTaskLists+0x74>)
 80077fe:	f7fe fda9 	bl	8006354 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007802:	4b0b      	ldr	r3, [pc, #44]	; (8007830 <prvInitialiseTaskLists+0x78>)
 8007804:	4a05      	ldr	r2, [pc, #20]	; (800781c <prvInitialiseTaskLists+0x64>)
 8007806:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007808:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <prvInitialiseTaskLists+0x7c>)
 800780a:	4a05      	ldr	r2, [pc, #20]	; (8007820 <prvInitialiseTaskLists+0x68>)
 800780c:	601a      	str	r2, [r3, #0]
}
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	200007cc 	.word	0x200007cc
 800781c:	20000830 	.word	0x20000830
 8007820:	20000844 	.word	0x20000844
 8007824:	20000860 	.word	0x20000860
 8007828:	20000874 	.word	0x20000874
 800782c:	2000088c 	.word	0x2000088c
 8007830:	20000858 	.word	0x20000858
 8007834:	2000085c 	.word	0x2000085c

08007838 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800783e:	e019      	b.n	8007874 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8007840:	f000 fd2a 	bl	8008298 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007844:	4b10      	ldr	r3, [pc, #64]	; (8007888 <prvCheckTasksWaitingTermination+0x50>)
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3304      	adds	r3, #4
 8007850:	4618      	mov	r0, r3
 8007852:	f7fe fde5 	bl	8006420 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8007856:	4b0d      	ldr	r3, [pc, #52]	; (800788c <prvCheckTasksWaitingTermination+0x54>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3b01      	subs	r3, #1
 800785c:	4a0b      	ldr	r2, [pc, #44]	; (800788c <prvCheckTasksWaitingTermination+0x54>)
 800785e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8007860:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <prvCheckTasksWaitingTermination+0x58>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3b01      	subs	r3, #1
 8007866:	4a0a      	ldr	r2, [pc, #40]	; (8007890 <prvCheckTasksWaitingTermination+0x58>)
 8007868:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800786a:	f000 fd45 	bl	80082f8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f810 	bl	8007894 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007874:	4b06      	ldr	r3, [pc, #24]	; (8007890 <prvCheckTasksWaitingTermination+0x58>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e1      	bne.n	8007840 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800787c:	bf00      	nop
 800787e:	bf00      	nop
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	20000874 	.word	0x20000874
 800788c:	200008a0 	.word	0x200008a0
 8007890:	20000888 	.word	0x20000888

08007894 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 fe9d 	bl	80085e0 <vPortFree>
            vPortFree( pxTCB );
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fe9a 	bl	80085e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80078ac:	bf00      	nop
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078b8:	4b0a      	ldr	r3, [pc, #40]	; (80078e4 <prvResetNextTaskUnblockTime+0x30>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80078c2:	4b09      	ldr	r3, [pc, #36]	; (80078e8 <prvResetNextTaskUnblockTime+0x34>)
 80078c4:	f04f 32ff 	mov.w	r2, #4294967295
 80078c8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80078ca:	e005      	b.n	80078d8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078cc:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <prvResetNextTaskUnblockTime+0x30>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a04      	ldr	r2, [pc, #16]	; (80078e8 <prvResetNextTaskUnblockTime+0x34>)
 80078d6:	6013      	str	r3, [r2, #0]
}
 80078d8:	bf00      	nop
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20000858 	.word	0x20000858
 80078e8:	200008c0 	.word	0x200008c0

080078ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80078f2:	4b0b      	ldr	r3, [pc, #44]	; (8007920 <xTaskGetSchedulerState+0x34>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d102      	bne.n	8007900 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80078fa:	2301      	movs	r3, #1
 80078fc:	607b      	str	r3, [r7, #4]
 80078fe:	e008      	b.n	8007912 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007900:	4b08      	ldr	r3, [pc, #32]	; (8007924 <xTaskGetSchedulerState+0x38>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d102      	bne.n	800790e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007908:	2302      	movs	r3, #2
 800790a:	607b      	str	r3, [r7, #4]
 800790c:	e001      	b.n	8007912 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800790e:	2300      	movs	r3, #0
 8007910:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007912:	687b      	ldr	r3, [r7, #4]
    }
 8007914:	4618      	mov	r0, r3
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	200008ac 	.word	0x200008ac
 8007924:	200008c8 	.word	0x200008c8

08007928 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8007928:	b580      	push	{r7, lr}
 800792a:	b088      	sub	sp, #32
 800792c:	af02      	add	r7, sp, #8
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	613b      	str	r3, [r7, #16]
    }
 800794e:	bf00      	nop
 8007950:	e7fe      	b.n	8007950 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8007952:	f000 fca1 	bl	8008298 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8007956:	4b36      	ldr	r3, [pc, #216]	; (8007a30 <xTaskGenericNotifyWait+0x108>)
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	4413      	add	r3, r2
 800795e:	3354      	adds	r3, #84	; 0x54
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d022      	beq.n	80079ae <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8007968:	4b31      	ldr	r3, [pc, #196]	; (8007a30 <xTaskGenericNotifyWait+0x108>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	3214      	adds	r2, #20
 8007970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	43d2      	mvns	r2, r2
 8007978:	4011      	ands	r1, r2
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	3214      	adds	r2, #20
 800797e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8007982:	4b2b      	ldr	r3, [pc, #172]	; (8007a30 <xTaskGenericNotifyWait+0x108>)
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4413      	add	r3, r2
 800798a:	3354      	adds	r3, #84	; 0x54
 800798c:	2201      	movs	r2, #1
 800798e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00b      	beq.n	80079ae <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007996:	2101      	movs	r1, #1
 8007998:	6a38      	ldr	r0, [r7, #32]
 800799a:	f000 f84d 	bl	8007a38 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800799e:	4b25      	ldr	r3, [pc, #148]	; (8007a34 <xTaskGenericNotifyWait+0x10c>)
 80079a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80079ae:	f000 fca3 	bl	80082f8 <vPortExitCritical>

        taskENTER_CRITICAL();
 80079b2:	f000 fc71 	bl	8008298 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	4613      	mov	r3, r2
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	2040      	movs	r0, #64	; 0x40
 80079c4:	f001 fd10 	bl	80093e8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80079ce:	4b18      	ldr	r3, [pc, #96]	; (8007a30 <xTaskGenericNotifyWait+0x108>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	3214      	adds	r2, #20
 80079d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80079de:	4b14      	ldr	r3, [pc, #80]	; (8007a30 <xTaskGenericNotifyWait+0x108>)
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4413      	add	r3, r2
 80079e6:	3354      	adds	r3, #84	; 0x54
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d002      	beq.n	80079f6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80079f0:	2300      	movs	r3, #0
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	e00e      	b.n	8007a14 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80079f6:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <xTaskGenericNotifyWait+0x108>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	3214      	adds	r2, #20
 80079fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	43d2      	mvns	r2, r2
 8007a06:	4011      	ands	r1, r2
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	3214      	adds	r2, #20
 8007a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8007a10:	2301      	movs	r3, #1
 8007a12:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8007a14:	4b06      	ldr	r3, [pc, #24]	; (8007a30 <xTaskGenericNotifyWait+0x108>)
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3354      	adds	r3, #84	; 0x54
 8007a1e:	2200      	movs	r2, #0
 8007a20:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8007a22:	f000 fc69 	bl	80082f8 <vPortExitCritical>

        return xReturn;
 8007a26:	697b      	ldr	r3, [r7, #20]
    }
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	200007c8 	.word	0x200007c8
 8007a34:	e000ed04 	.word	0xe000ed04

08007a38 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007a42:	4b36      	ldr	r3, [pc, #216]	; (8007b1c <prvAddCurrentTaskToDelayedList+0xe4>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a48:	4b35      	ldr	r3, [pc, #212]	; (8007b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe fce6 	bl	8006420 <uxListRemove>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10b      	bne.n	8007a72 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a5a:	4b31      	ldr	r3, [pc, #196]	; (8007b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	2201      	movs	r2, #1
 8007a62:	fa02 f303 	lsl.w	r3, r2, r3
 8007a66:	43da      	mvns	r2, r3
 8007a68:	4b2e      	ldr	r3, [pc, #184]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xec>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	4a2d      	ldr	r2, [pc, #180]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xec>)
 8007a70:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a78:	d124      	bne.n	8007ac4 <prvAddCurrentTaskToDelayedList+0x8c>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d021      	beq.n	8007ac4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a80:	4b29      	ldr	r3, [pc, #164]	; (8007b28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	613b      	str	r3, [r7, #16]
 8007a86:	4b26      	ldr	r3, [pc, #152]	; (8007b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	609a      	str	r2, [r3, #8]
 8007a8e:	4b24      	ldr	r3, [pc, #144]	; (8007b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	6892      	ldr	r2, [r2, #8]
 8007a96:	60da      	str	r2, [r3, #12]
 8007a98:	4b21      	ldr	r3, [pc, #132]	; (8007b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	3204      	adds	r2, #4
 8007aa2:	605a      	str	r2, [r3, #4]
 8007aa4:	4b1e      	ldr	r3, [pc, #120]	; (8007b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	1d1a      	adds	r2, r3, #4
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	609a      	str	r2, [r3, #8]
 8007aae:	4b1c      	ldr	r3, [pc, #112]	; (8007b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a1d      	ldr	r2, [pc, #116]	; (8007b28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007ab4:	615a      	str	r2, [r3, #20]
 8007ab6:	4b1c      	ldr	r3, [pc, #112]	; (8007b28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3301      	adds	r3, #1
 8007abc:	4a1a      	ldr	r2, [pc, #104]	; (8007b28 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007ac2:	e026      	b.n	8007b12 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4413      	add	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007acc:	4b14      	ldr	r3, [pc, #80]	; (8007b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d209      	bcs.n	8007af0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007adc:	4b13      	ldr	r3, [pc, #76]	; (8007b2c <prvAddCurrentTaskToDelayedList+0xf4>)
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4610      	mov	r0, r2
 8007aea:	f7fe fc60 	bl	80063ae <vListInsert>
}
 8007aee:	e010      	b.n	8007b12 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007af0:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <prvAddCurrentTaskToDelayedList+0xf8>)
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3304      	adds	r3, #4
 8007afa:	4619      	mov	r1, r3
 8007afc:	4610      	mov	r0, r2
 8007afe:	f7fe fc56 	bl	80063ae <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007b02:	4b0c      	ldr	r3, [pc, #48]	; (8007b34 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d202      	bcs.n	8007b12 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8007b0c:	4a09      	ldr	r2, [pc, #36]	; (8007b34 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6013      	str	r3, [r2, #0]
}
 8007b12:	bf00      	nop
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	200008a4 	.word	0x200008a4
 8007b20:	200007c8 	.word	0x200007c8
 8007b24:	200008a8 	.word	0x200008a8
 8007b28:	2000088c 	.word	0x2000088c
 8007b2c:	2000085c 	.word	0x2000085c
 8007b30:	20000858 	.word	0x20000858
 8007b34:	200008c0 	.word	0x200008c0

08007b38 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007b42:	f000 fa47 	bl	8007fd4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007b46:	4b11      	ldr	r3, [pc, #68]	; (8007b8c <xTimerCreateTimerTask+0x54>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00b      	beq.n	8007b66 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8007b4e:	4b10      	ldr	r3, [pc, #64]	; (8007b90 <xTimerCreateTimerTask+0x58>)
 8007b50:	9301      	str	r3, [sp, #4]
 8007b52:	2302      	movs	r3, #2
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	2300      	movs	r3, #0
 8007b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007b5c:	490d      	ldr	r1, [pc, #52]	; (8007b94 <xTimerCreateTimerTask+0x5c>)
 8007b5e:	480e      	ldr	r0, [pc, #56]	; (8007b98 <xTimerCreateTimerTask+0x60>)
 8007b60:	f7fe ffb8 	bl	8006ad4 <xTaskCreate>
 8007b64:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10a      	bne.n	8007b82 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	603b      	str	r3, [r7, #0]
    }
 8007b7e:	bf00      	nop
 8007b80:	e7fe      	b.n	8007b80 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007b82:	687b      	ldr	r3, [r7, #4]
    }
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	200008fc 	.word	0x200008fc
 8007b90:	20000900 	.word	0x20000900
 8007b94:	0800caa4 	.word	0x0800caa4
 8007b98:	08007c41 	.word	0x08007c41

08007b9c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007ba8:	e008      	b.n	8007bbc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	699a      	ldr	r2, [r3, #24]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	18d1      	adds	r1, r2, r3
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 f8dd 	bl	8007d88 <prvInsertTimerInActiveList>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1ea      	bne.n	8007baa <prvReloadTimer+0xe>
        }
    }
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bea:	4b14      	ldr	r3, [pc, #80]	; (8007c3c <prvProcessExpiredTimer+0x5c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe fc11 	bl	8006420 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d005      	beq.n	8007c18 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff ffc3 	bl	8007b9c <prvReloadTimer>
 8007c16:	e008      	b.n	8007c2a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c1e:	f023 0301 	bic.w	r3, r3, #1
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	4798      	blx	r3
    }
 8007c32:	bf00      	nop
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	200008f4 	.word	0x200008f4

08007c40 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c48:	f107 0308 	add.w	r3, r7, #8
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 f857 	bl	8007d00 <prvGetNextExpireTime>
 8007c52:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	4619      	mov	r1, r3
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 f803 	bl	8007c64 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007c5e:	f000 f8d5 	bl	8007e0c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c62:	e7f1      	b.n	8007c48 <prvTimerTask+0x8>

08007c64 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007c6e:	f7ff f91b 	bl	8006ea8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c72:	f107 0308 	add.w	r3, r7, #8
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 f866 	bl	8007d48 <prvSampleTimeNow>
 8007c7c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d130      	bne.n	8007ce6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <prvProcessTimerOrBlockTask+0x3c>
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d806      	bhi.n	8007ca0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007c92:	f7ff f917 	bl	8006ec4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c96:	68f9      	ldr	r1, [r7, #12]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff ffa1 	bl	8007be0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007c9e:	e024      	b.n	8007cea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d008      	beq.n	8007cb8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ca6:	4b13      	ldr	r3, [pc, #76]	; (8007cf4 <prvProcessTimerOrBlockTask+0x90>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <prvProcessTimerOrBlockTask+0x50>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e000      	b.n	8007cb6 <prvProcessTimerOrBlockTask+0x52>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007cb8:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <prvProcessTimerOrBlockTask+0x94>)
 8007cba:	6818      	ldr	r0, [r3, #0]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f7fe fed1 	bl	8006a6c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007cca:	f7ff f8fb 	bl	8006ec4 <xTaskResumeAll>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007cd4:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <prvProcessTimerOrBlockTask+0x98>)
 8007cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	f3bf 8f6f 	isb	sy
    }
 8007ce4:	e001      	b.n	8007cea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007ce6:	f7ff f8ed 	bl	8006ec4 <xTaskResumeAll>
    }
 8007cea:	bf00      	nop
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	200008f8 	.word	0x200008f8
 8007cf8:	200008fc 	.word	0x200008fc
 8007cfc:	e000ed04 	.word	0xe000ed04

08007d00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d08:	4b0e      	ldr	r3, [pc, #56]	; (8007d44 <prvGetNextExpireTime+0x44>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <prvGetNextExpireTime+0x16>
 8007d12:	2201      	movs	r2, #1
 8007d14:	e000      	b.n	8007d18 <prvGetNextExpireTime+0x18>
 8007d16:	2200      	movs	r2, #0
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d105      	bne.n	8007d30 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d24:	4b07      	ldr	r3, [pc, #28]	; (8007d44 <prvGetNextExpireTime+0x44>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	e001      	b.n	8007d34 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007d30:	2300      	movs	r3, #0
 8007d32:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007d34:	68fb      	ldr	r3, [r7, #12]
    }
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	200008f4 	.word	0x200008f4

08007d48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007d50:	f7ff f9b8 	bl	80070c4 <xTaskGetTickCount>
 8007d54:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007d56:	4b0b      	ldr	r3, [pc, #44]	; (8007d84 <prvSampleTimeNow+0x3c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d205      	bcs.n	8007d6c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007d60:	f000 f912 	bl	8007f88 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	e002      	b.n	8007d72 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007d72:	4a04      	ldr	r2, [pc, #16]	; (8007d84 <prvSampleTimeNow+0x3c>)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007d78:	68fb      	ldr	r3, [r7, #12]
    }
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000904 	.word	0x20000904

08007d88 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007d96:	2300      	movs	r3, #0
 8007d98:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d812      	bhi.n	8007dd4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	1ad2      	subs	r2, r2, r3
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d302      	bcc.n	8007dc2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	e01b      	b.n	8007dfa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007dc2:	4b10      	ldr	r3, [pc, #64]	; (8007e04 <prvInsertTimerInActiveList+0x7c>)
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	3304      	adds	r3, #4
 8007dca:	4619      	mov	r1, r3
 8007dcc:	4610      	mov	r0, r2
 8007dce:	f7fe faee 	bl	80063ae <vListInsert>
 8007dd2:	e012      	b.n	8007dfa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d206      	bcs.n	8007dea <prvInsertTimerInActiveList+0x62>
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d302      	bcc.n	8007dea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007de4:	2301      	movs	r3, #1
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	e007      	b.n	8007dfa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dea:	4b07      	ldr	r3, [pc, #28]	; (8007e08 <prvInsertTimerInActiveList+0x80>)
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3304      	adds	r3, #4
 8007df2:	4619      	mov	r1, r3
 8007df4:	4610      	mov	r0, r2
 8007df6:	f7fe fada 	bl	80063ae <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007dfa:	697b      	ldr	r3, [r7, #20]
    }
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	200008f8 	.word	0x200008f8
 8007e08:	200008f4 	.word	0x200008f4

08007e0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e12:	e0a6      	b.n	8007f62 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f2c0 80a3 	blt.w	8007f62 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7fe faf7 	bl	8006420 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e32:	1d3b      	adds	r3, r7, #4
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7ff ff87 	bl	8007d48 <prvSampleTimeNow>
 8007e3a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	f200 808d 	bhi.w	8007f60 <prvProcessReceivedCommands+0x154>
 8007e46:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <prvProcessReceivedCommands+0x40>)
 8007e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4c:	08007e71 	.word	0x08007e71
 8007e50:	08007e71 	.word	0x08007e71
 8007e54:	08007ed9 	.word	0x08007ed9
 8007e58:	08007eed 	.word	0x08007eed
 8007e5c:	08007f37 	.word	0x08007f37
 8007e60:	08007e71 	.word	0x08007e71
 8007e64:	08007e71 	.word	0x08007e71
 8007e68:	08007ed9 	.word	0x08007ed9
 8007e6c:	08007eed 	.word	0x08007eed
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e76:	f043 0301 	orr.w	r3, r3, #1
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	18d1      	adds	r1, r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	69f8      	ldr	r0, [r7, #28]
 8007e90:	f7ff ff7a 	bl	8007d88 <prvInsertTimerInActiveList>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d063      	beq.n	8007f62 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d009      	beq.n	8007ebc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	4413      	add	r3, r2
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	69f8      	ldr	r0, [r7, #28]
 8007eb6:	f7ff fe71 	bl	8007b9c <prvReloadTimer>
 8007eba:	e008      	b.n	8007ece <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ec2:	f023 0301 	bic.w	r3, r3, #1
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	69f8      	ldr	r0, [r7, #28]
 8007ed4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007ed6:	e044      	b.n	8007f62 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ede:	f023 0301 	bic.w	r3, r3, #1
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007eea:	e03a      	b.n	8007f62 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ef2:	f043 0301 	orr.w	r3, r3, #1
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10a      	bne.n	8007f22 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	617b      	str	r3, [r7, #20]
    }
 8007f1e:	bf00      	nop
 8007f20:	e7fe      	b.n	8007f20 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	699a      	ldr	r2, [r3, #24]
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	18d1      	adds	r1, r2, r3
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	69f8      	ldr	r0, [r7, #28]
 8007f30:	f7ff ff2a 	bl	8007d88 <prvInsertTimerInActiveList>
                        break;
 8007f34:	e015      	b.n	8007f62 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d103      	bne.n	8007f4c <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8007f44:	69f8      	ldr	r0, [r7, #28]
 8007f46:	f000 fb4b 	bl	80085e0 <vPortFree>
 8007f4a:	e00a      	b.n	8007f62 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f52:	f023 0301 	bic.w	r3, r3, #1
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007f5e:	e000      	b.n	8007f62 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007f60:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f62:	4b08      	ldr	r3, [pc, #32]	; (8007f84 <prvProcessReceivedCommands+0x178>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f107 0108 	add.w	r1, r7, #8
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fe fb89 	bl	8006684 <xQueueReceive>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f47f af4d 	bne.w	8007e14 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8007f7a:	bf00      	nop
 8007f7c:	bf00      	nop
 8007f7e:	3720      	adds	r7, #32
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	200008fc 	.word	0x200008fc

08007f88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f8e:	e009      	b.n	8007fa4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f90:	4b0e      	ldr	r3, [pc, #56]	; (8007fcc <prvSwitchTimerLists+0x44>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8007f9e:	6838      	ldr	r0, [r7, #0]
 8007fa0:	f7ff fe1e 	bl	8007be0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fa4:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <prvSwitchTimerLists+0x44>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1f0      	bne.n	8007f90 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007fae:	4b07      	ldr	r3, [pc, #28]	; (8007fcc <prvSwitchTimerLists+0x44>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8007fb4:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <prvSwitchTimerLists+0x48>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a04      	ldr	r2, [pc, #16]	; (8007fcc <prvSwitchTimerLists+0x44>)
 8007fba:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007fbc:	4a04      	ldr	r2, [pc, #16]	; (8007fd0 <prvSwitchTimerLists+0x48>)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6013      	str	r3, [r2, #0]
    }
 8007fc2:	bf00      	nop
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	200008f4 	.word	0x200008f4
 8007fd0:	200008f8 	.word	0x200008f8

08007fd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007fd8:	f000 f95e 	bl	8008298 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007fdc:	4b12      	ldr	r3, [pc, #72]	; (8008028 <prvCheckForValidListAndQueue+0x54>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d11d      	bne.n	8008020 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007fe4:	4811      	ldr	r0, [pc, #68]	; (800802c <prvCheckForValidListAndQueue+0x58>)
 8007fe6:	f7fe f9b5 	bl	8006354 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007fea:	4811      	ldr	r0, [pc, #68]	; (8008030 <prvCheckForValidListAndQueue+0x5c>)
 8007fec:	f7fe f9b2 	bl	8006354 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007ff0:	4b10      	ldr	r3, [pc, #64]	; (8008034 <prvCheckForValidListAndQueue+0x60>)
 8007ff2:	4a0e      	ldr	r2, [pc, #56]	; (800802c <prvCheckForValidListAndQueue+0x58>)
 8007ff4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007ff6:	4b10      	ldr	r3, [pc, #64]	; (8008038 <prvCheckForValidListAndQueue+0x64>)
 8007ff8:	4a0d      	ldr	r2, [pc, #52]	; (8008030 <prvCheckForValidListAndQueue+0x5c>)
 8007ffa:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	210c      	movs	r1, #12
 8008000:	200a      	movs	r0, #10
 8008002:	f7fe fac7 	bl	8006594 <xQueueGenericCreate>
 8008006:	4603      	mov	r3, r0
 8008008:	4a07      	ldr	r2, [pc, #28]	; (8008028 <prvCheckForValidListAndQueue+0x54>)
 800800a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800800c:	4b06      	ldr	r3, [pc, #24]	; (8008028 <prvCheckForValidListAndQueue+0x54>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d005      	beq.n	8008020 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008014:	4b04      	ldr	r3, [pc, #16]	; (8008028 <prvCheckForValidListAndQueue+0x54>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4908      	ldr	r1, [pc, #32]	; (800803c <prvCheckForValidListAndQueue+0x68>)
 800801a:	4618      	mov	r0, r3
 800801c:	f7fe fcd0 	bl	80069c0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008020:	f000 f96a 	bl	80082f8 <vPortExitCritical>
    }
 8008024:	bf00      	nop
 8008026:	bd80      	pop	{r7, pc}
 8008028:	200008fc 	.word	0x200008fc
 800802c:	200008cc 	.word	0x200008cc
 8008030:	200008e0 	.word	0x200008e0
 8008034:	200008f4 	.word	0x200008f4
 8008038:	200008f8 	.word	0x200008f8
 800803c:	0800caac 	.word	0x0800caac

08008040 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	3b04      	subs	r3, #4
 8008050:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008058:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3b04      	subs	r3, #4
 800805e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f023 0201 	bic.w	r2, r3, #1
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3b04      	subs	r3, #4
 800806e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008070:	4a0c      	ldr	r2, [pc, #48]	; (80080a4 <pxPortInitialiseStack+0x64>)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3b14      	subs	r3, #20
 800807a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3b04      	subs	r3, #4
 8008086:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f06f 0202 	mvn.w	r2, #2
 800808e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	3b20      	subs	r3, #32
 8008094:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008096:	68fb      	ldr	r3, [r7, #12]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	080080a9 	.word	0x080080a9

080080a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80080b2:	4b12      	ldr	r3, [pc, #72]	; (80080fc <prvTaskExitError+0x54>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ba:	d00a      	beq.n	80080d2 <prvTaskExitError+0x2a>
        __asm volatile
 80080bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	60fb      	str	r3, [r7, #12]
    }
 80080ce:	bf00      	nop
 80080d0:	e7fe      	b.n	80080d0 <prvTaskExitError+0x28>
        __asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	60bb      	str	r3, [r7, #8]
    }
 80080e4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80080e6:	bf00      	nop
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0fc      	beq.n	80080e8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80080ee:	bf00      	nop
 80080f0:	bf00      	nop
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	20000010 	.word	0x20000010

08008100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008100:	4b07      	ldr	r3, [pc, #28]	; (8008120 <pxCurrentTCBConst2>)
 8008102:	6819      	ldr	r1, [r3, #0]
 8008104:	6808      	ldr	r0, [r1, #0]
 8008106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810a:	f380 8809 	msr	PSP, r0
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f04f 0000 	mov.w	r0, #0
 8008116:	f380 8811 	msr	BASEPRI, r0
 800811a:	4770      	bx	lr
 800811c:	f3af 8000 	nop.w

08008120 <pxCurrentTCBConst2>:
 8008120:	200007c8 	.word	0x200007c8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop

08008128 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008128:	4808      	ldr	r0, [pc, #32]	; (800814c <prvPortStartFirstTask+0x24>)
 800812a:	6800      	ldr	r0, [r0, #0]
 800812c:	6800      	ldr	r0, [r0, #0]
 800812e:	f380 8808 	msr	MSP, r0
 8008132:	f04f 0000 	mov.w	r0, #0
 8008136:	f380 8814 	msr	CONTROL, r0
 800813a:	b662      	cpsie	i
 800813c:	b661      	cpsie	f
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	df00      	svc	0
 8008148:	bf00      	nop
 800814a:	0000      	.short	0x0000
 800814c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008150:	bf00      	nop
 8008152:	bf00      	nop

08008154 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800815a:	4b46      	ldr	r3, [pc, #280]	; (8008274 <xPortStartScheduler+0x120>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a46      	ldr	r2, [pc, #280]	; (8008278 <xPortStartScheduler+0x124>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d10a      	bne.n	800817a <xPortStartScheduler+0x26>
        __asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	613b      	str	r3, [r7, #16]
    }
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800817a:	4b3e      	ldr	r3, [pc, #248]	; (8008274 <xPortStartScheduler+0x120>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a3f      	ldr	r2, [pc, #252]	; (800827c <xPortStartScheduler+0x128>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d10a      	bne.n	800819a <xPortStartScheduler+0x46>
        __asm volatile
 8008184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	60fb      	str	r3, [r7, #12]
    }
 8008196:	bf00      	nop
 8008198:	e7fe      	b.n	8008198 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800819a:	4b39      	ldr	r3, [pc, #228]	; (8008280 <xPortStartScheduler+0x12c>)
 800819c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	22ff      	movs	r2, #255	; 0xff
 80081aa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	4b31      	ldr	r3, [pc, #196]	; (8008284 <xPortStartScheduler+0x130>)
 80081c0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081c2:	4b31      	ldr	r3, [pc, #196]	; (8008288 <xPortStartScheduler+0x134>)
 80081c4:	2207      	movs	r2, #7
 80081c6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081c8:	e009      	b.n	80081de <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80081ca:	4b2f      	ldr	r3, [pc, #188]	; (8008288 <xPortStartScheduler+0x134>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	4a2d      	ldr	r2, [pc, #180]	; (8008288 <xPortStartScheduler+0x134>)
 80081d2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081d4:	78fb      	ldrb	r3, [r7, #3]
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081de:	78fb      	ldrb	r3, [r7, #3]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e6:	2b80      	cmp	r3, #128	; 0x80
 80081e8:	d0ef      	beq.n	80081ca <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081ea:	4b27      	ldr	r3, [pc, #156]	; (8008288 <xPortStartScheduler+0x134>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f1c3 0307 	rsb	r3, r3, #7
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	d00a      	beq.n	800820c <xPortStartScheduler+0xb8>
        __asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	60bb      	str	r3, [r7, #8]
    }
 8008208:	bf00      	nop
 800820a:	e7fe      	b.n	800820a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800820c:	4b1e      	ldr	r3, [pc, #120]	; (8008288 <xPortStartScheduler+0x134>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	021b      	lsls	r3, r3, #8
 8008212:	4a1d      	ldr	r2, [pc, #116]	; (8008288 <xPortStartScheduler+0x134>)
 8008214:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008216:	4b1c      	ldr	r3, [pc, #112]	; (8008288 <xPortStartScheduler+0x134>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800821e:	4a1a      	ldr	r2, [pc, #104]	; (8008288 <xPortStartScheduler+0x134>)
 8008220:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	b2da      	uxtb	r2, r3
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800822a:	4b18      	ldr	r3, [pc, #96]	; (800828c <xPortStartScheduler+0x138>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a17      	ldr	r2, [pc, #92]	; (800828c <xPortStartScheduler+0x138>)
 8008230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008234:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008236:	4b15      	ldr	r3, [pc, #84]	; (800828c <xPortStartScheduler+0x138>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a14      	ldr	r2, [pc, #80]	; (800828c <xPortStartScheduler+0x138>)
 800823c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008240:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008242:	f000 f8e3 	bl	800840c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008246:	4b12      	ldr	r3, [pc, #72]	; (8008290 <xPortStartScheduler+0x13c>)
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800824c:	f000 f902 	bl	8008454 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008250:	4b10      	ldr	r3, [pc, #64]	; (8008294 <xPortStartScheduler+0x140>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a0f      	ldr	r2, [pc, #60]	; (8008294 <xPortStartScheduler+0x140>)
 8008256:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800825a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800825c:	f7ff ff64 	bl	8008128 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008260:	f7ff f85a 	bl	8007318 <vTaskSwitchContext>
    prvTaskExitError();
 8008264:	f7ff ff20 	bl	80080a8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	e000ed00 	.word	0xe000ed00
 8008278:	410fc271 	.word	0x410fc271
 800827c:	410fc270 	.word	0x410fc270
 8008280:	e000e400 	.word	0xe000e400
 8008284:	20000908 	.word	0x20000908
 8008288:	2000090c 	.word	0x2000090c
 800828c:	e000ed20 	.word	0xe000ed20
 8008290:	20000010 	.word	0x20000010
 8008294:	e000ef34 	.word	0xe000ef34

08008298 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
        __asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	607b      	str	r3, [r7, #4]
    }
 80082b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80082b2:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <vPortEnterCritical+0x58>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3301      	adds	r3, #1
 80082b8:	4a0d      	ldr	r2, [pc, #52]	; (80082f0 <vPortEnterCritical+0x58>)
 80082ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80082bc:	4b0c      	ldr	r3, [pc, #48]	; (80082f0 <vPortEnterCritical+0x58>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d10f      	bne.n	80082e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082c4:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <vPortEnterCritical+0x5c>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00a      	beq.n	80082e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	603b      	str	r3, [r7, #0]
    }
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <vPortEnterCritical+0x4a>
    }
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	20000010 	.word	0x20000010
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80082fe:	4b12      	ldr	r3, [pc, #72]	; (8008348 <vPortExitCritical+0x50>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10a      	bne.n	800831c <vPortExitCritical+0x24>
        __asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	607b      	str	r3, [r7, #4]
    }
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800831c:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <vPortExitCritical+0x50>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3b01      	subs	r3, #1
 8008322:	4a09      	ldr	r2, [pc, #36]	; (8008348 <vPortExitCritical+0x50>)
 8008324:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008326:	4b08      	ldr	r3, [pc, #32]	; (8008348 <vPortExitCritical+0x50>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d105      	bne.n	800833a <vPortExitCritical+0x42>
 800832e:	2300      	movs	r3, #0
 8008330:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008338:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	20000010 	.word	0x20000010
 800834c:	00000000 	.word	0x00000000

08008350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008350:	f3ef 8009 	mrs	r0, PSP
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	4b15      	ldr	r3, [pc, #84]	; (80083b0 <pxCurrentTCBConst>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	f01e 0f10 	tst.w	lr, #16
 8008360:	bf08      	it	eq
 8008362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836a:	6010      	str	r0, [r2, #0]
 800836c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008374:	f380 8811 	msr	BASEPRI, r0
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f7fe ffca 	bl	8007318 <vTaskSwitchContext>
 8008384:	f04f 0000 	mov.w	r0, #0
 8008388:	f380 8811 	msr	BASEPRI, r0
 800838c:	bc09      	pop	{r0, r3}
 800838e:	6819      	ldr	r1, [r3, #0]
 8008390:	6808      	ldr	r0, [r1, #0]
 8008392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008396:	f01e 0f10 	tst.w	lr, #16
 800839a:	bf08      	it	eq
 800839c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083a0:	f380 8809 	msr	PSP, r0
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	f3af 8000 	nop.w

080083b0 <pxCurrentTCBConst>:
 80083b0:	200007c8 	.word	0x200007c8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop

080083b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
        __asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	607b      	str	r3, [r7, #4]
    }
 80083d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80083d2:	f001 fb3f 	bl	8009a54 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80083d6:	f7fe fe85 	bl	80070e4 <xTaskIncrementTick>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d006      	beq.n	80083ee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80083e0:	f001 fb96 	bl	8009b10 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083e4:	4b08      	ldr	r3, [pc, #32]	; (8008408 <SysTick_Handler+0x50>)
 80083e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	e001      	b.n	80083f2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80083ee:	f001 fb73 	bl	8009ad8 <SEGGER_SYSVIEW_RecordExitISR>
 80083f2:	2300      	movs	r3, #0
 80083f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	f383 8811 	msr	BASEPRI, r3
    }
 80083fc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80083fe:	bf00      	nop
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008410:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <vPortSetupTimerInterrupt+0x34>)
 8008412:	2200      	movs	r2, #0
 8008414:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008416:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <vPortSetupTimerInterrupt+0x38>)
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <vPortSetupTimerInterrupt+0x3c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a0a      	ldr	r2, [pc, #40]	; (800844c <vPortSetupTimerInterrupt+0x40>)
 8008422:	fba2 2303 	umull	r2, r3, r2, r3
 8008426:	099b      	lsrs	r3, r3, #6
 8008428:	4a09      	ldr	r2, [pc, #36]	; (8008450 <vPortSetupTimerInterrupt+0x44>)
 800842a:	3b01      	subs	r3, #1
 800842c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800842e:	4b04      	ldr	r3, [pc, #16]	; (8008440 <vPortSetupTimerInterrupt+0x34>)
 8008430:	2207      	movs	r2, #7
 8008432:	601a      	str	r2, [r3, #0]
}
 8008434:	bf00      	nop
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	e000e010 	.word	0xe000e010
 8008444:	e000e018 	.word	0xe000e018
 8008448:	20000000 	.word	0x20000000
 800844c:	10624dd3 	.word	0x10624dd3
 8008450:	e000e014 	.word	0xe000e014

08008454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008464 <vPortEnableVFP+0x10>
 8008458:	6801      	ldr	r1, [r0, #0]
 800845a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800845e:	6001      	str	r1, [r0, #0]
 8008460:	4770      	bx	lr
 8008462:	0000      	.short	0x0000
 8008464:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008468:	bf00      	nop
 800846a:	bf00      	nop

0800846c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08a      	sub	sp, #40	; 0x28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8008474:	2300      	movs	r3, #0
 8008476:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8008478:	f7fe fd16 	bl	8006ea8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800847c:	4b53      	ldr	r3, [pc, #332]	; (80085cc <pvPortMalloc+0x160>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008484:	f000 f908 	bl	8008698 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d012      	beq.n	80084b4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800848e:	2208      	movs	r2, #8
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	3308      	adds	r3, #8
 800849a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	43db      	mvns	r3, r3
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d804      	bhi.n	80084b0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	4413      	add	r3, r2
 80084ac:	607b      	str	r3, [r7, #4]
 80084ae:	e001      	b.n	80084b4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	db70      	blt.n	800859c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d06d      	beq.n	800859c <pvPortMalloc+0x130>
 80084c0:	4b43      	ldr	r3, [pc, #268]	; (80085d0 <pvPortMalloc+0x164>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d868      	bhi.n	800859c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80084ca:	4b42      	ldr	r3, [pc, #264]	; (80085d4 <pvPortMalloc+0x168>)
 80084cc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80084ce:	4b41      	ldr	r3, [pc, #260]	; (80085d4 <pvPortMalloc+0x168>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084d4:	e004      	b.n	80084e0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d903      	bls.n	80084f2 <pvPortMalloc+0x86>
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1f1      	bne.n	80084d6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80084f2:	4b36      	ldr	r3, [pc, #216]	; (80085cc <pvPortMalloc+0x160>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d04f      	beq.n	800859c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2208      	movs	r2, #8
 8008502:	4413      	add	r3, r2
 8008504:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	1ad2      	subs	r2, r2, r3
 8008516:	2308      	movs	r3, #8
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	429a      	cmp	r2, r3
 800851c:	d91f      	bls.n	800855e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800851e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4413      	add	r3, r2
 8008524:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f003 0307 	and.w	r3, r3, #7
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00a      	beq.n	8008546 <pvPortMalloc+0xda>
        __asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	613b      	str	r3, [r7, #16]
    }
 8008542:	bf00      	nop
 8008544:	e7fe      	b.n	8008544 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	1ad2      	subs	r2, r2, r3
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008558:	6978      	ldr	r0, [r7, #20]
 800855a:	f000 f8f9 	bl	8008750 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800855e:	4b1c      	ldr	r3, [pc, #112]	; (80085d0 <pvPortMalloc+0x164>)
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	4a19      	ldr	r2, [pc, #100]	; (80085d0 <pvPortMalloc+0x164>)
 800856a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800856c:	4b18      	ldr	r3, [pc, #96]	; (80085d0 <pvPortMalloc+0x164>)
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	4b19      	ldr	r3, [pc, #100]	; (80085d8 <pvPortMalloc+0x16c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	429a      	cmp	r2, r3
 8008576:	d203      	bcs.n	8008580 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008578:	4b15      	ldr	r3, [pc, #84]	; (80085d0 <pvPortMalloc+0x164>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a16      	ldr	r2, [pc, #88]	; (80085d8 <pvPortMalloc+0x16c>)
 800857e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008592:	4b12      	ldr	r3, [pc, #72]	; (80085dc <pvPortMalloc+0x170>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3301      	adds	r3, #1
 8008598:	4a10      	ldr	r2, [pc, #64]	; (80085dc <pvPortMalloc+0x170>)
 800859a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800859c:	f7fe fc92 	bl	8006ec4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	f003 0307 	and.w	r3, r3, #7
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00a      	beq.n	80085c0 <pvPortMalloc+0x154>
        __asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	60fb      	str	r3, [r7, #12]
    }
 80085bc:	bf00      	nop
 80085be:	e7fe      	b.n	80085be <pvPortMalloc+0x152>
    return pvReturn;
 80085c0:	69fb      	ldr	r3, [r7, #28]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3728      	adds	r7, #40	; 0x28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20013518 	.word	0x20013518
 80085d0:	2001351c 	.word	0x2001351c
 80085d4:	20013510 	.word	0x20013510
 80085d8:	20013520 	.word	0x20013520
 80085dc:	20013524 	.word	0x20013524

080085e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d049      	beq.n	8008686 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80085f2:	2308      	movs	r3, #8
 80085f4:	425b      	negs	r3, r3
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	4413      	add	r3, r2
 80085fa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	db0a      	blt.n	800861e <vPortFree+0x3e>
        __asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	60fb      	str	r3, [r7, #12]
    }
 800861a:	bf00      	nop
 800861c:	e7fe      	b.n	800861c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <vPortFree+0x5c>
        __asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	60bb      	str	r3, [r7, #8]
    }
 8008638:	bf00      	nop
 800863a:	e7fe      	b.n	800863a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	0fdb      	lsrs	r3, r3, #31
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01c      	beq.n	8008686 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d118      	bne.n	8008686 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8008660:	f7fe fc22 	bl	8006ea8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	4b09      	ldr	r3, [pc, #36]	; (8008690 <vPortFree+0xb0>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4413      	add	r3, r2
 800866e:	4a08      	ldr	r2, [pc, #32]	; (8008690 <vPortFree+0xb0>)
 8008670:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008672:	6938      	ldr	r0, [r7, #16]
 8008674:	f000 f86c 	bl	8008750 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008678:	4b06      	ldr	r3, [pc, #24]	; (8008694 <vPortFree+0xb4>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3301      	adds	r3, #1
 800867e:	4a05      	ldr	r2, [pc, #20]	; (8008694 <vPortFree+0xb4>)
 8008680:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008682:	f7fe fc1f 	bl	8006ec4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008686:	bf00      	nop
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	2001351c 	.word	0x2001351c
 8008694:	20013528 	.word	0x20013528

08008698 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800869e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80086a2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80086a4:	4b25      	ldr	r3, [pc, #148]	; (800873c <prvHeapInit+0xa4>)
 80086a6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00c      	beq.n	80086cc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3307      	adds	r3, #7
 80086b6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0307 	bic.w	r3, r3, #7
 80086be:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	4a1d      	ldr	r2, [pc, #116]	; (800873c <prvHeapInit+0xa4>)
 80086c8:	4413      	add	r3, r2
 80086ca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086d0:	4a1b      	ldr	r2, [pc, #108]	; (8008740 <prvHeapInit+0xa8>)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80086d6:	4b1a      	ldr	r3, [pc, #104]	; (8008740 <prvHeapInit+0xa8>)
 80086d8:	2200      	movs	r2, #0
 80086da:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	4413      	add	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80086e4:	2208      	movs	r2, #8
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	1a9b      	subs	r3, r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f023 0307 	bic.w	r3, r3, #7
 80086f2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4a13      	ldr	r2, [pc, #76]	; (8008744 <prvHeapInit+0xac>)
 80086f8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <prvHeapInit+0xac>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2200      	movs	r2, #0
 8008700:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008702:	4b10      	ldr	r3, [pc, #64]	; (8008744 <prvHeapInit+0xac>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2200      	movs	r2, #0
 8008708:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	1ad2      	subs	r2, r2, r3
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008718:	4b0a      	ldr	r3, [pc, #40]	; (8008744 <prvHeapInit+0xac>)
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	4a08      	ldr	r2, [pc, #32]	; (8008748 <prvHeapInit+0xb0>)
 8008726:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	4a07      	ldr	r2, [pc, #28]	; (800874c <prvHeapInit+0xb4>)
 800872e:	6013      	str	r3, [r2, #0]
}
 8008730:	bf00      	nop
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	20000910 	.word	0x20000910
 8008740:	20013510 	.word	0x20013510
 8008744:	20013518 	.word	0x20013518
 8008748:	20013520 	.word	0x20013520
 800874c:	2001351c 	.word	0x2001351c

08008750 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008758:	4b28      	ldr	r3, [pc, #160]	; (80087fc <prvInsertBlockIntoFreeList+0xac>)
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	e002      	b.n	8008764 <prvInsertBlockIntoFreeList+0x14>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	60fb      	str	r3, [r7, #12]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	429a      	cmp	r2, r3
 800876c:	d8f7      	bhi.n	800875e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	4413      	add	r3, r2
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	429a      	cmp	r2, r3
 800877e:	d108      	bne.n	8008792 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	441a      	add	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	441a      	add	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d118      	bne.n	80087d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	4b15      	ldr	r3, [pc, #84]	; (8008800 <prvInsertBlockIntoFreeList+0xb0>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d00d      	beq.n	80087ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	441a      	add	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	e008      	b.n	80087e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087ce:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <prvInsertBlockIntoFreeList+0xb0>)
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	e003      	b.n	80087e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d002      	beq.n	80087ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80087ee:	bf00      	nop
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	20013510 	.word	0x20013510
 8008800:	20013518 	.word	0x20013518

08008804 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af02      	add	r7, sp, #8
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
 8008810:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8008812:	2205      	movs	r2, #5
 8008814:	492b      	ldr	r1, [pc, #172]	; (80088c4 <SYSVIEW_AddTask+0xc0>)
 8008816:	68b8      	ldr	r0, [r7, #8]
 8008818:	f002 f93d 	bl	800aa96 <memcmp>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d04b      	beq.n	80088ba <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8008822:	4b29      	ldr	r3, [pc, #164]	; (80088c8 <SYSVIEW_AddTask+0xc4>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b07      	cmp	r3, #7
 8008828:	d903      	bls.n	8008832 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800882a:	4828      	ldr	r0, [pc, #160]	; (80088cc <SYSVIEW_AddTask+0xc8>)
 800882c:	f001 fb5a 	bl	8009ee4 <SEGGER_SYSVIEW_Warn>
    return;
 8008830:	e044      	b.n	80088bc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8008832:	4b25      	ldr	r3, [pc, #148]	; (80088c8 <SYSVIEW_AddTask+0xc4>)
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	4926      	ldr	r1, [pc, #152]	; (80088d0 <SYSVIEW_AddTask+0xcc>)
 8008838:	4613      	mov	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	440b      	add	r3, r1
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8008846:	4b20      	ldr	r3, [pc, #128]	; (80088c8 <SYSVIEW_AddTask+0xc4>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	4921      	ldr	r1, [pc, #132]	; (80088d0 <SYSVIEW_AddTask+0xcc>)
 800884c:	4613      	mov	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	3304      	adds	r3, #4
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800885c:	4b1a      	ldr	r3, [pc, #104]	; (80088c8 <SYSVIEW_AddTask+0xc4>)
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	491b      	ldr	r1, [pc, #108]	; (80088d0 <SYSVIEW_AddTask+0xcc>)
 8008862:	4613      	mov	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	440b      	add	r3, r1
 800886c:	3308      	adds	r3, #8
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8008872:	4b15      	ldr	r3, [pc, #84]	; (80088c8 <SYSVIEW_AddTask+0xc4>)
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	4916      	ldr	r1, [pc, #88]	; (80088d0 <SYSVIEW_AddTask+0xcc>)
 8008878:	4613      	mov	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	440b      	add	r3, r1
 8008882:	330c      	adds	r3, #12
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008888:	4b0f      	ldr	r3, [pc, #60]	; (80088c8 <SYSVIEW_AddTask+0xc4>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	4910      	ldr	r1, [pc, #64]	; (80088d0 <SYSVIEW_AddTask+0xcc>)
 800888e:	4613      	mov	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4413      	add	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	440b      	add	r3, r1
 8008898:	3310      	adds	r3, #16
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800889e:	4b0a      	ldr	r3, [pc, #40]	; (80088c8 <SYSVIEW_AddTask+0xc4>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3301      	adds	r3, #1
 80088a4:	4a08      	ldr	r2, [pc, #32]	; (80088c8 <SYSVIEW_AddTask+0xc4>)
 80088a6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 f80e 	bl	80088d4 <SYSVIEW_SendTaskInfo>
 80088b8:	e000      	b.n	80088bc <SYSVIEW_AddTask+0xb8>
    return;
 80088ba:	bf00      	nop

}
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	0800cab4 	.word	0x0800cab4
 80088c8:	200135cc 	.word	0x200135cc
 80088cc:	0800cabc 	.word	0x0800cabc
 80088d0:	2001352c 	.word	0x2001352c

080088d4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08a      	sub	sp, #40	; 0x28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80088e2:	f107 0314 	add.w	r3, r7, #20
 80088e6:	2214      	movs	r2, #20
 80088e8:	2100      	movs	r1, #0
 80088ea:	4618      	mov	r0, r3
 80088ec:	f002 f8e3 	bl	800aab6 <memset>
  TaskInfo.TaskID     = TaskID;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8008904:	f107 0314 	add.w	r3, r7, #20
 8008908:	4618      	mov	r0, r3
 800890a:	f000 ff79 	bl	8009800 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800890e:	bf00      	nop
 8008910:	3728      	adds	r7, #40	; 0x28
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800891e:	4b24      	ldr	r3, [pc, #144]	; (80089b0 <_DoInit+0x98>)
 8008920:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2203      	movs	r2, #3
 8008926:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2203      	movs	r2, #3
 800892c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a20      	ldr	r2, [pc, #128]	; (80089b4 <_DoInit+0x9c>)
 8008932:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a20      	ldr	r2, [pc, #128]	; (80089b8 <_DoInit+0xa0>)
 8008938:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008940:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a17      	ldr	r2, [pc, #92]	; (80089b4 <_DoInit+0x9c>)
 8008958:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a17      	ldr	r2, [pc, #92]	; (80089bc <_DoInit+0xa4>)
 800895e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2210      	movs	r2, #16
 8008964:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3307      	adds	r3, #7
 800897c:	4a10      	ldr	r2, [pc, #64]	; (80089c0 <_DoInit+0xa8>)
 800897e:	6810      	ldr	r0, [r2, #0]
 8008980:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008982:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a0e      	ldr	r2, [pc, #56]	; (80089c4 <_DoInit+0xac>)
 800898a:	6810      	ldr	r0, [r2, #0]
 800898c:	6018      	str	r0, [r3, #0]
 800898e:	8891      	ldrh	r1, [r2, #4]
 8008990:	7992      	ldrb	r2, [r2, #6]
 8008992:	8099      	strh	r1, [r3, #4]
 8008994:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008996:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2220      	movs	r2, #32
 800899e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80089a0:	f3bf 8f5f 	dmb	sy
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	200135d0 	.word	0x200135d0
 80089b4:	0800cb0c 	.word	0x0800cb0c
 80089b8:	20013678 	.word	0x20013678
 80089bc:	20013a78 	.word	0x20013a78
 80089c0:	0800cb18 	.word	0x0800cb18
 80089c4:	0800cb1c 	.word	0x0800cb1c

080089c8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08a      	sub	sp, #40	; 0x28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80089d4:	2300      	movs	r3, #0
 80089d6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80089e4:	69ba      	ldr	r2, [r7, #24]
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d905      	bls.n	80089f8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	3b01      	subs	r3, #1
 80089f4:	627b      	str	r3, [r7, #36]	; 0x24
 80089f6:	e007      	b.n	8008a08 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	689a      	ldr	r2, [r3, #8]
 80089fc:	69b9      	ldr	r1, [r7, #24]
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	1acb      	subs	r3, r1, r3
 8008a02:	4413      	add	r3, r2
 8008a04:	3b01      	subs	r3, #1
 8008a06:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a12:	4293      	cmp	r3, r2
 8008a14:	bf28      	it	cs
 8008a16:	4613      	movcs	r3, r2
 8008a18:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8008a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	bf28      	it	cs
 8008a22:	4613      	movcs	r3, r2
 8008a24:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8008a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a32:	68b9      	ldr	r1, [r7, #8]
 8008a34:	6978      	ldr	r0, [r7, #20]
 8008a36:	f002 f8ac 	bl	800ab92 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8008a3a:	6a3a      	ldr	r2, [r7, #32]
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	4413      	add	r3, r2
 8008a40:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	4413      	add	r3, r2
 8008a48:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8008a52:	69fa      	ldr	r2, [r7, #28]
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	4413      	add	r3, r2
 8008a58:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	69fa      	ldr	r2, [r7, #28]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d101      	bne.n	8008a68 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8008a64:	2300      	movs	r3, #0
 8008a66:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008a68:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	69fa      	ldr	r2, [r7, #28]
 8008a70:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1b2      	bne.n	80089de <_WriteBlocking+0x16>
  return NumBytesWritten;
 8008a78:	6a3b      	ldr	r3, [r7, #32]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3728      	adds	r7, #40	; 0x28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b088      	sub	sp, #32
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d911      	bls.n	8008aca <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	4413      	add	r3, r2
 8008aae:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	68b9      	ldr	r1, [r7, #8]
 8008ab4:	6938      	ldr	r0, [r7, #16]
 8008ab6:	f002 f86c 	bl	800ab92 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008aba:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8008abe:	69fa      	ldr	r2, [r7, #28]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	441a      	add	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8008ac8:	e01f      	b.n	8008b0a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	68b9      	ldr	r1, [r7, #8]
 8008adc:	6938      	ldr	r0, [r7, #16]
 8008ade:	f002 f858 	bl	800ab92 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	4413      	add	r3, r2
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	4619      	mov	r1, r3
 8008afa:	6938      	ldr	r0, [r7, #16]
 8008afc:	f002 f849 	bl	800ab92 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008b00:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	60da      	str	r2, [r3, #12]
}
 8008b0a:	bf00      	nop
 8008b0c:	3720      	adds	r7, #32
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8008b12:	b480      	push	{r7}
 8008b14:	b087      	sub	sp, #28
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d808      	bhi.n	8008b40 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689a      	ldr	r2, [r3, #8]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	1ad2      	subs	r2, r2, r3
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	4413      	add	r3, r2
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	e004      	b.n	8008b4a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	3b01      	subs	r3, #1
 8008b48:	617b      	str	r3, [r7, #20]
  }
  return r;
 8008b4a:	697b      	ldr	r3, [r7, #20]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	371c      	adds	r7, #28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b08c      	sub	sp, #48	; 0x30
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008b64:	4b3e      	ldr	r3, [pc, #248]	; (8008c60 <SEGGER_RTT_ReadNoLock+0x108>)
 8008b66:	623b      	str	r3, [r7, #32]
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <SEGGER_RTT_ReadNoLock+0x1e>
 8008b72:	f7ff fed1 	bl	8008918 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	005b      	lsls	r3, r3, #1
 8008b7c:	4413      	add	r3, r2
 8008b7e:	00db      	lsls	r3, r3, #3
 8008b80:	3360      	adds	r3, #96	; 0x60
 8008b82:	4a37      	ldr	r2, [pc, #220]	; (8008c60 <SEGGER_RTT_ReadNoLock+0x108>)
 8008b84:	4413      	add	r3, r2
 8008b86:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8008b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d92b      	bls.n	8008bfc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	689a      	ldr	r2, [r3, #8]
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	bf28      	it	cs
 8008bb6:	4613      	movcs	r3, r2
 8008bb8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	685a      	ldr	r2, [r3, #4]
 8008bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc0:	4413      	add	r3, r2
 8008bc2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	6939      	ldr	r1, [r7, #16]
 8008bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bca:	f001 ffe2 	bl	800ab92 <memcpy>
    NumBytesRead += NumBytesRem;
 8008bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	4413      	add	r3, r2
 8008bdc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	4413      	add	r3, r2
 8008bec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d101      	bne.n	8008bfc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8008bfc:	69ba      	ldr	r2, [r7, #24]
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	bf28      	it	cs
 8008c0c:	4613      	movcs	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d019      	beq.n	8008c4a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1c:	4413      	add	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	6939      	ldr	r1, [r7, #16]
 8008c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c26:	f001 ffb4 	bl	800ab92 <memcpy>
    NumBytesRead += NumBytesRem;
 8008c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	4413      	add	r3, r2
 8008c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	4413      	add	r3, r2
 8008c38:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	4413      	add	r3, r2
 8008c48:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8008c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c54:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3730      	adds	r7, #48	; 0x30
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	200135d0 	.word	0x200135d0

08008c64 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b088      	sub	sp, #32
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	1c5a      	adds	r2, r3, #1
 8008c78:	4613      	mov	r3, r2
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	4413      	add	r3, r2
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	4a1f      	ldr	r2, [pc, #124]	; (8008d00 <SEGGER_RTT_WriteNoLock+0x9c>)
 8008c82:	4413      	add	r3, r2
 8008c84:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	695b      	ldr	r3, [r3, #20]
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d029      	beq.n	8008ce2 <SEGGER_RTT_WriteNoLock+0x7e>
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d82e      	bhi.n	8008cf0 <SEGGER_RTT_WriteNoLock+0x8c>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <SEGGER_RTT_WriteNoLock+0x38>
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d013      	beq.n	8008cc2 <SEGGER_RTT_WriteNoLock+0x5e>
 8008c9a:	e029      	b.n	8008cf0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008c9c:	6978      	ldr	r0, [r7, #20]
 8008c9e:	f7ff ff38 	bl	8008b12 <_GetAvailWriteSpace>
 8008ca2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d202      	bcs.n	8008cb2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8008cac:	2300      	movs	r3, #0
 8008cae:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8008cb0:	e021      	b.n	8008cf6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	69b9      	ldr	r1, [r7, #24]
 8008cba:	6978      	ldr	r0, [r7, #20]
 8008cbc:	f7ff fee1 	bl	8008a82 <_WriteNoCheck>
    break;
 8008cc0:	e019      	b.n	8008cf6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008cc2:	6978      	ldr	r0, [r7, #20]
 8008cc4:	f7ff ff25 	bl	8008b12 <_GetAvailWriteSpace>
 8008cc8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	bf28      	it	cs
 8008cd2:	4613      	movcs	r3, r2
 8008cd4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8008cd6:	69fa      	ldr	r2, [r7, #28]
 8008cd8:	69b9      	ldr	r1, [r7, #24]
 8008cda:	6978      	ldr	r0, [r7, #20]
 8008cdc:	f7ff fed1 	bl	8008a82 <_WriteNoCheck>
    break;
 8008ce0:	e009      	b.n	8008cf6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	69b9      	ldr	r1, [r7, #24]
 8008ce6:	6978      	ldr	r0, [r7, #20]
 8008ce8:	f7ff fe6e 	bl	80089c8 <_WriteBlocking>
 8008cec:	61f8      	str	r0, [r7, #28]
    break;
 8008cee:	e002      	b.n	8008cf6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	61fb      	str	r3, [r7, #28]
    break;
 8008cf4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8008cf6:	69fb      	ldr	r3, [r7, #28]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3720      	adds	r7, #32
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	200135d0 	.word	0x200135d0

08008d04 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8008d10:	4b0e      	ldr	r3, [pc, #56]	; (8008d4c <SEGGER_RTT_Write+0x48>)
 8008d12:	61fb      	str	r3, [r7, #28]
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <SEGGER_RTT_Write+0x1e>
 8008d1e:	f7ff fdfb 	bl	8008918 <_DoInit>
  SEGGER_RTT_LOCK();
 8008d22:	f3ef 8311 	mrs	r3, BASEPRI
 8008d26:	f04f 0120 	mov.w	r1, #32
 8008d2a:	f381 8811 	msr	BASEPRI, r1
 8008d2e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	68b9      	ldr	r1, [r7, #8]
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f7ff ff95 	bl	8008c64 <SEGGER_RTT_WriteNoLock>
 8008d3a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8008d42:	697b      	ldr	r3, [r7, #20]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3720      	adds	r7, #32
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	200135d0 	.word	0x200135d0

08008d50 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8008d60:	e002      	b.n	8008d68 <_EncodeStr+0x18>
    Len++;
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	3301      	adds	r3, #1
 8008d66:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1f6      	bne.n	8008d62 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d901      	bls.n	8008d80 <_EncodeStr+0x30>
    Len = Limit;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	2bfe      	cmp	r3, #254	; 0xfe
 8008d84:	d806      	bhi.n	8008d94 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	60fa      	str	r2, [r7, #12]
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	b2d2      	uxtb	r2, r2
 8008d90:	701a      	strb	r2, [r3, #0]
 8008d92:	e011      	b.n	8008db8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	1c5a      	adds	r2, r3, #1
 8008d98:	60fa      	str	r2, [r7, #12]
 8008d9a:	22ff      	movs	r2, #255	; 0xff
 8008d9c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	60fa      	str	r2, [r7, #12]
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	b2d2      	uxtb	r2, r2
 8008da8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	0a19      	lsrs	r1, r3, #8
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	60fa      	str	r2, [r7, #12]
 8008db4:	b2ca      	uxtb	r2, r1
 8008db6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008dbc:	e00a      	b.n	8008dd4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	1c53      	adds	r3, r2, #1
 8008dc2:	60bb      	str	r3, [r7, #8]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	1c59      	adds	r1, r3, #1
 8008dc8:	60f9      	str	r1, [r7, #12]
 8008dca:	7812      	ldrb	r2, [r2, #0]
 8008dcc:	701a      	strb	r2, [r3, #0]
    n++;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d3f0      	bcc.n	8008dbe <_EncodeStr+0x6e>
  }
  return pPayload;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	371c      	adds	r7, #28
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8008dea:	b480      	push	{r7}
 8008dec:	b083      	sub	sp, #12
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	3304      	adds	r3, #4
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
	...

08008e04 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008e0a:	4b35      	ldr	r3, [pc, #212]	; (8008ee0 <_HandleIncomingPacket+0xdc>)
 8008e0c:	7e1b      	ldrb	r3, [r3, #24]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	1cfb      	adds	r3, r7, #3
 8008e12:	2201      	movs	r2, #1
 8008e14:	4619      	mov	r1, r3
 8008e16:	f7ff fe9f 	bl	8008b58 <SEGGER_RTT_ReadNoLock>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	dd59      	ble.n	8008ed8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	2b80      	cmp	r3, #128	; 0x80
 8008e28:	d032      	beq.n	8008e90 <_HandleIncomingPacket+0x8c>
 8008e2a:	2b80      	cmp	r3, #128	; 0x80
 8008e2c:	dc42      	bgt.n	8008eb4 <_HandleIncomingPacket+0xb0>
 8008e2e:	2b07      	cmp	r3, #7
 8008e30:	dc16      	bgt.n	8008e60 <_HandleIncomingPacket+0x5c>
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	dd3e      	ble.n	8008eb4 <_HandleIncomingPacket+0xb0>
 8008e36:	3b01      	subs	r3, #1
 8008e38:	2b06      	cmp	r3, #6
 8008e3a:	d83b      	bhi.n	8008eb4 <_HandleIncomingPacket+0xb0>
 8008e3c:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <_HandleIncomingPacket+0x40>)
 8008e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e42:	bf00      	nop
 8008e44:	08008e67 	.word	0x08008e67
 8008e48:	08008e6d 	.word	0x08008e6d
 8008e4c:	08008e73 	.word	0x08008e73
 8008e50:	08008e79 	.word	0x08008e79
 8008e54:	08008e7f 	.word	0x08008e7f
 8008e58:	08008e85 	.word	0x08008e85
 8008e5c:	08008e8b 	.word	0x08008e8b
 8008e60:	2b7f      	cmp	r3, #127	; 0x7f
 8008e62:	d034      	beq.n	8008ece <_HandleIncomingPacket+0xca>
 8008e64:	e026      	b.n	8008eb4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008e66:	f000 fb51 	bl	800950c <SEGGER_SYSVIEW_Start>
      break;
 8008e6a:	e035      	b.n	8008ed8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8008e6c:	f000 fc08 	bl	8009680 <SEGGER_SYSVIEW_Stop>
      break;
 8008e70:	e032      	b.n	8008ed8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8008e72:	f000 fdbd 	bl	80099f0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008e76:	e02f      	b.n	8008ed8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008e78:	f000 fda6 	bl	80099c8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8008e7c:	e02c      	b.n	8008ed8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8008e7e:	f000 fc25 	bl	80096cc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8008e82:	e029      	b.n	8008ed8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008e84:	f000 fff0 	bl	8009e68 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008e88:	e026      	b.n	8008ed8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8008e8a:	f000 ffcf 	bl	8009e2c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8008e8e:	e023      	b.n	8008ed8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008e90:	4b13      	ldr	r3, [pc, #76]	; (8008ee0 <_HandleIncomingPacket+0xdc>)
 8008e92:	7e1b      	ldrb	r3, [r3, #24]
 8008e94:	4618      	mov	r0, r3
 8008e96:	1cfb      	adds	r3, r7, #3
 8008e98:	2201      	movs	r2, #1
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	f7ff fe5c 	bl	8008b58 <SEGGER_RTT_ReadNoLock>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	dd13      	ble.n	8008ed2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8008eaa:	78fb      	ldrb	r3, [r7, #3]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 ff3d 	bl	8009d2c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8008eb2:	e00e      	b.n	8008ed2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	b25b      	sxtb	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	da0c      	bge.n	8008ed6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008ebc:	4b08      	ldr	r3, [pc, #32]	; (8008ee0 <_HandleIncomingPacket+0xdc>)
 8008ebe:	7e1b      	ldrb	r3, [r3, #24]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	1cfb      	adds	r3, r7, #3
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	f7ff fe46 	bl	8008b58 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8008ecc:	e003      	b.n	8008ed6 <_HandleIncomingPacket+0xd2>
      break;
 8008ece:	bf00      	nop
 8008ed0:	e002      	b.n	8008ed8 <_HandleIncomingPacket+0xd4>
      break;
 8008ed2:	bf00      	nop
 8008ed4:	e000      	b.n	8008ed8 <_HandleIncomingPacket+0xd4>
      break;
 8008ed6:	bf00      	nop
    }
  }
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20013a88 	.word	0x20013a88

08008ee4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b08c      	sub	sp, #48	; 0x30
 8008ee8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8008eea:	2301      	movs	r3, #1
 8008eec:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8008eee:	1d3b      	adds	r3, r7, #4
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ef8:	4b31      	ldr	r3, [pc, #196]	; (8008fc0 <_TrySendOverflowPacket+0xdc>)
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008efe:	e00b      	b.n	8008f18 <_TrySendOverflowPacket+0x34>
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f06:	1c59      	adds	r1, r3, #1
 8008f08:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008f0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f0e:	b2d2      	uxtb	r2, r2
 8008f10:	701a      	strb	r2, [r3, #0]
 8008f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f14:	09db      	lsrs	r3, r3, #7
 8008f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8008f1c:	d8f0      	bhi.n	8008f00 <_TrySendOverflowPacket+0x1c>
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f26:	b2d2      	uxtb	r2, r2
 8008f28:	701a      	strb	r2, [r3, #0]
 8008f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008f2e:	4b25      	ldr	r3, [pc, #148]	; (8008fc4 <_TrySendOverflowPacket+0xe0>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008f34:	4b22      	ldr	r3, [pc, #136]	; (8008fc0 <_TrySendOverflowPacket+0xdc>)
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	69ba      	ldr	r2, [r7, #24]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	623b      	str	r3, [r7, #32]
 8008f46:	e00b      	b.n	8008f60 <_TrySendOverflowPacket+0x7c>
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	1c59      	adds	r1, r3, #1
 8008f50:	6279      	str	r1, [r7, #36]	; 0x24
 8008f52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f56:	b2d2      	uxtb	r2, r2
 8008f58:	701a      	strb	r2, [r3, #0]
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	09db      	lsrs	r3, r3, #7
 8008f5e:	623b      	str	r3, [r7, #32]
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	2b7f      	cmp	r3, #127	; 0x7f
 8008f64:	d8f0      	bhi.n	8008f48 <_TrySendOverflowPacket+0x64>
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	627a      	str	r2, [r7, #36]	; 0x24
 8008f6c:	6a3a      	ldr	r2, [r7, #32]
 8008f6e:	b2d2      	uxtb	r2, r2
 8008f70:	701a      	strb	r2, [r3, #0]
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8008f76:	4b12      	ldr	r3, [pc, #72]	; (8008fc0 <_TrySendOverflowPacket+0xdc>)
 8008f78:	785b      	ldrb	r3, [r3, #1]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	1d3b      	adds	r3, r7, #4
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	461a      	mov	r2, r3
 8008f84:	1d3b      	adds	r3, r7, #4
 8008f86:	4619      	mov	r1, r3
 8008f88:	f7f7 f942 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d009      	beq.n	8008faa <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008f96:	4a0a      	ldr	r2, [pc, #40]	; (8008fc0 <_TrySendOverflowPacket+0xdc>)
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8008f9c:	4b08      	ldr	r3, [pc, #32]	; (8008fc0 <_TrySendOverflowPacket+0xdc>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	4b06      	ldr	r3, [pc, #24]	; (8008fc0 <_TrySendOverflowPacket+0xdc>)
 8008fa6:	701a      	strb	r2, [r3, #0]
 8008fa8:	e004      	b.n	8008fb4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8008faa:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <_TrySendOverflowPacket+0xdc>)
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	4a03      	ldr	r2, [pc, #12]	; (8008fc0 <_TrySendOverflowPacket+0xdc>)
 8008fb2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8008fb4:	693b      	ldr	r3, [r7, #16]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3730      	adds	r7, #48	; 0x30
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20013a88 	.word	0x20013a88
 8008fc4:	e0001004 	.word	0xe0001004

08008fc8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08a      	sub	sp, #40	; 0x28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008fd4:	4b6c      	ldr	r3, [pc, #432]	; (8009188 <_SendPacket+0x1c0>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d010      	beq.n	8008ffe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8008fdc:	4b6a      	ldr	r3, [pc, #424]	; (8009188 <_SendPacket+0x1c0>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 80a3 	beq.w	800912c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8008fe6:	4b68      	ldr	r3, [pc, #416]	; (8009188 <_SendPacket+0x1c0>)
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d109      	bne.n	8009002 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8008fee:	f7ff ff79 	bl	8008ee4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8008ff2:	4b65      	ldr	r3, [pc, #404]	; (8009188 <_SendPacket+0x1c0>)
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	f040 809a 	bne.w	8009130 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8008ffc:	e001      	b.n	8009002 <_SendPacket+0x3a>
    goto Send;
 8008ffe:	bf00      	nop
 8009000:	e000      	b.n	8009004 <_SendPacket+0x3c>
Send:
 8009002:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b1f      	cmp	r3, #31
 8009008:	d809      	bhi.n	800901e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800900a:	4b5f      	ldr	r3, [pc, #380]	; (8009188 <_SendPacket+0x1c0>)
 800900c:	69da      	ldr	r2, [r3, #28]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	fa22 f303 	lsr.w	r3, r2, r3
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	f040 808b 	bne.w	8009134 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2b17      	cmp	r3, #23
 8009022:	d807      	bhi.n	8009034 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3b01      	subs	r3, #1
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	b2da      	uxtb	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	701a      	strb	r2, [r3, #0]
 8009032:	e03d      	b.n	80090b0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	2b7f      	cmp	r3, #127	; 0x7f
 8009040:	d912      	bls.n	8009068 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	09da      	lsrs	r2, r3, #7
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3b01      	subs	r3, #1
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	b2d2      	uxtb	r2, r2
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	b2db      	uxtb	r3, r3
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	3a01      	subs	r2, #1
 800905a:	60fa      	str	r2, [r7, #12]
 800905c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009060:	b2da      	uxtb	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	701a      	strb	r2, [r3, #0]
 8009066:	e006      	b.n	8009076 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	3b01      	subs	r3, #1
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	b2da      	uxtb	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b7f      	cmp	r3, #127	; 0x7f
 800907a:	d912      	bls.n	80090a2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	09da      	lsrs	r2, r3, #7
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	3b01      	subs	r3, #1
 8009084:	60fb      	str	r3, [r7, #12]
 8009086:	b2d2      	uxtb	r2, r2
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	b2db      	uxtb	r3, r3
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	3a01      	subs	r2, #1
 8009094:	60fa      	str	r2, [r7, #12]
 8009096:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800909a:	b2da      	uxtb	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	701a      	strb	r2, [r3, #0]
 80090a0:	e006      	b.n	80090b0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80090b0:	4b36      	ldr	r3, [pc, #216]	; (800918c <_SendPacket+0x1c4>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80090b6:	4b34      	ldr	r3, [pc, #208]	; (8009188 <_SendPacket+0x1c0>)
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	69ba      	ldr	r2, [r7, #24]
 80090bc:	1ad3      	subs	r3, r2, r3
 80090be:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	623b      	str	r3, [r7, #32]
 80090c8:	e00b      	b.n	80090e2 <_SendPacket+0x11a>
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	1c59      	adds	r1, r3, #1
 80090d2:	6279      	str	r1, [r7, #36]	; 0x24
 80090d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80090d8:	b2d2      	uxtb	r2, r2
 80090da:	701a      	strb	r2, [r3, #0]
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	09db      	lsrs	r3, r3, #7
 80090e0:	623b      	str	r3, [r7, #32]
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	2b7f      	cmp	r3, #127	; 0x7f
 80090e6:	d8f0      	bhi.n	80090ca <_SendPacket+0x102>
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	627a      	str	r2, [r7, #36]	; 0x24
 80090ee:	6a3a      	ldr	r2, [r7, #32]
 80090f0:	b2d2      	uxtb	r2, r2
 80090f2:	701a      	strb	r2, [r3, #0]
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80090f8:	4b23      	ldr	r3, [pc, #140]	; (8009188 <_SendPacket+0x1c0>)
 80090fa:	785b      	ldrb	r3, [r3, #1]
 80090fc:	4618      	mov	r0, r3
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	461a      	mov	r2, r3
 8009106:	68f9      	ldr	r1, [r7, #12]
 8009108:	f7f7 f882 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800910c:	4603      	mov	r3, r0
 800910e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8009116:	4a1c      	ldr	r2, [pc, #112]	; (8009188 <_SendPacket+0x1c0>)
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	60d3      	str	r3, [r2, #12]
 800911c:	e00b      	b.n	8009136 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800911e:	4b1a      	ldr	r3, [pc, #104]	; (8009188 <_SendPacket+0x1c0>)
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	3301      	adds	r3, #1
 8009124:	b2da      	uxtb	r2, r3
 8009126:	4b18      	ldr	r3, [pc, #96]	; (8009188 <_SendPacket+0x1c0>)
 8009128:	701a      	strb	r2, [r3, #0]
 800912a:	e004      	b.n	8009136 <_SendPacket+0x16e>
    goto SendDone;
 800912c:	bf00      	nop
 800912e:	e002      	b.n	8009136 <_SendPacket+0x16e>
      goto SendDone;
 8009130:	bf00      	nop
 8009132:	e000      	b.n	8009136 <_SendPacket+0x16e>
      goto SendDone;
 8009134:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8009136:	4b14      	ldr	r3, [pc, #80]	; (8009188 <_SendPacket+0x1c0>)
 8009138:	7e1b      	ldrb	r3, [r3, #24]
 800913a:	4619      	mov	r1, r3
 800913c:	4a14      	ldr	r2, [pc, #80]	; (8009190 <_SendPacket+0x1c8>)
 800913e:	460b      	mov	r3, r1
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	440b      	add	r3, r1
 8009144:	00db      	lsls	r3, r3, #3
 8009146:	4413      	add	r3, r2
 8009148:	336c      	adds	r3, #108	; 0x6c
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	4b0e      	ldr	r3, [pc, #56]	; (8009188 <_SendPacket+0x1c0>)
 800914e:	7e1b      	ldrb	r3, [r3, #24]
 8009150:	4618      	mov	r0, r3
 8009152:	490f      	ldr	r1, [pc, #60]	; (8009190 <_SendPacket+0x1c8>)
 8009154:	4603      	mov	r3, r0
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	4403      	add	r3, r0
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	440b      	add	r3, r1
 800915e:	3370      	adds	r3, #112	; 0x70
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	429a      	cmp	r2, r3
 8009164:	d00b      	beq.n	800917e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8009166:	4b08      	ldr	r3, [pc, #32]	; (8009188 <_SendPacket+0x1c0>)
 8009168:	789b      	ldrb	r3, [r3, #2]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d107      	bne.n	800917e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800916e:	4b06      	ldr	r3, [pc, #24]	; (8009188 <_SendPacket+0x1c0>)
 8009170:	2201      	movs	r2, #1
 8009172:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8009174:	f7ff fe46 	bl	8008e04 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8009178:	4b03      	ldr	r3, [pc, #12]	; (8009188 <_SendPacket+0x1c0>)
 800917a:	2200      	movs	r2, #0
 800917c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800917e:	bf00      	nop
 8009180:	3728      	adds	r7, #40	; 0x28
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20013a88 	.word	0x20013a88
 800918c:	e0001004 	.word	0xe0001004
 8009190:	200135d0 	.word	0x200135d0

08009194 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800919c:	f3ef 8311 	mrs	r3, BASEPRI
 80091a0:	f04f 0120 	mov.w	r1, #32
 80091a4:	f381 8811 	msr	BASEPRI, r1
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	4808      	ldr	r0, [pc, #32]	; (80091cc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80091ac:	f7ff fe1d 	bl	8008dea <_PreparePacket>
 80091b0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	68b9      	ldr	r1, [r7, #8]
 80091b6:	68b8      	ldr	r0, [r7, #8]
 80091b8:	f7ff ff06 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f383 8811 	msr	BASEPRI, r3
}
 80091c2:	bf00      	nop
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	20013ab8 	.word	0x20013ab8

080091d0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b088      	sub	sp, #32
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80091da:	f3ef 8311 	mrs	r3, BASEPRI
 80091de:	f04f 0120 	mov.w	r1, #32
 80091e2:	f381 8811 	msr	BASEPRI, r1
 80091e6:	617b      	str	r3, [r7, #20]
 80091e8:	4816      	ldr	r0, [pc, #88]	; (8009244 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80091ea:	f7ff fdfe 	bl	8008dea <_PreparePacket>
 80091ee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	61fb      	str	r3, [r7, #28]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	61bb      	str	r3, [r7, #24]
 80091fc:	e00b      	b.n	8009216 <SEGGER_SYSVIEW_RecordU32+0x46>
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	b2da      	uxtb	r2, r3
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	1c59      	adds	r1, r3, #1
 8009206:	61f9      	str	r1, [r7, #28]
 8009208:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800920c:	b2d2      	uxtb	r2, r2
 800920e:	701a      	strb	r2, [r3, #0]
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	09db      	lsrs	r3, r3, #7
 8009214:	61bb      	str	r3, [r7, #24]
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	2b7f      	cmp	r3, #127	; 0x7f
 800921a:	d8f0      	bhi.n	80091fe <SEGGER_SYSVIEW_RecordU32+0x2e>
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	1c5a      	adds	r2, r3, #1
 8009220:	61fa      	str	r2, [r7, #28]
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	b2d2      	uxtb	r2, r2
 8009226:	701a      	strb	r2, [r3, #0]
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	68f9      	ldr	r1, [r7, #12]
 8009230:	6938      	ldr	r0, [r7, #16]
 8009232:	f7ff fec9 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f383 8811 	msr	BASEPRI, r3
}
 800923c:	bf00      	nop
 800923e:	3720      	adds	r7, #32
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	20013ab8 	.word	0x20013ab8

08009248 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8009248:	b580      	push	{r7, lr}
 800924a:	b08c      	sub	sp, #48	; 0x30
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009254:	f3ef 8311 	mrs	r3, BASEPRI
 8009258:	f04f 0120 	mov.w	r1, #32
 800925c:	f381 8811 	msr	BASEPRI, r1
 8009260:	61fb      	str	r3, [r7, #28]
 8009262:	4825      	ldr	r0, [pc, #148]	; (80092f8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8009264:	f7ff fdc1 	bl	8008dea <_PreparePacket>
 8009268:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	62bb      	str	r3, [r7, #40]	; 0x28
 8009276:	e00b      	b.n	8009290 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8009278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927a:	b2da      	uxtb	r2, r3
 800927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927e:	1c59      	adds	r1, r3, #1
 8009280:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009282:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009286:	b2d2      	uxtb	r2, r2
 8009288:	701a      	strb	r2, [r3, #0]
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	09db      	lsrs	r3, r3, #7
 800928e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009292:	2b7f      	cmp	r3, #127	; 0x7f
 8009294:	d8f0      	bhi.n	8009278 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8009296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009298:	1c5a      	adds	r2, r3, #1
 800929a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800929c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800929e:	b2d2      	uxtb	r2, r2
 80092a0:	701a      	strb	r2, [r3, #0]
 80092a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	623b      	str	r3, [r7, #32]
 80092ae:	e00b      	b.n	80092c8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	1c59      	adds	r1, r3, #1
 80092b8:	6279      	str	r1, [r7, #36]	; 0x24
 80092ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80092be:	b2d2      	uxtb	r2, r2
 80092c0:	701a      	strb	r2, [r3, #0]
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	09db      	lsrs	r3, r3, #7
 80092c6:	623b      	str	r3, [r7, #32]
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	2b7f      	cmp	r3, #127	; 0x7f
 80092cc:	d8f0      	bhi.n	80092b0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	627a      	str	r2, [r7, #36]	; 0x24
 80092d4:	6a3a      	ldr	r2, [r7, #32]
 80092d6:	b2d2      	uxtb	r2, r2
 80092d8:	701a      	strb	r2, [r3, #0]
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	6979      	ldr	r1, [r7, #20]
 80092e2:	69b8      	ldr	r0, [r7, #24]
 80092e4:	f7ff fe70 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	f383 8811 	msr	BASEPRI, r3
}
 80092ee:	bf00      	nop
 80092f0:	3730      	adds	r7, #48	; 0x30
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20013ab8 	.word	0x20013ab8

080092fc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08e      	sub	sp, #56	; 0x38
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800930a:	f3ef 8311 	mrs	r3, BASEPRI
 800930e:	f04f 0120 	mov.w	r1, #32
 8009312:	f381 8811 	msr	BASEPRI, r1
 8009316:	61fb      	str	r3, [r7, #28]
 8009318:	4832      	ldr	r0, [pc, #200]	; (80093e4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800931a:	f7ff fd66 	bl	8008dea <_PreparePacket>
 800931e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	637b      	str	r3, [r7, #52]	; 0x34
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	633b      	str	r3, [r7, #48]	; 0x30
 800932c:	e00b      	b.n	8009346 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800932e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009330:	b2da      	uxtb	r2, r3
 8009332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009334:	1c59      	adds	r1, r3, #1
 8009336:	6379      	str	r1, [r7, #52]	; 0x34
 8009338:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800933c:	b2d2      	uxtb	r2, r2
 800933e:	701a      	strb	r2, [r3, #0]
 8009340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009342:	09db      	lsrs	r3, r3, #7
 8009344:	633b      	str	r3, [r7, #48]	; 0x30
 8009346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009348:	2b7f      	cmp	r3, #127	; 0x7f
 800934a:	d8f0      	bhi.n	800932e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800934c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934e:	1c5a      	adds	r2, r3, #1
 8009350:	637a      	str	r2, [r7, #52]	; 0x34
 8009352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009354:	b2d2      	uxtb	r2, r2
 8009356:	701a      	strb	r2, [r3, #0]
 8009358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800935a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	62bb      	str	r3, [r7, #40]	; 0x28
 8009364:	e00b      	b.n	800937e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	b2da      	uxtb	r2, r3
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	1c59      	adds	r1, r3, #1
 800936e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009374:	b2d2      	uxtb	r2, r2
 8009376:	701a      	strb	r2, [r3, #0]
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	09db      	lsrs	r3, r3, #7
 800937c:	62bb      	str	r3, [r7, #40]	; 0x28
 800937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009380:	2b7f      	cmp	r3, #127	; 0x7f
 8009382:	d8f0      	bhi.n	8009366 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8009384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009386:	1c5a      	adds	r2, r3, #1
 8009388:	62fa      	str	r2, [r7, #44]	; 0x2c
 800938a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800938c:	b2d2      	uxtb	r2, r2
 800938e:	701a      	strb	r2, [r3, #0]
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	627b      	str	r3, [r7, #36]	; 0x24
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	623b      	str	r3, [r7, #32]
 800939c:	e00b      	b.n	80093b6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800939e:	6a3b      	ldr	r3, [r7, #32]
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	1c59      	adds	r1, r3, #1
 80093a6:	6279      	str	r1, [r7, #36]	; 0x24
 80093a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80093ac:	b2d2      	uxtb	r2, r2
 80093ae:	701a      	strb	r2, [r3, #0]
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	09db      	lsrs	r3, r3, #7
 80093b4:	623b      	str	r3, [r7, #32]
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	2b7f      	cmp	r3, #127	; 0x7f
 80093ba:	d8f0      	bhi.n	800939e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	627a      	str	r2, [r7, #36]	; 0x24
 80093c2:	6a3a      	ldr	r2, [r7, #32]
 80093c4:	b2d2      	uxtb	r2, r2
 80093c6:	701a      	strb	r2, [r3, #0]
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	6979      	ldr	r1, [r7, #20]
 80093d0:	69b8      	ldr	r0, [r7, #24]
 80093d2:	f7ff fdf9 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	f383 8811 	msr	BASEPRI, r3
}
 80093dc:	bf00      	nop
 80093de:	3738      	adds	r7, #56	; 0x38
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	20013ab8 	.word	0x20013ab8

080093e8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b090      	sub	sp, #64	; 0x40
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80093f6:	f3ef 8311 	mrs	r3, BASEPRI
 80093fa:	f04f 0120 	mov.w	r1, #32
 80093fe:	f381 8811 	msr	BASEPRI, r1
 8009402:	61fb      	str	r3, [r7, #28]
 8009404:	4840      	ldr	r0, [pc, #256]	; (8009508 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8009406:	f7ff fcf0 	bl	8008dea <_PreparePacket>
 800940a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	63bb      	str	r3, [r7, #56]	; 0x38
 8009418:	e00b      	b.n	8009432 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	b2da      	uxtb	r2, r3
 800941e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009420:	1c59      	adds	r1, r3, #1
 8009422:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009424:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009428:	b2d2      	uxtb	r2, r2
 800942a:	701a      	strb	r2, [r3, #0]
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	09db      	lsrs	r3, r3, #7
 8009430:	63bb      	str	r3, [r7, #56]	; 0x38
 8009432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009434:	2b7f      	cmp	r3, #127	; 0x7f
 8009436:	d8f0      	bhi.n	800941a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8009438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800943a:	1c5a      	adds	r2, r3, #1
 800943c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800943e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009440:	b2d2      	uxtb	r2, r2
 8009442:	701a      	strb	r2, [r3, #0]
 8009444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009446:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	637b      	str	r3, [r7, #52]	; 0x34
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	633b      	str	r3, [r7, #48]	; 0x30
 8009450:	e00b      	b.n	800946a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8009452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009454:	b2da      	uxtb	r2, r3
 8009456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009458:	1c59      	adds	r1, r3, #1
 800945a:	6379      	str	r1, [r7, #52]	; 0x34
 800945c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009460:	b2d2      	uxtb	r2, r2
 8009462:	701a      	strb	r2, [r3, #0]
 8009464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009466:	09db      	lsrs	r3, r3, #7
 8009468:	633b      	str	r3, [r7, #48]	; 0x30
 800946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946c:	2b7f      	cmp	r3, #127	; 0x7f
 800946e:	d8f0      	bhi.n	8009452 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8009470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	637a      	str	r2, [r7, #52]	; 0x34
 8009476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009478:	b2d2      	uxtb	r2, r2
 800947a:	701a      	strb	r2, [r3, #0]
 800947c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800947e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	62bb      	str	r3, [r7, #40]	; 0x28
 8009488:	e00b      	b.n	80094a2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800948a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948c:	b2da      	uxtb	r2, r3
 800948e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009490:	1c59      	adds	r1, r3, #1
 8009492:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009494:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009498:	b2d2      	uxtb	r2, r2
 800949a:	701a      	strb	r2, [r3, #0]
 800949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949e:	09db      	lsrs	r3, r3, #7
 80094a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80094a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a4:	2b7f      	cmp	r3, #127	; 0x7f
 80094a6:	d8f0      	bhi.n	800948a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80094a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094b0:	b2d2      	uxtb	r2, r2
 80094b2:	701a      	strb	r2, [r3, #0]
 80094b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	627b      	str	r3, [r7, #36]	; 0x24
 80094bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094be:	623b      	str	r3, [r7, #32]
 80094c0:	e00b      	b.n	80094da <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	1c59      	adds	r1, r3, #1
 80094ca:	6279      	str	r1, [r7, #36]	; 0x24
 80094cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094d0:	b2d2      	uxtb	r2, r2
 80094d2:	701a      	strb	r2, [r3, #0]
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	09db      	lsrs	r3, r3, #7
 80094d8:	623b      	str	r3, [r7, #32]
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	2b7f      	cmp	r3, #127	; 0x7f
 80094de:	d8f0      	bhi.n	80094c2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80094e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	627a      	str	r2, [r7, #36]	; 0x24
 80094e6:	6a3a      	ldr	r2, [r7, #32]
 80094e8:	b2d2      	uxtb	r2, r2
 80094ea:	701a      	strb	r2, [r3, #0]
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	6979      	ldr	r1, [r7, #20]
 80094f4:	69b8      	ldr	r0, [r7, #24]
 80094f6:	f7ff fd67 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	f383 8811 	msr	BASEPRI, r3
}
 8009500:	bf00      	nop
 8009502:	3740      	adds	r7, #64	; 0x40
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	20013ab8 	.word	0x20013ab8

0800950c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800950c:	b580      	push	{r7, lr}
 800950e:	b08c      	sub	sp, #48	; 0x30
 8009510:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8009512:	4b58      	ldr	r3, [pc, #352]	; (8009674 <SEGGER_SYSVIEW_Start+0x168>)
 8009514:	2201      	movs	r2, #1
 8009516:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009518:	f3ef 8311 	mrs	r3, BASEPRI
 800951c:	f04f 0120 	mov.w	r1, #32
 8009520:	f381 8811 	msr	BASEPRI, r1
 8009524:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8009526:	4b53      	ldr	r3, [pc, #332]	; (8009674 <SEGGER_SYSVIEW_Start+0x168>)
 8009528:	785b      	ldrb	r3, [r3, #1]
 800952a:	220a      	movs	r2, #10
 800952c:	4952      	ldr	r1, [pc, #328]	; (8009678 <SEGGER_SYSVIEW_Start+0x16c>)
 800952e:	4618      	mov	r0, r3
 8009530:	f7f6 fe6e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800953a:	200a      	movs	r0, #10
 800953c:	f7ff fe2a 	bl	8009194 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009540:	f3ef 8311 	mrs	r3, BASEPRI
 8009544:	f04f 0120 	mov.w	r1, #32
 8009548:	f381 8811 	msr	BASEPRI, r1
 800954c:	60bb      	str	r3, [r7, #8]
 800954e:	484b      	ldr	r0, [pc, #300]	; (800967c <SEGGER_SYSVIEW_Start+0x170>)
 8009550:	f7ff fc4b 	bl	8008dea <_PreparePacket>
 8009554:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800955e:	4b45      	ldr	r3, [pc, #276]	; (8009674 <SEGGER_SYSVIEW_Start+0x168>)
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	62bb      	str	r3, [r7, #40]	; 0x28
 8009564:	e00b      	b.n	800957e <SEGGER_SYSVIEW_Start+0x72>
 8009566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009568:	b2da      	uxtb	r2, r3
 800956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956c:	1c59      	adds	r1, r3, #1
 800956e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009570:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009574:	b2d2      	uxtb	r2, r2
 8009576:	701a      	strb	r2, [r3, #0]
 8009578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957a:	09db      	lsrs	r3, r3, #7
 800957c:	62bb      	str	r3, [r7, #40]	; 0x28
 800957e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009580:	2b7f      	cmp	r3, #127	; 0x7f
 8009582:	d8f0      	bhi.n	8009566 <SEGGER_SYSVIEW_Start+0x5a>
 8009584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	62fa      	str	r2, [r7, #44]	; 0x2c
 800958a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800958c:	b2d2      	uxtb	r2, r2
 800958e:	701a      	strb	r2, [r3, #0]
 8009590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009592:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	627b      	str	r3, [r7, #36]	; 0x24
 8009598:	4b36      	ldr	r3, [pc, #216]	; (8009674 <SEGGER_SYSVIEW_Start+0x168>)
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	623b      	str	r3, [r7, #32]
 800959e:	e00b      	b.n	80095b8 <SEGGER_SYSVIEW_Start+0xac>
 80095a0:	6a3b      	ldr	r3, [r7, #32]
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	1c59      	adds	r1, r3, #1
 80095a8:	6279      	str	r1, [r7, #36]	; 0x24
 80095aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80095ae:	b2d2      	uxtb	r2, r2
 80095b0:	701a      	strb	r2, [r3, #0]
 80095b2:	6a3b      	ldr	r3, [r7, #32]
 80095b4:	09db      	lsrs	r3, r3, #7
 80095b6:	623b      	str	r3, [r7, #32]
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	2b7f      	cmp	r3, #127	; 0x7f
 80095bc:	d8f0      	bhi.n	80095a0 <SEGGER_SYSVIEW_Start+0x94>
 80095be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c0:	1c5a      	adds	r2, r3, #1
 80095c2:	627a      	str	r2, [r7, #36]	; 0x24
 80095c4:	6a3a      	ldr	r2, [r7, #32]
 80095c6:	b2d2      	uxtb	r2, r2
 80095c8:	701a      	strb	r2, [r3, #0]
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	61fb      	str	r3, [r7, #28]
 80095d2:	4b28      	ldr	r3, [pc, #160]	; (8009674 <SEGGER_SYSVIEW_Start+0x168>)
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	61bb      	str	r3, [r7, #24]
 80095d8:	e00b      	b.n	80095f2 <SEGGER_SYSVIEW_Start+0xe6>
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	1c59      	adds	r1, r3, #1
 80095e2:	61f9      	str	r1, [r7, #28]
 80095e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80095e8:	b2d2      	uxtb	r2, r2
 80095ea:	701a      	strb	r2, [r3, #0]
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	09db      	lsrs	r3, r3, #7
 80095f0:	61bb      	str	r3, [r7, #24]
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	2b7f      	cmp	r3, #127	; 0x7f
 80095f6:	d8f0      	bhi.n	80095da <SEGGER_SYSVIEW_Start+0xce>
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	61fa      	str	r2, [r7, #28]
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	b2d2      	uxtb	r2, r2
 8009602:	701a      	strb	r2, [r3, #0]
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	617b      	str	r3, [r7, #20]
 800960c:	2300      	movs	r3, #0
 800960e:	613b      	str	r3, [r7, #16]
 8009610:	e00b      	b.n	800962a <SEGGER_SYSVIEW_Start+0x11e>
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	b2da      	uxtb	r2, r3
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	1c59      	adds	r1, r3, #1
 800961a:	6179      	str	r1, [r7, #20]
 800961c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009620:	b2d2      	uxtb	r2, r2
 8009622:	701a      	strb	r2, [r3, #0]
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	09db      	lsrs	r3, r3, #7
 8009628:	613b      	str	r3, [r7, #16]
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	2b7f      	cmp	r3, #127	; 0x7f
 800962e:	d8f0      	bhi.n	8009612 <SEGGER_SYSVIEW_Start+0x106>
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	1c5a      	adds	r2, r3, #1
 8009634:	617a      	str	r2, [r7, #20]
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	b2d2      	uxtb	r2, r2
 800963a:	701a      	strb	r2, [r3, #0]
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009640:	2218      	movs	r2, #24
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff fcbf 	bl	8008fc8 <_SendPacket>
      RECORD_END();
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009650:	4b08      	ldr	r3, [pc, #32]	; (8009674 <SEGGER_SYSVIEW_Start+0x168>)
 8009652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8009658:	4b06      	ldr	r3, [pc, #24]	; (8009674 <SEGGER_SYSVIEW_Start+0x168>)
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800965e:	f000 f9c7 	bl	80099f0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009662:	f000 f9b1 	bl	80099c8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8009666:	f000 fbff 	bl	8009e68 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800966a:	bf00      	nop
 800966c:	3730      	adds	r7, #48	; 0x30
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20013a88 	.word	0x20013a88
 8009678:	0800cb3c 	.word	0x0800cb3c
 800967c:	20013ab8 	.word	0x20013ab8

08009680 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009686:	f3ef 8311 	mrs	r3, BASEPRI
 800968a:	f04f 0120 	mov.w	r1, #32
 800968e:	f381 8811 	msr	BASEPRI, r1
 8009692:	607b      	str	r3, [r7, #4]
 8009694:	480b      	ldr	r0, [pc, #44]	; (80096c4 <SEGGER_SYSVIEW_Stop+0x44>)
 8009696:	f7ff fba8 	bl	8008dea <_PreparePacket>
 800969a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800969c:	4b0a      	ldr	r3, [pc, #40]	; (80096c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d007      	beq.n	80096b4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80096a4:	220b      	movs	r2, #11
 80096a6:	6839      	ldr	r1, [r7, #0]
 80096a8:	6838      	ldr	r0, [r7, #0]
 80096aa:	f7ff fc8d 	bl	8008fc8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80096ae:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <SEGGER_SYSVIEW_Stop+0x48>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f383 8811 	msr	BASEPRI, r3
}
 80096ba:	bf00      	nop
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	20013ab8 	.word	0x20013ab8
 80096c8:	20013a88 	.word	0x20013a88

080096cc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b08c      	sub	sp, #48	; 0x30
 80096d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80096d2:	f3ef 8311 	mrs	r3, BASEPRI
 80096d6:	f04f 0120 	mov.w	r1, #32
 80096da:	f381 8811 	msr	BASEPRI, r1
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	4845      	ldr	r0, [pc, #276]	; (80097f8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80096e2:	f7ff fb82 	bl	8008dea <_PreparePacket>
 80096e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096f0:	4b42      	ldr	r3, [pc, #264]	; (80097fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80096f6:	e00b      	b.n	8009710 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80096f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fe:	1c59      	adds	r1, r3, #1
 8009700:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009702:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009706:	b2d2      	uxtb	r2, r2
 8009708:	701a      	strb	r2, [r3, #0]
 800970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970c:	09db      	lsrs	r3, r3, #7
 800970e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009712:	2b7f      	cmp	r3, #127	; 0x7f
 8009714:	d8f0      	bhi.n	80096f8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8009716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009718:	1c5a      	adds	r2, r3, #1
 800971a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800971c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800971e:	b2d2      	uxtb	r2, r2
 8009720:	701a      	strb	r2, [r3, #0]
 8009722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009724:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	627b      	str	r3, [r7, #36]	; 0x24
 800972a:	4b34      	ldr	r3, [pc, #208]	; (80097fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	623b      	str	r3, [r7, #32]
 8009730:	e00b      	b.n	800974a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	b2da      	uxtb	r2, r3
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	1c59      	adds	r1, r3, #1
 800973a:	6279      	str	r1, [r7, #36]	; 0x24
 800973c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009740:	b2d2      	uxtb	r2, r2
 8009742:	701a      	strb	r2, [r3, #0]
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	09db      	lsrs	r3, r3, #7
 8009748:	623b      	str	r3, [r7, #32]
 800974a:	6a3b      	ldr	r3, [r7, #32]
 800974c:	2b7f      	cmp	r3, #127	; 0x7f
 800974e:	d8f0      	bhi.n	8009732 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	1c5a      	adds	r2, r3, #1
 8009754:	627a      	str	r2, [r7, #36]	; 0x24
 8009756:	6a3a      	ldr	r2, [r7, #32]
 8009758:	b2d2      	uxtb	r2, r2
 800975a:	701a      	strb	r2, [r3, #0]
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	61fb      	str	r3, [r7, #28]
 8009764:	4b25      	ldr	r3, [pc, #148]	; (80097fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	61bb      	str	r3, [r7, #24]
 800976a:	e00b      	b.n	8009784 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	b2da      	uxtb	r2, r3
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	1c59      	adds	r1, r3, #1
 8009774:	61f9      	str	r1, [r7, #28]
 8009776:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800977a:	b2d2      	uxtb	r2, r2
 800977c:	701a      	strb	r2, [r3, #0]
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	09db      	lsrs	r3, r3, #7
 8009782:	61bb      	str	r3, [r7, #24]
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	2b7f      	cmp	r3, #127	; 0x7f
 8009788:	d8f0      	bhi.n	800976c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	1c5a      	adds	r2, r3, #1
 800978e:	61fa      	str	r2, [r7, #28]
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	b2d2      	uxtb	r2, r2
 8009794:	701a      	strb	r2, [r3, #0]
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	2300      	movs	r3, #0
 80097a0:	613b      	str	r3, [r7, #16]
 80097a2:	e00b      	b.n	80097bc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	1c59      	adds	r1, r3, #1
 80097ac:	6179      	str	r1, [r7, #20]
 80097ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80097b2:	b2d2      	uxtb	r2, r2
 80097b4:	701a      	strb	r2, [r3, #0]
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	09db      	lsrs	r3, r3, #7
 80097ba:	613b      	str	r3, [r7, #16]
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	2b7f      	cmp	r3, #127	; 0x7f
 80097c0:	d8f0      	bhi.n	80097a4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	1c5a      	adds	r2, r3, #1
 80097c6:	617a      	str	r2, [r7, #20]
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	b2d2      	uxtb	r2, r2
 80097cc:	701a      	strb	r2, [r3, #0]
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80097d2:	2218      	movs	r2, #24
 80097d4:	6879      	ldr	r1, [r7, #4]
 80097d6:	68b8      	ldr	r0, [r7, #8]
 80097d8:	f7ff fbf6 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80097e2:	4b06      	ldr	r3, [pc, #24]	; (80097fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80097e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80097ea:	4b04      	ldr	r3, [pc, #16]	; (80097fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	4798      	blx	r3
  }
}
 80097f0:	bf00      	nop
 80097f2:	3730      	adds	r7, #48	; 0x30
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	20013ab8 	.word	0x20013ab8
 80097fc:	20013a88 	.word	0x20013a88

08009800 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8009800:	b580      	push	{r7, lr}
 8009802:	b092      	sub	sp, #72	; 0x48
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8009808:	f3ef 8311 	mrs	r3, BASEPRI
 800980c:	f04f 0120 	mov.w	r1, #32
 8009810:	f381 8811 	msr	BASEPRI, r1
 8009814:	617b      	str	r3, [r7, #20]
 8009816:	486a      	ldr	r0, [pc, #424]	; (80099c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8009818:	f7ff fae7 	bl	8008dea <_PreparePacket>
 800981c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	647b      	str	r3, [r7, #68]	; 0x44
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	4b66      	ldr	r3, [pc, #408]	; (80099c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	643b      	str	r3, [r7, #64]	; 0x40
 8009832:	e00b      	b.n	800984c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8009834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009836:	b2da      	uxtb	r2, r3
 8009838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800983a:	1c59      	adds	r1, r3, #1
 800983c:	6479      	str	r1, [r7, #68]	; 0x44
 800983e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009842:	b2d2      	uxtb	r2, r2
 8009844:	701a      	strb	r2, [r3, #0]
 8009846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009848:	09db      	lsrs	r3, r3, #7
 800984a:	643b      	str	r3, [r7, #64]	; 0x40
 800984c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800984e:	2b7f      	cmp	r3, #127	; 0x7f
 8009850:	d8f0      	bhi.n	8009834 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8009852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009854:	1c5a      	adds	r2, r3, #1
 8009856:	647a      	str	r2, [r7, #68]	; 0x44
 8009858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800985a:	b2d2      	uxtb	r2, r2
 800985c:	701a      	strb	r2, [r3, #0]
 800985e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009860:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	63bb      	str	r3, [r7, #56]	; 0x38
 800986c:	e00b      	b.n	8009886 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800986e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009870:	b2da      	uxtb	r2, r3
 8009872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009874:	1c59      	adds	r1, r3, #1
 8009876:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009878:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800987c:	b2d2      	uxtb	r2, r2
 800987e:	701a      	strb	r2, [r3, #0]
 8009880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009882:	09db      	lsrs	r3, r3, #7
 8009884:	63bb      	str	r3, [r7, #56]	; 0x38
 8009886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009888:	2b7f      	cmp	r3, #127	; 0x7f
 800988a:	d8f0      	bhi.n	800986e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800988c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800988e:	1c5a      	adds	r2, r3, #1
 8009890:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009894:	b2d2      	uxtb	r2, r2
 8009896:	701a      	strb	r2, [r3, #0]
 8009898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800989a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	2220      	movs	r2, #32
 80098a2:	4619      	mov	r1, r3
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f7ff fa53 	bl	8008d50 <_EncodeStr>
 80098aa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80098ac:	2209      	movs	r2, #9
 80098ae:	68f9      	ldr	r1, [r7, #12]
 80098b0:	6938      	ldr	r0, [r7, #16]
 80098b2:	f7ff fb89 	bl	8008fc8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	637b      	str	r3, [r7, #52]	; 0x34
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	4b40      	ldr	r3, [pc, #256]	; (80099c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	633b      	str	r3, [r7, #48]	; 0x30
 80098ca:	e00b      	b.n	80098e4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80098cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d2:	1c59      	adds	r1, r3, #1
 80098d4:	6379      	str	r1, [r7, #52]	; 0x34
 80098d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80098da:	b2d2      	uxtb	r2, r2
 80098dc:	701a      	strb	r2, [r3, #0]
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	09db      	lsrs	r3, r3, #7
 80098e2:	633b      	str	r3, [r7, #48]	; 0x30
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	2b7f      	cmp	r3, #127	; 0x7f
 80098e8:	d8f0      	bhi.n	80098cc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80098ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ec:	1c5a      	adds	r2, r3, #1
 80098ee:	637a      	str	r2, [r7, #52]	; 0x34
 80098f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098f2:	b2d2      	uxtb	r2, r2
 80098f4:	701a      	strb	r2, [r3, #0]
 80098f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	62bb      	str	r3, [r7, #40]	; 0x28
 8009904:	e00b      	b.n	800991e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8009906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009908:	b2da      	uxtb	r2, r3
 800990a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990c:	1c59      	adds	r1, r3, #1
 800990e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009910:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009914:	b2d2      	uxtb	r2, r2
 8009916:	701a      	strb	r2, [r3, #0]
 8009918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991a:	09db      	lsrs	r3, r3, #7
 800991c:	62bb      	str	r3, [r7, #40]	; 0x28
 800991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009920:	2b7f      	cmp	r3, #127	; 0x7f
 8009922:	d8f0      	bhi.n	8009906 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8009924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009926:	1c5a      	adds	r2, r3, #1
 8009928:	62fa      	str	r2, [r7, #44]	; 0x2c
 800992a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800992c:	b2d2      	uxtb	r2, r2
 800992e:	701a      	strb	r2, [r3, #0]
 8009930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009932:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	627b      	str	r3, [r7, #36]	; 0x24
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	623b      	str	r3, [r7, #32]
 800993e:	e00b      	b.n	8009958 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	b2da      	uxtb	r2, r3
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	1c59      	adds	r1, r3, #1
 8009948:	6279      	str	r1, [r7, #36]	; 0x24
 800994a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	701a      	strb	r2, [r3, #0]
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	09db      	lsrs	r3, r3, #7
 8009956:	623b      	str	r3, [r7, #32]
 8009958:	6a3b      	ldr	r3, [r7, #32]
 800995a:	2b7f      	cmp	r3, #127	; 0x7f
 800995c:	d8f0      	bhi.n	8009940 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	1c5a      	adds	r2, r3, #1
 8009962:	627a      	str	r2, [r7, #36]	; 0x24
 8009964:	6a3a      	ldr	r2, [r7, #32]
 8009966:	b2d2      	uxtb	r2, r2
 8009968:	701a      	strb	r2, [r3, #0]
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	61fb      	str	r3, [r7, #28]
 8009972:	2300      	movs	r3, #0
 8009974:	61bb      	str	r3, [r7, #24]
 8009976:	e00b      	b.n	8009990 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	b2da      	uxtb	r2, r3
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	1c59      	adds	r1, r3, #1
 8009980:	61f9      	str	r1, [r7, #28]
 8009982:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009986:	b2d2      	uxtb	r2, r2
 8009988:	701a      	strb	r2, [r3, #0]
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	09db      	lsrs	r3, r3, #7
 800998e:	61bb      	str	r3, [r7, #24]
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	2b7f      	cmp	r3, #127	; 0x7f
 8009994:	d8f0      	bhi.n	8009978 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	1c5a      	adds	r2, r3, #1
 800999a:	61fa      	str	r2, [r7, #28]
 800999c:	69ba      	ldr	r2, [r7, #24]
 800999e:	b2d2      	uxtb	r2, r2
 80099a0:	701a      	strb	r2, [r3, #0]
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80099a6:	2215      	movs	r2, #21
 80099a8:	68f9      	ldr	r1, [r7, #12]
 80099aa:	6938      	ldr	r0, [r7, #16]
 80099ac:	f7ff fb0c 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	f383 8811 	msr	BASEPRI, r3
}
 80099b6:	bf00      	nop
 80099b8:	3748      	adds	r7, #72	; 0x48
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20013ab8 	.word	0x20013ab8
 80099c4:	20013a88 	.word	0x20013a88

080099c8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80099c8:	b580      	push	{r7, lr}
 80099ca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80099cc:	4b07      	ldr	r3, [pc, #28]	; (80099ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80099ce:	6a1b      	ldr	r3, [r3, #32]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d008      	beq.n	80099e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80099d4:	4b05      	ldr	r3, [pc, #20]	; (80099ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80099d6:	6a1b      	ldr	r3, [r3, #32]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80099de:	4b03      	ldr	r3, [pc, #12]	; (80099ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	4798      	blx	r3
  }
}
 80099e6:	bf00      	nop
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	20013a88 	.word	0x20013a88

080099f0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80099f0:	b590      	push	{r4, r7, lr}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80099f6:	4b15      	ldr	r3, [pc, #84]	; (8009a4c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d01a      	beq.n	8009a34 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80099fe:	4b13      	ldr	r3, [pc, #76]	; (8009a4c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d015      	beq.n	8009a34 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8009a08:	4b10      	ldr	r3, [pc, #64]	; (8009a4c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4798      	blx	r3
 8009a10:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009a14:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8009a16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a1a:	f04f 0200 	mov.w	r2, #0
 8009a1e:	f04f 0300 	mov.w	r3, #0
 8009a22:	000a      	movs	r2, r1
 8009a24:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009a26:	4613      	mov	r3, r2
 8009a28:	461a      	mov	r2, r3
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	200d      	movs	r0, #13
 8009a2e:	f7ff fc0b 	bl	8009248 <SEGGER_SYSVIEW_RecordU32x2>
 8009a32:	e006      	b.n	8009a42 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8009a34:	4b06      	ldr	r3, [pc, #24]	; (8009a50 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	200c      	movs	r0, #12
 8009a3c:	f7ff fbc8 	bl	80091d0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd90      	pop	{r4, r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20013a88 	.word	0x20013a88
 8009a50:	e0001004 	.word	0xe0001004

08009a54 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8009a5e:	f04f 0120 	mov.w	r1, #32
 8009a62:	f381 8811 	msr	BASEPRI, r1
 8009a66:	60fb      	str	r3, [r7, #12]
 8009a68:	4819      	ldr	r0, [pc, #100]	; (8009ad0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8009a6a:	f7ff f9be 	bl	8008dea <_PreparePacket>
 8009a6e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8009a74:	4b17      	ldr	r3, [pc, #92]	; (8009ad4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	617b      	str	r3, [r7, #20]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	613b      	str	r3, [r7, #16]
 8009a86:	e00b      	b.n	8009aa0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	1c59      	adds	r1, r3, #1
 8009a90:	6179      	str	r1, [r7, #20]
 8009a92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a96:	b2d2      	uxtb	r2, r2
 8009a98:	701a      	strb	r2, [r3, #0]
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	09db      	lsrs	r3, r3, #7
 8009a9e:	613b      	str	r3, [r7, #16]
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8009aa4:	d8f0      	bhi.n	8009a88 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	1c5a      	adds	r2, r3, #1
 8009aaa:	617a      	str	r2, [r7, #20]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	b2d2      	uxtb	r2, r2
 8009ab0:	701a      	strb	r2, [r3, #0]
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	6879      	ldr	r1, [r7, #4]
 8009aba:	68b8      	ldr	r0, [r7, #8]
 8009abc:	f7ff fa84 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f383 8811 	msr	BASEPRI, r3
}
 8009ac6:	bf00      	nop
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	20013ab8 	.word	0x20013ab8
 8009ad4:	e000ed04 	.word	0xe000ed04

08009ad8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009ade:	f3ef 8311 	mrs	r3, BASEPRI
 8009ae2:	f04f 0120 	mov.w	r1, #32
 8009ae6:	f381 8811 	msr	BASEPRI, r1
 8009aea:	607b      	str	r3, [r7, #4]
 8009aec:	4807      	ldr	r0, [pc, #28]	; (8009b0c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8009aee:	f7ff f97c 	bl	8008dea <_PreparePacket>
 8009af2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8009af4:	2203      	movs	r2, #3
 8009af6:	6839      	ldr	r1, [r7, #0]
 8009af8:	6838      	ldr	r0, [r7, #0]
 8009afa:	f7ff fa65 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f383 8811 	msr	BASEPRI, r3
}
 8009b04:	bf00      	nop
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20013ab8 	.word	0x20013ab8

08009b10 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009b16:	f3ef 8311 	mrs	r3, BASEPRI
 8009b1a:	f04f 0120 	mov.w	r1, #32
 8009b1e:	f381 8811 	msr	BASEPRI, r1
 8009b22:	607b      	str	r3, [r7, #4]
 8009b24:	4807      	ldr	r0, [pc, #28]	; (8009b44 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8009b26:	f7ff f960 	bl	8008dea <_PreparePacket>
 8009b2a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8009b2c:	2212      	movs	r2, #18
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6838      	ldr	r0, [r7, #0]
 8009b32:	f7ff fa49 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f383 8811 	msr	BASEPRI, r3
}
 8009b3c:	bf00      	nop
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	20013ab8 	.word	0x20013ab8

08009b48 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009b4e:	f3ef 8311 	mrs	r3, BASEPRI
 8009b52:	f04f 0120 	mov.w	r1, #32
 8009b56:	f381 8811 	msr	BASEPRI, r1
 8009b5a:	607b      	str	r3, [r7, #4]
 8009b5c:	4807      	ldr	r0, [pc, #28]	; (8009b7c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8009b5e:	f7ff f944 	bl	8008dea <_PreparePacket>
 8009b62:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8009b64:	2211      	movs	r2, #17
 8009b66:	6839      	ldr	r1, [r7, #0]
 8009b68:	6838      	ldr	r0, [r7, #0]
 8009b6a:	f7ff fa2d 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f383 8811 	msr	BASEPRI, r3
}
 8009b74:	bf00      	nop
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	20013ab8 	.word	0x20013ab8

08009b80 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b088      	sub	sp, #32
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009b88:	f3ef 8311 	mrs	r3, BASEPRI
 8009b8c:	f04f 0120 	mov.w	r1, #32
 8009b90:	f381 8811 	msr	BASEPRI, r1
 8009b94:	617b      	str	r3, [r7, #20]
 8009b96:	4819      	ldr	r0, [pc, #100]	; (8009bfc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8009b98:	f7ff f927 	bl	8008dea <_PreparePacket>
 8009b9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009ba2:	4b17      	ldr	r3, [pc, #92]	; (8009c00 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	61fb      	str	r3, [r7, #28]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	61bb      	str	r3, [r7, #24]
 8009bb4:	e00b      	b.n	8009bce <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	1c59      	adds	r1, r3, #1
 8009bbe:	61f9      	str	r1, [r7, #28]
 8009bc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009bc4:	b2d2      	uxtb	r2, r2
 8009bc6:	701a      	strb	r2, [r3, #0]
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	09db      	lsrs	r3, r3, #7
 8009bcc:	61bb      	str	r3, [r7, #24]
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8009bd2:	d8f0      	bhi.n	8009bb6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	1c5a      	adds	r2, r3, #1
 8009bd8:	61fa      	str	r2, [r7, #28]
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	b2d2      	uxtb	r2, r2
 8009bde:	701a      	strb	r2, [r3, #0]
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8009be4:	2208      	movs	r2, #8
 8009be6:	68f9      	ldr	r1, [r7, #12]
 8009be8:	6938      	ldr	r0, [r7, #16]
 8009bea:	f7ff f9ed 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f383 8811 	msr	BASEPRI, r3
}
 8009bf4:	bf00      	nop
 8009bf6:	3720      	adds	r7, #32
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20013ab8 	.word	0x20013ab8
 8009c00:	20013a88 	.word	0x20013a88

08009c04 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b088      	sub	sp, #32
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009c0c:	f3ef 8311 	mrs	r3, BASEPRI
 8009c10:	f04f 0120 	mov.w	r1, #32
 8009c14:	f381 8811 	msr	BASEPRI, r1
 8009c18:	617b      	str	r3, [r7, #20]
 8009c1a:	4819      	ldr	r0, [pc, #100]	; (8009c80 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8009c1c:	f7ff f8e5 	bl	8008dea <_PreparePacket>
 8009c20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009c26:	4b17      	ldr	r3, [pc, #92]	; (8009c84 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	61fb      	str	r3, [r7, #28]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	61bb      	str	r3, [r7, #24]
 8009c38:	e00b      	b.n	8009c52 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	b2da      	uxtb	r2, r3
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	1c59      	adds	r1, r3, #1
 8009c42:	61f9      	str	r1, [r7, #28]
 8009c44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c48:	b2d2      	uxtb	r2, r2
 8009c4a:	701a      	strb	r2, [r3, #0]
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	09db      	lsrs	r3, r3, #7
 8009c50:	61bb      	str	r3, [r7, #24]
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	2b7f      	cmp	r3, #127	; 0x7f
 8009c56:	d8f0      	bhi.n	8009c3a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	1c5a      	adds	r2, r3, #1
 8009c5c:	61fa      	str	r2, [r7, #28]
 8009c5e:	69ba      	ldr	r2, [r7, #24]
 8009c60:	b2d2      	uxtb	r2, r2
 8009c62:	701a      	strb	r2, [r3, #0]
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8009c68:	2204      	movs	r2, #4
 8009c6a:	68f9      	ldr	r1, [r7, #12]
 8009c6c:	6938      	ldr	r0, [r7, #16]
 8009c6e:	f7ff f9ab 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f383 8811 	msr	BASEPRI, r3
}
 8009c78:	bf00      	nop
 8009c7a:	3720      	adds	r7, #32
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	20013ab8 	.word	0x20013ab8
 8009c84:	20013a88 	.word	0x20013a88

08009c88 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b088      	sub	sp, #32
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009c90:	f3ef 8311 	mrs	r3, BASEPRI
 8009c94:	f04f 0120 	mov.w	r1, #32
 8009c98:	f381 8811 	msr	BASEPRI, r1
 8009c9c:	617b      	str	r3, [r7, #20]
 8009c9e:	4819      	ldr	r0, [pc, #100]	; (8009d04 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8009ca0:	f7ff f8a3 	bl	8008dea <_PreparePacket>
 8009ca4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009caa:	4b17      	ldr	r3, [pc, #92]	; (8009d08 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	61fb      	str	r3, [r7, #28]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	61bb      	str	r3, [r7, #24]
 8009cbc:	e00b      	b.n	8009cd6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	1c59      	adds	r1, r3, #1
 8009cc6:	61f9      	str	r1, [r7, #28]
 8009cc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ccc:	b2d2      	uxtb	r2, r2
 8009cce:	701a      	strb	r2, [r3, #0]
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	09db      	lsrs	r3, r3, #7
 8009cd4:	61bb      	str	r3, [r7, #24]
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8009cda:	d8f0      	bhi.n	8009cbe <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	1c5a      	adds	r2, r3, #1
 8009ce0:	61fa      	str	r2, [r7, #28]
 8009ce2:	69ba      	ldr	r2, [r7, #24]
 8009ce4:	b2d2      	uxtb	r2, r2
 8009ce6:	701a      	strb	r2, [r3, #0]
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8009cec:	2206      	movs	r2, #6
 8009cee:	68f9      	ldr	r1, [r7, #12]
 8009cf0:	6938      	ldr	r0, [r7, #16]
 8009cf2:	f7ff f969 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f383 8811 	msr	BASEPRI, r3
}
 8009cfc:	bf00      	nop
 8009cfe:	3720      	adds	r7, #32
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20013ab8 	.word	0x20013ab8
 8009d08:	20013a88 	.word	0x20013a88

08009d0c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8009d14:	4b04      	ldr	r3, [pc, #16]	; (8009d28 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	1ad3      	subs	r3, r2, r3
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	20013a88 	.word	0x20013a88

08009d2c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08c      	sub	sp, #48	; 0x30
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	4603      	mov	r3, r0
 8009d34:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8009d36:	4b3b      	ldr	r3, [pc, #236]	; (8009e24 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d06d      	beq.n	8009e1a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8009d3e:	4b39      	ldr	r3, [pc, #228]	; (8009e24 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8009d44:	2300      	movs	r3, #0
 8009d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d48:	e008      	b.n	8009d5c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8009d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d007      	beq.n	8009d66 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8009d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d58:	3301      	adds	r3, #1
 8009d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d5c:	79fb      	ldrb	r3, [r7, #7]
 8009d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d3f2      	bcc.n	8009d4a <SEGGER_SYSVIEW_SendModule+0x1e>
 8009d64:	e000      	b.n	8009d68 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8009d66:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8009d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d055      	beq.n	8009e1a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8009d72:	f04f 0120 	mov.w	r1, #32
 8009d76:	f381 8811 	msr	BASEPRI, r1
 8009d7a:	617b      	str	r3, [r7, #20]
 8009d7c:	482a      	ldr	r0, [pc, #168]	; (8009e28 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8009d7e:	f7ff f834 	bl	8008dea <_PreparePacket>
 8009d82:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
 8009d8e:	623b      	str	r3, [r7, #32]
 8009d90:	e00b      	b.n	8009daa <SEGGER_SYSVIEW_SendModule+0x7e>
 8009d92:	6a3b      	ldr	r3, [r7, #32]
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	1c59      	adds	r1, r3, #1
 8009d9a:	6279      	str	r1, [r7, #36]	; 0x24
 8009d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009da0:	b2d2      	uxtb	r2, r2
 8009da2:	701a      	strb	r2, [r3, #0]
 8009da4:	6a3b      	ldr	r3, [r7, #32]
 8009da6:	09db      	lsrs	r3, r3, #7
 8009da8:	623b      	str	r3, [r7, #32]
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	2b7f      	cmp	r3, #127	; 0x7f
 8009dae:	d8f0      	bhi.n	8009d92 <SEGGER_SYSVIEW_SendModule+0x66>
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	627a      	str	r2, [r7, #36]	; 0x24
 8009db6:	6a3a      	ldr	r2, [r7, #32]
 8009db8:	b2d2      	uxtb	r2, r2
 8009dba:	701a      	strb	r2, [r3, #0]
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	61fb      	str	r3, [r7, #28]
 8009dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	61bb      	str	r3, [r7, #24]
 8009dca:	e00b      	b.n	8009de4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	1c59      	adds	r1, r3, #1
 8009dd4:	61f9      	str	r1, [r7, #28]
 8009dd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009dda:	b2d2      	uxtb	r2, r2
 8009ddc:	701a      	strb	r2, [r3, #0]
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	09db      	lsrs	r3, r3, #7
 8009de2:	61bb      	str	r3, [r7, #24]
 8009de4:	69bb      	ldr	r3, [r7, #24]
 8009de6:	2b7f      	cmp	r3, #127	; 0x7f
 8009de8:	d8f0      	bhi.n	8009dcc <SEGGER_SYSVIEW_SendModule+0xa0>
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	1c5a      	adds	r2, r3, #1
 8009dee:	61fa      	str	r2, [r7, #28]
 8009df0:	69ba      	ldr	r2, [r7, #24]
 8009df2:	b2d2      	uxtb	r2, r2
 8009df4:	701a      	strb	r2, [r3, #0]
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2280      	movs	r2, #128	; 0x80
 8009e00:	4619      	mov	r1, r3
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f7fe ffa4 	bl	8008d50 <_EncodeStr>
 8009e08:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8009e0a:	2216      	movs	r2, #22
 8009e0c:	68f9      	ldr	r1, [r7, #12]
 8009e0e:	6938      	ldr	r0, [r7, #16]
 8009e10:	f7ff f8da 	bl	8008fc8 <_SendPacket>
      RECORD_END();
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8009e1a:	bf00      	nop
 8009e1c:	3730      	adds	r7, #48	; 0x30
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	20013ab0 	.word	0x20013ab0
 8009e28:	20013ab8 	.word	0x20013ab8

08009e2c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8009e32:	4b0c      	ldr	r3, [pc, #48]	; (8009e64 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00f      	beq.n	8009e5a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8009e3a:	4b0a      	ldr	r3, [pc, #40]	; (8009e64 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d002      	beq.n	8009e4e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1f2      	bne.n	8009e40 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8009e5a:	bf00      	nop
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	20013ab0 	.word	0x20013ab0

08009e68 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8009e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8009e72:	f04f 0120 	mov.w	r1, #32
 8009e76:	f381 8811 	msr	BASEPRI, r1
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	4817      	ldr	r0, [pc, #92]	; (8009edc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8009e7e:	f7fe ffb4 	bl	8008dea <_PreparePacket>
 8009e82:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	617b      	str	r3, [r7, #20]
 8009e8c:	4b14      	ldr	r3, [pc, #80]	; (8009ee0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	613b      	str	r3, [r7, #16]
 8009e92:	e00b      	b.n	8009eac <SEGGER_SYSVIEW_SendNumModules+0x44>
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	1c59      	adds	r1, r3, #1
 8009e9c:	6179      	str	r1, [r7, #20]
 8009e9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009ea2:	b2d2      	uxtb	r2, r2
 8009ea4:	701a      	strb	r2, [r3, #0]
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	09db      	lsrs	r3, r3, #7
 8009eaa:	613b      	str	r3, [r7, #16]
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	2b7f      	cmp	r3, #127	; 0x7f
 8009eb0:	d8f0      	bhi.n	8009e94 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	617a      	str	r2, [r7, #20]
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	b2d2      	uxtb	r2, r2
 8009ebc:	701a      	strb	r2, [r3, #0]
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8009ec2:	221b      	movs	r2, #27
 8009ec4:	6879      	ldr	r1, [r7, #4]
 8009ec6:	68b8      	ldr	r0, [r7, #8]
 8009ec8:	f7ff f87e 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f383 8811 	msr	BASEPRI, r3
}
 8009ed2:	bf00      	nop
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	20013ab8 	.word	0x20013ab8
 8009ee0:	20013ab4 	.word	0x20013ab4

08009ee4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b08a      	sub	sp, #40	; 0x28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009eec:	f3ef 8311 	mrs	r3, BASEPRI
 8009ef0:	f04f 0120 	mov.w	r1, #32
 8009ef4:	f381 8811 	msr	BASEPRI, r1
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	4827      	ldr	r0, [pc, #156]	; (8009f98 <SEGGER_SYSVIEW_Warn+0xb4>)
 8009efc:	f7fe ff75 	bl	8008dea <_PreparePacket>
 8009f00:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009f02:	2280      	movs	r2, #128	; 0x80
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	6938      	ldr	r0, [r7, #16]
 8009f08:	f7fe ff22 	bl	8008d50 <_EncodeStr>
 8009f0c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	627b      	str	r3, [r7, #36]	; 0x24
 8009f12:	2301      	movs	r3, #1
 8009f14:	623b      	str	r3, [r7, #32]
 8009f16:	e00b      	b.n	8009f30 <SEGGER_SYSVIEW_Warn+0x4c>
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	b2da      	uxtb	r2, r3
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1e:	1c59      	adds	r1, r3, #1
 8009f20:	6279      	str	r1, [r7, #36]	; 0x24
 8009f22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f26:	b2d2      	uxtb	r2, r2
 8009f28:	701a      	strb	r2, [r3, #0]
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	09db      	lsrs	r3, r3, #7
 8009f2e:	623b      	str	r3, [r7, #32]
 8009f30:	6a3b      	ldr	r3, [r7, #32]
 8009f32:	2b7f      	cmp	r3, #127	; 0x7f
 8009f34:	d8f0      	bhi.n	8009f18 <SEGGER_SYSVIEW_Warn+0x34>
 8009f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f38:	1c5a      	adds	r2, r3, #1
 8009f3a:	627a      	str	r2, [r7, #36]	; 0x24
 8009f3c:	6a3a      	ldr	r2, [r7, #32]
 8009f3e:	b2d2      	uxtb	r2, r2
 8009f40:	701a      	strb	r2, [r3, #0]
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	61fb      	str	r3, [r7, #28]
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	61bb      	str	r3, [r7, #24]
 8009f4e:	e00b      	b.n	8009f68 <SEGGER_SYSVIEW_Warn+0x84>
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	1c59      	adds	r1, r3, #1
 8009f58:	61f9      	str	r1, [r7, #28]
 8009f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f5e:	b2d2      	uxtb	r2, r2
 8009f60:	701a      	strb	r2, [r3, #0]
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	09db      	lsrs	r3, r3, #7
 8009f66:	61bb      	str	r3, [r7, #24]
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8009f6c:	d8f0      	bhi.n	8009f50 <SEGGER_SYSVIEW_Warn+0x6c>
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	61fa      	str	r2, [r7, #28]
 8009f74:	69ba      	ldr	r2, [r7, #24]
 8009f76:	b2d2      	uxtb	r2, r2
 8009f78:	701a      	strb	r2, [r3, #0]
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009f7e:	221a      	movs	r2, #26
 8009f80:	68f9      	ldr	r1, [r7, #12]
 8009f82:	6938      	ldr	r0, [r7, #16]
 8009f84:	f7ff f820 	bl	8008fc8 <_SendPacket>
  RECORD_END();
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	f383 8811 	msr	BASEPRI, r3
}
 8009f8e:	bf00      	nop
 8009f90:	3728      	adds	r7, #40	; 0x28
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	20013ab8 	.word	0x20013ab8

08009f9c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	6879      	ldr	r1, [r7, #4]
 8009fae:	2000      	movs	r0, #0
 8009fb0:	f7fe fea8 	bl	8008d04 <SEGGER_RTT_Write>
  return len;
 8009fb4:	683b      	ldr	r3, [r7, #0]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <__cvt>:
 8009fbe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc2:	ec55 4b10 	vmov	r4, r5, d0
 8009fc6:	2d00      	cmp	r5, #0
 8009fc8:	460e      	mov	r6, r1
 8009fca:	4619      	mov	r1, r3
 8009fcc:	462b      	mov	r3, r5
 8009fce:	bfbb      	ittet	lt
 8009fd0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009fd4:	461d      	movlt	r5, r3
 8009fd6:	2300      	movge	r3, #0
 8009fd8:	232d      	movlt	r3, #45	; 0x2d
 8009fda:	700b      	strb	r3, [r1, #0]
 8009fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fde:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009fe2:	4691      	mov	r9, r2
 8009fe4:	f023 0820 	bic.w	r8, r3, #32
 8009fe8:	bfbc      	itt	lt
 8009fea:	4622      	movlt	r2, r4
 8009fec:	4614      	movlt	r4, r2
 8009fee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ff2:	d005      	beq.n	800a000 <__cvt+0x42>
 8009ff4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009ff8:	d100      	bne.n	8009ffc <__cvt+0x3e>
 8009ffa:	3601      	adds	r6, #1
 8009ffc:	2102      	movs	r1, #2
 8009ffe:	e000      	b.n	800a002 <__cvt+0x44>
 800a000:	2103      	movs	r1, #3
 800a002:	ab03      	add	r3, sp, #12
 800a004:	9301      	str	r3, [sp, #4]
 800a006:	ab02      	add	r3, sp, #8
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	ec45 4b10 	vmov	d0, r4, r5
 800a00e:	4653      	mov	r3, sl
 800a010:	4632      	mov	r2, r6
 800a012:	f000 fe55 	bl	800acc0 <_dtoa_r>
 800a016:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a01a:	4607      	mov	r7, r0
 800a01c:	d102      	bne.n	800a024 <__cvt+0x66>
 800a01e:	f019 0f01 	tst.w	r9, #1
 800a022:	d022      	beq.n	800a06a <__cvt+0xac>
 800a024:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a028:	eb07 0906 	add.w	r9, r7, r6
 800a02c:	d110      	bne.n	800a050 <__cvt+0x92>
 800a02e:	783b      	ldrb	r3, [r7, #0]
 800a030:	2b30      	cmp	r3, #48	; 0x30
 800a032:	d10a      	bne.n	800a04a <__cvt+0x8c>
 800a034:	2200      	movs	r2, #0
 800a036:	2300      	movs	r3, #0
 800a038:	4620      	mov	r0, r4
 800a03a:	4629      	mov	r1, r5
 800a03c:	f7f6 fdb4 	bl	8000ba8 <__aeabi_dcmpeq>
 800a040:	b918      	cbnz	r0, 800a04a <__cvt+0x8c>
 800a042:	f1c6 0601 	rsb	r6, r6, #1
 800a046:	f8ca 6000 	str.w	r6, [sl]
 800a04a:	f8da 3000 	ldr.w	r3, [sl]
 800a04e:	4499      	add	r9, r3
 800a050:	2200      	movs	r2, #0
 800a052:	2300      	movs	r3, #0
 800a054:	4620      	mov	r0, r4
 800a056:	4629      	mov	r1, r5
 800a058:	f7f6 fda6 	bl	8000ba8 <__aeabi_dcmpeq>
 800a05c:	b108      	cbz	r0, 800a062 <__cvt+0xa4>
 800a05e:	f8cd 900c 	str.w	r9, [sp, #12]
 800a062:	2230      	movs	r2, #48	; 0x30
 800a064:	9b03      	ldr	r3, [sp, #12]
 800a066:	454b      	cmp	r3, r9
 800a068:	d307      	bcc.n	800a07a <__cvt+0xbc>
 800a06a:	9b03      	ldr	r3, [sp, #12]
 800a06c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a06e:	1bdb      	subs	r3, r3, r7
 800a070:	4638      	mov	r0, r7
 800a072:	6013      	str	r3, [r2, #0]
 800a074:	b004      	add	sp, #16
 800a076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a07a:	1c59      	adds	r1, r3, #1
 800a07c:	9103      	str	r1, [sp, #12]
 800a07e:	701a      	strb	r2, [r3, #0]
 800a080:	e7f0      	b.n	800a064 <__cvt+0xa6>

0800a082 <__exponent>:
 800a082:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a084:	4603      	mov	r3, r0
 800a086:	2900      	cmp	r1, #0
 800a088:	bfb8      	it	lt
 800a08a:	4249      	neglt	r1, r1
 800a08c:	f803 2b02 	strb.w	r2, [r3], #2
 800a090:	bfb4      	ite	lt
 800a092:	222d      	movlt	r2, #45	; 0x2d
 800a094:	222b      	movge	r2, #43	; 0x2b
 800a096:	2909      	cmp	r1, #9
 800a098:	7042      	strb	r2, [r0, #1]
 800a09a:	dd2a      	ble.n	800a0f2 <__exponent+0x70>
 800a09c:	f10d 0207 	add.w	r2, sp, #7
 800a0a0:	4617      	mov	r7, r2
 800a0a2:	260a      	movs	r6, #10
 800a0a4:	4694      	mov	ip, r2
 800a0a6:	fb91 f5f6 	sdiv	r5, r1, r6
 800a0aa:	fb06 1415 	mls	r4, r6, r5, r1
 800a0ae:	3430      	adds	r4, #48	; 0x30
 800a0b0:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a0b4:	460c      	mov	r4, r1
 800a0b6:	2c63      	cmp	r4, #99	; 0x63
 800a0b8:	f102 32ff 	add.w	r2, r2, #4294967295
 800a0bc:	4629      	mov	r1, r5
 800a0be:	dcf1      	bgt.n	800a0a4 <__exponent+0x22>
 800a0c0:	3130      	adds	r1, #48	; 0x30
 800a0c2:	f1ac 0402 	sub.w	r4, ip, #2
 800a0c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a0ca:	1c41      	adds	r1, r0, #1
 800a0cc:	4622      	mov	r2, r4
 800a0ce:	42ba      	cmp	r2, r7
 800a0d0:	d30a      	bcc.n	800a0e8 <__exponent+0x66>
 800a0d2:	f10d 0209 	add.w	r2, sp, #9
 800a0d6:	eba2 020c 	sub.w	r2, r2, ip
 800a0da:	42bc      	cmp	r4, r7
 800a0dc:	bf88      	it	hi
 800a0de:	2200      	movhi	r2, #0
 800a0e0:	4413      	add	r3, r2
 800a0e2:	1a18      	subs	r0, r3, r0
 800a0e4:	b003      	add	sp, #12
 800a0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a0ec:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a0f0:	e7ed      	b.n	800a0ce <__exponent+0x4c>
 800a0f2:	2330      	movs	r3, #48	; 0x30
 800a0f4:	3130      	adds	r1, #48	; 0x30
 800a0f6:	7083      	strb	r3, [r0, #2]
 800a0f8:	70c1      	strb	r1, [r0, #3]
 800a0fa:	1d03      	adds	r3, r0, #4
 800a0fc:	e7f1      	b.n	800a0e2 <__exponent+0x60>
	...

0800a100 <_printf_float>:
 800a100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	ed2d 8b02 	vpush	{d8}
 800a108:	b08d      	sub	sp, #52	; 0x34
 800a10a:	460c      	mov	r4, r1
 800a10c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a110:	4616      	mov	r6, r2
 800a112:	461f      	mov	r7, r3
 800a114:	4605      	mov	r5, r0
 800a116:	f000 fcd7 	bl	800aac8 <_localeconv_r>
 800a11a:	f8d0 a000 	ldr.w	sl, [r0]
 800a11e:	4650      	mov	r0, sl
 800a120:	f7f6 f916 	bl	8000350 <strlen>
 800a124:	2300      	movs	r3, #0
 800a126:	930a      	str	r3, [sp, #40]	; 0x28
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	9305      	str	r3, [sp, #20]
 800a12c:	f8d8 3000 	ldr.w	r3, [r8]
 800a130:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a134:	3307      	adds	r3, #7
 800a136:	f023 0307 	bic.w	r3, r3, #7
 800a13a:	f103 0208 	add.w	r2, r3, #8
 800a13e:	f8c8 2000 	str.w	r2, [r8]
 800a142:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a146:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a14a:	9307      	str	r3, [sp, #28]
 800a14c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a150:	ee08 0a10 	vmov	s16, r0
 800a154:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a158:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a15c:	4b9e      	ldr	r3, [pc, #632]	; (800a3d8 <_printf_float+0x2d8>)
 800a15e:	f04f 32ff 	mov.w	r2, #4294967295
 800a162:	f7f6 fd53 	bl	8000c0c <__aeabi_dcmpun>
 800a166:	bb88      	cbnz	r0, 800a1cc <_printf_float+0xcc>
 800a168:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a16c:	4b9a      	ldr	r3, [pc, #616]	; (800a3d8 <_printf_float+0x2d8>)
 800a16e:	f04f 32ff 	mov.w	r2, #4294967295
 800a172:	f7f6 fd2d 	bl	8000bd0 <__aeabi_dcmple>
 800a176:	bb48      	cbnz	r0, 800a1cc <_printf_float+0xcc>
 800a178:	2200      	movs	r2, #0
 800a17a:	2300      	movs	r3, #0
 800a17c:	4640      	mov	r0, r8
 800a17e:	4649      	mov	r1, r9
 800a180:	f7f6 fd1c 	bl	8000bbc <__aeabi_dcmplt>
 800a184:	b110      	cbz	r0, 800a18c <_printf_float+0x8c>
 800a186:	232d      	movs	r3, #45	; 0x2d
 800a188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a18c:	4a93      	ldr	r2, [pc, #588]	; (800a3dc <_printf_float+0x2dc>)
 800a18e:	4b94      	ldr	r3, [pc, #592]	; (800a3e0 <_printf_float+0x2e0>)
 800a190:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a194:	bf94      	ite	ls
 800a196:	4690      	movls	r8, r2
 800a198:	4698      	movhi	r8, r3
 800a19a:	2303      	movs	r3, #3
 800a19c:	6123      	str	r3, [r4, #16]
 800a19e:	9b05      	ldr	r3, [sp, #20]
 800a1a0:	f023 0304 	bic.w	r3, r3, #4
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	f04f 0900 	mov.w	r9, #0
 800a1aa:	9700      	str	r7, [sp, #0]
 800a1ac:	4633      	mov	r3, r6
 800a1ae:	aa0b      	add	r2, sp, #44	; 0x2c
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f000 f9da 	bl	800a56c <_printf_common>
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	f040 8090 	bne.w	800a2de <_printf_float+0x1de>
 800a1be:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c2:	b00d      	add	sp, #52	; 0x34
 800a1c4:	ecbd 8b02 	vpop	{d8}
 800a1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1cc:	4642      	mov	r2, r8
 800a1ce:	464b      	mov	r3, r9
 800a1d0:	4640      	mov	r0, r8
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	f7f6 fd1a 	bl	8000c0c <__aeabi_dcmpun>
 800a1d8:	b140      	cbz	r0, 800a1ec <_printf_float+0xec>
 800a1da:	464b      	mov	r3, r9
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	bfbc      	itt	lt
 800a1e0:	232d      	movlt	r3, #45	; 0x2d
 800a1e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a1e6:	4a7f      	ldr	r2, [pc, #508]	; (800a3e4 <_printf_float+0x2e4>)
 800a1e8:	4b7f      	ldr	r3, [pc, #508]	; (800a3e8 <_printf_float+0x2e8>)
 800a1ea:	e7d1      	b.n	800a190 <_printf_float+0x90>
 800a1ec:	6863      	ldr	r3, [r4, #4]
 800a1ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a1f2:	9206      	str	r2, [sp, #24]
 800a1f4:	1c5a      	adds	r2, r3, #1
 800a1f6:	d13f      	bne.n	800a278 <_printf_float+0x178>
 800a1f8:	2306      	movs	r3, #6
 800a1fa:	6063      	str	r3, [r4, #4]
 800a1fc:	9b05      	ldr	r3, [sp, #20]
 800a1fe:	6861      	ldr	r1, [r4, #4]
 800a200:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a204:	2300      	movs	r3, #0
 800a206:	9303      	str	r3, [sp, #12]
 800a208:	ab0a      	add	r3, sp, #40	; 0x28
 800a20a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a20e:	ab09      	add	r3, sp, #36	; 0x24
 800a210:	ec49 8b10 	vmov	d0, r8, r9
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	6022      	str	r2, [r4, #0]
 800a218:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a21c:	4628      	mov	r0, r5
 800a21e:	f7ff fece 	bl	8009fbe <__cvt>
 800a222:	9b06      	ldr	r3, [sp, #24]
 800a224:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a226:	2b47      	cmp	r3, #71	; 0x47
 800a228:	4680      	mov	r8, r0
 800a22a:	d108      	bne.n	800a23e <_printf_float+0x13e>
 800a22c:	1cc8      	adds	r0, r1, #3
 800a22e:	db02      	blt.n	800a236 <_printf_float+0x136>
 800a230:	6863      	ldr	r3, [r4, #4]
 800a232:	4299      	cmp	r1, r3
 800a234:	dd41      	ble.n	800a2ba <_printf_float+0x1ba>
 800a236:	f1ab 0302 	sub.w	r3, fp, #2
 800a23a:	fa5f fb83 	uxtb.w	fp, r3
 800a23e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a242:	d820      	bhi.n	800a286 <_printf_float+0x186>
 800a244:	3901      	subs	r1, #1
 800a246:	465a      	mov	r2, fp
 800a248:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a24c:	9109      	str	r1, [sp, #36]	; 0x24
 800a24e:	f7ff ff18 	bl	800a082 <__exponent>
 800a252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a254:	1813      	adds	r3, r2, r0
 800a256:	2a01      	cmp	r2, #1
 800a258:	4681      	mov	r9, r0
 800a25a:	6123      	str	r3, [r4, #16]
 800a25c:	dc02      	bgt.n	800a264 <_printf_float+0x164>
 800a25e:	6822      	ldr	r2, [r4, #0]
 800a260:	07d2      	lsls	r2, r2, #31
 800a262:	d501      	bpl.n	800a268 <_printf_float+0x168>
 800a264:	3301      	adds	r3, #1
 800a266:	6123      	str	r3, [r4, #16]
 800a268:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d09c      	beq.n	800a1aa <_printf_float+0xaa>
 800a270:	232d      	movs	r3, #45	; 0x2d
 800a272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a276:	e798      	b.n	800a1aa <_printf_float+0xaa>
 800a278:	9a06      	ldr	r2, [sp, #24]
 800a27a:	2a47      	cmp	r2, #71	; 0x47
 800a27c:	d1be      	bne.n	800a1fc <_printf_float+0xfc>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1bc      	bne.n	800a1fc <_printf_float+0xfc>
 800a282:	2301      	movs	r3, #1
 800a284:	e7b9      	b.n	800a1fa <_printf_float+0xfa>
 800a286:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a28a:	d118      	bne.n	800a2be <_printf_float+0x1be>
 800a28c:	2900      	cmp	r1, #0
 800a28e:	6863      	ldr	r3, [r4, #4]
 800a290:	dd0b      	ble.n	800a2aa <_printf_float+0x1aa>
 800a292:	6121      	str	r1, [r4, #16]
 800a294:	b913      	cbnz	r3, 800a29c <_printf_float+0x19c>
 800a296:	6822      	ldr	r2, [r4, #0]
 800a298:	07d0      	lsls	r0, r2, #31
 800a29a:	d502      	bpl.n	800a2a2 <_printf_float+0x1a2>
 800a29c:	3301      	adds	r3, #1
 800a29e:	440b      	add	r3, r1
 800a2a0:	6123      	str	r3, [r4, #16]
 800a2a2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a2a4:	f04f 0900 	mov.w	r9, #0
 800a2a8:	e7de      	b.n	800a268 <_printf_float+0x168>
 800a2aa:	b913      	cbnz	r3, 800a2b2 <_printf_float+0x1b2>
 800a2ac:	6822      	ldr	r2, [r4, #0]
 800a2ae:	07d2      	lsls	r2, r2, #31
 800a2b0:	d501      	bpl.n	800a2b6 <_printf_float+0x1b6>
 800a2b2:	3302      	adds	r3, #2
 800a2b4:	e7f4      	b.n	800a2a0 <_printf_float+0x1a0>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e7f2      	b.n	800a2a0 <_printf_float+0x1a0>
 800a2ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c0:	4299      	cmp	r1, r3
 800a2c2:	db05      	blt.n	800a2d0 <_printf_float+0x1d0>
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	6121      	str	r1, [r4, #16]
 800a2c8:	07d8      	lsls	r0, r3, #31
 800a2ca:	d5ea      	bpl.n	800a2a2 <_printf_float+0x1a2>
 800a2cc:	1c4b      	adds	r3, r1, #1
 800a2ce:	e7e7      	b.n	800a2a0 <_printf_float+0x1a0>
 800a2d0:	2900      	cmp	r1, #0
 800a2d2:	bfd4      	ite	le
 800a2d4:	f1c1 0202 	rsble	r2, r1, #2
 800a2d8:	2201      	movgt	r2, #1
 800a2da:	4413      	add	r3, r2
 800a2dc:	e7e0      	b.n	800a2a0 <_printf_float+0x1a0>
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	055a      	lsls	r2, r3, #21
 800a2e2:	d407      	bmi.n	800a2f4 <_printf_float+0x1f4>
 800a2e4:	6923      	ldr	r3, [r4, #16]
 800a2e6:	4642      	mov	r2, r8
 800a2e8:	4631      	mov	r1, r6
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	47b8      	blx	r7
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	d12c      	bne.n	800a34c <_printf_float+0x24c>
 800a2f2:	e764      	b.n	800a1be <_printf_float+0xbe>
 800a2f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2f8:	f240 80e0 	bls.w	800a4bc <_printf_float+0x3bc>
 800a2fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a300:	2200      	movs	r2, #0
 800a302:	2300      	movs	r3, #0
 800a304:	f7f6 fc50 	bl	8000ba8 <__aeabi_dcmpeq>
 800a308:	2800      	cmp	r0, #0
 800a30a:	d034      	beq.n	800a376 <_printf_float+0x276>
 800a30c:	4a37      	ldr	r2, [pc, #220]	; (800a3ec <_printf_float+0x2ec>)
 800a30e:	2301      	movs	r3, #1
 800a310:	4631      	mov	r1, r6
 800a312:	4628      	mov	r0, r5
 800a314:	47b8      	blx	r7
 800a316:	3001      	adds	r0, #1
 800a318:	f43f af51 	beq.w	800a1be <_printf_float+0xbe>
 800a31c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a320:	429a      	cmp	r2, r3
 800a322:	db02      	blt.n	800a32a <_printf_float+0x22a>
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	07d8      	lsls	r0, r3, #31
 800a328:	d510      	bpl.n	800a34c <_printf_float+0x24c>
 800a32a:	ee18 3a10 	vmov	r3, s16
 800a32e:	4652      	mov	r2, sl
 800a330:	4631      	mov	r1, r6
 800a332:	4628      	mov	r0, r5
 800a334:	47b8      	blx	r7
 800a336:	3001      	adds	r0, #1
 800a338:	f43f af41 	beq.w	800a1be <_printf_float+0xbe>
 800a33c:	f04f 0800 	mov.w	r8, #0
 800a340:	f104 091a 	add.w	r9, r4, #26
 800a344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a346:	3b01      	subs	r3, #1
 800a348:	4543      	cmp	r3, r8
 800a34a:	dc09      	bgt.n	800a360 <_printf_float+0x260>
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	079b      	lsls	r3, r3, #30
 800a350:	f100 8107 	bmi.w	800a562 <_printf_float+0x462>
 800a354:	68e0      	ldr	r0, [r4, #12]
 800a356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a358:	4298      	cmp	r0, r3
 800a35a:	bfb8      	it	lt
 800a35c:	4618      	movlt	r0, r3
 800a35e:	e730      	b.n	800a1c2 <_printf_float+0xc2>
 800a360:	2301      	movs	r3, #1
 800a362:	464a      	mov	r2, r9
 800a364:	4631      	mov	r1, r6
 800a366:	4628      	mov	r0, r5
 800a368:	47b8      	blx	r7
 800a36a:	3001      	adds	r0, #1
 800a36c:	f43f af27 	beq.w	800a1be <_printf_float+0xbe>
 800a370:	f108 0801 	add.w	r8, r8, #1
 800a374:	e7e6      	b.n	800a344 <_printf_float+0x244>
 800a376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a378:	2b00      	cmp	r3, #0
 800a37a:	dc39      	bgt.n	800a3f0 <_printf_float+0x2f0>
 800a37c:	4a1b      	ldr	r2, [pc, #108]	; (800a3ec <_printf_float+0x2ec>)
 800a37e:	2301      	movs	r3, #1
 800a380:	4631      	mov	r1, r6
 800a382:	4628      	mov	r0, r5
 800a384:	47b8      	blx	r7
 800a386:	3001      	adds	r0, #1
 800a388:	f43f af19 	beq.w	800a1be <_printf_float+0xbe>
 800a38c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a390:	4313      	orrs	r3, r2
 800a392:	d102      	bne.n	800a39a <_printf_float+0x29a>
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	07d9      	lsls	r1, r3, #31
 800a398:	d5d8      	bpl.n	800a34c <_printf_float+0x24c>
 800a39a:	ee18 3a10 	vmov	r3, s16
 800a39e:	4652      	mov	r2, sl
 800a3a0:	4631      	mov	r1, r6
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	47b8      	blx	r7
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	f43f af09 	beq.w	800a1be <_printf_float+0xbe>
 800a3ac:	f04f 0900 	mov.w	r9, #0
 800a3b0:	f104 0a1a 	add.w	sl, r4, #26
 800a3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b6:	425b      	negs	r3, r3
 800a3b8:	454b      	cmp	r3, r9
 800a3ba:	dc01      	bgt.n	800a3c0 <_printf_float+0x2c0>
 800a3bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3be:	e792      	b.n	800a2e6 <_printf_float+0x1e6>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	4652      	mov	r2, sl
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	47b8      	blx	r7
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	f43f aef7 	beq.w	800a1be <_printf_float+0xbe>
 800a3d0:	f109 0901 	add.w	r9, r9, #1
 800a3d4:	e7ee      	b.n	800a3b4 <_printf_float+0x2b4>
 800a3d6:	bf00      	nop
 800a3d8:	7fefffff 	.word	0x7fefffff
 800a3dc:	0800cc47 	.word	0x0800cc47
 800a3e0:	0800cc4b 	.word	0x0800cc4b
 800a3e4:	0800cc4f 	.word	0x0800cc4f
 800a3e8:	0800cc53 	.word	0x0800cc53
 800a3ec:	0800cc57 	.word	0x0800cc57
 800a3f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	bfa8      	it	ge
 800a3f8:	461a      	movge	r2, r3
 800a3fa:	2a00      	cmp	r2, #0
 800a3fc:	4691      	mov	r9, r2
 800a3fe:	dc37      	bgt.n	800a470 <_printf_float+0x370>
 800a400:	f04f 0b00 	mov.w	fp, #0
 800a404:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a408:	f104 021a 	add.w	r2, r4, #26
 800a40c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a40e:	9305      	str	r3, [sp, #20]
 800a410:	eba3 0309 	sub.w	r3, r3, r9
 800a414:	455b      	cmp	r3, fp
 800a416:	dc33      	bgt.n	800a480 <_printf_float+0x380>
 800a418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a41c:	429a      	cmp	r2, r3
 800a41e:	db3b      	blt.n	800a498 <_printf_float+0x398>
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	07da      	lsls	r2, r3, #31
 800a424:	d438      	bmi.n	800a498 <_printf_float+0x398>
 800a426:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a42a:	eba2 0903 	sub.w	r9, r2, r3
 800a42e:	9b05      	ldr	r3, [sp, #20]
 800a430:	1ad2      	subs	r2, r2, r3
 800a432:	4591      	cmp	r9, r2
 800a434:	bfa8      	it	ge
 800a436:	4691      	movge	r9, r2
 800a438:	f1b9 0f00 	cmp.w	r9, #0
 800a43c:	dc35      	bgt.n	800a4aa <_printf_float+0x3aa>
 800a43e:	f04f 0800 	mov.w	r8, #0
 800a442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a446:	f104 0a1a 	add.w	sl, r4, #26
 800a44a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a44e:	1a9b      	subs	r3, r3, r2
 800a450:	eba3 0309 	sub.w	r3, r3, r9
 800a454:	4543      	cmp	r3, r8
 800a456:	f77f af79 	ble.w	800a34c <_printf_float+0x24c>
 800a45a:	2301      	movs	r3, #1
 800a45c:	4652      	mov	r2, sl
 800a45e:	4631      	mov	r1, r6
 800a460:	4628      	mov	r0, r5
 800a462:	47b8      	blx	r7
 800a464:	3001      	adds	r0, #1
 800a466:	f43f aeaa 	beq.w	800a1be <_printf_float+0xbe>
 800a46a:	f108 0801 	add.w	r8, r8, #1
 800a46e:	e7ec      	b.n	800a44a <_printf_float+0x34a>
 800a470:	4613      	mov	r3, r2
 800a472:	4631      	mov	r1, r6
 800a474:	4642      	mov	r2, r8
 800a476:	4628      	mov	r0, r5
 800a478:	47b8      	blx	r7
 800a47a:	3001      	adds	r0, #1
 800a47c:	d1c0      	bne.n	800a400 <_printf_float+0x300>
 800a47e:	e69e      	b.n	800a1be <_printf_float+0xbe>
 800a480:	2301      	movs	r3, #1
 800a482:	4631      	mov	r1, r6
 800a484:	4628      	mov	r0, r5
 800a486:	9205      	str	r2, [sp, #20]
 800a488:	47b8      	blx	r7
 800a48a:	3001      	adds	r0, #1
 800a48c:	f43f ae97 	beq.w	800a1be <_printf_float+0xbe>
 800a490:	9a05      	ldr	r2, [sp, #20]
 800a492:	f10b 0b01 	add.w	fp, fp, #1
 800a496:	e7b9      	b.n	800a40c <_printf_float+0x30c>
 800a498:	ee18 3a10 	vmov	r3, s16
 800a49c:	4652      	mov	r2, sl
 800a49e:	4631      	mov	r1, r6
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	47b8      	blx	r7
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	d1be      	bne.n	800a426 <_printf_float+0x326>
 800a4a8:	e689      	b.n	800a1be <_printf_float+0xbe>
 800a4aa:	9a05      	ldr	r2, [sp, #20]
 800a4ac:	464b      	mov	r3, r9
 800a4ae:	4442      	add	r2, r8
 800a4b0:	4631      	mov	r1, r6
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	47b8      	blx	r7
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	d1c1      	bne.n	800a43e <_printf_float+0x33e>
 800a4ba:	e680      	b.n	800a1be <_printf_float+0xbe>
 800a4bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4be:	2a01      	cmp	r2, #1
 800a4c0:	dc01      	bgt.n	800a4c6 <_printf_float+0x3c6>
 800a4c2:	07db      	lsls	r3, r3, #31
 800a4c4:	d53a      	bpl.n	800a53c <_printf_float+0x43c>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4642      	mov	r2, r8
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	47b8      	blx	r7
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	f43f ae74 	beq.w	800a1be <_printf_float+0xbe>
 800a4d6:	ee18 3a10 	vmov	r3, s16
 800a4da:	4652      	mov	r2, sl
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4628      	mov	r0, r5
 800a4e0:	47b8      	blx	r7
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	f43f ae6b 	beq.w	800a1be <_printf_float+0xbe>
 800a4e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a4f4:	f7f6 fb58 	bl	8000ba8 <__aeabi_dcmpeq>
 800a4f8:	b9d8      	cbnz	r0, 800a532 <_printf_float+0x432>
 800a4fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a4fe:	f108 0201 	add.w	r2, r8, #1
 800a502:	4631      	mov	r1, r6
 800a504:	4628      	mov	r0, r5
 800a506:	47b8      	blx	r7
 800a508:	3001      	adds	r0, #1
 800a50a:	d10e      	bne.n	800a52a <_printf_float+0x42a>
 800a50c:	e657      	b.n	800a1be <_printf_float+0xbe>
 800a50e:	2301      	movs	r3, #1
 800a510:	4652      	mov	r2, sl
 800a512:	4631      	mov	r1, r6
 800a514:	4628      	mov	r0, r5
 800a516:	47b8      	blx	r7
 800a518:	3001      	adds	r0, #1
 800a51a:	f43f ae50 	beq.w	800a1be <_printf_float+0xbe>
 800a51e:	f108 0801 	add.w	r8, r8, #1
 800a522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a524:	3b01      	subs	r3, #1
 800a526:	4543      	cmp	r3, r8
 800a528:	dcf1      	bgt.n	800a50e <_printf_float+0x40e>
 800a52a:	464b      	mov	r3, r9
 800a52c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a530:	e6da      	b.n	800a2e8 <_printf_float+0x1e8>
 800a532:	f04f 0800 	mov.w	r8, #0
 800a536:	f104 0a1a 	add.w	sl, r4, #26
 800a53a:	e7f2      	b.n	800a522 <_printf_float+0x422>
 800a53c:	2301      	movs	r3, #1
 800a53e:	4642      	mov	r2, r8
 800a540:	e7df      	b.n	800a502 <_printf_float+0x402>
 800a542:	2301      	movs	r3, #1
 800a544:	464a      	mov	r2, r9
 800a546:	4631      	mov	r1, r6
 800a548:	4628      	mov	r0, r5
 800a54a:	47b8      	blx	r7
 800a54c:	3001      	adds	r0, #1
 800a54e:	f43f ae36 	beq.w	800a1be <_printf_float+0xbe>
 800a552:	f108 0801 	add.w	r8, r8, #1
 800a556:	68e3      	ldr	r3, [r4, #12]
 800a558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a55a:	1a5b      	subs	r3, r3, r1
 800a55c:	4543      	cmp	r3, r8
 800a55e:	dcf0      	bgt.n	800a542 <_printf_float+0x442>
 800a560:	e6f8      	b.n	800a354 <_printf_float+0x254>
 800a562:	f04f 0800 	mov.w	r8, #0
 800a566:	f104 0919 	add.w	r9, r4, #25
 800a56a:	e7f4      	b.n	800a556 <_printf_float+0x456>

0800a56c <_printf_common>:
 800a56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a570:	4616      	mov	r6, r2
 800a572:	4699      	mov	r9, r3
 800a574:	688a      	ldr	r2, [r1, #8]
 800a576:	690b      	ldr	r3, [r1, #16]
 800a578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a57c:	4293      	cmp	r3, r2
 800a57e:	bfb8      	it	lt
 800a580:	4613      	movlt	r3, r2
 800a582:	6033      	str	r3, [r6, #0]
 800a584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a588:	4607      	mov	r7, r0
 800a58a:	460c      	mov	r4, r1
 800a58c:	b10a      	cbz	r2, 800a592 <_printf_common+0x26>
 800a58e:	3301      	adds	r3, #1
 800a590:	6033      	str	r3, [r6, #0]
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	0699      	lsls	r1, r3, #26
 800a596:	bf42      	ittt	mi
 800a598:	6833      	ldrmi	r3, [r6, #0]
 800a59a:	3302      	addmi	r3, #2
 800a59c:	6033      	strmi	r3, [r6, #0]
 800a59e:	6825      	ldr	r5, [r4, #0]
 800a5a0:	f015 0506 	ands.w	r5, r5, #6
 800a5a4:	d106      	bne.n	800a5b4 <_printf_common+0x48>
 800a5a6:	f104 0a19 	add.w	sl, r4, #25
 800a5aa:	68e3      	ldr	r3, [r4, #12]
 800a5ac:	6832      	ldr	r2, [r6, #0]
 800a5ae:	1a9b      	subs	r3, r3, r2
 800a5b0:	42ab      	cmp	r3, r5
 800a5b2:	dc26      	bgt.n	800a602 <_printf_common+0x96>
 800a5b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5b8:	1e13      	subs	r3, r2, #0
 800a5ba:	6822      	ldr	r2, [r4, #0]
 800a5bc:	bf18      	it	ne
 800a5be:	2301      	movne	r3, #1
 800a5c0:	0692      	lsls	r2, r2, #26
 800a5c2:	d42b      	bmi.n	800a61c <_printf_common+0xb0>
 800a5c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5c8:	4649      	mov	r1, r9
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	47c0      	blx	r8
 800a5ce:	3001      	adds	r0, #1
 800a5d0:	d01e      	beq.n	800a610 <_printf_common+0xa4>
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	6922      	ldr	r2, [r4, #16]
 800a5d6:	f003 0306 	and.w	r3, r3, #6
 800a5da:	2b04      	cmp	r3, #4
 800a5dc:	bf02      	ittt	eq
 800a5de:	68e5      	ldreq	r5, [r4, #12]
 800a5e0:	6833      	ldreq	r3, [r6, #0]
 800a5e2:	1aed      	subeq	r5, r5, r3
 800a5e4:	68a3      	ldr	r3, [r4, #8]
 800a5e6:	bf0c      	ite	eq
 800a5e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5ec:	2500      	movne	r5, #0
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	bfc4      	itt	gt
 800a5f2:	1a9b      	subgt	r3, r3, r2
 800a5f4:	18ed      	addgt	r5, r5, r3
 800a5f6:	2600      	movs	r6, #0
 800a5f8:	341a      	adds	r4, #26
 800a5fa:	42b5      	cmp	r5, r6
 800a5fc:	d11a      	bne.n	800a634 <_printf_common+0xc8>
 800a5fe:	2000      	movs	r0, #0
 800a600:	e008      	b.n	800a614 <_printf_common+0xa8>
 800a602:	2301      	movs	r3, #1
 800a604:	4652      	mov	r2, sl
 800a606:	4649      	mov	r1, r9
 800a608:	4638      	mov	r0, r7
 800a60a:	47c0      	blx	r8
 800a60c:	3001      	adds	r0, #1
 800a60e:	d103      	bne.n	800a618 <_printf_common+0xac>
 800a610:	f04f 30ff 	mov.w	r0, #4294967295
 800a614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a618:	3501      	adds	r5, #1
 800a61a:	e7c6      	b.n	800a5aa <_printf_common+0x3e>
 800a61c:	18e1      	adds	r1, r4, r3
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	2030      	movs	r0, #48	; 0x30
 800a622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a626:	4422      	add	r2, r4
 800a628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a62c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a630:	3302      	adds	r3, #2
 800a632:	e7c7      	b.n	800a5c4 <_printf_common+0x58>
 800a634:	2301      	movs	r3, #1
 800a636:	4622      	mov	r2, r4
 800a638:	4649      	mov	r1, r9
 800a63a:	4638      	mov	r0, r7
 800a63c:	47c0      	blx	r8
 800a63e:	3001      	adds	r0, #1
 800a640:	d0e6      	beq.n	800a610 <_printf_common+0xa4>
 800a642:	3601      	adds	r6, #1
 800a644:	e7d9      	b.n	800a5fa <_printf_common+0x8e>
	...

0800a648 <_printf_i>:
 800a648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a64c:	7e0f      	ldrb	r7, [r1, #24]
 800a64e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a650:	2f78      	cmp	r7, #120	; 0x78
 800a652:	4691      	mov	r9, r2
 800a654:	4680      	mov	r8, r0
 800a656:	460c      	mov	r4, r1
 800a658:	469a      	mov	sl, r3
 800a65a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a65e:	d807      	bhi.n	800a670 <_printf_i+0x28>
 800a660:	2f62      	cmp	r7, #98	; 0x62
 800a662:	d80a      	bhi.n	800a67a <_printf_i+0x32>
 800a664:	2f00      	cmp	r7, #0
 800a666:	f000 80d4 	beq.w	800a812 <_printf_i+0x1ca>
 800a66a:	2f58      	cmp	r7, #88	; 0x58
 800a66c:	f000 80c0 	beq.w	800a7f0 <_printf_i+0x1a8>
 800a670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a678:	e03a      	b.n	800a6f0 <_printf_i+0xa8>
 800a67a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a67e:	2b15      	cmp	r3, #21
 800a680:	d8f6      	bhi.n	800a670 <_printf_i+0x28>
 800a682:	a101      	add	r1, pc, #4	; (adr r1, 800a688 <_printf_i+0x40>)
 800a684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a688:	0800a6e1 	.word	0x0800a6e1
 800a68c:	0800a6f5 	.word	0x0800a6f5
 800a690:	0800a671 	.word	0x0800a671
 800a694:	0800a671 	.word	0x0800a671
 800a698:	0800a671 	.word	0x0800a671
 800a69c:	0800a671 	.word	0x0800a671
 800a6a0:	0800a6f5 	.word	0x0800a6f5
 800a6a4:	0800a671 	.word	0x0800a671
 800a6a8:	0800a671 	.word	0x0800a671
 800a6ac:	0800a671 	.word	0x0800a671
 800a6b0:	0800a671 	.word	0x0800a671
 800a6b4:	0800a7f9 	.word	0x0800a7f9
 800a6b8:	0800a721 	.word	0x0800a721
 800a6bc:	0800a7b3 	.word	0x0800a7b3
 800a6c0:	0800a671 	.word	0x0800a671
 800a6c4:	0800a671 	.word	0x0800a671
 800a6c8:	0800a81b 	.word	0x0800a81b
 800a6cc:	0800a671 	.word	0x0800a671
 800a6d0:	0800a721 	.word	0x0800a721
 800a6d4:	0800a671 	.word	0x0800a671
 800a6d8:	0800a671 	.word	0x0800a671
 800a6dc:	0800a7bb 	.word	0x0800a7bb
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	1d1a      	adds	r2, r3, #4
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	602a      	str	r2, [r5, #0]
 800a6e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e09f      	b.n	800a834 <_printf_i+0x1ec>
 800a6f4:	6820      	ldr	r0, [r4, #0]
 800a6f6:	682b      	ldr	r3, [r5, #0]
 800a6f8:	0607      	lsls	r7, r0, #24
 800a6fa:	f103 0104 	add.w	r1, r3, #4
 800a6fe:	6029      	str	r1, [r5, #0]
 800a700:	d501      	bpl.n	800a706 <_printf_i+0xbe>
 800a702:	681e      	ldr	r6, [r3, #0]
 800a704:	e003      	b.n	800a70e <_printf_i+0xc6>
 800a706:	0646      	lsls	r6, r0, #25
 800a708:	d5fb      	bpl.n	800a702 <_printf_i+0xba>
 800a70a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a70e:	2e00      	cmp	r6, #0
 800a710:	da03      	bge.n	800a71a <_printf_i+0xd2>
 800a712:	232d      	movs	r3, #45	; 0x2d
 800a714:	4276      	negs	r6, r6
 800a716:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a71a:	485a      	ldr	r0, [pc, #360]	; (800a884 <_printf_i+0x23c>)
 800a71c:	230a      	movs	r3, #10
 800a71e:	e012      	b.n	800a746 <_printf_i+0xfe>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	6820      	ldr	r0, [r4, #0]
 800a724:	1d19      	adds	r1, r3, #4
 800a726:	6029      	str	r1, [r5, #0]
 800a728:	0605      	lsls	r5, r0, #24
 800a72a:	d501      	bpl.n	800a730 <_printf_i+0xe8>
 800a72c:	681e      	ldr	r6, [r3, #0]
 800a72e:	e002      	b.n	800a736 <_printf_i+0xee>
 800a730:	0641      	lsls	r1, r0, #25
 800a732:	d5fb      	bpl.n	800a72c <_printf_i+0xe4>
 800a734:	881e      	ldrh	r6, [r3, #0]
 800a736:	4853      	ldr	r0, [pc, #332]	; (800a884 <_printf_i+0x23c>)
 800a738:	2f6f      	cmp	r7, #111	; 0x6f
 800a73a:	bf0c      	ite	eq
 800a73c:	2308      	moveq	r3, #8
 800a73e:	230a      	movne	r3, #10
 800a740:	2100      	movs	r1, #0
 800a742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a746:	6865      	ldr	r5, [r4, #4]
 800a748:	60a5      	str	r5, [r4, #8]
 800a74a:	2d00      	cmp	r5, #0
 800a74c:	bfa2      	ittt	ge
 800a74e:	6821      	ldrge	r1, [r4, #0]
 800a750:	f021 0104 	bicge.w	r1, r1, #4
 800a754:	6021      	strge	r1, [r4, #0]
 800a756:	b90e      	cbnz	r6, 800a75c <_printf_i+0x114>
 800a758:	2d00      	cmp	r5, #0
 800a75a:	d04b      	beq.n	800a7f4 <_printf_i+0x1ac>
 800a75c:	4615      	mov	r5, r2
 800a75e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a762:	fb03 6711 	mls	r7, r3, r1, r6
 800a766:	5dc7      	ldrb	r7, [r0, r7]
 800a768:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a76c:	4637      	mov	r7, r6
 800a76e:	42bb      	cmp	r3, r7
 800a770:	460e      	mov	r6, r1
 800a772:	d9f4      	bls.n	800a75e <_printf_i+0x116>
 800a774:	2b08      	cmp	r3, #8
 800a776:	d10b      	bne.n	800a790 <_printf_i+0x148>
 800a778:	6823      	ldr	r3, [r4, #0]
 800a77a:	07de      	lsls	r6, r3, #31
 800a77c:	d508      	bpl.n	800a790 <_printf_i+0x148>
 800a77e:	6923      	ldr	r3, [r4, #16]
 800a780:	6861      	ldr	r1, [r4, #4]
 800a782:	4299      	cmp	r1, r3
 800a784:	bfde      	ittt	le
 800a786:	2330      	movle	r3, #48	; 0x30
 800a788:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a78c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a790:	1b52      	subs	r2, r2, r5
 800a792:	6122      	str	r2, [r4, #16]
 800a794:	f8cd a000 	str.w	sl, [sp]
 800a798:	464b      	mov	r3, r9
 800a79a:	aa03      	add	r2, sp, #12
 800a79c:	4621      	mov	r1, r4
 800a79e:	4640      	mov	r0, r8
 800a7a0:	f7ff fee4 	bl	800a56c <_printf_common>
 800a7a4:	3001      	adds	r0, #1
 800a7a6:	d14a      	bne.n	800a83e <_printf_i+0x1f6>
 800a7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ac:	b004      	add	sp, #16
 800a7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	f043 0320 	orr.w	r3, r3, #32
 800a7b8:	6023      	str	r3, [r4, #0]
 800a7ba:	4833      	ldr	r0, [pc, #204]	; (800a888 <_printf_i+0x240>)
 800a7bc:	2778      	movs	r7, #120	; 0x78
 800a7be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	6829      	ldr	r1, [r5, #0]
 800a7c6:	061f      	lsls	r7, r3, #24
 800a7c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7cc:	d402      	bmi.n	800a7d4 <_printf_i+0x18c>
 800a7ce:	065f      	lsls	r7, r3, #25
 800a7d0:	bf48      	it	mi
 800a7d2:	b2b6      	uxthmi	r6, r6
 800a7d4:	07df      	lsls	r7, r3, #31
 800a7d6:	bf48      	it	mi
 800a7d8:	f043 0320 	orrmi.w	r3, r3, #32
 800a7dc:	6029      	str	r1, [r5, #0]
 800a7de:	bf48      	it	mi
 800a7e0:	6023      	strmi	r3, [r4, #0]
 800a7e2:	b91e      	cbnz	r6, 800a7ec <_printf_i+0x1a4>
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	f023 0320 	bic.w	r3, r3, #32
 800a7ea:	6023      	str	r3, [r4, #0]
 800a7ec:	2310      	movs	r3, #16
 800a7ee:	e7a7      	b.n	800a740 <_printf_i+0xf8>
 800a7f0:	4824      	ldr	r0, [pc, #144]	; (800a884 <_printf_i+0x23c>)
 800a7f2:	e7e4      	b.n	800a7be <_printf_i+0x176>
 800a7f4:	4615      	mov	r5, r2
 800a7f6:	e7bd      	b.n	800a774 <_printf_i+0x12c>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	6826      	ldr	r6, [r4, #0]
 800a7fc:	6961      	ldr	r1, [r4, #20]
 800a7fe:	1d18      	adds	r0, r3, #4
 800a800:	6028      	str	r0, [r5, #0]
 800a802:	0635      	lsls	r5, r6, #24
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	d501      	bpl.n	800a80c <_printf_i+0x1c4>
 800a808:	6019      	str	r1, [r3, #0]
 800a80a:	e002      	b.n	800a812 <_printf_i+0x1ca>
 800a80c:	0670      	lsls	r0, r6, #25
 800a80e:	d5fb      	bpl.n	800a808 <_printf_i+0x1c0>
 800a810:	8019      	strh	r1, [r3, #0]
 800a812:	2300      	movs	r3, #0
 800a814:	6123      	str	r3, [r4, #16]
 800a816:	4615      	mov	r5, r2
 800a818:	e7bc      	b.n	800a794 <_printf_i+0x14c>
 800a81a:	682b      	ldr	r3, [r5, #0]
 800a81c:	1d1a      	adds	r2, r3, #4
 800a81e:	602a      	str	r2, [r5, #0]
 800a820:	681d      	ldr	r5, [r3, #0]
 800a822:	6862      	ldr	r2, [r4, #4]
 800a824:	2100      	movs	r1, #0
 800a826:	4628      	mov	r0, r5
 800a828:	f7f5 fd42 	bl	80002b0 <memchr>
 800a82c:	b108      	cbz	r0, 800a832 <_printf_i+0x1ea>
 800a82e:	1b40      	subs	r0, r0, r5
 800a830:	6060      	str	r0, [r4, #4]
 800a832:	6863      	ldr	r3, [r4, #4]
 800a834:	6123      	str	r3, [r4, #16]
 800a836:	2300      	movs	r3, #0
 800a838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a83c:	e7aa      	b.n	800a794 <_printf_i+0x14c>
 800a83e:	6923      	ldr	r3, [r4, #16]
 800a840:	462a      	mov	r2, r5
 800a842:	4649      	mov	r1, r9
 800a844:	4640      	mov	r0, r8
 800a846:	47d0      	blx	sl
 800a848:	3001      	adds	r0, #1
 800a84a:	d0ad      	beq.n	800a7a8 <_printf_i+0x160>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	079b      	lsls	r3, r3, #30
 800a850:	d413      	bmi.n	800a87a <_printf_i+0x232>
 800a852:	68e0      	ldr	r0, [r4, #12]
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	4298      	cmp	r0, r3
 800a858:	bfb8      	it	lt
 800a85a:	4618      	movlt	r0, r3
 800a85c:	e7a6      	b.n	800a7ac <_printf_i+0x164>
 800a85e:	2301      	movs	r3, #1
 800a860:	4632      	mov	r2, r6
 800a862:	4649      	mov	r1, r9
 800a864:	4640      	mov	r0, r8
 800a866:	47d0      	blx	sl
 800a868:	3001      	adds	r0, #1
 800a86a:	d09d      	beq.n	800a7a8 <_printf_i+0x160>
 800a86c:	3501      	adds	r5, #1
 800a86e:	68e3      	ldr	r3, [r4, #12]
 800a870:	9903      	ldr	r1, [sp, #12]
 800a872:	1a5b      	subs	r3, r3, r1
 800a874:	42ab      	cmp	r3, r5
 800a876:	dcf2      	bgt.n	800a85e <_printf_i+0x216>
 800a878:	e7eb      	b.n	800a852 <_printf_i+0x20a>
 800a87a:	2500      	movs	r5, #0
 800a87c:	f104 0619 	add.w	r6, r4, #25
 800a880:	e7f5      	b.n	800a86e <_printf_i+0x226>
 800a882:	bf00      	nop
 800a884:	0800cc59 	.word	0x0800cc59
 800a888:	0800cc6a 	.word	0x0800cc6a

0800a88c <std>:
 800a88c:	2300      	movs	r3, #0
 800a88e:	b510      	push	{r4, lr}
 800a890:	4604      	mov	r4, r0
 800a892:	e9c0 3300 	strd	r3, r3, [r0]
 800a896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a89a:	6083      	str	r3, [r0, #8]
 800a89c:	8181      	strh	r1, [r0, #12]
 800a89e:	6643      	str	r3, [r0, #100]	; 0x64
 800a8a0:	81c2      	strh	r2, [r0, #14]
 800a8a2:	6183      	str	r3, [r0, #24]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	2208      	movs	r2, #8
 800a8a8:	305c      	adds	r0, #92	; 0x5c
 800a8aa:	f000 f904 	bl	800aab6 <memset>
 800a8ae:	4b0d      	ldr	r3, [pc, #52]	; (800a8e4 <std+0x58>)
 800a8b0:	6263      	str	r3, [r4, #36]	; 0x24
 800a8b2:	4b0d      	ldr	r3, [pc, #52]	; (800a8e8 <std+0x5c>)
 800a8b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8b6:	4b0d      	ldr	r3, [pc, #52]	; (800a8ec <std+0x60>)
 800a8b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8ba:	4b0d      	ldr	r3, [pc, #52]	; (800a8f0 <std+0x64>)
 800a8bc:	6323      	str	r3, [r4, #48]	; 0x30
 800a8be:	4b0d      	ldr	r3, [pc, #52]	; (800a8f4 <std+0x68>)
 800a8c0:	6224      	str	r4, [r4, #32]
 800a8c2:	429c      	cmp	r4, r3
 800a8c4:	d006      	beq.n	800a8d4 <std+0x48>
 800a8c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a8ca:	4294      	cmp	r4, r2
 800a8cc:	d002      	beq.n	800a8d4 <std+0x48>
 800a8ce:	33d0      	adds	r3, #208	; 0xd0
 800a8d0:	429c      	cmp	r4, r3
 800a8d2:	d105      	bne.n	800a8e0 <std+0x54>
 800a8d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8dc:	f000 b956 	b.w	800ab8c <__retarget_lock_init_recursive>
 800a8e0:	bd10      	pop	{r4, pc}
 800a8e2:	bf00      	nop
 800a8e4:	0800aa11 	.word	0x0800aa11
 800a8e8:	0800aa33 	.word	0x0800aa33
 800a8ec:	0800aa6b 	.word	0x0800aa6b
 800a8f0:	0800aa8f 	.word	0x0800aa8f
 800a8f4:	20013b9c 	.word	0x20013b9c

0800a8f8 <stdio_exit_handler>:
 800a8f8:	4a02      	ldr	r2, [pc, #8]	; (800a904 <stdio_exit_handler+0xc>)
 800a8fa:	4903      	ldr	r1, [pc, #12]	; (800a908 <stdio_exit_handler+0x10>)
 800a8fc:	4803      	ldr	r0, [pc, #12]	; (800a90c <stdio_exit_handler+0x14>)
 800a8fe:	f000 b869 	b.w	800a9d4 <_fwalk_sglue>
 800a902:	bf00      	nop
 800a904:	20000014 	.word	0x20000014
 800a908:	0800c2e9 	.word	0x0800c2e9
 800a90c:	2000018c 	.word	0x2000018c

0800a910 <cleanup_stdio>:
 800a910:	6841      	ldr	r1, [r0, #4]
 800a912:	4b0c      	ldr	r3, [pc, #48]	; (800a944 <cleanup_stdio+0x34>)
 800a914:	4299      	cmp	r1, r3
 800a916:	b510      	push	{r4, lr}
 800a918:	4604      	mov	r4, r0
 800a91a:	d001      	beq.n	800a920 <cleanup_stdio+0x10>
 800a91c:	f001 fce4 	bl	800c2e8 <_fflush_r>
 800a920:	68a1      	ldr	r1, [r4, #8]
 800a922:	4b09      	ldr	r3, [pc, #36]	; (800a948 <cleanup_stdio+0x38>)
 800a924:	4299      	cmp	r1, r3
 800a926:	d002      	beq.n	800a92e <cleanup_stdio+0x1e>
 800a928:	4620      	mov	r0, r4
 800a92a:	f001 fcdd 	bl	800c2e8 <_fflush_r>
 800a92e:	68e1      	ldr	r1, [r4, #12]
 800a930:	4b06      	ldr	r3, [pc, #24]	; (800a94c <cleanup_stdio+0x3c>)
 800a932:	4299      	cmp	r1, r3
 800a934:	d004      	beq.n	800a940 <cleanup_stdio+0x30>
 800a936:	4620      	mov	r0, r4
 800a938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a93c:	f001 bcd4 	b.w	800c2e8 <_fflush_r>
 800a940:	bd10      	pop	{r4, pc}
 800a942:	bf00      	nop
 800a944:	20013b9c 	.word	0x20013b9c
 800a948:	20013c04 	.word	0x20013c04
 800a94c:	20013c6c 	.word	0x20013c6c

0800a950 <global_stdio_init.part.0>:
 800a950:	b510      	push	{r4, lr}
 800a952:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <global_stdio_init.part.0+0x30>)
 800a954:	4c0b      	ldr	r4, [pc, #44]	; (800a984 <global_stdio_init.part.0+0x34>)
 800a956:	4a0c      	ldr	r2, [pc, #48]	; (800a988 <global_stdio_init.part.0+0x38>)
 800a958:	601a      	str	r2, [r3, #0]
 800a95a:	4620      	mov	r0, r4
 800a95c:	2200      	movs	r2, #0
 800a95e:	2104      	movs	r1, #4
 800a960:	f7ff ff94 	bl	800a88c <std>
 800a964:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a968:	2201      	movs	r2, #1
 800a96a:	2109      	movs	r1, #9
 800a96c:	f7ff ff8e 	bl	800a88c <std>
 800a970:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a974:	2202      	movs	r2, #2
 800a976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a97a:	2112      	movs	r1, #18
 800a97c:	f7ff bf86 	b.w	800a88c <std>
 800a980:	20013cd4 	.word	0x20013cd4
 800a984:	20013b9c 	.word	0x20013b9c
 800a988:	0800a8f9 	.word	0x0800a8f9

0800a98c <__sfp_lock_acquire>:
 800a98c:	4801      	ldr	r0, [pc, #4]	; (800a994 <__sfp_lock_acquire+0x8>)
 800a98e:	f000 b8fe 	b.w	800ab8e <__retarget_lock_acquire_recursive>
 800a992:	bf00      	nop
 800a994:	20013cdd 	.word	0x20013cdd

0800a998 <__sfp_lock_release>:
 800a998:	4801      	ldr	r0, [pc, #4]	; (800a9a0 <__sfp_lock_release+0x8>)
 800a99a:	f000 b8f9 	b.w	800ab90 <__retarget_lock_release_recursive>
 800a99e:	bf00      	nop
 800a9a0:	20013cdd 	.word	0x20013cdd

0800a9a4 <__sinit>:
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	f7ff fff0 	bl	800a98c <__sfp_lock_acquire>
 800a9ac:	6a23      	ldr	r3, [r4, #32]
 800a9ae:	b11b      	cbz	r3, 800a9b8 <__sinit+0x14>
 800a9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9b4:	f7ff bff0 	b.w	800a998 <__sfp_lock_release>
 800a9b8:	4b04      	ldr	r3, [pc, #16]	; (800a9cc <__sinit+0x28>)
 800a9ba:	6223      	str	r3, [r4, #32]
 800a9bc:	4b04      	ldr	r3, [pc, #16]	; (800a9d0 <__sinit+0x2c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1f5      	bne.n	800a9b0 <__sinit+0xc>
 800a9c4:	f7ff ffc4 	bl	800a950 <global_stdio_init.part.0>
 800a9c8:	e7f2      	b.n	800a9b0 <__sinit+0xc>
 800a9ca:	bf00      	nop
 800a9cc:	0800a911 	.word	0x0800a911
 800a9d0:	20013cd4 	.word	0x20013cd4

0800a9d4 <_fwalk_sglue>:
 800a9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9d8:	4607      	mov	r7, r0
 800a9da:	4688      	mov	r8, r1
 800a9dc:	4614      	mov	r4, r2
 800a9de:	2600      	movs	r6, #0
 800a9e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9e4:	f1b9 0901 	subs.w	r9, r9, #1
 800a9e8:	d505      	bpl.n	800a9f6 <_fwalk_sglue+0x22>
 800a9ea:	6824      	ldr	r4, [r4, #0]
 800a9ec:	2c00      	cmp	r4, #0
 800a9ee:	d1f7      	bne.n	800a9e0 <_fwalk_sglue+0xc>
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9f6:	89ab      	ldrh	r3, [r5, #12]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d907      	bls.n	800aa0c <_fwalk_sglue+0x38>
 800a9fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa00:	3301      	adds	r3, #1
 800aa02:	d003      	beq.n	800aa0c <_fwalk_sglue+0x38>
 800aa04:	4629      	mov	r1, r5
 800aa06:	4638      	mov	r0, r7
 800aa08:	47c0      	blx	r8
 800aa0a:	4306      	orrs	r6, r0
 800aa0c:	3568      	adds	r5, #104	; 0x68
 800aa0e:	e7e9      	b.n	800a9e4 <_fwalk_sglue+0x10>

0800aa10 <__sread>:
 800aa10:	b510      	push	{r4, lr}
 800aa12:	460c      	mov	r4, r1
 800aa14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa18:	f000 f87c 	bl	800ab14 <_read_r>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	bfab      	itete	ge
 800aa20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa22:	89a3      	ldrhlt	r3, [r4, #12]
 800aa24:	181b      	addge	r3, r3, r0
 800aa26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa2a:	bfac      	ite	ge
 800aa2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa2e:	81a3      	strhlt	r3, [r4, #12]
 800aa30:	bd10      	pop	{r4, pc}

0800aa32 <__swrite>:
 800aa32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa36:	461f      	mov	r7, r3
 800aa38:	898b      	ldrh	r3, [r1, #12]
 800aa3a:	05db      	lsls	r3, r3, #23
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	460c      	mov	r4, r1
 800aa40:	4616      	mov	r6, r2
 800aa42:	d505      	bpl.n	800aa50 <__swrite+0x1e>
 800aa44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa48:	2302      	movs	r3, #2
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f000 f850 	bl	800aaf0 <_lseek_r>
 800aa50:	89a3      	ldrh	r3, [r4, #12]
 800aa52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa5a:	81a3      	strh	r3, [r4, #12]
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	463b      	mov	r3, r7
 800aa60:	4628      	mov	r0, r5
 800aa62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa66:	f7ff ba99 	b.w	8009f9c <_write_r>

0800aa6a <__sseek>:
 800aa6a:	b510      	push	{r4, lr}
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa72:	f000 f83d 	bl	800aaf0 <_lseek_r>
 800aa76:	1c43      	adds	r3, r0, #1
 800aa78:	89a3      	ldrh	r3, [r4, #12]
 800aa7a:	bf15      	itete	ne
 800aa7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa86:	81a3      	strheq	r3, [r4, #12]
 800aa88:	bf18      	it	ne
 800aa8a:	81a3      	strhne	r3, [r4, #12]
 800aa8c:	bd10      	pop	{r4, pc}

0800aa8e <__sclose>:
 800aa8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa92:	f000 b81d 	b.w	800aad0 <_close_r>

0800aa96 <memcmp>:
 800aa96:	b510      	push	{r4, lr}
 800aa98:	3901      	subs	r1, #1
 800aa9a:	4402      	add	r2, r0
 800aa9c:	4290      	cmp	r0, r2
 800aa9e:	d101      	bne.n	800aaa4 <memcmp+0xe>
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	e005      	b.n	800aab0 <memcmp+0x1a>
 800aaa4:	7803      	ldrb	r3, [r0, #0]
 800aaa6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aaaa:	42a3      	cmp	r3, r4
 800aaac:	d001      	beq.n	800aab2 <memcmp+0x1c>
 800aaae:	1b18      	subs	r0, r3, r4
 800aab0:	bd10      	pop	{r4, pc}
 800aab2:	3001      	adds	r0, #1
 800aab4:	e7f2      	b.n	800aa9c <memcmp+0x6>

0800aab6 <memset>:
 800aab6:	4402      	add	r2, r0
 800aab8:	4603      	mov	r3, r0
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d100      	bne.n	800aac0 <memset+0xa>
 800aabe:	4770      	bx	lr
 800aac0:	f803 1b01 	strb.w	r1, [r3], #1
 800aac4:	e7f9      	b.n	800aaba <memset+0x4>
	...

0800aac8 <_localeconv_r>:
 800aac8:	4800      	ldr	r0, [pc, #0]	; (800aacc <_localeconv_r+0x4>)
 800aaca:	4770      	bx	lr
 800aacc:	20000110 	.word	0x20000110

0800aad0 <_close_r>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	4d06      	ldr	r5, [pc, #24]	; (800aaec <_close_r+0x1c>)
 800aad4:	2300      	movs	r3, #0
 800aad6:	4604      	mov	r4, r0
 800aad8:	4608      	mov	r0, r1
 800aada:	602b      	str	r3, [r5, #0]
 800aadc:	f7f7 fe35 	bl	800274a <_close>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d102      	bne.n	800aaea <_close_r+0x1a>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	b103      	cbz	r3, 800aaea <_close_r+0x1a>
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
 800aaec:	20013cd8 	.word	0x20013cd8

0800aaf0 <_lseek_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4d07      	ldr	r5, [pc, #28]	; (800ab10 <_lseek_r+0x20>)
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	4608      	mov	r0, r1
 800aaf8:	4611      	mov	r1, r2
 800aafa:	2200      	movs	r2, #0
 800aafc:	602a      	str	r2, [r5, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	f7f7 fe4a 	bl	8002798 <_lseek>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_lseek_r+0x1e>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_lseek_r+0x1e>
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	20013cd8 	.word	0x20013cd8

0800ab14 <_read_r>:
 800ab14:	b538      	push	{r3, r4, r5, lr}
 800ab16:	4d07      	ldr	r5, [pc, #28]	; (800ab34 <_read_r+0x20>)
 800ab18:	4604      	mov	r4, r0
 800ab1a:	4608      	mov	r0, r1
 800ab1c:	4611      	mov	r1, r2
 800ab1e:	2200      	movs	r2, #0
 800ab20:	602a      	str	r2, [r5, #0]
 800ab22:	461a      	mov	r2, r3
 800ab24:	f7f7 fdf4 	bl	8002710 <_read>
 800ab28:	1c43      	adds	r3, r0, #1
 800ab2a:	d102      	bne.n	800ab32 <_read_r+0x1e>
 800ab2c:	682b      	ldr	r3, [r5, #0]
 800ab2e:	b103      	cbz	r3, 800ab32 <_read_r+0x1e>
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	bd38      	pop	{r3, r4, r5, pc}
 800ab34:	20013cd8 	.word	0x20013cd8

0800ab38 <__errno>:
 800ab38:	4b01      	ldr	r3, [pc, #4]	; (800ab40 <__errno+0x8>)
 800ab3a:	6818      	ldr	r0, [r3, #0]
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	200001d8 	.word	0x200001d8

0800ab44 <__libc_init_array>:
 800ab44:	b570      	push	{r4, r5, r6, lr}
 800ab46:	4d0d      	ldr	r5, [pc, #52]	; (800ab7c <__libc_init_array+0x38>)
 800ab48:	4c0d      	ldr	r4, [pc, #52]	; (800ab80 <__libc_init_array+0x3c>)
 800ab4a:	1b64      	subs	r4, r4, r5
 800ab4c:	10a4      	asrs	r4, r4, #2
 800ab4e:	2600      	movs	r6, #0
 800ab50:	42a6      	cmp	r6, r4
 800ab52:	d109      	bne.n	800ab68 <__libc_init_array+0x24>
 800ab54:	4d0b      	ldr	r5, [pc, #44]	; (800ab84 <__libc_init_array+0x40>)
 800ab56:	4c0c      	ldr	r4, [pc, #48]	; (800ab88 <__libc_init_array+0x44>)
 800ab58:	f001 ff42 	bl	800c9e0 <_init>
 800ab5c:	1b64      	subs	r4, r4, r5
 800ab5e:	10a4      	asrs	r4, r4, #2
 800ab60:	2600      	movs	r6, #0
 800ab62:	42a6      	cmp	r6, r4
 800ab64:	d105      	bne.n	800ab72 <__libc_init_array+0x2e>
 800ab66:	bd70      	pop	{r4, r5, r6, pc}
 800ab68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab6c:	4798      	blx	r3
 800ab6e:	3601      	adds	r6, #1
 800ab70:	e7ee      	b.n	800ab50 <__libc_init_array+0xc>
 800ab72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab76:	4798      	blx	r3
 800ab78:	3601      	adds	r6, #1
 800ab7a:	e7f2      	b.n	800ab62 <__libc_init_array+0x1e>
 800ab7c:	0800cec4 	.word	0x0800cec4
 800ab80:	0800cec4 	.word	0x0800cec4
 800ab84:	0800cec4 	.word	0x0800cec4
 800ab88:	0800cec8 	.word	0x0800cec8

0800ab8c <__retarget_lock_init_recursive>:
 800ab8c:	4770      	bx	lr

0800ab8e <__retarget_lock_acquire_recursive>:
 800ab8e:	4770      	bx	lr

0800ab90 <__retarget_lock_release_recursive>:
 800ab90:	4770      	bx	lr

0800ab92 <memcpy>:
 800ab92:	440a      	add	r2, r1
 800ab94:	4291      	cmp	r1, r2
 800ab96:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab9a:	d100      	bne.n	800ab9e <memcpy+0xc>
 800ab9c:	4770      	bx	lr
 800ab9e:	b510      	push	{r4, lr}
 800aba0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aba4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aba8:	4291      	cmp	r1, r2
 800abaa:	d1f9      	bne.n	800aba0 <memcpy+0xe>
 800abac:	bd10      	pop	{r4, pc}

0800abae <quorem>:
 800abae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb2:	6903      	ldr	r3, [r0, #16]
 800abb4:	690c      	ldr	r4, [r1, #16]
 800abb6:	42a3      	cmp	r3, r4
 800abb8:	4607      	mov	r7, r0
 800abba:	db7e      	blt.n	800acba <quorem+0x10c>
 800abbc:	3c01      	subs	r4, #1
 800abbe:	f101 0814 	add.w	r8, r1, #20
 800abc2:	f100 0514 	add.w	r5, r0, #20
 800abc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abca:	9301      	str	r3, [sp, #4]
 800abcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abd4:	3301      	adds	r3, #1
 800abd6:	429a      	cmp	r2, r3
 800abd8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800abdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abe0:	fbb2 f6f3 	udiv	r6, r2, r3
 800abe4:	d331      	bcc.n	800ac4a <quorem+0x9c>
 800abe6:	f04f 0e00 	mov.w	lr, #0
 800abea:	4640      	mov	r0, r8
 800abec:	46ac      	mov	ip, r5
 800abee:	46f2      	mov	sl, lr
 800abf0:	f850 2b04 	ldr.w	r2, [r0], #4
 800abf4:	b293      	uxth	r3, r2
 800abf6:	fb06 e303 	mla	r3, r6, r3, lr
 800abfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abfe:	0c1a      	lsrs	r2, r3, #16
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	ebaa 0303 	sub.w	r3, sl, r3
 800ac06:	f8dc a000 	ldr.w	sl, [ip]
 800ac0a:	fa13 f38a 	uxtah	r3, r3, sl
 800ac0e:	fb06 220e 	mla	r2, r6, lr, r2
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	9b00      	ldr	r3, [sp, #0]
 800ac16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac1a:	b292      	uxth	r2, r2
 800ac1c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ac20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac24:	f8bd 3000 	ldrh.w	r3, [sp]
 800ac28:	4581      	cmp	r9, r0
 800ac2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac2e:	f84c 3b04 	str.w	r3, [ip], #4
 800ac32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac36:	d2db      	bcs.n	800abf0 <quorem+0x42>
 800ac38:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac3c:	b92b      	cbnz	r3, 800ac4a <quorem+0x9c>
 800ac3e:	9b01      	ldr	r3, [sp, #4]
 800ac40:	3b04      	subs	r3, #4
 800ac42:	429d      	cmp	r5, r3
 800ac44:	461a      	mov	r2, r3
 800ac46:	d32c      	bcc.n	800aca2 <quorem+0xf4>
 800ac48:	613c      	str	r4, [r7, #16]
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	f001 f9b8 	bl	800bfc0 <__mcmp>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	db22      	blt.n	800ac9a <quorem+0xec>
 800ac54:	3601      	adds	r6, #1
 800ac56:	4629      	mov	r1, r5
 800ac58:	2000      	movs	r0, #0
 800ac5a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac5e:	f8d1 c000 	ldr.w	ip, [r1]
 800ac62:	b293      	uxth	r3, r2
 800ac64:	1ac3      	subs	r3, r0, r3
 800ac66:	0c12      	lsrs	r2, r2, #16
 800ac68:	fa13 f38c 	uxtah	r3, r3, ip
 800ac6c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ac70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac7a:	45c1      	cmp	r9, r8
 800ac7c:	f841 3b04 	str.w	r3, [r1], #4
 800ac80:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac84:	d2e9      	bcs.n	800ac5a <quorem+0xac>
 800ac86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac8e:	b922      	cbnz	r2, 800ac9a <quorem+0xec>
 800ac90:	3b04      	subs	r3, #4
 800ac92:	429d      	cmp	r5, r3
 800ac94:	461a      	mov	r2, r3
 800ac96:	d30a      	bcc.n	800acae <quorem+0x100>
 800ac98:	613c      	str	r4, [r7, #16]
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	b003      	add	sp, #12
 800ac9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca2:	6812      	ldr	r2, [r2, #0]
 800aca4:	3b04      	subs	r3, #4
 800aca6:	2a00      	cmp	r2, #0
 800aca8:	d1ce      	bne.n	800ac48 <quorem+0x9a>
 800acaa:	3c01      	subs	r4, #1
 800acac:	e7c9      	b.n	800ac42 <quorem+0x94>
 800acae:	6812      	ldr	r2, [r2, #0]
 800acb0:	3b04      	subs	r3, #4
 800acb2:	2a00      	cmp	r2, #0
 800acb4:	d1f0      	bne.n	800ac98 <quorem+0xea>
 800acb6:	3c01      	subs	r4, #1
 800acb8:	e7eb      	b.n	800ac92 <quorem+0xe4>
 800acba:	2000      	movs	r0, #0
 800acbc:	e7ee      	b.n	800ac9c <quorem+0xee>
	...

0800acc0 <_dtoa_r>:
 800acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc4:	ed2d 8b04 	vpush	{d8-d9}
 800acc8:	69c5      	ldr	r5, [r0, #28]
 800acca:	b093      	sub	sp, #76	; 0x4c
 800accc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800acd0:	ec57 6b10 	vmov	r6, r7, d0
 800acd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800acd8:	9107      	str	r1, [sp, #28]
 800acda:	4604      	mov	r4, r0
 800acdc:	920a      	str	r2, [sp, #40]	; 0x28
 800acde:	930d      	str	r3, [sp, #52]	; 0x34
 800ace0:	b975      	cbnz	r5, 800ad00 <_dtoa_r+0x40>
 800ace2:	2010      	movs	r0, #16
 800ace4:	f000 fe2a 	bl	800b93c <malloc>
 800ace8:	4602      	mov	r2, r0
 800acea:	61e0      	str	r0, [r4, #28]
 800acec:	b920      	cbnz	r0, 800acf8 <_dtoa_r+0x38>
 800acee:	4bae      	ldr	r3, [pc, #696]	; (800afa8 <_dtoa_r+0x2e8>)
 800acf0:	21ef      	movs	r1, #239	; 0xef
 800acf2:	48ae      	ldr	r0, [pc, #696]	; (800afac <_dtoa_r+0x2ec>)
 800acf4:	f001 fb30 	bl	800c358 <__assert_func>
 800acf8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800acfc:	6005      	str	r5, [r0, #0]
 800acfe:	60c5      	str	r5, [r0, #12]
 800ad00:	69e3      	ldr	r3, [r4, #28]
 800ad02:	6819      	ldr	r1, [r3, #0]
 800ad04:	b151      	cbz	r1, 800ad1c <_dtoa_r+0x5c>
 800ad06:	685a      	ldr	r2, [r3, #4]
 800ad08:	604a      	str	r2, [r1, #4]
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	4093      	lsls	r3, r2
 800ad0e:	608b      	str	r3, [r1, #8]
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 ff19 	bl	800bb48 <_Bfree>
 800ad16:	69e3      	ldr	r3, [r4, #28]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	601a      	str	r2, [r3, #0]
 800ad1c:	1e3b      	subs	r3, r7, #0
 800ad1e:	bfbb      	ittet	lt
 800ad20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad24:	9303      	strlt	r3, [sp, #12]
 800ad26:	2300      	movge	r3, #0
 800ad28:	2201      	movlt	r2, #1
 800ad2a:	bfac      	ite	ge
 800ad2c:	f8c8 3000 	strge.w	r3, [r8]
 800ad30:	f8c8 2000 	strlt.w	r2, [r8]
 800ad34:	4b9e      	ldr	r3, [pc, #632]	; (800afb0 <_dtoa_r+0x2f0>)
 800ad36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ad3a:	ea33 0308 	bics.w	r3, r3, r8
 800ad3e:	d11b      	bne.n	800ad78 <_dtoa_r+0xb8>
 800ad40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad42:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad46:	6013      	str	r3, [r2, #0]
 800ad48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ad4c:	4333      	orrs	r3, r6
 800ad4e:	f000 8593 	beq.w	800b878 <_dtoa_r+0xbb8>
 800ad52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad54:	b963      	cbnz	r3, 800ad70 <_dtoa_r+0xb0>
 800ad56:	4b97      	ldr	r3, [pc, #604]	; (800afb4 <_dtoa_r+0x2f4>)
 800ad58:	e027      	b.n	800adaa <_dtoa_r+0xea>
 800ad5a:	4b97      	ldr	r3, [pc, #604]	; (800afb8 <_dtoa_r+0x2f8>)
 800ad5c:	9300      	str	r3, [sp, #0]
 800ad5e:	3308      	adds	r3, #8
 800ad60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad62:	6013      	str	r3, [r2, #0]
 800ad64:	9800      	ldr	r0, [sp, #0]
 800ad66:	b013      	add	sp, #76	; 0x4c
 800ad68:	ecbd 8b04 	vpop	{d8-d9}
 800ad6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad70:	4b90      	ldr	r3, [pc, #576]	; (800afb4 <_dtoa_r+0x2f4>)
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	3303      	adds	r3, #3
 800ad76:	e7f3      	b.n	800ad60 <_dtoa_r+0xa0>
 800ad78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	ec51 0b17 	vmov	r0, r1, d7
 800ad82:	eeb0 8a47 	vmov.f32	s16, s14
 800ad86:	eef0 8a67 	vmov.f32	s17, s15
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f7f5 ff0c 	bl	8000ba8 <__aeabi_dcmpeq>
 800ad90:	4681      	mov	r9, r0
 800ad92:	b160      	cbz	r0, 800adae <_dtoa_r+0xee>
 800ad94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad96:	2301      	movs	r3, #1
 800ad98:	6013      	str	r3, [r2, #0]
 800ad9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 8568 	beq.w	800b872 <_dtoa_r+0xbb2>
 800ada2:	4b86      	ldr	r3, [pc, #536]	; (800afbc <_dtoa_r+0x2fc>)
 800ada4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	e7da      	b.n	800ad64 <_dtoa_r+0xa4>
 800adae:	aa10      	add	r2, sp, #64	; 0x40
 800adb0:	a911      	add	r1, sp, #68	; 0x44
 800adb2:	4620      	mov	r0, r4
 800adb4:	eeb0 0a48 	vmov.f32	s0, s16
 800adb8:	eef0 0a68 	vmov.f32	s1, s17
 800adbc:	f001 f9a6 	bl	800c10c <__d2b>
 800adc0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800adc4:	4682      	mov	sl, r0
 800adc6:	2d00      	cmp	r5, #0
 800adc8:	d07f      	beq.n	800aeca <_dtoa_r+0x20a>
 800adca:	ee18 3a90 	vmov	r3, s17
 800adce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800add2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800add6:	ec51 0b18 	vmov	r0, r1, d8
 800adda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800adde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ade2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ade6:	4619      	mov	r1, r3
 800ade8:	2200      	movs	r2, #0
 800adea:	4b75      	ldr	r3, [pc, #468]	; (800afc0 <_dtoa_r+0x300>)
 800adec:	f7f5 fabc 	bl	8000368 <__aeabi_dsub>
 800adf0:	a367      	add	r3, pc, #412	; (adr r3, 800af90 <_dtoa_r+0x2d0>)
 800adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf6:	f7f5 fc6f 	bl	80006d8 <__aeabi_dmul>
 800adfa:	a367      	add	r3, pc, #412	; (adr r3, 800af98 <_dtoa_r+0x2d8>)
 800adfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae00:	f7f5 fab4 	bl	800036c <__adddf3>
 800ae04:	4606      	mov	r6, r0
 800ae06:	4628      	mov	r0, r5
 800ae08:	460f      	mov	r7, r1
 800ae0a:	f7f5 fbfb 	bl	8000604 <__aeabi_i2d>
 800ae0e:	a364      	add	r3, pc, #400	; (adr r3, 800afa0 <_dtoa_r+0x2e0>)
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	f7f5 fc60 	bl	80006d8 <__aeabi_dmul>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	4639      	mov	r1, r7
 800ae20:	f7f5 faa4 	bl	800036c <__adddf3>
 800ae24:	4606      	mov	r6, r0
 800ae26:	460f      	mov	r7, r1
 800ae28:	f7f5 ff06 	bl	8000c38 <__aeabi_d2iz>
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	4683      	mov	fp, r0
 800ae30:	2300      	movs	r3, #0
 800ae32:	4630      	mov	r0, r6
 800ae34:	4639      	mov	r1, r7
 800ae36:	f7f5 fec1 	bl	8000bbc <__aeabi_dcmplt>
 800ae3a:	b148      	cbz	r0, 800ae50 <_dtoa_r+0x190>
 800ae3c:	4658      	mov	r0, fp
 800ae3e:	f7f5 fbe1 	bl	8000604 <__aeabi_i2d>
 800ae42:	4632      	mov	r2, r6
 800ae44:	463b      	mov	r3, r7
 800ae46:	f7f5 feaf 	bl	8000ba8 <__aeabi_dcmpeq>
 800ae4a:	b908      	cbnz	r0, 800ae50 <_dtoa_r+0x190>
 800ae4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae50:	f1bb 0f16 	cmp.w	fp, #22
 800ae54:	d857      	bhi.n	800af06 <_dtoa_r+0x246>
 800ae56:	4b5b      	ldr	r3, [pc, #364]	; (800afc4 <_dtoa_r+0x304>)
 800ae58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae60:	ec51 0b18 	vmov	r0, r1, d8
 800ae64:	f7f5 feaa 	bl	8000bbc <__aeabi_dcmplt>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d04e      	beq.n	800af0a <_dtoa_r+0x24a>
 800ae6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae70:	2300      	movs	r3, #0
 800ae72:	930c      	str	r3, [sp, #48]	; 0x30
 800ae74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae76:	1b5b      	subs	r3, r3, r5
 800ae78:	1e5a      	subs	r2, r3, #1
 800ae7a:	bf45      	ittet	mi
 800ae7c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ae80:	9305      	strmi	r3, [sp, #20]
 800ae82:	2300      	movpl	r3, #0
 800ae84:	2300      	movmi	r3, #0
 800ae86:	9206      	str	r2, [sp, #24]
 800ae88:	bf54      	ite	pl
 800ae8a:	9305      	strpl	r3, [sp, #20]
 800ae8c:	9306      	strmi	r3, [sp, #24]
 800ae8e:	f1bb 0f00 	cmp.w	fp, #0
 800ae92:	db3c      	blt.n	800af0e <_dtoa_r+0x24e>
 800ae94:	9b06      	ldr	r3, [sp, #24]
 800ae96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ae9a:	445b      	add	r3, fp
 800ae9c:	9306      	str	r3, [sp, #24]
 800ae9e:	2300      	movs	r3, #0
 800aea0:	9308      	str	r3, [sp, #32]
 800aea2:	9b07      	ldr	r3, [sp, #28]
 800aea4:	2b09      	cmp	r3, #9
 800aea6:	d868      	bhi.n	800af7a <_dtoa_r+0x2ba>
 800aea8:	2b05      	cmp	r3, #5
 800aeaa:	bfc4      	itt	gt
 800aeac:	3b04      	subgt	r3, #4
 800aeae:	9307      	strgt	r3, [sp, #28]
 800aeb0:	9b07      	ldr	r3, [sp, #28]
 800aeb2:	f1a3 0302 	sub.w	r3, r3, #2
 800aeb6:	bfcc      	ite	gt
 800aeb8:	2500      	movgt	r5, #0
 800aeba:	2501      	movle	r5, #1
 800aebc:	2b03      	cmp	r3, #3
 800aebe:	f200 8085 	bhi.w	800afcc <_dtoa_r+0x30c>
 800aec2:	e8df f003 	tbb	[pc, r3]
 800aec6:	3b2e      	.short	0x3b2e
 800aec8:	5839      	.short	0x5839
 800aeca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aece:	441d      	add	r5, r3
 800aed0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aed4:	2b20      	cmp	r3, #32
 800aed6:	bfc1      	itttt	gt
 800aed8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aedc:	fa08 f803 	lslgt.w	r8, r8, r3
 800aee0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aee4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aee8:	bfd6      	itet	le
 800aeea:	f1c3 0320 	rsble	r3, r3, #32
 800aeee:	ea48 0003 	orrgt.w	r0, r8, r3
 800aef2:	fa06 f003 	lslle.w	r0, r6, r3
 800aef6:	f7f5 fb75 	bl	80005e4 <__aeabi_ui2d>
 800aefa:	2201      	movs	r2, #1
 800aefc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800af00:	3d01      	subs	r5, #1
 800af02:	920e      	str	r2, [sp, #56]	; 0x38
 800af04:	e76f      	b.n	800ade6 <_dtoa_r+0x126>
 800af06:	2301      	movs	r3, #1
 800af08:	e7b3      	b.n	800ae72 <_dtoa_r+0x1b2>
 800af0a:	900c      	str	r0, [sp, #48]	; 0x30
 800af0c:	e7b2      	b.n	800ae74 <_dtoa_r+0x1b4>
 800af0e:	9b05      	ldr	r3, [sp, #20]
 800af10:	eba3 030b 	sub.w	r3, r3, fp
 800af14:	9305      	str	r3, [sp, #20]
 800af16:	f1cb 0300 	rsb	r3, fp, #0
 800af1a:	9308      	str	r3, [sp, #32]
 800af1c:	2300      	movs	r3, #0
 800af1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800af20:	e7bf      	b.n	800aea2 <_dtoa_r+0x1e2>
 800af22:	2300      	movs	r3, #0
 800af24:	9309      	str	r3, [sp, #36]	; 0x24
 800af26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af28:	2b00      	cmp	r3, #0
 800af2a:	dc52      	bgt.n	800afd2 <_dtoa_r+0x312>
 800af2c:	2301      	movs	r3, #1
 800af2e:	9301      	str	r3, [sp, #4]
 800af30:	9304      	str	r3, [sp, #16]
 800af32:	461a      	mov	r2, r3
 800af34:	920a      	str	r2, [sp, #40]	; 0x28
 800af36:	e00b      	b.n	800af50 <_dtoa_r+0x290>
 800af38:	2301      	movs	r3, #1
 800af3a:	e7f3      	b.n	800af24 <_dtoa_r+0x264>
 800af3c:	2300      	movs	r3, #0
 800af3e:	9309      	str	r3, [sp, #36]	; 0x24
 800af40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af42:	445b      	add	r3, fp
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	3301      	adds	r3, #1
 800af48:	2b01      	cmp	r3, #1
 800af4a:	9304      	str	r3, [sp, #16]
 800af4c:	bfb8      	it	lt
 800af4e:	2301      	movlt	r3, #1
 800af50:	69e0      	ldr	r0, [r4, #28]
 800af52:	2100      	movs	r1, #0
 800af54:	2204      	movs	r2, #4
 800af56:	f102 0614 	add.w	r6, r2, #20
 800af5a:	429e      	cmp	r6, r3
 800af5c:	d93d      	bls.n	800afda <_dtoa_r+0x31a>
 800af5e:	6041      	str	r1, [r0, #4]
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fdb1 	bl	800bac8 <_Balloc>
 800af66:	9000      	str	r0, [sp, #0]
 800af68:	2800      	cmp	r0, #0
 800af6a:	d139      	bne.n	800afe0 <_dtoa_r+0x320>
 800af6c:	4b16      	ldr	r3, [pc, #88]	; (800afc8 <_dtoa_r+0x308>)
 800af6e:	4602      	mov	r2, r0
 800af70:	f240 11af 	movw	r1, #431	; 0x1af
 800af74:	e6bd      	b.n	800acf2 <_dtoa_r+0x32>
 800af76:	2301      	movs	r3, #1
 800af78:	e7e1      	b.n	800af3e <_dtoa_r+0x27e>
 800af7a:	2501      	movs	r5, #1
 800af7c:	2300      	movs	r3, #0
 800af7e:	9307      	str	r3, [sp, #28]
 800af80:	9509      	str	r5, [sp, #36]	; 0x24
 800af82:	f04f 33ff 	mov.w	r3, #4294967295
 800af86:	9301      	str	r3, [sp, #4]
 800af88:	9304      	str	r3, [sp, #16]
 800af8a:	2200      	movs	r2, #0
 800af8c:	2312      	movs	r3, #18
 800af8e:	e7d1      	b.n	800af34 <_dtoa_r+0x274>
 800af90:	636f4361 	.word	0x636f4361
 800af94:	3fd287a7 	.word	0x3fd287a7
 800af98:	8b60c8b3 	.word	0x8b60c8b3
 800af9c:	3fc68a28 	.word	0x3fc68a28
 800afa0:	509f79fb 	.word	0x509f79fb
 800afa4:	3fd34413 	.word	0x3fd34413
 800afa8:	0800cc92 	.word	0x0800cc92
 800afac:	0800cca9 	.word	0x0800cca9
 800afb0:	7ff00000 	.word	0x7ff00000
 800afb4:	0800cc8e 	.word	0x0800cc8e
 800afb8:	0800cc85 	.word	0x0800cc85
 800afbc:	0800cc58 	.word	0x0800cc58
 800afc0:	3ff80000 	.word	0x3ff80000
 800afc4:	0800cd98 	.word	0x0800cd98
 800afc8:	0800cd01 	.word	0x0800cd01
 800afcc:	2301      	movs	r3, #1
 800afce:	9309      	str	r3, [sp, #36]	; 0x24
 800afd0:	e7d7      	b.n	800af82 <_dtoa_r+0x2c2>
 800afd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	9304      	str	r3, [sp, #16]
 800afd8:	e7ba      	b.n	800af50 <_dtoa_r+0x290>
 800afda:	3101      	adds	r1, #1
 800afdc:	0052      	lsls	r2, r2, #1
 800afde:	e7ba      	b.n	800af56 <_dtoa_r+0x296>
 800afe0:	69e3      	ldr	r3, [r4, #28]
 800afe2:	9a00      	ldr	r2, [sp, #0]
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	9b04      	ldr	r3, [sp, #16]
 800afe8:	2b0e      	cmp	r3, #14
 800afea:	f200 80a8 	bhi.w	800b13e <_dtoa_r+0x47e>
 800afee:	2d00      	cmp	r5, #0
 800aff0:	f000 80a5 	beq.w	800b13e <_dtoa_r+0x47e>
 800aff4:	f1bb 0f00 	cmp.w	fp, #0
 800aff8:	dd38      	ble.n	800b06c <_dtoa_r+0x3ac>
 800affa:	4bc0      	ldr	r3, [pc, #768]	; (800b2fc <_dtoa_r+0x63c>)
 800affc:	f00b 020f 	and.w	r2, fp, #15
 800b000:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b004:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b008:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b00c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b010:	d019      	beq.n	800b046 <_dtoa_r+0x386>
 800b012:	4bbb      	ldr	r3, [pc, #748]	; (800b300 <_dtoa_r+0x640>)
 800b014:	ec51 0b18 	vmov	r0, r1, d8
 800b018:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b01c:	f7f5 fc86 	bl	800092c <__aeabi_ddiv>
 800b020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b024:	f008 080f 	and.w	r8, r8, #15
 800b028:	2503      	movs	r5, #3
 800b02a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b300 <_dtoa_r+0x640>
 800b02e:	f1b8 0f00 	cmp.w	r8, #0
 800b032:	d10a      	bne.n	800b04a <_dtoa_r+0x38a>
 800b034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b038:	4632      	mov	r2, r6
 800b03a:	463b      	mov	r3, r7
 800b03c:	f7f5 fc76 	bl	800092c <__aeabi_ddiv>
 800b040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b044:	e02b      	b.n	800b09e <_dtoa_r+0x3de>
 800b046:	2502      	movs	r5, #2
 800b048:	e7ef      	b.n	800b02a <_dtoa_r+0x36a>
 800b04a:	f018 0f01 	tst.w	r8, #1
 800b04e:	d008      	beq.n	800b062 <_dtoa_r+0x3a2>
 800b050:	4630      	mov	r0, r6
 800b052:	4639      	mov	r1, r7
 800b054:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b058:	f7f5 fb3e 	bl	80006d8 <__aeabi_dmul>
 800b05c:	3501      	adds	r5, #1
 800b05e:	4606      	mov	r6, r0
 800b060:	460f      	mov	r7, r1
 800b062:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b066:	f109 0908 	add.w	r9, r9, #8
 800b06a:	e7e0      	b.n	800b02e <_dtoa_r+0x36e>
 800b06c:	f000 809f 	beq.w	800b1ae <_dtoa_r+0x4ee>
 800b070:	f1cb 0600 	rsb	r6, fp, #0
 800b074:	4ba1      	ldr	r3, [pc, #644]	; (800b2fc <_dtoa_r+0x63c>)
 800b076:	4fa2      	ldr	r7, [pc, #648]	; (800b300 <_dtoa_r+0x640>)
 800b078:	f006 020f 	and.w	r2, r6, #15
 800b07c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b084:	ec51 0b18 	vmov	r0, r1, d8
 800b088:	f7f5 fb26 	bl	80006d8 <__aeabi_dmul>
 800b08c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b090:	1136      	asrs	r6, r6, #4
 800b092:	2300      	movs	r3, #0
 800b094:	2502      	movs	r5, #2
 800b096:	2e00      	cmp	r6, #0
 800b098:	d17e      	bne.n	800b198 <_dtoa_r+0x4d8>
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1d0      	bne.n	800b040 <_dtoa_r+0x380>
 800b09e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 8084 	beq.w	800b1b2 <_dtoa_r+0x4f2>
 800b0aa:	4b96      	ldr	r3, [pc, #600]	; (800b304 <_dtoa_r+0x644>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	4640      	mov	r0, r8
 800b0b0:	4649      	mov	r1, r9
 800b0b2:	f7f5 fd83 	bl	8000bbc <__aeabi_dcmplt>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d07b      	beq.n	800b1b2 <_dtoa_r+0x4f2>
 800b0ba:	9b04      	ldr	r3, [sp, #16]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d078      	beq.n	800b1b2 <_dtoa_r+0x4f2>
 800b0c0:	9b01      	ldr	r3, [sp, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	dd39      	ble.n	800b13a <_dtoa_r+0x47a>
 800b0c6:	4b90      	ldr	r3, [pc, #576]	; (800b308 <_dtoa_r+0x648>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	4640      	mov	r0, r8
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	f7f5 fb03 	bl	80006d8 <__aeabi_dmul>
 800b0d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0d6:	9e01      	ldr	r6, [sp, #4]
 800b0d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b0dc:	3501      	adds	r5, #1
 800b0de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f7f5 fa8e 	bl	8000604 <__aeabi_i2d>
 800b0e8:	4642      	mov	r2, r8
 800b0ea:	464b      	mov	r3, r9
 800b0ec:	f7f5 faf4 	bl	80006d8 <__aeabi_dmul>
 800b0f0:	4b86      	ldr	r3, [pc, #536]	; (800b30c <_dtoa_r+0x64c>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f7f5 f93a 	bl	800036c <__adddf3>
 800b0f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b0fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b100:	9303      	str	r3, [sp, #12]
 800b102:	2e00      	cmp	r6, #0
 800b104:	d158      	bne.n	800b1b8 <_dtoa_r+0x4f8>
 800b106:	4b82      	ldr	r3, [pc, #520]	; (800b310 <_dtoa_r+0x650>)
 800b108:	2200      	movs	r2, #0
 800b10a:	4640      	mov	r0, r8
 800b10c:	4649      	mov	r1, r9
 800b10e:	f7f5 f92b 	bl	8000368 <__aeabi_dsub>
 800b112:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b116:	4680      	mov	r8, r0
 800b118:	4689      	mov	r9, r1
 800b11a:	f7f5 fd6d 	bl	8000bf8 <__aeabi_dcmpgt>
 800b11e:	2800      	cmp	r0, #0
 800b120:	f040 8296 	bne.w	800b650 <_dtoa_r+0x990>
 800b124:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b128:	4640      	mov	r0, r8
 800b12a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b12e:	4649      	mov	r1, r9
 800b130:	f7f5 fd44 	bl	8000bbc <__aeabi_dcmplt>
 800b134:	2800      	cmp	r0, #0
 800b136:	f040 8289 	bne.w	800b64c <_dtoa_r+0x98c>
 800b13a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b13e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b140:	2b00      	cmp	r3, #0
 800b142:	f2c0 814e 	blt.w	800b3e2 <_dtoa_r+0x722>
 800b146:	f1bb 0f0e 	cmp.w	fp, #14
 800b14a:	f300 814a 	bgt.w	800b3e2 <_dtoa_r+0x722>
 800b14e:	4b6b      	ldr	r3, [pc, #428]	; (800b2fc <_dtoa_r+0x63c>)
 800b150:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b154:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f280 80dc 	bge.w	800b318 <_dtoa_r+0x658>
 800b160:	9b04      	ldr	r3, [sp, #16]
 800b162:	2b00      	cmp	r3, #0
 800b164:	f300 80d8 	bgt.w	800b318 <_dtoa_r+0x658>
 800b168:	f040 826f 	bne.w	800b64a <_dtoa_r+0x98a>
 800b16c:	4b68      	ldr	r3, [pc, #416]	; (800b310 <_dtoa_r+0x650>)
 800b16e:	2200      	movs	r2, #0
 800b170:	4640      	mov	r0, r8
 800b172:	4649      	mov	r1, r9
 800b174:	f7f5 fab0 	bl	80006d8 <__aeabi_dmul>
 800b178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b17c:	f7f5 fd32 	bl	8000be4 <__aeabi_dcmpge>
 800b180:	9e04      	ldr	r6, [sp, #16]
 800b182:	4637      	mov	r7, r6
 800b184:	2800      	cmp	r0, #0
 800b186:	f040 8245 	bne.w	800b614 <_dtoa_r+0x954>
 800b18a:	9d00      	ldr	r5, [sp, #0]
 800b18c:	2331      	movs	r3, #49	; 0x31
 800b18e:	f805 3b01 	strb.w	r3, [r5], #1
 800b192:	f10b 0b01 	add.w	fp, fp, #1
 800b196:	e241      	b.n	800b61c <_dtoa_r+0x95c>
 800b198:	07f2      	lsls	r2, r6, #31
 800b19a:	d505      	bpl.n	800b1a8 <_dtoa_r+0x4e8>
 800b19c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1a0:	f7f5 fa9a 	bl	80006d8 <__aeabi_dmul>
 800b1a4:	3501      	adds	r5, #1
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	1076      	asrs	r6, r6, #1
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	e773      	b.n	800b096 <_dtoa_r+0x3d6>
 800b1ae:	2502      	movs	r5, #2
 800b1b0:	e775      	b.n	800b09e <_dtoa_r+0x3de>
 800b1b2:	9e04      	ldr	r6, [sp, #16]
 800b1b4:	465f      	mov	r7, fp
 800b1b6:	e792      	b.n	800b0de <_dtoa_r+0x41e>
 800b1b8:	9900      	ldr	r1, [sp, #0]
 800b1ba:	4b50      	ldr	r3, [pc, #320]	; (800b2fc <_dtoa_r+0x63c>)
 800b1bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1c0:	4431      	add	r1, r6
 800b1c2:	9102      	str	r1, [sp, #8]
 800b1c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1c6:	eeb0 9a47 	vmov.f32	s18, s14
 800b1ca:	eef0 9a67 	vmov.f32	s19, s15
 800b1ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b1d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1d6:	2900      	cmp	r1, #0
 800b1d8:	d044      	beq.n	800b264 <_dtoa_r+0x5a4>
 800b1da:	494e      	ldr	r1, [pc, #312]	; (800b314 <_dtoa_r+0x654>)
 800b1dc:	2000      	movs	r0, #0
 800b1de:	f7f5 fba5 	bl	800092c <__aeabi_ddiv>
 800b1e2:	ec53 2b19 	vmov	r2, r3, d9
 800b1e6:	f7f5 f8bf 	bl	8000368 <__aeabi_dsub>
 800b1ea:	9d00      	ldr	r5, [sp, #0]
 800b1ec:	ec41 0b19 	vmov	d9, r0, r1
 800b1f0:	4649      	mov	r1, r9
 800b1f2:	4640      	mov	r0, r8
 800b1f4:	f7f5 fd20 	bl	8000c38 <__aeabi_d2iz>
 800b1f8:	4606      	mov	r6, r0
 800b1fa:	f7f5 fa03 	bl	8000604 <__aeabi_i2d>
 800b1fe:	4602      	mov	r2, r0
 800b200:	460b      	mov	r3, r1
 800b202:	4640      	mov	r0, r8
 800b204:	4649      	mov	r1, r9
 800b206:	f7f5 f8af 	bl	8000368 <__aeabi_dsub>
 800b20a:	3630      	adds	r6, #48	; 0x30
 800b20c:	f805 6b01 	strb.w	r6, [r5], #1
 800b210:	ec53 2b19 	vmov	r2, r3, d9
 800b214:	4680      	mov	r8, r0
 800b216:	4689      	mov	r9, r1
 800b218:	f7f5 fcd0 	bl	8000bbc <__aeabi_dcmplt>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d164      	bne.n	800b2ea <_dtoa_r+0x62a>
 800b220:	4642      	mov	r2, r8
 800b222:	464b      	mov	r3, r9
 800b224:	4937      	ldr	r1, [pc, #220]	; (800b304 <_dtoa_r+0x644>)
 800b226:	2000      	movs	r0, #0
 800b228:	f7f5 f89e 	bl	8000368 <__aeabi_dsub>
 800b22c:	ec53 2b19 	vmov	r2, r3, d9
 800b230:	f7f5 fcc4 	bl	8000bbc <__aeabi_dcmplt>
 800b234:	2800      	cmp	r0, #0
 800b236:	f040 80b6 	bne.w	800b3a6 <_dtoa_r+0x6e6>
 800b23a:	9b02      	ldr	r3, [sp, #8]
 800b23c:	429d      	cmp	r5, r3
 800b23e:	f43f af7c 	beq.w	800b13a <_dtoa_r+0x47a>
 800b242:	4b31      	ldr	r3, [pc, #196]	; (800b308 <_dtoa_r+0x648>)
 800b244:	ec51 0b19 	vmov	r0, r1, d9
 800b248:	2200      	movs	r2, #0
 800b24a:	f7f5 fa45 	bl	80006d8 <__aeabi_dmul>
 800b24e:	4b2e      	ldr	r3, [pc, #184]	; (800b308 <_dtoa_r+0x648>)
 800b250:	ec41 0b19 	vmov	d9, r0, r1
 800b254:	2200      	movs	r2, #0
 800b256:	4640      	mov	r0, r8
 800b258:	4649      	mov	r1, r9
 800b25a:	f7f5 fa3d 	bl	80006d8 <__aeabi_dmul>
 800b25e:	4680      	mov	r8, r0
 800b260:	4689      	mov	r9, r1
 800b262:	e7c5      	b.n	800b1f0 <_dtoa_r+0x530>
 800b264:	ec51 0b17 	vmov	r0, r1, d7
 800b268:	f7f5 fa36 	bl	80006d8 <__aeabi_dmul>
 800b26c:	9b02      	ldr	r3, [sp, #8]
 800b26e:	9d00      	ldr	r5, [sp, #0]
 800b270:	930f      	str	r3, [sp, #60]	; 0x3c
 800b272:	ec41 0b19 	vmov	d9, r0, r1
 800b276:	4649      	mov	r1, r9
 800b278:	4640      	mov	r0, r8
 800b27a:	f7f5 fcdd 	bl	8000c38 <__aeabi_d2iz>
 800b27e:	4606      	mov	r6, r0
 800b280:	f7f5 f9c0 	bl	8000604 <__aeabi_i2d>
 800b284:	3630      	adds	r6, #48	; 0x30
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	4640      	mov	r0, r8
 800b28c:	4649      	mov	r1, r9
 800b28e:	f7f5 f86b 	bl	8000368 <__aeabi_dsub>
 800b292:	f805 6b01 	strb.w	r6, [r5], #1
 800b296:	9b02      	ldr	r3, [sp, #8]
 800b298:	429d      	cmp	r5, r3
 800b29a:	4680      	mov	r8, r0
 800b29c:	4689      	mov	r9, r1
 800b29e:	f04f 0200 	mov.w	r2, #0
 800b2a2:	d124      	bne.n	800b2ee <_dtoa_r+0x62e>
 800b2a4:	4b1b      	ldr	r3, [pc, #108]	; (800b314 <_dtoa_r+0x654>)
 800b2a6:	ec51 0b19 	vmov	r0, r1, d9
 800b2aa:	f7f5 f85f 	bl	800036c <__adddf3>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	4640      	mov	r0, r8
 800b2b4:	4649      	mov	r1, r9
 800b2b6:	f7f5 fc9f 	bl	8000bf8 <__aeabi_dcmpgt>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d173      	bne.n	800b3a6 <_dtoa_r+0x6e6>
 800b2be:	ec53 2b19 	vmov	r2, r3, d9
 800b2c2:	4914      	ldr	r1, [pc, #80]	; (800b314 <_dtoa_r+0x654>)
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	f7f5 f84f 	bl	8000368 <__aeabi_dsub>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	4640      	mov	r0, r8
 800b2d0:	4649      	mov	r1, r9
 800b2d2:	f7f5 fc73 	bl	8000bbc <__aeabi_dcmplt>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	f43f af2f 	beq.w	800b13a <_dtoa_r+0x47a>
 800b2dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b2de:	1e6b      	subs	r3, r5, #1
 800b2e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b2e6:	2b30      	cmp	r3, #48	; 0x30
 800b2e8:	d0f8      	beq.n	800b2dc <_dtoa_r+0x61c>
 800b2ea:	46bb      	mov	fp, r7
 800b2ec:	e04a      	b.n	800b384 <_dtoa_r+0x6c4>
 800b2ee:	4b06      	ldr	r3, [pc, #24]	; (800b308 <_dtoa_r+0x648>)
 800b2f0:	f7f5 f9f2 	bl	80006d8 <__aeabi_dmul>
 800b2f4:	4680      	mov	r8, r0
 800b2f6:	4689      	mov	r9, r1
 800b2f8:	e7bd      	b.n	800b276 <_dtoa_r+0x5b6>
 800b2fa:	bf00      	nop
 800b2fc:	0800cd98 	.word	0x0800cd98
 800b300:	0800cd70 	.word	0x0800cd70
 800b304:	3ff00000 	.word	0x3ff00000
 800b308:	40240000 	.word	0x40240000
 800b30c:	401c0000 	.word	0x401c0000
 800b310:	40140000 	.word	0x40140000
 800b314:	3fe00000 	.word	0x3fe00000
 800b318:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b31c:	9d00      	ldr	r5, [sp, #0]
 800b31e:	4642      	mov	r2, r8
 800b320:	464b      	mov	r3, r9
 800b322:	4630      	mov	r0, r6
 800b324:	4639      	mov	r1, r7
 800b326:	f7f5 fb01 	bl	800092c <__aeabi_ddiv>
 800b32a:	f7f5 fc85 	bl	8000c38 <__aeabi_d2iz>
 800b32e:	9001      	str	r0, [sp, #4]
 800b330:	f7f5 f968 	bl	8000604 <__aeabi_i2d>
 800b334:	4642      	mov	r2, r8
 800b336:	464b      	mov	r3, r9
 800b338:	f7f5 f9ce 	bl	80006d8 <__aeabi_dmul>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	4630      	mov	r0, r6
 800b342:	4639      	mov	r1, r7
 800b344:	f7f5 f810 	bl	8000368 <__aeabi_dsub>
 800b348:	9e01      	ldr	r6, [sp, #4]
 800b34a:	9f04      	ldr	r7, [sp, #16]
 800b34c:	3630      	adds	r6, #48	; 0x30
 800b34e:	f805 6b01 	strb.w	r6, [r5], #1
 800b352:	9e00      	ldr	r6, [sp, #0]
 800b354:	1bae      	subs	r6, r5, r6
 800b356:	42b7      	cmp	r7, r6
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	d134      	bne.n	800b3c8 <_dtoa_r+0x708>
 800b35e:	f7f5 f805 	bl	800036c <__adddf3>
 800b362:	4642      	mov	r2, r8
 800b364:	464b      	mov	r3, r9
 800b366:	4606      	mov	r6, r0
 800b368:	460f      	mov	r7, r1
 800b36a:	f7f5 fc45 	bl	8000bf8 <__aeabi_dcmpgt>
 800b36e:	b9c8      	cbnz	r0, 800b3a4 <_dtoa_r+0x6e4>
 800b370:	4642      	mov	r2, r8
 800b372:	464b      	mov	r3, r9
 800b374:	4630      	mov	r0, r6
 800b376:	4639      	mov	r1, r7
 800b378:	f7f5 fc16 	bl	8000ba8 <__aeabi_dcmpeq>
 800b37c:	b110      	cbz	r0, 800b384 <_dtoa_r+0x6c4>
 800b37e:	9b01      	ldr	r3, [sp, #4]
 800b380:	07db      	lsls	r3, r3, #31
 800b382:	d40f      	bmi.n	800b3a4 <_dtoa_r+0x6e4>
 800b384:	4651      	mov	r1, sl
 800b386:	4620      	mov	r0, r4
 800b388:	f000 fbde 	bl	800bb48 <_Bfree>
 800b38c:	2300      	movs	r3, #0
 800b38e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b390:	702b      	strb	r3, [r5, #0]
 800b392:	f10b 0301 	add.w	r3, fp, #1
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f43f ace2 	beq.w	800ad64 <_dtoa_r+0xa4>
 800b3a0:	601d      	str	r5, [r3, #0]
 800b3a2:	e4df      	b.n	800ad64 <_dtoa_r+0xa4>
 800b3a4:	465f      	mov	r7, fp
 800b3a6:	462b      	mov	r3, r5
 800b3a8:	461d      	mov	r5, r3
 800b3aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3ae:	2a39      	cmp	r2, #57	; 0x39
 800b3b0:	d106      	bne.n	800b3c0 <_dtoa_r+0x700>
 800b3b2:	9a00      	ldr	r2, [sp, #0]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d1f7      	bne.n	800b3a8 <_dtoa_r+0x6e8>
 800b3b8:	9900      	ldr	r1, [sp, #0]
 800b3ba:	2230      	movs	r2, #48	; 0x30
 800b3bc:	3701      	adds	r7, #1
 800b3be:	700a      	strb	r2, [r1, #0]
 800b3c0:	781a      	ldrb	r2, [r3, #0]
 800b3c2:	3201      	adds	r2, #1
 800b3c4:	701a      	strb	r2, [r3, #0]
 800b3c6:	e790      	b.n	800b2ea <_dtoa_r+0x62a>
 800b3c8:	4ba3      	ldr	r3, [pc, #652]	; (800b658 <_dtoa_r+0x998>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f7f5 f984 	bl	80006d8 <__aeabi_dmul>
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	460f      	mov	r7, r1
 800b3d8:	f7f5 fbe6 	bl	8000ba8 <__aeabi_dcmpeq>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d09e      	beq.n	800b31e <_dtoa_r+0x65e>
 800b3e0:	e7d0      	b.n	800b384 <_dtoa_r+0x6c4>
 800b3e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3e4:	2a00      	cmp	r2, #0
 800b3e6:	f000 80ca 	beq.w	800b57e <_dtoa_r+0x8be>
 800b3ea:	9a07      	ldr	r2, [sp, #28]
 800b3ec:	2a01      	cmp	r2, #1
 800b3ee:	f300 80ad 	bgt.w	800b54c <_dtoa_r+0x88c>
 800b3f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3f4:	2a00      	cmp	r2, #0
 800b3f6:	f000 80a5 	beq.w	800b544 <_dtoa_r+0x884>
 800b3fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b3fe:	9e08      	ldr	r6, [sp, #32]
 800b400:	9d05      	ldr	r5, [sp, #20]
 800b402:	9a05      	ldr	r2, [sp, #20]
 800b404:	441a      	add	r2, r3
 800b406:	9205      	str	r2, [sp, #20]
 800b408:	9a06      	ldr	r2, [sp, #24]
 800b40a:	2101      	movs	r1, #1
 800b40c:	441a      	add	r2, r3
 800b40e:	4620      	mov	r0, r4
 800b410:	9206      	str	r2, [sp, #24]
 800b412:	f000 fc4f 	bl	800bcb4 <__i2b>
 800b416:	4607      	mov	r7, r0
 800b418:	b165      	cbz	r5, 800b434 <_dtoa_r+0x774>
 800b41a:	9b06      	ldr	r3, [sp, #24]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	dd09      	ble.n	800b434 <_dtoa_r+0x774>
 800b420:	42ab      	cmp	r3, r5
 800b422:	9a05      	ldr	r2, [sp, #20]
 800b424:	bfa8      	it	ge
 800b426:	462b      	movge	r3, r5
 800b428:	1ad2      	subs	r2, r2, r3
 800b42a:	9205      	str	r2, [sp, #20]
 800b42c:	9a06      	ldr	r2, [sp, #24]
 800b42e:	1aed      	subs	r5, r5, r3
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	9306      	str	r3, [sp, #24]
 800b434:	9b08      	ldr	r3, [sp, #32]
 800b436:	b1f3      	cbz	r3, 800b476 <_dtoa_r+0x7b6>
 800b438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f000 80a3 	beq.w	800b586 <_dtoa_r+0x8c6>
 800b440:	2e00      	cmp	r6, #0
 800b442:	dd10      	ble.n	800b466 <_dtoa_r+0x7a6>
 800b444:	4639      	mov	r1, r7
 800b446:	4632      	mov	r2, r6
 800b448:	4620      	mov	r0, r4
 800b44a:	f000 fcf3 	bl	800be34 <__pow5mult>
 800b44e:	4652      	mov	r2, sl
 800b450:	4601      	mov	r1, r0
 800b452:	4607      	mov	r7, r0
 800b454:	4620      	mov	r0, r4
 800b456:	f000 fc43 	bl	800bce0 <__multiply>
 800b45a:	4651      	mov	r1, sl
 800b45c:	4680      	mov	r8, r0
 800b45e:	4620      	mov	r0, r4
 800b460:	f000 fb72 	bl	800bb48 <_Bfree>
 800b464:	46c2      	mov	sl, r8
 800b466:	9b08      	ldr	r3, [sp, #32]
 800b468:	1b9a      	subs	r2, r3, r6
 800b46a:	d004      	beq.n	800b476 <_dtoa_r+0x7b6>
 800b46c:	4651      	mov	r1, sl
 800b46e:	4620      	mov	r0, r4
 800b470:	f000 fce0 	bl	800be34 <__pow5mult>
 800b474:	4682      	mov	sl, r0
 800b476:	2101      	movs	r1, #1
 800b478:	4620      	mov	r0, r4
 800b47a:	f000 fc1b 	bl	800bcb4 <__i2b>
 800b47e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b480:	2b00      	cmp	r3, #0
 800b482:	4606      	mov	r6, r0
 800b484:	f340 8081 	ble.w	800b58a <_dtoa_r+0x8ca>
 800b488:	461a      	mov	r2, r3
 800b48a:	4601      	mov	r1, r0
 800b48c:	4620      	mov	r0, r4
 800b48e:	f000 fcd1 	bl	800be34 <__pow5mult>
 800b492:	9b07      	ldr	r3, [sp, #28]
 800b494:	2b01      	cmp	r3, #1
 800b496:	4606      	mov	r6, r0
 800b498:	dd7a      	ble.n	800b590 <_dtoa_r+0x8d0>
 800b49a:	f04f 0800 	mov.w	r8, #0
 800b49e:	6933      	ldr	r3, [r6, #16]
 800b4a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b4a4:	6918      	ldr	r0, [r3, #16]
 800b4a6:	f000 fbb7 	bl	800bc18 <__hi0bits>
 800b4aa:	f1c0 0020 	rsb	r0, r0, #32
 800b4ae:	9b06      	ldr	r3, [sp, #24]
 800b4b0:	4418      	add	r0, r3
 800b4b2:	f010 001f 	ands.w	r0, r0, #31
 800b4b6:	f000 8094 	beq.w	800b5e2 <_dtoa_r+0x922>
 800b4ba:	f1c0 0320 	rsb	r3, r0, #32
 800b4be:	2b04      	cmp	r3, #4
 800b4c0:	f340 8085 	ble.w	800b5ce <_dtoa_r+0x90e>
 800b4c4:	9b05      	ldr	r3, [sp, #20]
 800b4c6:	f1c0 001c 	rsb	r0, r0, #28
 800b4ca:	4403      	add	r3, r0
 800b4cc:	9305      	str	r3, [sp, #20]
 800b4ce:	9b06      	ldr	r3, [sp, #24]
 800b4d0:	4403      	add	r3, r0
 800b4d2:	4405      	add	r5, r0
 800b4d4:	9306      	str	r3, [sp, #24]
 800b4d6:	9b05      	ldr	r3, [sp, #20]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	dd05      	ble.n	800b4e8 <_dtoa_r+0x828>
 800b4dc:	4651      	mov	r1, sl
 800b4de:	461a      	mov	r2, r3
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f000 fd01 	bl	800bee8 <__lshift>
 800b4e6:	4682      	mov	sl, r0
 800b4e8:	9b06      	ldr	r3, [sp, #24]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	dd05      	ble.n	800b4fa <_dtoa_r+0x83a>
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f000 fcf8 	bl	800bee8 <__lshift>
 800b4f8:	4606      	mov	r6, r0
 800b4fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d072      	beq.n	800b5e6 <_dtoa_r+0x926>
 800b500:	4631      	mov	r1, r6
 800b502:	4650      	mov	r0, sl
 800b504:	f000 fd5c 	bl	800bfc0 <__mcmp>
 800b508:	2800      	cmp	r0, #0
 800b50a:	da6c      	bge.n	800b5e6 <_dtoa_r+0x926>
 800b50c:	2300      	movs	r3, #0
 800b50e:	4651      	mov	r1, sl
 800b510:	220a      	movs	r2, #10
 800b512:	4620      	mov	r0, r4
 800b514:	f000 fb3a 	bl	800bb8c <__multadd>
 800b518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b51e:	4682      	mov	sl, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	f000 81b0 	beq.w	800b886 <_dtoa_r+0xbc6>
 800b526:	2300      	movs	r3, #0
 800b528:	4639      	mov	r1, r7
 800b52a:	220a      	movs	r2, #10
 800b52c:	4620      	mov	r0, r4
 800b52e:	f000 fb2d 	bl	800bb8c <__multadd>
 800b532:	9b01      	ldr	r3, [sp, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	4607      	mov	r7, r0
 800b538:	f300 8096 	bgt.w	800b668 <_dtoa_r+0x9a8>
 800b53c:	9b07      	ldr	r3, [sp, #28]
 800b53e:	2b02      	cmp	r3, #2
 800b540:	dc59      	bgt.n	800b5f6 <_dtoa_r+0x936>
 800b542:	e091      	b.n	800b668 <_dtoa_r+0x9a8>
 800b544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b54a:	e758      	b.n	800b3fe <_dtoa_r+0x73e>
 800b54c:	9b04      	ldr	r3, [sp, #16]
 800b54e:	1e5e      	subs	r6, r3, #1
 800b550:	9b08      	ldr	r3, [sp, #32]
 800b552:	42b3      	cmp	r3, r6
 800b554:	bfbf      	itttt	lt
 800b556:	9b08      	ldrlt	r3, [sp, #32]
 800b558:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b55a:	9608      	strlt	r6, [sp, #32]
 800b55c:	1af3      	sublt	r3, r6, r3
 800b55e:	bfb4      	ite	lt
 800b560:	18d2      	addlt	r2, r2, r3
 800b562:	1b9e      	subge	r6, r3, r6
 800b564:	9b04      	ldr	r3, [sp, #16]
 800b566:	bfbc      	itt	lt
 800b568:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b56a:	2600      	movlt	r6, #0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	bfb7      	itett	lt
 800b570:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b574:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b578:	1a9d      	sublt	r5, r3, r2
 800b57a:	2300      	movlt	r3, #0
 800b57c:	e741      	b.n	800b402 <_dtoa_r+0x742>
 800b57e:	9e08      	ldr	r6, [sp, #32]
 800b580:	9d05      	ldr	r5, [sp, #20]
 800b582:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b584:	e748      	b.n	800b418 <_dtoa_r+0x758>
 800b586:	9a08      	ldr	r2, [sp, #32]
 800b588:	e770      	b.n	800b46c <_dtoa_r+0x7ac>
 800b58a:	9b07      	ldr	r3, [sp, #28]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	dc19      	bgt.n	800b5c4 <_dtoa_r+0x904>
 800b590:	9b02      	ldr	r3, [sp, #8]
 800b592:	b9bb      	cbnz	r3, 800b5c4 <_dtoa_r+0x904>
 800b594:	9b03      	ldr	r3, [sp, #12]
 800b596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b59a:	b99b      	cbnz	r3, 800b5c4 <_dtoa_r+0x904>
 800b59c:	9b03      	ldr	r3, [sp, #12]
 800b59e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5a2:	0d1b      	lsrs	r3, r3, #20
 800b5a4:	051b      	lsls	r3, r3, #20
 800b5a6:	b183      	cbz	r3, 800b5ca <_dtoa_r+0x90a>
 800b5a8:	9b05      	ldr	r3, [sp, #20]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	9305      	str	r3, [sp, #20]
 800b5ae:	9b06      	ldr	r3, [sp, #24]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	9306      	str	r3, [sp, #24]
 800b5b4:	f04f 0801 	mov.w	r8, #1
 800b5b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f47f af6f 	bne.w	800b49e <_dtoa_r+0x7de>
 800b5c0:	2001      	movs	r0, #1
 800b5c2:	e774      	b.n	800b4ae <_dtoa_r+0x7ee>
 800b5c4:	f04f 0800 	mov.w	r8, #0
 800b5c8:	e7f6      	b.n	800b5b8 <_dtoa_r+0x8f8>
 800b5ca:	4698      	mov	r8, r3
 800b5cc:	e7f4      	b.n	800b5b8 <_dtoa_r+0x8f8>
 800b5ce:	d082      	beq.n	800b4d6 <_dtoa_r+0x816>
 800b5d0:	9a05      	ldr	r2, [sp, #20]
 800b5d2:	331c      	adds	r3, #28
 800b5d4:	441a      	add	r2, r3
 800b5d6:	9205      	str	r2, [sp, #20]
 800b5d8:	9a06      	ldr	r2, [sp, #24]
 800b5da:	441a      	add	r2, r3
 800b5dc:	441d      	add	r5, r3
 800b5de:	9206      	str	r2, [sp, #24]
 800b5e0:	e779      	b.n	800b4d6 <_dtoa_r+0x816>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	e7f4      	b.n	800b5d0 <_dtoa_r+0x910>
 800b5e6:	9b04      	ldr	r3, [sp, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	dc37      	bgt.n	800b65c <_dtoa_r+0x99c>
 800b5ec:	9b07      	ldr	r3, [sp, #28]
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	dd34      	ble.n	800b65c <_dtoa_r+0x99c>
 800b5f2:	9b04      	ldr	r3, [sp, #16]
 800b5f4:	9301      	str	r3, [sp, #4]
 800b5f6:	9b01      	ldr	r3, [sp, #4]
 800b5f8:	b963      	cbnz	r3, 800b614 <_dtoa_r+0x954>
 800b5fa:	4631      	mov	r1, r6
 800b5fc:	2205      	movs	r2, #5
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 fac4 	bl	800bb8c <__multadd>
 800b604:	4601      	mov	r1, r0
 800b606:	4606      	mov	r6, r0
 800b608:	4650      	mov	r0, sl
 800b60a:	f000 fcd9 	bl	800bfc0 <__mcmp>
 800b60e:	2800      	cmp	r0, #0
 800b610:	f73f adbb 	bgt.w	800b18a <_dtoa_r+0x4ca>
 800b614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b616:	9d00      	ldr	r5, [sp, #0]
 800b618:	ea6f 0b03 	mvn.w	fp, r3
 800b61c:	f04f 0800 	mov.w	r8, #0
 800b620:	4631      	mov	r1, r6
 800b622:	4620      	mov	r0, r4
 800b624:	f000 fa90 	bl	800bb48 <_Bfree>
 800b628:	2f00      	cmp	r7, #0
 800b62a:	f43f aeab 	beq.w	800b384 <_dtoa_r+0x6c4>
 800b62e:	f1b8 0f00 	cmp.w	r8, #0
 800b632:	d005      	beq.n	800b640 <_dtoa_r+0x980>
 800b634:	45b8      	cmp	r8, r7
 800b636:	d003      	beq.n	800b640 <_dtoa_r+0x980>
 800b638:	4641      	mov	r1, r8
 800b63a:	4620      	mov	r0, r4
 800b63c:	f000 fa84 	bl	800bb48 <_Bfree>
 800b640:	4639      	mov	r1, r7
 800b642:	4620      	mov	r0, r4
 800b644:	f000 fa80 	bl	800bb48 <_Bfree>
 800b648:	e69c      	b.n	800b384 <_dtoa_r+0x6c4>
 800b64a:	2600      	movs	r6, #0
 800b64c:	4637      	mov	r7, r6
 800b64e:	e7e1      	b.n	800b614 <_dtoa_r+0x954>
 800b650:	46bb      	mov	fp, r7
 800b652:	4637      	mov	r7, r6
 800b654:	e599      	b.n	800b18a <_dtoa_r+0x4ca>
 800b656:	bf00      	nop
 800b658:	40240000 	.word	0x40240000
 800b65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f000 80c8 	beq.w	800b7f4 <_dtoa_r+0xb34>
 800b664:	9b04      	ldr	r3, [sp, #16]
 800b666:	9301      	str	r3, [sp, #4]
 800b668:	2d00      	cmp	r5, #0
 800b66a:	dd05      	ble.n	800b678 <_dtoa_r+0x9b8>
 800b66c:	4639      	mov	r1, r7
 800b66e:	462a      	mov	r2, r5
 800b670:	4620      	mov	r0, r4
 800b672:	f000 fc39 	bl	800bee8 <__lshift>
 800b676:	4607      	mov	r7, r0
 800b678:	f1b8 0f00 	cmp.w	r8, #0
 800b67c:	d05b      	beq.n	800b736 <_dtoa_r+0xa76>
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	4620      	mov	r0, r4
 800b682:	f000 fa21 	bl	800bac8 <_Balloc>
 800b686:	4605      	mov	r5, r0
 800b688:	b928      	cbnz	r0, 800b696 <_dtoa_r+0x9d6>
 800b68a:	4b83      	ldr	r3, [pc, #524]	; (800b898 <_dtoa_r+0xbd8>)
 800b68c:	4602      	mov	r2, r0
 800b68e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b692:	f7ff bb2e 	b.w	800acf2 <_dtoa_r+0x32>
 800b696:	693a      	ldr	r2, [r7, #16]
 800b698:	3202      	adds	r2, #2
 800b69a:	0092      	lsls	r2, r2, #2
 800b69c:	f107 010c 	add.w	r1, r7, #12
 800b6a0:	300c      	adds	r0, #12
 800b6a2:	f7ff fa76 	bl	800ab92 <memcpy>
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 fc1c 	bl	800bee8 <__lshift>
 800b6b0:	9b00      	ldr	r3, [sp, #0]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	9304      	str	r3, [sp, #16]
 800b6b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	9308      	str	r3, [sp, #32]
 800b6be:	9b02      	ldr	r3, [sp, #8]
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	46b8      	mov	r8, r7
 800b6c6:	9306      	str	r3, [sp, #24]
 800b6c8:	4607      	mov	r7, r0
 800b6ca:	9b04      	ldr	r3, [sp, #16]
 800b6cc:	4631      	mov	r1, r6
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	4650      	mov	r0, sl
 800b6d2:	9301      	str	r3, [sp, #4]
 800b6d4:	f7ff fa6b 	bl	800abae <quorem>
 800b6d8:	4641      	mov	r1, r8
 800b6da:	9002      	str	r0, [sp, #8]
 800b6dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b6e0:	4650      	mov	r0, sl
 800b6e2:	f000 fc6d 	bl	800bfc0 <__mcmp>
 800b6e6:	463a      	mov	r2, r7
 800b6e8:	9005      	str	r0, [sp, #20]
 800b6ea:	4631      	mov	r1, r6
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f000 fc83 	bl	800bff8 <__mdiff>
 800b6f2:	68c2      	ldr	r2, [r0, #12]
 800b6f4:	4605      	mov	r5, r0
 800b6f6:	bb02      	cbnz	r2, 800b73a <_dtoa_r+0xa7a>
 800b6f8:	4601      	mov	r1, r0
 800b6fa:	4650      	mov	r0, sl
 800b6fc:	f000 fc60 	bl	800bfc0 <__mcmp>
 800b700:	4602      	mov	r2, r0
 800b702:	4629      	mov	r1, r5
 800b704:	4620      	mov	r0, r4
 800b706:	9209      	str	r2, [sp, #36]	; 0x24
 800b708:	f000 fa1e 	bl	800bb48 <_Bfree>
 800b70c:	9b07      	ldr	r3, [sp, #28]
 800b70e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b710:	9d04      	ldr	r5, [sp, #16]
 800b712:	ea43 0102 	orr.w	r1, r3, r2
 800b716:	9b06      	ldr	r3, [sp, #24]
 800b718:	4319      	orrs	r1, r3
 800b71a:	d110      	bne.n	800b73e <_dtoa_r+0xa7e>
 800b71c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b720:	d029      	beq.n	800b776 <_dtoa_r+0xab6>
 800b722:	9b05      	ldr	r3, [sp, #20]
 800b724:	2b00      	cmp	r3, #0
 800b726:	dd02      	ble.n	800b72e <_dtoa_r+0xa6e>
 800b728:	9b02      	ldr	r3, [sp, #8]
 800b72a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b72e:	9b01      	ldr	r3, [sp, #4]
 800b730:	f883 9000 	strb.w	r9, [r3]
 800b734:	e774      	b.n	800b620 <_dtoa_r+0x960>
 800b736:	4638      	mov	r0, r7
 800b738:	e7ba      	b.n	800b6b0 <_dtoa_r+0x9f0>
 800b73a:	2201      	movs	r2, #1
 800b73c:	e7e1      	b.n	800b702 <_dtoa_r+0xa42>
 800b73e:	9b05      	ldr	r3, [sp, #20]
 800b740:	2b00      	cmp	r3, #0
 800b742:	db04      	blt.n	800b74e <_dtoa_r+0xa8e>
 800b744:	9907      	ldr	r1, [sp, #28]
 800b746:	430b      	orrs	r3, r1
 800b748:	9906      	ldr	r1, [sp, #24]
 800b74a:	430b      	orrs	r3, r1
 800b74c:	d120      	bne.n	800b790 <_dtoa_r+0xad0>
 800b74e:	2a00      	cmp	r2, #0
 800b750:	dded      	ble.n	800b72e <_dtoa_r+0xa6e>
 800b752:	4651      	mov	r1, sl
 800b754:	2201      	movs	r2, #1
 800b756:	4620      	mov	r0, r4
 800b758:	f000 fbc6 	bl	800bee8 <__lshift>
 800b75c:	4631      	mov	r1, r6
 800b75e:	4682      	mov	sl, r0
 800b760:	f000 fc2e 	bl	800bfc0 <__mcmp>
 800b764:	2800      	cmp	r0, #0
 800b766:	dc03      	bgt.n	800b770 <_dtoa_r+0xab0>
 800b768:	d1e1      	bne.n	800b72e <_dtoa_r+0xa6e>
 800b76a:	f019 0f01 	tst.w	r9, #1
 800b76e:	d0de      	beq.n	800b72e <_dtoa_r+0xa6e>
 800b770:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b774:	d1d8      	bne.n	800b728 <_dtoa_r+0xa68>
 800b776:	9a01      	ldr	r2, [sp, #4]
 800b778:	2339      	movs	r3, #57	; 0x39
 800b77a:	7013      	strb	r3, [r2, #0]
 800b77c:	462b      	mov	r3, r5
 800b77e:	461d      	mov	r5, r3
 800b780:	3b01      	subs	r3, #1
 800b782:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b786:	2a39      	cmp	r2, #57	; 0x39
 800b788:	d06c      	beq.n	800b864 <_dtoa_r+0xba4>
 800b78a:	3201      	adds	r2, #1
 800b78c:	701a      	strb	r2, [r3, #0]
 800b78e:	e747      	b.n	800b620 <_dtoa_r+0x960>
 800b790:	2a00      	cmp	r2, #0
 800b792:	dd07      	ble.n	800b7a4 <_dtoa_r+0xae4>
 800b794:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b798:	d0ed      	beq.n	800b776 <_dtoa_r+0xab6>
 800b79a:	9a01      	ldr	r2, [sp, #4]
 800b79c:	f109 0301 	add.w	r3, r9, #1
 800b7a0:	7013      	strb	r3, [r2, #0]
 800b7a2:	e73d      	b.n	800b620 <_dtoa_r+0x960>
 800b7a4:	9b04      	ldr	r3, [sp, #16]
 800b7a6:	9a08      	ldr	r2, [sp, #32]
 800b7a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d043      	beq.n	800b838 <_dtoa_r+0xb78>
 800b7b0:	4651      	mov	r1, sl
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	220a      	movs	r2, #10
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f000 f9e8 	bl	800bb8c <__multadd>
 800b7bc:	45b8      	cmp	r8, r7
 800b7be:	4682      	mov	sl, r0
 800b7c0:	f04f 0300 	mov.w	r3, #0
 800b7c4:	f04f 020a 	mov.w	r2, #10
 800b7c8:	4641      	mov	r1, r8
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	d107      	bne.n	800b7de <_dtoa_r+0xb1e>
 800b7ce:	f000 f9dd 	bl	800bb8c <__multadd>
 800b7d2:	4680      	mov	r8, r0
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	9b04      	ldr	r3, [sp, #16]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	9304      	str	r3, [sp, #16]
 800b7dc:	e775      	b.n	800b6ca <_dtoa_r+0xa0a>
 800b7de:	f000 f9d5 	bl	800bb8c <__multadd>
 800b7e2:	4639      	mov	r1, r7
 800b7e4:	4680      	mov	r8, r0
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	220a      	movs	r2, #10
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f000 f9ce 	bl	800bb8c <__multadd>
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	e7f0      	b.n	800b7d6 <_dtoa_r+0xb16>
 800b7f4:	9b04      	ldr	r3, [sp, #16]
 800b7f6:	9301      	str	r3, [sp, #4]
 800b7f8:	9d00      	ldr	r5, [sp, #0]
 800b7fa:	4631      	mov	r1, r6
 800b7fc:	4650      	mov	r0, sl
 800b7fe:	f7ff f9d6 	bl	800abae <quorem>
 800b802:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b806:	9b00      	ldr	r3, [sp, #0]
 800b808:	f805 9b01 	strb.w	r9, [r5], #1
 800b80c:	1aea      	subs	r2, r5, r3
 800b80e:	9b01      	ldr	r3, [sp, #4]
 800b810:	4293      	cmp	r3, r2
 800b812:	dd07      	ble.n	800b824 <_dtoa_r+0xb64>
 800b814:	4651      	mov	r1, sl
 800b816:	2300      	movs	r3, #0
 800b818:	220a      	movs	r2, #10
 800b81a:	4620      	mov	r0, r4
 800b81c:	f000 f9b6 	bl	800bb8c <__multadd>
 800b820:	4682      	mov	sl, r0
 800b822:	e7ea      	b.n	800b7fa <_dtoa_r+0xb3a>
 800b824:	9b01      	ldr	r3, [sp, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	bfc8      	it	gt
 800b82a:	461d      	movgt	r5, r3
 800b82c:	9b00      	ldr	r3, [sp, #0]
 800b82e:	bfd8      	it	le
 800b830:	2501      	movle	r5, #1
 800b832:	441d      	add	r5, r3
 800b834:	f04f 0800 	mov.w	r8, #0
 800b838:	4651      	mov	r1, sl
 800b83a:	2201      	movs	r2, #1
 800b83c:	4620      	mov	r0, r4
 800b83e:	f000 fb53 	bl	800bee8 <__lshift>
 800b842:	4631      	mov	r1, r6
 800b844:	4682      	mov	sl, r0
 800b846:	f000 fbbb 	bl	800bfc0 <__mcmp>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	dc96      	bgt.n	800b77c <_dtoa_r+0xabc>
 800b84e:	d102      	bne.n	800b856 <_dtoa_r+0xb96>
 800b850:	f019 0f01 	tst.w	r9, #1
 800b854:	d192      	bne.n	800b77c <_dtoa_r+0xabc>
 800b856:	462b      	mov	r3, r5
 800b858:	461d      	mov	r5, r3
 800b85a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b85e:	2a30      	cmp	r2, #48	; 0x30
 800b860:	d0fa      	beq.n	800b858 <_dtoa_r+0xb98>
 800b862:	e6dd      	b.n	800b620 <_dtoa_r+0x960>
 800b864:	9a00      	ldr	r2, [sp, #0]
 800b866:	429a      	cmp	r2, r3
 800b868:	d189      	bne.n	800b77e <_dtoa_r+0xabe>
 800b86a:	f10b 0b01 	add.w	fp, fp, #1
 800b86e:	2331      	movs	r3, #49	; 0x31
 800b870:	e796      	b.n	800b7a0 <_dtoa_r+0xae0>
 800b872:	4b0a      	ldr	r3, [pc, #40]	; (800b89c <_dtoa_r+0xbdc>)
 800b874:	f7ff ba99 	b.w	800adaa <_dtoa_r+0xea>
 800b878:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f47f aa6d 	bne.w	800ad5a <_dtoa_r+0x9a>
 800b880:	4b07      	ldr	r3, [pc, #28]	; (800b8a0 <_dtoa_r+0xbe0>)
 800b882:	f7ff ba92 	b.w	800adaa <_dtoa_r+0xea>
 800b886:	9b01      	ldr	r3, [sp, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	dcb5      	bgt.n	800b7f8 <_dtoa_r+0xb38>
 800b88c:	9b07      	ldr	r3, [sp, #28]
 800b88e:	2b02      	cmp	r3, #2
 800b890:	f73f aeb1 	bgt.w	800b5f6 <_dtoa_r+0x936>
 800b894:	e7b0      	b.n	800b7f8 <_dtoa_r+0xb38>
 800b896:	bf00      	nop
 800b898:	0800cd01 	.word	0x0800cd01
 800b89c:	0800cc57 	.word	0x0800cc57
 800b8a0:	0800cc85 	.word	0x0800cc85

0800b8a4 <_free_r>:
 800b8a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8a6:	2900      	cmp	r1, #0
 800b8a8:	d044      	beq.n	800b934 <_free_r+0x90>
 800b8aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8ae:	9001      	str	r0, [sp, #4]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f1a1 0404 	sub.w	r4, r1, #4
 800b8b6:	bfb8      	it	lt
 800b8b8:	18e4      	addlt	r4, r4, r3
 800b8ba:	f000 f8f9 	bl	800bab0 <__malloc_lock>
 800b8be:	4a1e      	ldr	r2, [pc, #120]	; (800b938 <_free_r+0x94>)
 800b8c0:	9801      	ldr	r0, [sp, #4]
 800b8c2:	6813      	ldr	r3, [r2, #0]
 800b8c4:	b933      	cbnz	r3, 800b8d4 <_free_r+0x30>
 800b8c6:	6063      	str	r3, [r4, #4]
 800b8c8:	6014      	str	r4, [r2, #0]
 800b8ca:	b003      	add	sp, #12
 800b8cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8d0:	f000 b8f4 	b.w	800babc <__malloc_unlock>
 800b8d4:	42a3      	cmp	r3, r4
 800b8d6:	d908      	bls.n	800b8ea <_free_r+0x46>
 800b8d8:	6825      	ldr	r5, [r4, #0]
 800b8da:	1961      	adds	r1, r4, r5
 800b8dc:	428b      	cmp	r3, r1
 800b8de:	bf01      	itttt	eq
 800b8e0:	6819      	ldreq	r1, [r3, #0]
 800b8e2:	685b      	ldreq	r3, [r3, #4]
 800b8e4:	1949      	addeq	r1, r1, r5
 800b8e6:	6021      	streq	r1, [r4, #0]
 800b8e8:	e7ed      	b.n	800b8c6 <_free_r+0x22>
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	b10b      	cbz	r3, 800b8f4 <_free_r+0x50>
 800b8f0:	42a3      	cmp	r3, r4
 800b8f2:	d9fa      	bls.n	800b8ea <_free_r+0x46>
 800b8f4:	6811      	ldr	r1, [r2, #0]
 800b8f6:	1855      	adds	r5, r2, r1
 800b8f8:	42a5      	cmp	r5, r4
 800b8fa:	d10b      	bne.n	800b914 <_free_r+0x70>
 800b8fc:	6824      	ldr	r4, [r4, #0]
 800b8fe:	4421      	add	r1, r4
 800b900:	1854      	adds	r4, r2, r1
 800b902:	42a3      	cmp	r3, r4
 800b904:	6011      	str	r1, [r2, #0]
 800b906:	d1e0      	bne.n	800b8ca <_free_r+0x26>
 800b908:	681c      	ldr	r4, [r3, #0]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	6053      	str	r3, [r2, #4]
 800b90e:	440c      	add	r4, r1
 800b910:	6014      	str	r4, [r2, #0]
 800b912:	e7da      	b.n	800b8ca <_free_r+0x26>
 800b914:	d902      	bls.n	800b91c <_free_r+0x78>
 800b916:	230c      	movs	r3, #12
 800b918:	6003      	str	r3, [r0, #0]
 800b91a:	e7d6      	b.n	800b8ca <_free_r+0x26>
 800b91c:	6825      	ldr	r5, [r4, #0]
 800b91e:	1961      	adds	r1, r4, r5
 800b920:	428b      	cmp	r3, r1
 800b922:	bf04      	itt	eq
 800b924:	6819      	ldreq	r1, [r3, #0]
 800b926:	685b      	ldreq	r3, [r3, #4]
 800b928:	6063      	str	r3, [r4, #4]
 800b92a:	bf04      	itt	eq
 800b92c:	1949      	addeq	r1, r1, r5
 800b92e:	6021      	streq	r1, [r4, #0]
 800b930:	6054      	str	r4, [r2, #4]
 800b932:	e7ca      	b.n	800b8ca <_free_r+0x26>
 800b934:	b003      	add	sp, #12
 800b936:	bd30      	pop	{r4, r5, pc}
 800b938:	20013ce0 	.word	0x20013ce0

0800b93c <malloc>:
 800b93c:	4b02      	ldr	r3, [pc, #8]	; (800b948 <malloc+0xc>)
 800b93e:	4601      	mov	r1, r0
 800b940:	6818      	ldr	r0, [r3, #0]
 800b942:	f000 b823 	b.w	800b98c <_malloc_r>
 800b946:	bf00      	nop
 800b948:	200001d8 	.word	0x200001d8

0800b94c <sbrk_aligned>:
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	4e0e      	ldr	r6, [pc, #56]	; (800b988 <sbrk_aligned+0x3c>)
 800b950:	460c      	mov	r4, r1
 800b952:	6831      	ldr	r1, [r6, #0]
 800b954:	4605      	mov	r5, r0
 800b956:	b911      	cbnz	r1, 800b95e <sbrk_aligned+0x12>
 800b958:	f000 fcee 	bl	800c338 <_sbrk_r>
 800b95c:	6030      	str	r0, [r6, #0]
 800b95e:	4621      	mov	r1, r4
 800b960:	4628      	mov	r0, r5
 800b962:	f000 fce9 	bl	800c338 <_sbrk_r>
 800b966:	1c43      	adds	r3, r0, #1
 800b968:	d00a      	beq.n	800b980 <sbrk_aligned+0x34>
 800b96a:	1cc4      	adds	r4, r0, #3
 800b96c:	f024 0403 	bic.w	r4, r4, #3
 800b970:	42a0      	cmp	r0, r4
 800b972:	d007      	beq.n	800b984 <sbrk_aligned+0x38>
 800b974:	1a21      	subs	r1, r4, r0
 800b976:	4628      	mov	r0, r5
 800b978:	f000 fcde 	bl	800c338 <_sbrk_r>
 800b97c:	3001      	adds	r0, #1
 800b97e:	d101      	bne.n	800b984 <sbrk_aligned+0x38>
 800b980:	f04f 34ff 	mov.w	r4, #4294967295
 800b984:	4620      	mov	r0, r4
 800b986:	bd70      	pop	{r4, r5, r6, pc}
 800b988:	20013ce4 	.word	0x20013ce4

0800b98c <_malloc_r>:
 800b98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b990:	1ccd      	adds	r5, r1, #3
 800b992:	f025 0503 	bic.w	r5, r5, #3
 800b996:	3508      	adds	r5, #8
 800b998:	2d0c      	cmp	r5, #12
 800b99a:	bf38      	it	cc
 800b99c:	250c      	movcc	r5, #12
 800b99e:	2d00      	cmp	r5, #0
 800b9a0:	4607      	mov	r7, r0
 800b9a2:	db01      	blt.n	800b9a8 <_malloc_r+0x1c>
 800b9a4:	42a9      	cmp	r1, r5
 800b9a6:	d905      	bls.n	800b9b4 <_malloc_r+0x28>
 800b9a8:	230c      	movs	r3, #12
 800b9aa:	603b      	str	r3, [r7, #0]
 800b9ac:	2600      	movs	r6, #0
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba88 <_malloc_r+0xfc>
 800b9b8:	f000 f87a 	bl	800bab0 <__malloc_lock>
 800b9bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b9c0:	461c      	mov	r4, r3
 800b9c2:	bb5c      	cbnz	r4, 800ba1c <_malloc_r+0x90>
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	f7ff ffc0 	bl	800b94c <sbrk_aligned>
 800b9cc:	1c43      	adds	r3, r0, #1
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	d155      	bne.n	800ba7e <_malloc_r+0xf2>
 800b9d2:	f8d8 4000 	ldr.w	r4, [r8]
 800b9d6:	4626      	mov	r6, r4
 800b9d8:	2e00      	cmp	r6, #0
 800b9da:	d145      	bne.n	800ba68 <_malloc_r+0xdc>
 800b9dc:	2c00      	cmp	r4, #0
 800b9de:	d048      	beq.n	800ba72 <_malloc_r+0xe6>
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	4631      	mov	r1, r6
 800b9e4:	4638      	mov	r0, r7
 800b9e6:	eb04 0903 	add.w	r9, r4, r3
 800b9ea:	f000 fca5 	bl	800c338 <_sbrk_r>
 800b9ee:	4581      	cmp	r9, r0
 800b9f0:	d13f      	bne.n	800ba72 <_malloc_r+0xe6>
 800b9f2:	6821      	ldr	r1, [r4, #0]
 800b9f4:	1a6d      	subs	r5, r5, r1
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	4638      	mov	r0, r7
 800b9fa:	f7ff ffa7 	bl	800b94c <sbrk_aligned>
 800b9fe:	3001      	adds	r0, #1
 800ba00:	d037      	beq.n	800ba72 <_malloc_r+0xe6>
 800ba02:	6823      	ldr	r3, [r4, #0]
 800ba04:	442b      	add	r3, r5
 800ba06:	6023      	str	r3, [r4, #0]
 800ba08:	f8d8 3000 	ldr.w	r3, [r8]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d038      	beq.n	800ba82 <_malloc_r+0xf6>
 800ba10:	685a      	ldr	r2, [r3, #4]
 800ba12:	42a2      	cmp	r2, r4
 800ba14:	d12b      	bne.n	800ba6e <_malloc_r+0xe2>
 800ba16:	2200      	movs	r2, #0
 800ba18:	605a      	str	r2, [r3, #4]
 800ba1a:	e00f      	b.n	800ba3c <_malloc_r+0xb0>
 800ba1c:	6822      	ldr	r2, [r4, #0]
 800ba1e:	1b52      	subs	r2, r2, r5
 800ba20:	d41f      	bmi.n	800ba62 <_malloc_r+0xd6>
 800ba22:	2a0b      	cmp	r2, #11
 800ba24:	d917      	bls.n	800ba56 <_malloc_r+0xca>
 800ba26:	1961      	adds	r1, r4, r5
 800ba28:	42a3      	cmp	r3, r4
 800ba2a:	6025      	str	r5, [r4, #0]
 800ba2c:	bf18      	it	ne
 800ba2e:	6059      	strne	r1, [r3, #4]
 800ba30:	6863      	ldr	r3, [r4, #4]
 800ba32:	bf08      	it	eq
 800ba34:	f8c8 1000 	streq.w	r1, [r8]
 800ba38:	5162      	str	r2, [r4, r5]
 800ba3a:	604b      	str	r3, [r1, #4]
 800ba3c:	4638      	mov	r0, r7
 800ba3e:	f104 060b 	add.w	r6, r4, #11
 800ba42:	f000 f83b 	bl	800babc <__malloc_unlock>
 800ba46:	f026 0607 	bic.w	r6, r6, #7
 800ba4a:	1d23      	adds	r3, r4, #4
 800ba4c:	1af2      	subs	r2, r6, r3
 800ba4e:	d0ae      	beq.n	800b9ae <_malloc_r+0x22>
 800ba50:	1b9b      	subs	r3, r3, r6
 800ba52:	50a3      	str	r3, [r4, r2]
 800ba54:	e7ab      	b.n	800b9ae <_malloc_r+0x22>
 800ba56:	42a3      	cmp	r3, r4
 800ba58:	6862      	ldr	r2, [r4, #4]
 800ba5a:	d1dd      	bne.n	800ba18 <_malloc_r+0x8c>
 800ba5c:	f8c8 2000 	str.w	r2, [r8]
 800ba60:	e7ec      	b.n	800ba3c <_malloc_r+0xb0>
 800ba62:	4623      	mov	r3, r4
 800ba64:	6864      	ldr	r4, [r4, #4]
 800ba66:	e7ac      	b.n	800b9c2 <_malloc_r+0x36>
 800ba68:	4634      	mov	r4, r6
 800ba6a:	6876      	ldr	r6, [r6, #4]
 800ba6c:	e7b4      	b.n	800b9d8 <_malloc_r+0x4c>
 800ba6e:	4613      	mov	r3, r2
 800ba70:	e7cc      	b.n	800ba0c <_malloc_r+0x80>
 800ba72:	230c      	movs	r3, #12
 800ba74:	603b      	str	r3, [r7, #0]
 800ba76:	4638      	mov	r0, r7
 800ba78:	f000 f820 	bl	800babc <__malloc_unlock>
 800ba7c:	e797      	b.n	800b9ae <_malloc_r+0x22>
 800ba7e:	6025      	str	r5, [r4, #0]
 800ba80:	e7dc      	b.n	800ba3c <_malloc_r+0xb0>
 800ba82:	605b      	str	r3, [r3, #4]
 800ba84:	deff      	udf	#255	; 0xff
 800ba86:	bf00      	nop
 800ba88:	20013ce0 	.word	0x20013ce0

0800ba8c <__ascii_mbtowc>:
 800ba8c:	b082      	sub	sp, #8
 800ba8e:	b901      	cbnz	r1, 800ba92 <__ascii_mbtowc+0x6>
 800ba90:	a901      	add	r1, sp, #4
 800ba92:	b142      	cbz	r2, 800baa6 <__ascii_mbtowc+0x1a>
 800ba94:	b14b      	cbz	r3, 800baaa <__ascii_mbtowc+0x1e>
 800ba96:	7813      	ldrb	r3, [r2, #0]
 800ba98:	600b      	str	r3, [r1, #0]
 800ba9a:	7812      	ldrb	r2, [r2, #0]
 800ba9c:	1e10      	subs	r0, r2, #0
 800ba9e:	bf18      	it	ne
 800baa0:	2001      	movne	r0, #1
 800baa2:	b002      	add	sp, #8
 800baa4:	4770      	bx	lr
 800baa6:	4610      	mov	r0, r2
 800baa8:	e7fb      	b.n	800baa2 <__ascii_mbtowc+0x16>
 800baaa:	f06f 0001 	mvn.w	r0, #1
 800baae:	e7f8      	b.n	800baa2 <__ascii_mbtowc+0x16>

0800bab0 <__malloc_lock>:
 800bab0:	4801      	ldr	r0, [pc, #4]	; (800bab8 <__malloc_lock+0x8>)
 800bab2:	f7ff b86c 	b.w	800ab8e <__retarget_lock_acquire_recursive>
 800bab6:	bf00      	nop
 800bab8:	20013cdc 	.word	0x20013cdc

0800babc <__malloc_unlock>:
 800babc:	4801      	ldr	r0, [pc, #4]	; (800bac4 <__malloc_unlock+0x8>)
 800babe:	f7ff b867 	b.w	800ab90 <__retarget_lock_release_recursive>
 800bac2:	bf00      	nop
 800bac4:	20013cdc 	.word	0x20013cdc

0800bac8 <_Balloc>:
 800bac8:	b570      	push	{r4, r5, r6, lr}
 800baca:	69c6      	ldr	r6, [r0, #28]
 800bacc:	4604      	mov	r4, r0
 800bace:	460d      	mov	r5, r1
 800bad0:	b976      	cbnz	r6, 800baf0 <_Balloc+0x28>
 800bad2:	2010      	movs	r0, #16
 800bad4:	f7ff ff32 	bl	800b93c <malloc>
 800bad8:	4602      	mov	r2, r0
 800bada:	61e0      	str	r0, [r4, #28]
 800badc:	b920      	cbnz	r0, 800bae8 <_Balloc+0x20>
 800bade:	4b18      	ldr	r3, [pc, #96]	; (800bb40 <_Balloc+0x78>)
 800bae0:	4818      	ldr	r0, [pc, #96]	; (800bb44 <_Balloc+0x7c>)
 800bae2:	216b      	movs	r1, #107	; 0x6b
 800bae4:	f000 fc38 	bl	800c358 <__assert_func>
 800bae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800baec:	6006      	str	r6, [r0, #0]
 800baee:	60c6      	str	r6, [r0, #12]
 800baf0:	69e6      	ldr	r6, [r4, #28]
 800baf2:	68f3      	ldr	r3, [r6, #12]
 800baf4:	b183      	cbz	r3, 800bb18 <_Balloc+0x50>
 800baf6:	69e3      	ldr	r3, [r4, #28]
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bafe:	b9b8      	cbnz	r0, 800bb30 <_Balloc+0x68>
 800bb00:	2101      	movs	r1, #1
 800bb02:	fa01 f605 	lsl.w	r6, r1, r5
 800bb06:	1d72      	adds	r2, r6, #5
 800bb08:	0092      	lsls	r2, r2, #2
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f000 fc42 	bl	800c394 <_calloc_r>
 800bb10:	b160      	cbz	r0, 800bb2c <_Balloc+0x64>
 800bb12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb16:	e00e      	b.n	800bb36 <_Balloc+0x6e>
 800bb18:	2221      	movs	r2, #33	; 0x21
 800bb1a:	2104      	movs	r1, #4
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f000 fc39 	bl	800c394 <_calloc_r>
 800bb22:	69e3      	ldr	r3, [r4, #28]
 800bb24:	60f0      	str	r0, [r6, #12]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1e4      	bne.n	800baf6 <_Balloc+0x2e>
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}
 800bb30:	6802      	ldr	r2, [r0, #0]
 800bb32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb36:	2300      	movs	r3, #0
 800bb38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb3c:	e7f7      	b.n	800bb2e <_Balloc+0x66>
 800bb3e:	bf00      	nop
 800bb40:	0800cc92 	.word	0x0800cc92
 800bb44:	0800cd12 	.word	0x0800cd12

0800bb48 <_Bfree>:
 800bb48:	b570      	push	{r4, r5, r6, lr}
 800bb4a:	69c6      	ldr	r6, [r0, #28]
 800bb4c:	4605      	mov	r5, r0
 800bb4e:	460c      	mov	r4, r1
 800bb50:	b976      	cbnz	r6, 800bb70 <_Bfree+0x28>
 800bb52:	2010      	movs	r0, #16
 800bb54:	f7ff fef2 	bl	800b93c <malloc>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	61e8      	str	r0, [r5, #28]
 800bb5c:	b920      	cbnz	r0, 800bb68 <_Bfree+0x20>
 800bb5e:	4b09      	ldr	r3, [pc, #36]	; (800bb84 <_Bfree+0x3c>)
 800bb60:	4809      	ldr	r0, [pc, #36]	; (800bb88 <_Bfree+0x40>)
 800bb62:	218f      	movs	r1, #143	; 0x8f
 800bb64:	f000 fbf8 	bl	800c358 <__assert_func>
 800bb68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb6c:	6006      	str	r6, [r0, #0]
 800bb6e:	60c6      	str	r6, [r0, #12]
 800bb70:	b13c      	cbz	r4, 800bb82 <_Bfree+0x3a>
 800bb72:	69eb      	ldr	r3, [r5, #28]
 800bb74:	6862      	ldr	r2, [r4, #4]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb7c:	6021      	str	r1, [r4, #0]
 800bb7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb82:	bd70      	pop	{r4, r5, r6, pc}
 800bb84:	0800cc92 	.word	0x0800cc92
 800bb88:	0800cd12 	.word	0x0800cd12

0800bb8c <__multadd>:
 800bb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb90:	690d      	ldr	r5, [r1, #16]
 800bb92:	4607      	mov	r7, r0
 800bb94:	460c      	mov	r4, r1
 800bb96:	461e      	mov	r6, r3
 800bb98:	f101 0c14 	add.w	ip, r1, #20
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	f8dc 3000 	ldr.w	r3, [ip]
 800bba2:	b299      	uxth	r1, r3
 800bba4:	fb02 6101 	mla	r1, r2, r1, r6
 800bba8:	0c1e      	lsrs	r6, r3, #16
 800bbaa:	0c0b      	lsrs	r3, r1, #16
 800bbac:	fb02 3306 	mla	r3, r2, r6, r3
 800bbb0:	b289      	uxth	r1, r1
 800bbb2:	3001      	adds	r0, #1
 800bbb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bbb8:	4285      	cmp	r5, r0
 800bbba:	f84c 1b04 	str.w	r1, [ip], #4
 800bbbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bbc2:	dcec      	bgt.n	800bb9e <__multadd+0x12>
 800bbc4:	b30e      	cbz	r6, 800bc0a <__multadd+0x7e>
 800bbc6:	68a3      	ldr	r3, [r4, #8]
 800bbc8:	42ab      	cmp	r3, r5
 800bbca:	dc19      	bgt.n	800bc00 <__multadd+0x74>
 800bbcc:	6861      	ldr	r1, [r4, #4]
 800bbce:	4638      	mov	r0, r7
 800bbd0:	3101      	adds	r1, #1
 800bbd2:	f7ff ff79 	bl	800bac8 <_Balloc>
 800bbd6:	4680      	mov	r8, r0
 800bbd8:	b928      	cbnz	r0, 800bbe6 <__multadd+0x5a>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	4b0c      	ldr	r3, [pc, #48]	; (800bc10 <__multadd+0x84>)
 800bbde:	480d      	ldr	r0, [pc, #52]	; (800bc14 <__multadd+0x88>)
 800bbe0:	21ba      	movs	r1, #186	; 0xba
 800bbe2:	f000 fbb9 	bl	800c358 <__assert_func>
 800bbe6:	6922      	ldr	r2, [r4, #16]
 800bbe8:	3202      	adds	r2, #2
 800bbea:	f104 010c 	add.w	r1, r4, #12
 800bbee:	0092      	lsls	r2, r2, #2
 800bbf0:	300c      	adds	r0, #12
 800bbf2:	f7fe ffce 	bl	800ab92 <memcpy>
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	4638      	mov	r0, r7
 800bbfa:	f7ff ffa5 	bl	800bb48 <_Bfree>
 800bbfe:	4644      	mov	r4, r8
 800bc00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc04:	3501      	adds	r5, #1
 800bc06:	615e      	str	r6, [r3, #20]
 800bc08:	6125      	str	r5, [r4, #16]
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc10:	0800cd01 	.word	0x0800cd01
 800bc14:	0800cd12 	.word	0x0800cd12

0800bc18 <__hi0bits>:
 800bc18:	0c03      	lsrs	r3, r0, #16
 800bc1a:	041b      	lsls	r3, r3, #16
 800bc1c:	b9d3      	cbnz	r3, 800bc54 <__hi0bits+0x3c>
 800bc1e:	0400      	lsls	r0, r0, #16
 800bc20:	2310      	movs	r3, #16
 800bc22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc26:	bf04      	itt	eq
 800bc28:	0200      	lsleq	r0, r0, #8
 800bc2a:	3308      	addeq	r3, #8
 800bc2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc30:	bf04      	itt	eq
 800bc32:	0100      	lsleq	r0, r0, #4
 800bc34:	3304      	addeq	r3, #4
 800bc36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc3a:	bf04      	itt	eq
 800bc3c:	0080      	lsleq	r0, r0, #2
 800bc3e:	3302      	addeq	r3, #2
 800bc40:	2800      	cmp	r0, #0
 800bc42:	db05      	blt.n	800bc50 <__hi0bits+0x38>
 800bc44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc48:	f103 0301 	add.w	r3, r3, #1
 800bc4c:	bf08      	it	eq
 800bc4e:	2320      	moveq	r3, #32
 800bc50:	4618      	mov	r0, r3
 800bc52:	4770      	bx	lr
 800bc54:	2300      	movs	r3, #0
 800bc56:	e7e4      	b.n	800bc22 <__hi0bits+0xa>

0800bc58 <__lo0bits>:
 800bc58:	6803      	ldr	r3, [r0, #0]
 800bc5a:	f013 0207 	ands.w	r2, r3, #7
 800bc5e:	d00c      	beq.n	800bc7a <__lo0bits+0x22>
 800bc60:	07d9      	lsls	r1, r3, #31
 800bc62:	d422      	bmi.n	800bcaa <__lo0bits+0x52>
 800bc64:	079a      	lsls	r2, r3, #30
 800bc66:	bf49      	itett	mi
 800bc68:	085b      	lsrmi	r3, r3, #1
 800bc6a:	089b      	lsrpl	r3, r3, #2
 800bc6c:	6003      	strmi	r3, [r0, #0]
 800bc6e:	2201      	movmi	r2, #1
 800bc70:	bf5c      	itt	pl
 800bc72:	6003      	strpl	r3, [r0, #0]
 800bc74:	2202      	movpl	r2, #2
 800bc76:	4610      	mov	r0, r2
 800bc78:	4770      	bx	lr
 800bc7a:	b299      	uxth	r1, r3
 800bc7c:	b909      	cbnz	r1, 800bc82 <__lo0bits+0x2a>
 800bc7e:	0c1b      	lsrs	r3, r3, #16
 800bc80:	2210      	movs	r2, #16
 800bc82:	b2d9      	uxtb	r1, r3
 800bc84:	b909      	cbnz	r1, 800bc8a <__lo0bits+0x32>
 800bc86:	3208      	adds	r2, #8
 800bc88:	0a1b      	lsrs	r3, r3, #8
 800bc8a:	0719      	lsls	r1, r3, #28
 800bc8c:	bf04      	itt	eq
 800bc8e:	091b      	lsreq	r3, r3, #4
 800bc90:	3204      	addeq	r2, #4
 800bc92:	0799      	lsls	r1, r3, #30
 800bc94:	bf04      	itt	eq
 800bc96:	089b      	lsreq	r3, r3, #2
 800bc98:	3202      	addeq	r2, #2
 800bc9a:	07d9      	lsls	r1, r3, #31
 800bc9c:	d403      	bmi.n	800bca6 <__lo0bits+0x4e>
 800bc9e:	085b      	lsrs	r3, r3, #1
 800bca0:	f102 0201 	add.w	r2, r2, #1
 800bca4:	d003      	beq.n	800bcae <__lo0bits+0x56>
 800bca6:	6003      	str	r3, [r0, #0]
 800bca8:	e7e5      	b.n	800bc76 <__lo0bits+0x1e>
 800bcaa:	2200      	movs	r2, #0
 800bcac:	e7e3      	b.n	800bc76 <__lo0bits+0x1e>
 800bcae:	2220      	movs	r2, #32
 800bcb0:	e7e1      	b.n	800bc76 <__lo0bits+0x1e>
	...

0800bcb4 <__i2b>:
 800bcb4:	b510      	push	{r4, lr}
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	2101      	movs	r1, #1
 800bcba:	f7ff ff05 	bl	800bac8 <_Balloc>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	b928      	cbnz	r0, 800bcce <__i2b+0x1a>
 800bcc2:	4b05      	ldr	r3, [pc, #20]	; (800bcd8 <__i2b+0x24>)
 800bcc4:	4805      	ldr	r0, [pc, #20]	; (800bcdc <__i2b+0x28>)
 800bcc6:	f240 1145 	movw	r1, #325	; 0x145
 800bcca:	f000 fb45 	bl	800c358 <__assert_func>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	6144      	str	r4, [r0, #20]
 800bcd2:	6103      	str	r3, [r0, #16]
 800bcd4:	bd10      	pop	{r4, pc}
 800bcd6:	bf00      	nop
 800bcd8:	0800cd01 	.word	0x0800cd01
 800bcdc:	0800cd12 	.word	0x0800cd12

0800bce0 <__multiply>:
 800bce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce4:	4691      	mov	r9, r2
 800bce6:	690a      	ldr	r2, [r1, #16]
 800bce8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	bfb8      	it	lt
 800bcf0:	460b      	movlt	r3, r1
 800bcf2:	460c      	mov	r4, r1
 800bcf4:	bfbc      	itt	lt
 800bcf6:	464c      	movlt	r4, r9
 800bcf8:	4699      	movlt	r9, r3
 800bcfa:	6927      	ldr	r7, [r4, #16]
 800bcfc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd00:	68a3      	ldr	r3, [r4, #8]
 800bd02:	6861      	ldr	r1, [r4, #4]
 800bd04:	eb07 060a 	add.w	r6, r7, sl
 800bd08:	42b3      	cmp	r3, r6
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	bfb8      	it	lt
 800bd0e:	3101      	addlt	r1, #1
 800bd10:	f7ff feda 	bl	800bac8 <_Balloc>
 800bd14:	b930      	cbnz	r0, 800bd24 <__multiply+0x44>
 800bd16:	4602      	mov	r2, r0
 800bd18:	4b44      	ldr	r3, [pc, #272]	; (800be2c <__multiply+0x14c>)
 800bd1a:	4845      	ldr	r0, [pc, #276]	; (800be30 <__multiply+0x150>)
 800bd1c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bd20:	f000 fb1a 	bl	800c358 <__assert_func>
 800bd24:	f100 0514 	add.w	r5, r0, #20
 800bd28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd2c:	462b      	mov	r3, r5
 800bd2e:	2200      	movs	r2, #0
 800bd30:	4543      	cmp	r3, r8
 800bd32:	d321      	bcc.n	800bd78 <__multiply+0x98>
 800bd34:	f104 0314 	add.w	r3, r4, #20
 800bd38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd3c:	f109 0314 	add.w	r3, r9, #20
 800bd40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd44:	9202      	str	r2, [sp, #8]
 800bd46:	1b3a      	subs	r2, r7, r4
 800bd48:	3a15      	subs	r2, #21
 800bd4a:	f022 0203 	bic.w	r2, r2, #3
 800bd4e:	3204      	adds	r2, #4
 800bd50:	f104 0115 	add.w	r1, r4, #21
 800bd54:	428f      	cmp	r7, r1
 800bd56:	bf38      	it	cc
 800bd58:	2204      	movcc	r2, #4
 800bd5a:	9201      	str	r2, [sp, #4]
 800bd5c:	9a02      	ldr	r2, [sp, #8]
 800bd5e:	9303      	str	r3, [sp, #12]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d80c      	bhi.n	800bd7e <__multiply+0x9e>
 800bd64:	2e00      	cmp	r6, #0
 800bd66:	dd03      	ble.n	800bd70 <__multiply+0x90>
 800bd68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d05b      	beq.n	800be28 <__multiply+0x148>
 800bd70:	6106      	str	r6, [r0, #16]
 800bd72:	b005      	add	sp, #20
 800bd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd78:	f843 2b04 	str.w	r2, [r3], #4
 800bd7c:	e7d8      	b.n	800bd30 <__multiply+0x50>
 800bd7e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd82:	f1ba 0f00 	cmp.w	sl, #0
 800bd86:	d024      	beq.n	800bdd2 <__multiply+0xf2>
 800bd88:	f104 0e14 	add.w	lr, r4, #20
 800bd8c:	46a9      	mov	r9, r5
 800bd8e:	f04f 0c00 	mov.w	ip, #0
 800bd92:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd96:	f8d9 1000 	ldr.w	r1, [r9]
 800bd9a:	fa1f fb82 	uxth.w	fp, r2
 800bd9e:	b289      	uxth	r1, r1
 800bda0:	fb0a 110b 	mla	r1, sl, fp, r1
 800bda4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bda8:	f8d9 2000 	ldr.w	r2, [r9]
 800bdac:	4461      	add	r1, ip
 800bdae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdb2:	fb0a c20b 	mla	r2, sl, fp, ip
 800bdb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bdba:	b289      	uxth	r1, r1
 800bdbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bdc0:	4577      	cmp	r7, lr
 800bdc2:	f849 1b04 	str.w	r1, [r9], #4
 800bdc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdca:	d8e2      	bhi.n	800bd92 <__multiply+0xb2>
 800bdcc:	9a01      	ldr	r2, [sp, #4]
 800bdce:	f845 c002 	str.w	ip, [r5, r2]
 800bdd2:	9a03      	ldr	r2, [sp, #12]
 800bdd4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bdd8:	3304      	adds	r3, #4
 800bdda:	f1b9 0f00 	cmp.w	r9, #0
 800bdde:	d021      	beq.n	800be24 <__multiply+0x144>
 800bde0:	6829      	ldr	r1, [r5, #0]
 800bde2:	f104 0c14 	add.w	ip, r4, #20
 800bde6:	46ae      	mov	lr, r5
 800bde8:	f04f 0a00 	mov.w	sl, #0
 800bdec:	f8bc b000 	ldrh.w	fp, [ip]
 800bdf0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bdf4:	fb09 220b 	mla	r2, r9, fp, r2
 800bdf8:	4452      	add	r2, sl
 800bdfa:	b289      	uxth	r1, r1
 800bdfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be00:	f84e 1b04 	str.w	r1, [lr], #4
 800be04:	f85c 1b04 	ldr.w	r1, [ip], #4
 800be08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be0c:	f8be 1000 	ldrh.w	r1, [lr]
 800be10:	fb09 110a 	mla	r1, r9, sl, r1
 800be14:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800be18:	4567      	cmp	r7, ip
 800be1a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be1e:	d8e5      	bhi.n	800bdec <__multiply+0x10c>
 800be20:	9a01      	ldr	r2, [sp, #4]
 800be22:	50a9      	str	r1, [r5, r2]
 800be24:	3504      	adds	r5, #4
 800be26:	e799      	b.n	800bd5c <__multiply+0x7c>
 800be28:	3e01      	subs	r6, #1
 800be2a:	e79b      	b.n	800bd64 <__multiply+0x84>
 800be2c:	0800cd01 	.word	0x0800cd01
 800be30:	0800cd12 	.word	0x0800cd12

0800be34 <__pow5mult>:
 800be34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be38:	4615      	mov	r5, r2
 800be3a:	f012 0203 	ands.w	r2, r2, #3
 800be3e:	4606      	mov	r6, r0
 800be40:	460f      	mov	r7, r1
 800be42:	d007      	beq.n	800be54 <__pow5mult+0x20>
 800be44:	4c25      	ldr	r4, [pc, #148]	; (800bedc <__pow5mult+0xa8>)
 800be46:	3a01      	subs	r2, #1
 800be48:	2300      	movs	r3, #0
 800be4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be4e:	f7ff fe9d 	bl	800bb8c <__multadd>
 800be52:	4607      	mov	r7, r0
 800be54:	10ad      	asrs	r5, r5, #2
 800be56:	d03d      	beq.n	800bed4 <__pow5mult+0xa0>
 800be58:	69f4      	ldr	r4, [r6, #28]
 800be5a:	b97c      	cbnz	r4, 800be7c <__pow5mult+0x48>
 800be5c:	2010      	movs	r0, #16
 800be5e:	f7ff fd6d 	bl	800b93c <malloc>
 800be62:	4602      	mov	r2, r0
 800be64:	61f0      	str	r0, [r6, #28]
 800be66:	b928      	cbnz	r0, 800be74 <__pow5mult+0x40>
 800be68:	4b1d      	ldr	r3, [pc, #116]	; (800bee0 <__pow5mult+0xac>)
 800be6a:	481e      	ldr	r0, [pc, #120]	; (800bee4 <__pow5mult+0xb0>)
 800be6c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800be70:	f000 fa72 	bl	800c358 <__assert_func>
 800be74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be78:	6004      	str	r4, [r0, #0]
 800be7a:	60c4      	str	r4, [r0, #12]
 800be7c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800be80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be84:	b94c      	cbnz	r4, 800be9a <__pow5mult+0x66>
 800be86:	f240 2171 	movw	r1, #625	; 0x271
 800be8a:	4630      	mov	r0, r6
 800be8c:	f7ff ff12 	bl	800bcb4 <__i2b>
 800be90:	2300      	movs	r3, #0
 800be92:	f8c8 0008 	str.w	r0, [r8, #8]
 800be96:	4604      	mov	r4, r0
 800be98:	6003      	str	r3, [r0, #0]
 800be9a:	f04f 0900 	mov.w	r9, #0
 800be9e:	07eb      	lsls	r3, r5, #31
 800bea0:	d50a      	bpl.n	800beb8 <__pow5mult+0x84>
 800bea2:	4639      	mov	r1, r7
 800bea4:	4622      	mov	r2, r4
 800bea6:	4630      	mov	r0, r6
 800bea8:	f7ff ff1a 	bl	800bce0 <__multiply>
 800beac:	4639      	mov	r1, r7
 800beae:	4680      	mov	r8, r0
 800beb0:	4630      	mov	r0, r6
 800beb2:	f7ff fe49 	bl	800bb48 <_Bfree>
 800beb6:	4647      	mov	r7, r8
 800beb8:	106d      	asrs	r5, r5, #1
 800beba:	d00b      	beq.n	800bed4 <__pow5mult+0xa0>
 800bebc:	6820      	ldr	r0, [r4, #0]
 800bebe:	b938      	cbnz	r0, 800bed0 <__pow5mult+0x9c>
 800bec0:	4622      	mov	r2, r4
 800bec2:	4621      	mov	r1, r4
 800bec4:	4630      	mov	r0, r6
 800bec6:	f7ff ff0b 	bl	800bce0 <__multiply>
 800beca:	6020      	str	r0, [r4, #0]
 800becc:	f8c0 9000 	str.w	r9, [r0]
 800bed0:	4604      	mov	r4, r0
 800bed2:	e7e4      	b.n	800be9e <__pow5mult+0x6a>
 800bed4:	4638      	mov	r0, r7
 800bed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beda:	bf00      	nop
 800bedc:	0800ce60 	.word	0x0800ce60
 800bee0:	0800cc92 	.word	0x0800cc92
 800bee4:	0800cd12 	.word	0x0800cd12

0800bee8 <__lshift>:
 800bee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beec:	460c      	mov	r4, r1
 800beee:	6849      	ldr	r1, [r1, #4]
 800bef0:	6923      	ldr	r3, [r4, #16]
 800bef2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bef6:	68a3      	ldr	r3, [r4, #8]
 800bef8:	4607      	mov	r7, r0
 800befa:	4691      	mov	r9, r2
 800befc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf00:	f108 0601 	add.w	r6, r8, #1
 800bf04:	42b3      	cmp	r3, r6
 800bf06:	db0b      	blt.n	800bf20 <__lshift+0x38>
 800bf08:	4638      	mov	r0, r7
 800bf0a:	f7ff fddd 	bl	800bac8 <_Balloc>
 800bf0e:	4605      	mov	r5, r0
 800bf10:	b948      	cbnz	r0, 800bf26 <__lshift+0x3e>
 800bf12:	4602      	mov	r2, r0
 800bf14:	4b28      	ldr	r3, [pc, #160]	; (800bfb8 <__lshift+0xd0>)
 800bf16:	4829      	ldr	r0, [pc, #164]	; (800bfbc <__lshift+0xd4>)
 800bf18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bf1c:	f000 fa1c 	bl	800c358 <__assert_func>
 800bf20:	3101      	adds	r1, #1
 800bf22:	005b      	lsls	r3, r3, #1
 800bf24:	e7ee      	b.n	800bf04 <__lshift+0x1c>
 800bf26:	2300      	movs	r3, #0
 800bf28:	f100 0114 	add.w	r1, r0, #20
 800bf2c:	f100 0210 	add.w	r2, r0, #16
 800bf30:	4618      	mov	r0, r3
 800bf32:	4553      	cmp	r3, sl
 800bf34:	db33      	blt.n	800bf9e <__lshift+0xb6>
 800bf36:	6920      	ldr	r0, [r4, #16]
 800bf38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf3c:	f104 0314 	add.w	r3, r4, #20
 800bf40:	f019 091f 	ands.w	r9, r9, #31
 800bf44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf4c:	d02b      	beq.n	800bfa6 <__lshift+0xbe>
 800bf4e:	f1c9 0e20 	rsb	lr, r9, #32
 800bf52:	468a      	mov	sl, r1
 800bf54:	2200      	movs	r2, #0
 800bf56:	6818      	ldr	r0, [r3, #0]
 800bf58:	fa00 f009 	lsl.w	r0, r0, r9
 800bf5c:	4310      	orrs	r0, r2
 800bf5e:	f84a 0b04 	str.w	r0, [sl], #4
 800bf62:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf66:	459c      	cmp	ip, r3
 800bf68:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf6c:	d8f3      	bhi.n	800bf56 <__lshift+0x6e>
 800bf6e:	ebac 0304 	sub.w	r3, ip, r4
 800bf72:	3b15      	subs	r3, #21
 800bf74:	f023 0303 	bic.w	r3, r3, #3
 800bf78:	3304      	adds	r3, #4
 800bf7a:	f104 0015 	add.w	r0, r4, #21
 800bf7e:	4584      	cmp	ip, r0
 800bf80:	bf38      	it	cc
 800bf82:	2304      	movcc	r3, #4
 800bf84:	50ca      	str	r2, [r1, r3]
 800bf86:	b10a      	cbz	r2, 800bf8c <__lshift+0xa4>
 800bf88:	f108 0602 	add.w	r6, r8, #2
 800bf8c:	3e01      	subs	r6, #1
 800bf8e:	4638      	mov	r0, r7
 800bf90:	612e      	str	r6, [r5, #16]
 800bf92:	4621      	mov	r1, r4
 800bf94:	f7ff fdd8 	bl	800bb48 <_Bfree>
 800bf98:	4628      	mov	r0, r5
 800bf9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf9e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	e7c5      	b.n	800bf32 <__lshift+0x4a>
 800bfa6:	3904      	subs	r1, #4
 800bfa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfac:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfb0:	459c      	cmp	ip, r3
 800bfb2:	d8f9      	bhi.n	800bfa8 <__lshift+0xc0>
 800bfb4:	e7ea      	b.n	800bf8c <__lshift+0xa4>
 800bfb6:	bf00      	nop
 800bfb8:	0800cd01 	.word	0x0800cd01
 800bfbc:	0800cd12 	.word	0x0800cd12

0800bfc0 <__mcmp>:
 800bfc0:	b530      	push	{r4, r5, lr}
 800bfc2:	6902      	ldr	r2, [r0, #16]
 800bfc4:	690c      	ldr	r4, [r1, #16]
 800bfc6:	1b12      	subs	r2, r2, r4
 800bfc8:	d10e      	bne.n	800bfe8 <__mcmp+0x28>
 800bfca:	f100 0314 	add.w	r3, r0, #20
 800bfce:	3114      	adds	r1, #20
 800bfd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bfd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bfe0:	42a5      	cmp	r5, r4
 800bfe2:	d003      	beq.n	800bfec <__mcmp+0x2c>
 800bfe4:	d305      	bcc.n	800bff2 <__mcmp+0x32>
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	4610      	mov	r0, r2
 800bfea:	bd30      	pop	{r4, r5, pc}
 800bfec:	4283      	cmp	r3, r0
 800bfee:	d3f3      	bcc.n	800bfd8 <__mcmp+0x18>
 800bff0:	e7fa      	b.n	800bfe8 <__mcmp+0x28>
 800bff2:	f04f 32ff 	mov.w	r2, #4294967295
 800bff6:	e7f7      	b.n	800bfe8 <__mcmp+0x28>

0800bff8 <__mdiff>:
 800bff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffc:	460c      	mov	r4, r1
 800bffe:	4606      	mov	r6, r0
 800c000:	4611      	mov	r1, r2
 800c002:	4620      	mov	r0, r4
 800c004:	4690      	mov	r8, r2
 800c006:	f7ff ffdb 	bl	800bfc0 <__mcmp>
 800c00a:	1e05      	subs	r5, r0, #0
 800c00c:	d110      	bne.n	800c030 <__mdiff+0x38>
 800c00e:	4629      	mov	r1, r5
 800c010:	4630      	mov	r0, r6
 800c012:	f7ff fd59 	bl	800bac8 <_Balloc>
 800c016:	b930      	cbnz	r0, 800c026 <__mdiff+0x2e>
 800c018:	4b3a      	ldr	r3, [pc, #232]	; (800c104 <__mdiff+0x10c>)
 800c01a:	4602      	mov	r2, r0
 800c01c:	f240 2137 	movw	r1, #567	; 0x237
 800c020:	4839      	ldr	r0, [pc, #228]	; (800c108 <__mdiff+0x110>)
 800c022:	f000 f999 	bl	800c358 <__assert_func>
 800c026:	2301      	movs	r3, #1
 800c028:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c02c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c030:	bfa4      	itt	ge
 800c032:	4643      	movge	r3, r8
 800c034:	46a0      	movge	r8, r4
 800c036:	4630      	mov	r0, r6
 800c038:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c03c:	bfa6      	itte	ge
 800c03e:	461c      	movge	r4, r3
 800c040:	2500      	movge	r5, #0
 800c042:	2501      	movlt	r5, #1
 800c044:	f7ff fd40 	bl	800bac8 <_Balloc>
 800c048:	b920      	cbnz	r0, 800c054 <__mdiff+0x5c>
 800c04a:	4b2e      	ldr	r3, [pc, #184]	; (800c104 <__mdiff+0x10c>)
 800c04c:	4602      	mov	r2, r0
 800c04e:	f240 2145 	movw	r1, #581	; 0x245
 800c052:	e7e5      	b.n	800c020 <__mdiff+0x28>
 800c054:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c058:	6926      	ldr	r6, [r4, #16]
 800c05a:	60c5      	str	r5, [r0, #12]
 800c05c:	f104 0914 	add.w	r9, r4, #20
 800c060:	f108 0514 	add.w	r5, r8, #20
 800c064:	f100 0e14 	add.w	lr, r0, #20
 800c068:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c06c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c070:	f108 0210 	add.w	r2, r8, #16
 800c074:	46f2      	mov	sl, lr
 800c076:	2100      	movs	r1, #0
 800c078:	f859 3b04 	ldr.w	r3, [r9], #4
 800c07c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c080:	fa11 f88b 	uxtah	r8, r1, fp
 800c084:	b299      	uxth	r1, r3
 800c086:	0c1b      	lsrs	r3, r3, #16
 800c088:	eba8 0801 	sub.w	r8, r8, r1
 800c08c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c090:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c094:	fa1f f888 	uxth.w	r8, r8
 800c098:	1419      	asrs	r1, r3, #16
 800c09a:	454e      	cmp	r6, r9
 800c09c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0a0:	f84a 3b04 	str.w	r3, [sl], #4
 800c0a4:	d8e8      	bhi.n	800c078 <__mdiff+0x80>
 800c0a6:	1b33      	subs	r3, r6, r4
 800c0a8:	3b15      	subs	r3, #21
 800c0aa:	f023 0303 	bic.w	r3, r3, #3
 800c0ae:	3304      	adds	r3, #4
 800c0b0:	3415      	adds	r4, #21
 800c0b2:	42a6      	cmp	r6, r4
 800c0b4:	bf38      	it	cc
 800c0b6:	2304      	movcc	r3, #4
 800c0b8:	441d      	add	r5, r3
 800c0ba:	4473      	add	r3, lr
 800c0bc:	469e      	mov	lr, r3
 800c0be:	462e      	mov	r6, r5
 800c0c0:	4566      	cmp	r6, ip
 800c0c2:	d30e      	bcc.n	800c0e2 <__mdiff+0xea>
 800c0c4:	f10c 0203 	add.w	r2, ip, #3
 800c0c8:	1b52      	subs	r2, r2, r5
 800c0ca:	f022 0203 	bic.w	r2, r2, #3
 800c0ce:	3d03      	subs	r5, #3
 800c0d0:	45ac      	cmp	ip, r5
 800c0d2:	bf38      	it	cc
 800c0d4:	2200      	movcc	r2, #0
 800c0d6:	4413      	add	r3, r2
 800c0d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c0dc:	b17a      	cbz	r2, 800c0fe <__mdiff+0x106>
 800c0de:	6107      	str	r7, [r0, #16]
 800c0e0:	e7a4      	b.n	800c02c <__mdiff+0x34>
 800c0e2:	f856 8b04 	ldr.w	r8, [r6], #4
 800c0e6:	fa11 f288 	uxtah	r2, r1, r8
 800c0ea:	1414      	asrs	r4, r2, #16
 800c0ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0f0:	b292      	uxth	r2, r2
 800c0f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c0f6:	f84e 2b04 	str.w	r2, [lr], #4
 800c0fa:	1421      	asrs	r1, r4, #16
 800c0fc:	e7e0      	b.n	800c0c0 <__mdiff+0xc8>
 800c0fe:	3f01      	subs	r7, #1
 800c100:	e7ea      	b.n	800c0d8 <__mdiff+0xe0>
 800c102:	bf00      	nop
 800c104:	0800cd01 	.word	0x0800cd01
 800c108:	0800cd12 	.word	0x0800cd12

0800c10c <__d2b>:
 800c10c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c110:	460f      	mov	r7, r1
 800c112:	2101      	movs	r1, #1
 800c114:	ec59 8b10 	vmov	r8, r9, d0
 800c118:	4616      	mov	r6, r2
 800c11a:	f7ff fcd5 	bl	800bac8 <_Balloc>
 800c11e:	4604      	mov	r4, r0
 800c120:	b930      	cbnz	r0, 800c130 <__d2b+0x24>
 800c122:	4602      	mov	r2, r0
 800c124:	4b24      	ldr	r3, [pc, #144]	; (800c1b8 <__d2b+0xac>)
 800c126:	4825      	ldr	r0, [pc, #148]	; (800c1bc <__d2b+0xb0>)
 800c128:	f240 310f 	movw	r1, #783	; 0x30f
 800c12c:	f000 f914 	bl	800c358 <__assert_func>
 800c130:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c134:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c138:	bb2d      	cbnz	r5, 800c186 <__d2b+0x7a>
 800c13a:	9301      	str	r3, [sp, #4]
 800c13c:	f1b8 0300 	subs.w	r3, r8, #0
 800c140:	d026      	beq.n	800c190 <__d2b+0x84>
 800c142:	4668      	mov	r0, sp
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	f7ff fd87 	bl	800bc58 <__lo0bits>
 800c14a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c14e:	b1e8      	cbz	r0, 800c18c <__d2b+0x80>
 800c150:	f1c0 0320 	rsb	r3, r0, #32
 800c154:	fa02 f303 	lsl.w	r3, r2, r3
 800c158:	430b      	orrs	r3, r1
 800c15a:	40c2      	lsrs	r2, r0
 800c15c:	6163      	str	r3, [r4, #20]
 800c15e:	9201      	str	r2, [sp, #4]
 800c160:	9b01      	ldr	r3, [sp, #4]
 800c162:	61a3      	str	r3, [r4, #24]
 800c164:	2b00      	cmp	r3, #0
 800c166:	bf14      	ite	ne
 800c168:	2202      	movne	r2, #2
 800c16a:	2201      	moveq	r2, #1
 800c16c:	6122      	str	r2, [r4, #16]
 800c16e:	b1bd      	cbz	r5, 800c1a0 <__d2b+0x94>
 800c170:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c174:	4405      	add	r5, r0
 800c176:	603d      	str	r5, [r7, #0]
 800c178:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c17c:	6030      	str	r0, [r6, #0]
 800c17e:	4620      	mov	r0, r4
 800c180:	b003      	add	sp, #12
 800c182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c18a:	e7d6      	b.n	800c13a <__d2b+0x2e>
 800c18c:	6161      	str	r1, [r4, #20]
 800c18e:	e7e7      	b.n	800c160 <__d2b+0x54>
 800c190:	a801      	add	r0, sp, #4
 800c192:	f7ff fd61 	bl	800bc58 <__lo0bits>
 800c196:	9b01      	ldr	r3, [sp, #4]
 800c198:	6163      	str	r3, [r4, #20]
 800c19a:	3020      	adds	r0, #32
 800c19c:	2201      	movs	r2, #1
 800c19e:	e7e5      	b.n	800c16c <__d2b+0x60>
 800c1a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c1a8:	6038      	str	r0, [r7, #0]
 800c1aa:	6918      	ldr	r0, [r3, #16]
 800c1ac:	f7ff fd34 	bl	800bc18 <__hi0bits>
 800c1b0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1b4:	e7e2      	b.n	800c17c <__d2b+0x70>
 800c1b6:	bf00      	nop
 800c1b8:	0800cd01 	.word	0x0800cd01
 800c1bc:	0800cd12 	.word	0x0800cd12

0800c1c0 <__ascii_wctomb>:
 800c1c0:	b149      	cbz	r1, 800c1d6 <__ascii_wctomb+0x16>
 800c1c2:	2aff      	cmp	r2, #255	; 0xff
 800c1c4:	bf85      	ittet	hi
 800c1c6:	238a      	movhi	r3, #138	; 0x8a
 800c1c8:	6003      	strhi	r3, [r0, #0]
 800c1ca:	700a      	strbls	r2, [r1, #0]
 800c1cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1d0:	bf98      	it	ls
 800c1d2:	2001      	movls	r0, #1
 800c1d4:	4770      	bx	lr
 800c1d6:	4608      	mov	r0, r1
 800c1d8:	4770      	bx	lr
	...

0800c1dc <__sflush_r>:
 800c1dc:	898a      	ldrh	r2, [r1, #12]
 800c1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	0710      	lsls	r0, r2, #28
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	d458      	bmi.n	800c29c <__sflush_r+0xc0>
 800c1ea:	684b      	ldr	r3, [r1, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	dc05      	bgt.n	800c1fc <__sflush_r+0x20>
 800c1f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	dc02      	bgt.n	800c1fc <__sflush_r+0x20>
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1fe:	2e00      	cmp	r6, #0
 800c200:	d0f9      	beq.n	800c1f6 <__sflush_r+0x1a>
 800c202:	2300      	movs	r3, #0
 800c204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c208:	682f      	ldr	r7, [r5, #0]
 800c20a:	6a21      	ldr	r1, [r4, #32]
 800c20c:	602b      	str	r3, [r5, #0]
 800c20e:	d032      	beq.n	800c276 <__sflush_r+0x9a>
 800c210:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c212:	89a3      	ldrh	r3, [r4, #12]
 800c214:	075a      	lsls	r2, r3, #29
 800c216:	d505      	bpl.n	800c224 <__sflush_r+0x48>
 800c218:	6863      	ldr	r3, [r4, #4]
 800c21a:	1ac0      	subs	r0, r0, r3
 800c21c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c21e:	b10b      	cbz	r3, 800c224 <__sflush_r+0x48>
 800c220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c222:	1ac0      	subs	r0, r0, r3
 800c224:	2300      	movs	r3, #0
 800c226:	4602      	mov	r2, r0
 800c228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c22a:	6a21      	ldr	r1, [r4, #32]
 800c22c:	4628      	mov	r0, r5
 800c22e:	47b0      	blx	r6
 800c230:	1c43      	adds	r3, r0, #1
 800c232:	89a3      	ldrh	r3, [r4, #12]
 800c234:	d106      	bne.n	800c244 <__sflush_r+0x68>
 800c236:	6829      	ldr	r1, [r5, #0]
 800c238:	291d      	cmp	r1, #29
 800c23a:	d82b      	bhi.n	800c294 <__sflush_r+0xb8>
 800c23c:	4a29      	ldr	r2, [pc, #164]	; (800c2e4 <__sflush_r+0x108>)
 800c23e:	410a      	asrs	r2, r1
 800c240:	07d6      	lsls	r6, r2, #31
 800c242:	d427      	bmi.n	800c294 <__sflush_r+0xb8>
 800c244:	2200      	movs	r2, #0
 800c246:	6062      	str	r2, [r4, #4]
 800c248:	04d9      	lsls	r1, r3, #19
 800c24a:	6922      	ldr	r2, [r4, #16]
 800c24c:	6022      	str	r2, [r4, #0]
 800c24e:	d504      	bpl.n	800c25a <__sflush_r+0x7e>
 800c250:	1c42      	adds	r2, r0, #1
 800c252:	d101      	bne.n	800c258 <__sflush_r+0x7c>
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	b903      	cbnz	r3, 800c25a <__sflush_r+0x7e>
 800c258:	6560      	str	r0, [r4, #84]	; 0x54
 800c25a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c25c:	602f      	str	r7, [r5, #0]
 800c25e:	2900      	cmp	r1, #0
 800c260:	d0c9      	beq.n	800c1f6 <__sflush_r+0x1a>
 800c262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c266:	4299      	cmp	r1, r3
 800c268:	d002      	beq.n	800c270 <__sflush_r+0x94>
 800c26a:	4628      	mov	r0, r5
 800c26c:	f7ff fb1a 	bl	800b8a4 <_free_r>
 800c270:	2000      	movs	r0, #0
 800c272:	6360      	str	r0, [r4, #52]	; 0x34
 800c274:	e7c0      	b.n	800c1f8 <__sflush_r+0x1c>
 800c276:	2301      	movs	r3, #1
 800c278:	4628      	mov	r0, r5
 800c27a:	47b0      	blx	r6
 800c27c:	1c41      	adds	r1, r0, #1
 800c27e:	d1c8      	bne.n	800c212 <__sflush_r+0x36>
 800c280:	682b      	ldr	r3, [r5, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d0c5      	beq.n	800c212 <__sflush_r+0x36>
 800c286:	2b1d      	cmp	r3, #29
 800c288:	d001      	beq.n	800c28e <__sflush_r+0xb2>
 800c28a:	2b16      	cmp	r3, #22
 800c28c:	d101      	bne.n	800c292 <__sflush_r+0xb6>
 800c28e:	602f      	str	r7, [r5, #0]
 800c290:	e7b1      	b.n	800c1f6 <__sflush_r+0x1a>
 800c292:	89a3      	ldrh	r3, [r4, #12]
 800c294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c298:	81a3      	strh	r3, [r4, #12]
 800c29a:	e7ad      	b.n	800c1f8 <__sflush_r+0x1c>
 800c29c:	690f      	ldr	r7, [r1, #16]
 800c29e:	2f00      	cmp	r7, #0
 800c2a0:	d0a9      	beq.n	800c1f6 <__sflush_r+0x1a>
 800c2a2:	0793      	lsls	r3, r2, #30
 800c2a4:	680e      	ldr	r6, [r1, #0]
 800c2a6:	bf08      	it	eq
 800c2a8:	694b      	ldreq	r3, [r1, #20]
 800c2aa:	600f      	str	r7, [r1, #0]
 800c2ac:	bf18      	it	ne
 800c2ae:	2300      	movne	r3, #0
 800c2b0:	eba6 0807 	sub.w	r8, r6, r7
 800c2b4:	608b      	str	r3, [r1, #8]
 800c2b6:	f1b8 0f00 	cmp.w	r8, #0
 800c2ba:	dd9c      	ble.n	800c1f6 <__sflush_r+0x1a>
 800c2bc:	6a21      	ldr	r1, [r4, #32]
 800c2be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2c0:	4643      	mov	r3, r8
 800c2c2:	463a      	mov	r2, r7
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	47b0      	blx	r6
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	dc06      	bgt.n	800c2da <__sflush_r+0xfe>
 800c2cc:	89a3      	ldrh	r3, [r4, #12]
 800c2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2d2:	81a3      	strh	r3, [r4, #12]
 800c2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d8:	e78e      	b.n	800c1f8 <__sflush_r+0x1c>
 800c2da:	4407      	add	r7, r0
 800c2dc:	eba8 0800 	sub.w	r8, r8, r0
 800c2e0:	e7e9      	b.n	800c2b6 <__sflush_r+0xda>
 800c2e2:	bf00      	nop
 800c2e4:	dfbffffe 	.word	0xdfbffffe

0800c2e8 <_fflush_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	690b      	ldr	r3, [r1, #16]
 800c2ec:	4605      	mov	r5, r0
 800c2ee:	460c      	mov	r4, r1
 800c2f0:	b913      	cbnz	r3, 800c2f8 <_fflush_r+0x10>
 800c2f2:	2500      	movs	r5, #0
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	bd38      	pop	{r3, r4, r5, pc}
 800c2f8:	b118      	cbz	r0, 800c302 <_fflush_r+0x1a>
 800c2fa:	6a03      	ldr	r3, [r0, #32]
 800c2fc:	b90b      	cbnz	r3, 800c302 <_fflush_r+0x1a>
 800c2fe:	f7fe fb51 	bl	800a9a4 <__sinit>
 800c302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d0f3      	beq.n	800c2f2 <_fflush_r+0xa>
 800c30a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c30c:	07d0      	lsls	r0, r2, #31
 800c30e:	d404      	bmi.n	800c31a <_fflush_r+0x32>
 800c310:	0599      	lsls	r1, r3, #22
 800c312:	d402      	bmi.n	800c31a <_fflush_r+0x32>
 800c314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c316:	f7fe fc3a 	bl	800ab8e <__retarget_lock_acquire_recursive>
 800c31a:	4628      	mov	r0, r5
 800c31c:	4621      	mov	r1, r4
 800c31e:	f7ff ff5d 	bl	800c1dc <__sflush_r>
 800c322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c324:	07da      	lsls	r2, r3, #31
 800c326:	4605      	mov	r5, r0
 800c328:	d4e4      	bmi.n	800c2f4 <_fflush_r+0xc>
 800c32a:	89a3      	ldrh	r3, [r4, #12]
 800c32c:	059b      	lsls	r3, r3, #22
 800c32e:	d4e1      	bmi.n	800c2f4 <_fflush_r+0xc>
 800c330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c332:	f7fe fc2d 	bl	800ab90 <__retarget_lock_release_recursive>
 800c336:	e7dd      	b.n	800c2f4 <_fflush_r+0xc>

0800c338 <_sbrk_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4d06      	ldr	r5, [pc, #24]	; (800c354 <_sbrk_r+0x1c>)
 800c33c:	2300      	movs	r3, #0
 800c33e:	4604      	mov	r4, r0
 800c340:	4608      	mov	r0, r1
 800c342:	602b      	str	r3, [r5, #0]
 800c344:	f000 fb3e 	bl	800c9c4 <_sbrk>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	d102      	bne.n	800c352 <_sbrk_r+0x1a>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	b103      	cbz	r3, 800c352 <_sbrk_r+0x1a>
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	20013cd8 	.word	0x20013cd8

0800c358 <__assert_func>:
 800c358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c35a:	4614      	mov	r4, r2
 800c35c:	461a      	mov	r2, r3
 800c35e:	4b09      	ldr	r3, [pc, #36]	; (800c384 <__assert_func+0x2c>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4605      	mov	r5, r0
 800c364:	68d8      	ldr	r0, [r3, #12]
 800c366:	b14c      	cbz	r4, 800c37c <__assert_func+0x24>
 800c368:	4b07      	ldr	r3, [pc, #28]	; (800c388 <__assert_func+0x30>)
 800c36a:	9100      	str	r1, [sp, #0]
 800c36c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c370:	4906      	ldr	r1, [pc, #24]	; (800c38c <__assert_func+0x34>)
 800c372:	462b      	mov	r3, r5
 800c374:	f000 f824 	bl	800c3c0 <fiprintf>
 800c378:	f000 f834 	bl	800c3e4 <abort>
 800c37c:	4b04      	ldr	r3, [pc, #16]	; (800c390 <__assert_func+0x38>)
 800c37e:	461c      	mov	r4, r3
 800c380:	e7f3      	b.n	800c36a <__assert_func+0x12>
 800c382:	bf00      	nop
 800c384:	200001d8 	.word	0x200001d8
 800c388:	0800ce6c 	.word	0x0800ce6c
 800c38c:	0800ce79 	.word	0x0800ce79
 800c390:	0800cea7 	.word	0x0800cea7

0800c394 <_calloc_r>:
 800c394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c396:	fba1 2402 	umull	r2, r4, r1, r2
 800c39a:	b94c      	cbnz	r4, 800c3b0 <_calloc_r+0x1c>
 800c39c:	4611      	mov	r1, r2
 800c39e:	9201      	str	r2, [sp, #4]
 800c3a0:	f7ff faf4 	bl	800b98c <_malloc_r>
 800c3a4:	9a01      	ldr	r2, [sp, #4]
 800c3a6:	4605      	mov	r5, r0
 800c3a8:	b930      	cbnz	r0, 800c3b8 <_calloc_r+0x24>
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	b003      	add	sp, #12
 800c3ae:	bd30      	pop	{r4, r5, pc}
 800c3b0:	220c      	movs	r2, #12
 800c3b2:	6002      	str	r2, [r0, #0]
 800c3b4:	2500      	movs	r5, #0
 800c3b6:	e7f8      	b.n	800c3aa <_calloc_r+0x16>
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	f7fe fb7c 	bl	800aab6 <memset>
 800c3be:	e7f4      	b.n	800c3aa <_calloc_r+0x16>

0800c3c0 <fiprintf>:
 800c3c0:	b40e      	push	{r1, r2, r3}
 800c3c2:	b503      	push	{r0, r1, lr}
 800c3c4:	4601      	mov	r1, r0
 800c3c6:	ab03      	add	r3, sp, #12
 800c3c8:	4805      	ldr	r0, [pc, #20]	; (800c3e0 <fiprintf+0x20>)
 800c3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ce:	6800      	ldr	r0, [r0, #0]
 800c3d0:	9301      	str	r3, [sp, #4]
 800c3d2:	f000 f837 	bl	800c444 <_vfiprintf_r>
 800c3d6:	b002      	add	sp, #8
 800c3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3dc:	b003      	add	sp, #12
 800c3de:	4770      	bx	lr
 800c3e0:	200001d8 	.word	0x200001d8

0800c3e4 <abort>:
 800c3e4:	b508      	push	{r3, lr}
 800c3e6:	2006      	movs	r0, #6
 800c3e8:	f000 fa04 	bl	800c7f4 <raise>
 800c3ec:	2001      	movs	r0, #1
 800c3ee:	f7f6 f985 	bl	80026fc <_exit>

0800c3f2 <__sfputc_r>:
 800c3f2:	6893      	ldr	r3, [r2, #8]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	b410      	push	{r4}
 800c3fa:	6093      	str	r3, [r2, #8]
 800c3fc:	da08      	bge.n	800c410 <__sfputc_r+0x1e>
 800c3fe:	6994      	ldr	r4, [r2, #24]
 800c400:	42a3      	cmp	r3, r4
 800c402:	db01      	blt.n	800c408 <__sfputc_r+0x16>
 800c404:	290a      	cmp	r1, #10
 800c406:	d103      	bne.n	800c410 <__sfputc_r+0x1e>
 800c408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c40c:	f000 b934 	b.w	800c678 <__swbuf_r>
 800c410:	6813      	ldr	r3, [r2, #0]
 800c412:	1c58      	adds	r0, r3, #1
 800c414:	6010      	str	r0, [r2, #0]
 800c416:	7019      	strb	r1, [r3, #0]
 800c418:	4608      	mov	r0, r1
 800c41a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <__sfputs_r>:
 800c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c422:	4606      	mov	r6, r0
 800c424:	460f      	mov	r7, r1
 800c426:	4614      	mov	r4, r2
 800c428:	18d5      	adds	r5, r2, r3
 800c42a:	42ac      	cmp	r4, r5
 800c42c:	d101      	bne.n	800c432 <__sfputs_r+0x12>
 800c42e:	2000      	movs	r0, #0
 800c430:	e007      	b.n	800c442 <__sfputs_r+0x22>
 800c432:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c436:	463a      	mov	r2, r7
 800c438:	4630      	mov	r0, r6
 800c43a:	f7ff ffda 	bl	800c3f2 <__sfputc_r>
 800c43e:	1c43      	adds	r3, r0, #1
 800c440:	d1f3      	bne.n	800c42a <__sfputs_r+0xa>
 800c442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c444 <_vfiprintf_r>:
 800c444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c448:	460d      	mov	r5, r1
 800c44a:	b09d      	sub	sp, #116	; 0x74
 800c44c:	4614      	mov	r4, r2
 800c44e:	4698      	mov	r8, r3
 800c450:	4606      	mov	r6, r0
 800c452:	b118      	cbz	r0, 800c45c <_vfiprintf_r+0x18>
 800c454:	6a03      	ldr	r3, [r0, #32]
 800c456:	b90b      	cbnz	r3, 800c45c <_vfiprintf_r+0x18>
 800c458:	f7fe faa4 	bl	800a9a4 <__sinit>
 800c45c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c45e:	07d9      	lsls	r1, r3, #31
 800c460:	d405      	bmi.n	800c46e <_vfiprintf_r+0x2a>
 800c462:	89ab      	ldrh	r3, [r5, #12]
 800c464:	059a      	lsls	r2, r3, #22
 800c466:	d402      	bmi.n	800c46e <_vfiprintf_r+0x2a>
 800c468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c46a:	f7fe fb90 	bl	800ab8e <__retarget_lock_acquire_recursive>
 800c46e:	89ab      	ldrh	r3, [r5, #12]
 800c470:	071b      	lsls	r3, r3, #28
 800c472:	d501      	bpl.n	800c478 <_vfiprintf_r+0x34>
 800c474:	692b      	ldr	r3, [r5, #16]
 800c476:	b99b      	cbnz	r3, 800c4a0 <_vfiprintf_r+0x5c>
 800c478:	4629      	mov	r1, r5
 800c47a:	4630      	mov	r0, r6
 800c47c:	f000 f93a 	bl	800c6f4 <__swsetup_r>
 800c480:	b170      	cbz	r0, 800c4a0 <_vfiprintf_r+0x5c>
 800c482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c484:	07dc      	lsls	r4, r3, #31
 800c486:	d504      	bpl.n	800c492 <_vfiprintf_r+0x4e>
 800c488:	f04f 30ff 	mov.w	r0, #4294967295
 800c48c:	b01d      	add	sp, #116	; 0x74
 800c48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c492:	89ab      	ldrh	r3, [r5, #12]
 800c494:	0598      	lsls	r0, r3, #22
 800c496:	d4f7      	bmi.n	800c488 <_vfiprintf_r+0x44>
 800c498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c49a:	f7fe fb79 	bl	800ab90 <__retarget_lock_release_recursive>
 800c49e:	e7f3      	b.n	800c488 <_vfiprintf_r+0x44>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a4:	2320      	movs	r3, #32
 800c4a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4ae:	2330      	movs	r3, #48	; 0x30
 800c4b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c664 <_vfiprintf_r+0x220>
 800c4b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4b8:	f04f 0901 	mov.w	r9, #1
 800c4bc:	4623      	mov	r3, r4
 800c4be:	469a      	mov	sl, r3
 800c4c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4c4:	b10a      	cbz	r2, 800c4ca <_vfiprintf_r+0x86>
 800c4c6:	2a25      	cmp	r2, #37	; 0x25
 800c4c8:	d1f9      	bne.n	800c4be <_vfiprintf_r+0x7a>
 800c4ca:	ebba 0b04 	subs.w	fp, sl, r4
 800c4ce:	d00b      	beq.n	800c4e8 <_vfiprintf_r+0xa4>
 800c4d0:	465b      	mov	r3, fp
 800c4d2:	4622      	mov	r2, r4
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	f7ff ffa2 	bl	800c420 <__sfputs_r>
 800c4dc:	3001      	adds	r0, #1
 800c4de:	f000 80a9 	beq.w	800c634 <_vfiprintf_r+0x1f0>
 800c4e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4e4:	445a      	add	r2, fp
 800c4e6:	9209      	str	r2, [sp, #36]	; 0x24
 800c4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 80a1 	beq.w	800c634 <_vfiprintf_r+0x1f0>
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4fc:	f10a 0a01 	add.w	sl, sl, #1
 800c500:	9304      	str	r3, [sp, #16]
 800c502:	9307      	str	r3, [sp, #28]
 800c504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c508:	931a      	str	r3, [sp, #104]	; 0x68
 800c50a:	4654      	mov	r4, sl
 800c50c:	2205      	movs	r2, #5
 800c50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c512:	4854      	ldr	r0, [pc, #336]	; (800c664 <_vfiprintf_r+0x220>)
 800c514:	f7f3 fecc 	bl	80002b0 <memchr>
 800c518:	9a04      	ldr	r2, [sp, #16]
 800c51a:	b9d8      	cbnz	r0, 800c554 <_vfiprintf_r+0x110>
 800c51c:	06d1      	lsls	r1, r2, #27
 800c51e:	bf44      	itt	mi
 800c520:	2320      	movmi	r3, #32
 800c522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c526:	0713      	lsls	r3, r2, #28
 800c528:	bf44      	itt	mi
 800c52a:	232b      	movmi	r3, #43	; 0x2b
 800c52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c530:	f89a 3000 	ldrb.w	r3, [sl]
 800c534:	2b2a      	cmp	r3, #42	; 0x2a
 800c536:	d015      	beq.n	800c564 <_vfiprintf_r+0x120>
 800c538:	9a07      	ldr	r2, [sp, #28]
 800c53a:	4654      	mov	r4, sl
 800c53c:	2000      	movs	r0, #0
 800c53e:	f04f 0c0a 	mov.w	ip, #10
 800c542:	4621      	mov	r1, r4
 800c544:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c548:	3b30      	subs	r3, #48	; 0x30
 800c54a:	2b09      	cmp	r3, #9
 800c54c:	d94d      	bls.n	800c5ea <_vfiprintf_r+0x1a6>
 800c54e:	b1b0      	cbz	r0, 800c57e <_vfiprintf_r+0x13a>
 800c550:	9207      	str	r2, [sp, #28]
 800c552:	e014      	b.n	800c57e <_vfiprintf_r+0x13a>
 800c554:	eba0 0308 	sub.w	r3, r0, r8
 800c558:	fa09 f303 	lsl.w	r3, r9, r3
 800c55c:	4313      	orrs	r3, r2
 800c55e:	9304      	str	r3, [sp, #16]
 800c560:	46a2      	mov	sl, r4
 800c562:	e7d2      	b.n	800c50a <_vfiprintf_r+0xc6>
 800c564:	9b03      	ldr	r3, [sp, #12]
 800c566:	1d19      	adds	r1, r3, #4
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	9103      	str	r1, [sp, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	bfbb      	ittet	lt
 800c570:	425b      	neglt	r3, r3
 800c572:	f042 0202 	orrlt.w	r2, r2, #2
 800c576:	9307      	strge	r3, [sp, #28]
 800c578:	9307      	strlt	r3, [sp, #28]
 800c57a:	bfb8      	it	lt
 800c57c:	9204      	strlt	r2, [sp, #16]
 800c57e:	7823      	ldrb	r3, [r4, #0]
 800c580:	2b2e      	cmp	r3, #46	; 0x2e
 800c582:	d10c      	bne.n	800c59e <_vfiprintf_r+0x15a>
 800c584:	7863      	ldrb	r3, [r4, #1]
 800c586:	2b2a      	cmp	r3, #42	; 0x2a
 800c588:	d134      	bne.n	800c5f4 <_vfiprintf_r+0x1b0>
 800c58a:	9b03      	ldr	r3, [sp, #12]
 800c58c:	1d1a      	adds	r2, r3, #4
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	9203      	str	r2, [sp, #12]
 800c592:	2b00      	cmp	r3, #0
 800c594:	bfb8      	it	lt
 800c596:	f04f 33ff 	movlt.w	r3, #4294967295
 800c59a:	3402      	adds	r4, #2
 800c59c:	9305      	str	r3, [sp, #20]
 800c59e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c674 <_vfiprintf_r+0x230>
 800c5a2:	7821      	ldrb	r1, [r4, #0]
 800c5a4:	2203      	movs	r2, #3
 800c5a6:	4650      	mov	r0, sl
 800c5a8:	f7f3 fe82 	bl	80002b0 <memchr>
 800c5ac:	b138      	cbz	r0, 800c5be <_vfiprintf_r+0x17a>
 800c5ae:	9b04      	ldr	r3, [sp, #16]
 800c5b0:	eba0 000a 	sub.w	r0, r0, sl
 800c5b4:	2240      	movs	r2, #64	; 0x40
 800c5b6:	4082      	lsls	r2, r0
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	3401      	adds	r4, #1
 800c5bc:	9304      	str	r3, [sp, #16]
 800c5be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c2:	4829      	ldr	r0, [pc, #164]	; (800c668 <_vfiprintf_r+0x224>)
 800c5c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5c8:	2206      	movs	r2, #6
 800c5ca:	f7f3 fe71 	bl	80002b0 <memchr>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d03f      	beq.n	800c652 <_vfiprintf_r+0x20e>
 800c5d2:	4b26      	ldr	r3, [pc, #152]	; (800c66c <_vfiprintf_r+0x228>)
 800c5d4:	bb1b      	cbnz	r3, 800c61e <_vfiprintf_r+0x1da>
 800c5d6:	9b03      	ldr	r3, [sp, #12]
 800c5d8:	3307      	adds	r3, #7
 800c5da:	f023 0307 	bic.w	r3, r3, #7
 800c5de:	3308      	adds	r3, #8
 800c5e0:	9303      	str	r3, [sp, #12]
 800c5e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e4:	443b      	add	r3, r7
 800c5e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e8:	e768      	b.n	800c4bc <_vfiprintf_r+0x78>
 800c5ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	2001      	movs	r0, #1
 800c5f2:	e7a6      	b.n	800c542 <_vfiprintf_r+0xfe>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	3401      	adds	r4, #1
 800c5f8:	9305      	str	r3, [sp, #20]
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	f04f 0c0a 	mov.w	ip, #10
 800c600:	4620      	mov	r0, r4
 800c602:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c606:	3a30      	subs	r2, #48	; 0x30
 800c608:	2a09      	cmp	r2, #9
 800c60a:	d903      	bls.n	800c614 <_vfiprintf_r+0x1d0>
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d0c6      	beq.n	800c59e <_vfiprintf_r+0x15a>
 800c610:	9105      	str	r1, [sp, #20]
 800c612:	e7c4      	b.n	800c59e <_vfiprintf_r+0x15a>
 800c614:	fb0c 2101 	mla	r1, ip, r1, r2
 800c618:	4604      	mov	r4, r0
 800c61a:	2301      	movs	r3, #1
 800c61c:	e7f0      	b.n	800c600 <_vfiprintf_r+0x1bc>
 800c61e:	ab03      	add	r3, sp, #12
 800c620:	9300      	str	r3, [sp, #0]
 800c622:	462a      	mov	r2, r5
 800c624:	4b12      	ldr	r3, [pc, #72]	; (800c670 <_vfiprintf_r+0x22c>)
 800c626:	a904      	add	r1, sp, #16
 800c628:	4630      	mov	r0, r6
 800c62a:	f7fd fd69 	bl	800a100 <_printf_float>
 800c62e:	4607      	mov	r7, r0
 800c630:	1c78      	adds	r0, r7, #1
 800c632:	d1d6      	bne.n	800c5e2 <_vfiprintf_r+0x19e>
 800c634:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c636:	07d9      	lsls	r1, r3, #31
 800c638:	d405      	bmi.n	800c646 <_vfiprintf_r+0x202>
 800c63a:	89ab      	ldrh	r3, [r5, #12]
 800c63c:	059a      	lsls	r2, r3, #22
 800c63e:	d402      	bmi.n	800c646 <_vfiprintf_r+0x202>
 800c640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c642:	f7fe faa5 	bl	800ab90 <__retarget_lock_release_recursive>
 800c646:	89ab      	ldrh	r3, [r5, #12]
 800c648:	065b      	lsls	r3, r3, #25
 800c64a:	f53f af1d 	bmi.w	800c488 <_vfiprintf_r+0x44>
 800c64e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c650:	e71c      	b.n	800c48c <_vfiprintf_r+0x48>
 800c652:	ab03      	add	r3, sp, #12
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	462a      	mov	r2, r5
 800c658:	4b05      	ldr	r3, [pc, #20]	; (800c670 <_vfiprintf_r+0x22c>)
 800c65a:	a904      	add	r1, sp, #16
 800c65c:	4630      	mov	r0, r6
 800c65e:	f7fd fff3 	bl	800a648 <_printf_i>
 800c662:	e7e4      	b.n	800c62e <_vfiprintf_r+0x1ea>
 800c664:	0800cea8 	.word	0x0800cea8
 800c668:	0800ceb2 	.word	0x0800ceb2
 800c66c:	0800a101 	.word	0x0800a101
 800c670:	0800c421 	.word	0x0800c421
 800c674:	0800ceae 	.word	0x0800ceae

0800c678 <__swbuf_r>:
 800c678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67a:	460e      	mov	r6, r1
 800c67c:	4614      	mov	r4, r2
 800c67e:	4605      	mov	r5, r0
 800c680:	b118      	cbz	r0, 800c68a <__swbuf_r+0x12>
 800c682:	6a03      	ldr	r3, [r0, #32]
 800c684:	b90b      	cbnz	r3, 800c68a <__swbuf_r+0x12>
 800c686:	f7fe f98d 	bl	800a9a4 <__sinit>
 800c68a:	69a3      	ldr	r3, [r4, #24]
 800c68c:	60a3      	str	r3, [r4, #8]
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	071a      	lsls	r2, r3, #28
 800c692:	d525      	bpl.n	800c6e0 <__swbuf_r+0x68>
 800c694:	6923      	ldr	r3, [r4, #16]
 800c696:	b31b      	cbz	r3, 800c6e0 <__swbuf_r+0x68>
 800c698:	6823      	ldr	r3, [r4, #0]
 800c69a:	6922      	ldr	r2, [r4, #16]
 800c69c:	1a98      	subs	r0, r3, r2
 800c69e:	6963      	ldr	r3, [r4, #20]
 800c6a0:	b2f6      	uxtb	r6, r6
 800c6a2:	4283      	cmp	r3, r0
 800c6a4:	4637      	mov	r7, r6
 800c6a6:	dc04      	bgt.n	800c6b2 <__swbuf_r+0x3a>
 800c6a8:	4621      	mov	r1, r4
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	f7ff fe1c 	bl	800c2e8 <_fflush_r>
 800c6b0:	b9e0      	cbnz	r0, 800c6ec <__swbuf_r+0x74>
 800c6b2:	68a3      	ldr	r3, [r4, #8]
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	60a3      	str	r3, [r4, #8]
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	6022      	str	r2, [r4, #0]
 800c6be:	701e      	strb	r6, [r3, #0]
 800c6c0:	6962      	ldr	r2, [r4, #20]
 800c6c2:	1c43      	adds	r3, r0, #1
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d004      	beq.n	800c6d2 <__swbuf_r+0x5a>
 800c6c8:	89a3      	ldrh	r3, [r4, #12]
 800c6ca:	07db      	lsls	r3, r3, #31
 800c6cc:	d506      	bpl.n	800c6dc <__swbuf_r+0x64>
 800c6ce:	2e0a      	cmp	r6, #10
 800c6d0:	d104      	bne.n	800c6dc <__swbuf_r+0x64>
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	f7ff fe07 	bl	800c2e8 <_fflush_r>
 800c6da:	b938      	cbnz	r0, 800c6ec <__swbuf_r+0x74>
 800c6dc:	4638      	mov	r0, r7
 800c6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	f000 f806 	bl	800c6f4 <__swsetup_r>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d0d5      	beq.n	800c698 <__swbuf_r+0x20>
 800c6ec:	f04f 37ff 	mov.w	r7, #4294967295
 800c6f0:	e7f4      	b.n	800c6dc <__swbuf_r+0x64>
	...

0800c6f4 <__swsetup_r>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	4b2a      	ldr	r3, [pc, #168]	; (800c7a0 <__swsetup_r+0xac>)
 800c6f8:	4605      	mov	r5, r0
 800c6fa:	6818      	ldr	r0, [r3, #0]
 800c6fc:	460c      	mov	r4, r1
 800c6fe:	b118      	cbz	r0, 800c708 <__swsetup_r+0x14>
 800c700:	6a03      	ldr	r3, [r0, #32]
 800c702:	b90b      	cbnz	r3, 800c708 <__swsetup_r+0x14>
 800c704:	f7fe f94e 	bl	800a9a4 <__sinit>
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c70e:	0718      	lsls	r0, r3, #28
 800c710:	d422      	bmi.n	800c758 <__swsetup_r+0x64>
 800c712:	06d9      	lsls	r1, r3, #27
 800c714:	d407      	bmi.n	800c726 <__swsetup_r+0x32>
 800c716:	2309      	movs	r3, #9
 800c718:	602b      	str	r3, [r5, #0]
 800c71a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c71e:	81a3      	strh	r3, [r4, #12]
 800c720:	f04f 30ff 	mov.w	r0, #4294967295
 800c724:	e034      	b.n	800c790 <__swsetup_r+0x9c>
 800c726:	0758      	lsls	r0, r3, #29
 800c728:	d512      	bpl.n	800c750 <__swsetup_r+0x5c>
 800c72a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c72c:	b141      	cbz	r1, 800c740 <__swsetup_r+0x4c>
 800c72e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c732:	4299      	cmp	r1, r3
 800c734:	d002      	beq.n	800c73c <__swsetup_r+0x48>
 800c736:	4628      	mov	r0, r5
 800c738:	f7ff f8b4 	bl	800b8a4 <_free_r>
 800c73c:	2300      	movs	r3, #0
 800c73e:	6363      	str	r3, [r4, #52]	; 0x34
 800c740:	89a3      	ldrh	r3, [r4, #12]
 800c742:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c746:	81a3      	strh	r3, [r4, #12]
 800c748:	2300      	movs	r3, #0
 800c74a:	6063      	str	r3, [r4, #4]
 800c74c:	6923      	ldr	r3, [r4, #16]
 800c74e:	6023      	str	r3, [r4, #0]
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	f043 0308 	orr.w	r3, r3, #8
 800c756:	81a3      	strh	r3, [r4, #12]
 800c758:	6923      	ldr	r3, [r4, #16]
 800c75a:	b94b      	cbnz	r3, 800c770 <__swsetup_r+0x7c>
 800c75c:	89a3      	ldrh	r3, [r4, #12]
 800c75e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c766:	d003      	beq.n	800c770 <__swsetup_r+0x7c>
 800c768:	4621      	mov	r1, r4
 800c76a:	4628      	mov	r0, r5
 800c76c:	f000 f884 	bl	800c878 <__smakebuf_r>
 800c770:	89a0      	ldrh	r0, [r4, #12]
 800c772:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c776:	f010 0301 	ands.w	r3, r0, #1
 800c77a:	d00a      	beq.n	800c792 <__swsetup_r+0x9e>
 800c77c:	2300      	movs	r3, #0
 800c77e:	60a3      	str	r3, [r4, #8]
 800c780:	6963      	ldr	r3, [r4, #20]
 800c782:	425b      	negs	r3, r3
 800c784:	61a3      	str	r3, [r4, #24]
 800c786:	6923      	ldr	r3, [r4, #16]
 800c788:	b943      	cbnz	r3, 800c79c <__swsetup_r+0xa8>
 800c78a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c78e:	d1c4      	bne.n	800c71a <__swsetup_r+0x26>
 800c790:	bd38      	pop	{r3, r4, r5, pc}
 800c792:	0781      	lsls	r1, r0, #30
 800c794:	bf58      	it	pl
 800c796:	6963      	ldrpl	r3, [r4, #20]
 800c798:	60a3      	str	r3, [r4, #8]
 800c79a:	e7f4      	b.n	800c786 <__swsetup_r+0x92>
 800c79c:	2000      	movs	r0, #0
 800c79e:	e7f7      	b.n	800c790 <__swsetup_r+0x9c>
 800c7a0:	200001d8 	.word	0x200001d8

0800c7a4 <_raise_r>:
 800c7a4:	291f      	cmp	r1, #31
 800c7a6:	b538      	push	{r3, r4, r5, lr}
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	460d      	mov	r5, r1
 800c7ac:	d904      	bls.n	800c7b8 <_raise_r+0x14>
 800c7ae:	2316      	movs	r3, #22
 800c7b0:	6003      	str	r3, [r0, #0]
 800c7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b6:	bd38      	pop	{r3, r4, r5, pc}
 800c7b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c7ba:	b112      	cbz	r2, 800c7c2 <_raise_r+0x1e>
 800c7bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7c0:	b94b      	cbnz	r3, 800c7d6 <_raise_r+0x32>
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f000 f830 	bl	800c828 <_getpid_r>
 800c7c8:	462a      	mov	r2, r5
 800c7ca:	4601      	mov	r1, r0
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7d2:	f000 b817 	b.w	800c804 <_kill_r>
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d00a      	beq.n	800c7f0 <_raise_r+0x4c>
 800c7da:	1c59      	adds	r1, r3, #1
 800c7dc:	d103      	bne.n	800c7e6 <_raise_r+0x42>
 800c7de:	2316      	movs	r3, #22
 800c7e0:	6003      	str	r3, [r0, #0]
 800c7e2:	2001      	movs	r0, #1
 800c7e4:	e7e7      	b.n	800c7b6 <_raise_r+0x12>
 800c7e6:	2400      	movs	r4, #0
 800c7e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7ec:	4628      	mov	r0, r5
 800c7ee:	4798      	blx	r3
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	e7e0      	b.n	800c7b6 <_raise_r+0x12>

0800c7f4 <raise>:
 800c7f4:	4b02      	ldr	r3, [pc, #8]	; (800c800 <raise+0xc>)
 800c7f6:	4601      	mov	r1, r0
 800c7f8:	6818      	ldr	r0, [r3, #0]
 800c7fa:	f7ff bfd3 	b.w	800c7a4 <_raise_r>
 800c7fe:	bf00      	nop
 800c800:	200001d8 	.word	0x200001d8

0800c804 <_kill_r>:
 800c804:	b538      	push	{r3, r4, r5, lr}
 800c806:	4d07      	ldr	r5, [pc, #28]	; (800c824 <_kill_r+0x20>)
 800c808:	2300      	movs	r3, #0
 800c80a:	4604      	mov	r4, r0
 800c80c:	4608      	mov	r0, r1
 800c80e:	4611      	mov	r1, r2
 800c810:	602b      	str	r3, [r5, #0]
 800c812:	f7f5 ff63 	bl	80026dc <_kill>
 800c816:	1c43      	adds	r3, r0, #1
 800c818:	d102      	bne.n	800c820 <_kill_r+0x1c>
 800c81a:	682b      	ldr	r3, [r5, #0]
 800c81c:	b103      	cbz	r3, 800c820 <_kill_r+0x1c>
 800c81e:	6023      	str	r3, [r4, #0]
 800c820:	bd38      	pop	{r3, r4, r5, pc}
 800c822:	bf00      	nop
 800c824:	20013cd8 	.word	0x20013cd8

0800c828 <_getpid_r>:
 800c828:	f7f5 bf50 	b.w	80026cc <_getpid>

0800c82c <__swhatbuf_r>:
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	460c      	mov	r4, r1
 800c830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c834:	2900      	cmp	r1, #0
 800c836:	b096      	sub	sp, #88	; 0x58
 800c838:	4615      	mov	r5, r2
 800c83a:	461e      	mov	r6, r3
 800c83c:	da0d      	bge.n	800c85a <__swhatbuf_r+0x2e>
 800c83e:	89a3      	ldrh	r3, [r4, #12]
 800c840:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c844:	f04f 0100 	mov.w	r1, #0
 800c848:	bf0c      	ite	eq
 800c84a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c84e:	2340      	movne	r3, #64	; 0x40
 800c850:	2000      	movs	r0, #0
 800c852:	6031      	str	r1, [r6, #0]
 800c854:	602b      	str	r3, [r5, #0]
 800c856:	b016      	add	sp, #88	; 0x58
 800c858:	bd70      	pop	{r4, r5, r6, pc}
 800c85a:	466a      	mov	r2, sp
 800c85c:	f000 f848 	bl	800c8f0 <_fstat_r>
 800c860:	2800      	cmp	r0, #0
 800c862:	dbec      	blt.n	800c83e <__swhatbuf_r+0x12>
 800c864:	9901      	ldr	r1, [sp, #4]
 800c866:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c86a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c86e:	4259      	negs	r1, r3
 800c870:	4159      	adcs	r1, r3
 800c872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c876:	e7eb      	b.n	800c850 <__swhatbuf_r+0x24>

0800c878 <__smakebuf_r>:
 800c878:	898b      	ldrh	r3, [r1, #12]
 800c87a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c87c:	079d      	lsls	r5, r3, #30
 800c87e:	4606      	mov	r6, r0
 800c880:	460c      	mov	r4, r1
 800c882:	d507      	bpl.n	800c894 <__smakebuf_r+0x1c>
 800c884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	6123      	str	r3, [r4, #16]
 800c88c:	2301      	movs	r3, #1
 800c88e:	6163      	str	r3, [r4, #20]
 800c890:	b002      	add	sp, #8
 800c892:	bd70      	pop	{r4, r5, r6, pc}
 800c894:	ab01      	add	r3, sp, #4
 800c896:	466a      	mov	r2, sp
 800c898:	f7ff ffc8 	bl	800c82c <__swhatbuf_r>
 800c89c:	9900      	ldr	r1, [sp, #0]
 800c89e:	4605      	mov	r5, r0
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	f7ff f873 	bl	800b98c <_malloc_r>
 800c8a6:	b948      	cbnz	r0, 800c8bc <__smakebuf_r+0x44>
 800c8a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ac:	059a      	lsls	r2, r3, #22
 800c8ae:	d4ef      	bmi.n	800c890 <__smakebuf_r+0x18>
 800c8b0:	f023 0303 	bic.w	r3, r3, #3
 800c8b4:	f043 0302 	orr.w	r3, r3, #2
 800c8b8:	81a3      	strh	r3, [r4, #12]
 800c8ba:	e7e3      	b.n	800c884 <__smakebuf_r+0xc>
 800c8bc:	89a3      	ldrh	r3, [r4, #12]
 800c8be:	6020      	str	r0, [r4, #0]
 800c8c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8c4:	81a3      	strh	r3, [r4, #12]
 800c8c6:	9b00      	ldr	r3, [sp, #0]
 800c8c8:	6163      	str	r3, [r4, #20]
 800c8ca:	9b01      	ldr	r3, [sp, #4]
 800c8cc:	6120      	str	r0, [r4, #16]
 800c8ce:	b15b      	cbz	r3, 800c8e8 <__smakebuf_r+0x70>
 800c8d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	f000 f81d 	bl	800c914 <_isatty_r>
 800c8da:	b128      	cbz	r0, 800c8e8 <__smakebuf_r+0x70>
 800c8dc:	89a3      	ldrh	r3, [r4, #12]
 800c8de:	f023 0303 	bic.w	r3, r3, #3
 800c8e2:	f043 0301 	orr.w	r3, r3, #1
 800c8e6:	81a3      	strh	r3, [r4, #12]
 800c8e8:	89a3      	ldrh	r3, [r4, #12]
 800c8ea:	431d      	orrs	r5, r3
 800c8ec:	81a5      	strh	r5, [r4, #12]
 800c8ee:	e7cf      	b.n	800c890 <__smakebuf_r+0x18>

0800c8f0 <_fstat_r>:
 800c8f0:	b538      	push	{r3, r4, r5, lr}
 800c8f2:	4d07      	ldr	r5, [pc, #28]	; (800c910 <_fstat_r+0x20>)
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	4608      	mov	r0, r1
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	602b      	str	r3, [r5, #0]
 800c8fe:	f7f5 ff30 	bl	8002762 <_fstat>
 800c902:	1c43      	adds	r3, r0, #1
 800c904:	d102      	bne.n	800c90c <_fstat_r+0x1c>
 800c906:	682b      	ldr	r3, [r5, #0]
 800c908:	b103      	cbz	r3, 800c90c <_fstat_r+0x1c>
 800c90a:	6023      	str	r3, [r4, #0]
 800c90c:	bd38      	pop	{r3, r4, r5, pc}
 800c90e:	bf00      	nop
 800c910:	20013cd8 	.word	0x20013cd8

0800c914 <_isatty_r>:
 800c914:	b538      	push	{r3, r4, r5, lr}
 800c916:	4d06      	ldr	r5, [pc, #24]	; (800c930 <_isatty_r+0x1c>)
 800c918:	2300      	movs	r3, #0
 800c91a:	4604      	mov	r4, r0
 800c91c:	4608      	mov	r0, r1
 800c91e:	602b      	str	r3, [r5, #0]
 800c920:	f7f5 ff2f 	bl	8002782 <_isatty>
 800c924:	1c43      	adds	r3, r0, #1
 800c926:	d102      	bne.n	800c92e <_isatty_r+0x1a>
 800c928:	682b      	ldr	r3, [r5, #0]
 800c92a:	b103      	cbz	r3, 800c92e <_isatty_r+0x1a>
 800c92c:	6023      	str	r3, [r4, #0]
 800c92e:	bd38      	pop	{r3, r4, r5, pc}
 800c930:	20013cd8 	.word	0x20013cd8

0800c934 <round>:
 800c934:	ec53 2b10 	vmov	r2, r3, d0
 800c938:	b570      	push	{r4, r5, r6, lr}
 800c93a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800c93e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800c942:	2813      	cmp	r0, #19
 800c944:	ee10 5a10 	vmov	r5, s0
 800c948:	4619      	mov	r1, r3
 800c94a:	dc18      	bgt.n	800c97e <round+0x4a>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	da09      	bge.n	800c964 <round+0x30>
 800c950:	3001      	adds	r0, #1
 800c952:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800c956:	d103      	bne.n	800c960 <round+0x2c>
 800c958:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800c95c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c960:	2300      	movs	r3, #0
 800c962:	e02a      	b.n	800c9ba <round+0x86>
 800c964:	4c16      	ldr	r4, [pc, #88]	; (800c9c0 <round+0x8c>)
 800c966:	4104      	asrs	r4, r0
 800c968:	ea03 0604 	and.w	r6, r3, r4
 800c96c:	4316      	orrs	r6, r2
 800c96e:	d011      	beq.n	800c994 <round+0x60>
 800c970:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c974:	4103      	asrs	r3, r0
 800c976:	440b      	add	r3, r1
 800c978:	ea23 0104 	bic.w	r1, r3, r4
 800c97c:	e7f0      	b.n	800c960 <round+0x2c>
 800c97e:	2833      	cmp	r0, #51	; 0x33
 800c980:	dd0b      	ble.n	800c99a <round+0x66>
 800c982:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800c986:	d105      	bne.n	800c994 <round+0x60>
 800c988:	ee10 0a10 	vmov	r0, s0
 800c98c:	f7f3 fcee 	bl	800036c <__adddf3>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	ec43 2b10 	vmov	d0, r2, r3
 800c998:	bd70      	pop	{r4, r5, r6, pc}
 800c99a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800c99e:	f04f 34ff 	mov.w	r4, #4294967295
 800c9a2:	40f4      	lsrs	r4, r6
 800c9a4:	4214      	tst	r4, r2
 800c9a6:	d0f5      	beq.n	800c994 <round+0x60>
 800c9a8:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	4083      	lsls	r3, r0
 800c9b0:	195b      	adds	r3, r3, r5
 800c9b2:	bf28      	it	cs
 800c9b4:	3101      	addcs	r1, #1
 800c9b6:	ea23 0304 	bic.w	r3, r3, r4
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	460b      	mov	r3, r1
 800c9be:	e7e9      	b.n	800c994 <round+0x60>
 800c9c0:	000fffff 	.word	0x000fffff

0800c9c4 <_sbrk>:
 800c9c4:	4a04      	ldr	r2, [pc, #16]	; (800c9d8 <_sbrk+0x14>)
 800c9c6:	6811      	ldr	r1, [r2, #0]
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	b909      	cbnz	r1, 800c9d0 <_sbrk+0xc>
 800c9cc:	4903      	ldr	r1, [pc, #12]	; (800c9dc <_sbrk+0x18>)
 800c9ce:	6011      	str	r1, [r2, #0]
 800c9d0:	6810      	ldr	r0, [r2, #0]
 800c9d2:	4403      	add	r3, r0
 800c9d4:	6013      	str	r3, [r2, #0]
 800c9d6:	4770      	bx	lr
 800c9d8:	20013ce8 	.word	0x20013ce8
 800c9dc:	20013cf0 	.word	0x20013cf0

0800c9e0 <_init>:
 800c9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e2:	bf00      	nop
 800c9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9e6:	bc08      	pop	{r3}
 800c9e8:	469e      	mov	lr, r3
 800c9ea:	4770      	bx	lr

0800c9ec <_fini>:
 800c9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ee:	bf00      	nop
 800c9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9f2:	bc08      	pop	{r3}
 800c9f4:	469e      	mov	lr, r3
 800c9f6:	4770      	bx	lr
