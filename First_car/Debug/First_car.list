
First_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  0800ba88  0800ba88  0001ba88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be68  0800be68  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800be68  0800be68  0001be68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be70  0800be70  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be70  0800be70  0001be70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be74  0800be74  0001be74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800be78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d7c  200001e8  0800c060  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f64  0800c060  00020f64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bed5  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c43  00000000  00000000  0003c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001888  00000000  00000000  0003fd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001339  00000000  00000000  00041600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005aeb  00000000  00000000  00042939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e501  00000000  00000000  00048424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4a6d  00000000  00000000  00066925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a84  00000000  00000000  0014b394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00152e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ba70 	.word	0x0800ba70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800ba70 	.word	0x0800ba70

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20000848 	.word	0x20000848
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <strlen>:
 8000350:	4603      	mov	r3, r0
 8000352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000356:	2a00      	cmp	r2, #0
 8000358:	d1fb      	bne.n	8000352 <strlen+0x2>
 800035a:	1a18      	subs	r0, r3, r0
 800035c:	3801      	subs	r0, #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	; 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2iz>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c40:	d215      	bcs.n	8000c6e <__aeabi_d2iz+0x36>
 8000c42:	d511      	bpl.n	8000c68 <__aeabi_d2iz+0x30>
 8000c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d912      	bls.n	8000c74 <__aeabi_d2iz+0x3c>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	4770      	bx	lr
 8000c68:	f04f 0000 	mov.w	r0, #0
 8000c6c:	4770      	bx	lr
 8000c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c72:	d105      	bne.n	8000c80 <__aeabi_d2iz+0x48>
 8000c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	bf08      	it	eq
 8000c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2uiz>:
 8000c88:	004a      	lsls	r2, r1, #1
 8000c8a:	d211      	bcs.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c90:	d211      	bcs.n	8000cb6 <__aeabi_d2uiz+0x2e>
 8000c92:	d50d      	bpl.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c9c:	d40e      	bmi.n	8000cbc <__aeabi_d2uiz+0x34>
 8000c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000caa:	fa23 f002 	lsr.w	r0, r3, r2
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cba:	d102      	bne.n	8000cc2 <__aeabi_d2uiz+0x3a>
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	4770      	bx	lr
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2f>:
 8000cc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ccc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cd0:	bf24      	itt	cs
 8000cd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cda:	d90d      	bls.n	8000cf8 <__aeabi_d2f+0x30>
 8000cdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ce0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ce4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ce8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cfc:	d121      	bne.n	8000d42 <__aeabi_d2f+0x7a>
 8000cfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d02:	bfbc      	itt	lt
 8000d04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d08:	4770      	bxlt	lr
 8000d0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d12:	f1c2 0218 	rsb	r2, r2, #24
 8000d16:	f1c2 0c20 	rsb	ip, r2, #32
 8000d1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d22:	bf18      	it	ne
 8000d24:	f040 0001 	orrne.w	r0, r0, #1
 8000d28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d34:	ea40 000c 	orr.w	r0, r0, ip
 8000d38:	fa23 f302 	lsr.w	r3, r3, r2
 8000d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d40:	e7cc      	b.n	8000cdc <__aeabi_d2f+0x14>
 8000d42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d46:	d107      	bne.n	8000d58 <__aeabi_d2f+0x90>
 8000d48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d56:	4770      	bxne	lr
 8000d58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b970 	b.w	8001060 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f806 	bl	8000d98 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__udivmoddi4>:
 8000d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d9c:	9e08      	ldr	r6, [sp, #32]
 8000d9e:	460d      	mov	r5, r1
 8000da0:	4604      	mov	r4, r0
 8000da2:	460f      	mov	r7, r1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d14a      	bne.n	8000e3e <__udivmoddi4+0xa6>
 8000da8:	428a      	cmp	r2, r1
 8000daa:	4694      	mov	ip, r2
 8000dac:	d965      	bls.n	8000e7a <__udivmoddi4+0xe2>
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	b143      	cbz	r3, 8000dc6 <__udivmoddi4+0x2e>
 8000db4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db8:	f1c3 0220 	rsb	r2, r3, #32
 8000dbc:	409f      	lsls	r7, r3
 8000dbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	409c      	lsls	r4, r3
 8000dc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dca:	fa1f f58c 	uxth.w	r5, ip
 8000dce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dd2:	0c22      	lsrs	r2, r4, #16
 8000dd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ddc:	fb01 f005 	mul.w	r0, r1, r5
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x62>
 8000de4:	eb1c 0202 	adds.w	r2, ip, r2
 8000de8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dec:	f080 811c 	bcs.w	8001028 <__udivmoddi4+0x290>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f240 8119 	bls.w	8001028 <__udivmoddi4+0x290>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a12      	subs	r2, r2, r0
 8000dfc:	b2a4      	uxth	r4, r4
 8000dfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0a:	fb00 f505 	mul.w	r5, r0, r5
 8000e0e:	42a5      	cmp	r5, r4
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x90>
 8000e12:	eb1c 0404 	adds.w	r4, ip, r4
 8000e16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x294>
 8000e1e:	42a5      	cmp	r5, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x294>
 8000e24:	4464      	add	r4, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11e      	cbz	r6, 8000e3a <__udivmoddi4+0xa2>
 8000e32:	40dc      	lsrs	r4, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0xbc>
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	f000 80ed 	beq.w	8001022 <__udivmoddi4+0x28a>
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e54:	fab3 f183 	clz	r1, r3
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d149      	bne.n	8000ef0 <__udivmoddi4+0x158>
 8000e5c:	42ab      	cmp	r3, r5
 8000e5e:	d302      	bcc.n	8000e66 <__udivmoddi4+0xce>
 8000e60:	4282      	cmp	r2, r0
 8000e62:	f200 80f8 	bhi.w	8001056 <__udivmoddi4+0x2be>
 8000e66:	1a84      	subs	r4, r0, r2
 8000e68:	eb65 0203 	sbc.w	r2, r5, r3
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4617      	mov	r7, r2
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d0e2      	beq.n	8000e3a <__udivmoddi4+0xa2>
 8000e74:	e9c6 4700 	strd	r4, r7, [r6]
 8000e78:	e7df      	b.n	8000e3a <__udivmoddi4+0xa2>
 8000e7a:	b902      	cbnz	r2, 8000e7e <__udivmoddi4+0xe6>
 8000e7c:	deff      	udf	#255	; 0xff
 8000e7e:	fab2 f382 	clz	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8090 	bne.w	8000fa8 <__udivmoddi4+0x210>
 8000e88:	1a8a      	subs	r2, r1, r2
 8000e8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	2101      	movs	r1, #1
 8000e94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e98:	fb07 2015 	mls	r0, r7, r5, r2
 8000e9c:	0c22      	lsrs	r2, r4, #16
 8000e9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ea2:	fb0e f005 	mul.w	r0, lr, r5
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x124>
 8000eaa:	eb1c 0202 	adds.w	r2, ip, r2
 8000eae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x122>
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	f200 80cb 	bhi.w	8001050 <__udivmoddi4+0x2b8>
 8000eba:	4645      	mov	r5, r8
 8000ebc:	1a12      	subs	r2, r2, r0
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ec4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ecc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed0:	45a6      	cmp	lr, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x14e>
 8000ed4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000edc:	d202      	bcs.n	8000ee4 <__udivmoddi4+0x14c>
 8000ede:	45a6      	cmp	lr, r4
 8000ee0:	f200 80bb 	bhi.w	800105a <__udivmoddi4+0x2c2>
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	eba4 040e 	sub.w	r4, r4, lr
 8000eea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eee:	e79f      	b.n	8000e30 <__udivmoddi4+0x98>
 8000ef0:	f1c1 0720 	rsb	r7, r1, #32
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000efe:	fa05 f401 	lsl.w	r4, r5, r1
 8000f02:	fa20 f307 	lsr.w	r3, r0, r7
 8000f06:	40fd      	lsrs	r5, r7
 8000f08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	fb09 5518 	mls	r5, r9, r8, r5
 8000f1a:	0c1c      	lsrs	r4, r3, #16
 8000f1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f20:	fb08 f50e 	mul.w	r5, r8, lr
 8000f24:	42a5      	cmp	r5, r4
 8000f26:	fa02 f201 	lsl.w	r2, r2, r1
 8000f2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f2e:	d90b      	bls.n	8000f48 <__udivmoddi4+0x1b0>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f38:	f080 8088 	bcs.w	800104c <__udivmoddi4+0x2b4>
 8000f3c:	42a5      	cmp	r5, r4
 8000f3e:	f240 8085 	bls.w	800104c <__udivmoddi4+0x2b4>
 8000f42:	f1a8 0802 	sub.w	r8, r8, #2
 8000f46:	4464      	add	r4, ip
 8000f48:	1b64      	subs	r4, r4, r5
 8000f4a:	b29d      	uxth	r5, r3
 8000f4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f50:	fb09 4413 	mls	r4, r9, r3, r4
 8000f54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x1da>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f68:	d26c      	bcs.n	8001044 <__udivmoddi4+0x2ac>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	d96a      	bls.n	8001044 <__udivmoddi4+0x2ac>
 8000f6e:	3b02      	subs	r3, #2
 8000f70:	4464      	add	r4, ip
 8000f72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f76:	fba3 9502 	umull	r9, r5, r3, r2
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	42ac      	cmp	r4, r5
 8000f80:	46c8      	mov	r8, r9
 8000f82:	46ae      	mov	lr, r5
 8000f84:	d356      	bcc.n	8001034 <__udivmoddi4+0x29c>
 8000f86:	d053      	beq.n	8001030 <__udivmoddi4+0x298>
 8000f88:	b156      	cbz	r6, 8000fa0 <__udivmoddi4+0x208>
 8000f8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f92:	fa04 f707 	lsl.w	r7, r4, r7
 8000f96:	40ca      	lsrs	r2, r1
 8000f98:	40cc      	lsrs	r4, r1
 8000f9a:	4317      	orrs	r7, r2
 8000f9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa8:	f1c3 0120 	rsb	r1, r3, #32
 8000fac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000fb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000fb8:	409d      	lsls	r5, r3
 8000fba:	432a      	orrs	r2, r5
 8000fbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc0:	fa1f fe8c 	uxth.w	lr, ip
 8000fc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fcc:	0c11      	lsrs	r1, r2, #16
 8000fce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fd2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fd6:	428d      	cmp	r5, r1
 8000fd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x258>
 8000fde:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fe6:	d22f      	bcs.n	8001048 <__udivmoddi4+0x2b0>
 8000fe8:	428d      	cmp	r5, r1
 8000fea:	d92d      	bls.n	8001048 <__udivmoddi4+0x2b0>
 8000fec:	3802      	subs	r0, #2
 8000fee:	4461      	add	r1, ip
 8000ff0:	1b49      	subs	r1, r1, r5
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ff8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	fb05 f10e 	mul.w	r1, r5, lr
 8001004:	4291      	cmp	r1, r2
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x282>
 8001008:	eb1c 0202 	adds.w	r2, ip, r2
 800100c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001010:	d216      	bcs.n	8001040 <__udivmoddi4+0x2a8>
 8001012:	4291      	cmp	r1, r2
 8001014:	d914      	bls.n	8001040 <__udivmoddi4+0x2a8>
 8001016:	3d02      	subs	r5, #2
 8001018:	4462      	add	r2, ip
 800101a:	1a52      	subs	r2, r2, r1
 800101c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001020:	e738      	b.n	8000e94 <__udivmoddi4+0xfc>
 8001022:	4631      	mov	r1, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e708      	b.n	8000e3a <__udivmoddi4+0xa2>
 8001028:	4639      	mov	r1, r7
 800102a:	e6e6      	b.n	8000dfa <__udivmoddi4+0x62>
 800102c:	4610      	mov	r0, r2
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x90>
 8001030:	4548      	cmp	r0, r9
 8001032:	d2a9      	bcs.n	8000f88 <__udivmoddi4+0x1f0>
 8001034:	ebb9 0802 	subs.w	r8, r9, r2
 8001038:	eb65 0e0c 	sbc.w	lr, r5, ip
 800103c:	3b01      	subs	r3, #1
 800103e:	e7a3      	b.n	8000f88 <__udivmoddi4+0x1f0>
 8001040:	4645      	mov	r5, r8
 8001042:	e7ea      	b.n	800101a <__udivmoddi4+0x282>
 8001044:	462b      	mov	r3, r5
 8001046:	e794      	b.n	8000f72 <__udivmoddi4+0x1da>
 8001048:	4640      	mov	r0, r8
 800104a:	e7d1      	b.n	8000ff0 <__udivmoddi4+0x258>
 800104c:	46d0      	mov	r8, sl
 800104e:	e77b      	b.n	8000f48 <__udivmoddi4+0x1b0>
 8001050:	3d02      	subs	r5, #2
 8001052:	4462      	add	r2, ip
 8001054:	e732      	b.n	8000ebc <__udivmoddi4+0x124>
 8001056:	4608      	mov	r0, r1
 8001058:	e70a      	b.n	8000e70 <__udivmoddi4+0xd8>
 800105a:	4464      	add	r4, ip
 800105c:	3802      	subs	r0, #2
 800105e:	e742      	b.n	8000ee6 <__udivmoddi4+0x14e>

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <HAL_TIM_IC_CaptureCallback>:


/***************************************Interrupts_Call_Backs********************************************************/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001074:	d10c      	bne.n	8001090 <HAL_TIM_IC_CaptureCallback+0x2c>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7f1b      	ldrb	r3, [r3, #28]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d003      	beq.n	8001086 <HAL_TIM_IC_CaptureCallback+0x22>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7f1b      	ldrb	r3, [r3, #28]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d104      	bne.n	8001090 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		edges_counter++;
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_TIM_IC_CaptureCallback+0x38>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	4a03      	ldr	r2, [pc, #12]	; (800109c <HAL_TIM_IC_CaptureCallback+0x38>)
 800108e:	6013      	str	r3, [r2, #0]
	}
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	20000204 	.word	0x20000204

080010a0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	6078      	str	r0, [r7, #4]
	/* Bluetooth interrupt*/
	if(huart->Instance==USART3)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <HAL_UART_RxCpltCallback+0x3c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d10f      	bne.n	80010d2 <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_UART_Receive_IT(&huart3, &received_char, 1);
 80010b2:	2201      	movs	r2, #1
 80010b4:	490a      	ldr	r1, [pc, #40]	; (80010e0 <HAL_UART_RxCpltCallback+0x40>)
 80010b6:	480b      	ldr	r0, [pc, #44]	; (80010e4 <HAL_UART_RxCpltCallback+0x44>)
 80010b8:	f004 fc35 	bl	8005926 <HAL_UART_Receive_IT>

		/*Give the Notification to the CarControl task*/
		xTaskNotifyFromISR(Handle_CarControl,NULL,eNoAction,NULL);
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_UART_RxCpltCallback+0x48>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	2300      	movs	r3, #0
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	2300      	movs	r3, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2300      	movs	r3, #0
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	f005 fcf5 	bl	8006abc <xTaskGenericNotifyFromISR>
	else if(huart->Instance==UART5)
	{


	}
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40004800 	.word	0x40004800
 80010e0:	20000744 	.word	0x20000744
 80010e4:	200006bc 	.word	0x200006bc
 80010e8:	20000748 	.word	0x20000748

080010ec <LightSensor_voidInit>:
static void TSL2561_GetChannelsReadings(uint16_t* Copy_uint16Data0Val, uint16_t* Copy_uint16Data1Val);
static void TSL2561_WriteByte(uint8_t Copy_uint8RegisterAddress, uint8_t Copy_uint8RegisterValue);
static void TSL2561_ReadByte(uint8_t Copy_uint8RegisterAddress, uint8_t *Copy_puinit8RecivingVariable);

void LightSensor_voidInit(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

	/*Powering up the module*/

	/*1-first element is the command -> Address of control register
	 * 2-Second element is the 0b00000011 which power up the module */
	TSL2561_WriteByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_CONTROL),0b00000011);
 80010f0:	2103      	movs	r1, #3
 80010f2:	2080      	movs	r0, #128	; 0x80
 80010f4:	f000 f97e 	bl	80013f4 <TSL2561_WriteByte>

	/*1- first element is the command -> Address of timing register
	 *2- Second element is the 0b00010010 which makes the gain = 1 and the integration time
	 *2- =402ms which is the default value*/

	TSL2561_WriteByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_TIMING),0b00000010);
 80010f8:	2102      	movs	r1, #2
 80010fa:	2081      	movs	r0, #129	; 0x81
 80010fc:	f000 f97a 	bl	80013f4 <TSL2561_WriteByte>


}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	0000      	movs	r0, r0
	...

08001108 <LightSensor_uint8ReadIntensity>:

void LightSensor_uint8ReadIntensity(uint16_t *Copy_puint16LuxValue)
{
 8001108:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
	//Variables for storing Data registers
	uint16_t Local_uint16Channel0Val, Local_uint16Channel1Val,flux_integar=0;
 8001112:	2300      	movs	r3, #0
 8001114:	827b      	strh	r3, [r7, #18]
	float flux=0;
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

	//Get the values from the data registers
	TSL2561_GetChannelsReadings(&Local_uint16Channel0Val, &Local_uint16Channel1Val);
 800111c:	f107 0208 	add.w	r2, r7, #8
 8001120:	f107 030a 	add.w	r3, r7, #10
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f92e 	bl	8001388 <TSL2561_GetChannelsReadings>
	/*Calculating the lux for T, FN, and CL Package of the sensor*/

	//Calculate the ratio of the PhotoDiodes
	float Ratio = ((float)Local_uint16Channel1Val) / ((float)Local_uint16Channel0Val);
 800112c:	893b      	ldrh	r3, [r7, #8]
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001136:	897b      	ldrh	r3, [r7, #10]
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001144:	edc7 7a03 	vstr	s15, [r7, #12]

	//Calculating Lux
	//Ratio between 0 and 0.50

	if(Ratio <= 0.50)
 8001148:	edd7 7a03 	vldr	s15, [r7, #12]
 800114c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001158:	d839      	bhi.n	80011ce <LightSensor_uint8ReadIntensity+0xc6>
	{
		flux= (0.0304 * Local_uint16Channel0Val) - (0.062* Local_uint16Channel0Val * pow(Ratio, 1.4));
 800115a:	897b      	ldrh	r3, [r7, #10]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fa51 	bl	8000604 <__aeabi_i2d>
 8001162:	a373      	add	r3, pc, #460	; (adr r3, 8001330 <LightSensor_uint8ReadIntensity+0x228>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fab6 	bl	80006d8 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4614      	mov	r4, r2
 8001172:	461d      	mov	r5, r3
 8001174:	897b      	ldrh	r3, [r7, #10]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fa44 	bl	8000604 <__aeabi_i2d>
 800117c:	a36e      	add	r3, pc, #440	; (adr r3, 8001338 <LightSensor_uint8ReadIntensity+0x230>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff faa9 	bl	80006d8 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4690      	mov	r8, r2
 800118c:	4699      	mov	r9, r3
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f7ff fa4a 	bl	8000628 <__aeabi_f2d>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8001328 <LightSensor_uint8ReadIntensity+0x220>
 800119c:	ec43 2b10 	vmov	d0, r2, r3
 80011a0:	f009 fcd8 	bl	800ab54 <pow>
 80011a4:	ec53 2b10 	vmov	r2, r3, d0
 80011a8:	4640      	mov	r0, r8
 80011aa:	4649      	mov	r1, r9
 80011ac:	f7ff fa94 	bl	80006d8 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4620      	mov	r0, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	f7ff f8d6 	bl	8000368 <__aeabi_dsub>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fd80 	bl	8000cc8 <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e092      	b.n	80012f4 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the ratio is between 0.51 and 0.61
	else if(Ratio <= 0.61)
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f7ff fa2a 	bl	8000628 <__aeabi_f2d>
 80011d4:	a35a      	add	r3, pc, #360	; (adr r3, 8001340 <LightSensor_uint8ReadIntensity+0x238>)
 80011d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011da:	f7ff fcf9 	bl	8000bd0 <__aeabi_dcmple>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d024      	beq.n	800122e <LightSensor_uint8ReadIntensity+0x126>
	{
		flux = (0.0224 * Local_uint16Channel0Val) - (0.031 * Local_uint16Channel1Val);
 80011e4:	897b      	ldrh	r3, [r7, #10]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fa0c 	bl	8000604 <__aeabi_i2d>
 80011ec:	a356      	add	r3, pc, #344	; (adr r3, 8001348 <LightSensor_uint8ReadIntensity+0x240>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff fa71 	bl	80006d8 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
 80011fe:	893b      	ldrh	r3, [r7, #8]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f9ff 	bl	8000604 <__aeabi_i2d>
 8001206:	a352      	add	r3, pc, #328	; (adr r3, 8001350 <LightSensor_uint8ReadIntensity+0x248>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff fa64 	bl	80006d8 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4620      	mov	r0, r4
 8001216:	4629      	mov	r1, r5
 8001218:	f7ff f8a6 	bl	8000368 <__aeabi_dsub>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fd50 	bl	8000cc8 <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	e062      	b.n	80012f4 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the Ratio is between 0.62 and 0.81
	else if(Ratio <= 0.80)
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff f9fa 	bl	8000628 <__aeabi_f2d>
 8001234:	a348      	add	r3, pc, #288	; (adr r3, 8001358 <LightSensor_uint8ReadIntensity+0x250>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff fcc9 	bl	8000bd0 <__aeabi_dcmple>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d024      	beq.n	800128e <LightSensor_uint8ReadIntensity+0x186>
	{
		flux = (0.0128 * Local_uint16Channel0Val) - (0.0153 * Local_uint16Channel1Val);
 8001244:	897b      	ldrh	r3, [r7, #10]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f9dc 	bl	8000604 <__aeabi_i2d>
 800124c:	a344      	add	r3, pc, #272	; (adr r3, 8001360 <LightSensor_uint8ReadIntensity+0x258>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff fa41 	bl	80006d8 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4614      	mov	r4, r2
 800125c:	461d      	mov	r5, r3
 800125e:	893b      	ldrh	r3, [r7, #8]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f9cf 	bl	8000604 <__aeabi_i2d>
 8001266:	a340      	add	r3, pc, #256	; (adr r3, 8001368 <LightSensor_uint8ReadIntensity+0x260>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7ff fa34 	bl	80006d8 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4620      	mov	r0, r4
 8001276:	4629      	mov	r1, r5
 8001278:	f7ff f876 	bl	8000368 <__aeabi_dsub>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fd20 	bl	8000cc8 <__aeabi_d2f>
 8001288:	4603      	mov	r3, r0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e032      	b.n	80012f4 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the Ratio is between 0.82 and 1.39
	else if(Ratio <= 1.30)
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f7ff f9ca 	bl	8000628 <__aeabi_f2d>
 8001294:	a336      	add	r3, pc, #216	; (adr r3, 8001370 <LightSensor_uint8ReadIntensity+0x268>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff fc99 	bl	8000bd0 <__aeabi_dcmple>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d024      	beq.n	80012ee <LightSensor_uint8ReadIntensity+0x1e6>
	{
		flux = (0.00146 * Local_uint16Channel0Val) - (0.00112 * Local_uint16Channel1Val);
 80012a4:	897b      	ldrh	r3, [r7, #10]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f9ac 	bl	8000604 <__aeabi_i2d>
 80012ac:	a332      	add	r3, pc, #200	; (adr r3, 8001378 <LightSensor_uint8ReadIntensity+0x270>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff fa11 	bl	80006d8 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	893b      	ldrh	r3, [r7, #8]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f99f 	bl	8000604 <__aeabi_i2d>
 80012c6:	a32e      	add	r3, pc, #184	; (adr r3, 8001380 <LightSensor_uint8ReadIntensity+0x278>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff fa04 	bl	80006d8 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4620      	mov	r0, r4
 80012d6:	4629      	mov	r1, r5
 80012d8:	f7ff f846 	bl	8000368 <__aeabi_dsub>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff fcf0 	bl	8000cc8 <__aeabi_d2f>
 80012e8:	4603      	mov	r3, r0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	e002      	b.n	80012f4 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the Ratio is bigger than 1.30
	else
	{
		flux = 0;
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
	}

	flux_integar=round(flux);
 80012f4:	6978      	ldr	r0, [r7, #20]
 80012f6:	f7ff f997 	bl	8000628 <__aeabi_f2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	ec43 2b10 	vmov	d0, r2, r3
 8001302:	f009 fd7d 	bl	800ae00 <round>
 8001306:	ec53 2b10 	vmov	r2, r3, d0
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff fcbb 	bl	8000c88 <__aeabi_d2uiz>
 8001312:	4603      	mov	r3, r0
 8001314:	827b      	strh	r3, [r7, #18]

	/*Update the user variable*/
	*Copy_puint16LuxValue=flux_integar;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	8a7a      	ldrh	r2, [r7, #18]
 800131a:	801a      	strh	r2, [r3, #0]
	{
      TSL2561_Reset();
	}
	 */

}
 800131c:	bf00      	nop
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001326:	bf00      	nop
 8001328:	66666666 	.word	0x66666666
 800132c:	3ff66666 	.word	0x3ff66666
 8001330:	77318fc5 	.word	0x77318fc5
 8001334:	3f9f212d 	.word	0x3f9f212d
 8001338:	c8b43958 	.word	0xc8b43958
 800133c:	3fafbe76 	.word	0x3fafbe76
 8001340:	b851eb85 	.word	0xb851eb85
 8001344:	3fe3851e 	.word	0x3fe3851e
 8001348:	8db8bac7 	.word	0x8db8bac7
 800134c:	3f96f006 	.word	0x3f96f006
 8001350:	c8b43958 	.word	0xc8b43958
 8001354:	3f9fbe76 	.word	0x3f9fbe76
 8001358:	9999999a 	.word	0x9999999a
 800135c:	3fe99999 	.word	0x3fe99999
 8001360:	eb1c432d 	.word	0xeb1c432d
 8001364:	3f8a36e2 	.word	0x3f8a36e2
 8001368:	3d07c84b 	.word	0x3d07c84b
 800136c:	3f8f559b 	.word	0x3f8f559b
 8001370:	cccccccd 	.word	0xcccccccd
 8001374:	3ff4cccc 	.word	0x3ff4cccc
 8001378:	102363b2 	.word	0x102363b2
 800137c:	3f57ebaf 	.word	0x3f57ebaf
 8001380:	d7c6fbd2 	.word	0xd7c6fbd2
 8001384:	3f52599e 	.word	0x3f52599e

08001388 <TSL2561_GetChannelsReadings>:
	TSL2561_WriteByte((TSL2561_COMMAND_NORMAL | TSL2561_REG_INTERRUPT), 0b00000000);

}

static void TSL2561_GetChannelsReadings(uint16_t* Copy_uint16Data0Val, uint16_t* Copy_uint16Data1Val)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
	//Variables for storing received data
	uint8_t data0Low, data0High, data1Low, data1High;

	//Read Data0 registers
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA0LOW),	&data0Low);
 8001392:	f107 030f 	add.w	r3, r7, #15
 8001396:	4619      	mov	r1, r3
 8001398:	208c      	movs	r0, #140	; 0x8c
 800139a:	f000 f847 	bl	800142c <TSL2561_ReadByte>
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA0HIGH), &data0High);
 800139e:	f107 030e 	add.w	r3, r7, #14
 80013a2:	4619      	mov	r1, r3
 80013a4:	208d      	movs	r0, #141	; 0x8d
 80013a6:	f000 f841 	bl	800142c <TSL2561_ReadByte>

	//Read Data1 registers
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA1LOW),	&data1Low);
 80013aa:	f107 030d 	add.w	r3, r7, #13
 80013ae:	4619      	mov	r1, r3
 80013b0:	208e      	movs	r0, #142	; 0x8e
 80013b2:	f000 f83b 	bl	800142c <TSL2561_ReadByte>
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA1HIGH), &data1High);
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	4619      	mov	r1, r3
 80013bc:	208f      	movs	r0, #143	; 0x8f
 80013be:	f000 f835 	bl	800142c <TSL2561_ReadByte>

	//Combine Data register values into single 16 bit variable
	*Copy_uint16Data0Val = data0High * 256 + data0Low;
 80013c2:	7bbb      	ldrb	r3, [r7, #14]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	801a      	strh	r2, [r3, #0]
	*Copy_uint16Data1Val = data1High * 256 + data1Low;
 80013d6:	7b3b      	ldrb	r3, [r7, #12]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b29a      	uxth	r2, r3
 80013de:	7b7b      	ldrb	r3, [r7, #13]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	801a      	strh	r2, [r3, #0]

}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <TSL2561_WriteByte>:
	LightSensor_voidInit();

}

static void TSL2561_WriteByte(uint8_t Copy_uint8RegisterAddress, uint8_t Copy_uint8RegisterValue)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af04      	add	r7, sp, #16
 80013fa:	4603      	mov	r3, r0
 80013fc:	460a      	mov	r2, r1
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	4613      	mov	r3, r2
 8001402:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(LightSensor_I2CChannel, LightSensor_SLAVE_ADDRESS,Copy_uint8RegisterAddress, 1, &Copy_uint8RegisterValue,1,TSL2561_Max_Delay);
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	b29a      	uxth	r2, r3
 8001408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	2301      	movs	r3, #1
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	1dbb      	adds	r3, r7, #6
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	2172      	movs	r1, #114	; 0x72
 800141a:	4803      	ldr	r0, [pc, #12]	; (8001428 <TSL2561_WriteByte+0x34>)
 800141c:	f001 fe56 	bl	80030cc <HAL_I2C_Mem_Write>
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2000046c 	.word	0x2000046c

0800142c <TSL2561_ReadByte>:

static void TSL2561_ReadByte(uint8_t Copy_uint8RegisterAddress, uint8_t *Copy_puinit8RecivingVariable)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af04      	add	r7, sp, #16
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(LightSensor_I2CChannel, LightSensor_SLAVE_ADDRESS,Copy_uint8RegisterAddress, 1, Copy_puinit8RecivingVariable, 1,TSL2561_Max_Delay);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	b29a      	uxth	r2, r3
 800143c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2301      	movs	r3, #1
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	2172      	movs	r1, #114	; 0x72
 800144e:	4803      	ldr	r0, [pc, #12]	; (800145c <TSL2561_ReadByte+0x30>)
 8001450:	f001 ff36 	bl	80032c0 <HAL_I2C_Mem_Read>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000046c 	.word	0x2000046c

08001460 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
	 * increments by 1 for future storing, it doesnt coincide with the tail
	 * the % UART_BUFFER_SIZE checking if the index of the next storing procedure
	 * is bigger than the buffer size(ex this iteration stores in 512 byte and the next one
	 * will be in the 513 so i should reset the (i) to zero to repeat again)*/

  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001472:	3301      	adds	r3, #1
 8001474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001478:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	429a      	cmp	r2, r3
 8001484:	d009      	beq.n	800149a <store_char+0x3a>
  {
	  /*Storing the charachter in the recent head pointed location*/
    buffer->buffer[buffer->head] = c;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	79f9      	ldrb	r1, [r7, #7]
 8001490:	54d1      	strb	r1, [r2, r3]

    /*After storing the character, incrementing the head for the next storing */
    buffer->head = i;
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f003 0320 	and.w	r3, r3, #32
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d013      	beq.n	80014f2 <Uart_isr+0x4a>
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00e      	beq.n	80014f2 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <Uart_isr+0xb4>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	4611      	mov	r1, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ffb8 	bl	8001460 <store_char>
        return;
 80014f0:	e031      	b.n	8001556 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d02c      	beq.n	8001556 <Uart_isr+0xae>
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001502:	2b00      	cmp	r3, #0
 8001504:	d027      	beq.n	8001556 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <Uart_isr+0xb8>)
 8001508:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <Uart_isr+0xb8>)
 800150e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001512:	429a      	cmp	r2, r3
 8001514:	d108      	bne.n	8001528 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001524:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001526:	e015      	b.n	8001554 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <Uart_isr+0xb8>)
 800152a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <Uart_isr+0xb8>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <Uart_isr+0xb8>)
 8001536:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800153a:	3301      	adds	r3, #1
 800153c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <Uart_isr+0xb8>)
 8001542:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	7bba      	ldrb	r2, [r7, #14]
 8001552:	605a      	str	r2, [r3, #4]
    	return;
 8001554:	bf00      	nop
    }
}
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000414 	.word	0x20000414
 8001560:	2000020c 	.word	0x2000020c

08001564 <Calculate_Car_Speed>:
#include "calculateSpeed.h"

extern uint32_t edges_counter;

float Calculate_Car_Speed()
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
	float Local_uint16Speed;
	Local_uint16Speed = (edges_counter/50)/(2000.0*60);
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <Calculate_Car_Speed+0x48>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <Calculate_Car_Speed+0x4c>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f834 	bl	80005e4 <__aeabi_ui2d>
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <Calculate_Car_Speed+0x50>)
 8001582:	f7ff f9d3 	bl	800092c <__aeabi_ddiv>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fb9b 	bl	8000cc8 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	607b      	str	r3, [r7, #4]
	edges_counter=0;
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <Calculate_Car_Speed+0x48>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
	return Local_uint16Speed;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	ee07 3a90 	vmov	s15, r3
}
 80015a2:	eeb0 0a67 	vmov.f32	s0, s15
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000204 	.word	0x20000204
 80015b0:	51eb851f 	.word	0x51eb851f
 80015b4:	40fd4c00 	.word	0x40fd4c00

080015b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015be:	f001 f8b9 	bl	8002734 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015c2:	f000 f83b 	bl	800163c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015c6:	f000 fb2f 	bl	8001c28 <MX_GPIO_Init>
	MX_I2C1_Init();
 80015ca:	f000 f8a3 	bl	8001714 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80015ce:	f000 faad 	bl	8001b2c <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 80015d2:	f000 fad5 	bl	8001b80 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 80015d6:	f000 f927 	bl	8001828 <MX_TIM2_Init>
	MX_I2C2_Init();
 80015da:	f000 f8c9 	bl	8001770 <MX_I2C2_Init>
	MX_I2C3_Init();
 80015de:	f000 f8f5 	bl	80017cc <MX_I2C3_Init>
	MX_TIM3_Init();
 80015e2:	f000 f985 	bl	80018f0 <MX_TIM3_Init>
	MX_UART5_Init();
 80015e6:	f000 fa77 	bl	8001ad8 <MX_UART5_Init>
	MX_TIM6_Init();
 80015ea:	f000 f9fb 	bl	80019e4 <MX_TIM6_Init>
	MX_TIM12_Init();
 80015ee:	f000 fa2f 	bl	8001a50 <MX_TIM12_Init>
	MX_USART6_UART_Init();
 80015f2:	f000 faef 	bl	8001bd4 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */

	/********************************Hardware_Initializing*********************************************/
	//GPS_voidInit(); //Note that LCD Init is included in this API
	LightSensor_voidInit();
 80015f6:	f7ff fd79 	bl	80010ec <LightSensor_voidInit>

	/********************************Interrupts_Starting***********************************************/
	HAL_UART_Receive_IT(&huart3,&received_char , 1);
 80015fa:	2201      	movs	r2, #1
 80015fc:	490c      	ldr	r1, [pc, #48]	; (8001630 <main+0x78>)
 80015fe:	480d      	ldr	r0, [pc, #52]	; (8001634 <main+0x7c>)
 8001600:	f004 f991 	bl	8005926 <HAL_UART_Receive_IT>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <main+0x80>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <main+0x80>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	60da      	str	r2, [r3, #12]
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001614:	2100      	movs	r1, #0
 8001616:	4808      	ldr	r0, [pc, #32]	; (8001638 <main+0x80>)
 8001618:	f003 fac6 	bl	8004ba8 <HAL_TIM_IC_Start_IT>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
          LightSensor_uint8ReadIntensity(&LUX);
 800161c:	1dbb      	adds	r3, r7, #6
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fd72 	bl	8001108 <LightSensor_uint8ReadIntensity>
          HAL_Delay(1000);
 8001624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001628:	f001 f8c6 	bl	80027b8 <HAL_Delay>
          LightSensor_uint8ReadIntensity(&LUX);
 800162c:	e7f6      	b.n	800161c <main+0x64>
 800162e:	bf00      	nop
 8001630:	20000744 	.word	0x20000744
 8001634:	200006bc 	.word	0x200006bc
 8001638:	20000514 	.word	0x20000514

0800163c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b094      	sub	sp, #80	; 0x50
 8001640:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	2234      	movs	r2, #52	; 0x34
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f007 fb41 	bl	8008cd2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <SystemClock_Config+0xd0>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	4a28      	ldr	r2, [pc, #160]	; (800170c <SystemClock_Config+0xd0>)
 800166a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166e:	6413      	str	r3, [r2, #64]	; 0x40
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <SystemClock_Config+0xd0>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800167c:	2300      	movs	r3, #0
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <SystemClock_Config+0xd4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001688:	4a21      	ldr	r2, [pc, #132]	; (8001710 <SystemClock_Config+0xd4>)
 800168a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <SystemClock_Config+0xd4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800169c:	2302      	movs	r3, #2
 800169e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a0:	2301      	movs	r3, #1
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016a4:	2310      	movs	r3, #16
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a8:	2302      	movs	r3, #2
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ac:	2300      	movs	r3, #0
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80016b0:	2308      	movs	r3, #8
 80016b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 80016b4:	2340      	movs	r3, #64	; 0x40
 80016b6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80016bc:	2302      	movs	r3, #2
 80016be:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 fe71 	bl	80043b0 <HAL_RCC_OscConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80016d4:	f000 fb32 	bl	8001d3c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d8:	230f      	movs	r3, #15
 80016da:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016dc:	2302      	movs	r3, #2
 80016de:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	2101      	movs	r1, #1
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 fb66 	bl	8003dc4 <HAL_RCC_ClockConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80016fe:	f000 fb1d 	bl	8001d3c <Error_Handler>
	}
}
 8001702:	bf00      	nop
 8001704:	3750      	adds	r7, #80	; 0x50
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40007000 	.word	0x40007000

08001714 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <MX_I2C1_Init+0x54>)
 800171a:	4a14      	ldr	r2, [pc, #80]	; (800176c <MX_I2C1_Init+0x58>)
 800171c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 1000;
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_I2C1_Init+0x54>)
 8001720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001724:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <MX_I2C1_Init+0x54>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_I2C1_Init+0x54>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <MX_I2C1_Init+0x54>)
 8001734:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001738:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_I2C1_Init+0x54>)
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_I2C1_Init+0x54>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_I2C1_Init+0x54>)
 8001748:	2200      	movs	r2, #0
 800174a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_I2C1_Init+0x54>)
 800174e:	2200      	movs	r2, #0
 8001750:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_I2C1_Init+0x54>)
 8001754:	f001 fb76 	bl	8002e44 <HAL_I2C_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_I2C1_Init+0x4e>
	{
		Error_Handler();
 800175e:	f000 faed 	bl	8001d3c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000418 	.word	0x20000418
 800176c:	40005400 	.word	0x40005400

08001770 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_I2C2_Init+0x54>)
 8001776:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <MX_I2C2_Init+0x58>)
 8001778:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 1000;
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <MX_I2C2_Init+0x54>)
 800177c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001780:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_I2C2_Init+0x54>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 120;
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_I2C2_Init+0x54>)
 800178a:	2278      	movs	r2, #120	; 0x78
 800178c:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <MX_I2C2_Init+0x54>)
 8001790:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001794:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <MX_I2C2_Init+0x54>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_I2C2_Init+0x54>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_I2C2_Init+0x54>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_I2C2_Init+0x54>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_I2C2_Init+0x54>)
 80017b0:	f001 fb48 	bl	8002e44 <HAL_I2C_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_I2C2_Init+0x4e>
	{
		Error_Handler();
 80017ba:	f000 fabf 	bl	8001d3c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000046c 	.word	0x2000046c
 80017c8:	40005800 	.word	0x40005800

080017cc <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_I2C3_Init+0x50>)
 80017d2:	4a13      	ldr	r2, [pc, #76]	; (8001820 <MX_I2C3_Init+0x54>)
 80017d4:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_I2C3_Init+0x50>)
 80017d8:	4a12      	ldr	r2, [pc, #72]	; (8001824 <MX_I2C3_Init+0x58>)
 80017da:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_I2C3_Init+0x50>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_I2C3_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_I2C3_Init+0x50>)
 80017ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ee:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <MX_I2C3_Init+0x50>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_I2C3_Init+0x50>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <MX_I2C3_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_I2C3_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_I2C3_Init+0x50>)
 800180a:	f001 fb1b 	bl	8002e44 <HAL_I2C_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 8001814:	f000 fa92 	bl	8001d3c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200004c0 	.word	0x200004c0
 8001820:	40005c00 	.word	0x40005c00
 8001824:	000186a0 	.word	0x000186a0

08001828 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182e:	f107 0320 	add.w	r3, r7, #32
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
 8001846:	615a      	str	r2, [r3, #20]
 8001848:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <MX_TIM2_Init+0xc4>)
 800184c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001850:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15999;
 8001852:	4b26      	ldr	r3, [pc, #152]	; (80018ec <MX_TIM2_Init+0xc4>)
 8001854:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001858:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <MX_TIM2_Init+0xc4>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 12000;
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <MX_TIM2_Init+0xc4>)
 8001862:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001866:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b20      	ldr	r3, [pc, #128]	; (80018ec <MX_TIM2_Init+0xc4>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <MX_TIM2_Init+0xc4>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001874:	481d      	ldr	r0, [pc, #116]	; (80018ec <MX_TIM2_Init+0xc4>)
 8001876:	f003 f8f9 	bl	8004a6c <HAL_TIM_OC_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8001880:	f000 fa5c 	bl	8001d3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800188c:	f107 0320 	add.w	r3, r7, #32
 8001890:	4619      	mov	r1, r3
 8001892:	4816      	ldr	r0, [pc, #88]	; (80018ec <MX_TIM2_Init+0xc4>)
 8001894:	f003 ff6a 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 800189e:	f000 fa4d 	bl	8001d3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <MX_TIM2_Init+0xc4>)
 80018ba:	f003 fba5 	bl	8005008 <HAL_TIM_OC_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM2_Init+0xa0>
	{
		Error_Handler();
 80018c4:	f000 fa3a 	bl	8001d3c <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2204      	movs	r2, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4807      	ldr	r0, [pc, #28]	; (80018ec <MX_TIM2_Init+0xc4>)
 80018d0:	f003 fb9a 	bl	8005008 <HAL_TIM_OC_ConfigChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM2_Init+0xb6>
	{
		Error_Handler();
 80018da:	f000 fa2f 	bl	8001d3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80018de:	4803      	ldr	r0, [pc, #12]	; (80018ec <MX_TIM2_Init+0xc4>)
 80018e0:	f000 fbac 	bl	800203c <HAL_TIM_MspPostInit>

}
 80018e4:	bf00      	nop
 80018e6:	3728      	adds	r7, #40	; 0x28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000514 	.word	0x20000514

080018f0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f6:	f107 0320 	add.w	r3, r7, #32
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	615a      	str	r2, [r3, #20]
 8001910:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001912:	4b32      	ldr	r3, [pc, #200]	; (80019dc <MX_TIM3_Init+0xec>)
 8001914:	4a32      	ldr	r2, [pc, #200]	; (80019e0 <MX_TIM3_Init+0xf0>)
 8001916:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 320-1;
 8001918:	4b30      	ldr	r3, [pc, #192]	; (80019dc <MX_TIM3_Init+0xec>)
 800191a:	f240 123f 	movw	r2, #319	; 0x13f
 800191e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001920:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <MX_TIM3_Init+0xec>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 8001926:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <MX_TIM3_Init+0xec>)
 8001928:	2263      	movs	r2, #99	; 0x63
 800192a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192c:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <MX_TIM3_Init+0xec>)
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <MX_TIM3_Init+0xec>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001938:	4828      	ldr	r0, [pc, #160]	; (80019dc <MX_TIM3_Init+0xec>)
 800193a:	f003 f8e6 	bl	8004b0a <HAL_TIM_PWM_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 8001944:	f000 f9fa 	bl	8001d3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001950:	f107 0320 	add.w	r3, r7, #32
 8001954:	4619      	mov	r1, r3
 8001956:	4821      	ldr	r0, [pc, #132]	; (80019dc <MX_TIM3_Init+0xec>)
 8001958:	f003 ff08 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 8001962:	f000 f9eb 	bl	8001d3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001966:	2360      	movs	r3, #96	; 0x60
 8001968:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	4817      	ldr	r0, [pc, #92]	; (80019dc <MX_TIM3_Init+0xec>)
 800197e:	f003 fb9f 	bl	80050c0 <HAL_TIM_PWM_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 8001988:	f000 f9d8 	bl	8001d3c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	2204      	movs	r2, #4
 8001990:	4619      	mov	r1, r3
 8001992:	4812      	ldr	r0, [pc, #72]	; (80019dc <MX_TIM3_Init+0xec>)
 8001994:	f003 fb94 	bl	80050c0 <HAL_TIM_PWM_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 800199e:	f000 f9cd 	bl	8001d3c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2208      	movs	r2, #8
 80019a6:	4619      	mov	r1, r3
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <MX_TIM3_Init+0xec>)
 80019aa:	f003 fb89 	bl	80050c0 <HAL_TIM_PWM_ConfigChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM3_Init+0xc8>
	{
		Error_Handler();
 80019b4:	f000 f9c2 	bl	8001d3c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	220c      	movs	r2, #12
 80019bc:	4619      	mov	r1, r3
 80019be:	4807      	ldr	r0, [pc, #28]	; (80019dc <MX_TIM3_Init+0xec>)
 80019c0:	f003 fb7e 	bl	80050c0 <HAL_TIM_PWM_ConfigChannel>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM3_Init+0xde>
	{
		Error_Handler();
 80019ca:	f000 f9b7 	bl	8001d3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80019ce:	4803      	ldr	r0, [pc, #12]	; (80019dc <MX_TIM3_Init+0xec>)
 80019d0:	f000 fb34 	bl	800203c <HAL_TIM_MspPostInit>

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	2000055c 	.word	0x2000055c
 80019e0:	40000400 	.word	0x40000400

080019e4 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ea:	463b      	mov	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_TIM6_Init+0x64>)
 80019f4:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <MX_TIM6_Init+0x68>)
 80019f6:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <MX_TIM6_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535;
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a0a:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a12:	480d      	ldr	r0, [pc, #52]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a14:	f002 ff6a 	bl	80048ec <HAL_TIM_Base_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 8001a1e:	f000 f98d 	bl	8001d3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a30:	f003 fe9c 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 8001a3a:	f000 f97f 	bl	8001d3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200005a4 	.word	0x200005a4
 8001a4c:	40001000 	.word	0x40001000

08001a50 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
 8001a64:	615a      	str	r2, [r3, #20]
 8001a66:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <MX_TIM12_Init+0x80>)
 8001a6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <MX_TIM12_Init+0x84>)
 8001a6c:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 160-1;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MX_TIM12_Init+0x80>)
 8001a70:	229f      	movs	r2, #159	; 0x9f
 8001a72:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <MX_TIM12_Init+0x80>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 100-1;
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <MX_TIM12_Init+0x80>)
 8001a7c:	2263      	movs	r2, #99	; 0x63
 8001a7e:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <MX_TIM12_Init+0x80>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_TIM12_Init+0x80>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001a8c:	4810      	ldr	r0, [pc, #64]	; (8001ad0 <MX_TIM12_Init+0x80>)
 8001a8e:	f003 f83c 	bl	8004b0a <HAL_TIM_PWM_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM12_Init+0x4c>
	{
		Error_Handler();
 8001a98:	f000 f950 	bl	8001d3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a9c:	2360      	movs	r3, #96	; 0x60
 8001a9e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	2200      	movs	r2, #0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <MX_TIM12_Init+0x80>)
 8001ab4:	f003 fb04 	bl	80050c0 <HAL_TIM_PWM_ConfigChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM12_Init+0x72>
	{
		Error_Handler();
 8001abe:	f000 f93d 	bl	8001d3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8001ac2:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <MX_TIM12_Init+0x80>)
 8001ac4:	f000 faba 	bl	800203c <HAL_TIM_MspPostInit>

}
 8001ac8:	bf00      	nop
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200005ec 	.word	0x200005ec
 8001ad4:	40001800 	.word	0x40001800

08001ad8 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_UART5_Init+0x4c>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <MX_UART5_Init+0x50>)
 8001ae0:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <MX_UART5_Init+0x4c>)
 8001ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae8:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_UART5_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <MX_UART5_Init+0x4c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <MX_UART5_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_UART5_Init+0x4c>)
 8001afe:	220c      	movs	r2, #12
 8001b00:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <MX_UART5_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <MX_UART5_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_UART5_Init+0x4c>)
 8001b10:	f003 febc 	bl	800588c <HAL_UART_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_UART5_Init+0x46>
	{
		Error_Handler();
 8001b1a:	f000 f90f 	bl	8001d3c <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000634 	.word	0x20000634
 8001b28:	40005000 	.word	0x40005000

08001b2c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <MX_USART1_UART_Init+0x50>)
 8001b34:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b3c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b64:	f003 fe92 	bl	800588c <HAL_UART_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001b6e:	f000 f8e5 	bl	8001d3c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000678 	.word	0x20000678
 8001b7c:	40011000 	.word	0x40011000

08001b80 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <MX_USART3_UART_Init+0x50>)
 8001b88:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001b8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b90:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_USART3_UART_Init+0x4c>)
 8001bb8:	f003 fe68 	bl	800588c <HAL_UART_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001bc2:	f000 f8bb 	bl	8001d3c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200006bc 	.word	0x200006bc
 8001bd0:	40004800 	.word	0x40004800

08001bd4 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_USART6_UART_Init+0x4c>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <MX_USART6_UART_Init+0x50>)
 8001bdc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_USART6_UART_Init+0x4c>)
 8001be0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001be4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_USART6_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_USART6_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <MX_USART6_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_USART6_UART_Init+0x4c>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <MX_USART6_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_USART6_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_USART6_UART_Init+0x4c>)
 8001c0c:	f003 fe3e 	bl	800588c <HAL_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 8001c16:	f000 f891 	bl	8001d3c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000700 	.word	0x20000700
 8001c24:	40011400 	.word	0x40011400

08001c28 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	4b32      	ldr	r3, [pc, #200]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a31      	ldr	r2, [pc, #196]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <MX_GPIO_Init+0xe4>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f242 311c 	movw	r1, #8988	; 0x231c
 8001cb4:	4816      	ldr	r0, [pc, #88]	; (8001d10 <MX_GPIO_Init+0xe8>)
 8001cb6:	f001 f8ab 	bl	8002e10 <HAL_GPIO_WritePin>
			|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001cc0:	4814      	ldr	r0, [pc, #80]	; (8001d14 <MX_GPIO_Init+0xec>)
 8001cc2:	f001 f8a5 	bl	8002e10 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001cc6:	f242 331c 	movw	r3, #8988	; 0x231c
 8001cca:	617b      	str	r3, [r7, #20]
			|GPIO_PIN_8|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480c      	ldr	r0, [pc, #48]	; (8001d10 <MX_GPIO_Init+0xe8>)
 8001ce0:	f000 ff02 	bl	8002ae8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8001ce4:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001ce8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_GPIO_Init+0xec>)
 8001cfe:	f000 fef3 	bl	8002ae8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020800 	.word	0x40020800
 8001d14:	40020400 	.word	0x40020400

08001d18 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001d2a:	f000 fd25 	bl	8002778 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40001400 	.word	0x40001400

08001d3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d40:	b672      	cpsid	i
}
 8001d42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d44:	e7fe      	b.n	8001d44 <Error_Handler+0x8>
	...

08001d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a0f      	ldr	r2, [pc, #60]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800

08001d98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08e      	sub	sp, #56	; 0x38
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a5b      	ldr	r2, [pc, #364]	; (8001f24 <HAL_I2C_MspInit+0x18c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d12c      	bne.n	8001e14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
 8001dbe:	4b5a      	ldr	r3, [pc, #360]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a59      	ldr	r2, [pc, #356]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b57      	ldr	r3, [pc, #348]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	623b      	str	r3, [r7, #32]
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dd6:	23c0      	movs	r3, #192	; 0xc0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dda:	2312      	movs	r3, #18
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de2:	2303      	movs	r3, #3
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001de6:	2304      	movs	r3, #4
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dee:	4619      	mov	r1, r3
 8001df0:	484e      	ldr	r0, [pc, #312]	; (8001f2c <HAL_I2C_MspInit+0x194>)
 8001df2:	f000 fe79 	bl	8002ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a4a      	ldr	r2, [pc, #296]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001e00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b48      	ldr	r3, [pc, #288]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e12:	e082      	b.n	8001f1a <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a45      	ldr	r2, [pc, #276]	; (8001f30 <HAL_I2C_MspInit+0x198>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d12d      	bne.n	8001e7a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a40      	ldr	r2, [pc, #256]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b3e      	ldr	r3, [pc, #248]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001e3a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e40:	2312      	movs	r3, #18
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e54:	4619      	mov	r1, r3
 8001e56:	4835      	ldr	r0, [pc, #212]	; (8001f2c <HAL_I2C_MspInit+0x194>)
 8001e58:	f000 fe46 	bl	8002ae8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	4a30      	ldr	r2, [pc, #192]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001e66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6c:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	697b      	ldr	r3, [r7, #20]
}
 8001e78:	e04f      	b.n	8001f1a <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a2d      	ldr	r2, [pc, #180]	; (8001f34 <HAL_I2C_MspInit+0x19c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d14a      	bne.n	8001f1a <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	4a26      	ldr	r2, [pc, #152]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6313      	str	r3, [r2, #48]	; 0x30
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec2:	2312      	movs	r3, #18
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4817      	ldr	r0, [pc, #92]	; (8001f38 <HAL_I2C_MspInit+0x1a0>)
 8001eda:	f000 fe05 	bl	8002ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ede:	2310      	movs	r3, #16
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee2:	2312      	movs	r3, #18
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001eee:	2304      	movs	r3, #4
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480c      	ldr	r0, [pc, #48]	; (8001f2c <HAL_I2C_MspInit+0x194>)
 8001efa:	f000 fdf5 	bl	8002ae8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001f08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_I2C_MspInit+0x190>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
}
 8001f1a:	bf00      	nop
 8001f1c:	3738      	adds	r7, #56	; 0x38
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40005400 	.word	0x40005400
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	40005800 	.word	0x40005800
 8001f34:	40005c00 	.word	0x40005c00
 8001f38:	40020000 	.word	0x40020000

08001f3c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4c:	d115      	bne.n	8001f7a <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_TIM_OC_MspInit+0x48>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <HAL_TIM_OC_MspInit+0x48>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_TIM_OC_MspInit+0x48>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	201c      	movs	r0, #28
 8001f70:	f000 fcfe 	bl	8002970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f74:	201c      	movs	r0, #28
 8001f76:	f000 fd17 	bl	80029a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800

08001f88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a15      	ldr	r2, [pc, #84]	; (8001fec <HAL_TIM_PWM_MspInit+0x64>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d10e      	bne.n	8001fb8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_TIM_PWM_MspInit+0x68>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a13      	ldr	r2, [pc, #76]	; (8001ff0 <HAL_TIM_PWM_MspInit+0x68>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_TIM_PWM_MspInit+0x68>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001fb6:	e012      	b.n	8001fde <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10d      	bne.n	8001fde <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_TIM_PWM_MspInit+0x68>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <HAL_TIM_PWM_MspInit+0x68>)
 8001fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <HAL_TIM_PWM_MspInit+0x68>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40001800 	.word	0x40001800

08001ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <HAL_TIM_Base_MspInit+0x3c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d10d      	bne.n	8002026 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_TIM_Base_MspInit+0x40>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	4a09      	ldr	r2, [pc, #36]	; (8002038 <HAL_TIM_Base_MspInit+0x40>)
 8002014:	f043 0310 	orr.w	r3, r3, #16
 8002018:	6413      	str	r3, [r2, #64]	; 0x40
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <HAL_TIM_Base_MspInit+0x40>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40001000 	.word	0x40001000
 8002038:	40023800 	.word	0x40023800

0800203c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	; 0x30
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d11e      	bne.n	800209c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	4b43      	ldr	r3, [pc, #268]	; (8002170 <HAL_TIM_MspPostInit+0x134>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a42      	ldr	r2, [pc, #264]	; (8002170 <HAL_TIM_MspPostInit+0x134>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b40      	ldr	r3, [pc, #256]	; (8002170 <HAL_TIM_MspPostInit+0x134>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800207a:	2303      	movs	r3, #3
 800207c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800208a:	2301      	movs	r3, #1
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	4619      	mov	r1, r3
 8002094:	4837      	ldr	r0, [pc, #220]	; (8002174 <HAL_TIM_MspPostInit+0x138>)
 8002096:	f000 fd27 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800209a:	e065      	b.n	8002168 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a35      	ldr	r2, [pc, #212]	; (8002178 <HAL_TIM_MspPostInit+0x13c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d13c      	bne.n	8002120 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_TIM_MspPostInit+0x134>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a30      	ldr	r2, [pc, #192]	; (8002170 <HAL_TIM_MspPostInit+0x134>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <HAL_TIM_MspPostInit+0x134>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_TIM_MspPostInit+0x134>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a29      	ldr	r2, [pc, #164]	; (8002170 <HAL_TIM_MspPostInit+0x134>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_TIM_MspPostInit+0x134>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020de:	23c0      	movs	r3, #192	; 0xc0
 80020e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020ee:	2302      	movs	r3, #2
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	4619      	mov	r1, r3
 80020f8:	481e      	ldr	r0, [pc, #120]	; (8002174 <HAL_TIM_MspPostInit+0x138>)
 80020fa:	f000 fcf5 	bl	8002ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020fe:	2303      	movs	r3, #3
 8002100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800210e:	2302      	movs	r3, #2
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	4619      	mov	r1, r3
 8002118:	4818      	ldr	r0, [pc, #96]	; (800217c <HAL_TIM_MspPostInit+0x140>)
 800211a:	f000 fce5 	bl	8002ae8 <HAL_GPIO_Init>
}
 800211e:	e023      	b.n	8002168 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM12)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a16      	ldr	r2, [pc, #88]	; (8002180 <HAL_TIM_MspPostInit+0x144>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d11e      	bne.n	8002168 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_TIM_MspPostInit+0x134>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <HAL_TIM_MspPostInit+0x134>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <HAL_TIM_MspPostInit+0x134>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002146:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800214a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002158:	2309      	movs	r3, #9
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	4619      	mov	r1, r3
 8002162:	4806      	ldr	r0, [pc, #24]	; (800217c <HAL_TIM_MspPostInit+0x140>)
 8002164:	f000 fcc0 	bl	8002ae8 <HAL_GPIO_Init>
}
 8002168:	bf00      	nop
 800216a:	3730      	adds	r7, #48	; 0x30
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000
 8002178:	40000400 	.word	0x40000400
 800217c:	40020400 	.word	0x40020400
 8002180:	40001800 	.word	0x40001800

08002184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b090      	sub	sp, #64	; 0x40
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a80      	ldr	r2, [pc, #512]	; (80023a4 <HAL_UART_MspInit+0x220>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d153      	bne.n	800224e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021aa:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a7e      	ldr	r2, [pc, #504]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80021b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b7c      	ldr	r3, [pc, #496]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
 80021c6:	4b78      	ldr	r3, [pc, #480]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a77      	ldr	r2, [pc, #476]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b75      	ldr	r3, [pc, #468]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	623b      	str	r3, [r7, #32]
 80021e2:	4b71      	ldr	r3, [pc, #452]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a70      	ldr	r2, [pc, #448]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80021e8:	f043 0308 	orr.w	r3, r3, #8
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b6e      	ldr	r3, [pc, #440]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	623b      	str	r3, [r7, #32]
 80021f8:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800220c:	2308      	movs	r3, #8
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002210:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002214:	4619      	mov	r1, r3
 8002216:	4865      	ldr	r0, [pc, #404]	; (80023ac <HAL_UART_MspInit+0x228>)
 8002218:	f000 fc66 	bl	8002ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800221c:	2304      	movs	r3, #4
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800222c:	2308      	movs	r3, #8
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002234:	4619      	mov	r1, r3
 8002236:	485e      	ldr	r0, [pc, #376]	; (80023b0 <HAL_UART_MspInit+0x22c>)
 8002238:	f000 fc56 	bl	8002ae8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	2035      	movs	r0, #53	; 0x35
 8002242:	f000 fb95 	bl	8002970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002246:	2035      	movs	r0, #53	; 0x35
 8002248:	f000 fbae 	bl	80029a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800224c:	e0a6      	b.n	800239c <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <HAL_UART_MspInit+0x230>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d135      	bne.n	80022c4 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	4b52      	ldr	r3, [pc, #328]	; (80023a8 <HAL_UART_MspInit+0x224>)
 800225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002260:	4a51      	ldr	r2, [pc, #324]	; (80023a8 <HAL_UART_MspInit+0x224>)
 8002262:	f043 0310 	orr.w	r3, r3, #16
 8002266:	6453      	str	r3, [r2, #68]	; 0x44
 8002268:	4b4f      	ldr	r3, [pc, #316]	; (80023a8 <HAL_UART_MspInit+0x224>)
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	4b4b      	ldr	r3, [pc, #300]	; (80023a8 <HAL_UART_MspInit+0x224>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	4a4a      	ldr	r2, [pc, #296]	; (80023a8 <HAL_UART_MspInit+0x224>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6313      	str	r3, [r2, #48]	; 0x30
 8002284:	4b48      	ldr	r3, [pc, #288]	; (80023a8 <HAL_UART_MspInit+0x224>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002290:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022a2:	2307      	movs	r3, #7
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022aa:	4619      	mov	r1, r3
 80022ac:	4842      	ldr	r0, [pc, #264]	; (80023b8 <HAL_UART_MspInit+0x234>)
 80022ae:	f000 fc1b 	bl	8002ae8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2106      	movs	r1, #6
 80022b6:	2025      	movs	r0, #37	; 0x25
 80022b8:	f000 fb5a 	bl	8002970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022bc:	2025      	movs	r0, #37	; 0x25
 80022be:	f000 fb73 	bl	80029a8 <HAL_NVIC_EnableIRQ>
}
 80022c2:	e06b      	b.n	800239c <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART3)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a3c      	ldr	r2, [pc, #240]	; (80023bc <HAL_UART_MspInit+0x238>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d135      	bne.n	800233a <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	4a34      	ldr	r2, [pc, #208]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022dc:	6413      	str	r3, [r2, #64]	; 0x40
 80022de:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a2d      	ldr	r2, [pc, #180]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_UART_MspInit+0x224>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8002306:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002318:	2307      	movs	r3, #7
 800231a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002320:	4619      	mov	r1, r3
 8002322:	4822      	ldr	r0, [pc, #136]	; (80023ac <HAL_UART_MspInit+0x228>)
 8002324:	f000 fbe0 	bl	8002ae8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	2101      	movs	r1, #1
 800232c:	2027      	movs	r0, #39	; 0x27
 800232e:	f000 fb1f 	bl	8002970 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002332:	2027      	movs	r0, #39	; 0x27
 8002334:	f000 fb38 	bl	80029a8 <HAL_NVIC_EnableIRQ>
}
 8002338:	e030      	b.n	800239c <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART6)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a20      	ldr	r2, [pc, #128]	; (80023c0 <HAL_UART_MspInit+0x23c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d12b      	bne.n	800239c <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_UART_MspInit+0x224>)
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <HAL_UART_MspInit+0x224>)
 800234e:	f043 0320 	orr.w	r3, r3, #32
 8002352:	6453      	str	r3, [r2, #68]	; 0x44
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <HAL_UART_MspInit+0x224>)
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_UART_MspInit+0x224>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <HAL_UART_MspInit+0x224>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	6313      	str	r3, [r2, #48]	; 0x30
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <HAL_UART_MspInit+0x224>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800237c:	23c0      	movs	r3, #192	; 0xc0
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800238c:	2308      	movs	r3, #8
 800238e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002394:	4619      	mov	r1, r3
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <HAL_UART_MspInit+0x228>)
 8002398:	f000 fba6 	bl	8002ae8 <HAL_GPIO_Init>
}
 800239c:	bf00      	nop
 800239e:	3740      	adds	r7, #64	; 0x40
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40005000 	.word	0x40005000
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40020c00 	.word	0x40020c00
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40004800 	.word	0x40004800
 80023c0:	40011400 	.word	0x40011400

080023c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08e      	sub	sp, #56	; 0x38
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	4b33      	ldr	r3, [pc, #204]	; (80024a8 <HAL_InitTick+0xe4>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	4a32      	ldr	r2, [pc, #200]	; (80024a8 <HAL_InitTick+0xe4>)
 80023de:	f043 0320 	orr.w	r3, r3, #32
 80023e2:	6413      	str	r3, [r2, #64]	; 0x40
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <HAL_InitTick+0xe4>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023f0:	f107 0210 	add.w	r2, r7, #16
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f001 fdfc 	bl	8003ff8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800240a:	f001 fdcd 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 800240e:	6378      	str	r0, [r7, #52]	; 0x34
 8002410:	e004      	b.n	800241c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002412:	f001 fdc9 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 8002416:	4603      	mov	r3, r0
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241e:	4a23      	ldr	r2, [pc, #140]	; (80024ac <HAL_InitTick+0xe8>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	0c9b      	lsrs	r3, r3, #18
 8002426:	3b01      	subs	r3, #1
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800242a:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <HAL_InitTick+0xec>)
 800242c:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <HAL_InitTick+0xf0>)
 800242e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002430:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <HAL_InitTick+0xec>)
 8002432:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002436:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002438:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <HAL_InitTick+0xec>)
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <HAL_InitTick+0xec>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <HAL_InitTick+0xec>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_InitTick+0xec>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002450:	4817      	ldr	r0, [pc, #92]	; (80024b0 <HAL_InitTick+0xec>)
 8002452:	f002 fa4b 	bl	80048ec <HAL_TIM_Base_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800245c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002460:	2b00      	cmp	r3, #0
 8002462:	d11b      	bne.n	800249c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002464:	4812      	ldr	r0, [pc, #72]	; (80024b0 <HAL_InitTick+0xec>)
 8002466:	f002 fa91 	bl	800498c <HAL_TIM_Base_Start_IT>
 800246a:	4603      	mov	r3, r0
 800246c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002470:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002474:	2b00      	cmp	r3, #0
 8002476:	d111      	bne.n	800249c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002478:	2037      	movs	r0, #55	; 0x37
 800247a:	f000 fa95 	bl	80029a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b0f      	cmp	r3, #15
 8002482:	d808      	bhi.n	8002496 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002484:	2200      	movs	r2, #0
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	2037      	movs	r0, #55	; 0x37
 800248a:	f000 fa71 	bl	8002970 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <HAL_InitTick+0xf4>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	e002      	b.n	800249c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800249c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3738      	adds	r7, #56	; 0x38
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40023800 	.word	0x40023800
 80024ac:	431bde83 	.word	0x431bde83
 80024b0:	20000750 	.word	0x20000750
 80024b4:	40001400 	.word	0x40001400
 80024b8:	20000004 	.word	0x20000004

080024bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <NMI_Handler+0x4>

080024c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c6:	e7fe      	b.n	80024c6 <HardFault_Handler+0x4>

080024c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <MemManage_Handler+0x4>

080024ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d2:	e7fe      	b.n	80024d2 <BusFault_Handler+0x4>

080024d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <UsageFault_Handler+0x4>
	...

080024dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 80024e2:	4b22      	ldr	r3, [pc, #136]	; (800256c <TIM2_IRQHandler+0x90>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d131      	bne.n	8002554 <TIM2_IRQHandler+0x78>
		// Timer overflow interrupt
		Global_Speed = round(Calculate_Car_Speed());
 80024f0:	f7ff f838 	bl	8001564 <Calculate_Car_Speed>
 80024f4:	ee10 3a10 	vmov	r3, s0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe f895 	bl	8000628 <__aeabi_f2d>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	ec43 2b10 	vmov	d0, r2, r3
 8002506:	f008 fc7b 	bl	800ae00 <round>
 800250a:	ec53 2b10 	vmov	r2, r3, d0
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	f7fe fbb9 	bl	8000c88 <__aeabi_d2uiz>
 8002516:	4603      	mov	r3, r0
 8002518:	b29a      	uxth	r2, r3
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <TIM2_IRQHandler+0x94>)
 800251c:	801a      	strh	r2, [r3, #0]

        if(Global_GPS_Speed_Completetion==Nothing_Completed)
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <TIM2_IRQHandler+0x98>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d103      	bne.n	800252e <TIM2_IRQHandler+0x52>
        {
        	Global_GPS_Speed_Completetion=Half_Completed_Speed;
 8002526:	4b13      	ldr	r3, [pc, #76]	; (8002574 <TIM2_IRQHandler+0x98>)
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
 800252c:	e017      	b.n	800255e <TIM2_IRQHandler+0x82>

        }
        else if(Global_GPS_Speed_Completetion==Half_Completed_GPS)
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <TIM2_IRQHandler+0x98>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d113      	bne.n	800255e <TIM2_IRQHandler+0x82>
        {
        	Global_GPS_Speed_Completetion=Nothing_Completed;
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <TIM2_IRQHandler+0x98>)
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]

        	/*Notify the ESPPeriodicTask*/
        	xTaskNotifyFromISR(Handle_ESP_Periodic,0,eNoAction,NULL);
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <TIM2_IRQHandler+0x9c>)
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	2300      	movs	r3, #0
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	2300      	movs	r3, #0
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2300      	movs	r3, #0
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	f004 fab5 	bl	8006abc <xTaskGenericNotifyFromISR>
 8002552:	e004      	b.n	800255e <TIM2_IRQHandler+0x82>
        }

	}else {
		edges_counter++;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <TIM2_IRQHandler+0xa0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	4a08      	ldr	r2, [pc, #32]	; (800257c <TIM2_IRQHandler+0xa0>)
 800255c:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800255e:	4803      	ldr	r0, [pc, #12]	; (800256c <TIM2_IRQHandler+0x90>)
 8002560:	f002 fc4a 	bl	8004df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000514 	.word	0x20000514
 8002570:	2000020a 	.word	0x2000020a
 8002574:	20000208 	.word	0x20000208
 8002578:	2000074c 	.word	0x2000074c
 800257c:	20000204 	.word	0x20000204

08002580 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8002584:	4803      	ldr	r0, [pc, #12]	; (8002594 <USART1_IRQHandler+0x14>)
 8002586:	f7fe ff8f 	bl	80014a8 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800258a:	4802      	ldr	r0, [pc, #8]	; (8002594 <USART1_IRQHandler+0x14>)
 800258c:	f003 f9fc 	bl	8005988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000678 	.word	0x20000678

08002598 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <USART3_IRQHandler+0x10>)
 800259e:	f003 f9f3 	bl	8005988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200006bc 	.word	0x200006bc

080025ac <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <UART5_IRQHandler+0x10>)
 80025b2:	f003 f9e9 	bl	8005988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000634 	.word	0x20000634

080025c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <TIM7_IRQHandler+0x10>)
 80025c6:	f002 fc17 	bl	8004df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000750 	.word	0x20000750

080025d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return 1;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_kill>:

int _kill(int pid, int sig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ee:	f006 fbb1 	bl	8008d54 <__errno>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2216      	movs	r2, #22
 80025f6:	601a      	str	r2, [r3, #0]
  return -1;
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <_exit>:

void _exit (int status)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800260c:	f04f 31ff 	mov.w	r1, #4294967295
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ffe7 	bl	80025e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002616:	e7fe      	b.n	8002616 <_exit+0x12>

08002618 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	e00a      	b.n	8002640 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800262a:	f3af 8000 	nop.w
 800262e:	4601      	mov	r1, r0
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	60ba      	str	r2, [r7, #8]
 8002636:	b2ca      	uxtb	r2, r1
 8002638:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	dbf0      	blt.n	800262a <_read+0x12>
  }

  return len;
 8002648:	687b      	ldr	r3, [r7, #4]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800267a:	605a      	str	r2, [r3, #4]
  return 0;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <_isatty>:

int _isatty(int file)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002692:	2301      	movs	r3, #1
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <SystemInit+0x20>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <SystemInit+0x20>)
 80026c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002718 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026e6:	490e      	ldr	r1, [pc, #56]	; (8002720 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026e8:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ec:	e002      	b.n	80026f4 <LoopCopyDataInit>

080026ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f2:	3304      	adds	r3, #4

080026f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f8:	d3f9      	bcc.n	80026ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026fc:	4c0b      	ldr	r4, [pc, #44]	; (800272c <LoopFillZerobss+0x26>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002700:	e001      	b.n	8002706 <LoopFillZerobss>

08002702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002704:	3204      	adds	r2, #4

08002706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002708:	d3fb      	bcc.n	8002702 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800270a:	f7ff ffd7 	bl	80026bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800270e:	f006 fb27 	bl	8008d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002712:	f7fe ff51 	bl	80015b8 <main>
  bx  lr    
 8002716:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002718:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002720:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002724:	0800be78 	.word	0x0800be78
  ldr r2, =_sbss
 8002728:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800272c:	20000f64 	.word	0x20000f64

08002730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <ADC_IRQHandler>
	...

08002734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_Init+0x40>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <HAL_Init+0x40>)
 800273e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_Init+0x40>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <HAL_Init+0x40>)
 800274a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800274e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_Init+0x40>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a07      	ldr	r2, [pc, #28]	; (8002774 <HAL_Init+0x40>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275c:	2003      	movs	r0, #3
 800275e:	f000 f8fc 	bl	800295a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002762:	200f      	movs	r0, #15
 8002764:	f7ff fe2e 	bl	80023c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002768:	f7ff faee 	bl	8001d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023c00 	.word	0x40023c00

08002778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_IncTick+0x20>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_IncTick+0x24>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4413      	add	r3, r2
 8002788:	4a04      	ldr	r2, [pc, #16]	; (800279c <HAL_IncTick+0x24>)
 800278a:	6013      	str	r3, [r2, #0]
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000008 	.word	0x20000008
 800279c:	20000798 	.word	0x20000798

080027a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return uwTick;
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HAL_GetTick+0x14>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000798 	.word	0x20000798

080027b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c0:	f7ff ffee 	bl	80027a0 <HAL_GetTick>
 80027c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d005      	beq.n	80027de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_Delay+0x44>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027de:	bf00      	nop
 80027e0:	f7ff ffde 	bl	80027a0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d8f7      	bhi.n	80027e0 <HAL_Delay+0x28>
  {
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000008 	.word	0x20000008

08002800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800281c:	4013      	ands	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800282c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002832:	4a04      	ldr	r2, [pc, #16]	; (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	60d3      	str	r3, [r2, #12]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <__NVIC_GetPriorityGrouping+0x18>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	f003 0307 	and.w	r3, r3, #7
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	2b00      	cmp	r3, #0
 8002874:	db0b      	blt.n	800288e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	f003 021f 	and.w	r2, r3, #31
 800287c:	4907      	ldr	r1, [pc, #28]	; (800289c <__NVIC_EnableIRQ+0x38>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	2001      	movs	r0, #1
 8002886:	fa00 f202 	lsl.w	r2, r0, r2
 800288a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000e100 	.word	0xe000e100

080028a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	6039      	str	r1, [r7, #0]
 80028aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	db0a      	blt.n	80028ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	490c      	ldr	r1, [pc, #48]	; (80028ec <__NVIC_SetPriority+0x4c>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	0112      	lsls	r2, r2, #4
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	440b      	add	r3, r1
 80028c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c8:	e00a      	b.n	80028e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4908      	ldr	r1, [pc, #32]	; (80028f0 <__NVIC_SetPriority+0x50>)
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	3b04      	subs	r3, #4
 80028d8:	0112      	lsls	r2, r2, #4
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	440b      	add	r3, r1
 80028de:	761a      	strb	r2, [r3, #24]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000e100 	.word	0xe000e100
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	; 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f1c3 0307 	rsb	r3, r3, #7
 800290e:	2b04      	cmp	r3, #4
 8002910:	bf28      	it	cs
 8002912:	2304      	movcs	r3, #4
 8002914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3304      	adds	r3, #4
 800291a:	2b06      	cmp	r3, #6
 800291c:	d902      	bls.n	8002924 <NVIC_EncodePriority+0x30>
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3b03      	subs	r3, #3
 8002922:	e000      	b.n	8002926 <NVIC_EncodePriority+0x32>
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	f04f 32ff 	mov.w	r2, #4294967295
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	401a      	ands	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800293c:	f04f 31ff 	mov.w	r1, #4294967295
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43d9      	mvns	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	4313      	orrs	r3, r2
         );
}
 800294e:	4618      	mov	r0, r3
 8002950:	3724      	adds	r7, #36	; 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ff4c 	bl	8002800 <__NVIC_SetPriorityGrouping>
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002982:	f7ff ff61 	bl	8002848 <__NVIC_GetPriorityGrouping>
 8002986:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	6978      	ldr	r0, [r7, #20]
 800298e:	f7ff ffb1 	bl	80028f4 <NVIC_EncodePriority>
 8002992:	4602      	mov	r2, r0
 8002994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ff80 	bl	80028a0 <__NVIC_SetPriority>
}
 80029a0:	bf00      	nop
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ff54 	bl	8002864 <__NVIC_EnableIRQ>
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029d2:	f7ff fee5 	bl	80027a0 <HAL_GetTick>
 80029d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d008      	beq.n	80029f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e052      	b.n	8002a9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0216 	bic.w	r2, r2, #22
 8002a04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <HAL_DMA_Abort+0x62>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0208 	bic.w	r2, r2, #8
 8002a34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a46:	e013      	b.n	8002a70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a48:	f7ff feaa 	bl	80027a0 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	d90c      	bls.n	8002a70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2203      	movs	r2, #3
 8002a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e015      	b.n	8002a9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1e4      	bne.n	8002a48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	223f      	movs	r2, #63	; 0x3f
 8002a84:	409a      	lsls	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00c      	b.n	8002adc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2205      	movs	r2, #5
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e165      	b.n	8002dd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f040 8154 	bne.w	8002dca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d005      	beq.n	8002b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d130      	bne.n	8002b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 0201 	and.w	r2, r3, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d017      	beq.n	8002bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d123      	bne.n	8002c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	08da      	lsrs	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3208      	adds	r2, #8
 8002bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	08da      	lsrs	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3208      	adds	r2, #8
 8002c26:	69b9      	ldr	r1, [r7, #24]
 8002c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0203 	and.w	r2, r3, #3
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80ae 	beq.w	8002dca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b5d      	ldr	r3, [pc, #372]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	4a5c      	ldr	r2, [pc, #368]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7e:	4b5a      	ldr	r3, [pc, #360]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c8a:	4a58      	ldr	r2, [pc, #352]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	3302      	adds	r3, #2
 8002c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4f      	ldr	r2, [pc, #316]	; (8002df0 <HAL_GPIO_Init+0x308>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d025      	beq.n	8002d02 <HAL_GPIO_Init+0x21a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4e      	ldr	r2, [pc, #312]	; (8002df4 <HAL_GPIO_Init+0x30c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01f      	beq.n	8002cfe <HAL_GPIO_Init+0x216>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4d      	ldr	r2, [pc, #308]	; (8002df8 <HAL_GPIO_Init+0x310>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d019      	beq.n	8002cfa <HAL_GPIO_Init+0x212>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4c      	ldr	r2, [pc, #304]	; (8002dfc <HAL_GPIO_Init+0x314>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x20e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4b      	ldr	r2, [pc, #300]	; (8002e00 <HAL_GPIO_Init+0x318>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x20a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4a      	ldr	r2, [pc, #296]	; (8002e04 <HAL_GPIO_Init+0x31c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x206>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a49      	ldr	r2, [pc, #292]	; (8002e08 <HAL_GPIO_Init+0x320>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x202>
 8002ce6:	2306      	movs	r3, #6
 8002ce8:	e00c      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cea:	2307      	movs	r3, #7
 8002cec:	e00a      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cee:	2305      	movs	r3, #5
 8002cf0:	e008      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e004      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e002      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_GPIO_Init+0x21c>
 8002d02:	2300      	movs	r3, #0
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	f002 0203 	and.w	r2, r2, #3
 8002d0a:	0092      	lsls	r2, r2, #2
 8002d0c:	4093      	lsls	r3, r2
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d14:	4935      	ldr	r1, [pc, #212]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d22:	4b3a      	ldr	r3, [pc, #232]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d46:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d4c:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d70:	4a26      	ldr	r2, [pc, #152]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d76:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d9a:	4a1c      	ldr	r2, [pc, #112]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da0:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc4:	4a11      	ldr	r2, [pc, #68]	; (8002e0c <HAL_GPIO_Init+0x324>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2b0f      	cmp	r3, #15
 8002dd4:	f67f ae96 	bls.w	8002b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40020c00 	.word	0x40020c00
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40021400 	.word	0x40021400
 8002e08:	40021800 	.word	0x40021800
 8002e0c:	40013c00 	.word	0x40013c00

08002e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e20:	787b      	ldrb	r3, [r7, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e2c:	e003      	b.n	8002e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e2e:	887b      	ldrh	r3, [r7, #2]
 8002e30:	041a      	lsls	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	619a      	str	r2, [r3, #24]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e12b      	b.n	80030ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe ff94 	bl	8001d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea8:	f001 f87e 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 8002eac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4a81      	ldr	r2, [pc, #516]	; (80030b8 <HAL_I2C_Init+0x274>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d807      	bhi.n	8002ec8 <HAL_I2C_Init+0x84>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a80      	ldr	r2, [pc, #512]	; (80030bc <HAL_I2C_Init+0x278>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	bf94      	ite	ls
 8002ec0:	2301      	movls	r3, #1
 8002ec2:	2300      	movhi	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e006      	b.n	8002ed6 <HAL_I2C_Init+0x92>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a7d      	ldr	r2, [pc, #500]	; (80030c0 <HAL_I2C_Init+0x27c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	bf94      	ite	ls
 8002ed0:	2301      	movls	r3, #1
 8002ed2:	2300      	movhi	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0e7      	b.n	80030ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a78      	ldr	r2, [pc, #480]	; (80030c4 <HAL_I2C_Init+0x280>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0c9b      	lsrs	r3, r3, #18
 8002ee8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a6a      	ldr	r2, [pc, #424]	; (80030b8 <HAL_I2C_Init+0x274>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d802      	bhi.n	8002f18 <HAL_I2C_Init+0xd4>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3301      	adds	r3, #1
 8002f16:	e009      	b.n	8002f2c <HAL_I2C_Init+0xe8>
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	4a69      	ldr	r2, [pc, #420]	; (80030c8 <HAL_I2C_Init+0x284>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	430b      	orrs	r3, r1
 8002f32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	495c      	ldr	r1, [pc, #368]	; (80030b8 <HAL_I2C_Init+0x274>)
 8002f48:	428b      	cmp	r3, r1
 8002f4a:	d819      	bhi.n	8002f80 <HAL_I2C_Init+0x13c>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1e59      	subs	r1, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f5a:	1c59      	adds	r1, r3, #1
 8002f5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f60:	400b      	ands	r3, r1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_I2C_Init+0x138>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1e59      	subs	r1, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7a:	e051      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	e04f      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d111      	bne.n	8002fac <HAL_I2C_Init+0x168>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1e58      	subs	r0, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	440b      	add	r3, r1
 8002f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e012      	b.n	8002fd2 <HAL_I2C_Init+0x18e>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e58      	subs	r0, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	0099      	lsls	r1, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Init+0x196>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e022      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10e      	bne.n	8003000 <HAL_I2C_Init+0x1bc>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1e58      	subs	r0, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	440b      	add	r3, r1
 8002ff0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffe:	e00f      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	0099      	lsls	r1, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	fbb0 f3f3 	udiv	r3, r0, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	6809      	ldr	r1, [r1, #0]
 8003024:	4313      	orrs	r3, r2
 8003026:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800304e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6911      	ldr	r1, [r2, #16]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68d2      	ldr	r2, [r2, #12]
 800305a:	4311      	orrs	r1, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	430b      	orrs	r3, r1
 8003062:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	000186a0 	.word	0x000186a0
 80030bc:	001e847f 	.word	0x001e847f
 80030c0:	003d08ff 	.word	0x003d08ff
 80030c4:	431bde83 	.word	0x431bde83
 80030c8:	10624dd3 	.word	0x10624dd3

080030cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	817b      	strh	r3, [r7, #10]
 80030de:	460b      	mov	r3, r1
 80030e0:	813b      	strh	r3, [r7, #8]
 80030e2:	4613      	mov	r3, r2
 80030e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030e6:	f7ff fb5b 	bl	80027a0 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	f040 80d9 	bne.w	80032ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2319      	movs	r3, #25
 8003100:	2201      	movs	r2, #1
 8003102:	496d      	ldr	r1, [pc, #436]	; (80032b8 <HAL_I2C_Mem_Write+0x1ec>)
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fc7f 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
 8003112:	e0cc      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_I2C_Mem_Write+0x56>
 800311e:	2302      	movs	r3, #2
 8003120:	e0c5      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d007      	beq.n	8003148 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003156:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2221      	movs	r2, #33	; 0x21
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2240      	movs	r2, #64	; 0x40
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a3a      	ldr	r2, [r7, #32]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003178:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a4d      	ldr	r2, [pc, #308]	; (80032bc <HAL_I2C_Mem_Write+0x1f0>)
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800318a:	88f8      	ldrh	r0, [r7, #6]
 800318c:	893a      	ldrh	r2, [r7, #8]
 800318e:	8979      	ldrh	r1, [r7, #10]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	4603      	mov	r3, r0
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fab6 	bl	800370c <I2C_RequestMemoryWrite>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d052      	beq.n	800324c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e081      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fd00 	bl	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00d      	beq.n	80031d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d107      	bne.n	80031d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e06b      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b04      	cmp	r3, #4
 8003212:	d11b      	bne.n	800324c <HAL_I2C_Mem_Write+0x180>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	2b00      	cmp	r3, #0
 800321a:	d017      	beq.n	800324c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	781a      	ldrb	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1aa      	bne.n	80031aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fcec 	bl	8003c36 <I2C_WaitOnBTFFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00d      	beq.n	8003280 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	2b04      	cmp	r3, #4
 800326a:	d107      	bne.n	800327c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e016      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e000      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	00100002 	.word	0x00100002
 80032bc:	ffff0000 	.word	0xffff0000

080032c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	; 0x30
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	4608      	mov	r0, r1
 80032ca:	4611      	mov	r1, r2
 80032cc:	461a      	mov	r2, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	817b      	strh	r3, [r7, #10]
 80032d2:	460b      	mov	r3, r1
 80032d4:	813b      	strh	r3, [r7, #8]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032da:	f7ff fa61 	bl	80027a0 <HAL_GetTick>
 80032de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	f040 8208 	bne.w	80036fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	2319      	movs	r3, #25
 80032f4:	2201      	movs	r2, #1
 80032f6:	497b      	ldr	r1, [pc, #492]	; (80034e4 <HAL_I2C_Mem_Read+0x224>)
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fb85 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
 8003306:	e1fb      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_I2C_Mem_Read+0x56>
 8003312:	2302      	movs	r3, #2
 8003314:	e1f4      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d007      	beq.n	800333c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800334a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2222      	movs	r2, #34	; 0x22
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2240      	movs	r2, #64	; 0x40
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003366:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800336c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4a5b      	ldr	r2, [pc, #364]	; (80034e8 <HAL_I2C_Mem_Read+0x228>)
 800337c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800337e:	88f8      	ldrh	r0, [r7, #6]
 8003380:	893a      	ldrh	r2, [r7, #8]
 8003382:	8979      	ldrh	r1, [r7, #10]
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	4603      	mov	r3, r0
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 fa52 	bl	8003838 <I2C_RequestMemoryRead>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e1b0      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d113      	bne.n	80033ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a6:	2300      	movs	r3, #0
 80033a8:	623b      	str	r3, [r7, #32]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	623b      	str	r3, [r7, #32]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	623b      	str	r3, [r7, #32]
 80033ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	e184      	b.n	80036d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d11b      	bne.n	800340e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	e164      	b.n	80036d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	2b02      	cmp	r3, #2
 8003414:	d11b      	bne.n	800344e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003424:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003434:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003436:	2300      	movs	r3, #0
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	e144      	b.n	80036d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003464:	e138      	b.n	80036d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	2b03      	cmp	r3, #3
 800346c:	f200 80f1 	bhi.w	8003652 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003474:	2b01      	cmp	r3, #1
 8003476:	d123      	bne.n	80034c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fc1b 	bl	8003cb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e139      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034be:	e10b      	b.n	80036d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d14e      	bne.n	8003566 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ce:	2200      	movs	r2, #0
 80034d0:	4906      	ldr	r1, [pc, #24]	; (80034ec <HAL_I2C_Mem_Read+0x22c>)
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fa98 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e10e      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
 80034e2:	bf00      	nop
 80034e4:	00100002 	.word	0x00100002
 80034e8:	ffff0000 	.word	0xffff0000
 80034ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003564:	e0b8      	b.n	80036d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356c:	2200      	movs	r2, #0
 800356e:	4966      	ldr	r1, [pc, #408]	; (8003708 <HAL_I2C_Mem_Read+0x448>)
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 fa49 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0bf      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	2200      	movs	r2, #0
 80035ca:	494f      	ldr	r1, [pc, #316]	; (8003708 <HAL_I2C_Mem_Read+0x448>)
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fa1b 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e091      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003650:	e042      	b.n	80036d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003654:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fb2e 	bl	8003cb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e04c      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d118      	bne.n	80036d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f47f aec2 	bne.w	8003466 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
  }
}
 8003700:	4618      	mov	r0, r3
 8003702:	3728      	adds	r7, #40	; 0x28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	00010004 	.word	0x00010004

0800370c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	4608      	mov	r0, r1
 8003716:	4611      	mov	r1, r2
 8003718:	461a      	mov	r2, r3
 800371a:	4603      	mov	r3, r0
 800371c:	817b      	strh	r3, [r7, #10]
 800371e:	460b      	mov	r3, r1
 8003720:	813b      	strh	r3, [r7, #8]
 8003722:	4613      	mov	r3, r2
 8003724:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003734:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	2200      	movs	r2, #0
 800373e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f960 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00d      	beq.n	800376a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375c:	d103      	bne.n	8003766 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e05f      	b.n	800382a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800376a:	897b      	ldrh	r3, [r7, #10]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003778:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	492d      	ldr	r1, [pc, #180]	; (8003834 <I2C_RequestMemoryWrite+0x128>)
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f998 	bl	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e04c      	b.n	800382a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a8:	6a39      	ldr	r1, [r7, #32]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fa02 	bl	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d107      	bne.n	80037ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e02b      	b.n	800382a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d105      	bne.n	80037e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037d8:	893b      	ldrh	r3, [r7, #8]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	611a      	str	r2, [r3, #16]
 80037e2:	e021      	b.n	8003828 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037e4:	893b      	ldrh	r3, [r7, #8]
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f4:	6a39      	ldr	r1, [r7, #32]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f9dc 	bl	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00d      	beq.n	800381e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	2b04      	cmp	r3, #4
 8003808:	d107      	bne.n	800381a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003818:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e005      	b.n	800382a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800381e:	893b      	ldrh	r3, [r7, #8]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	00010002 	.word	0x00010002

08003838 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	4608      	mov	r0, r1
 8003842:	4611      	mov	r1, r2
 8003844:	461a      	mov	r2, r3
 8003846:	4603      	mov	r3, r0
 8003848:	817b      	strh	r3, [r7, #10]
 800384a:	460b      	mov	r3, r1
 800384c:	813b      	strh	r3, [r7, #8]
 800384e:	4613      	mov	r3, r2
 8003850:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003860:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003870:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	2200      	movs	r2, #0
 800387a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f8c2 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00d      	beq.n	80038a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003898:	d103      	bne.n	80038a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0aa      	b.n	80039fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038a6:	897b      	ldrh	r3, [r7, #10]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	6a3a      	ldr	r2, [r7, #32]
 80038ba:	4952      	ldr	r1, [pc, #328]	; (8003a04 <I2C_RequestMemoryRead+0x1cc>)
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 f8fa 	bl	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e097      	b.n	80039fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e4:	6a39      	ldr	r1, [r7, #32]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f964 	bl	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00d      	beq.n	800390e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d107      	bne.n	800390a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003908:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e076      	b.n	80039fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d105      	bne.n	8003920 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003914:	893b      	ldrh	r3, [r7, #8]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	611a      	str	r2, [r3, #16]
 800391e:	e021      	b.n	8003964 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003920:	893b      	ldrh	r3, [r7, #8]
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	b29b      	uxth	r3, r3
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800392e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003930:	6a39      	ldr	r1, [r7, #32]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f93e 	bl	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00d      	beq.n	800395a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	2b04      	cmp	r3, #4
 8003944:	d107      	bne.n	8003956 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003954:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e050      	b.n	80039fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800395a:	893b      	ldrh	r3, [r7, #8]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003966:	6a39      	ldr	r1, [r7, #32]
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f923 	bl	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00d      	beq.n	8003990 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	2b04      	cmp	r3, #4
 800397a:	d107      	bne.n	800398c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e035      	b.n	80039fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800399e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f82b 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00d      	beq.n	80039d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c6:	d103      	bne.n	80039d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e013      	b.n	80039fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039d4:	897b      	ldrh	r3, [r7, #10]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	6a3a      	ldr	r2, [r7, #32]
 80039e8:	4906      	ldr	r1, [pc, #24]	; (8003a04 <I2C_RequestMemoryRead+0x1cc>)
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f863 	bl	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	00010002 	.word	0x00010002

08003a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a18:	e025      	b.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d021      	beq.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7fe febd 	bl	80027a0 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d116      	bne.n	8003a66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f043 0220 	orr.w	r2, r3, #32
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e023      	b.n	8003aae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d10d      	bne.n	8003a8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	43da      	mvns	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	bf0c      	ite	eq
 8003a82:	2301      	moveq	r3, #1
 8003a84:	2300      	movne	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	e00c      	b.n	8003aa6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	43da      	mvns	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4013      	ands	r3, r2
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d0b6      	beq.n	8003a1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ac4:	e051      	b.n	8003b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad4:	d123      	bne.n	8003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f043 0204 	orr.w	r2, r3, #4
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e046      	b.n	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d021      	beq.n	8003b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7fe fe3b 	bl	80027a0 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d116      	bne.n	8003b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e020      	b.n	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	0c1b      	lsrs	r3, r3, #16
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d10c      	bne.n	8003b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	43da      	mvns	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bf14      	ite	ne
 8003b86:	2301      	movne	r3, #1
 8003b88:	2300      	moveq	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	e00b      	b.n	8003ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	43da      	mvns	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d18d      	bne.n	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bc0:	e02d      	b.n	8003c1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f8ce 	bl	8003d64 <I2C_IsAcknowledgeFailed>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e02d      	b.n	8003c2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d021      	beq.n	8003c1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fe fde1 	bl	80027a0 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d116      	bne.n	8003c1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f043 0220 	orr.w	r2, r3, #32
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e007      	b.n	8003c2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c28:	2b80      	cmp	r3, #128	; 0x80
 8003c2a:	d1ca      	bne.n	8003bc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c42:	e02d      	b.n	8003ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f88d 	bl	8003d64 <I2C_IsAcknowledgeFailed>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e02d      	b.n	8003cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	d021      	beq.n	8003ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5c:	f7fe fda0 	bl	80027a0 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d302      	bcc.n	8003c72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d116      	bne.n	8003ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e007      	b.n	8003cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d1ca      	bne.n	8003c44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cc4:	e042      	b.n	8003d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d119      	bne.n	8003d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0210 	mvn.w	r2, #16
 8003cdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e029      	b.n	8003d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d08:	f7fe fd4a 	bl	80027a0 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d302      	bcc.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d116      	bne.n	8003d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e007      	b.n	8003d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d1b5      	bne.n	8003cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7a:	d11b      	bne.n	8003db4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f043 0204 	orr.w	r2, r3, #4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0cc      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b68      	ldr	r3, [pc, #416]	; (8003f7c <HAL_RCC_ClockConfig+0x1b8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d90c      	bls.n	8003e00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b65      	ldr	r3, [pc, #404]	; (8003f7c <HAL_RCC_ClockConfig+0x1b8>)
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b63      	ldr	r3, [pc, #396]	; (8003f7c <HAL_RCC_ClockConfig+0x1b8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0b8      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d020      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e18:	4b59      	ldr	r3, [pc, #356]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4a58      	ldr	r2, [pc, #352]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e30:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	4a52      	ldr	r2, [pc, #328]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e3c:	4b50      	ldr	r3, [pc, #320]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	494d      	ldr	r1, [pc, #308]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d044      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e62:	4b47      	ldr	r3, [pc, #284]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d119      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e07f      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d003      	beq.n	8003e82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e82:	4b3f      	ldr	r3, [pc, #252]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e06f      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e92:	4b3b      	ldr	r3, [pc, #236]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e067      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ea2:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f023 0203 	bic.w	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	4934      	ldr	r1, [pc, #208]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eb4:	f7fe fc74 	bl	80027a0 <HAL_GetTick>
 8003eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ebc:	f7fe fc70 	bl	80027a0 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e04f      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 020c 	and.w	r2, r3, #12
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d1eb      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d20c      	bcs.n	8003f0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef2:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efa:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_RCC_ClockConfig+0x1b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e032      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f18:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4916      	ldr	r1, [pc, #88]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f36:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	490e      	ldr	r1, [pc, #56]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f4a:	f000 f887 	bl	800405c <HAL_RCC_GetSysClockFreq>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	091b      	lsrs	r3, r3, #4
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	490a      	ldr	r1, [pc, #40]	; (8003f84 <HAL_RCC_ClockConfig+0x1c0>)
 8003f5c:	5ccb      	ldrb	r3, [r1, r3]
 8003f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f62:	4a09      	ldr	r2, [pc, #36]	; (8003f88 <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCC_ClockConfig+0x1c8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fa2a 	bl	80023c4 <HAL_InitTick>

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40023c00 	.word	0x40023c00
 8003f80:	40023800 	.word	0x40023800
 8003f84:	0800baa0 	.word	0x0800baa0
 8003f88:	20000000 	.word	0x20000000
 8003f8c:	20000004 	.word	0x20000004

08003f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	20000000 	.word	0x20000000

08003fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fac:	f7ff fff0 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	0a9b      	lsrs	r3, r3, #10
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	4903      	ldr	r1, [pc, #12]	; (8003fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fbe:	5ccb      	ldrb	r3, [r1, r3]
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	0800bab0 	.word	0x0800bab0

08003fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fd4:	f7ff ffdc 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	0b5b      	lsrs	r3, r3, #13
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4903      	ldr	r1, [pc, #12]	; (8003ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	0800bab0 	.word	0x0800bab0

08003ff8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	220f      	movs	r2, #15
 8004006:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004008:	4b12      	ldr	r3, [pc, #72]	; (8004054 <HAL_RCC_GetClockConfig+0x5c>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 0203 	and.w	r2, r3, #3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <HAL_RCC_GetClockConfig+0x5c>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <HAL_RCC_GetClockConfig+0x5c>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <HAL_RCC_GetClockConfig+0x5c>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	08db      	lsrs	r3, r3, #3
 8004032:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_RCC_GetClockConfig+0x60>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 020f 	and.w	r2, r3, #15
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	601a      	str	r2, [r3, #0]
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40023800 	.word	0x40023800
 8004058:	40023c00 	.word	0x40023c00

0800405c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800405c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004060:	b0a6      	sub	sp, #152	; 0x98
 8004062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004082:	4bc8      	ldr	r3, [pc, #800]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b0c      	cmp	r3, #12
 800408c:	f200 817e 	bhi.w	800438c <HAL_RCC_GetSysClockFreq+0x330>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080040cd 	.word	0x080040cd
 800409c:	0800438d 	.word	0x0800438d
 80040a0:	0800438d 	.word	0x0800438d
 80040a4:	0800438d 	.word	0x0800438d
 80040a8:	080040d5 	.word	0x080040d5
 80040ac:	0800438d 	.word	0x0800438d
 80040b0:	0800438d 	.word	0x0800438d
 80040b4:	0800438d 	.word	0x0800438d
 80040b8:	080040dd 	.word	0x080040dd
 80040bc:	0800438d 	.word	0x0800438d
 80040c0:	0800438d 	.word	0x0800438d
 80040c4:	0800438d 	.word	0x0800438d
 80040c8:	08004247 	.word	0x08004247
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040cc:	4bb6      	ldr	r3, [pc, #728]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80040ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80040d2:	e15f      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040d4:	4bb5      	ldr	r3, [pc, #724]	; (80043ac <HAL_RCC_GetSysClockFreq+0x350>)
 80040d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80040da:	e15b      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040dc:	4bb1      	ldr	r3, [pc, #708]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040e8:	4bae      	ldr	r3, [pc, #696]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d031      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f4:	4bab      	ldr	r3, [pc, #684]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	099b      	lsrs	r3, r3, #6
 80040fa:	2200      	movs	r2, #0
 80040fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80040fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004106:	663b      	str	r3, [r7, #96]	; 0x60
 8004108:	2300      	movs	r3, #0
 800410a:	667b      	str	r3, [r7, #100]	; 0x64
 800410c:	4ba7      	ldr	r3, [pc, #668]	; (80043ac <HAL_RCC_GetSysClockFreq+0x350>)
 800410e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004112:	462a      	mov	r2, r5
 8004114:	fb03 f202 	mul.w	r2, r3, r2
 8004118:	2300      	movs	r3, #0
 800411a:	4621      	mov	r1, r4
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	4413      	add	r3, r2
 8004122:	4aa2      	ldr	r2, [pc, #648]	; (80043ac <HAL_RCC_GetSysClockFreq+0x350>)
 8004124:	4621      	mov	r1, r4
 8004126:	fba1 1202 	umull	r1, r2, r1, r2
 800412a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800412c:	460a      	mov	r2, r1
 800412e:	67ba      	str	r2, [r7, #120]	; 0x78
 8004130:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004132:	4413      	add	r3, r2
 8004134:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800413a:	2200      	movs	r2, #0
 800413c:	65bb      	str	r3, [r7, #88]	; 0x58
 800413e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004140:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004144:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004148:	f7fc fe0e 	bl	8000d68 <__aeabi_uldivmod>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4613      	mov	r3, r2
 8004152:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004156:	e064      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004158:	4b92      	ldr	r3, [pc, #584]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x348>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	099b      	lsrs	r3, r3, #6
 800415e:	2200      	movs	r2, #0
 8004160:	653b      	str	r3, [r7, #80]	; 0x50
 8004162:	657a      	str	r2, [r7, #84]	; 0x54
 8004164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416a:	64bb      	str	r3, [r7, #72]	; 0x48
 800416c:	2300      	movs	r3, #0
 800416e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004170:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004174:	4622      	mov	r2, r4
 8004176:	462b      	mov	r3, r5
 8004178:	f04f 0000 	mov.w	r0, #0
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	0159      	lsls	r1, r3, #5
 8004182:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004186:	0150      	lsls	r0, r2, #5
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4621      	mov	r1, r4
 800418e:	1a51      	subs	r1, r2, r1
 8004190:	6139      	str	r1, [r7, #16]
 8004192:	4629      	mov	r1, r5
 8004194:	eb63 0301 	sbc.w	r3, r3, r1
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041a6:	4659      	mov	r1, fp
 80041a8:	018b      	lsls	r3, r1, #6
 80041aa:	4651      	mov	r1, sl
 80041ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041b0:	4651      	mov	r1, sl
 80041b2:	018a      	lsls	r2, r1, #6
 80041b4:	4651      	mov	r1, sl
 80041b6:	ebb2 0801 	subs.w	r8, r2, r1
 80041ba:	4659      	mov	r1, fp
 80041bc:	eb63 0901 	sbc.w	r9, r3, r1
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041d4:	4690      	mov	r8, r2
 80041d6:	4699      	mov	r9, r3
 80041d8:	4623      	mov	r3, r4
 80041da:	eb18 0303 	adds.w	r3, r8, r3
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	462b      	mov	r3, r5
 80041e2:	eb49 0303 	adc.w	r3, r9, r3
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041f4:	4629      	mov	r1, r5
 80041f6:	028b      	lsls	r3, r1, #10
 80041f8:	4621      	mov	r1, r4
 80041fa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041fe:	4621      	mov	r1, r4
 8004200:	028a      	lsls	r2, r1, #10
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800420a:	2200      	movs	r2, #0
 800420c:	643b      	str	r3, [r7, #64]	; 0x40
 800420e:	647a      	str	r2, [r7, #68]	; 0x44
 8004210:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004214:	f7fc fda8 	bl	8000d68 <__aeabi_uldivmod>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4613      	mov	r3, r2
 800421e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004222:	4b60      	ldr	r3, [pc, #384]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	0c1b      	lsrs	r3, r3, #16
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	3301      	adds	r3, #1
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004234:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004238:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004240:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004244:	e0a6      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004246:	4b57      	ldr	r3, [pc, #348]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800424e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004252:	4b54      	ldr	r3, [pc, #336]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d02a      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425e:	4b51      	ldr	r3, [pc, #324]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	099b      	lsrs	r3, r3, #6
 8004264:	2200      	movs	r2, #0
 8004266:	63bb      	str	r3, [r7, #56]	; 0x38
 8004268:	63fa      	str	r2, [r7, #60]	; 0x3c
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004270:	2100      	movs	r1, #0
 8004272:	4b4e      	ldr	r3, [pc, #312]	; (80043ac <HAL_RCC_GetSysClockFreq+0x350>)
 8004274:	fb03 f201 	mul.w	r2, r3, r1
 8004278:	2300      	movs	r3, #0
 800427a:	fb00 f303 	mul.w	r3, r0, r3
 800427e:	4413      	add	r3, r2
 8004280:	4a4a      	ldr	r2, [pc, #296]	; (80043ac <HAL_RCC_GetSysClockFreq+0x350>)
 8004282:	fba0 1202 	umull	r1, r2, r0, r2
 8004286:	677a      	str	r2, [r7, #116]	; 0x74
 8004288:	460a      	mov	r2, r1
 800428a:	673a      	str	r2, [r7, #112]	; 0x70
 800428c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800428e:	4413      	add	r3, r2
 8004290:	677b      	str	r3, [r7, #116]	; 0x74
 8004292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004296:	2200      	movs	r2, #0
 8004298:	633b      	str	r3, [r7, #48]	; 0x30
 800429a:	637a      	str	r2, [r7, #52]	; 0x34
 800429c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042a0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80042a4:	f7fc fd60 	bl	8000d68 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4613      	mov	r3, r2
 80042ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042b2:	e05b      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b4:	4b3b      	ldr	r3, [pc, #236]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	099b      	lsrs	r3, r3, #6
 80042ba:	2200      	movs	r2, #0
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c6:	623b      	str	r3, [r7, #32]
 80042c8:	2300      	movs	r3, #0
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
 80042cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042d0:	4642      	mov	r2, r8
 80042d2:	464b      	mov	r3, r9
 80042d4:	f04f 0000 	mov.w	r0, #0
 80042d8:	f04f 0100 	mov.w	r1, #0
 80042dc:	0159      	lsls	r1, r3, #5
 80042de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042e2:	0150      	lsls	r0, r2, #5
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4641      	mov	r1, r8
 80042ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80042ee:	4649      	mov	r1, r9
 80042f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004300:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004304:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004308:	ebb2 040a 	subs.w	r4, r2, sl
 800430c:	eb63 050b 	sbc.w	r5, r3, fp
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	00eb      	lsls	r3, r5, #3
 800431a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800431e:	00e2      	lsls	r2, r4, #3
 8004320:	4614      	mov	r4, r2
 8004322:	461d      	mov	r5, r3
 8004324:	4643      	mov	r3, r8
 8004326:	18e3      	adds	r3, r4, r3
 8004328:	603b      	str	r3, [r7, #0]
 800432a:	464b      	mov	r3, r9
 800432c:	eb45 0303 	adc.w	r3, r5, r3
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800433e:	4629      	mov	r1, r5
 8004340:	028b      	lsls	r3, r1, #10
 8004342:	4621      	mov	r1, r4
 8004344:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004348:	4621      	mov	r1, r4
 800434a:	028a      	lsls	r2, r1, #10
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004354:	2200      	movs	r2, #0
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	61fa      	str	r2, [r7, #28]
 800435a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800435e:	f7fc fd03 	bl	8000d68 <__aeabi_uldivmod>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4613      	mov	r3, r2
 8004368:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x348>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	0f1b      	lsrs	r3, r3, #28
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800437a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800437e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800438a:	e003      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800438e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004392:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004394:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004398:	4618      	mov	r0, r3
 800439a:	3798      	adds	r7, #152	; 0x98
 800439c:	46bd      	mov	sp, r7
 800439e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800
 80043a8:	00f42400 	.word	0x00f42400
 80043ac:	017d7840 	.word	0x017d7840

080043b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e28d      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8083 	beq.w	80044d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043d0:	4b94      	ldr	r3, [pc, #592]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d019      	beq.n	8004410 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043dc:	4b91      	ldr	r3, [pc, #580]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d106      	bne.n	80043f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043e8:	4b8e      	ldr	r3, [pc, #568]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043f4:	d00c      	beq.n	8004410 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043f6:	4b8b      	ldr	r3, [pc, #556]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043fe:	2b0c      	cmp	r3, #12
 8004400:	d112      	bne.n	8004428 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004402:	4b88      	ldr	r3, [pc, #544]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800440e:	d10b      	bne.n	8004428 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	4b84      	ldr	r3, [pc, #528]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d05b      	beq.n	80044d4 <HAL_RCC_OscConfig+0x124>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d157      	bne.n	80044d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e25a      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004430:	d106      	bne.n	8004440 <HAL_RCC_OscConfig+0x90>
 8004432:	4b7c      	ldr	r3, [pc, #496]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a7b      	ldr	r2, [pc, #492]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e01d      	b.n	800447c <HAL_RCC_OscConfig+0xcc>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0xb4>
 800444a:	4b76      	ldr	r3, [pc, #472]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a75      	ldr	r2, [pc, #468]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	4b73      	ldr	r3, [pc, #460]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a72      	ldr	r2, [pc, #456]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e00b      	b.n	800447c <HAL_RCC_OscConfig+0xcc>
 8004464:	4b6f      	ldr	r3, [pc, #444]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a6e      	ldr	r2, [pc, #440]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 800446a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	4b6c      	ldr	r3, [pc, #432]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a6b      	ldr	r2, [pc, #428]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800447a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d013      	beq.n	80044ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fe f98c 	bl	80027a0 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800448c:	f7fe f988 	bl	80027a0 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e21f      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	4b61      	ldr	r3, [pc, #388]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0xdc>
 80044aa:	e014      	b.n	80044d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fe f978 	bl	80027a0 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b4:	f7fe f974 	bl	80027a0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	; 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e20b      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c6:	4b57      	ldr	r3, [pc, #348]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x104>
 80044d2:	e000      	b.n	80044d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d06f      	beq.n	80045c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044e2:	4b50      	ldr	r3, [pc, #320]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d017      	beq.n	800451e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044ee:	4b4d      	ldr	r3, [pc, #308]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d105      	bne.n	8004506 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044fa:	4b4a      	ldr	r3, [pc, #296]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004506:	4b47      	ldr	r3, [pc, #284]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800450e:	2b0c      	cmp	r3, #12
 8004510:	d11c      	bne.n	800454c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004512:	4b44      	ldr	r3, [pc, #272]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d116      	bne.n	800454c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451e:	4b41      	ldr	r3, [pc, #260]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_RCC_OscConfig+0x186>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d001      	beq.n	8004536 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e1d3      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004536:	4b3b      	ldr	r3, [pc, #236]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4937      	ldr	r1, [pc, #220]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454a:	e03a      	b.n	80045c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004554:	4b34      	ldr	r3, [pc, #208]	; (8004628 <HAL_RCC_OscConfig+0x278>)
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fe f921 	bl	80027a0 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004562:	f7fe f91d 	bl	80027a0 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e1b4      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004574:	4b2b      	ldr	r3, [pc, #172]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004580:	4b28      	ldr	r3, [pc, #160]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4925      	ldr	r1, [pc, #148]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 8004590:	4313      	orrs	r3, r2
 8004592:	600b      	str	r3, [r1, #0]
 8004594:	e015      	b.n	80045c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004596:	4b24      	ldr	r3, [pc, #144]	; (8004628 <HAL_RCC_OscConfig+0x278>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fe f900 	bl	80027a0 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045a4:	f7fe f8fc 	bl	80027a0 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e193      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b6:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d036      	beq.n	800463c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d016      	beq.n	8004604 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <HAL_RCC_OscConfig+0x27c>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045dc:	f7fe f8e0 	bl	80027a0 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e4:	f7fe f8dc 	bl	80027a0 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e173      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f6:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCC_OscConfig+0x274>)
 80045f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x234>
 8004602:	e01b      	b.n	800463c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004604:	4b09      	ldr	r3, [pc, #36]	; (800462c <HAL_RCC_OscConfig+0x27c>)
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fe f8c9 	bl	80027a0 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004610:	e00e      	b.n	8004630 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004612:	f7fe f8c5 	bl	80027a0 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d907      	bls.n	8004630 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e15c      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
 8004624:	40023800 	.word	0x40023800
 8004628:	42470000 	.word	0x42470000
 800462c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004630:	4b8a      	ldr	r3, [pc, #552]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 8004632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1ea      	bne.n	8004612 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8097 	beq.w	8004778 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464e:	4b83      	ldr	r3, [pc, #524]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10f      	bne.n	800467a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	4b7f      	ldr	r3, [pc, #508]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	4a7e      	ldr	r2, [pc, #504]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 8004664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004668:	6413      	str	r3, [r2, #64]	; 0x40
 800466a:	4b7c      	ldr	r3, [pc, #496]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467a:	4b79      	ldr	r3, [pc, #484]	; (8004860 <HAL_RCC_OscConfig+0x4b0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d118      	bne.n	80046b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004686:	4b76      	ldr	r3, [pc, #472]	; (8004860 <HAL_RCC_OscConfig+0x4b0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a75      	ldr	r2, [pc, #468]	; (8004860 <HAL_RCC_OscConfig+0x4b0>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004692:	f7fe f885 	bl	80027a0 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469a:	f7fe f881 	bl	80027a0 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e118      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	4b6c      	ldr	r3, [pc, #432]	; (8004860 <HAL_RCC_OscConfig+0x4b0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d106      	bne.n	80046ce <HAL_RCC_OscConfig+0x31e>
 80046c0:	4b66      	ldr	r3, [pc, #408]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	4a65      	ldr	r2, [pc, #404]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6713      	str	r3, [r2, #112]	; 0x70
 80046cc:	e01c      	b.n	8004708 <HAL_RCC_OscConfig+0x358>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x340>
 80046d6:	4b61      	ldr	r3, [pc, #388]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	4a60      	ldr	r2, [pc, #384]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 80046dc:	f043 0304 	orr.w	r3, r3, #4
 80046e0:	6713      	str	r3, [r2, #112]	; 0x70
 80046e2:	4b5e      	ldr	r3, [pc, #376]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	4a5d      	ldr	r2, [pc, #372]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	6713      	str	r3, [r2, #112]	; 0x70
 80046ee:	e00b      	b.n	8004708 <HAL_RCC_OscConfig+0x358>
 80046f0:	4b5a      	ldr	r3, [pc, #360]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	4a59      	ldr	r2, [pc, #356]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	6713      	str	r3, [r2, #112]	; 0x70
 80046fc:	4b57      	ldr	r3, [pc, #348]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	4a56      	ldr	r2, [pc, #344]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 8004702:	f023 0304 	bic.w	r3, r3, #4
 8004706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d015      	beq.n	800473c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fe f846 	bl	80027a0 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004716:	e00a      	b.n	800472e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fe f842 	bl	80027a0 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e0d7      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472e:	4b4b      	ldr	r3, [pc, #300]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0ee      	beq.n	8004718 <HAL_RCC_OscConfig+0x368>
 800473a:	e014      	b.n	8004766 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fe f830 	bl	80027a0 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7fe f82c 	bl	80027a0 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e0c1      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800475a:	4b40      	ldr	r3, [pc, #256]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1ee      	bne.n	8004744 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d105      	bne.n	8004778 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800476c:	4b3b      	ldr	r3, [pc, #236]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	4a3a      	ldr	r2, [pc, #232]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 8004772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004776:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80ad 	beq.w	80048dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004782:	4b36      	ldr	r3, [pc, #216]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b08      	cmp	r3, #8
 800478c:	d060      	beq.n	8004850 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d145      	bne.n	8004822 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004796:	4b33      	ldr	r3, [pc, #204]	; (8004864 <HAL_RCC_OscConfig+0x4b4>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7fe f800 	bl	80027a0 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fd fffc 	bl	80027a0 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e093      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b6:	4b29      	ldr	r3, [pc, #164]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	019b      	lsls	r3, r3, #6
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	3b01      	subs	r3, #1
 80047dc:	041b      	lsls	r3, r3, #16
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	071b      	lsls	r3, r3, #28
 80047ee:	491b      	ldr	r1, [pc, #108]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f4:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <HAL_RCC_OscConfig+0x4b4>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fa:	f7fd ffd1 	bl	80027a0 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004802:	f7fd ffcd 	bl	80027a0 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e064      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004814:	4b11      	ldr	r3, [pc, #68]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f0      	beq.n	8004802 <HAL_RCC_OscConfig+0x452>
 8004820:	e05c      	b.n	80048dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004822:	4b10      	ldr	r3, [pc, #64]	; (8004864 <HAL_RCC_OscConfig+0x4b4>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fd ffba 	bl	80027a0 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004830:	f7fd ffb6 	bl	80027a0 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e04d      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <HAL_RCC_OscConfig+0x4ac>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x480>
 800484e:	e045      	b.n	80048dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d107      	bne.n	8004868 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e040      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
 800485c:	40023800 	.word	0x40023800
 8004860:	40007000 	.word	0x40007000
 8004864:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004868:	4b1f      	ldr	r3, [pc, #124]	; (80048e8 <HAL_RCC_OscConfig+0x538>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d030      	beq.n	80048d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d129      	bne.n	80048d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d122      	bne.n	80048d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004898:	4013      	ands	r3, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800489e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d119      	bne.n	80048d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	3b01      	subs	r3, #1
 80048b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d10f      	bne.n	80048d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d107      	bne.n	80048d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800

080048ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e041      	b.n	8004982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fd fb70 	bl	8001ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3304      	adds	r3, #4
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f000 fca8 	bl	8005280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d001      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e04e      	b.n	8004a42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a23      	ldr	r2, [pc, #140]	; (8004a50 <HAL_TIM_Base_Start_IT+0xc4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d022      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ce:	d01d      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1f      	ldr	r2, [pc, #124]	; (8004a54 <HAL_TIM_Base_Start_IT+0xc8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d018      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a1e      	ldr	r2, [pc, #120]	; (8004a58 <HAL_TIM_Base_Start_IT+0xcc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d013      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1c      	ldr	r2, [pc, #112]	; (8004a5c <HAL_TIM_Base_Start_IT+0xd0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00e      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1b      	ldr	r2, [pc, #108]	; (8004a60 <HAL_TIM_Base_Start_IT+0xd4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d009      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <HAL_TIM_Base_Start_IT+0xd8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d111      	bne.n	8004a30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d010      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	e007      	b.n	8004a40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40010000 	.word	0x40010000
 8004a54:	40000400 	.word	0x40000400
 8004a58:	40000800 	.word	0x40000800
 8004a5c:	40000c00 	.word	0x40000c00
 8004a60:	40010400 	.word	0x40010400
 8004a64:	40014000 	.word	0x40014000
 8004a68:	40001800 	.word	0x40001800

08004a6c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e041      	b.n	8004b02 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fd fa52 	bl	8001f3c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f000 fbe8 	bl	8005280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e041      	b.n	8004ba0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d106      	bne.n	8004b36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7fd fa29 	bl	8001f88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f000 fb99 	bl	8005280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_IC_Start_IT+0x1e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	e013      	b.n	8004bee <HAL_TIM_IC_Start_IT+0x46>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_IC_Start_IT+0x2e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	e00b      	b.n	8004bee <HAL_TIM_IC_Start_IT+0x46>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_IC_Start_IT+0x3e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	e003      	b.n	8004bee <HAL_TIM_IC_Start_IT+0x46>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d104      	bne.n	8004c00 <HAL_TIM_IC_Start_IT+0x58>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e013      	b.n	8004c28 <HAL_TIM_IC_Start_IT+0x80>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d104      	bne.n	8004c10 <HAL_TIM_IC_Start_IT+0x68>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	e00b      	b.n	8004c28 <HAL_TIM_IC_Start_IT+0x80>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d104      	bne.n	8004c20 <HAL_TIM_IC_Start_IT+0x78>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e003      	b.n	8004c28 <HAL_TIM_IC_Start_IT+0x80>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c2a:	7bbb      	ldrb	r3, [r7, #14]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d102      	bne.n	8004c36 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c30:	7b7b      	ldrb	r3, [r7, #13]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d001      	beq.n	8004c3a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e0cc      	b.n	8004dd4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d104      	bne.n	8004c4a <HAL_TIM_IC_Start_IT+0xa2>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c48:	e013      	b.n	8004c72 <HAL_TIM_IC_Start_IT+0xca>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d104      	bne.n	8004c5a <HAL_TIM_IC_Start_IT+0xb2>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c58:	e00b      	b.n	8004c72 <HAL_TIM_IC_Start_IT+0xca>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d104      	bne.n	8004c6a <HAL_TIM_IC_Start_IT+0xc2>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c68:	e003      	b.n	8004c72 <HAL_TIM_IC_Start_IT+0xca>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d104      	bne.n	8004c82 <HAL_TIM_IC_Start_IT+0xda>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c80:	e013      	b.n	8004caa <HAL_TIM_IC_Start_IT+0x102>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d104      	bne.n	8004c92 <HAL_TIM_IC_Start_IT+0xea>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c90:	e00b      	b.n	8004caa <HAL_TIM_IC_Start_IT+0x102>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d104      	bne.n	8004ca2 <HAL_TIM_IC_Start_IT+0xfa>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ca0:	e003      	b.n	8004caa <HAL_TIM_IC_Start_IT+0x102>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b0c      	cmp	r3, #12
 8004cae:	d841      	bhi.n	8004d34 <HAL_TIM_IC_Start_IT+0x18c>
 8004cb0:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <HAL_TIM_IC_Start_IT+0x110>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004ced 	.word	0x08004ced
 8004cbc:	08004d35 	.word	0x08004d35
 8004cc0:	08004d35 	.word	0x08004d35
 8004cc4:	08004d35 	.word	0x08004d35
 8004cc8:	08004cff 	.word	0x08004cff
 8004ccc:	08004d35 	.word	0x08004d35
 8004cd0:	08004d35 	.word	0x08004d35
 8004cd4:	08004d35 	.word	0x08004d35
 8004cd8:	08004d11 	.word	0x08004d11
 8004cdc:	08004d35 	.word	0x08004d35
 8004ce0:	08004d35 	.word	0x08004d35
 8004ce4:	08004d35 	.word	0x08004d35
 8004ce8:	08004d23 	.word	0x08004d23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0202 	orr.w	r2, r2, #2
 8004cfa:	60da      	str	r2, [r3, #12]
      break;
 8004cfc:	e01d      	b.n	8004d3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0204 	orr.w	r2, r2, #4
 8004d0c:	60da      	str	r2, [r3, #12]
      break;
 8004d0e:	e014      	b.n	8004d3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0208 	orr.w	r2, r2, #8
 8004d1e:	60da      	str	r2, [r3, #12]
      break;
 8004d20:	e00b      	b.n	8004d3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0210 	orr.w	r2, r2, #16
 8004d30:	60da      	str	r2, [r3, #12]
      break;
 8004d32:	e002      	b.n	8004d3a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	73fb      	strb	r3, [r7, #15]
      break;
 8004d38:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d148      	bne.n	8004dd2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2201      	movs	r2, #1
 8004d46:	6839      	ldr	r1, [r7, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fce9 	bl	8005720 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a22      	ldr	r2, [pc, #136]	; (8004ddc <HAL_TIM_IC_Start_IT+0x234>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d022      	beq.n	8004d9e <HAL_TIM_IC_Start_IT+0x1f6>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d60:	d01d      	beq.n	8004d9e <HAL_TIM_IC_Start_IT+0x1f6>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1e      	ldr	r2, [pc, #120]	; (8004de0 <HAL_TIM_IC_Start_IT+0x238>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d018      	beq.n	8004d9e <HAL_TIM_IC_Start_IT+0x1f6>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1c      	ldr	r2, [pc, #112]	; (8004de4 <HAL_TIM_IC_Start_IT+0x23c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d013      	beq.n	8004d9e <HAL_TIM_IC_Start_IT+0x1f6>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1b      	ldr	r2, [pc, #108]	; (8004de8 <HAL_TIM_IC_Start_IT+0x240>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00e      	beq.n	8004d9e <HAL_TIM_IC_Start_IT+0x1f6>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a19      	ldr	r2, [pc, #100]	; (8004dec <HAL_TIM_IC_Start_IT+0x244>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d009      	beq.n	8004d9e <HAL_TIM_IC_Start_IT+0x1f6>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <HAL_TIM_IC_Start_IT+0x248>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d004      	beq.n	8004d9e <HAL_TIM_IC_Start_IT+0x1f6>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a16      	ldr	r2, [pc, #88]	; (8004df4 <HAL_TIM_IC_Start_IT+0x24c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d111      	bne.n	8004dc2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b06      	cmp	r3, #6
 8004dae:	d010      	beq.n	8004dd2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc0:	e007      	b.n	8004dd2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40010400 	.word	0x40010400
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40001800 	.word	0x40001800

08004df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d122      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d11b      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0202 	mvn.w	r2, #2
 8004e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fc f912 	bl	8001064 <HAL_TIM_IC_CaptureCallback>
 8004e40:	e005      	b.n	8004e4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f9fe 	bl	8005244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fa05 	bl	8005258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d122      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d11b      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0204 	mvn.w	r2, #4
 8004e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fc f8e8 	bl	8001064 <HAL_TIM_IC_CaptureCallback>
 8004e94:	e005      	b.n	8004ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f9d4 	bl	8005244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f9db 	bl	8005258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d122      	bne.n	8004efc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d11b      	bne.n	8004efc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0208 	mvn.w	r2, #8
 8004ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fc f8be 	bl	8001064 <HAL_TIM_IC_CaptureCallback>
 8004ee8:	e005      	b.n	8004ef6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f9aa 	bl	8005244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f9b1 	bl	8005258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b10      	cmp	r3, #16
 8004f08:	d122      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d11b      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0210 	mvn.w	r2, #16
 8004f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2208      	movs	r2, #8
 8004f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fc f894 	bl	8001064 <HAL_TIM_IC_CaptureCallback>
 8004f3c:	e005      	b.n	8004f4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f980 	bl	8005244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f987 	bl	8005258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10e      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0201 	mvn.w	r2, #1
 8004f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fc fece 	bl	8001d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f86:	2b80      	cmp	r3, #128	; 0x80
 8004f88:	d10e      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f94:	2b80      	cmp	r3, #128	; 0x80
 8004f96:	d107      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fc68 	bl	8005878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d10e      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	d107      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f94c 	bl	800526c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	d10e      	bne.n	8005000 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d107      	bne.n	8005000 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0220 	mvn.w	r2, #32
 8004ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fc32 	bl	8005864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005014:	2300      	movs	r3, #0
 8005016:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005022:	2302      	movs	r3, #2
 8005024:	e048      	b.n	80050b8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b0c      	cmp	r3, #12
 8005032:	d839      	bhi.n	80050a8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005034:	a201      	add	r2, pc, #4	; (adr r2, 800503c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	08005071 	.word	0x08005071
 8005040:	080050a9 	.word	0x080050a9
 8005044:	080050a9 	.word	0x080050a9
 8005048:	080050a9 	.word	0x080050a9
 800504c:	0800507f 	.word	0x0800507f
 8005050:	080050a9 	.word	0x080050a9
 8005054:	080050a9 	.word	0x080050a9
 8005058:	080050a9 	.word	0x080050a9
 800505c:	0800508d 	.word	0x0800508d
 8005060:	080050a9 	.word	0x080050a9
 8005064:	080050a9 	.word	0x080050a9
 8005068:	080050a9 	.word	0x080050a9
 800506c:	0800509b 	.word	0x0800509b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	4618      	mov	r0, r3
 8005078:	f000 f9a2 	bl	80053c0 <TIM_OC1_SetConfig>
      break;
 800507c:	e017      	b.n	80050ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fa0b 	bl	80054a0 <TIM_OC2_SetConfig>
      break;
 800508a:	e010      	b.n	80050ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fa7a 	bl	800558c <TIM_OC3_SetConfig>
      break;
 8005098:	e009      	b.n	80050ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fae7 	bl	8005674 <TIM_OC4_SetConfig>
      break;
 80050a6:	e002      	b.n	80050ae <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	75fb      	strb	r3, [r7, #23]
      break;
 80050ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050da:	2302      	movs	r3, #2
 80050dc:	e0ae      	b.n	800523c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b0c      	cmp	r3, #12
 80050ea:	f200 809f 	bhi.w	800522c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050ee:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f4:	08005129 	.word	0x08005129
 80050f8:	0800522d 	.word	0x0800522d
 80050fc:	0800522d 	.word	0x0800522d
 8005100:	0800522d 	.word	0x0800522d
 8005104:	08005169 	.word	0x08005169
 8005108:	0800522d 	.word	0x0800522d
 800510c:	0800522d 	.word	0x0800522d
 8005110:	0800522d 	.word	0x0800522d
 8005114:	080051ab 	.word	0x080051ab
 8005118:	0800522d 	.word	0x0800522d
 800511c:	0800522d 	.word	0x0800522d
 8005120:	0800522d 	.word	0x0800522d
 8005124:	080051eb 	.word	0x080051eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 f946 	bl	80053c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0208 	orr.w	r2, r2, #8
 8005142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0204 	bic.w	r2, r2, #4
 8005152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6999      	ldr	r1, [r3, #24]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	619a      	str	r2, [r3, #24]
      break;
 8005166:	e064      	b.n	8005232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	4618      	mov	r0, r3
 8005170:	f000 f996 	bl	80054a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6999      	ldr	r1, [r3, #24]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	021a      	lsls	r2, r3, #8
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	619a      	str	r2, [r3, #24]
      break;
 80051a8:	e043      	b.n	8005232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 f9eb 	bl	800558c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f042 0208 	orr.w	r2, r2, #8
 80051c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0204 	bic.w	r2, r2, #4
 80051d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69d9      	ldr	r1, [r3, #28]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	61da      	str	r2, [r3, #28]
      break;
 80051e8:	e023      	b.n	8005232 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68b9      	ldr	r1, [r7, #8]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fa3f 	bl	8005674 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69da      	ldr	r2, [r3, #28]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69da      	ldr	r2, [r3, #28]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69d9      	ldr	r1, [r3, #28]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	021a      	lsls	r2, r3, #8
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	61da      	str	r2, [r3, #28]
      break;
 800522a:	e002      	b.n	8005232 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	75fb      	strb	r3, [r7, #23]
      break;
 8005230:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800523a:	7dfb      	ldrb	r3, [r7, #23]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a40      	ldr	r2, [pc, #256]	; (8005394 <TIM_Base_SetConfig+0x114>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d013      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529e:	d00f      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a3d      	ldr	r2, [pc, #244]	; (8005398 <TIM_Base_SetConfig+0x118>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00b      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a3c      	ldr	r2, [pc, #240]	; (800539c <TIM_Base_SetConfig+0x11c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a3b      	ldr	r2, [pc, #236]	; (80053a0 <TIM_Base_SetConfig+0x120>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_Base_SetConfig+0x40>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a3a      	ldr	r2, [pc, #232]	; (80053a4 <TIM_Base_SetConfig+0x124>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d108      	bne.n	80052d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a2f      	ldr	r2, [pc, #188]	; (8005394 <TIM_Base_SetConfig+0x114>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d02b      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e0:	d027      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a2c      	ldr	r2, [pc, #176]	; (8005398 <TIM_Base_SetConfig+0x118>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d023      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a2b      	ldr	r2, [pc, #172]	; (800539c <TIM_Base_SetConfig+0x11c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d01f      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a2a      	ldr	r2, [pc, #168]	; (80053a0 <TIM_Base_SetConfig+0x120>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01b      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a29      	ldr	r2, [pc, #164]	; (80053a4 <TIM_Base_SetConfig+0x124>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d017      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a28      	ldr	r2, [pc, #160]	; (80053a8 <TIM_Base_SetConfig+0x128>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a27      	ldr	r2, [pc, #156]	; (80053ac <TIM_Base_SetConfig+0x12c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00f      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a26      	ldr	r2, [pc, #152]	; (80053b0 <TIM_Base_SetConfig+0x130>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00b      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a25      	ldr	r2, [pc, #148]	; (80053b4 <TIM_Base_SetConfig+0x134>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d007      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a24      	ldr	r2, [pc, #144]	; (80053b8 <TIM_Base_SetConfig+0x138>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d003      	beq.n	8005332 <TIM_Base_SetConfig+0xb2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a23      	ldr	r2, [pc, #140]	; (80053bc <TIM_Base_SetConfig+0x13c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d108      	bne.n	8005344 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a0a      	ldr	r2, [pc, #40]	; (8005394 <TIM_Base_SetConfig+0x114>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_Base_SetConfig+0xf8>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a0c      	ldr	r2, [pc, #48]	; (80053a4 <TIM_Base_SetConfig+0x124>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d103      	bne.n	8005380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	615a      	str	r2, [r3, #20]
}
 8005386:	bf00      	nop
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40010000 	.word	0x40010000
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40000c00 	.word	0x40000c00
 80053a4:	40010400 	.word	0x40010400
 80053a8:	40014000 	.word	0x40014000
 80053ac:	40014400 	.word	0x40014400
 80053b0:	40014800 	.word	0x40014800
 80053b4:	40001800 	.word	0x40001800
 80053b8:	40001c00 	.word	0x40001c00
 80053bc:	40002000 	.word	0x40002000

080053c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	f023 0201 	bic.w	r2, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0303 	bic.w	r3, r3, #3
 80053f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f023 0302 	bic.w	r3, r3, #2
 8005408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a20      	ldr	r2, [pc, #128]	; (8005498 <TIM_OC1_SetConfig+0xd8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_OC1_SetConfig+0x64>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a1f      	ldr	r2, [pc, #124]	; (800549c <TIM_OC1_SetConfig+0xdc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d10c      	bne.n	800543e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f023 0308 	bic.w	r3, r3, #8
 800542a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 0304 	bic.w	r3, r3, #4
 800543c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a15      	ldr	r2, [pc, #84]	; (8005498 <TIM_OC1_SetConfig+0xd8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d003      	beq.n	800544e <TIM_OC1_SetConfig+0x8e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a14      	ldr	r2, [pc, #80]	; (800549c <TIM_OC1_SetConfig+0xdc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d111      	bne.n	8005472 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800545c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	621a      	str	r2, [r3, #32]
}
 800548c:	bf00      	nop
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40010000 	.word	0x40010000
 800549c:	40010400 	.word	0x40010400

080054a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f023 0210 	bic.w	r2, r3, #16
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0320 	bic.w	r3, r3, #32
 80054ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a22      	ldr	r2, [pc, #136]	; (8005584 <TIM_OC2_SetConfig+0xe4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_OC2_SetConfig+0x68>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a21      	ldr	r2, [pc, #132]	; (8005588 <TIM_OC2_SetConfig+0xe8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d10d      	bne.n	8005524 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800550e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005522:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a17      	ldr	r2, [pc, #92]	; (8005584 <TIM_OC2_SetConfig+0xe4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_OC2_SetConfig+0x94>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a16      	ldr	r2, [pc, #88]	; (8005588 <TIM_OC2_SetConfig+0xe8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d113      	bne.n	800555c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800553a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005542:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	40010400 	.word	0x40010400

0800558c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a21      	ldr	r2, [pc, #132]	; (800566c <TIM_OC3_SetConfig+0xe0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_OC3_SetConfig+0x66>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a20      	ldr	r2, [pc, #128]	; (8005670 <TIM_OC3_SetConfig+0xe4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d10d      	bne.n	800560e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800560c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a16      	ldr	r2, [pc, #88]	; (800566c <TIM_OC3_SetConfig+0xe0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_OC3_SetConfig+0x92>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a15      	ldr	r2, [pc, #84]	; (8005670 <TIM_OC3_SetConfig+0xe4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d113      	bne.n	8005646 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800562c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	621a      	str	r2, [r3, #32]
}
 8005660:	bf00      	nop
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	40010000 	.word	0x40010000
 8005670:	40010400 	.word	0x40010400

08005674 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	031b      	lsls	r3, r3, #12
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a12      	ldr	r2, [pc, #72]	; (8005718 <TIM_OC4_SetConfig+0xa4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_OC4_SetConfig+0x68>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a11      	ldr	r2, [pc, #68]	; (800571c <TIM_OC4_SetConfig+0xa8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d109      	bne.n	80056f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	019b      	lsls	r3, r3, #6
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40010000 	.word	0x40010000
 800571c:	40010400 	.word	0x40010400

08005720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	2201      	movs	r2, #1
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a1a      	ldr	r2, [r3, #32]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	43db      	mvns	r3, r3
 8005742:	401a      	ands	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a1a      	ldr	r2, [r3, #32]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	fa01 f303 	lsl.w	r3, r1, r3
 8005758:	431a      	orrs	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	621a      	str	r2, [r3, #32]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005780:	2302      	movs	r3, #2
 8005782:	e05a      	b.n	800583a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a21      	ldr	r2, [pc, #132]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d022      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d0:	d01d      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1d      	ldr	r2, [pc, #116]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d018      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1a      	ldr	r2, [pc, #104]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00e      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a18      	ldr	r2, [pc, #96]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a17      	ldr	r2, [pc, #92]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a15      	ldr	r2, [pc, #84]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d10c      	bne.n	8005828 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	4313      	orrs	r3, r2
 800581e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40010000 	.word	0x40010000
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	40010400 	.word	0x40010400
 800585c:	40014000 	.word	0x40014000
 8005860:	40001800 	.word	0x40001800

08005864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e03f      	b.n	800591e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d106      	bne.n	80058b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7fc fc66 	bl	8002184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2224      	movs	r2, #36	; 0x24
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fcdf 	bl	8006294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695a      	ldr	r2, [r3, #20]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005904:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	4613      	mov	r3, r2
 8005932:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b20      	cmp	r3, #32
 800593e:	d11d      	bne.n	800597c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_UART_Receive_IT+0x26>
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e016      	b.n	800597e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_UART_Receive_IT+0x38>
 800595a:	2302      	movs	r3, #2
 800595c:	e00f      	b.n	800597e <HAL_UART_Receive_IT+0x58>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	461a      	mov	r2, r3
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 fab6 	bl	8005ee4 <UART_Start_Receive_IT>
 8005978:	4603      	mov	r3, r0
 800597a:	e000      	b.n	800597e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800597c:	2302      	movs	r3, #2
  }
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b0ba      	sub	sp, #232	; 0xe8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059be:	f003 030f 	and.w	r3, r3, #15
 80059c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10f      	bne.n	80059ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d009      	beq.n	80059ee <HAL_UART_IRQHandler+0x66>
 80059da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fb99 	bl	800611e <UART_Receive_IT>
      return;
 80059ec:	e256      	b.n	8005e9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 80de 	beq.w	8005bb4 <HAL_UART_IRQHandler+0x22c>
 80059f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d106      	bne.n	8005a12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 80d1 	beq.w	8005bb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00b      	beq.n	8005a36 <HAL_UART_IRQHandler+0xae>
 8005a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f043 0201 	orr.w	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <HAL_UART_IRQHandler+0xd2>
 8005a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f043 0202 	orr.w	r2, r3, #2
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <HAL_UART_IRQHandler+0xf6>
 8005a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	f043 0204 	orr.w	r2, r3, #4
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d011      	beq.n	8005aae <HAL_UART_IRQHandler+0x126>
 8005a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d105      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	f043 0208 	orr.w	r2, r3, #8
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 81ed 	beq.w	8005e92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x14e>
 8005ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac8:	f003 0320 	and.w	r3, r3, #32
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fb24 	bl	800611e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae0:	2b40      	cmp	r3, #64	; 0x40
 8005ae2:	bf0c      	ite	eq
 8005ae4:	2301      	moveq	r3, #1
 8005ae6:	2300      	movne	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d103      	bne.n	8005b02 <HAL_UART_IRQHandler+0x17a>
 8005afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d04f      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fa2c 	bl	8005f60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b40      	cmp	r3, #64	; 0x40
 8005b14:	d141      	bne.n	8005b9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3314      	adds	r3, #20
 8005b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3314      	adds	r3, #20
 8005b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1d9      	bne.n	8005b16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d013      	beq.n	8005b92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	4a7d      	ldr	r2, [pc, #500]	; (8005d64 <HAL_UART_IRQHandler+0x3dc>)
 8005b70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fc ff94 	bl	8002aa4 <HAL_DMA_Abort_IT>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d016      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b90:	e00e      	b.n	8005bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f990 	bl	8005eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b98:	e00a      	b.n	8005bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f98c 	bl	8005eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba0:	e006      	b.n	8005bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f988 	bl	8005eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005bae:	e170      	b.n	8005e92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb0:	bf00      	nop
    return;
 8005bb2:	e16e      	b.n	8005e92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	f040 814a 	bne.w	8005e52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc2:	f003 0310 	and.w	r3, r3, #16
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 8143 	beq.w	8005e52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 813c 	beq.w	8005e52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60bb      	str	r3, [r7, #8]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b40      	cmp	r3, #64	; 0x40
 8005bfc:	f040 80b4 	bne.w	8005d68 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8140 	beq.w	8005e96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	f080 8139 	bcs.w	8005e96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c36:	f000 8088 	beq.w	8005d4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	330c      	adds	r3, #12
 8005c62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c76:	e841 2300 	strex	r3, r2, [r1]
 8005c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1d9      	bne.n	8005c3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3314      	adds	r3, #20
 8005c8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c98:	f023 0301 	bic.w	r3, r3, #1
 8005c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3314      	adds	r3, #20
 8005ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005caa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e1      	bne.n	8005c86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3314      	adds	r3, #20
 8005cc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3314      	adds	r3, #20
 8005ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ce6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ce8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e3      	bne.n	8005cc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	330c      	adds	r3, #12
 8005d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d1a:	f023 0310 	bic.w	r3, r3, #16
 8005d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	330c      	adds	r3, #12
 8005d28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d34:	e841 2300 	strex	r3, r2, [r1]
 8005d38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e3      	bne.n	8005d08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fc fe3d 	bl	80029c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f8b6 	bl	8005ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d60:	e099      	b.n	8005e96 <HAL_UART_IRQHandler+0x50e>
 8005d62:	bf00      	nop
 8005d64:	08006027 	.word	0x08006027
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 808b 	beq.w	8005e9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 8086 	beq.w	8005e9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	330c      	adds	r3, #12
 8005d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005db2:	647a      	str	r2, [r7, #68]	; 0x44
 8005db4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e3      	bne.n	8005d8e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3314      	adds	r3, #20
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	f023 0301 	bic.w	r3, r3, #1
 8005ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3314      	adds	r3, #20
 8005de6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dea:	633a      	str	r2, [r7, #48]	; 0x30
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df2:	e841 2300 	strex	r3, r2, [r1]
 8005df6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1e3      	bne.n	8005dc6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	330c      	adds	r3, #12
 8005e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0310 	bic.w	r3, r3, #16
 8005e22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e30:	61fa      	str	r2, [r7, #28]
 8005e32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	69b9      	ldr	r1, [r7, #24]
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e3      	bne.n	8005e0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f83e 	bl	8005ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e50:	e023      	b.n	8005e9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d009      	beq.n	8005e72 <HAL_UART_IRQHandler+0x4ea>
 8005e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f8ef 	bl	800604e <UART_Transmit_IT>
    return;
 8005e70:	e014      	b.n	8005e9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00e      	beq.n	8005e9c <HAL_UART_IRQHandler+0x514>
 8005e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d008      	beq.n	8005e9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f92f 	bl	80060ee <UART_EndTransmit_IT>
    return;
 8005e90:	e004      	b.n	8005e9c <HAL_UART_IRQHandler+0x514>
    return;
 8005e92:	bf00      	nop
 8005e94:	e002      	b.n	8005e9c <HAL_UART_IRQHandler+0x514>
      return;
 8005e96:	bf00      	nop
 8005e98:	e000      	b.n	8005e9c <HAL_UART_IRQHandler+0x514>
      return;
 8005e9a:	bf00      	nop
  }
}
 8005e9c:	37e8      	adds	r7, #232	; 0xe8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop

08005ea4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	88fa      	ldrh	r2, [r7, #6]
 8005efc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	88fa      	ldrh	r2, [r7, #6]
 8005f02:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2222      	movs	r2, #34	; 0x22
 8005f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d007      	beq.n	8005f32 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f30:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695a      	ldr	r2, [r3, #20]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0201 	orr.w	r2, r2, #1
 8005f40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0220 	orr.w	r2, r2, #32
 8005f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b095      	sub	sp, #84	; 0x54
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f88:	643a      	str	r2, [r7, #64]	; 0x40
 8005f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e5      	bne.n	8005f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3314      	adds	r3, #20
 8005fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f023 0301 	bic.w	r3, r3, #1
 8005fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3314      	adds	r3, #20
 8005fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e5      	bne.n	8005f9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d119      	bne.n	800600c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	330c      	adds	r3, #12
 8005fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f023 0310 	bic.w	r3, r3, #16
 8005fee:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ff8:	61ba      	str	r2, [r7, #24]
 8005ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6979      	ldr	r1, [r7, #20]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	613b      	str	r3, [r7, #16]
   return(result);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e5      	bne.n	8005fd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	631a      	str	r2, [r3, #48]	; 0x30
}
 800601a:	bf00      	nop
 800601c:	3754      	adds	r7, #84	; 0x54
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7ff ff39 	bl	8005eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b21      	cmp	r3, #33	; 0x21
 8006060:	d13e      	bne.n	80060e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606a:	d114      	bne.n	8006096 <UART_Transmit_IT+0x48>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d110      	bne.n	8006096 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006088:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	1c9a      	adds	r2, r3, #2
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	621a      	str	r2, [r3, #32]
 8006094:	e008      	b.n	80060a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	1c59      	adds	r1, r3, #1
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6211      	str	r1, [r2, #32]
 80060a0:	781a      	ldrb	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	4619      	mov	r1, r3
 80060b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10f      	bne.n	80060dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	e000      	b.n	80060e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060e0:	2302      	movs	r3, #2
  }
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006104:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff fec8 	bl	8005ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b08c      	sub	sp, #48	; 0x30
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b22      	cmp	r3, #34	; 0x22
 8006130:	f040 80ab 	bne.w	800628a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613c:	d117      	bne.n	800616e <UART_Receive_IT+0x50>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d113      	bne.n	800616e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006146:	2300      	movs	r3, #0
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615c:	b29a      	uxth	r2, r3
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	1c9a      	adds	r2, r3, #2
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	629a      	str	r2, [r3, #40]	; 0x28
 800616c:	e026      	b.n	80061bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006174:	2300      	movs	r3, #0
 8006176:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006180:	d007      	beq.n	8006192 <UART_Receive_IT+0x74>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <UART_Receive_IT+0x82>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e008      	b.n	80061b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4619      	mov	r1, r3
 80061ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d15a      	bne.n	8006286 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0220 	bic.w	r2, r2, #32
 80061de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695a      	ldr	r2, [r3, #20]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0201 	bic.w	r2, r2, #1
 80061fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620c:	2b01      	cmp	r3, #1
 800620e:	d135      	bne.n	800627c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	330c      	adds	r3, #12
 800621c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	613b      	str	r3, [r7, #16]
   return(result);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f023 0310 	bic.w	r3, r3, #16
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	330c      	adds	r3, #12
 8006234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006236:	623a      	str	r2, [r7, #32]
 8006238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	69f9      	ldr	r1, [r7, #28]
 800623c:	6a3a      	ldr	r2, [r7, #32]
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	61bb      	str	r3, [r7, #24]
   return(result);
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e5      	bne.n	8006216 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b10      	cmp	r3, #16
 8006256:	d10a      	bne.n	800626e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff fe29 	bl	8005ecc <HAL_UARTEx_RxEventCallback>
 800627a:	e002      	b.n	8006282 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7fa ff0f 	bl	80010a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	e002      	b.n	800628c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	e000      	b.n	800628c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800628a:	2302      	movs	r3, #2
  }
}
 800628c:	4618      	mov	r0, r3
 800628e:	3730      	adds	r7, #48	; 0x30
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006298:	b0c0      	sub	sp, #256	; 0x100
 800629a:	af00      	add	r7, sp, #0
 800629c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b0:	68d9      	ldr	r1, [r3, #12]
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	ea40 0301 	orr.w	r3, r0, r1
 80062bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	4313      	orrs	r3, r2
 80062dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062ec:	f021 010c 	bic.w	r1, r1, #12
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062fa:	430b      	orrs	r3, r1
 80062fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800630a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630e:	6999      	ldr	r1, [r3, #24]
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	ea40 0301 	orr.w	r3, r0, r1
 800631a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4b8f      	ldr	r3, [pc, #572]	; (8006560 <UART_SetConfig+0x2cc>)
 8006324:	429a      	cmp	r2, r3
 8006326:	d005      	beq.n	8006334 <UART_SetConfig+0xa0>
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	4b8d      	ldr	r3, [pc, #564]	; (8006564 <UART_SetConfig+0x2d0>)
 8006330:	429a      	cmp	r2, r3
 8006332:	d104      	bne.n	800633e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006334:	f7fd fe4c 	bl	8003fd0 <HAL_RCC_GetPCLK2Freq>
 8006338:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800633c:	e003      	b.n	8006346 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800633e:	f7fd fe33 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 8006342:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006350:	f040 810c 	bne.w	800656c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006358:	2200      	movs	r2, #0
 800635a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800635e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006362:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006366:	4622      	mov	r2, r4
 8006368:	462b      	mov	r3, r5
 800636a:	1891      	adds	r1, r2, r2
 800636c:	65b9      	str	r1, [r7, #88]	; 0x58
 800636e:	415b      	adcs	r3, r3
 8006370:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006372:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006376:	4621      	mov	r1, r4
 8006378:	eb12 0801 	adds.w	r8, r2, r1
 800637c:	4629      	mov	r1, r5
 800637e:	eb43 0901 	adc.w	r9, r3, r1
 8006382:	f04f 0200 	mov.w	r2, #0
 8006386:	f04f 0300 	mov.w	r3, #0
 800638a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800638e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006396:	4690      	mov	r8, r2
 8006398:	4699      	mov	r9, r3
 800639a:	4623      	mov	r3, r4
 800639c:	eb18 0303 	adds.w	r3, r8, r3
 80063a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063a4:	462b      	mov	r3, r5
 80063a6:	eb49 0303 	adc.w	r3, r9, r3
 80063aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063c2:	460b      	mov	r3, r1
 80063c4:	18db      	adds	r3, r3, r3
 80063c6:	653b      	str	r3, [r7, #80]	; 0x50
 80063c8:	4613      	mov	r3, r2
 80063ca:	eb42 0303 	adc.w	r3, r2, r3
 80063ce:	657b      	str	r3, [r7, #84]	; 0x54
 80063d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063d8:	f7fa fcc6 	bl	8000d68 <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4b61      	ldr	r3, [pc, #388]	; (8006568 <UART_SetConfig+0x2d4>)
 80063e2:	fba3 2302 	umull	r2, r3, r3, r2
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	011c      	lsls	r4, r3, #4
 80063ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063fc:	4642      	mov	r2, r8
 80063fe:	464b      	mov	r3, r9
 8006400:	1891      	adds	r1, r2, r2
 8006402:	64b9      	str	r1, [r7, #72]	; 0x48
 8006404:	415b      	adcs	r3, r3
 8006406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006408:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800640c:	4641      	mov	r1, r8
 800640e:	eb12 0a01 	adds.w	sl, r2, r1
 8006412:	4649      	mov	r1, r9
 8006414:	eb43 0b01 	adc.w	fp, r3, r1
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006424:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800642c:	4692      	mov	sl, r2
 800642e:	469b      	mov	fp, r3
 8006430:	4643      	mov	r3, r8
 8006432:	eb1a 0303 	adds.w	r3, sl, r3
 8006436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800643a:	464b      	mov	r3, r9
 800643c:	eb4b 0303 	adc.w	r3, fp, r3
 8006440:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006450:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006454:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006458:	460b      	mov	r3, r1
 800645a:	18db      	adds	r3, r3, r3
 800645c:	643b      	str	r3, [r7, #64]	; 0x40
 800645e:	4613      	mov	r3, r2
 8006460:	eb42 0303 	adc.w	r3, r2, r3
 8006464:	647b      	str	r3, [r7, #68]	; 0x44
 8006466:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800646a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800646e:	f7fa fc7b 	bl	8000d68 <__aeabi_uldivmod>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4611      	mov	r1, r2
 8006478:	4b3b      	ldr	r3, [pc, #236]	; (8006568 <UART_SetConfig+0x2d4>)
 800647a:	fba3 2301 	umull	r2, r3, r3, r1
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	2264      	movs	r2, #100	; 0x64
 8006482:	fb02 f303 	mul.w	r3, r2, r3
 8006486:	1acb      	subs	r3, r1, r3
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800648e:	4b36      	ldr	r3, [pc, #216]	; (8006568 <UART_SetConfig+0x2d4>)
 8006490:	fba3 2302 	umull	r2, r3, r3, r2
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800649c:	441c      	add	r4, r3
 800649e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064b0:	4642      	mov	r2, r8
 80064b2:	464b      	mov	r3, r9
 80064b4:	1891      	adds	r1, r2, r2
 80064b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80064b8:	415b      	adcs	r3, r3
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064c0:	4641      	mov	r1, r8
 80064c2:	1851      	adds	r1, r2, r1
 80064c4:	6339      	str	r1, [r7, #48]	; 0x30
 80064c6:	4649      	mov	r1, r9
 80064c8:	414b      	adcs	r3, r1
 80064ca:	637b      	str	r3, [r7, #52]	; 0x34
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064d8:	4659      	mov	r1, fp
 80064da:	00cb      	lsls	r3, r1, #3
 80064dc:	4651      	mov	r1, sl
 80064de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064e2:	4651      	mov	r1, sl
 80064e4:	00ca      	lsls	r2, r1, #3
 80064e6:	4610      	mov	r0, r2
 80064e8:	4619      	mov	r1, r3
 80064ea:	4603      	mov	r3, r0
 80064ec:	4642      	mov	r2, r8
 80064ee:	189b      	adds	r3, r3, r2
 80064f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064f4:	464b      	mov	r3, r9
 80064f6:	460a      	mov	r2, r1
 80064f8:	eb42 0303 	adc.w	r3, r2, r3
 80064fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800650c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006514:	460b      	mov	r3, r1
 8006516:	18db      	adds	r3, r3, r3
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
 800651a:	4613      	mov	r3, r2
 800651c:	eb42 0303 	adc.w	r3, r2, r3
 8006520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006526:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800652a:	f7fa fc1d 	bl	8000d68 <__aeabi_uldivmod>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4b0d      	ldr	r3, [pc, #52]	; (8006568 <UART_SetConfig+0x2d4>)
 8006534:	fba3 1302 	umull	r1, r3, r3, r2
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	2164      	movs	r1, #100	; 0x64
 800653c:	fb01 f303 	mul.w	r3, r1, r3
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	3332      	adds	r3, #50	; 0x32
 8006546:	4a08      	ldr	r2, [pc, #32]	; (8006568 <UART_SetConfig+0x2d4>)
 8006548:	fba2 2303 	umull	r2, r3, r2, r3
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	f003 0207 	and.w	r2, r3, #7
 8006552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4422      	add	r2, r4
 800655a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800655c:	e106      	b.n	800676c <UART_SetConfig+0x4d8>
 800655e:	bf00      	nop
 8006560:	40011000 	.word	0x40011000
 8006564:	40011400 	.word	0x40011400
 8006568:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800656c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006570:	2200      	movs	r2, #0
 8006572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006576:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800657a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800657e:	4642      	mov	r2, r8
 8006580:	464b      	mov	r3, r9
 8006582:	1891      	adds	r1, r2, r2
 8006584:	6239      	str	r1, [r7, #32]
 8006586:	415b      	adcs	r3, r3
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
 800658a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800658e:	4641      	mov	r1, r8
 8006590:	1854      	adds	r4, r2, r1
 8006592:	4649      	mov	r1, r9
 8006594:	eb43 0501 	adc.w	r5, r3, r1
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	f04f 0300 	mov.w	r3, #0
 80065a0:	00eb      	lsls	r3, r5, #3
 80065a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065a6:	00e2      	lsls	r2, r4, #3
 80065a8:	4614      	mov	r4, r2
 80065aa:	461d      	mov	r5, r3
 80065ac:	4643      	mov	r3, r8
 80065ae:	18e3      	adds	r3, r4, r3
 80065b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065b4:	464b      	mov	r3, r9
 80065b6:	eb45 0303 	adc.w	r3, r5, r3
 80065ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065da:	4629      	mov	r1, r5
 80065dc:	008b      	lsls	r3, r1, #2
 80065de:	4621      	mov	r1, r4
 80065e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065e4:	4621      	mov	r1, r4
 80065e6:	008a      	lsls	r2, r1, #2
 80065e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065ec:	f7fa fbbc 	bl	8000d68 <__aeabi_uldivmod>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4b60      	ldr	r3, [pc, #384]	; (8006778 <UART_SetConfig+0x4e4>)
 80065f6:	fba3 2302 	umull	r2, r3, r3, r2
 80065fa:	095b      	lsrs	r3, r3, #5
 80065fc:	011c      	lsls	r4, r3, #4
 80065fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006602:	2200      	movs	r2, #0
 8006604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006608:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800660c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006610:	4642      	mov	r2, r8
 8006612:	464b      	mov	r3, r9
 8006614:	1891      	adds	r1, r2, r2
 8006616:	61b9      	str	r1, [r7, #24]
 8006618:	415b      	adcs	r3, r3
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006620:	4641      	mov	r1, r8
 8006622:	1851      	adds	r1, r2, r1
 8006624:	6139      	str	r1, [r7, #16]
 8006626:	4649      	mov	r1, r9
 8006628:	414b      	adcs	r3, r1
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006638:	4659      	mov	r1, fp
 800663a:	00cb      	lsls	r3, r1, #3
 800663c:	4651      	mov	r1, sl
 800663e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006642:	4651      	mov	r1, sl
 8006644:	00ca      	lsls	r2, r1, #3
 8006646:	4610      	mov	r0, r2
 8006648:	4619      	mov	r1, r3
 800664a:	4603      	mov	r3, r0
 800664c:	4642      	mov	r2, r8
 800664e:	189b      	adds	r3, r3, r2
 8006650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006654:	464b      	mov	r3, r9
 8006656:	460a      	mov	r2, r1
 8006658:	eb42 0303 	adc.w	r3, r2, r3
 800665c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	67bb      	str	r3, [r7, #120]	; 0x78
 800666a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	f04f 0300 	mov.w	r3, #0
 8006674:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006678:	4649      	mov	r1, r9
 800667a:	008b      	lsls	r3, r1, #2
 800667c:	4641      	mov	r1, r8
 800667e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006682:	4641      	mov	r1, r8
 8006684:	008a      	lsls	r2, r1, #2
 8006686:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800668a:	f7fa fb6d 	bl	8000d68 <__aeabi_uldivmod>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4611      	mov	r1, r2
 8006694:	4b38      	ldr	r3, [pc, #224]	; (8006778 <UART_SetConfig+0x4e4>)
 8006696:	fba3 2301 	umull	r2, r3, r3, r1
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	2264      	movs	r2, #100	; 0x64
 800669e:	fb02 f303 	mul.w	r3, r2, r3
 80066a2:	1acb      	subs	r3, r1, r3
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	3332      	adds	r3, #50	; 0x32
 80066a8:	4a33      	ldr	r2, [pc, #204]	; (8006778 <UART_SetConfig+0x4e4>)
 80066aa:	fba2 2303 	umull	r2, r3, r2, r3
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066b4:	441c      	add	r4, r3
 80066b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ba:	2200      	movs	r2, #0
 80066bc:	673b      	str	r3, [r7, #112]	; 0x70
 80066be:	677a      	str	r2, [r7, #116]	; 0x74
 80066c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066c4:	4642      	mov	r2, r8
 80066c6:	464b      	mov	r3, r9
 80066c8:	1891      	adds	r1, r2, r2
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	415b      	adcs	r3, r3
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066d4:	4641      	mov	r1, r8
 80066d6:	1851      	adds	r1, r2, r1
 80066d8:	6039      	str	r1, [r7, #0]
 80066da:	4649      	mov	r1, r9
 80066dc:	414b      	adcs	r3, r1
 80066de:	607b      	str	r3, [r7, #4]
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	f04f 0300 	mov.w	r3, #0
 80066e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066ec:	4659      	mov	r1, fp
 80066ee:	00cb      	lsls	r3, r1, #3
 80066f0:	4651      	mov	r1, sl
 80066f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066f6:	4651      	mov	r1, sl
 80066f8:	00ca      	lsls	r2, r1, #3
 80066fa:	4610      	mov	r0, r2
 80066fc:	4619      	mov	r1, r3
 80066fe:	4603      	mov	r3, r0
 8006700:	4642      	mov	r2, r8
 8006702:	189b      	adds	r3, r3, r2
 8006704:	66bb      	str	r3, [r7, #104]	; 0x68
 8006706:	464b      	mov	r3, r9
 8006708:	460a      	mov	r2, r1
 800670a:	eb42 0303 	adc.w	r3, r2, r3
 800670e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	663b      	str	r3, [r7, #96]	; 0x60
 800671a:	667a      	str	r2, [r7, #100]	; 0x64
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006728:	4649      	mov	r1, r9
 800672a:	008b      	lsls	r3, r1, #2
 800672c:	4641      	mov	r1, r8
 800672e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006732:	4641      	mov	r1, r8
 8006734:	008a      	lsls	r2, r1, #2
 8006736:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800673a:	f7fa fb15 	bl	8000d68 <__aeabi_uldivmod>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <UART_SetConfig+0x4e4>)
 8006744:	fba3 1302 	umull	r1, r3, r3, r2
 8006748:	095b      	lsrs	r3, r3, #5
 800674a:	2164      	movs	r1, #100	; 0x64
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	011b      	lsls	r3, r3, #4
 8006754:	3332      	adds	r3, #50	; 0x32
 8006756:	4a08      	ldr	r2, [pc, #32]	; (8006778 <UART_SetConfig+0x4e4>)
 8006758:	fba2 2303 	umull	r2, r3, r2, r3
 800675c:	095b      	lsrs	r3, r3, #5
 800675e:	f003 020f 	and.w	r2, r3, #15
 8006762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4422      	add	r2, r4
 800676a:	609a      	str	r2, [r3, #8]
}
 800676c:	bf00      	nop
 800676e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006772:	46bd      	mov	sp, r7
 8006774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006778:	51eb851f 	.word	0x51eb851f

0800677c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08a      	sub	sp, #40	; 0x28
 8006780:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006782:	2300      	movs	r3, #0
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006786:	4b7f      	ldr	r3, [pc, #508]	; (8006984 <xTaskIncrementTick+0x208>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	f040 80f0 	bne.w	8006970 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006790:	4b7d      	ldr	r3, [pc, #500]	; (8006988 <xTaskIncrementTick+0x20c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3301      	adds	r3, #1
 8006796:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006798:	4a7b      	ldr	r2, [pc, #492]	; (8006988 <xTaskIncrementTick+0x20c>)
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d120      	bne.n	80067e6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80067a4:	4b79      	ldr	r3, [pc, #484]	; (800698c <xTaskIncrementTick+0x210>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <xTaskIncrementTick+0x46>
 80067c4:	4b71      	ldr	r3, [pc, #452]	; (800698c <xTaskIncrementTick+0x210>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	4b71      	ldr	r3, [pc, #452]	; (8006990 <xTaskIncrementTick+0x214>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a6f      	ldr	r2, [pc, #444]	; (800698c <xTaskIncrementTick+0x210>)
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	4a6f      	ldr	r2, [pc, #444]	; (8006990 <xTaskIncrementTick+0x214>)
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	4b6e      	ldr	r3, [pc, #440]	; (8006994 <xTaskIncrementTick+0x218>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3301      	adds	r3, #1
 80067de:	4a6d      	ldr	r2, [pc, #436]	; (8006994 <xTaskIncrementTick+0x218>)
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	f000 f94f 	bl	8006a84 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80067e6:	4b6c      	ldr	r3, [pc, #432]	; (8006998 <xTaskIncrementTick+0x21c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6a3a      	ldr	r2, [r7, #32]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	f0c0 80aa 	bcc.w	8006946 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067f2:	4b66      	ldr	r3, [pc, #408]	; (800698c <xTaskIncrementTick+0x210>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d104      	bne.n	8006806 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067fc:	4b66      	ldr	r3, [pc, #408]	; (8006998 <xTaskIncrementTick+0x21c>)
 80067fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006802:	601a      	str	r2, [r3, #0]
                    break;
 8006804:	e09f      	b.n	8006946 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006806:	4b61      	ldr	r3, [pc, #388]	; (800698c <xTaskIncrementTick+0x210>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8006816:	6a3a      	ldr	r2, [r7, #32]
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	429a      	cmp	r2, r3
 800681c:	d203      	bcs.n	8006826 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800681e:	4a5e      	ldr	r2, [pc, #376]	; (8006998 <xTaskIncrementTick+0x21c>)
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8006824:	e08f      	b.n	8006946 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	68d2      	ldr	r2, [r2, #12]
 8006834:	609a      	str	r2, [r3, #8]
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	6892      	ldr	r2, [r2, #8]
 800683e:	605a      	str	r2, [r3, #4]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	3304      	adds	r3, #4
 8006848:	429a      	cmp	r2, r3
 800684a:	d103      	bne.n	8006854 <xTaskIncrementTick+0xd8>
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	605a      	str	r2, [r3, #4]
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	2200      	movs	r2, #0
 8006858:	615a      	str	r2, [r3, #20]
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	1e5a      	subs	r2, r3, #1
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01e      	beq.n	80068aa <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	6a12      	ldr	r2, [r2, #32]
 800687a:	609a      	str	r2, [r3, #8]
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	69d2      	ldr	r2, [r2, #28]
 8006884:	605a      	str	r2, [r3, #4]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	3318      	adds	r3, #24
 800688e:	429a      	cmp	r2, r3
 8006890:	d103      	bne.n	800689a <xTaskIncrementTick+0x11e>
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	6a1a      	ldr	r2, [r3, #32]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	605a      	str	r2, [r3, #4]
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	2200      	movs	r2, #0
 800689e:	629a      	str	r2, [r3, #40]	; 0x28
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	1e5a      	subs	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 fb65 	bl	8007f7c <SEGGER_SYSVIEW_OnTaskStartReady>
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b6:	2201      	movs	r2, #1
 80068b8:	409a      	lsls	r2, r3
 80068ba:	4b38      	ldr	r3, [pc, #224]	; (800699c <xTaskIncrementTick+0x220>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4313      	orrs	r3, r2
 80068c0:	4a36      	ldr	r2, [pc, #216]	; (800699c <xTaskIncrementTick+0x220>)
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c8:	4935      	ldr	r1, [pc, #212]	; (80069a0 <xTaskIncrementTick+0x224>)
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	440b      	add	r3, r1
 80068d4:	3304      	adds	r3, #4
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	60bb      	str	r3, [r7, #8]
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	609a      	str	r2, [r3, #8]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	60da      	str	r2, [r3, #12]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	3204      	adds	r2, #4
 80068f0:	605a      	str	r2, [r3, #4]
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	1d1a      	adds	r2, r3, #4
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	609a      	str	r2, [r3, #8]
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4a26      	ldr	r2, [pc, #152]	; (80069a0 <xTaskIncrementTick+0x224>)
 8006908:	441a      	add	r2, r3
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	615a      	str	r2, [r3, #20]
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006912:	4923      	ldr	r1, [pc, #140]	; (80069a0 <xTaskIncrementTick+0x224>)
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	1c59      	adds	r1, r3, #1
 8006922:	481f      	ldr	r0, [pc, #124]	; (80069a0 <xTaskIncrementTick+0x224>)
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4403      	add	r3, r0
 800692e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006934:	4b1b      	ldr	r3, [pc, #108]	; (80069a4 <xTaskIncrementTick+0x228>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	429a      	cmp	r2, r3
 800693c:	f67f af59 	bls.w	80067f2 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8006940:	2301      	movs	r3, #1
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006944:	e755      	b.n	80067f2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006946:	4b17      	ldr	r3, [pc, #92]	; (80069a4 <xTaskIncrementTick+0x228>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694c:	4914      	ldr	r1, [pc, #80]	; (80069a0 <xTaskIncrementTick+0x224>)
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	440b      	add	r3, r1
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d901      	bls.n	8006962 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800695e:	2301      	movs	r3, #1
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006962:	4b11      	ldr	r3, [pc, #68]	; (80069a8 <xTaskIncrementTick+0x22c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d007      	beq.n	800697a <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800696a:	2301      	movs	r3, #1
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
 800696e:	e004      	b.n	800697a <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006970:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <xTaskIncrementTick+0x230>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3301      	adds	r3, #1
 8006976:	4a0d      	ldr	r2, [pc, #52]	; (80069ac <xTaskIncrementTick+0x230>)
 8006978:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800697c:	4618      	mov	r0, r3
 800697e:	3728      	adds	r7, #40	; 0x28
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	2000083c 	.word	0x2000083c
 8006988:	20000820 	.word	0x20000820
 800698c:	20000804 	.word	0x20000804
 8006990:	20000808 	.word	0x20000808
 8006994:	20000830 	.word	0x20000830
 8006998:	20000834 	.word	0x20000834
 800699c:	20000824 	.word	0x20000824
 80069a0:	200007a0 	.word	0x200007a0
 80069a4:	2000079c 	.word	0x2000079c
 80069a8:	2000082c 	.word	0x2000082c
 80069ac:	20000828 	.word	0x20000828

080069b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069b6:	4b2d      	ldr	r3, [pc, #180]	; (8006a6c <vTaskSwitchContext+0xbc>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80069be:	4b2c      	ldr	r3, [pc, #176]	; (8006a70 <vTaskSwitchContext+0xc0>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80069c4:	e04d      	b.n	8006a62 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80069c6:	4b2a      	ldr	r3, [pc, #168]	; (8006a70 <vTaskSwitchContext+0xc0>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069cc:	4b29      	ldr	r3, [pc, #164]	; (8006a74 <vTaskSwitchContext+0xc4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	fab3 f383 	clz	r3, r3
 80069d8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80069da:	7afb      	ldrb	r3, [r7, #11]
 80069dc:	f1c3 031f 	rsb	r3, r3, #31
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	4925      	ldr	r1, [pc, #148]	; (8006a78 <vTaskSwitchContext+0xc8>)
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	440b      	add	r3, r1
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <vTaskSwitchContext+0x5c>
        __asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	607b      	str	r3, [r7, #4]
    }
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <vTaskSwitchContext+0x5a>
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4a18      	ldr	r2, [pc, #96]	; (8006a78 <vTaskSwitchContext+0xc8>)
 8006a18:	4413      	add	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	605a      	str	r2, [r3, #4]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d104      	bne.n	8006a3c <vTaskSwitchContext+0x8c>
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	605a      	str	r2, [r3, #4]
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	4a0e      	ldr	r2, [pc, #56]	; (8006a7c <vTaskSwitchContext+0xcc>)
 8006a44:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8006a46:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <vTaskSwitchContext+0xcc>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <vTaskSwitchContext+0xd0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d102      	bne.n	8006a58 <vTaskSwitchContext+0xa8>
 8006a52:	f001 fa35 	bl	8007ec0 <SEGGER_SYSVIEW_OnIdle>
}
 8006a56:	e004      	b.n	8006a62 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8006a58:	4b08      	ldr	r3, [pc, #32]	; (8006a7c <vTaskSwitchContext+0xcc>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 fa4b 	bl	8007ef8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8006a62:	bf00      	nop
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	2000083c 	.word	0x2000083c
 8006a70:	2000082c 	.word	0x2000082c
 8006a74:	20000824 	.word	0x20000824
 8006a78:	200007a0 	.word	0x200007a0
 8006a7c:	2000079c 	.word	0x2000079c
 8006a80:	20000838 	.word	0x20000838

08006a84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a88:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <prvResetNextTaskUnblockTime+0x30>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d104      	bne.n	8006a9c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006a92:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <prvResetNextTaskUnblockTime+0x34>)
 8006a94:	f04f 32ff 	mov.w	r2, #4294967295
 8006a98:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006a9a:	e005      	b.n	8006aa8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <prvResetNextTaskUnblockTime+0x30>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a04      	ldr	r2, [pc, #16]	; (8006ab8 <prvResetNextTaskUnblockTime+0x34>)
 8006aa6:	6013      	str	r3, [r2, #0]
}
 8006aa8:	bf00      	nop
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20000804 	.word	0x20000804
 8006ab8:	20000834 	.word	0x20000834

08006abc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b094      	sub	sp, #80	; 0x50
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006aca:	2301      	movs	r3, #1
 8006acc:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00a      	beq.n	8006b06 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b06:	f000 f9c1 	bl	8006e8c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006b0e:	f3ef 8211 	mrs	r2, BASEPRI
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	623a      	str	r2, [r7, #32]
 8006b24:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006b26:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8006b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d006      	beq.n	8006b3e <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	3214      	adds	r2, #20
 8006b36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b3c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006b3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4413      	add	r3, r2
 8006b44:	3354      	adds	r3, #84	; 0x54
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006b4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	4413      	add	r3, r2
 8006b52:	3354      	adds	r3, #84	; 0x54
 8006b54:	2202      	movs	r2, #2
 8006b56:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d83b      	bhi.n	8006bd6 <xTaskGenericNotifyFromISR+0x11a>
 8006b5e:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <xTaskGenericNotifyFromISR+0xa8>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006bf5 	.word	0x08006bf5
 8006b68:	08006b79 	.word	0x08006b79
 8006b6c:	08006b95 	.word	0x08006b95
 8006b70:	08006bad 	.word	0x08006bad
 8006b74:	08006bbb 	.word	0x08006bbb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	3214      	adds	r2, #20
 8006b7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	ea42 0103 	orr.w	r1, r2, r3
 8006b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	3214      	adds	r2, #20
 8006b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006b92:	e032      	b.n	8006bfa <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	3214      	adds	r2, #20
 8006b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9e:	1c59      	adds	r1, r3, #1
 8006ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	3214      	adds	r2, #20
 8006ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006baa:	e026      	b.n	8006bfa <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	3214      	adds	r2, #20
 8006bb2:	6879      	ldr	r1, [r7, #4]
 8006bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006bb8:	e01f      	b.n	8006bfa <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006bba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d006      	beq.n	8006bd0 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	3214      	adds	r2, #20
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006bce:	e014      	b.n	8006bfa <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8006bd4:	e011      	b.n	8006bfa <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006bd6:	4b69      	ldr	r3, [pc, #420]	; (8006d7c <xTaskGenericNotifyFromISR+0x2c0>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00c      	beq.n	8006bf8 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	61bb      	str	r3, [r7, #24]
    }
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006bf4:	bf00      	nop
 8006bf6:	e000      	b.n	8006bfa <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006bf8:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8006bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 f9ff 	bl	8008000 <SEGGER_SYSVIEW_ShrinkId>
 8006c02:	78f9      	ldrb	r1, [r7, #3]
 8006c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c08:	9201      	str	r2, [sp, #4]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	4601      	mov	r1, r0
 8006c12:	203f      	movs	r0, #63	; 0x3f
 8006c14:	f000 fe6c 	bl	80078f0 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006c18:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	f040 80a2 	bne.w	8006d66 <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	617b      	str	r3, [r7, #20]
    }
 8006c3c:	bf00      	nop
 8006c3e:	e7fe      	b.n	8006c3e <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c40:	4b4f      	ldr	r3, [pc, #316]	; (8006d80 <xTaskGenericNotifyFromISR+0x2c4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d162      	bne.n	8006d0e <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c54:	68d2      	ldr	r2, [r2, #12]
 8006c56:	609a      	str	r2, [r3, #8]
 8006c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c5e:	6892      	ldr	r2, [r2, #8]
 8006c60:	605a      	str	r2, [r3, #4]
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c68:	3304      	adds	r3, #4
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d103      	bne.n	8006c76 <xTaskGenericNotifyFromISR+0x1ba>
 8006c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	605a      	str	r2, [r3, #4]
 8006c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c78:	2200      	movs	r2, #0
 8006c7a:	615a      	str	r2, [r3, #20]
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	1e5a      	subs	r2, r3, #1
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f001 f977 	bl	8007f7c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c92:	2201      	movs	r2, #1
 8006c94:	409a      	lsls	r2, r3
 8006c96:	4b3b      	ldr	r3, [pc, #236]	; (8006d84 <xTaskGenericNotifyFromISR+0x2c8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	4a39      	ldr	r2, [pc, #228]	; (8006d84 <xTaskGenericNotifyFromISR+0x2c8>)
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca4:	4938      	ldr	r1, [pc, #224]	; (8006d88 <xTaskGenericNotifyFromISR+0x2cc>)
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	440b      	add	r3, r1
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cba:	609a      	str	r2, [r3, #8]
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cc2:	60da      	str	r2, [r3, #12]
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cca:	3204      	adds	r2, #4
 8006ccc:	605a      	str	r2, [r3, #4]
 8006cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd0:	1d1a      	adds	r2, r3, #4
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	609a      	str	r2, [r3, #8]
 8006cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4a29      	ldr	r2, [pc, #164]	; (8006d88 <xTaskGenericNotifyFromISR+0x2cc>)
 8006ce4:	441a      	add	r2, r3
 8006ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ce8:	615a      	str	r2, [r3, #20]
 8006cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cee:	4926      	ldr	r1, [pc, #152]	; (8006d88 <xTaskGenericNotifyFromISR+0x2cc>)
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	1c59      	adds	r1, r3, #1
 8006cfe:	4822      	ldr	r0, [pc, #136]	; (8006d88 <xTaskGenericNotifyFromISR+0x2cc>)
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4403      	add	r3, r0
 8006d0a:	6019      	str	r1, [r3, #0]
 8006d0c:	e01b      	b.n	8006d46 <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006d0e:	4b1f      	ldr	r3, [pc, #124]	; (8006d8c <xTaskGenericNotifyFromISR+0x2d0>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	637b      	str	r3, [r7, #52]	; 0x34
 8006d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d18:	61da      	str	r2, [r3, #28]
 8006d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d20:	621a      	str	r2, [r3, #32]
 8006d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d28:	3218      	adds	r2, #24
 8006d2a:	605a      	str	r2, [r3, #4]
 8006d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d2e:	f103 0218 	add.w	r2, r3, #24
 8006d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d34:	609a      	str	r2, [r3, #8]
 8006d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d38:	4a14      	ldr	r2, [pc, #80]	; (8006d8c <xTaskGenericNotifyFromISR+0x2d0>)
 8006d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d3c:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <xTaskGenericNotifyFromISR+0x2d0>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3301      	adds	r3, #1
 8006d42:	4a12      	ldr	r2, [pc, #72]	; (8006d8c <xTaskGenericNotifyFromISR+0x2d0>)
 8006d44:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4a:	4b11      	ldr	r3, [pc, #68]	; (8006d90 <xTaskGenericNotifyFromISR+0x2d4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d908      	bls.n	8006d66 <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006d60:	4b0c      	ldr	r3, [pc, #48]	; (8006d94 <xTaskGenericNotifyFromISR+0x2d8>)
 8006d62:	2201      	movs	r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d68:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006d70:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8006d74:	4618      	mov	r0, r3
 8006d76:	3748      	adds	r7, #72	; 0x48
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20000820 	.word	0x20000820
 8006d80:	2000083c 	.word	0x2000083c
 8006d84:	20000824 	.word	0x20000824
 8006d88:	200007a0 	.word	0x200007a0
 8006d8c:	2000080c 	.word	0x2000080c
 8006d90:	2000079c 	.word	0x2000079c
 8006d94:	2000082c 	.word	0x2000082c
	...

08006da0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006da0:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <pxCurrentTCBConst2>)
 8006da2:	6819      	ldr	r1, [r3, #0]
 8006da4:	6808      	ldr	r0, [r1, #0]
 8006da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006daa:	f380 8809 	msr	PSP, r0
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f04f 0000 	mov.w	r0, #0
 8006db6:	f380 8811 	msr	BASEPRI, r0
 8006dba:	4770      	bx	lr
 8006dbc:	f3af 8000 	nop.w

08006dc0 <pxCurrentTCBConst2>:
 8006dc0:	2000079c 	.word	0x2000079c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop
	...

08006dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006dd0:	f3ef 8009 	mrs	r0, PSP
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	4b15      	ldr	r3, [pc, #84]	; (8006e30 <pxCurrentTCBConst>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	f01e 0f10 	tst.w	lr, #16
 8006de0:	bf08      	it	eq
 8006de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dea:	6010      	str	r0, [r2, #0]
 8006dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006df4:	f380 8811 	msr	BASEPRI, r0
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f7ff fdd6 	bl	80069b0 <vTaskSwitchContext>
 8006e04:	f04f 0000 	mov.w	r0, #0
 8006e08:	f380 8811 	msr	BASEPRI, r0
 8006e0c:	bc09      	pop	{r0, r3}
 8006e0e:	6819      	ldr	r1, [r3, #0]
 8006e10:	6808      	ldr	r0, [r1, #0]
 8006e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e16:	f01e 0f10 	tst.w	lr, #16
 8006e1a:	bf08      	it	eq
 8006e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e20:	f380 8809 	msr	PSP, r0
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	f3af 8000 	nop.w

08006e30 <pxCurrentTCBConst>:
 8006e30:	2000079c 	.word	0x2000079c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop

08006e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
        __asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	607b      	str	r3, [r7, #4]
    }
 8006e50:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006e52:	f000 ffbb 	bl	8007dcc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006e56:	f7ff fc91 	bl	800677c <xTaskIncrementTick>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d006      	beq.n	8006e6e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8006e60:	f001 f812 	bl	8007e88 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e64:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <SysTick_Handler+0x50>)
 8006e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	e001      	b.n	8006e72 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8006e6e:	f000 ffef 	bl	8007e50 <SEGGER_SYSVIEW_RecordExitISR>
 8006e72:	2300      	movs	r3, #0
 8006e74:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	f383 8811 	msr	BASEPRI, r3
    }
 8006e7c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8006e7e:	bf00      	nop
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006e92:	f3ef 8305 	mrs	r3, IPSR
 8006e96:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b0f      	cmp	r3, #15
 8006e9c:	d914      	bls.n	8006ec8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e9e:	4a17      	ldr	r2, [pc, #92]	; (8006efc <vPortValidateInterruptPriority+0x70>)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ea8:	4b15      	ldr	r3, [pc, #84]	; (8006f00 <vPortValidateInterruptPriority+0x74>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	7afa      	ldrb	r2, [r7, #11]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d20a      	bcs.n	8006ec8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	607b      	str	r3, [r7, #4]
    }
 8006ec4:	bf00      	nop
 8006ec6:	e7fe      	b.n	8006ec6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ec8:	4b0e      	ldr	r3, [pc, #56]	; (8006f04 <vPortValidateInterruptPriority+0x78>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ed0:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <vPortValidateInterruptPriority+0x7c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d90a      	bls.n	8006eee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	603b      	str	r3, [r7, #0]
    }
 8006eea:	bf00      	nop
 8006eec:	e7fe      	b.n	8006eec <vPortValidateInterruptPriority+0x60>
    }
 8006eee:	bf00      	nop
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	e000e3f0 	.word	0xe000e3f0
 8006f00:	20000840 	.word	0x20000840
 8006f04:	e000ed0c 	.word	0xe000ed0c
 8006f08:	20000844 	.word	0x20000844

08006f0c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8006f12:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <_DoInit+0x98>)
 8006f14:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2203      	movs	r2, #3
 8006f1a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2203      	movs	r2, #3
 8006f20:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a20      	ldr	r2, [pc, #128]	; (8006fa8 <_DoInit+0x9c>)
 8006f26:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a20      	ldr	r2, [pc, #128]	; (8006fac <_DoInit+0xa0>)
 8006f2c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f34:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a17      	ldr	r2, [pc, #92]	; (8006fa8 <_DoInit+0x9c>)
 8006f4c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a17      	ldr	r2, [pc, #92]	; (8006fb0 <_DoInit+0xa4>)
 8006f52:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2210      	movs	r2, #16
 8006f58:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3307      	adds	r3, #7
 8006f70:	4a10      	ldr	r2, [pc, #64]	; (8006fb4 <_DoInit+0xa8>)
 8006f72:	6810      	ldr	r0, [r2, #0]
 8006f74:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006f76:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a0e      	ldr	r2, [pc, #56]	; (8006fb8 <_DoInit+0xac>)
 8006f7e:	6810      	ldr	r0, [r2, #0]
 8006f80:	6018      	str	r0, [r3, #0]
 8006f82:	8891      	ldrh	r1, [r2, #4]
 8006f84:	7992      	ldrb	r2, [r2, #6]
 8006f86:	8099      	strh	r1, [r3, #4]
 8006f88:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006f8a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2220      	movs	r2, #32
 8006f92:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006f94:	f3bf 8f5f 	dmb	sy
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	20000848 	.word	0x20000848
 8006fa8:	0800ba88 	.word	0x0800ba88
 8006fac:	200008f0 	.word	0x200008f0
 8006fb0:	20000cf0 	.word	0x20000cf0
 8006fb4:	0800ba94 	.word	0x0800ba94
 8006fb8:	0800ba98 	.word	0x0800ba98

08006fbc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08a      	sub	sp, #40	; 0x28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d905      	bls.n	8006fec <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fea:	e007      	b.n	8006ffc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	69b9      	ldr	r1, [r7, #24]
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	1acb      	subs	r3, r1, r3
 8006ff6:	4413      	add	r3, r2
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007006:	4293      	cmp	r3, r2
 8007008:	bf28      	it	cs
 800700a:	4613      	movcs	r3, r2
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800700e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4293      	cmp	r3, r2
 8007014:	bf28      	it	cs
 8007016:	4613      	movcs	r3, r2
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	4413      	add	r3, r2
 8007022:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8007024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007026:	68b9      	ldr	r1, [r7, #8]
 8007028:	6978      	ldr	r0, [r7, #20]
 800702a:	f001 fec0 	bl	8008dae <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800702e:	6a3a      	ldr	r2, [r7, #32]
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	4413      	add	r3, r2
 8007034:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	4413      	add	r3, r2
 800703c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	4413      	add	r3, r2
 800704c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	69fa      	ldr	r2, [r7, #28]
 8007054:	429a      	cmp	r2, r3
 8007056:	d101      	bne.n	800705c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8007058:	2300      	movs	r3, #0
 800705a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800705c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1b2      	bne.n	8006fd2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800706c:	6a3b      	ldr	r3, [r7, #32]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3728      	adds	r7, #40	; 0x28
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8007076:	b580      	push	{r7, lr}
 8007078:	b088      	sub	sp, #32
 800707a:	af00      	add	r7, sp, #0
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	60b9      	str	r1, [r7, #8]
 8007080:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	429a      	cmp	r2, r3
 8007098:	d911      	bls.n	80070be <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	4413      	add	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	68b9      	ldr	r1, [r7, #8]
 80070a8:	6938      	ldr	r0, [r7, #16]
 80070aa:	f001 fe80 	bl	8008dae <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80070ae:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80070b2:	69fa      	ldr	r2, [r7, #28]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	441a      	add	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80070bc:	e01f      	b.n	80070fe <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	4413      	add	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	68b9      	ldr	r1, [r7, #8]
 80070d0:	6938      	ldr	r0, [r7, #16]
 80070d2:	f001 fe6c 	bl	8008dae <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	4413      	add	r3, r2
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	4619      	mov	r1, r3
 80070ee:	6938      	ldr	r0, [r7, #16]
 80070f0:	f001 fe5d 	bl	8008dae <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80070f4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	60da      	str	r2, [r3, #12]
}
 80070fe:	bf00      	nop
 8007100:	3720      	adds	r7, #32
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8007106:	b480      	push	{r7}
 8007108:	b087      	sub	sp, #28
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	429a      	cmp	r2, r3
 8007120:	d808      	bhi.n	8007134 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689a      	ldr	r2, [r3, #8]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1ad2      	subs	r2, r2, r3
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	4413      	add	r3, r2
 800712e:	3b01      	subs	r3, #1
 8007130:	617b      	str	r3, [r7, #20]
 8007132:	e004      	b.n	800713e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800713e:	697b      	ldr	r3, [r7, #20]
}
 8007140:	4618      	mov	r0, r3
 8007142:	371c      	adds	r7, #28
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800714c:	b580      	push	{r7, lr}
 800714e:	b08c      	sub	sp, #48	; 0x30
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007158:	4b3e      	ldr	r3, [pc, #248]	; (8007254 <SEGGER_RTT_ReadNoLock+0x108>)
 800715a:	623b      	str	r3, [r7, #32]
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <SEGGER_RTT_ReadNoLock+0x1e>
 8007166:	f7ff fed1 	bl	8006f0c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4613      	mov	r3, r2
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	4413      	add	r3, r2
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	3360      	adds	r3, #96	; 0x60
 8007176:	4a37      	ldr	r2, [pc, #220]	; (8007254 <SEGGER_RTT_ReadNoLock+0x108>)
 8007178:	4413      	add	r3, r2
 800717a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800718c:	2300      	movs	r3, #0
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	429a      	cmp	r2, r3
 8007196:	d92b      	bls.n	80071f0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4293      	cmp	r3, r2
 80071a8:	bf28      	it	cs
 80071aa:	4613      	movcs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b4:	4413      	add	r3, r2
 80071b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	6939      	ldr	r1, [r7, #16]
 80071bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071be:	f001 fdf6 	bl	8008dae <memcpy>
    NumBytesRead += NumBytesRem;
 80071c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	4413      	add	r3, r2
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80071ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	4413      	add	r3, r2
 80071d0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80071da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	4413      	add	r3, r2
 80071e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d101      	bne.n	80071f0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80071ec:	2300      	movs	r3, #0
 80071ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	bf28      	it	cs
 8007200:	4613      	movcs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d019      	beq.n	800723e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	4413      	add	r3, r2
 8007212:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	6939      	ldr	r1, [r7, #16]
 8007218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800721a:	f001 fdc8 	bl	8008dae <memcpy>
    NumBytesRead += NumBytesRem;
 800721e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	4413      	add	r3, r2
 8007224:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	4413      	add	r3, r2
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	4413      	add	r3, r2
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007248:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800724c:	4618      	mov	r0, r3
 800724e:	3730      	adds	r7, #48	; 0x30
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	20000848 	.word	0x20000848

08007258 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	4613      	mov	r3, r2
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	4413      	add	r3, r2
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	4a1f      	ldr	r2, [pc, #124]	; (80072f4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8007276:	4413      	add	r3, r2
 8007278:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	2b02      	cmp	r3, #2
 8007280:	d029      	beq.n	80072d6 <SEGGER_RTT_WriteNoLock+0x7e>
 8007282:	2b02      	cmp	r3, #2
 8007284:	d82e      	bhi.n	80072e4 <SEGGER_RTT_WriteNoLock+0x8c>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <SEGGER_RTT_WriteNoLock+0x38>
 800728a:	2b01      	cmp	r3, #1
 800728c:	d013      	beq.n	80072b6 <SEGGER_RTT_WriteNoLock+0x5e>
 800728e:	e029      	b.n	80072e4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8007290:	6978      	ldr	r0, [r7, #20]
 8007292:	f7ff ff38 	bl	8007106 <_GetAvailWriteSpace>
 8007296:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	429a      	cmp	r2, r3
 800729e:	d202      	bcs.n	80072a6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80072a4:	e021      	b.n	80072ea <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	69b9      	ldr	r1, [r7, #24]
 80072ae:	6978      	ldr	r0, [r7, #20]
 80072b0:	f7ff fee1 	bl	8007076 <_WriteNoCheck>
    break;
 80072b4:	e019      	b.n	80072ea <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80072b6:	6978      	ldr	r0, [r7, #20]
 80072b8:	f7ff ff25 	bl	8007106 <_GetAvailWriteSpace>
 80072bc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	4293      	cmp	r3, r2
 80072c4:	bf28      	it	cs
 80072c6:	4613      	movcs	r3, r2
 80072c8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80072ca:	69fa      	ldr	r2, [r7, #28]
 80072cc:	69b9      	ldr	r1, [r7, #24]
 80072ce:	6978      	ldr	r0, [r7, #20]
 80072d0:	f7ff fed1 	bl	8007076 <_WriteNoCheck>
    break;
 80072d4:	e009      	b.n	80072ea <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	69b9      	ldr	r1, [r7, #24]
 80072da:	6978      	ldr	r0, [r7, #20]
 80072dc:	f7ff fe6e 	bl	8006fbc <_WriteBlocking>
 80072e0:	61f8      	str	r0, [r7, #28]
    break;
 80072e2:	e002      	b.n	80072ea <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80072e4:	2300      	movs	r3, #0
 80072e6:	61fb      	str	r3, [r7, #28]
    break;
 80072e8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80072ea:	69fb      	ldr	r3, [r7, #28]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3720      	adds	r7, #32
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	20000848 	.word	0x20000848

080072f8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b088      	sub	sp, #32
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8007304:	4b0e      	ldr	r3, [pc, #56]	; (8007340 <SEGGER_RTT_Write+0x48>)
 8007306:	61fb      	str	r3, [r7, #28]
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <SEGGER_RTT_Write+0x1e>
 8007312:	f7ff fdfb 	bl	8006f0c <_DoInit>
  SEGGER_RTT_LOCK();
 8007316:	f3ef 8311 	mrs	r3, BASEPRI
 800731a:	f04f 0120 	mov.w	r1, #32
 800731e:	f381 8811 	msr	BASEPRI, r1
 8007322:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	68b9      	ldr	r1, [r7, #8]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff ff95 	bl	8007258 <SEGGER_RTT_WriteNoLock>
 800732e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8007336:	697b      	ldr	r3, [r7, #20]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3720      	adds	r7, #32
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	20000848 	.word	0x20000848

08007344 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007354:	e002      	b.n	800735c <_EncodeStr+0x18>
    Len++;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	3301      	adds	r3, #1
 800735a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	4413      	add	r3, r2
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1f6      	bne.n	8007356 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	429a      	cmp	r2, r3
 800736e:	d901      	bls.n	8007374 <_EncodeStr+0x30>
    Len = Limit;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	2bfe      	cmp	r3, #254	; 0xfe
 8007378:	d806      	bhi.n	8007388 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	60fa      	str	r2, [r7, #12]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	e011      	b.n	80073ac <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	60fa      	str	r2, [r7, #12]
 800738e:	22ff      	movs	r2, #255	; 0xff
 8007390:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	60fa      	str	r2, [r7, #12]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	0a19      	lsrs	r1, r3, #8
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	60fa      	str	r2, [r7, #12]
 80073a8:	b2ca      	uxtb	r2, r1
 80073aa:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80073b0:	e00a      	b.n	80073c8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	1c53      	adds	r3, r2, #1
 80073b6:	60bb      	str	r3, [r7, #8]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	1c59      	adds	r1, r3, #1
 80073bc:	60f9      	str	r1, [r7, #12]
 80073be:	7812      	ldrb	r2, [r2, #0]
 80073c0:	701a      	strb	r2, [r3, #0]
    n++;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	3301      	adds	r3, #1
 80073c6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d3f0      	bcc.n	80073b2 <_EncodeStr+0x6e>
  }
  return pPayload;
 80073d0:	68fb      	ldr	r3, [r7, #12]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3304      	adds	r3, #4
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80073fe:	4b35      	ldr	r3, [pc, #212]	; (80074d4 <_HandleIncomingPacket+0xdc>)
 8007400:	7e1b      	ldrb	r3, [r3, #24]
 8007402:	4618      	mov	r0, r3
 8007404:	1cfb      	adds	r3, r7, #3
 8007406:	2201      	movs	r2, #1
 8007408:	4619      	mov	r1, r3
 800740a:	f7ff fe9f 	bl	800714c <SEGGER_RTT_ReadNoLock>
 800740e:	4603      	mov	r3, r0
 8007410:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	dd59      	ble.n	80074cc <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	2b80      	cmp	r3, #128	; 0x80
 800741c:	d032      	beq.n	8007484 <_HandleIncomingPacket+0x8c>
 800741e:	2b80      	cmp	r3, #128	; 0x80
 8007420:	dc42      	bgt.n	80074a8 <_HandleIncomingPacket+0xb0>
 8007422:	2b07      	cmp	r3, #7
 8007424:	dc16      	bgt.n	8007454 <_HandleIncomingPacket+0x5c>
 8007426:	2b00      	cmp	r3, #0
 8007428:	dd3e      	ble.n	80074a8 <_HandleIncomingPacket+0xb0>
 800742a:	3b01      	subs	r3, #1
 800742c:	2b06      	cmp	r3, #6
 800742e:	d83b      	bhi.n	80074a8 <_HandleIncomingPacket+0xb0>
 8007430:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <_HandleIncomingPacket+0x40>)
 8007432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007436:	bf00      	nop
 8007438:	0800745b 	.word	0x0800745b
 800743c:	08007461 	.word	0x08007461
 8007440:	08007467 	.word	0x08007467
 8007444:	0800746d 	.word	0x0800746d
 8007448:	08007473 	.word	0x08007473
 800744c:	08007479 	.word	0x08007479
 8007450:	0800747f 	.word	0x0800747f
 8007454:	2b7f      	cmp	r3, #127	; 0x7f
 8007456:	d034      	beq.n	80074c2 <_HandleIncomingPacket+0xca>
 8007458:	e026      	b.n	80074a8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800745a:	f000 faf7 	bl	8007a4c <SEGGER_SYSVIEW_Start>
      break;
 800745e:	e035      	b.n	80074cc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007460:	f000 fbae 	bl	8007bc0 <SEGGER_SYSVIEW_Stop>
      break;
 8007464:	e032      	b.n	80074cc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007466:	f000 fc7f 	bl	8007d68 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800746a:	e02f      	b.n	80074cc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800746c:	f000 fc68 	bl	8007d40 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007470:	e02c      	b.n	80074cc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007472:	f000 fbcb 	bl	8007c0c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007476:	e029      	b.n	80074cc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007478:	f000 fe70 	bl	800815c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800747c:	e026      	b.n	80074cc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800747e:	f000 fe4f 	bl	8008120 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007482:	e023      	b.n	80074cc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007484:	4b13      	ldr	r3, [pc, #76]	; (80074d4 <_HandleIncomingPacket+0xdc>)
 8007486:	7e1b      	ldrb	r3, [r3, #24]
 8007488:	4618      	mov	r0, r3
 800748a:	1cfb      	adds	r3, r7, #3
 800748c:	2201      	movs	r2, #1
 800748e:	4619      	mov	r1, r3
 8007490:	f7ff fe5c 	bl	800714c <SEGGER_RTT_ReadNoLock>
 8007494:	4603      	mov	r3, r0
 8007496:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	dd13      	ble.n	80074c6 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 fdbd 	bl	8008020 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80074a6:	e00e      	b.n	80074c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	b25b      	sxtb	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	da0c      	bge.n	80074ca <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80074b0:	4b08      	ldr	r3, [pc, #32]	; (80074d4 <_HandleIncomingPacket+0xdc>)
 80074b2:	7e1b      	ldrb	r3, [r3, #24]
 80074b4:	4618      	mov	r0, r3
 80074b6:	1cfb      	adds	r3, r7, #3
 80074b8:	2201      	movs	r2, #1
 80074ba:	4619      	mov	r1, r3
 80074bc:	f7ff fe46 	bl	800714c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80074c0:	e003      	b.n	80074ca <_HandleIncomingPacket+0xd2>
      break;
 80074c2:	bf00      	nop
 80074c4:	e002      	b.n	80074cc <_HandleIncomingPacket+0xd4>
      break;
 80074c6:	bf00      	nop
 80074c8:	e000      	b.n	80074cc <_HandleIncomingPacket+0xd4>
      break;
 80074ca:	bf00      	nop
    }
  }
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	20000d00 	.word	0x20000d00

080074d8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08c      	sub	sp, #48	; 0x30
 80074dc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80074de:	2301      	movs	r3, #1
 80074e0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80074e2:	1d3b      	adds	r3, r7, #4
 80074e4:	3301      	adds	r3, #1
 80074e6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ec:	4b31      	ldr	r3, [pc, #196]	; (80075b4 <_TrySendOverflowPacket+0xdc>)
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80074f2:	e00b      	b.n	800750c <_TrySendOverflowPacket+0x34>
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fa:	1c59      	adds	r1, r3, #1
 80074fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80074fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007502:	b2d2      	uxtb	r2, r2
 8007504:	701a      	strb	r2, [r3, #0]
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	09db      	lsrs	r3, r3, #7
 800750a:	62bb      	str	r3, [r7, #40]	; 0x28
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	2b7f      	cmp	r3, #127	; 0x7f
 8007510:	d8f0      	bhi.n	80074f4 <_TrySendOverflowPacket+0x1c>
 8007512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]
 800751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007520:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007522:	4b25      	ldr	r3, [pc, #148]	; (80075b8 <_TrySendOverflowPacket+0xe0>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007528:	4b22      	ldr	r3, [pc, #136]	; (80075b4 <_TrySendOverflowPacket+0xdc>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	623b      	str	r3, [r7, #32]
 800753a:	e00b      	b.n	8007554 <_TrySendOverflowPacket+0x7c>
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	b2da      	uxtb	r2, r3
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	1c59      	adds	r1, r3, #1
 8007544:	6279      	str	r1, [r7, #36]	; 0x24
 8007546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	701a      	strb	r2, [r3, #0]
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	09db      	lsrs	r3, r3, #7
 8007552:	623b      	str	r3, [r7, #32]
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	2b7f      	cmp	r3, #127	; 0x7f
 8007558:	d8f0      	bhi.n	800753c <_TrySendOverflowPacket+0x64>
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	627a      	str	r2, [r7, #36]	; 0x24
 8007560:	6a3a      	ldr	r2, [r7, #32]
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800756a:	4b12      	ldr	r3, [pc, #72]	; (80075b4 <_TrySendOverflowPacket+0xdc>)
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	4618      	mov	r0, r3
 8007570:	1d3b      	adds	r3, r7, #4
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	461a      	mov	r2, r3
 8007578:	1d3b      	adds	r3, r7, #4
 800757a:	4619      	mov	r1, r3
 800757c:	f7f8 fe48 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007580:	4603      	mov	r3, r0
 8007582:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d009      	beq.n	800759e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800758a:	4a0a      	ldr	r2, [pc, #40]	; (80075b4 <_TrySendOverflowPacket+0xdc>)
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007590:	4b08      	ldr	r3, [pc, #32]	; (80075b4 <_TrySendOverflowPacket+0xdc>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	3b01      	subs	r3, #1
 8007596:	b2da      	uxtb	r2, r3
 8007598:	4b06      	ldr	r3, [pc, #24]	; (80075b4 <_TrySendOverflowPacket+0xdc>)
 800759a:	701a      	strb	r2, [r3, #0]
 800759c:	e004      	b.n	80075a8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800759e:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <_TrySendOverflowPacket+0xdc>)
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	3301      	adds	r3, #1
 80075a4:	4a03      	ldr	r2, [pc, #12]	; (80075b4 <_TrySendOverflowPacket+0xdc>)
 80075a6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80075a8:	693b      	ldr	r3, [r7, #16]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3730      	adds	r7, #48	; 0x30
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000d00 	.word	0x20000d00
 80075b8:	e0001004 	.word	0xe0001004

080075bc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80075bc:	b580      	push	{r7, lr}
 80075be:	b08a      	sub	sp, #40	; 0x28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80075c8:	4b6c      	ldr	r3, [pc, #432]	; (800777c <_SendPacket+0x1c0>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d010      	beq.n	80075f2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80075d0:	4b6a      	ldr	r3, [pc, #424]	; (800777c <_SendPacket+0x1c0>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 80a3 	beq.w	8007720 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80075da:	4b68      	ldr	r3, [pc, #416]	; (800777c <_SendPacket+0x1c0>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d109      	bne.n	80075f6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80075e2:	f7ff ff79 	bl	80074d8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80075e6:	4b65      	ldr	r3, [pc, #404]	; (800777c <_SendPacket+0x1c0>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	f040 809a 	bne.w	8007724 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80075f0:	e001      	b.n	80075f6 <_SendPacket+0x3a>
    goto Send;
 80075f2:	bf00      	nop
 80075f4:	e000      	b.n	80075f8 <_SendPacket+0x3c>
Send:
 80075f6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b1f      	cmp	r3, #31
 80075fc:	d809      	bhi.n	8007612 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80075fe:	4b5f      	ldr	r3, [pc, #380]	; (800777c <_SendPacket+0x1c0>)
 8007600:	69da      	ldr	r2, [r3, #28]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	fa22 f303 	lsr.w	r3, r2, r3
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	f040 808b 	bne.w	8007728 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b17      	cmp	r3, #23
 8007616:	d807      	bhi.n	8007628 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3b01      	subs	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	b2da      	uxtb	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	e03d      	b.n	80076a4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	2b7f      	cmp	r3, #127	; 0x7f
 8007634:	d912      	bls.n	800765c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	09da      	lsrs	r2, r3, #7
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3b01      	subs	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	b2d2      	uxtb	r2, r2
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	3a01      	subs	r2, #1
 800764e:	60fa      	str	r2, [r7, #12]
 8007650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007654:	b2da      	uxtb	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	701a      	strb	r2, [r3, #0]
 800765a:	e006      	b.n	800766a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3b01      	subs	r3, #1
 8007660:	60fb      	str	r3, [r7, #12]
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	b2da      	uxtb	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b7f      	cmp	r3, #127	; 0x7f
 800766e:	d912      	bls.n	8007696 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	09da      	lsrs	r2, r3, #7
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3b01      	subs	r3, #1
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	b2db      	uxtb	r3, r3
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	3a01      	subs	r2, #1
 8007688:	60fa      	str	r2, [r7, #12]
 800768a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800768e:	b2da      	uxtb	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	701a      	strb	r2, [r3, #0]
 8007694:	e006      	b.n	80076a4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3b01      	subs	r3, #1
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80076a4:	4b36      	ldr	r3, [pc, #216]	; (8007780 <_SendPacket+0x1c4>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80076aa:	4b34      	ldr	r3, [pc, #208]	; (800777c <_SendPacket+0x1c0>)
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	627b      	str	r3, [r7, #36]	; 0x24
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	623b      	str	r3, [r7, #32]
 80076bc:	e00b      	b.n	80076d6 <_SendPacket+0x11a>
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	1c59      	adds	r1, r3, #1
 80076c6:	6279      	str	r1, [r7, #36]	; 0x24
 80076c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076cc:	b2d2      	uxtb	r2, r2
 80076ce:	701a      	strb	r2, [r3, #0]
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	09db      	lsrs	r3, r3, #7
 80076d4:	623b      	str	r3, [r7, #32]
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	2b7f      	cmp	r3, #127	; 0x7f
 80076da:	d8f0      	bhi.n	80076be <_SendPacket+0x102>
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	627a      	str	r2, [r7, #36]	; 0x24
 80076e2:	6a3a      	ldr	r2, [r7, #32]
 80076e4:	b2d2      	uxtb	r2, r2
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80076ec:	4b23      	ldr	r3, [pc, #140]	; (800777c <_SendPacket+0x1c0>)
 80076ee:	785b      	ldrb	r3, [r3, #1]
 80076f0:	4618      	mov	r0, r3
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	68f9      	ldr	r1, [r7, #12]
 80076fc:	f7f8 fd88 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007700:	4603      	mov	r3, r0
 8007702:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800770a:	4a1c      	ldr	r2, [pc, #112]	; (800777c <_SendPacket+0x1c0>)
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	60d3      	str	r3, [r2, #12]
 8007710:	e00b      	b.n	800772a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007712:	4b1a      	ldr	r3, [pc, #104]	; (800777c <_SendPacket+0x1c0>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	3301      	adds	r3, #1
 8007718:	b2da      	uxtb	r2, r3
 800771a:	4b18      	ldr	r3, [pc, #96]	; (800777c <_SendPacket+0x1c0>)
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	e004      	b.n	800772a <_SendPacket+0x16e>
    goto SendDone;
 8007720:	bf00      	nop
 8007722:	e002      	b.n	800772a <_SendPacket+0x16e>
      goto SendDone;
 8007724:	bf00      	nop
 8007726:	e000      	b.n	800772a <_SendPacket+0x16e>
      goto SendDone;
 8007728:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800772a:	4b14      	ldr	r3, [pc, #80]	; (800777c <_SendPacket+0x1c0>)
 800772c:	7e1b      	ldrb	r3, [r3, #24]
 800772e:	4619      	mov	r1, r3
 8007730:	4a14      	ldr	r2, [pc, #80]	; (8007784 <_SendPacket+0x1c8>)
 8007732:	460b      	mov	r3, r1
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	440b      	add	r3, r1
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	4413      	add	r3, r2
 800773c:	336c      	adds	r3, #108	; 0x6c
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	4b0e      	ldr	r3, [pc, #56]	; (800777c <_SendPacket+0x1c0>)
 8007742:	7e1b      	ldrb	r3, [r3, #24]
 8007744:	4618      	mov	r0, r3
 8007746:	490f      	ldr	r1, [pc, #60]	; (8007784 <_SendPacket+0x1c8>)
 8007748:	4603      	mov	r3, r0
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	4403      	add	r3, r0
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	440b      	add	r3, r1
 8007752:	3370      	adds	r3, #112	; 0x70
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d00b      	beq.n	8007772 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800775a:	4b08      	ldr	r3, [pc, #32]	; (800777c <_SendPacket+0x1c0>)
 800775c:	789b      	ldrb	r3, [r3, #2]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d107      	bne.n	8007772 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007762:	4b06      	ldr	r3, [pc, #24]	; (800777c <_SendPacket+0x1c0>)
 8007764:	2201      	movs	r2, #1
 8007766:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007768:	f7ff fe46 	bl	80073f8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800776c:	4b03      	ldr	r3, [pc, #12]	; (800777c <_SendPacket+0x1c0>)
 800776e:	2200      	movs	r2, #0
 8007770:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007772:	bf00      	nop
 8007774:	3728      	adds	r7, #40	; 0x28
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	20000d00 	.word	0x20000d00
 8007780:	e0001004 	.word	0xe0001004
 8007784:	20000848 	.word	0x20000848

08007788 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007790:	f3ef 8311 	mrs	r3, BASEPRI
 8007794:	f04f 0120 	mov.w	r1, #32
 8007798:	f381 8811 	msr	BASEPRI, r1
 800779c:	60fb      	str	r3, [r7, #12]
 800779e:	4808      	ldr	r0, [pc, #32]	; (80077c0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80077a0:	f7ff fe1d 	bl	80073de <_PreparePacket>
 80077a4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	68b9      	ldr	r1, [r7, #8]
 80077aa:	68b8      	ldr	r0, [r7, #8]
 80077ac:	f7ff ff06 	bl	80075bc <_SendPacket>
  RECORD_END();
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f383 8811 	msr	BASEPRI, r3
}
 80077b6:	bf00      	nop
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000d30 	.word	0x20000d30

080077c4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80077ce:	f3ef 8311 	mrs	r3, BASEPRI
 80077d2:	f04f 0120 	mov.w	r1, #32
 80077d6:	f381 8811 	msr	BASEPRI, r1
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	4816      	ldr	r0, [pc, #88]	; (8007838 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80077de:	f7ff fdfe 	bl	80073de <_PreparePacket>
 80077e2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	61fb      	str	r3, [r7, #28]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	61bb      	str	r3, [r7, #24]
 80077f0:	e00b      	b.n	800780a <SEGGER_SYSVIEW_RecordU32+0x46>
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	1c59      	adds	r1, r3, #1
 80077fa:	61f9      	str	r1, [r7, #28]
 80077fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007800:	b2d2      	uxtb	r2, r2
 8007802:	701a      	strb	r2, [r3, #0]
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	09db      	lsrs	r3, r3, #7
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b7f      	cmp	r3, #127	; 0x7f
 800780e:	d8f0      	bhi.n	80077f2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	61fa      	str	r2, [r7, #28]
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	b2d2      	uxtb	r2, r2
 800781a:	701a      	strb	r2, [r3, #0]
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	68f9      	ldr	r1, [r7, #12]
 8007824:	6938      	ldr	r0, [r7, #16]
 8007826:	f7ff fec9 	bl	80075bc <_SendPacket>
  RECORD_END();
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f383 8811 	msr	BASEPRI, r3
}
 8007830:	bf00      	nop
 8007832:	3720      	adds	r7, #32
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	20000d30 	.word	0x20000d30

0800783c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800783c:	b580      	push	{r7, lr}
 800783e:	b08c      	sub	sp, #48	; 0x30
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007848:	f3ef 8311 	mrs	r3, BASEPRI
 800784c:	f04f 0120 	mov.w	r1, #32
 8007850:	f381 8811 	msr	BASEPRI, r1
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	4825      	ldr	r0, [pc, #148]	; (80078ec <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007858:	f7ff fdc1 	bl	80073de <_PreparePacket>
 800785c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	62bb      	str	r3, [r7, #40]	; 0x28
 800786a:	e00b      	b.n	8007884 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	b2da      	uxtb	r2, r3
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	1c59      	adds	r1, r3, #1
 8007874:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007876:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800787a:	b2d2      	uxtb	r2, r2
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007880:	09db      	lsrs	r3, r3, #7
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	2b7f      	cmp	r3, #127	; 0x7f
 8007888:	d8f0      	bhi.n	800786c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007892:	b2d2      	uxtb	r2, r2
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007898:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	627b      	str	r3, [r7, #36]	; 0x24
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	623b      	str	r3, [r7, #32]
 80078a2:	e00b      	b.n	80078bc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	1c59      	adds	r1, r3, #1
 80078ac:	6279      	str	r1, [r7, #36]	; 0x24
 80078ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	701a      	strb	r2, [r3, #0]
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	09db      	lsrs	r3, r3, #7
 80078ba:	623b      	str	r3, [r7, #32]
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	2b7f      	cmp	r3, #127	; 0x7f
 80078c0:	d8f0      	bhi.n	80078a4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	627a      	str	r2, [r7, #36]	; 0x24
 80078c8:	6a3a      	ldr	r2, [r7, #32]
 80078ca:	b2d2      	uxtb	r2, r2
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	6979      	ldr	r1, [r7, #20]
 80078d6:	69b8      	ldr	r0, [r7, #24]
 80078d8:	f7ff fe70 	bl	80075bc <_SendPacket>
  RECORD_END();
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	f383 8811 	msr	BASEPRI, r3
}
 80078e2:	bf00      	nop
 80078e4:	3730      	adds	r7, #48	; 0x30
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000d30 	.word	0x20000d30

080078f0 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b092      	sub	sp, #72	; 0x48
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 80078fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007902:	f04f 0120 	mov.w	r1, #32
 8007906:	f381 8811 	msr	BASEPRI, r1
 800790a:	61fb      	str	r3, [r7, #28]
 800790c:	484e      	ldr	r0, [pc, #312]	; (8007a48 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800790e:	f7ff fd66 	bl	80073de <_PreparePacket>
 8007912:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	647b      	str	r3, [r7, #68]	; 0x44
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	643b      	str	r3, [r7, #64]	; 0x40
 8007920:	e00b      	b.n	800793a <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8007922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007924:	b2da      	uxtb	r2, r3
 8007926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007928:	1c59      	adds	r1, r3, #1
 800792a:	6479      	str	r1, [r7, #68]	; 0x44
 800792c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007930:	b2d2      	uxtb	r2, r2
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007936:	09db      	lsrs	r3, r3, #7
 8007938:	643b      	str	r3, [r7, #64]	; 0x40
 800793a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800793c:	2b7f      	cmp	r3, #127	; 0x7f
 800793e:	d8f0      	bhi.n	8007922 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8007940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	647a      	str	r2, [r7, #68]	; 0x44
 8007946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007948:	b2d2      	uxtb	r2, r2
 800794a:	701a      	strb	r2, [r3, #0]
 800794c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800794e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	63bb      	str	r3, [r7, #56]	; 0x38
 8007958:	e00b      	b.n	8007972 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800795a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795c:	b2da      	uxtb	r2, r3
 800795e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007960:	1c59      	adds	r1, r3, #1
 8007962:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007964:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007968:	b2d2      	uxtb	r2, r2
 800796a:	701a      	strb	r2, [r3, #0]
 800796c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796e:	09db      	lsrs	r3, r3, #7
 8007970:	63bb      	str	r3, [r7, #56]	; 0x38
 8007972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007974:	2b7f      	cmp	r3, #127	; 0x7f
 8007976:	d8f0      	bhi.n	800795a <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8007978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800797e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007986:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	637b      	str	r3, [r7, #52]	; 0x34
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	633b      	str	r3, [r7, #48]	; 0x30
 8007990:	e00b      	b.n	80079aa <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	b2da      	uxtb	r2, r3
 8007996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007998:	1c59      	adds	r1, r3, #1
 800799a:	6379      	str	r1, [r7, #52]	; 0x34
 800799c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079a0:	b2d2      	uxtb	r2, r2
 80079a2:	701a      	strb	r2, [r3, #0]
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	09db      	lsrs	r3, r3, #7
 80079a8:	633b      	str	r3, [r7, #48]	; 0x30
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	2b7f      	cmp	r3, #127	; 0x7f
 80079ae:	d8f0      	bhi.n	8007992 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80079b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	637a      	str	r2, [r7, #52]	; 0x34
 80079b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079b8:	b2d2      	uxtb	r2, r2
 80079ba:	701a      	strb	r2, [r3, #0]
 80079bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80079c8:	e00b      	b.n	80079e2 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80079ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	1c59      	adds	r1, r3, #1
 80079d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80079d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079d8:	b2d2      	uxtb	r2, r2
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079de:	09db      	lsrs	r3, r3, #7
 80079e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	2b7f      	cmp	r3, #127	; 0x7f
 80079e6:	d8f0      	bhi.n	80079ca <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80079e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079f0:	b2d2      	uxtb	r2, r2
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
 80079fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079fe:	623b      	str	r3, [r7, #32]
 8007a00:	e00b      	b.n	8007a1a <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	1c59      	adds	r1, r3, #1
 8007a0a:	6279      	str	r1, [r7, #36]	; 0x24
 8007a0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a10:	b2d2      	uxtb	r2, r2
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	09db      	lsrs	r3, r3, #7
 8007a18:	623b      	str	r3, [r7, #32]
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8007a1e:	d8f0      	bhi.n	8007a02 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	627a      	str	r2, [r7, #36]	; 0x24
 8007a26:	6a3a      	ldr	r2, [r7, #32]
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	701a      	strb	r2, [r3, #0]
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	6979      	ldr	r1, [r7, #20]
 8007a34:	69b8      	ldr	r0, [r7, #24]
 8007a36:	f7ff fdc1 	bl	80075bc <_SendPacket>
  RECORD_END();
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	f383 8811 	msr	BASEPRI, r3
}
 8007a40:	bf00      	nop
 8007a42:	3748      	adds	r7, #72	; 0x48
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20000d30 	.word	0x20000d30

08007a4c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08c      	sub	sp, #48	; 0x30
 8007a50:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007a52:	4b58      	ldr	r3, [pc, #352]	; (8007bb4 <SEGGER_SYSVIEW_Start+0x168>)
 8007a54:	2201      	movs	r2, #1
 8007a56:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007a58:	f3ef 8311 	mrs	r3, BASEPRI
 8007a5c:	f04f 0120 	mov.w	r1, #32
 8007a60:	f381 8811 	msr	BASEPRI, r1
 8007a64:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007a66:	4b53      	ldr	r3, [pc, #332]	; (8007bb4 <SEGGER_SYSVIEW_Start+0x168>)
 8007a68:	785b      	ldrb	r3, [r3, #1]
 8007a6a:	220a      	movs	r2, #10
 8007a6c:	4952      	ldr	r1, [pc, #328]	; (8007bb8 <SEGGER_SYSVIEW_Start+0x16c>)
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7f8 fbce 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007a7a:	200a      	movs	r0, #10
 8007a7c:	f7ff fe84 	bl	8007788 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007a80:	f3ef 8311 	mrs	r3, BASEPRI
 8007a84:	f04f 0120 	mov.w	r1, #32
 8007a88:	f381 8811 	msr	BASEPRI, r1
 8007a8c:	60bb      	str	r3, [r7, #8]
 8007a8e:	484b      	ldr	r0, [pc, #300]	; (8007bbc <SEGGER_SYSVIEW_Start+0x170>)
 8007a90:	f7ff fca5 	bl	80073de <_PreparePacket>
 8007a94:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a9e:	4b45      	ldr	r3, [pc, #276]	; (8007bb4 <SEGGER_SYSVIEW_Start+0x168>)
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aa4:	e00b      	b.n	8007abe <SEGGER_SYSVIEW_Start+0x72>
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aac:	1c59      	adds	r1, r3, #1
 8007aae:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007ab0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ab4:	b2d2      	uxtb	r2, r2
 8007ab6:	701a      	strb	r2, [r3, #0]
 8007ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aba:	09db      	lsrs	r3, r3, #7
 8007abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ac2:	d8f0      	bhi.n	8007aa6 <SEGGER_SYSVIEW_Start+0x5a>
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007acc:	b2d2      	uxtb	r2, r2
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad8:	4b36      	ldr	r3, [pc, #216]	; (8007bb4 <SEGGER_SYSVIEW_Start+0x168>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	623b      	str	r3, [r7, #32]
 8007ade:	e00b      	b.n	8007af8 <SEGGER_SYSVIEW_Start+0xac>
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	1c59      	adds	r1, r3, #1
 8007ae8:	6279      	str	r1, [r7, #36]	; 0x24
 8007aea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007aee:	b2d2      	uxtb	r2, r2
 8007af0:	701a      	strb	r2, [r3, #0]
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	09db      	lsrs	r3, r3, #7
 8007af6:	623b      	str	r3, [r7, #32]
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	2b7f      	cmp	r3, #127	; 0x7f
 8007afc:	d8f0      	bhi.n	8007ae0 <SEGGER_SYSVIEW_Start+0x94>
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	1c5a      	adds	r2, r3, #1
 8007b02:	627a      	str	r2, [r7, #36]	; 0x24
 8007b04:	6a3a      	ldr	r2, [r7, #32]
 8007b06:	b2d2      	uxtb	r2, r2
 8007b08:	701a      	strb	r2, [r3, #0]
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	61fb      	str	r3, [r7, #28]
 8007b12:	4b28      	ldr	r3, [pc, #160]	; (8007bb4 <SEGGER_SYSVIEW_Start+0x168>)
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	61bb      	str	r3, [r7, #24]
 8007b18:	e00b      	b.n	8007b32 <SEGGER_SYSVIEW_Start+0xe6>
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	1c59      	adds	r1, r3, #1
 8007b22:	61f9      	str	r1, [r7, #28]
 8007b24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b28:	b2d2      	uxtb	r2, r2
 8007b2a:	701a      	strb	r2, [r3, #0]
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	09db      	lsrs	r3, r3, #7
 8007b30:	61bb      	str	r3, [r7, #24]
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	2b7f      	cmp	r3, #127	; 0x7f
 8007b36:	d8f0      	bhi.n	8007b1a <SEGGER_SYSVIEW_Start+0xce>
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	61fa      	str	r2, [r7, #28]
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	b2d2      	uxtb	r2, r2
 8007b42:	701a      	strb	r2, [r3, #0]
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	613b      	str	r3, [r7, #16]
 8007b50:	e00b      	b.n	8007b6a <SEGGER_SYSVIEW_Start+0x11e>
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	1c59      	adds	r1, r3, #1
 8007b5a:	6179      	str	r1, [r7, #20]
 8007b5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b60:	b2d2      	uxtb	r2, r2
 8007b62:	701a      	strb	r2, [r3, #0]
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	09db      	lsrs	r3, r3, #7
 8007b68:	613b      	str	r3, [r7, #16]
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8007b6e:	d8f0      	bhi.n	8007b52 <SEGGER_SYSVIEW_Start+0x106>
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	617a      	str	r2, [r7, #20]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	b2d2      	uxtb	r2, r2
 8007b7a:	701a      	strb	r2, [r3, #0]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007b80:	2218      	movs	r2, #24
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff fd19 	bl	80075bc <_SendPacket>
      RECORD_END();
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007b90:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <SEGGER_SYSVIEW_Start+0x168>)
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007b98:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <SEGGER_SYSVIEW_Start+0x168>)
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007b9e:	f000 f8e3 	bl	8007d68 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007ba2:	f000 f8cd 	bl	8007d40 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007ba6:	f000 fad9 	bl	800815c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007baa:	bf00      	nop
 8007bac:	3730      	adds	r7, #48	; 0x30
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000d00 	.word	0x20000d00
 8007bb8:	0800bab8 	.word	0x0800bab8
 8007bbc:	20000d30 	.word	0x20000d30

08007bc0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8007bca:	f04f 0120 	mov.w	r1, #32
 8007bce:	f381 8811 	msr	BASEPRI, r1
 8007bd2:	607b      	str	r3, [r7, #4]
 8007bd4:	480b      	ldr	r0, [pc, #44]	; (8007c04 <SEGGER_SYSVIEW_Stop+0x44>)
 8007bd6:	f7ff fc02 	bl	80073de <_PreparePacket>
 8007bda:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007bdc:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <SEGGER_SYSVIEW_Stop+0x48>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d007      	beq.n	8007bf4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007be4:	220b      	movs	r2, #11
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6838      	ldr	r0, [r7, #0]
 8007bea:	f7ff fce7 	bl	80075bc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007bee:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <SEGGER_SYSVIEW_Stop+0x48>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f383 8811 	msr	BASEPRI, r3
}
 8007bfa:	bf00      	nop
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	20000d30 	.word	0x20000d30
 8007c08:	20000d00 	.word	0x20000d00

08007c0c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08c      	sub	sp, #48	; 0x30
 8007c10:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007c12:	f3ef 8311 	mrs	r3, BASEPRI
 8007c16:	f04f 0120 	mov.w	r1, #32
 8007c1a:	f381 8811 	msr	BASEPRI, r1
 8007c1e:	60fb      	str	r3, [r7, #12]
 8007c20:	4845      	ldr	r0, [pc, #276]	; (8007d38 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007c22:	f7ff fbdc 	bl	80073de <_PreparePacket>
 8007c26:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c30:	4b42      	ldr	r3, [pc, #264]	; (8007d3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c36:	e00b      	b.n	8007c50 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3e:	1c59      	adds	r1, r3, #1
 8007c40:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007c42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]
 8007c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4c:	09db      	lsrs	r3, r3, #7
 8007c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	2b7f      	cmp	r3, #127	; 0x7f
 8007c54:	d8f0      	bhi.n	8007c38 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	627b      	str	r3, [r7, #36]	; 0x24
 8007c6a:	4b34      	ldr	r3, [pc, #208]	; (8007d3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	623b      	str	r3, [r7, #32]
 8007c70:	e00b      	b.n	8007c8a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	1c59      	adds	r1, r3, #1
 8007c7a:	6279      	str	r1, [r7, #36]	; 0x24
 8007c7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c80:	b2d2      	uxtb	r2, r2
 8007c82:	701a      	strb	r2, [r3, #0]
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	09db      	lsrs	r3, r3, #7
 8007c88:	623b      	str	r3, [r7, #32]
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	2b7f      	cmp	r3, #127	; 0x7f
 8007c8e:	d8f0      	bhi.n	8007c72 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	627a      	str	r2, [r7, #36]	; 0x24
 8007c96:	6a3a      	ldr	r2, [r7, #32]
 8007c98:	b2d2      	uxtb	r2, r2
 8007c9a:	701a      	strb	r2, [r3, #0]
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	61fb      	str	r3, [r7, #28]
 8007ca4:	4b25      	ldr	r3, [pc, #148]	; (8007d3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	61bb      	str	r3, [r7, #24]
 8007caa:	e00b      	b.n	8007cc4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	1c59      	adds	r1, r3, #1
 8007cb4:	61f9      	str	r1, [r7, #28]
 8007cb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cba:	b2d2      	uxtb	r2, r2
 8007cbc:	701a      	strb	r2, [r3, #0]
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	09db      	lsrs	r3, r3, #7
 8007cc2:	61bb      	str	r3, [r7, #24]
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8007cc8:	d8f0      	bhi.n	8007cac <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	61fa      	str	r2, [r7, #28]
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	b2d2      	uxtb	r2, r2
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	613b      	str	r3, [r7, #16]
 8007ce2:	e00b      	b.n	8007cfc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	1c59      	adds	r1, r3, #1
 8007cec:	6179      	str	r1, [r7, #20]
 8007cee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cf2:	b2d2      	uxtb	r2, r2
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	09db      	lsrs	r3, r3, #7
 8007cfa:	613b      	str	r3, [r7, #16]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8007d00:	d8f0      	bhi.n	8007ce4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	617a      	str	r2, [r7, #20]
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	b2d2      	uxtb	r2, r2
 8007d0c:	701a      	strb	r2, [r3, #0]
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007d12:	2218      	movs	r2, #24
 8007d14:	6879      	ldr	r1, [r7, #4]
 8007d16:	68b8      	ldr	r0, [r7, #8]
 8007d18:	f7ff fc50 	bl	80075bc <_SendPacket>
  RECORD_END();
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007d22:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007d2a:	4b04      	ldr	r3, [pc, #16]	; (8007d3c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	4798      	blx	r3
  }
}
 8007d30:	bf00      	nop
 8007d32:	3730      	adds	r7, #48	; 0x30
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	20000d30 	.word	0x20000d30
 8007d3c:	20000d00 	.word	0x20000d00

08007d40 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007d44:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d008      	beq.n	8007d5e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007d4c:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007d56:	4b03      	ldr	r3, [pc, #12]	; (8007d64 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	4798      	blx	r3
  }
}
 8007d5e:	bf00      	nop
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20000d00 	.word	0x20000d00

08007d68 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007d68:	b590      	push	{r4, r7, lr}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007d6e:	4b15      	ldr	r3, [pc, #84]	; (8007dc4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d01a      	beq.n	8007dac <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007d76:	4b13      	ldr	r3, [pc, #76]	; (8007dc4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d015      	beq.n	8007dac <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007d80:	4b10      	ldr	r3, [pc, #64]	; (8007dc4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4798      	blx	r3
 8007d88:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007d8c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d92:	f04f 0200 	mov.w	r2, #0
 8007d96:	f04f 0300 	mov.w	r3, #0
 8007d9a:	000a      	movs	r2, r1
 8007d9c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007d9e:	4613      	mov	r3, r2
 8007da0:	461a      	mov	r2, r3
 8007da2:	4621      	mov	r1, r4
 8007da4:	200d      	movs	r0, #13
 8007da6:	f7ff fd49 	bl	800783c <SEGGER_SYSVIEW_RecordU32x2>
 8007daa:	e006      	b.n	8007dba <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007dac:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4619      	mov	r1, r3
 8007db2:	200c      	movs	r0, #12
 8007db4:	f7ff fd06 	bl	80077c4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007db8:	bf00      	nop
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd90      	pop	{r4, r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20000d00 	.word	0x20000d00
 8007dc8:	e0001004 	.word	0xe0001004

08007dcc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8007dd6:	f04f 0120 	mov.w	r1, #32
 8007dda:	f381 8811 	msr	BASEPRI, r1
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	4819      	ldr	r0, [pc, #100]	; (8007e48 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007de2:	f7ff fafc 	bl	80073de <_PreparePacket>
 8007de6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007dec:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	617b      	str	r3, [r7, #20]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	613b      	str	r3, [r7, #16]
 8007dfe:	e00b      	b.n	8007e18 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	1c59      	adds	r1, r3, #1
 8007e08:	6179      	str	r1, [r7, #20]
 8007e0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	701a      	strb	r2, [r3, #0]
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	09db      	lsrs	r3, r3, #7
 8007e16:	613b      	str	r3, [r7, #16]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e1c:	d8f0      	bhi.n	8007e00 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	617a      	str	r2, [r7, #20]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	b2d2      	uxtb	r2, r2
 8007e28:	701a      	strb	r2, [r3, #0]
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007e2e:	2202      	movs	r2, #2
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	68b8      	ldr	r0, [r7, #8]
 8007e34:	f7ff fbc2 	bl	80075bc <_SendPacket>
  RECORD_END();
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f383 8811 	msr	BASEPRI, r3
}
 8007e3e:	bf00      	nop
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000d30 	.word	0x20000d30
 8007e4c:	e000ed04 	.word	0xe000ed04

08007e50 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007e56:	f3ef 8311 	mrs	r3, BASEPRI
 8007e5a:	f04f 0120 	mov.w	r1, #32
 8007e5e:	f381 8811 	msr	BASEPRI, r1
 8007e62:	607b      	str	r3, [r7, #4]
 8007e64:	4807      	ldr	r0, [pc, #28]	; (8007e84 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007e66:	f7ff faba 	bl	80073de <_PreparePacket>
 8007e6a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007e6c:	2203      	movs	r2, #3
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6838      	ldr	r0, [r7, #0]
 8007e72:	f7ff fba3 	bl	80075bc <_SendPacket>
  RECORD_END();
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f383 8811 	msr	BASEPRI, r3
}
 8007e7c:	bf00      	nop
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	20000d30 	.word	0x20000d30

08007e88 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007e8e:	f3ef 8311 	mrs	r3, BASEPRI
 8007e92:	f04f 0120 	mov.w	r1, #32
 8007e96:	f381 8811 	msr	BASEPRI, r1
 8007e9a:	607b      	str	r3, [r7, #4]
 8007e9c:	4807      	ldr	r0, [pc, #28]	; (8007ebc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007e9e:	f7ff fa9e 	bl	80073de <_PreparePacket>
 8007ea2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007ea4:	2212      	movs	r2, #18
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6838      	ldr	r0, [r7, #0]
 8007eaa:	f7ff fb87 	bl	80075bc <_SendPacket>
  RECORD_END();
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f383 8811 	msr	BASEPRI, r3
}
 8007eb4:	bf00      	nop
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	20000d30 	.word	0x20000d30

08007ec0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007ec6:	f3ef 8311 	mrs	r3, BASEPRI
 8007eca:	f04f 0120 	mov.w	r1, #32
 8007ece:	f381 8811 	msr	BASEPRI, r1
 8007ed2:	607b      	str	r3, [r7, #4]
 8007ed4:	4807      	ldr	r0, [pc, #28]	; (8007ef4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007ed6:	f7ff fa82 	bl	80073de <_PreparePacket>
 8007eda:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007edc:	2211      	movs	r2, #17
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6838      	ldr	r0, [r7, #0]
 8007ee2:	f7ff fb6b 	bl	80075bc <_SendPacket>
  RECORD_END();
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f383 8811 	msr	BASEPRI, r3
}
 8007eec:	bf00      	nop
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	20000d30 	.word	0x20000d30

08007ef8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007f00:	f3ef 8311 	mrs	r3, BASEPRI
 8007f04:	f04f 0120 	mov.w	r1, #32
 8007f08:	f381 8811 	msr	BASEPRI, r1
 8007f0c:	617b      	str	r3, [r7, #20]
 8007f0e:	4819      	ldr	r0, [pc, #100]	; (8007f74 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007f10:	f7ff fa65 	bl	80073de <_PreparePacket>
 8007f14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007f1a:	4b17      	ldr	r3, [pc, #92]	; (8007f78 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	61fb      	str	r3, [r7, #28]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	61bb      	str	r3, [r7, #24]
 8007f2c:	e00b      	b.n	8007f46 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	1c59      	adds	r1, r3, #1
 8007f36:	61f9      	str	r1, [r7, #28]
 8007f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f3c:	b2d2      	uxtb	r2, r2
 8007f3e:	701a      	strb	r2, [r3, #0]
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	09db      	lsrs	r3, r3, #7
 8007f44:	61bb      	str	r3, [r7, #24]
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	2b7f      	cmp	r3, #127	; 0x7f
 8007f4a:	d8f0      	bhi.n	8007f2e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	61fa      	str	r2, [r7, #28]
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	b2d2      	uxtb	r2, r2
 8007f56:	701a      	strb	r2, [r3, #0]
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007f5c:	2204      	movs	r2, #4
 8007f5e:	68f9      	ldr	r1, [r7, #12]
 8007f60:	6938      	ldr	r0, [r7, #16]
 8007f62:	f7ff fb2b 	bl	80075bc <_SendPacket>
  RECORD_END();
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f383 8811 	msr	BASEPRI, r3
}
 8007f6c:	bf00      	nop
 8007f6e:	3720      	adds	r7, #32
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	20000d30 	.word	0x20000d30
 8007f78:	20000d00 	.word	0x20000d00

08007f7c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b088      	sub	sp, #32
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007f84:	f3ef 8311 	mrs	r3, BASEPRI
 8007f88:	f04f 0120 	mov.w	r1, #32
 8007f8c:	f381 8811 	msr	BASEPRI, r1
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	4819      	ldr	r0, [pc, #100]	; (8007ff8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007f94:	f7ff fa23 	bl	80073de <_PreparePacket>
 8007f98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007f9e:	4b17      	ldr	r3, [pc, #92]	; (8007ffc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	61fb      	str	r3, [r7, #28]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	61bb      	str	r3, [r7, #24]
 8007fb0:	e00b      	b.n	8007fca <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	1c59      	adds	r1, r3, #1
 8007fba:	61f9      	str	r1, [r7, #28]
 8007fbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fc0:	b2d2      	uxtb	r2, r2
 8007fc2:	701a      	strb	r2, [r3, #0]
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	09db      	lsrs	r3, r3, #7
 8007fc8:	61bb      	str	r3, [r7, #24]
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	2b7f      	cmp	r3, #127	; 0x7f
 8007fce:	d8f0      	bhi.n	8007fb2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	61fa      	str	r2, [r7, #28]
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	b2d2      	uxtb	r2, r2
 8007fda:	701a      	strb	r2, [r3, #0]
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007fe0:	2206      	movs	r2, #6
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	6938      	ldr	r0, [r7, #16]
 8007fe6:	f7ff fae9 	bl	80075bc <_SendPacket>
  RECORD_END();
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f383 8811 	msr	BASEPRI, r3
}
 8007ff0:	bf00      	nop
 8007ff2:	3720      	adds	r7, #32
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	20000d30 	.word	0x20000d30
 8007ffc:	20000d00 	.word	0x20000d00

08008000 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	1ad3      	subs	r3, r2, r3
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	20000d00 	.word	0x20000d00

08008020 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008020:	b580      	push	{r7, lr}
 8008022:	b08c      	sub	sp, #48	; 0x30
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800802a:	4b3b      	ldr	r3, [pc, #236]	; (8008118 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d06d      	beq.n	800810e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8008032:	4b39      	ldr	r3, [pc, #228]	; (8008118 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008038:	2300      	movs	r3, #0
 800803a:	62bb      	str	r3, [r7, #40]	; 0x28
 800803c:	e008      	b.n	8008050 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800803e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	2b00      	cmp	r3, #0
 8008048:	d007      	beq.n	800805a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804c:	3301      	adds	r3, #1
 800804e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008054:	429a      	cmp	r2, r3
 8008056:	d3f2      	bcc.n	800803e <SEGGER_SYSVIEW_SendModule+0x1e>
 8008058:	e000      	b.n	800805c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800805a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d055      	beq.n	800810e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008062:	f3ef 8311 	mrs	r3, BASEPRI
 8008066:	f04f 0120 	mov.w	r1, #32
 800806a:	f381 8811 	msr	BASEPRI, r1
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	482a      	ldr	r0, [pc, #168]	; (800811c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008072:	f7ff f9b4 	bl	80073de <_PreparePacket>
 8008076:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	627b      	str	r3, [r7, #36]	; 0x24
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	623b      	str	r3, [r7, #32]
 8008084:	e00b      	b.n	800809e <SEGGER_SYSVIEW_SendModule+0x7e>
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	b2da      	uxtb	r2, r3
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	1c59      	adds	r1, r3, #1
 800808e:	6279      	str	r1, [r7, #36]	; 0x24
 8008090:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008094:	b2d2      	uxtb	r2, r2
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	09db      	lsrs	r3, r3, #7
 800809c:	623b      	str	r3, [r7, #32]
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	2b7f      	cmp	r3, #127	; 0x7f
 80080a2:	d8f0      	bhi.n	8008086 <SEGGER_SYSVIEW_SendModule+0x66>
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	627a      	str	r2, [r7, #36]	; 0x24
 80080aa:	6a3a      	ldr	r2, [r7, #32]
 80080ac:	b2d2      	uxtb	r2, r2
 80080ae:	701a      	strb	r2, [r3, #0]
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	61fb      	str	r3, [r7, #28]
 80080b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	61bb      	str	r3, [r7, #24]
 80080be:	e00b      	b.n	80080d8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	1c59      	adds	r1, r3, #1
 80080c8:	61f9      	str	r1, [r7, #28]
 80080ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080ce:	b2d2      	uxtb	r2, r2
 80080d0:	701a      	strb	r2, [r3, #0]
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	09db      	lsrs	r3, r3, #7
 80080d6:	61bb      	str	r3, [r7, #24]
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	2b7f      	cmp	r3, #127	; 0x7f
 80080dc:	d8f0      	bhi.n	80080c0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	1c5a      	adds	r2, r3, #1
 80080e2:	61fa      	str	r2, [r7, #28]
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	b2d2      	uxtb	r2, r2
 80080e8:	701a      	strb	r2, [r3, #0]
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80080ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2280      	movs	r2, #128	; 0x80
 80080f4:	4619      	mov	r1, r3
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f7ff f924 	bl	8007344 <_EncodeStr>
 80080fc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80080fe:	2216      	movs	r2, #22
 8008100:	68f9      	ldr	r1, [r7, #12]
 8008102:	6938      	ldr	r0, [r7, #16]
 8008104:	f7ff fa5a 	bl	80075bc <_SendPacket>
      RECORD_END();
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800810e:	bf00      	nop
 8008110:	3730      	adds	r7, #48	; 0x30
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20000d28 	.word	0x20000d28
 800811c:	20000d30 	.word	0x20000d30

08008120 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008126:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00f      	beq.n	800814e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800812e:	4b0a      	ldr	r3, [pc, #40]	; (8008158 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1f2      	bne.n	8008134 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800814e:	bf00      	nop
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	20000d28 	.word	0x20000d28

0800815c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008162:	f3ef 8311 	mrs	r3, BASEPRI
 8008166:	f04f 0120 	mov.w	r1, #32
 800816a:	f381 8811 	msr	BASEPRI, r1
 800816e:	60fb      	str	r3, [r7, #12]
 8008170:	4817      	ldr	r0, [pc, #92]	; (80081d0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008172:	f7ff f934 	bl	80073de <_PreparePacket>
 8008176:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	4b14      	ldr	r3, [pc, #80]	; (80081d4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	e00b      	b.n	80081a0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	b2da      	uxtb	r2, r3
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	1c59      	adds	r1, r3, #1
 8008190:	6179      	str	r1, [r7, #20]
 8008192:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008196:	b2d2      	uxtb	r2, r2
 8008198:	701a      	strb	r2, [r3, #0]
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	09db      	lsrs	r3, r3, #7
 800819e:	613b      	str	r3, [r7, #16]
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2b7f      	cmp	r3, #127	; 0x7f
 80081a4:	d8f0      	bhi.n	8008188 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	617a      	str	r2, [r7, #20]
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	b2d2      	uxtb	r2, r2
 80081b0:	701a      	strb	r2, [r3, #0]
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80081b6:	221b      	movs	r2, #27
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	68b8      	ldr	r0, [r7, #8]
 80081bc:	f7ff f9fe 	bl	80075bc <_SendPacket>
  RECORD_END();
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f383 8811 	msr	BASEPRI, r3
}
 80081c6:	bf00      	nop
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20000d30 	.word	0x20000d30
 80081d4:	20000d2c 	.word	0x20000d2c

080081d8 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	2000      	movs	r0, #0
 80081ec:	f7ff f884 	bl	80072f8 <SEGGER_RTT_Write>
  return len;
 80081f0:	683b      	ldr	r3, [r7, #0]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <__cvt>:
 80081fa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081fe:	ec55 4b10 	vmov	r4, r5, d0
 8008202:	2d00      	cmp	r5, #0
 8008204:	460e      	mov	r6, r1
 8008206:	4619      	mov	r1, r3
 8008208:	462b      	mov	r3, r5
 800820a:	bfbb      	ittet	lt
 800820c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008210:	461d      	movlt	r5, r3
 8008212:	2300      	movge	r3, #0
 8008214:	232d      	movlt	r3, #45	; 0x2d
 8008216:	700b      	strb	r3, [r1, #0]
 8008218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800821a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800821e:	4691      	mov	r9, r2
 8008220:	f023 0820 	bic.w	r8, r3, #32
 8008224:	bfbc      	itt	lt
 8008226:	4622      	movlt	r2, r4
 8008228:	4614      	movlt	r4, r2
 800822a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800822e:	d005      	beq.n	800823c <__cvt+0x42>
 8008230:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008234:	d100      	bne.n	8008238 <__cvt+0x3e>
 8008236:	3601      	adds	r6, #1
 8008238:	2102      	movs	r1, #2
 800823a:	e000      	b.n	800823e <__cvt+0x44>
 800823c:	2103      	movs	r1, #3
 800823e:	ab03      	add	r3, sp, #12
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	ab02      	add	r3, sp, #8
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	ec45 4b10 	vmov	d0, r4, r5
 800824a:	4653      	mov	r3, sl
 800824c:	4632      	mov	r2, r6
 800824e:	f000 fe47 	bl	8008ee0 <_dtoa_r>
 8008252:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008256:	4607      	mov	r7, r0
 8008258:	d102      	bne.n	8008260 <__cvt+0x66>
 800825a:	f019 0f01 	tst.w	r9, #1
 800825e:	d022      	beq.n	80082a6 <__cvt+0xac>
 8008260:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008264:	eb07 0906 	add.w	r9, r7, r6
 8008268:	d110      	bne.n	800828c <__cvt+0x92>
 800826a:	783b      	ldrb	r3, [r7, #0]
 800826c:	2b30      	cmp	r3, #48	; 0x30
 800826e:	d10a      	bne.n	8008286 <__cvt+0x8c>
 8008270:	2200      	movs	r2, #0
 8008272:	2300      	movs	r3, #0
 8008274:	4620      	mov	r0, r4
 8008276:	4629      	mov	r1, r5
 8008278:	f7f8 fc96 	bl	8000ba8 <__aeabi_dcmpeq>
 800827c:	b918      	cbnz	r0, 8008286 <__cvt+0x8c>
 800827e:	f1c6 0601 	rsb	r6, r6, #1
 8008282:	f8ca 6000 	str.w	r6, [sl]
 8008286:	f8da 3000 	ldr.w	r3, [sl]
 800828a:	4499      	add	r9, r3
 800828c:	2200      	movs	r2, #0
 800828e:	2300      	movs	r3, #0
 8008290:	4620      	mov	r0, r4
 8008292:	4629      	mov	r1, r5
 8008294:	f7f8 fc88 	bl	8000ba8 <__aeabi_dcmpeq>
 8008298:	b108      	cbz	r0, 800829e <__cvt+0xa4>
 800829a:	f8cd 900c 	str.w	r9, [sp, #12]
 800829e:	2230      	movs	r2, #48	; 0x30
 80082a0:	9b03      	ldr	r3, [sp, #12]
 80082a2:	454b      	cmp	r3, r9
 80082a4:	d307      	bcc.n	80082b6 <__cvt+0xbc>
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082aa:	1bdb      	subs	r3, r3, r7
 80082ac:	4638      	mov	r0, r7
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	b004      	add	sp, #16
 80082b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b6:	1c59      	adds	r1, r3, #1
 80082b8:	9103      	str	r1, [sp, #12]
 80082ba:	701a      	strb	r2, [r3, #0]
 80082bc:	e7f0      	b.n	80082a0 <__cvt+0xa6>

080082be <__exponent>:
 80082be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c0:	4603      	mov	r3, r0
 80082c2:	2900      	cmp	r1, #0
 80082c4:	bfb8      	it	lt
 80082c6:	4249      	neglt	r1, r1
 80082c8:	f803 2b02 	strb.w	r2, [r3], #2
 80082cc:	bfb4      	ite	lt
 80082ce:	222d      	movlt	r2, #45	; 0x2d
 80082d0:	222b      	movge	r2, #43	; 0x2b
 80082d2:	2909      	cmp	r1, #9
 80082d4:	7042      	strb	r2, [r0, #1]
 80082d6:	dd2a      	ble.n	800832e <__exponent+0x70>
 80082d8:	f10d 0207 	add.w	r2, sp, #7
 80082dc:	4617      	mov	r7, r2
 80082de:	260a      	movs	r6, #10
 80082e0:	4694      	mov	ip, r2
 80082e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80082e6:	fb06 1415 	mls	r4, r6, r5, r1
 80082ea:	3430      	adds	r4, #48	; 0x30
 80082ec:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80082f0:	460c      	mov	r4, r1
 80082f2:	2c63      	cmp	r4, #99	; 0x63
 80082f4:	f102 32ff 	add.w	r2, r2, #4294967295
 80082f8:	4629      	mov	r1, r5
 80082fa:	dcf1      	bgt.n	80082e0 <__exponent+0x22>
 80082fc:	3130      	adds	r1, #48	; 0x30
 80082fe:	f1ac 0402 	sub.w	r4, ip, #2
 8008302:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008306:	1c41      	adds	r1, r0, #1
 8008308:	4622      	mov	r2, r4
 800830a:	42ba      	cmp	r2, r7
 800830c:	d30a      	bcc.n	8008324 <__exponent+0x66>
 800830e:	f10d 0209 	add.w	r2, sp, #9
 8008312:	eba2 020c 	sub.w	r2, r2, ip
 8008316:	42bc      	cmp	r4, r7
 8008318:	bf88      	it	hi
 800831a:	2200      	movhi	r2, #0
 800831c:	4413      	add	r3, r2
 800831e:	1a18      	subs	r0, r3, r0
 8008320:	b003      	add	sp, #12
 8008322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008324:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008328:	f801 5f01 	strb.w	r5, [r1, #1]!
 800832c:	e7ed      	b.n	800830a <__exponent+0x4c>
 800832e:	2330      	movs	r3, #48	; 0x30
 8008330:	3130      	adds	r1, #48	; 0x30
 8008332:	7083      	strb	r3, [r0, #2]
 8008334:	70c1      	strb	r1, [r0, #3]
 8008336:	1d03      	adds	r3, r0, #4
 8008338:	e7f1      	b.n	800831e <__exponent+0x60>
	...

0800833c <_printf_float>:
 800833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008340:	ed2d 8b02 	vpush	{d8}
 8008344:	b08d      	sub	sp, #52	; 0x34
 8008346:	460c      	mov	r4, r1
 8008348:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800834c:	4616      	mov	r6, r2
 800834e:	461f      	mov	r7, r3
 8008350:	4605      	mov	r5, r0
 8008352:	f000 fcc7 	bl	8008ce4 <_localeconv_r>
 8008356:	f8d0 a000 	ldr.w	sl, [r0]
 800835a:	4650      	mov	r0, sl
 800835c:	f7f7 fff8 	bl	8000350 <strlen>
 8008360:	2300      	movs	r3, #0
 8008362:	930a      	str	r3, [sp, #40]	; 0x28
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	9305      	str	r3, [sp, #20]
 8008368:	f8d8 3000 	ldr.w	r3, [r8]
 800836c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008370:	3307      	adds	r3, #7
 8008372:	f023 0307 	bic.w	r3, r3, #7
 8008376:	f103 0208 	add.w	r2, r3, #8
 800837a:	f8c8 2000 	str.w	r2, [r8]
 800837e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008382:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008386:	9307      	str	r3, [sp, #28]
 8008388:	f8cd 8018 	str.w	r8, [sp, #24]
 800838c:	ee08 0a10 	vmov	s16, r0
 8008390:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008394:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008398:	4b9e      	ldr	r3, [pc, #632]	; (8008614 <_printf_float+0x2d8>)
 800839a:	f04f 32ff 	mov.w	r2, #4294967295
 800839e:	f7f8 fc35 	bl	8000c0c <__aeabi_dcmpun>
 80083a2:	bb88      	cbnz	r0, 8008408 <_printf_float+0xcc>
 80083a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083a8:	4b9a      	ldr	r3, [pc, #616]	; (8008614 <_printf_float+0x2d8>)
 80083aa:	f04f 32ff 	mov.w	r2, #4294967295
 80083ae:	f7f8 fc0f 	bl	8000bd0 <__aeabi_dcmple>
 80083b2:	bb48      	cbnz	r0, 8008408 <_printf_float+0xcc>
 80083b4:	2200      	movs	r2, #0
 80083b6:	2300      	movs	r3, #0
 80083b8:	4640      	mov	r0, r8
 80083ba:	4649      	mov	r1, r9
 80083bc:	f7f8 fbfe 	bl	8000bbc <__aeabi_dcmplt>
 80083c0:	b110      	cbz	r0, 80083c8 <_printf_float+0x8c>
 80083c2:	232d      	movs	r3, #45	; 0x2d
 80083c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083c8:	4a93      	ldr	r2, [pc, #588]	; (8008618 <_printf_float+0x2dc>)
 80083ca:	4b94      	ldr	r3, [pc, #592]	; (800861c <_printf_float+0x2e0>)
 80083cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083d0:	bf94      	ite	ls
 80083d2:	4690      	movls	r8, r2
 80083d4:	4698      	movhi	r8, r3
 80083d6:	2303      	movs	r3, #3
 80083d8:	6123      	str	r3, [r4, #16]
 80083da:	9b05      	ldr	r3, [sp, #20]
 80083dc:	f023 0304 	bic.w	r3, r3, #4
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	f04f 0900 	mov.w	r9, #0
 80083e6:	9700      	str	r7, [sp, #0]
 80083e8:	4633      	mov	r3, r6
 80083ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80083ec:	4621      	mov	r1, r4
 80083ee:	4628      	mov	r0, r5
 80083f0:	f000 f9da 	bl	80087a8 <_printf_common>
 80083f4:	3001      	adds	r0, #1
 80083f6:	f040 8090 	bne.w	800851a <_printf_float+0x1de>
 80083fa:	f04f 30ff 	mov.w	r0, #4294967295
 80083fe:	b00d      	add	sp, #52	; 0x34
 8008400:	ecbd 8b02 	vpop	{d8}
 8008404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008408:	4642      	mov	r2, r8
 800840a:	464b      	mov	r3, r9
 800840c:	4640      	mov	r0, r8
 800840e:	4649      	mov	r1, r9
 8008410:	f7f8 fbfc 	bl	8000c0c <__aeabi_dcmpun>
 8008414:	b140      	cbz	r0, 8008428 <_printf_float+0xec>
 8008416:	464b      	mov	r3, r9
 8008418:	2b00      	cmp	r3, #0
 800841a:	bfbc      	itt	lt
 800841c:	232d      	movlt	r3, #45	; 0x2d
 800841e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008422:	4a7f      	ldr	r2, [pc, #508]	; (8008620 <_printf_float+0x2e4>)
 8008424:	4b7f      	ldr	r3, [pc, #508]	; (8008624 <_printf_float+0x2e8>)
 8008426:	e7d1      	b.n	80083cc <_printf_float+0x90>
 8008428:	6863      	ldr	r3, [r4, #4]
 800842a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800842e:	9206      	str	r2, [sp, #24]
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	d13f      	bne.n	80084b4 <_printf_float+0x178>
 8008434:	2306      	movs	r3, #6
 8008436:	6063      	str	r3, [r4, #4]
 8008438:	9b05      	ldr	r3, [sp, #20]
 800843a:	6861      	ldr	r1, [r4, #4]
 800843c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008440:	2300      	movs	r3, #0
 8008442:	9303      	str	r3, [sp, #12]
 8008444:	ab0a      	add	r3, sp, #40	; 0x28
 8008446:	e9cd b301 	strd	fp, r3, [sp, #4]
 800844a:	ab09      	add	r3, sp, #36	; 0x24
 800844c:	ec49 8b10 	vmov	d0, r8, r9
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	6022      	str	r2, [r4, #0]
 8008454:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008458:	4628      	mov	r0, r5
 800845a:	f7ff fece 	bl	80081fa <__cvt>
 800845e:	9b06      	ldr	r3, [sp, #24]
 8008460:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008462:	2b47      	cmp	r3, #71	; 0x47
 8008464:	4680      	mov	r8, r0
 8008466:	d108      	bne.n	800847a <_printf_float+0x13e>
 8008468:	1cc8      	adds	r0, r1, #3
 800846a:	db02      	blt.n	8008472 <_printf_float+0x136>
 800846c:	6863      	ldr	r3, [r4, #4]
 800846e:	4299      	cmp	r1, r3
 8008470:	dd41      	ble.n	80084f6 <_printf_float+0x1ba>
 8008472:	f1ab 0302 	sub.w	r3, fp, #2
 8008476:	fa5f fb83 	uxtb.w	fp, r3
 800847a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800847e:	d820      	bhi.n	80084c2 <_printf_float+0x186>
 8008480:	3901      	subs	r1, #1
 8008482:	465a      	mov	r2, fp
 8008484:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008488:	9109      	str	r1, [sp, #36]	; 0x24
 800848a:	f7ff ff18 	bl	80082be <__exponent>
 800848e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008490:	1813      	adds	r3, r2, r0
 8008492:	2a01      	cmp	r2, #1
 8008494:	4681      	mov	r9, r0
 8008496:	6123      	str	r3, [r4, #16]
 8008498:	dc02      	bgt.n	80084a0 <_printf_float+0x164>
 800849a:	6822      	ldr	r2, [r4, #0]
 800849c:	07d2      	lsls	r2, r2, #31
 800849e:	d501      	bpl.n	80084a4 <_printf_float+0x168>
 80084a0:	3301      	adds	r3, #1
 80084a2:	6123      	str	r3, [r4, #16]
 80084a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d09c      	beq.n	80083e6 <_printf_float+0xaa>
 80084ac:	232d      	movs	r3, #45	; 0x2d
 80084ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b2:	e798      	b.n	80083e6 <_printf_float+0xaa>
 80084b4:	9a06      	ldr	r2, [sp, #24]
 80084b6:	2a47      	cmp	r2, #71	; 0x47
 80084b8:	d1be      	bne.n	8008438 <_printf_float+0xfc>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1bc      	bne.n	8008438 <_printf_float+0xfc>
 80084be:	2301      	movs	r3, #1
 80084c0:	e7b9      	b.n	8008436 <_printf_float+0xfa>
 80084c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80084c6:	d118      	bne.n	80084fa <_printf_float+0x1be>
 80084c8:	2900      	cmp	r1, #0
 80084ca:	6863      	ldr	r3, [r4, #4]
 80084cc:	dd0b      	ble.n	80084e6 <_printf_float+0x1aa>
 80084ce:	6121      	str	r1, [r4, #16]
 80084d0:	b913      	cbnz	r3, 80084d8 <_printf_float+0x19c>
 80084d2:	6822      	ldr	r2, [r4, #0]
 80084d4:	07d0      	lsls	r0, r2, #31
 80084d6:	d502      	bpl.n	80084de <_printf_float+0x1a2>
 80084d8:	3301      	adds	r3, #1
 80084da:	440b      	add	r3, r1
 80084dc:	6123      	str	r3, [r4, #16]
 80084de:	65a1      	str	r1, [r4, #88]	; 0x58
 80084e0:	f04f 0900 	mov.w	r9, #0
 80084e4:	e7de      	b.n	80084a4 <_printf_float+0x168>
 80084e6:	b913      	cbnz	r3, 80084ee <_printf_float+0x1b2>
 80084e8:	6822      	ldr	r2, [r4, #0]
 80084ea:	07d2      	lsls	r2, r2, #31
 80084ec:	d501      	bpl.n	80084f2 <_printf_float+0x1b6>
 80084ee:	3302      	adds	r3, #2
 80084f0:	e7f4      	b.n	80084dc <_printf_float+0x1a0>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e7f2      	b.n	80084dc <_printf_float+0x1a0>
 80084f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084fc:	4299      	cmp	r1, r3
 80084fe:	db05      	blt.n	800850c <_printf_float+0x1d0>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	6121      	str	r1, [r4, #16]
 8008504:	07d8      	lsls	r0, r3, #31
 8008506:	d5ea      	bpl.n	80084de <_printf_float+0x1a2>
 8008508:	1c4b      	adds	r3, r1, #1
 800850a:	e7e7      	b.n	80084dc <_printf_float+0x1a0>
 800850c:	2900      	cmp	r1, #0
 800850e:	bfd4      	ite	le
 8008510:	f1c1 0202 	rsble	r2, r1, #2
 8008514:	2201      	movgt	r2, #1
 8008516:	4413      	add	r3, r2
 8008518:	e7e0      	b.n	80084dc <_printf_float+0x1a0>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	055a      	lsls	r2, r3, #21
 800851e:	d407      	bmi.n	8008530 <_printf_float+0x1f4>
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	4642      	mov	r2, r8
 8008524:	4631      	mov	r1, r6
 8008526:	4628      	mov	r0, r5
 8008528:	47b8      	blx	r7
 800852a:	3001      	adds	r0, #1
 800852c:	d12c      	bne.n	8008588 <_printf_float+0x24c>
 800852e:	e764      	b.n	80083fa <_printf_float+0xbe>
 8008530:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008534:	f240 80e0 	bls.w	80086f8 <_printf_float+0x3bc>
 8008538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800853c:	2200      	movs	r2, #0
 800853e:	2300      	movs	r3, #0
 8008540:	f7f8 fb32 	bl	8000ba8 <__aeabi_dcmpeq>
 8008544:	2800      	cmp	r0, #0
 8008546:	d034      	beq.n	80085b2 <_printf_float+0x276>
 8008548:	4a37      	ldr	r2, [pc, #220]	; (8008628 <_printf_float+0x2ec>)
 800854a:	2301      	movs	r3, #1
 800854c:	4631      	mov	r1, r6
 800854e:	4628      	mov	r0, r5
 8008550:	47b8      	blx	r7
 8008552:	3001      	adds	r0, #1
 8008554:	f43f af51 	beq.w	80083fa <_printf_float+0xbe>
 8008558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800855c:	429a      	cmp	r2, r3
 800855e:	db02      	blt.n	8008566 <_printf_float+0x22a>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	07d8      	lsls	r0, r3, #31
 8008564:	d510      	bpl.n	8008588 <_printf_float+0x24c>
 8008566:	ee18 3a10 	vmov	r3, s16
 800856a:	4652      	mov	r2, sl
 800856c:	4631      	mov	r1, r6
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	f43f af41 	beq.w	80083fa <_printf_float+0xbe>
 8008578:	f04f 0800 	mov.w	r8, #0
 800857c:	f104 091a 	add.w	r9, r4, #26
 8008580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008582:	3b01      	subs	r3, #1
 8008584:	4543      	cmp	r3, r8
 8008586:	dc09      	bgt.n	800859c <_printf_float+0x260>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	079b      	lsls	r3, r3, #30
 800858c:	f100 8107 	bmi.w	800879e <_printf_float+0x462>
 8008590:	68e0      	ldr	r0, [r4, #12]
 8008592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008594:	4298      	cmp	r0, r3
 8008596:	bfb8      	it	lt
 8008598:	4618      	movlt	r0, r3
 800859a:	e730      	b.n	80083fe <_printf_float+0xc2>
 800859c:	2301      	movs	r3, #1
 800859e:	464a      	mov	r2, r9
 80085a0:	4631      	mov	r1, r6
 80085a2:	4628      	mov	r0, r5
 80085a4:	47b8      	blx	r7
 80085a6:	3001      	adds	r0, #1
 80085a8:	f43f af27 	beq.w	80083fa <_printf_float+0xbe>
 80085ac:	f108 0801 	add.w	r8, r8, #1
 80085b0:	e7e6      	b.n	8008580 <_printf_float+0x244>
 80085b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dc39      	bgt.n	800862c <_printf_float+0x2f0>
 80085b8:	4a1b      	ldr	r2, [pc, #108]	; (8008628 <_printf_float+0x2ec>)
 80085ba:	2301      	movs	r3, #1
 80085bc:	4631      	mov	r1, r6
 80085be:	4628      	mov	r0, r5
 80085c0:	47b8      	blx	r7
 80085c2:	3001      	adds	r0, #1
 80085c4:	f43f af19 	beq.w	80083fa <_printf_float+0xbe>
 80085c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80085cc:	4313      	orrs	r3, r2
 80085ce:	d102      	bne.n	80085d6 <_printf_float+0x29a>
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	07d9      	lsls	r1, r3, #31
 80085d4:	d5d8      	bpl.n	8008588 <_printf_float+0x24c>
 80085d6:	ee18 3a10 	vmov	r3, s16
 80085da:	4652      	mov	r2, sl
 80085dc:	4631      	mov	r1, r6
 80085de:	4628      	mov	r0, r5
 80085e0:	47b8      	blx	r7
 80085e2:	3001      	adds	r0, #1
 80085e4:	f43f af09 	beq.w	80083fa <_printf_float+0xbe>
 80085e8:	f04f 0900 	mov.w	r9, #0
 80085ec:	f104 0a1a 	add.w	sl, r4, #26
 80085f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f2:	425b      	negs	r3, r3
 80085f4:	454b      	cmp	r3, r9
 80085f6:	dc01      	bgt.n	80085fc <_printf_float+0x2c0>
 80085f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085fa:	e792      	b.n	8008522 <_printf_float+0x1e6>
 80085fc:	2301      	movs	r3, #1
 80085fe:	4652      	mov	r2, sl
 8008600:	4631      	mov	r1, r6
 8008602:	4628      	mov	r0, r5
 8008604:	47b8      	blx	r7
 8008606:	3001      	adds	r0, #1
 8008608:	f43f aef7 	beq.w	80083fa <_printf_float+0xbe>
 800860c:	f109 0901 	add.w	r9, r9, #1
 8008610:	e7ee      	b.n	80085f0 <_printf_float+0x2b4>
 8008612:	bf00      	nop
 8008614:	7fefffff 	.word	0x7fefffff
 8008618:	0800bbc3 	.word	0x0800bbc3
 800861c:	0800bbc7 	.word	0x0800bbc7
 8008620:	0800bbcb 	.word	0x0800bbcb
 8008624:	0800bbcf 	.word	0x0800bbcf
 8008628:	0800bbd3 	.word	0x0800bbd3
 800862c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800862e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008630:	429a      	cmp	r2, r3
 8008632:	bfa8      	it	ge
 8008634:	461a      	movge	r2, r3
 8008636:	2a00      	cmp	r2, #0
 8008638:	4691      	mov	r9, r2
 800863a:	dc37      	bgt.n	80086ac <_printf_float+0x370>
 800863c:	f04f 0b00 	mov.w	fp, #0
 8008640:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008644:	f104 021a 	add.w	r2, r4, #26
 8008648:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800864a:	9305      	str	r3, [sp, #20]
 800864c:	eba3 0309 	sub.w	r3, r3, r9
 8008650:	455b      	cmp	r3, fp
 8008652:	dc33      	bgt.n	80086bc <_printf_float+0x380>
 8008654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008658:	429a      	cmp	r2, r3
 800865a:	db3b      	blt.n	80086d4 <_printf_float+0x398>
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	07da      	lsls	r2, r3, #31
 8008660:	d438      	bmi.n	80086d4 <_printf_float+0x398>
 8008662:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008666:	eba2 0903 	sub.w	r9, r2, r3
 800866a:	9b05      	ldr	r3, [sp, #20]
 800866c:	1ad2      	subs	r2, r2, r3
 800866e:	4591      	cmp	r9, r2
 8008670:	bfa8      	it	ge
 8008672:	4691      	movge	r9, r2
 8008674:	f1b9 0f00 	cmp.w	r9, #0
 8008678:	dc35      	bgt.n	80086e6 <_printf_float+0x3aa>
 800867a:	f04f 0800 	mov.w	r8, #0
 800867e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008682:	f104 0a1a 	add.w	sl, r4, #26
 8008686:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800868a:	1a9b      	subs	r3, r3, r2
 800868c:	eba3 0309 	sub.w	r3, r3, r9
 8008690:	4543      	cmp	r3, r8
 8008692:	f77f af79 	ble.w	8008588 <_printf_float+0x24c>
 8008696:	2301      	movs	r3, #1
 8008698:	4652      	mov	r2, sl
 800869a:	4631      	mov	r1, r6
 800869c:	4628      	mov	r0, r5
 800869e:	47b8      	blx	r7
 80086a0:	3001      	adds	r0, #1
 80086a2:	f43f aeaa 	beq.w	80083fa <_printf_float+0xbe>
 80086a6:	f108 0801 	add.w	r8, r8, #1
 80086aa:	e7ec      	b.n	8008686 <_printf_float+0x34a>
 80086ac:	4613      	mov	r3, r2
 80086ae:	4631      	mov	r1, r6
 80086b0:	4642      	mov	r2, r8
 80086b2:	4628      	mov	r0, r5
 80086b4:	47b8      	blx	r7
 80086b6:	3001      	adds	r0, #1
 80086b8:	d1c0      	bne.n	800863c <_printf_float+0x300>
 80086ba:	e69e      	b.n	80083fa <_printf_float+0xbe>
 80086bc:	2301      	movs	r3, #1
 80086be:	4631      	mov	r1, r6
 80086c0:	4628      	mov	r0, r5
 80086c2:	9205      	str	r2, [sp, #20]
 80086c4:	47b8      	blx	r7
 80086c6:	3001      	adds	r0, #1
 80086c8:	f43f ae97 	beq.w	80083fa <_printf_float+0xbe>
 80086cc:	9a05      	ldr	r2, [sp, #20]
 80086ce:	f10b 0b01 	add.w	fp, fp, #1
 80086d2:	e7b9      	b.n	8008648 <_printf_float+0x30c>
 80086d4:	ee18 3a10 	vmov	r3, s16
 80086d8:	4652      	mov	r2, sl
 80086da:	4631      	mov	r1, r6
 80086dc:	4628      	mov	r0, r5
 80086de:	47b8      	blx	r7
 80086e0:	3001      	adds	r0, #1
 80086e2:	d1be      	bne.n	8008662 <_printf_float+0x326>
 80086e4:	e689      	b.n	80083fa <_printf_float+0xbe>
 80086e6:	9a05      	ldr	r2, [sp, #20]
 80086e8:	464b      	mov	r3, r9
 80086ea:	4442      	add	r2, r8
 80086ec:	4631      	mov	r1, r6
 80086ee:	4628      	mov	r0, r5
 80086f0:	47b8      	blx	r7
 80086f2:	3001      	adds	r0, #1
 80086f4:	d1c1      	bne.n	800867a <_printf_float+0x33e>
 80086f6:	e680      	b.n	80083fa <_printf_float+0xbe>
 80086f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086fa:	2a01      	cmp	r2, #1
 80086fc:	dc01      	bgt.n	8008702 <_printf_float+0x3c6>
 80086fe:	07db      	lsls	r3, r3, #31
 8008700:	d53a      	bpl.n	8008778 <_printf_float+0x43c>
 8008702:	2301      	movs	r3, #1
 8008704:	4642      	mov	r2, r8
 8008706:	4631      	mov	r1, r6
 8008708:	4628      	mov	r0, r5
 800870a:	47b8      	blx	r7
 800870c:	3001      	adds	r0, #1
 800870e:	f43f ae74 	beq.w	80083fa <_printf_float+0xbe>
 8008712:	ee18 3a10 	vmov	r3, s16
 8008716:	4652      	mov	r2, sl
 8008718:	4631      	mov	r1, r6
 800871a:	4628      	mov	r0, r5
 800871c:	47b8      	blx	r7
 800871e:	3001      	adds	r0, #1
 8008720:	f43f ae6b 	beq.w	80083fa <_printf_float+0xbe>
 8008724:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008728:	2200      	movs	r2, #0
 800872a:	2300      	movs	r3, #0
 800872c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008730:	f7f8 fa3a 	bl	8000ba8 <__aeabi_dcmpeq>
 8008734:	b9d8      	cbnz	r0, 800876e <_printf_float+0x432>
 8008736:	f10a 33ff 	add.w	r3, sl, #4294967295
 800873a:	f108 0201 	add.w	r2, r8, #1
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	d10e      	bne.n	8008766 <_printf_float+0x42a>
 8008748:	e657      	b.n	80083fa <_printf_float+0xbe>
 800874a:	2301      	movs	r3, #1
 800874c:	4652      	mov	r2, sl
 800874e:	4631      	mov	r1, r6
 8008750:	4628      	mov	r0, r5
 8008752:	47b8      	blx	r7
 8008754:	3001      	adds	r0, #1
 8008756:	f43f ae50 	beq.w	80083fa <_printf_float+0xbe>
 800875a:	f108 0801 	add.w	r8, r8, #1
 800875e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008760:	3b01      	subs	r3, #1
 8008762:	4543      	cmp	r3, r8
 8008764:	dcf1      	bgt.n	800874a <_printf_float+0x40e>
 8008766:	464b      	mov	r3, r9
 8008768:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800876c:	e6da      	b.n	8008524 <_printf_float+0x1e8>
 800876e:	f04f 0800 	mov.w	r8, #0
 8008772:	f104 0a1a 	add.w	sl, r4, #26
 8008776:	e7f2      	b.n	800875e <_printf_float+0x422>
 8008778:	2301      	movs	r3, #1
 800877a:	4642      	mov	r2, r8
 800877c:	e7df      	b.n	800873e <_printf_float+0x402>
 800877e:	2301      	movs	r3, #1
 8008780:	464a      	mov	r2, r9
 8008782:	4631      	mov	r1, r6
 8008784:	4628      	mov	r0, r5
 8008786:	47b8      	blx	r7
 8008788:	3001      	adds	r0, #1
 800878a:	f43f ae36 	beq.w	80083fa <_printf_float+0xbe>
 800878e:	f108 0801 	add.w	r8, r8, #1
 8008792:	68e3      	ldr	r3, [r4, #12]
 8008794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008796:	1a5b      	subs	r3, r3, r1
 8008798:	4543      	cmp	r3, r8
 800879a:	dcf0      	bgt.n	800877e <_printf_float+0x442>
 800879c:	e6f8      	b.n	8008590 <_printf_float+0x254>
 800879e:	f04f 0800 	mov.w	r8, #0
 80087a2:	f104 0919 	add.w	r9, r4, #25
 80087a6:	e7f4      	b.n	8008792 <_printf_float+0x456>

080087a8 <_printf_common>:
 80087a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ac:	4616      	mov	r6, r2
 80087ae:	4699      	mov	r9, r3
 80087b0:	688a      	ldr	r2, [r1, #8]
 80087b2:	690b      	ldr	r3, [r1, #16]
 80087b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087b8:	4293      	cmp	r3, r2
 80087ba:	bfb8      	it	lt
 80087bc:	4613      	movlt	r3, r2
 80087be:	6033      	str	r3, [r6, #0]
 80087c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087c4:	4607      	mov	r7, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	b10a      	cbz	r2, 80087ce <_printf_common+0x26>
 80087ca:	3301      	adds	r3, #1
 80087cc:	6033      	str	r3, [r6, #0]
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	0699      	lsls	r1, r3, #26
 80087d2:	bf42      	ittt	mi
 80087d4:	6833      	ldrmi	r3, [r6, #0]
 80087d6:	3302      	addmi	r3, #2
 80087d8:	6033      	strmi	r3, [r6, #0]
 80087da:	6825      	ldr	r5, [r4, #0]
 80087dc:	f015 0506 	ands.w	r5, r5, #6
 80087e0:	d106      	bne.n	80087f0 <_printf_common+0x48>
 80087e2:	f104 0a19 	add.w	sl, r4, #25
 80087e6:	68e3      	ldr	r3, [r4, #12]
 80087e8:	6832      	ldr	r2, [r6, #0]
 80087ea:	1a9b      	subs	r3, r3, r2
 80087ec:	42ab      	cmp	r3, r5
 80087ee:	dc26      	bgt.n	800883e <_printf_common+0x96>
 80087f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087f4:	1e13      	subs	r3, r2, #0
 80087f6:	6822      	ldr	r2, [r4, #0]
 80087f8:	bf18      	it	ne
 80087fa:	2301      	movne	r3, #1
 80087fc:	0692      	lsls	r2, r2, #26
 80087fe:	d42b      	bmi.n	8008858 <_printf_common+0xb0>
 8008800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008804:	4649      	mov	r1, r9
 8008806:	4638      	mov	r0, r7
 8008808:	47c0      	blx	r8
 800880a:	3001      	adds	r0, #1
 800880c:	d01e      	beq.n	800884c <_printf_common+0xa4>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	6922      	ldr	r2, [r4, #16]
 8008812:	f003 0306 	and.w	r3, r3, #6
 8008816:	2b04      	cmp	r3, #4
 8008818:	bf02      	ittt	eq
 800881a:	68e5      	ldreq	r5, [r4, #12]
 800881c:	6833      	ldreq	r3, [r6, #0]
 800881e:	1aed      	subeq	r5, r5, r3
 8008820:	68a3      	ldr	r3, [r4, #8]
 8008822:	bf0c      	ite	eq
 8008824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008828:	2500      	movne	r5, #0
 800882a:	4293      	cmp	r3, r2
 800882c:	bfc4      	itt	gt
 800882e:	1a9b      	subgt	r3, r3, r2
 8008830:	18ed      	addgt	r5, r5, r3
 8008832:	2600      	movs	r6, #0
 8008834:	341a      	adds	r4, #26
 8008836:	42b5      	cmp	r5, r6
 8008838:	d11a      	bne.n	8008870 <_printf_common+0xc8>
 800883a:	2000      	movs	r0, #0
 800883c:	e008      	b.n	8008850 <_printf_common+0xa8>
 800883e:	2301      	movs	r3, #1
 8008840:	4652      	mov	r2, sl
 8008842:	4649      	mov	r1, r9
 8008844:	4638      	mov	r0, r7
 8008846:	47c0      	blx	r8
 8008848:	3001      	adds	r0, #1
 800884a:	d103      	bne.n	8008854 <_printf_common+0xac>
 800884c:	f04f 30ff 	mov.w	r0, #4294967295
 8008850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008854:	3501      	adds	r5, #1
 8008856:	e7c6      	b.n	80087e6 <_printf_common+0x3e>
 8008858:	18e1      	adds	r1, r4, r3
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	2030      	movs	r0, #48	; 0x30
 800885e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008862:	4422      	add	r2, r4
 8008864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800886c:	3302      	adds	r3, #2
 800886e:	e7c7      	b.n	8008800 <_printf_common+0x58>
 8008870:	2301      	movs	r3, #1
 8008872:	4622      	mov	r2, r4
 8008874:	4649      	mov	r1, r9
 8008876:	4638      	mov	r0, r7
 8008878:	47c0      	blx	r8
 800887a:	3001      	adds	r0, #1
 800887c:	d0e6      	beq.n	800884c <_printf_common+0xa4>
 800887e:	3601      	adds	r6, #1
 8008880:	e7d9      	b.n	8008836 <_printf_common+0x8e>
	...

08008884 <_printf_i>:
 8008884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008888:	7e0f      	ldrb	r7, [r1, #24]
 800888a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800888c:	2f78      	cmp	r7, #120	; 0x78
 800888e:	4691      	mov	r9, r2
 8008890:	4680      	mov	r8, r0
 8008892:	460c      	mov	r4, r1
 8008894:	469a      	mov	sl, r3
 8008896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800889a:	d807      	bhi.n	80088ac <_printf_i+0x28>
 800889c:	2f62      	cmp	r7, #98	; 0x62
 800889e:	d80a      	bhi.n	80088b6 <_printf_i+0x32>
 80088a0:	2f00      	cmp	r7, #0
 80088a2:	f000 80d4 	beq.w	8008a4e <_printf_i+0x1ca>
 80088a6:	2f58      	cmp	r7, #88	; 0x58
 80088a8:	f000 80c0 	beq.w	8008a2c <_printf_i+0x1a8>
 80088ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088b4:	e03a      	b.n	800892c <_printf_i+0xa8>
 80088b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088ba:	2b15      	cmp	r3, #21
 80088bc:	d8f6      	bhi.n	80088ac <_printf_i+0x28>
 80088be:	a101      	add	r1, pc, #4	; (adr r1, 80088c4 <_printf_i+0x40>)
 80088c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088c4:	0800891d 	.word	0x0800891d
 80088c8:	08008931 	.word	0x08008931
 80088cc:	080088ad 	.word	0x080088ad
 80088d0:	080088ad 	.word	0x080088ad
 80088d4:	080088ad 	.word	0x080088ad
 80088d8:	080088ad 	.word	0x080088ad
 80088dc:	08008931 	.word	0x08008931
 80088e0:	080088ad 	.word	0x080088ad
 80088e4:	080088ad 	.word	0x080088ad
 80088e8:	080088ad 	.word	0x080088ad
 80088ec:	080088ad 	.word	0x080088ad
 80088f0:	08008a35 	.word	0x08008a35
 80088f4:	0800895d 	.word	0x0800895d
 80088f8:	080089ef 	.word	0x080089ef
 80088fc:	080088ad 	.word	0x080088ad
 8008900:	080088ad 	.word	0x080088ad
 8008904:	08008a57 	.word	0x08008a57
 8008908:	080088ad 	.word	0x080088ad
 800890c:	0800895d 	.word	0x0800895d
 8008910:	080088ad 	.word	0x080088ad
 8008914:	080088ad 	.word	0x080088ad
 8008918:	080089f7 	.word	0x080089f7
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	1d1a      	adds	r2, r3, #4
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	602a      	str	r2, [r5, #0]
 8008924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800892c:	2301      	movs	r3, #1
 800892e:	e09f      	b.n	8008a70 <_printf_i+0x1ec>
 8008930:	6820      	ldr	r0, [r4, #0]
 8008932:	682b      	ldr	r3, [r5, #0]
 8008934:	0607      	lsls	r7, r0, #24
 8008936:	f103 0104 	add.w	r1, r3, #4
 800893a:	6029      	str	r1, [r5, #0]
 800893c:	d501      	bpl.n	8008942 <_printf_i+0xbe>
 800893e:	681e      	ldr	r6, [r3, #0]
 8008940:	e003      	b.n	800894a <_printf_i+0xc6>
 8008942:	0646      	lsls	r6, r0, #25
 8008944:	d5fb      	bpl.n	800893e <_printf_i+0xba>
 8008946:	f9b3 6000 	ldrsh.w	r6, [r3]
 800894a:	2e00      	cmp	r6, #0
 800894c:	da03      	bge.n	8008956 <_printf_i+0xd2>
 800894e:	232d      	movs	r3, #45	; 0x2d
 8008950:	4276      	negs	r6, r6
 8008952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008956:	485a      	ldr	r0, [pc, #360]	; (8008ac0 <_printf_i+0x23c>)
 8008958:	230a      	movs	r3, #10
 800895a:	e012      	b.n	8008982 <_printf_i+0xfe>
 800895c:	682b      	ldr	r3, [r5, #0]
 800895e:	6820      	ldr	r0, [r4, #0]
 8008960:	1d19      	adds	r1, r3, #4
 8008962:	6029      	str	r1, [r5, #0]
 8008964:	0605      	lsls	r5, r0, #24
 8008966:	d501      	bpl.n	800896c <_printf_i+0xe8>
 8008968:	681e      	ldr	r6, [r3, #0]
 800896a:	e002      	b.n	8008972 <_printf_i+0xee>
 800896c:	0641      	lsls	r1, r0, #25
 800896e:	d5fb      	bpl.n	8008968 <_printf_i+0xe4>
 8008970:	881e      	ldrh	r6, [r3, #0]
 8008972:	4853      	ldr	r0, [pc, #332]	; (8008ac0 <_printf_i+0x23c>)
 8008974:	2f6f      	cmp	r7, #111	; 0x6f
 8008976:	bf0c      	ite	eq
 8008978:	2308      	moveq	r3, #8
 800897a:	230a      	movne	r3, #10
 800897c:	2100      	movs	r1, #0
 800897e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008982:	6865      	ldr	r5, [r4, #4]
 8008984:	60a5      	str	r5, [r4, #8]
 8008986:	2d00      	cmp	r5, #0
 8008988:	bfa2      	ittt	ge
 800898a:	6821      	ldrge	r1, [r4, #0]
 800898c:	f021 0104 	bicge.w	r1, r1, #4
 8008990:	6021      	strge	r1, [r4, #0]
 8008992:	b90e      	cbnz	r6, 8008998 <_printf_i+0x114>
 8008994:	2d00      	cmp	r5, #0
 8008996:	d04b      	beq.n	8008a30 <_printf_i+0x1ac>
 8008998:	4615      	mov	r5, r2
 800899a:	fbb6 f1f3 	udiv	r1, r6, r3
 800899e:	fb03 6711 	mls	r7, r3, r1, r6
 80089a2:	5dc7      	ldrb	r7, [r0, r7]
 80089a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089a8:	4637      	mov	r7, r6
 80089aa:	42bb      	cmp	r3, r7
 80089ac:	460e      	mov	r6, r1
 80089ae:	d9f4      	bls.n	800899a <_printf_i+0x116>
 80089b0:	2b08      	cmp	r3, #8
 80089b2:	d10b      	bne.n	80089cc <_printf_i+0x148>
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	07de      	lsls	r6, r3, #31
 80089b8:	d508      	bpl.n	80089cc <_printf_i+0x148>
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	6861      	ldr	r1, [r4, #4]
 80089be:	4299      	cmp	r1, r3
 80089c0:	bfde      	ittt	le
 80089c2:	2330      	movle	r3, #48	; 0x30
 80089c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089cc:	1b52      	subs	r2, r2, r5
 80089ce:	6122      	str	r2, [r4, #16]
 80089d0:	f8cd a000 	str.w	sl, [sp]
 80089d4:	464b      	mov	r3, r9
 80089d6:	aa03      	add	r2, sp, #12
 80089d8:	4621      	mov	r1, r4
 80089da:	4640      	mov	r0, r8
 80089dc:	f7ff fee4 	bl	80087a8 <_printf_common>
 80089e0:	3001      	adds	r0, #1
 80089e2:	d14a      	bne.n	8008a7a <_printf_i+0x1f6>
 80089e4:	f04f 30ff 	mov.w	r0, #4294967295
 80089e8:	b004      	add	sp, #16
 80089ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	f043 0320 	orr.w	r3, r3, #32
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	4833      	ldr	r0, [pc, #204]	; (8008ac4 <_printf_i+0x240>)
 80089f8:	2778      	movs	r7, #120	; 0x78
 80089fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	6829      	ldr	r1, [r5, #0]
 8008a02:	061f      	lsls	r7, r3, #24
 8008a04:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a08:	d402      	bmi.n	8008a10 <_printf_i+0x18c>
 8008a0a:	065f      	lsls	r7, r3, #25
 8008a0c:	bf48      	it	mi
 8008a0e:	b2b6      	uxthmi	r6, r6
 8008a10:	07df      	lsls	r7, r3, #31
 8008a12:	bf48      	it	mi
 8008a14:	f043 0320 	orrmi.w	r3, r3, #32
 8008a18:	6029      	str	r1, [r5, #0]
 8008a1a:	bf48      	it	mi
 8008a1c:	6023      	strmi	r3, [r4, #0]
 8008a1e:	b91e      	cbnz	r6, 8008a28 <_printf_i+0x1a4>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	f023 0320 	bic.w	r3, r3, #32
 8008a26:	6023      	str	r3, [r4, #0]
 8008a28:	2310      	movs	r3, #16
 8008a2a:	e7a7      	b.n	800897c <_printf_i+0xf8>
 8008a2c:	4824      	ldr	r0, [pc, #144]	; (8008ac0 <_printf_i+0x23c>)
 8008a2e:	e7e4      	b.n	80089fa <_printf_i+0x176>
 8008a30:	4615      	mov	r5, r2
 8008a32:	e7bd      	b.n	80089b0 <_printf_i+0x12c>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	6826      	ldr	r6, [r4, #0]
 8008a38:	6961      	ldr	r1, [r4, #20]
 8008a3a:	1d18      	adds	r0, r3, #4
 8008a3c:	6028      	str	r0, [r5, #0]
 8008a3e:	0635      	lsls	r5, r6, #24
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	d501      	bpl.n	8008a48 <_printf_i+0x1c4>
 8008a44:	6019      	str	r1, [r3, #0]
 8008a46:	e002      	b.n	8008a4e <_printf_i+0x1ca>
 8008a48:	0670      	lsls	r0, r6, #25
 8008a4a:	d5fb      	bpl.n	8008a44 <_printf_i+0x1c0>
 8008a4c:	8019      	strh	r1, [r3, #0]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	6123      	str	r3, [r4, #16]
 8008a52:	4615      	mov	r5, r2
 8008a54:	e7bc      	b.n	80089d0 <_printf_i+0x14c>
 8008a56:	682b      	ldr	r3, [r5, #0]
 8008a58:	1d1a      	adds	r2, r3, #4
 8008a5a:	602a      	str	r2, [r5, #0]
 8008a5c:	681d      	ldr	r5, [r3, #0]
 8008a5e:	6862      	ldr	r2, [r4, #4]
 8008a60:	2100      	movs	r1, #0
 8008a62:	4628      	mov	r0, r5
 8008a64:	f7f7 fc24 	bl	80002b0 <memchr>
 8008a68:	b108      	cbz	r0, 8008a6e <_printf_i+0x1ea>
 8008a6a:	1b40      	subs	r0, r0, r5
 8008a6c:	6060      	str	r0, [r4, #4]
 8008a6e:	6863      	ldr	r3, [r4, #4]
 8008a70:	6123      	str	r3, [r4, #16]
 8008a72:	2300      	movs	r3, #0
 8008a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a78:	e7aa      	b.n	80089d0 <_printf_i+0x14c>
 8008a7a:	6923      	ldr	r3, [r4, #16]
 8008a7c:	462a      	mov	r2, r5
 8008a7e:	4649      	mov	r1, r9
 8008a80:	4640      	mov	r0, r8
 8008a82:	47d0      	blx	sl
 8008a84:	3001      	adds	r0, #1
 8008a86:	d0ad      	beq.n	80089e4 <_printf_i+0x160>
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	079b      	lsls	r3, r3, #30
 8008a8c:	d413      	bmi.n	8008ab6 <_printf_i+0x232>
 8008a8e:	68e0      	ldr	r0, [r4, #12]
 8008a90:	9b03      	ldr	r3, [sp, #12]
 8008a92:	4298      	cmp	r0, r3
 8008a94:	bfb8      	it	lt
 8008a96:	4618      	movlt	r0, r3
 8008a98:	e7a6      	b.n	80089e8 <_printf_i+0x164>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4632      	mov	r2, r6
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	47d0      	blx	sl
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d09d      	beq.n	80089e4 <_printf_i+0x160>
 8008aa8:	3501      	adds	r5, #1
 8008aaa:	68e3      	ldr	r3, [r4, #12]
 8008aac:	9903      	ldr	r1, [sp, #12]
 8008aae:	1a5b      	subs	r3, r3, r1
 8008ab0:	42ab      	cmp	r3, r5
 8008ab2:	dcf2      	bgt.n	8008a9a <_printf_i+0x216>
 8008ab4:	e7eb      	b.n	8008a8e <_printf_i+0x20a>
 8008ab6:	2500      	movs	r5, #0
 8008ab8:	f104 0619 	add.w	r6, r4, #25
 8008abc:	e7f5      	b.n	8008aaa <_printf_i+0x226>
 8008abe:	bf00      	nop
 8008ac0:	0800bbd5 	.word	0x0800bbd5
 8008ac4:	0800bbe6 	.word	0x0800bbe6

08008ac8 <std>:
 8008ac8:	2300      	movs	r3, #0
 8008aca:	b510      	push	{r4, lr}
 8008acc:	4604      	mov	r4, r0
 8008ace:	e9c0 3300 	strd	r3, r3, [r0]
 8008ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ad6:	6083      	str	r3, [r0, #8]
 8008ad8:	8181      	strh	r1, [r0, #12]
 8008ada:	6643      	str	r3, [r0, #100]	; 0x64
 8008adc:	81c2      	strh	r2, [r0, #14]
 8008ade:	6183      	str	r3, [r0, #24]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	2208      	movs	r2, #8
 8008ae4:	305c      	adds	r0, #92	; 0x5c
 8008ae6:	f000 f8f4 	bl	8008cd2 <memset>
 8008aea:	4b0d      	ldr	r3, [pc, #52]	; (8008b20 <std+0x58>)
 8008aec:	6263      	str	r3, [r4, #36]	; 0x24
 8008aee:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <std+0x5c>)
 8008af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008af2:	4b0d      	ldr	r3, [pc, #52]	; (8008b28 <std+0x60>)
 8008af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008af6:	4b0d      	ldr	r3, [pc, #52]	; (8008b2c <std+0x64>)
 8008af8:	6323      	str	r3, [r4, #48]	; 0x30
 8008afa:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <std+0x68>)
 8008afc:	6224      	str	r4, [r4, #32]
 8008afe:	429c      	cmp	r4, r3
 8008b00:	d006      	beq.n	8008b10 <std+0x48>
 8008b02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008b06:	4294      	cmp	r4, r2
 8008b08:	d002      	beq.n	8008b10 <std+0x48>
 8008b0a:	33d0      	adds	r3, #208	; 0xd0
 8008b0c:	429c      	cmp	r4, r3
 8008b0e:	d105      	bne.n	8008b1c <std+0x54>
 8008b10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b18:	f000 b946 	b.w	8008da8 <__retarget_lock_init_recursive>
 8008b1c:	bd10      	pop	{r4, pc}
 8008b1e:	bf00      	nop
 8008b20:	08008c4d 	.word	0x08008c4d
 8008b24:	08008c6f 	.word	0x08008c6f
 8008b28:	08008ca7 	.word	0x08008ca7
 8008b2c:	08008ccb 	.word	0x08008ccb
 8008b30:	20000e14 	.word	0x20000e14

08008b34 <stdio_exit_handler>:
 8008b34:	4a02      	ldr	r2, [pc, #8]	; (8008b40 <stdio_exit_handler+0xc>)
 8008b36:	4903      	ldr	r1, [pc, #12]	; (8008b44 <stdio_exit_handler+0x10>)
 8008b38:	4803      	ldr	r0, [pc, #12]	; (8008b48 <stdio_exit_handler+0x14>)
 8008b3a:	f000 b869 	b.w	8008c10 <_fwalk_sglue>
 8008b3e:	bf00      	nop
 8008b40:	2000000c 	.word	0x2000000c
 8008b44:	0800a509 	.word	0x0800a509
 8008b48:	20000184 	.word	0x20000184

08008b4c <cleanup_stdio>:
 8008b4c:	6841      	ldr	r1, [r0, #4]
 8008b4e:	4b0c      	ldr	r3, [pc, #48]	; (8008b80 <cleanup_stdio+0x34>)
 8008b50:	4299      	cmp	r1, r3
 8008b52:	b510      	push	{r4, lr}
 8008b54:	4604      	mov	r4, r0
 8008b56:	d001      	beq.n	8008b5c <cleanup_stdio+0x10>
 8008b58:	f001 fcd6 	bl	800a508 <_fflush_r>
 8008b5c:	68a1      	ldr	r1, [r4, #8]
 8008b5e:	4b09      	ldr	r3, [pc, #36]	; (8008b84 <cleanup_stdio+0x38>)
 8008b60:	4299      	cmp	r1, r3
 8008b62:	d002      	beq.n	8008b6a <cleanup_stdio+0x1e>
 8008b64:	4620      	mov	r0, r4
 8008b66:	f001 fccf 	bl	800a508 <_fflush_r>
 8008b6a:	68e1      	ldr	r1, [r4, #12]
 8008b6c:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <cleanup_stdio+0x3c>)
 8008b6e:	4299      	cmp	r1, r3
 8008b70:	d004      	beq.n	8008b7c <cleanup_stdio+0x30>
 8008b72:	4620      	mov	r0, r4
 8008b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b78:	f001 bcc6 	b.w	800a508 <_fflush_r>
 8008b7c:	bd10      	pop	{r4, pc}
 8008b7e:	bf00      	nop
 8008b80:	20000e14 	.word	0x20000e14
 8008b84:	20000e7c 	.word	0x20000e7c
 8008b88:	20000ee4 	.word	0x20000ee4

08008b8c <global_stdio_init.part.0>:
 8008b8c:	b510      	push	{r4, lr}
 8008b8e:	4b0b      	ldr	r3, [pc, #44]	; (8008bbc <global_stdio_init.part.0+0x30>)
 8008b90:	4c0b      	ldr	r4, [pc, #44]	; (8008bc0 <global_stdio_init.part.0+0x34>)
 8008b92:	4a0c      	ldr	r2, [pc, #48]	; (8008bc4 <global_stdio_init.part.0+0x38>)
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	4620      	mov	r0, r4
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2104      	movs	r1, #4
 8008b9c:	f7ff ff94 	bl	8008ac8 <std>
 8008ba0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	2109      	movs	r1, #9
 8008ba8:	f7ff ff8e 	bl	8008ac8 <std>
 8008bac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bb6:	2112      	movs	r1, #18
 8008bb8:	f7ff bf86 	b.w	8008ac8 <std>
 8008bbc:	20000f4c 	.word	0x20000f4c
 8008bc0:	20000e14 	.word	0x20000e14
 8008bc4:	08008b35 	.word	0x08008b35

08008bc8 <__sfp_lock_acquire>:
 8008bc8:	4801      	ldr	r0, [pc, #4]	; (8008bd0 <__sfp_lock_acquire+0x8>)
 8008bca:	f000 b8ee 	b.w	8008daa <__retarget_lock_acquire_recursive>
 8008bce:	bf00      	nop
 8008bd0:	20000f55 	.word	0x20000f55

08008bd4 <__sfp_lock_release>:
 8008bd4:	4801      	ldr	r0, [pc, #4]	; (8008bdc <__sfp_lock_release+0x8>)
 8008bd6:	f000 b8e9 	b.w	8008dac <__retarget_lock_release_recursive>
 8008bda:	bf00      	nop
 8008bdc:	20000f55 	.word	0x20000f55

08008be0 <__sinit>:
 8008be0:	b510      	push	{r4, lr}
 8008be2:	4604      	mov	r4, r0
 8008be4:	f7ff fff0 	bl	8008bc8 <__sfp_lock_acquire>
 8008be8:	6a23      	ldr	r3, [r4, #32]
 8008bea:	b11b      	cbz	r3, 8008bf4 <__sinit+0x14>
 8008bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bf0:	f7ff bff0 	b.w	8008bd4 <__sfp_lock_release>
 8008bf4:	4b04      	ldr	r3, [pc, #16]	; (8008c08 <__sinit+0x28>)
 8008bf6:	6223      	str	r3, [r4, #32]
 8008bf8:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <__sinit+0x2c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1f5      	bne.n	8008bec <__sinit+0xc>
 8008c00:	f7ff ffc4 	bl	8008b8c <global_stdio_init.part.0>
 8008c04:	e7f2      	b.n	8008bec <__sinit+0xc>
 8008c06:	bf00      	nop
 8008c08:	08008b4d 	.word	0x08008b4d
 8008c0c:	20000f4c 	.word	0x20000f4c

08008c10 <_fwalk_sglue>:
 8008c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c14:	4607      	mov	r7, r0
 8008c16:	4688      	mov	r8, r1
 8008c18:	4614      	mov	r4, r2
 8008c1a:	2600      	movs	r6, #0
 8008c1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c20:	f1b9 0901 	subs.w	r9, r9, #1
 8008c24:	d505      	bpl.n	8008c32 <_fwalk_sglue+0x22>
 8008c26:	6824      	ldr	r4, [r4, #0]
 8008c28:	2c00      	cmp	r4, #0
 8008c2a:	d1f7      	bne.n	8008c1c <_fwalk_sglue+0xc>
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c32:	89ab      	ldrh	r3, [r5, #12]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d907      	bls.n	8008c48 <_fwalk_sglue+0x38>
 8008c38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	d003      	beq.n	8008c48 <_fwalk_sglue+0x38>
 8008c40:	4629      	mov	r1, r5
 8008c42:	4638      	mov	r0, r7
 8008c44:	47c0      	blx	r8
 8008c46:	4306      	orrs	r6, r0
 8008c48:	3568      	adds	r5, #104	; 0x68
 8008c4a:	e7e9      	b.n	8008c20 <_fwalk_sglue+0x10>

08008c4c <__sread>:
 8008c4c:	b510      	push	{r4, lr}
 8008c4e:	460c      	mov	r4, r1
 8008c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c54:	f000 f86c 	bl	8008d30 <_read_r>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	bfab      	itete	ge
 8008c5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c60:	181b      	addge	r3, r3, r0
 8008c62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c66:	bfac      	ite	ge
 8008c68:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c6a:	81a3      	strhlt	r3, [r4, #12]
 8008c6c:	bd10      	pop	{r4, pc}

08008c6e <__swrite>:
 8008c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c72:	461f      	mov	r7, r3
 8008c74:	898b      	ldrh	r3, [r1, #12]
 8008c76:	05db      	lsls	r3, r3, #23
 8008c78:	4605      	mov	r5, r0
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	4616      	mov	r6, r2
 8008c7e:	d505      	bpl.n	8008c8c <__swrite+0x1e>
 8008c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c84:	2302      	movs	r3, #2
 8008c86:	2200      	movs	r2, #0
 8008c88:	f000 f840 	bl	8008d0c <_lseek_r>
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	4632      	mov	r2, r6
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca2:	f7ff ba99 	b.w	80081d8 <_write_r>

08008ca6 <__sseek>:
 8008ca6:	b510      	push	{r4, lr}
 8008ca8:	460c      	mov	r4, r1
 8008caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cae:	f000 f82d 	bl	8008d0c <_lseek_r>
 8008cb2:	1c43      	adds	r3, r0, #1
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	bf15      	itete	ne
 8008cb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cc2:	81a3      	strheq	r3, [r4, #12]
 8008cc4:	bf18      	it	ne
 8008cc6:	81a3      	strhne	r3, [r4, #12]
 8008cc8:	bd10      	pop	{r4, pc}

08008cca <__sclose>:
 8008cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cce:	f000 b80d 	b.w	8008cec <_close_r>

08008cd2 <memset>:
 8008cd2:	4402      	add	r2, r0
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d100      	bne.n	8008cdc <memset+0xa>
 8008cda:	4770      	bx	lr
 8008cdc:	f803 1b01 	strb.w	r1, [r3], #1
 8008ce0:	e7f9      	b.n	8008cd6 <memset+0x4>
	...

08008ce4 <_localeconv_r>:
 8008ce4:	4800      	ldr	r0, [pc, #0]	; (8008ce8 <_localeconv_r+0x4>)
 8008ce6:	4770      	bx	lr
 8008ce8:	20000108 	.word	0x20000108

08008cec <_close_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d06      	ldr	r5, [pc, #24]	; (8008d08 <_close_r+0x1c>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	f7f9 fcab 	bl	8002652 <_close>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_close_r+0x1a>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_close_r+0x1a>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	20000f50 	.word	0x20000f50

08008d0c <_lseek_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d07      	ldr	r5, [pc, #28]	; (8008d2c <_lseek_r+0x20>)
 8008d10:	4604      	mov	r4, r0
 8008d12:	4608      	mov	r0, r1
 8008d14:	4611      	mov	r1, r2
 8008d16:	2200      	movs	r2, #0
 8008d18:	602a      	str	r2, [r5, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f7f9 fcc0 	bl	80026a0 <_lseek>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_lseek_r+0x1e>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_lseek_r+0x1e>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	20000f50 	.word	0x20000f50

08008d30 <_read_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4d07      	ldr	r5, [pc, #28]	; (8008d50 <_read_r+0x20>)
 8008d34:	4604      	mov	r4, r0
 8008d36:	4608      	mov	r0, r1
 8008d38:	4611      	mov	r1, r2
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	602a      	str	r2, [r5, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	f7f9 fc6a 	bl	8002618 <_read>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d102      	bne.n	8008d4e <_read_r+0x1e>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <_read_r+0x1e>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	20000f50 	.word	0x20000f50

08008d54 <__errno>:
 8008d54:	4b01      	ldr	r3, [pc, #4]	; (8008d5c <__errno+0x8>)
 8008d56:	6818      	ldr	r0, [r3, #0]
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	200001d0 	.word	0x200001d0

08008d60 <__libc_init_array>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	4d0d      	ldr	r5, [pc, #52]	; (8008d98 <__libc_init_array+0x38>)
 8008d64:	4c0d      	ldr	r4, [pc, #52]	; (8008d9c <__libc_init_array+0x3c>)
 8008d66:	1b64      	subs	r4, r4, r5
 8008d68:	10a4      	asrs	r4, r4, #2
 8008d6a:	2600      	movs	r6, #0
 8008d6c:	42a6      	cmp	r6, r4
 8008d6e:	d109      	bne.n	8008d84 <__libc_init_array+0x24>
 8008d70:	4d0b      	ldr	r5, [pc, #44]	; (8008da0 <__libc_init_array+0x40>)
 8008d72:	4c0c      	ldr	r4, [pc, #48]	; (8008da4 <__libc_init_array+0x44>)
 8008d74:	f002 fe7c 	bl	800ba70 <_init>
 8008d78:	1b64      	subs	r4, r4, r5
 8008d7a:	10a4      	asrs	r4, r4, #2
 8008d7c:	2600      	movs	r6, #0
 8008d7e:	42a6      	cmp	r6, r4
 8008d80:	d105      	bne.n	8008d8e <__libc_init_array+0x2e>
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d88:	4798      	blx	r3
 8008d8a:	3601      	adds	r6, #1
 8008d8c:	e7ee      	b.n	8008d6c <__libc_init_array+0xc>
 8008d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d92:	4798      	blx	r3
 8008d94:	3601      	adds	r6, #1
 8008d96:	e7f2      	b.n	8008d7e <__libc_init_array+0x1e>
 8008d98:	0800be70 	.word	0x0800be70
 8008d9c:	0800be70 	.word	0x0800be70
 8008da0:	0800be70 	.word	0x0800be70
 8008da4:	0800be74 	.word	0x0800be74

08008da8 <__retarget_lock_init_recursive>:
 8008da8:	4770      	bx	lr

08008daa <__retarget_lock_acquire_recursive>:
 8008daa:	4770      	bx	lr

08008dac <__retarget_lock_release_recursive>:
 8008dac:	4770      	bx	lr

08008dae <memcpy>:
 8008dae:	440a      	add	r2, r1
 8008db0:	4291      	cmp	r1, r2
 8008db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008db6:	d100      	bne.n	8008dba <memcpy+0xc>
 8008db8:	4770      	bx	lr
 8008dba:	b510      	push	{r4, lr}
 8008dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dc4:	4291      	cmp	r1, r2
 8008dc6:	d1f9      	bne.n	8008dbc <memcpy+0xe>
 8008dc8:	bd10      	pop	{r4, pc}

08008dca <quorem>:
 8008dca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dce:	6903      	ldr	r3, [r0, #16]
 8008dd0:	690c      	ldr	r4, [r1, #16]
 8008dd2:	42a3      	cmp	r3, r4
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	db7e      	blt.n	8008ed6 <quorem+0x10c>
 8008dd8:	3c01      	subs	r4, #1
 8008dda:	f101 0814 	add.w	r8, r1, #20
 8008dde:	f100 0514 	add.w	r5, r0, #20
 8008de2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008dec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008df0:	3301      	adds	r3, #1
 8008df2:	429a      	cmp	r2, r3
 8008df4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008df8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008dfc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e00:	d331      	bcc.n	8008e66 <quorem+0x9c>
 8008e02:	f04f 0e00 	mov.w	lr, #0
 8008e06:	4640      	mov	r0, r8
 8008e08:	46ac      	mov	ip, r5
 8008e0a:	46f2      	mov	sl, lr
 8008e0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e10:	b293      	uxth	r3, r2
 8008e12:	fb06 e303 	mla	r3, r6, r3, lr
 8008e16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e1a:	0c1a      	lsrs	r2, r3, #16
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	ebaa 0303 	sub.w	r3, sl, r3
 8008e22:	f8dc a000 	ldr.w	sl, [ip]
 8008e26:	fa13 f38a 	uxtah	r3, r3, sl
 8008e2a:	fb06 220e 	mla	r2, r6, lr, r2
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	9b00      	ldr	r3, [sp, #0]
 8008e32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e36:	b292      	uxth	r2, r2
 8008e38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e40:	f8bd 3000 	ldrh.w	r3, [sp]
 8008e44:	4581      	cmp	r9, r0
 8008e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e4a:	f84c 3b04 	str.w	r3, [ip], #4
 8008e4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e52:	d2db      	bcs.n	8008e0c <quorem+0x42>
 8008e54:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e58:	b92b      	cbnz	r3, 8008e66 <quorem+0x9c>
 8008e5a:	9b01      	ldr	r3, [sp, #4]
 8008e5c:	3b04      	subs	r3, #4
 8008e5e:	429d      	cmp	r5, r3
 8008e60:	461a      	mov	r2, r3
 8008e62:	d32c      	bcc.n	8008ebe <quorem+0xf4>
 8008e64:	613c      	str	r4, [r7, #16]
 8008e66:	4638      	mov	r0, r7
 8008e68:	f001 f9ba 	bl	800a1e0 <__mcmp>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	db22      	blt.n	8008eb6 <quorem+0xec>
 8008e70:	3601      	adds	r6, #1
 8008e72:	4629      	mov	r1, r5
 8008e74:	2000      	movs	r0, #0
 8008e76:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e7a:	f8d1 c000 	ldr.w	ip, [r1]
 8008e7e:	b293      	uxth	r3, r2
 8008e80:	1ac3      	subs	r3, r0, r3
 8008e82:	0c12      	lsrs	r2, r2, #16
 8008e84:	fa13 f38c 	uxtah	r3, r3, ip
 8008e88:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008e8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e96:	45c1      	cmp	r9, r8
 8008e98:	f841 3b04 	str.w	r3, [r1], #4
 8008e9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ea0:	d2e9      	bcs.n	8008e76 <quorem+0xac>
 8008ea2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eaa:	b922      	cbnz	r2, 8008eb6 <quorem+0xec>
 8008eac:	3b04      	subs	r3, #4
 8008eae:	429d      	cmp	r5, r3
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	d30a      	bcc.n	8008eca <quorem+0x100>
 8008eb4:	613c      	str	r4, [r7, #16]
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	b003      	add	sp, #12
 8008eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebe:	6812      	ldr	r2, [r2, #0]
 8008ec0:	3b04      	subs	r3, #4
 8008ec2:	2a00      	cmp	r2, #0
 8008ec4:	d1ce      	bne.n	8008e64 <quorem+0x9a>
 8008ec6:	3c01      	subs	r4, #1
 8008ec8:	e7c9      	b.n	8008e5e <quorem+0x94>
 8008eca:	6812      	ldr	r2, [r2, #0]
 8008ecc:	3b04      	subs	r3, #4
 8008ece:	2a00      	cmp	r2, #0
 8008ed0:	d1f0      	bne.n	8008eb4 <quorem+0xea>
 8008ed2:	3c01      	subs	r4, #1
 8008ed4:	e7eb      	b.n	8008eae <quorem+0xe4>
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	e7ee      	b.n	8008eb8 <quorem+0xee>
 8008eda:	0000      	movs	r0, r0
 8008edc:	0000      	movs	r0, r0
	...

08008ee0 <_dtoa_r>:
 8008ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee4:	ed2d 8b04 	vpush	{d8-d9}
 8008ee8:	69c5      	ldr	r5, [r0, #28]
 8008eea:	b093      	sub	sp, #76	; 0x4c
 8008eec:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ef0:	ec57 6b10 	vmov	r6, r7, d0
 8008ef4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ef8:	9107      	str	r1, [sp, #28]
 8008efa:	4604      	mov	r4, r0
 8008efc:	920a      	str	r2, [sp, #40]	; 0x28
 8008efe:	930d      	str	r3, [sp, #52]	; 0x34
 8008f00:	b975      	cbnz	r5, 8008f20 <_dtoa_r+0x40>
 8008f02:	2010      	movs	r0, #16
 8008f04:	f000 fe2a 	bl	8009b5c <malloc>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	61e0      	str	r0, [r4, #28]
 8008f0c:	b920      	cbnz	r0, 8008f18 <_dtoa_r+0x38>
 8008f0e:	4bae      	ldr	r3, [pc, #696]	; (80091c8 <_dtoa_r+0x2e8>)
 8008f10:	21ef      	movs	r1, #239	; 0xef
 8008f12:	48ae      	ldr	r0, [pc, #696]	; (80091cc <_dtoa_r+0x2ec>)
 8008f14:	f001 fb30 	bl	800a578 <__assert_func>
 8008f18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f1c:	6005      	str	r5, [r0, #0]
 8008f1e:	60c5      	str	r5, [r0, #12]
 8008f20:	69e3      	ldr	r3, [r4, #28]
 8008f22:	6819      	ldr	r1, [r3, #0]
 8008f24:	b151      	cbz	r1, 8008f3c <_dtoa_r+0x5c>
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	604a      	str	r2, [r1, #4]
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4093      	lsls	r3, r2
 8008f2e:	608b      	str	r3, [r1, #8]
 8008f30:	4620      	mov	r0, r4
 8008f32:	f000 ff19 	bl	8009d68 <_Bfree>
 8008f36:	69e3      	ldr	r3, [r4, #28]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	601a      	str	r2, [r3, #0]
 8008f3c:	1e3b      	subs	r3, r7, #0
 8008f3e:	bfbb      	ittet	lt
 8008f40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f44:	9303      	strlt	r3, [sp, #12]
 8008f46:	2300      	movge	r3, #0
 8008f48:	2201      	movlt	r2, #1
 8008f4a:	bfac      	ite	ge
 8008f4c:	f8c8 3000 	strge.w	r3, [r8]
 8008f50:	f8c8 2000 	strlt.w	r2, [r8]
 8008f54:	4b9e      	ldr	r3, [pc, #632]	; (80091d0 <_dtoa_r+0x2f0>)
 8008f56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008f5a:	ea33 0308 	bics.w	r3, r3, r8
 8008f5e:	d11b      	bne.n	8008f98 <_dtoa_r+0xb8>
 8008f60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f62:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008f6c:	4333      	orrs	r3, r6
 8008f6e:	f000 8593 	beq.w	8009a98 <_dtoa_r+0xbb8>
 8008f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f74:	b963      	cbnz	r3, 8008f90 <_dtoa_r+0xb0>
 8008f76:	4b97      	ldr	r3, [pc, #604]	; (80091d4 <_dtoa_r+0x2f4>)
 8008f78:	e027      	b.n	8008fca <_dtoa_r+0xea>
 8008f7a:	4b97      	ldr	r3, [pc, #604]	; (80091d8 <_dtoa_r+0x2f8>)
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	3308      	adds	r3, #8
 8008f80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f82:	6013      	str	r3, [r2, #0]
 8008f84:	9800      	ldr	r0, [sp, #0]
 8008f86:	b013      	add	sp, #76	; 0x4c
 8008f88:	ecbd 8b04 	vpop	{d8-d9}
 8008f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f90:	4b90      	ldr	r3, [pc, #576]	; (80091d4 <_dtoa_r+0x2f4>)
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	3303      	adds	r3, #3
 8008f96:	e7f3      	b.n	8008f80 <_dtoa_r+0xa0>
 8008f98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	ec51 0b17 	vmov	r0, r1, d7
 8008fa2:	eeb0 8a47 	vmov.f32	s16, s14
 8008fa6:	eef0 8a67 	vmov.f32	s17, s15
 8008faa:	2300      	movs	r3, #0
 8008fac:	f7f7 fdfc 	bl	8000ba8 <__aeabi_dcmpeq>
 8008fb0:	4681      	mov	r9, r0
 8008fb2:	b160      	cbz	r0, 8008fce <_dtoa_r+0xee>
 8008fb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 8568 	beq.w	8009a92 <_dtoa_r+0xbb2>
 8008fc2:	4b86      	ldr	r3, [pc, #536]	; (80091dc <_dtoa_r+0x2fc>)
 8008fc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fc6:	6013      	str	r3, [r2, #0]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	e7da      	b.n	8008f84 <_dtoa_r+0xa4>
 8008fce:	aa10      	add	r2, sp, #64	; 0x40
 8008fd0:	a911      	add	r1, sp, #68	; 0x44
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	eeb0 0a48 	vmov.f32	s0, s16
 8008fd8:	eef0 0a68 	vmov.f32	s1, s17
 8008fdc:	f001 f9a6 	bl	800a32c <__d2b>
 8008fe0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008fe4:	4682      	mov	sl, r0
 8008fe6:	2d00      	cmp	r5, #0
 8008fe8:	d07f      	beq.n	80090ea <_dtoa_r+0x20a>
 8008fea:	ee18 3a90 	vmov	r3, s17
 8008fee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ff2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ff6:	ec51 0b18 	vmov	r0, r1, d8
 8008ffa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ffe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009002:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009006:	4619      	mov	r1, r3
 8009008:	2200      	movs	r2, #0
 800900a:	4b75      	ldr	r3, [pc, #468]	; (80091e0 <_dtoa_r+0x300>)
 800900c:	f7f7 f9ac 	bl	8000368 <__aeabi_dsub>
 8009010:	a367      	add	r3, pc, #412	; (adr r3, 80091b0 <_dtoa_r+0x2d0>)
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	f7f7 fb5f 	bl	80006d8 <__aeabi_dmul>
 800901a:	a367      	add	r3, pc, #412	; (adr r3, 80091b8 <_dtoa_r+0x2d8>)
 800901c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009020:	f7f7 f9a4 	bl	800036c <__adddf3>
 8009024:	4606      	mov	r6, r0
 8009026:	4628      	mov	r0, r5
 8009028:	460f      	mov	r7, r1
 800902a:	f7f7 faeb 	bl	8000604 <__aeabi_i2d>
 800902e:	a364      	add	r3, pc, #400	; (adr r3, 80091c0 <_dtoa_r+0x2e0>)
 8009030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009034:	f7f7 fb50 	bl	80006d8 <__aeabi_dmul>
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	4630      	mov	r0, r6
 800903e:	4639      	mov	r1, r7
 8009040:	f7f7 f994 	bl	800036c <__adddf3>
 8009044:	4606      	mov	r6, r0
 8009046:	460f      	mov	r7, r1
 8009048:	f7f7 fdf6 	bl	8000c38 <__aeabi_d2iz>
 800904c:	2200      	movs	r2, #0
 800904e:	4683      	mov	fp, r0
 8009050:	2300      	movs	r3, #0
 8009052:	4630      	mov	r0, r6
 8009054:	4639      	mov	r1, r7
 8009056:	f7f7 fdb1 	bl	8000bbc <__aeabi_dcmplt>
 800905a:	b148      	cbz	r0, 8009070 <_dtoa_r+0x190>
 800905c:	4658      	mov	r0, fp
 800905e:	f7f7 fad1 	bl	8000604 <__aeabi_i2d>
 8009062:	4632      	mov	r2, r6
 8009064:	463b      	mov	r3, r7
 8009066:	f7f7 fd9f 	bl	8000ba8 <__aeabi_dcmpeq>
 800906a:	b908      	cbnz	r0, 8009070 <_dtoa_r+0x190>
 800906c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009070:	f1bb 0f16 	cmp.w	fp, #22
 8009074:	d857      	bhi.n	8009126 <_dtoa_r+0x246>
 8009076:	4b5b      	ldr	r3, [pc, #364]	; (80091e4 <_dtoa_r+0x304>)
 8009078:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009080:	ec51 0b18 	vmov	r0, r1, d8
 8009084:	f7f7 fd9a 	bl	8000bbc <__aeabi_dcmplt>
 8009088:	2800      	cmp	r0, #0
 800908a:	d04e      	beq.n	800912a <_dtoa_r+0x24a>
 800908c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009090:	2300      	movs	r3, #0
 8009092:	930c      	str	r3, [sp, #48]	; 0x30
 8009094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009096:	1b5b      	subs	r3, r3, r5
 8009098:	1e5a      	subs	r2, r3, #1
 800909a:	bf45      	ittet	mi
 800909c:	f1c3 0301 	rsbmi	r3, r3, #1
 80090a0:	9305      	strmi	r3, [sp, #20]
 80090a2:	2300      	movpl	r3, #0
 80090a4:	2300      	movmi	r3, #0
 80090a6:	9206      	str	r2, [sp, #24]
 80090a8:	bf54      	ite	pl
 80090aa:	9305      	strpl	r3, [sp, #20]
 80090ac:	9306      	strmi	r3, [sp, #24]
 80090ae:	f1bb 0f00 	cmp.w	fp, #0
 80090b2:	db3c      	blt.n	800912e <_dtoa_r+0x24e>
 80090b4:	9b06      	ldr	r3, [sp, #24]
 80090b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80090ba:	445b      	add	r3, fp
 80090bc:	9306      	str	r3, [sp, #24]
 80090be:	2300      	movs	r3, #0
 80090c0:	9308      	str	r3, [sp, #32]
 80090c2:	9b07      	ldr	r3, [sp, #28]
 80090c4:	2b09      	cmp	r3, #9
 80090c6:	d868      	bhi.n	800919a <_dtoa_r+0x2ba>
 80090c8:	2b05      	cmp	r3, #5
 80090ca:	bfc4      	itt	gt
 80090cc:	3b04      	subgt	r3, #4
 80090ce:	9307      	strgt	r3, [sp, #28]
 80090d0:	9b07      	ldr	r3, [sp, #28]
 80090d2:	f1a3 0302 	sub.w	r3, r3, #2
 80090d6:	bfcc      	ite	gt
 80090d8:	2500      	movgt	r5, #0
 80090da:	2501      	movle	r5, #1
 80090dc:	2b03      	cmp	r3, #3
 80090de:	f200 8085 	bhi.w	80091ec <_dtoa_r+0x30c>
 80090e2:	e8df f003 	tbb	[pc, r3]
 80090e6:	3b2e      	.short	0x3b2e
 80090e8:	5839      	.short	0x5839
 80090ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80090ee:	441d      	add	r5, r3
 80090f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80090f4:	2b20      	cmp	r3, #32
 80090f6:	bfc1      	itttt	gt
 80090f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80090fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8009100:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009104:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009108:	bfd6      	itet	le
 800910a:	f1c3 0320 	rsble	r3, r3, #32
 800910e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009112:	fa06 f003 	lslle.w	r0, r6, r3
 8009116:	f7f7 fa65 	bl	80005e4 <__aeabi_ui2d>
 800911a:	2201      	movs	r2, #1
 800911c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009120:	3d01      	subs	r5, #1
 8009122:	920e      	str	r2, [sp, #56]	; 0x38
 8009124:	e76f      	b.n	8009006 <_dtoa_r+0x126>
 8009126:	2301      	movs	r3, #1
 8009128:	e7b3      	b.n	8009092 <_dtoa_r+0x1b2>
 800912a:	900c      	str	r0, [sp, #48]	; 0x30
 800912c:	e7b2      	b.n	8009094 <_dtoa_r+0x1b4>
 800912e:	9b05      	ldr	r3, [sp, #20]
 8009130:	eba3 030b 	sub.w	r3, r3, fp
 8009134:	9305      	str	r3, [sp, #20]
 8009136:	f1cb 0300 	rsb	r3, fp, #0
 800913a:	9308      	str	r3, [sp, #32]
 800913c:	2300      	movs	r3, #0
 800913e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009140:	e7bf      	b.n	80090c2 <_dtoa_r+0x1e2>
 8009142:	2300      	movs	r3, #0
 8009144:	9309      	str	r3, [sp, #36]	; 0x24
 8009146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009148:	2b00      	cmp	r3, #0
 800914a:	dc52      	bgt.n	80091f2 <_dtoa_r+0x312>
 800914c:	2301      	movs	r3, #1
 800914e:	9301      	str	r3, [sp, #4]
 8009150:	9304      	str	r3, [sp, #16]
 8009152:	461a      	mov	r2, r3
 8009154:	920a      	str	r2, [sp, #40]	; 0x28
 8009156:	e00b      	b.n	8009170 <_dtoa_r+0x290>
 8009158:	2301      	movs	r3, #1
 800915a:	e7f3      	b.n	8009144 <_dtoa_r+0x264>
 800915c:	2300      	movs	r3, #0
 800915e:	9309      	str	r3, [sp, #36]	; 0x24
 8009160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009162:	445b      	add	r3, fp
 8009164:	9301      	str	r3, [sp, #4]
 8009166:	3301      	adds	r3, #1
 8009168:	2b01      	cmp	r3, #1
 800916a:	9304      	str	r3, [sp, #16]
 800916c:	bfb8      	it	lt
 800916e:	2301      	movlt	r3, #1
 8009170:	69e0      	ldr	r0, [r4, #28]
 8009172:	2100      	movs	r1, #0
 8009174:	2204      	movs	r2, #4
 8009176:	f102 0614 	add.w	r6, r2, #20
 800917a:	429e      	cmp	r6, r3
 800917c:	d93d      	bls.n	80091fa <_dtoa_r+0x31a>
 800917e:	6041      	str	r1, [r0, #4]
 8009180:	4620      	mov	r0, r4
 8009182:	f000 fdb1 	bl	8009ce8 <_Balloc>
 8009186:	9000      	str	r0, [sp, #0]
 8009188:	2800      	cmp	r0, #0
 800918a:	d139      	bne.n	8009200 <_dtoa_r+0x320>
 800918c:	4b16      	ldr	r3, [pc, #88]	; (80091e8 <_dtoa_r+0x308>)
 800918e:	4602      	mov	r2, r0
 8009190:	f240 11af 	movw	r1, #431	; 0x1af
 8009194:	e6bd      	b.n	8008f12 <_dtoa_r+0x32>
 8009196:	2301      	movs	r3, #1
 8009198:	e7e1      	b.n	800915e <_dtoa_r+0x27e>
 800919a:	2501      	movs	r5, #1
 800919c:	2300      	movs	r3, #0
 800919e:	9307      	str	r3, [sp, #28]
 80091a0:	9509      	str	r5, [sp, #36]	; 0x24
 80091a2:	f04f 33ff 	mov.w	r3, #4294967295
 80091a6:	9301      	str	r3, [sp, #4]
 80091a8:	9304      	str	r3, [sp, #16]
 80091aa:	2200      	movs	r2, #0
 80091ac:	2312      	movs	r3, #18
 80091ae:	e7d1      	b.n	8009154 <_dtoa_r+0x274>
 80091b0:	636f4361 	.word	0x636f4361
 80091b4:	3fd287a7 	.word	0x3fd287a7
 80091b8:	8b60c8b3 	.word	0x8b60c8b3
 80091bc:	3fc68a28 	.word	0x3fc68a28
 80091c0:	509f79fb 	.word	0x509f79fb
 80091c4:	3fd34413 	.word	0x3fd34413
 80091c8:	0800bc0e 	.word	0x0800bc0e
 80091cc:	0800bc25 	.word	0x0800bc25
 80091d0:	7ff00000 	.word	0x7ff00000
 80091d4:	0800bc0a 	.word	0x0800bc0a
 80091d8:	0800bc01 	.word	0x0800bc01
 80091dc:	0800bbd4 	.word	0x0800bbd4
 80091e0:	3ff80000 	.word	0x3ff80000
 80091e4:	0800bd10 	.word	0x0800bd10
 80091e8:	0800bc7d 	.word	0x0800bc7d
 80091ec:	2301      	movs	r3, #1
 80091ee:	9309      	str	r3, [sp, #36]	; 0x24
 80091f0:	e7d7      	b.n	80091a2 <_dtoa_r+0x2c2>
 80091f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	9304      	str	r3, [sp, #16]
 80091f8:	e7ba      	b.n	8009170 <_dtoa_r+0x290>
 80091fa:	3101      	adds	r1, #1
 80091fc:	0052      	lsls	r2, r2, #1
 80091fe:	e7ba      	b.n	8009176 <_dtoa_r+0x296>
 8009200:	69e3      	ldr	r3, [r4, #28]
 8009202:	9a00      	ldr	r2, [sp, #0]
 8009204:	601a      	str	r2, [r3, #0]
 8009206:	9b04      	ldr	r3, [sp, #16]
 8009208:	2b0e      	cmp	r3, #14
 800920a:	f200 80a8 	bhi.w	800935e <_dtoa_r+0x47e>
 800920e:	2d00      	cmp	r5, #0
 8009210:	f000 80a5 	beq.w	800935e <_dtoa_r+0x47e>
 8009214:	f1bb 0f00 	cmp.w	fp, #0
 8009218:	dd38      	ble.n	800928c <_dtoa_r+0x3ac>
 800921a:	4bc0      	ldr	r3, [pc, #768]	; (800951c <_dtoa_r+0x63c>)
 800921c:	f00b 020f 	and.w	r2, fp, #15
 8009220:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009224:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009228:	e9d3 6700 	ldrd	r6, r7, [r3]
 800922c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009230:	d019      	beq.n	8009266 <_dtoa_r+0x386>
 8009232:	4bbb      	ldr	r3, [pc, #748]	; (8009520 <_dtoa_r+0x640>)
 8009234:	ec51 0b18 	vmov	r0, r1, d8
 8009238:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800923c:	f7f7 fb76 	bl	800092c <__aeabi_ddiv>
 8009240:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009244:	f008 080f 	and.w	r8, r8, #15
 8009248:	2503      	movs	r5, #3
 800924a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009520 <_dtoa_r+0x640>
 800924e:	f1b8 0f00 	cmp.w	r8, #0
 8009252:	d10a      	bne.n	800926a <_dtoa_r+0x38a>
 8009254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009258:	4632      	mov	r2, r6
 800925a:	463b      	mov	r3, r7
 800925c:	f7f7 fb66 	bl	800092c <__aeabi_ddiv>
 8009260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009264:	e02b      	b.n	80092be <_dtoa_r+0x3de>
 8009266:	2502      	movs	r5, #2
 8009268:	e7ef      	b.n	800924a <_dtoa_r+0x36a>
 800926a:	f018 0f01 	tst.w	r8, #1
 800926e:	d008      	beq.n	8009282 <_dtoa_r+0x3a2>
 8009270:	4630      	mov	r0, r6
 8009272:	4639      	mov	r1, r7
 8009274:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009278:	f7f7 fa2e 	bl	80006d8 <__aeabi_dmul>
 800927c:	3501      	adds	r5, #1
 800927e:	4606      	mov	r6, r0
 8009280:	460f      	mov	r7, r1
 8009282:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009286:	f109 0908 	add.w	r9, r9, #8
 800928a:	e7e0      	b.n	800924e <_dtoa_r+0x36e>
 800928c:	f000 809f 	beq.w	80093ce <_dtoa_r+0x4ee>
 8009290:	f1cb 0600 	rsb	r6, fp, #0
 8009294:	4ba1      	ldr	r3, [pc, #644]	; (800951c <_dtoa_r+0x63c>)
 8009296:	4fa2      	ldr	r7, [pc, #648]	; (8009520 <_dtoa_r+0x640>)
 8009298:	f006 020f 	and.w	r2, r6, #15
 800929c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a4:	ec51 0b18 	vmov	r0, r1, d8
 80092a8:	f7f7 fa16 	bl	80006d8 <__aeabi_dmul>
 80092ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092b0:	1136      	asrs	r6, r6, #4
 80092b2:	2300      	movs	r3, #0
 80092b4:	2502      	movs	r5, #2
 80092b6:	2e00      	cmp	r6, #0
 80092b8:	d17e      	bne.n	80093b8 <_dtoa_r+0x4d8>
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1d0      	bne.n	8009260 <_dtoa_r+0x380>
 80092be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f000 8084 	beq.w	80093d2 <_dtoa_r+0x4f2>
 80092ca:	4b96      	ldr	r3, [pc, #600]	; (8009524 <_dtoa_r+0x644>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	4640      	mov	r0, r8
 80092d0:	4649      	mov	r1, r9
 80092d2:	f7f7 fc73 	bl	8000bbc <__aeabi_dcmplt>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d07b      	beq.n	80093d2 <_dtoa_r+0x4f2>
 80092da:	9b04      	ldr	r3, [sp, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d078      	beq.n	80093d2 <_dtoa_r+0x4f2>
 80092e0:	9b01      	ldr	r3, [sp, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	dd39      	ble.n	800935a <_dtoa_r+0x47a>
 80092e6:	4b90      	ldr	r3, [pc, #576]	; (8009528 <_dtoa_r+0x648>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	4640      	mov	r0, r8
 80092ec:	4649      	mov	r1, r9
 80092ee:	f7f7 f9f3 	bl	80006d8 <__aeabi_dmul>
 80092f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092f6:	9e01      	ldr	r6, [sp, #4]
 80092f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80092fc:	3501      	adds	r5, #1
 80092fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009302:	4628      	mov	r0, r5
 8009304:	f7f7 f97e 	bl	8000604 <__aeabi_i2d>
 8009308:	4642      	mov	r2, r8
 800930a:	464b      	mov	r3, r9
 800930c:	f7f7 f9e4 	bl	80006d8 <__aeabi_dmul>
 8009310:	4b86      	ldr	r3, [pc, #536]	; (800952c <_dtoa_r+0x64c>)
 8009312:	2200      	movs	r2, #0
 8009314:	f7f7 f82a 	bl	800036c <__adddf3>
 8009318:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800931c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009320:	9303      	str	r3, [sp, #12]
 8009322:	2e00      	cmp	r6, #0
 8009324:	d158      	bne.n	80093d8 <_dtoa_r+0x4f8>
 8009326:	4b82      	ldr	r3, [pc, #520]	; (8009530 <_dtoa_r+0x650>)
 8009328:	2200      	movs	r2, #0
 800932a:	4640      	mov	r0, r8
 800932c:	4649      	mov	r1, r9
 800932e:	f7f7 f81b 	bl	8000368 <__aeabi_dsub>
 8009332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009336:	4680      	mov	r8, r0
 8009338:	4689      	mov	r9, r1
 800933a:	f7f7 fc5d 	bl	8000bf8 <__aeabi_dcmpgt>
 800933e:	2800      	cmp	r0, #0
 8009340:	f040 8296 	bne.w	8009870 <_dtoa_r+0x990>
 8009344:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009348:	4640      	mov	r0, r8
 800934a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800934e:	4649      	mov	r1, r9
 8009350:	f7f7 fc34 	bl	8000bbc <__aeabi_dcmplt>
 8009354:	2800      	cmp	r0, #0
 8009356:	f040 8289 	bne.w	800986c <_dtoa_r+0x98c>
 800935a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800935e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009360:	2b00      	cmp	r3, #0
 8009362:	f2c0 814e 	blt.w	8009602 <_dtoa_r+0x722>
 8009366:	f1bb 0f0e 	cmp.w	fp, #14
 800936a:	f300 814a 	bgt.w	8009602 <_dtoa_r+0x722>
 800936e:	4b6b      	ldr	r3, [pc, #428]	; (800951c <_dtoa_r+0x63c>)
 8009370:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009374:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800937a:	2b00      	cmp	r3, #0
 800937c:	f280 80dc 	bge.w	8009538 <_dtoa_r+0x658>
 8009380:	9b04      	ldr	r3, [sp, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	f300 80d8 	bgt.w	8009538 <_dtoa_r+0x658>
 8009388:	f040 826f 	bne.w	800986a <_dtoa_r+0x98a>
 800938c:	4b68      	ldr	r3, [pc, #416]	; (8009530 <_dtoa_r+0x650>)
 800938e:	2200      	movs	r2, #0
 8009390:	4640      	mov	r0, r8
 8009392:	4649      	mov	r1, r9
 8009394:	f7f7 f9a0 	bl	80006d8 <__aeabi_dmul>
 8009398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800939c:	f7f7 fc22 	bl	8000be4 <__aeabi_dcmpge>
 80093a0:	9e04      	ldr	r6, [sp, #16]
 80093a2:	4637      	mov	r7, r6
 80093a4:	2800      	cmp	r0, #0
 80093a6:	f040 8245 	bne.w	8009834 <_dtoa_r+0x954>
 80093aa:	9d00      	ldr	r5, [sp, #0]
 80093ac:	2331      	movs	r3, #49	; 0x31
 80093ae:	f805 3b01 	strb.w	r3, [r5], #1
 80093b2:	f10b 0b01 	add.w	fp, fp, #1
 80093b6:	e241      	b.n	800983c <_dtoa_r+0x95c>
 80093b8:	07f2      	lsls	r2, r6, #31
 80093ba:	d505      	bpl.n	80093c8 <_dtoa_r+0x4e8>
 80093bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093c0:	f7f7 f98a 	bl	80006d8 <__aeabi_dmul>
 80093c4:	3501      	adds	r5, #1
 80093c6:	2301      	movs	r3, #1
 80093c8:	1076      	asrs	r6, r6, #1
 80093ca:	3708      	adds	r7, #8
 80093cc:	e773      	b.n	80092b6 <_dtoa_r+0x3d6>
 80093ce:	2502      	movs	r5, #2
 80093d0:	e775      	b.n	80092be <_dtoa_r+0x3de>
 80093d2:	9e04      	ldr	r6, [sp, #16]
 80093d4:	465f      	mov	r7, fp
 80093d6:	e792      	b.n	80092fe <_dtoa_r+0x41e>
 80093d8:	9900      	ldr	r1, [sp, #0]
 80093da:	4b50      	ldr	r3, [pc, #320]	; (800951c <_dtoa_r+0x63c>)
 80093dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093e0:	4431      	add	r1, r6
 80093e2:	9102      	str	r1, [sp, #8]
 80093e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093e6:	eeb0 9a47 	vmov.f32	s18, s14
 80093ea:	eef0 9a67 	vmov.f32	s19, s15
 80093ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80093f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093f6:	2900      	cmp	r1, #0
 80093f8:	d044      	beq.n	8009484 <_dtoa_r+0x5a4>
 80093fa:	494e      	ldr	r1, [pc, #312]	; (8009534 <_dtoa_r+0x654>)
 80093fc:	2000      	movs	r0, #0
 80093fe:	f7f7 fa95 	bl	800092c <__aeabi_ddiv>
 8009402:	ec53 2b19 	vmov	r2, r3, d9
 8009406:	f7f6 ffaf 	bl	8000368 <__aeabi_dsub>
 800940a:	9d00      	ldr	r5, [sp, #0]
 800940c:	ec41 0b19 	vmov	d9, r0, r1
 8009410:	4649      	mov	r1, r9
 8009412:	4640      	mov	r0, r8
 8009414:	f7f7 fc10 	bl	8000c38 <__aeabi_d2iz>
 8009418:	4606      	mov	r6, r0
 800941a:	f7f7 f8f3 	bl	8000604 <__aeabi_i2d>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4640      	mov	r0, r8
 8009424:	4649      	mov	r1, r9
 8009426:	f7f6 ff9f 	bl	8000368 <__aeabi_dsub>
 800942a:	3630      	adds	r6, #48	; 0x30
 800942c:	f805 6b01 	strb.w	r6, [r5], #1
 8009430:	ec53 2b19 	vmov	r2, r3, d9
 8009434:	4680      	mov	r8, r0
 8009436:	4689      	mov	r9, r1
 8009438:	f7f7 fbc0 	bl	8000bbc <__aeabi_dcmplt>
 800943c:	2800      	cmp	r0, #0
 800943e:	d164      	bne.n	800950a <_dtoa_r+0x62a>
 8009440:	4642      	mov	r2, r8
 8009442:	464b      	mov	r3, r9
 8009444:	4937      	ldr	r1, [pc, #220]	; (8009524 <_dtoa_r+0x644>)
 8009446:	2000      	movs	r0, #0
 8009448:	f7f6 ff8e 	bl	8000368 <__aeabi_dsub>
 800944c:	ec53 2b19 	vmov	r2, r3, d9
 8009450:	f7f7 fbb4 	bl	8000bbc <__aeabi_dcmplt>
 8009454:	2800      	cmp	r0, #0
 8009456:	f040 80b6 	bne.w	80095c6 <_dtoa_r+0x6e6>
 800945a:	9b02      	ldr	r3, [sp, #8]
 800945c:	429d      	cmp	r5, r3
 800945e:	f43f af7c 	beq.w	800935a <_dtoa_r+0x47a>
 8009462:	4b31      	ldr	r3, [pc, #196]	; (8009528 <_dtoa_r+0x648>)
 8009464:	ec51 0b19 	vmov	r0, r1, d9
 8009468:	2200      	movs	r2, #0
 800946a:	f7f7 f935 	bl	80006d8 <__aeabi_dmul>
 800946e:	4b2e      	ldr	r3, [pc, #184]	; (8009528 <_dtoa_r+0x648>)
 8009470:	ec41 0b19 	vmov	d9, r0, r1
 8009474:	2200      	movs	r2, #0
 8009476:	4640      	mov	r0, r8
 8009478:	4649      	mov	r1, r9
 800947a:	f7f7 f92d 	bl	80006d8 <__aeabi_dmul>
 800947e:	4680      	mov	r8, r0
 8009480:	4689      	mov	r9, r1
 8009482:	e7c5      	b.n	8009410 <_dtoa_r+0x530>
 8009484:	ec51 0b17 	vmov	r0, r1, d7
 8009488:	f7f7 f926 	bl	80006d8 <__aeabi_dmul>
 800948c:	9b02      	ldr	r3, [sp, #8]
 800948e:	9d00      	ldr	r5, [sp, #0]
 8009490:	930f      	str	r3, [sp, #60]	; 0x3c
 8009492:	ec41 0b19 	vmov	d9, r0, r1
 8009496:	4649      	mov	r1, r9
 8009498:	4640      	mov	r0, r8
 800949a:	f7f7 fbcd 	bl	8000c38 <__aeabi_d2iz>
 800949e:	4606      	mov	r6, r0
 80094a0:	f7f7 f8b0 	bl	8000604 <__aeabi_i2d>
 80094a4:	3630      	adds	r6, #48	; 0x30
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	4640      	mov	r0, r8
 80094ac:	4649      	mov	r1, r9
 80094ae:	f7f6 ff5b 	bl	8000368 <__aeabi_dsub>
 80094b2:	f805 6b01 	strb.w	r6, [r5], #1
 80094b6:	9b02      	ldr	r3, [sp, #8]
 80094b8:	429d      	cmp	r5, r3
 80094ba:	4680      	mov	r8, r0
 80094bc:	4689      	mov	r9, r1
 80094be:	f04f 0200 	mov.w	r2, #0
 80094c2:	d124      	bne.n	800950e <_dtoa_r+0x62e>
 80094c4:	4b1b      	ldr	r3, [pc, #108]	; (8009534 <_dtoa_r+0x654>)
 80094c6:	ec51 0b19 	vmov	r0, r1, d9
 80094ca:	f7f6 ff4f 	bl	800036c <__adddf3>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4640      	mov	r0, r8
 80094d4:	4649      	mov	r1, r9
 80094d6:	f7f7 fb8f 	bl	8000bf8 <__aeabi_dcmpgt>
 80094da:	2800      	cmp	r0, #0
 80094dc:	d173      	bne.n	80095c6 <_dtoa_r+0x6e6>
 80094de:	ec53 2b19 	vmov	r2, r3, d9
 80094e2:	4914      	ldr	r1, [pc, #80]	; (8009534 <_dtoa_r+0x654>)
 80094e4:	2000      	movs	r0, #0
 80094e6:	f7f6 ff3f 	bl	8000368 <__aeabi_dsub>
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4640      	mov	r0, r8
 80094f0:	4649      	mov	r1, r9
 80094f2:	f7f7 fb63 	bl	8000bbc <__aeabi_dcmplt>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	f43f af2f 	beq.w	800935a <_dtoa_r+0x47a>
 80094fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80094fe:	1e6b      	subs	r3, r5, #1
 8009500:	930f      	str	r3, [sp, #60]	; 0x3c
 8009502:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009506:	2b30      	cmp	r3, #48	; 0x30
 8009508:	d0f8      	beq.n	80094fc <_dtoa_r+0x61c>
 800950a:	46bb      	mov	fp, r7
 800950c:	e04a      	b.n	80095a4 <_dtoa_r+0x6c4>
 800950e:	4b06      	ldr	r3, [pc, #24]	; (8009528 <_dtoa_r+0x648>)
 8009510:	f7f7 f8e2 	bl	80006d8 <__aeabi_dmul>
 8009514:	4680      	mov	r8, r0
 8009516:	4689      	mov	r9, r1
 8009518:	e7bd      	b.n	8009496 <_dtoa_r+0x5b6>
 800951a:	bf00      	nop
 800951c:	0800bd10 	.word	0x0800bd10
 8009520:	0800bce8 	.word	0x0800bce8
 8009524:	3ff00000 	.word	0x3ff00000
 8009528:	40240000 	.word	0x40240000
 800952c:	401c0000 	.word	0x401c0000
 8009530:	40140000 	.word	0x40140000
 8009534:	3fe00000 	.word	0x3fe00000
 8009538:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800953c:	9d00      	ldr	r5, [sp, #0]
 800953e:	4642      	mov	r2, r8
 8009540:	464b      	mov	r3, r9
 8009542:	4630      	mov	r0, r6
 8009544:	4639      	mov	r1, r7
 8009546:	f7f7 f9f1 	bl	800092c <__aeabi_ddiv>
 800954a:	f7f7 fb75 	bl	8000c38 <__aeabi_d2iz>
 800954e:	9001      	str	r0, [sp, #4]
 8009550:	f7f7 f858 	bl	8000604 <__aeabi_i2d>
 8009554:	4642      	mov	r2, r8
 8009556:	464b      	mov	r3, r9
 8009558:	f7f7 f8be 	bl	80006d8 <__aeabi_dmul>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4630      	mov	r0, r6
 8009562:	4639      	mov	r1, r7
 8009564:	f7f6 ff00 	bl	8000368 <__aeabi_dsub>
 8009568:	9e01      	ldr	r6, [sp, #4]
 800956a:	9f04      	ldr	r7, [sp, #16]
 800956c:	3630      	adds	r6, #48	; 0x30
 800956e:	f805 6b01 	strb.w	r6, [r5], #1
 8009572:	9e00      	ldr	r6, [sp, #0]
 8009574:	1bae      	subs	r6, r5, r6
 8009576:	42b7      	cmp	r7, r6
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	d134      	bne.n	80095e8 <_dtoa_r+0x708>
 800957e:	f7f6 fef5 	bl	800036c <__adddf3>
 8009582:	4642      	mov	r2, r8
 8009584:	464b      	mov	r3, r9
 8009586:	4606      	mov	r6, r0
 8009588:	460f      	mov	r7, r1
 800958a:	f7f7 fb35 	bl	8000bf8 <__aeabi_dcmpgt>
 800958e:	b9c8      	cbnz	r0, 80095c4 <_dtoa_r+0x6e4>
 8009590:	4642      	mov	r2, r8
 8009592:	464b      	mov	r3, r9
 8009594:	4630      	mov	r0, r6
 8009596:	4639      	mov	r1, r7
 8009598:	f7f7 fb06 	bl	8000ba8 <__aeabi_dcmpeq>
 800959c:	b110      	cbz	r0, 80095a4 <_dtoa_r+0x6c4>
 800959e:	9b01      	ldr	r3, [sp, #4]
 80095a0:	07db      	lsls	r3, r3, #31
 80095a2:	d40f      	bmi.n	80095c4 <_dtoa_r+0x6e4>
 80095a4:	4651      	mov	r1, sl
 80095a6:	4620      	mov	r0, r4
 80095a8:	f000 fbde 	bl	8009d68 <_Bfree>
 80095ac:	2300      	movs	r3, #0
 80095ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095b0:	702b      	strb	r3, [r5, #0]
 80095b2:	f10b 0301 	add.w	r3, fp, #1
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f43f ace2 	beq.w	8008f84 <_dtoa_r+0xa4>
 80095c0:	601d      	str	r5, [r3, #0]
 80095c2:	e4df      	b.n	8008f84 <_dtoa_r+0xa4>
 80095c4:	465f      	mov	r7, fp
 80095c6:	462b      	mov	r3, r5
 80095c8:	461d      	mov	r5, r3
 80095ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095ce:	2a39      	cmp	r2, #57	; 0x39
 80095d0:	d106      	bne.n	80095e0 <_dtoa_r+0x700>
 80095d2:	9a00      	ldr	r2, [sp, #0]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d1f7      	bne.n	80095c8 <_dtoa_r+0x6e8>
 80095d8:	9900      	ldr	r1, [sp, #0]
 80095da:	2230      	movs	r2, #48	; 0x30
 80095dc:	3701      	adds	r7, #1
 80095de:	700a      	strb	r2, [r1, #0]
 80095e0:	781a      	ldrb	r2, [r3, #0]
 80095e2:	3201      	adds	r2, #1
 80095e4:	701a      	strb	r2, [r3, #0]
 80095e6:	e790      	b.n	800950a <_dtoa_r+0x62a>
 80095e8:	4ba3      	ldr	r3, [pc, #652]	; (8009878 <_dtoa_r+0x998>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	f7f7 f874 	bl	80006d8 <__aeabi_dmul>
 80095f0:	2200      	movs	r2, #0
 80095f2:	2300      	movs	r3, #0
 80095f4:	4606      	mov	r6, r0
 80095f6:	460f      	mov	r7, r1
 80095f8:	f7f7 fad6 	bl	8000ba8 <__aeabi_dcmpeq>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d09e      	beq.n	800953e <_dtoa_r+0x65e>
 8009600:	e7d0      	b.n	80095a4 <_dtoa_r+0x6c4>
 8009602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009604:	2a00      	cmp	r2, #0
 8009606:	f000 80ca 	beq.w	800979e <_dtoa_r+0x8be>
 800960a:	9a07      	ldr	r2, [sp, #28]
 800960c:	2a01      	cmp	r2, #1
 800960e:	f300 80ad 	bgt.w	800976c <_dtoa_r+0x88c>
 8009612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009614:	2a00      	cmp	r2, #0
 8009616:	f000 80a5 	beq.w	8009764 <_dtoa_r+0x884>
 800961a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800961e:	9e08      	ldr	r6, [sp, #32]
 8009620:	9d05      	ldr	r5, [sp, #20]
 8009622:	9a05      	ldr	r2, [sp, #20]
 8009624:	441a      	add	r2, r3
 8009626:	9205      	str	r2, [sp, #20]
 8009628:	9a06      	ldr	r2, [sp, #24]
 800962a:	2101      	movs	r1, #1
 800962c:	441a      	add	r2, r3
 800962e:	4620      	mov	r0, r4
 8009630:	9206      	str	r2, [sp, #24]
 8009632:	f000 fc4f 	bl	8009ed4 <__i2b>
 8009636:	4607      	mov	r7, r0
 8009638:	b165      	cbz	r5, 8009654 <_dtoa_r+0x774>
 800963a:	9b06      	ldr	r3, [sp, #24]
 800963c:	2b00      	cmp	r3, #0
 800963e:	dd09      	ble.n	8009654 <_dtoa_r+0x774>
 8009640:	42ab      	cmp	r3, r5
 8009642:	9a05      	ldr	r2, [sp, #20]
 8009644:	bfa8      	it	ge
 8009646:	462b      	movge	r3, r5
 8009648:	1ad2      	subs	r2, r2, r3
 800964a:	9205      	str	r2, [sp, #20]
 800964c:	9a06      	ldr	r2, [sp, #24]
 800964e:	1aed      	subs	r5, r5, r3
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	9306      	str	r3, [sp, #24]
 8009654:	9b08      	ldr	r3, [sp, #32]
 8009656:	b1f3      	cbz	r3, 8009696 <_dtoa_r+0x7b6>
 8009658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 80a3 	beq.w	80097a6 <_dtoa_r+0x8c6>
 8009660:	2e00      	cmp	r6, #0
 8009662:	dd10      	ble.n	8009686 <_dtoa_r+0x7a6>
 8009664:	4639      	mov	r1, r7
 8009666:	4632      	mov	r2, r6
 8009668:	4620      	mov	r0, r4
 800966a:	f000 fcf3 	bl	800a054 <__pow5mult>
 800966e:	4652      	mov	r2, sl
 8009670:	4601      	mov	r1, r0
 8009672:	4607      	mov	r7, r0
 8009674:	4620      	mov	r0, r4
 8009676:	f000 fc43 	bl	8009f00 <__multiply>
 800967a:	4651      	mov	r1, sl
 800967c:	4680      	mov	r8, r0
 800967e:	4620      	mov	r0, r4
 8009680:	f000 fb72 	bl	8009d68 <_Bfree>
 8009684:	46c2      	mov	sl, r8
 8009686:	9b08      	ldr	r3, [sp, #32]
 8009688:	1b9a      	subs	r2, r3, r6
 800968a:	d004      	beq.n	8009696 <_dtoa_r+0x7b6>
 800968c:	4651      	mov	r1, sl
 800968e:	4620      	mov	r0, r4
 8009690:	f000 fce0 	bl	800a054 <__pow5mult>
 8009694:	4682      	mov	sl, r0
 8009696:	2101      	movs	r1, #1
 8009698:	4620      	mov	r0, r4
 800969a:	f000 fc1b 	bl	8009ed4 <__i2b>
 800969e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	4606      	mov	r6, r0
 80096a4:	f340 8081 	ble.w	80097aa <_dtoa_r+0x8ca>
 80096a8:	461a      	mov	r2, r3
 80096aa:	4601      	mov	r1, r0
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 fcd1 	bl	800a054 <__pow5mult>
 80096b2:	9b07      	ldr	r3, [sp, #28]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	4606      	mov	r6, r0
 80096b8:	dd7a      	ble.n	80097b0 <_dtoa_r+0x8d0>
 80096ba:	f04f 0800 	mov.w	r8, #0
 80096be:	6933      	ldr	r3, [r6, #16]
 80096c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80096c4:	6918      	ldr	r0, [r3, #16]
 80096c6:	f000 fbb7 	bl	8009e38 <__hi0bits>
 80096ca:	f1c0 0020 	rsb	r0, r0, #32
 80096ce:	9b06      	ldr	r3, [sp, #24]
 80096d0:	4418      	add	r0, r3
 80096d2:	f010 001f 	ands.w	r0, r0, #31
 80096d6:	f000 8094 	beq.w	8009802 <_dtoa_r+0x922>
 80096da:	f1c0 0320 	rsb	r3, r0, #32
 80096de:	2b04      	cmp	r3, #4
 80096e0:	f340 8085 	ble.w	80097ee <_dtoa_r+0x90e>
 80096e4:	9b05      	ldr	r3, [sp, #20]
 80096e6:	f1c0 001c 	rsb	r0, r0, #28
 80096ea:	4403      	add	r3, r0
 80096ec:	9305      	str	r3, [sp, #20]
 80096ee:	9b06      	ldr	r3, [sp, #24]
 80096f0:	4403      	add	r3, r0
 80096f2:	4405      	add	r5, r0
 80096f4:	9306      	str	r3, [sp, #24]
 80096f6:	9b05      	ldr	r3, [sp, #20]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	dd05      	ble.n	8009708 <_dtoa_r+0x828>
 80096fc:	4651      	mov	r1, sl
 80096fe:	461a      	mov	r2, r3
 8009700:	4620      	mov	r0, r4
 8009702:	f000 fd01 	bl	800a108 <__lshift>
 8009706:	4682      	mov	sl, r0
 8009708:	9b06      	ldr	r3, [sp, #24]
 800970a:	2b00      	cmp	r3, #0
 800970c:	dd05      	ble.n	800971a <_dtoa_r+0x83a>
 800970e:	4631      	mov	r1, r6
 8009710:	461a      	mov	r2, r3
 8009712:	4620      	mov	r0, r4
 8009714:	f000 fcf8 	bl	800a108 <__lshift>
 8009718:	4606      	mov	r6, r0
 800971a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800971c:	2b00      	cmp	r3, #0
 800971e:	d072      	beq.n	8009806 <_dtoa_r+0x926>
 8009720:	4631      	mov	r1, r6
 8009722:	4650      	mov	r0, sl
 8009724:	f000 fd5c 	bl	800a1e0 <__mcmp>
 8009728:	2800      	cmp	r0, #0
 800972a:	da6c      	bge.n	8009806 <_dtoa_r+0x926>
 800972c:	2300      	movs	r3, #0
 800972e:	4651      	mov	r1, sl
 8009730:	220a      	movs	r2, #10
 8009732:	4620      	mov	r0, r4
 8009734:	f000 fb3a 	bl	8009dac <__multadd>
 8009738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800973a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800973e:	4682      	mov	sl, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 81b0 	beq.w	8009aa6 <_dtoa_r+0xbc6>
 8009746:	2300      	movs	r3, #0
 8009748:	4639      	mov	r1, r7
 800974a:	220a      	movs	r2, #10
 800974c:	4620      	mov	r0, r4
 800974e:	f000 fb2d 	bl	8009dac <__multadd>
 8009752:	9b01      	ldr	r3, [sp, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	4607      	mov	r7, r0
 8009758:	f300 8096 	bgt.w	8009888 <_dtoa_r+0x9a8>
 800975c:	9b07      	ldr	r3, [sp, #28]
 800975e:	2b02      	cmp	r3, #2
 8009760:	dc59      	bgt.n	8009816 <_dtoa_r+0x936>
 8009762:	e091      	b.n	8009888 <_dtoa_r+0x9a8>
 8009764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009766:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800976a:	e758      	b.n	800961e <_dtoa_r+0x73e>
 800976c:	9b04      	ldr	r3, [sp, #16]
 800976e:	1e5e      	subs	r6, r3, #1
 8009770:	9b08      	ldr	r3, [sp, #32]
 8009772:	42b3      	cmp	r3, r6
 8009774:	bfbf      	itttt	lt
 8009776:	9b08      	ldrlt	r3, [sp, #32]
 8009778:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800977a:	9608      	strlt	r6, [sp, #32]
 800977c:	1af3      	sublt	r3, r6, r3
 800977e:	bfb4      	ite	lt
 8009780:	18d2      	addlt	r2, r2, r3
 8009782:	1b9e      	subge	r6, r3, r6
 8009784:	9b04      	ldr	r3, [sp, #16]
 8009786:	bfbc      	itt	lt
 8009788:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800978a:	2600      	movlt	r6, #0
 800978c:	2b00      	cmp	r3, #0
 800978e:	bfb7      	itett	lt
 8009790:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009794:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009798:	1a9d      	sublt	r5, r3, r2
 800979a:	2300      	movlt	r3, #0
 800979c:	e741      	b.n	8009622 <_dtoa_r+0x742>
 800979e:	9e08      	ldr	r6, [sp, #32]
 80097a0:	9d05      	ldr	r5, [sp, #20]
 80097a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80097a4:	e748      	b.n	8009638 <_dtoa_r+0x758>
 80097a6:	9a08      	ldr	r2, [sp, #32]
 80097a8:	e770      	b.n	800968c <_dtoa_r+0x7ac>
 80097aa:	9b07      	ldr	r3, [sp, #28]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	dc19      	bgt.n	80097e4 <_dtoa_r+0x904>
 80097b0:	9b02      	ldr	r3, [sp, #8]
 80097b2:	b9bb      	cbnz	r3, 80097e4 <_dtoa_r+0x904>
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097ba:	b99b      	cbnz	r3, 80097e4 <_dtoa_r+0x904>
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097c2:	0d1b      	lsrs	r3, r3, #20
 80097c4:	051b      	lsls	r3, r3, #20
 80097c6:	b183      	cbz	r3, 80097ea <_dtoa_r+0x90a>
 80097c8:	9b05      	ldr	r3, [sp, #20]
 80097ca:	3301      	adds	r3, #1
 80097cc:	9305      	str	r3, [sp, #20]
 80097ce:	9b06      	ldr	r3, [sp, #24]
 80097d0:	3301      	adds	r3, #1
 80097d2:	9306      	str	r3, [sp, #24]
 80097d4:	f04f 0801 	mov.w	r8, #1
 80097d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f47f af6f 	bne.w	80096be <_dtoa_r+0x7de>
 80097e0:	2001      	movs	r0, #1
 80097e2:	e774      	b.n	80096ce <_dtoa_r+0x7ee>
 80097e4:	f04f 0800 	mov.w	r8, #0
 80097e8:	e7f6      	b.n	80097d8 <_dtoa_r+0x8f8>
 80097ea:	4698      	mov	r8, r3
 80097ec:	e7f4      	b.n	80097d8 <_dtoa_r+0x8f8>
 80097ee:	d082      	beq.n	80096f6 <_dtoa_r+0x816>
 80097f0:	9a05      	ldr	r2, [sp, #20]
 80097f2:	331c      	adds	r3, #28
 80097f4:	441a      	add	r2, r3
 80097f6:	9205      	str	r2, [sp, #20]
 80097f8:	9a06      	ldr	r2, [sp, #24]
 80097fa:	441a      	add	r2, r3
 80097fc:	441d      	add	r5, r3
 80097fe:	9206      	str	r2, [sp, #24]
 8009800:	e779      	b.n	80096f6 <_dtoa_r+0x816>
 8009802:	4603      	mov	r3, r0
 8009804:	e7f4      	b.n	80097f0 <_dtoa_r+0x910>
 8009806:	9b04      	ldr	r3, [sp, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	dc37      	bgt.n	800987c <_dtoa_r+0x99c>
 800980c:	9b07      	ldr	r3, [sp, #28]
 800980e:	2b02      	cmp	r3, #2
 8009810:	dd34      	ble.n	800987c <_dtoa_r+0x99c>
 8009812:	9b04      	ldr	r3, [sp, #16]
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	9b01      	ldr	r3, [sp, #4]
 8009818:	b963      	cbnz	r3, 8009834 <_dtoa_r+0x954>
 800981a:	4631      	mov	r1, r6
 800981c:	2205      	movs	r2, #5
 800981e:	4620      	mov	r0, r4
 8009820:	f000 fac4 	bl	8009dac <__multadd>
 8009824:	4601      	mov	r1, r0
 8009826:	4606      	mov	r6, r0
 8009828:	4650      	mov	r0, sl
 800982a:	f000 fcd9 	bl	800a1e0 <__mcmp>
 800982e:	2800      	cmp	r0, #0
 8009830:	f73f adbb 	bgt.w	80093aa <_dtoa_r+0x4ca>
 8009834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009836:	9d00      	ldr	r5, [sp, #0]
 8009838:	ea6f 0b03 	mvn.w	fp, r3
 800983c:	f04f 0800 	mov.w	r8, #0
 8009840:	4631      	mov	r1, r6
 8009842:	4620      	mov	r0, r4
 8009844:	f000 fa90 	bl	8009d68 <_Bfree>
 8009848:	2f00      	cmp	r7, #0
 800984a:	f43f aeab 	beq.w	80095a4 <_dtoa_r+0x6c4>
 800984e:	f1b8 0f00 	cmp.w	r8, #0
 8009852:	d005      	beq.n	8009860 <_dtoa_r+0x980>
 8009854:	45b8      	cmp	r8, r7
 8009856:	d003      	beq.n	8009860 <_dtoa_r+0x980>
 8009858:	4641      	mov	r1, r8
 800985a:	4620      	mov	r0, r4
 800985c:	f000 fa84 	bl	8009d68 <_Bfree>
 8009860:	4639      	mov	r1, r7
 8009862:	4620      	mov	r0, r4
 8009864:	f000 fa80 	bl	8009d68 <_Bfree>
 8009868:	e69c      	b.n	80095a4 <_dtoa_r+0x6c4>
 800986a:	2600      	movs	r6, #0
 800986c:	4637      	mov	r7, r6
 800986e:	e7e1      	b.n	8009834 <_dtoa_r+0x954>
 8009870:	46bb      	mov	fp, r7
 8009872:	4637      	mov	r7, r6
 8009874:	e599      	b.n	80093aa <_dtoa_r+0x4ca>
 8009876:	bf00      	nop
 8009878:	40240000 	.word	0x40240000
 800987c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 80c8 	beq.w	8009a14 <_dtoa_r+0xb34>
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	9301      	str	r3, [sp, #4]
 8009888:	2d00      	cmp	r5, #0
 800988a:	dd05      	ble.n	8009898 <_dtoa_r+0x9b8>
 800988c:	4639      	mov	r1, r7
 800988e:	462a      	mov	r2, r5
 8009890:	4620      	mov	r0, r4
 8009892:	f000 fc39 	bl	800a108 <__lshift>
 8009896:	4607      	mov	r7, r0
 8009898:	f1b8 0f00 	cmp.w	r8, #0
 800989c:	d05b      	beq.n	8009956 <_dtoa_r+0xa76>
 800989e:	6879      	ldr	r1, [r7, #4]
 80098a0:	4620      	mov	r0, r4
 80098a2:	f000 fa21 	bl	8009ce8 <_Balloc>
 80098a6:	4605      	mov	r5, r0
 80098a8:	b928      	cbnz	r0, 80098b6 <_dtoa_r+0x9d6>
 80098aa:	4b83      	ldr	r3, [pc, #524]	; (8009ab8 <_dtoa_r+0xbd8>)
 80098ac:	4602      	mov	r2, r0
 80098ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80098b2:	f7ff bb2e 	b.w	8008f12 <_dtoa_r+0x32>
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	3202      	adds	r2, #2
 80098ba:	0092      	lsls	r2, r2, #2
 80098bc:	f107 010c 	add.w	r1, r7, #12
 80098c0:	300c      	adds	r0, #12
 80098c2:	f7ff fa74 	bl	8008dae <memcpy>
 80098c6:	2201      	movs	r2, #1
 80098c8:	4629      	mov	r1, r5
 80098ca:	4620      	mov	r0, r4
 80098cc:	f000 fc1c 	bl	800a108 <__lshift>
 80098d0:	9b00      	ldr	r3, [sp, #0]
 80098d2:	3301      	adds	r3, #1
 80098d4:	9304      	str	r3, [sp, #16]
 80098d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098da:	4413      	add	r3, r2
 80098dc:	9308      	str	r3, [sp, #32]
 80098de:	9b02      	ldr	r3, [sp, #8]
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	46b8      	mov	r8, r7
 80098e6:	9306      	str	r3, [sp, #24]
 80098e8:	4607      	mov	r7, r0
 80098ea:	9b04      	ldr	r3, [sp, #16]
 80098ec:	4631      	mov	r1, r6
 80098ee:	3b01      	subs	r3, #1
 80098f0:	4650      	mov	r0, sl
 80098f2:	9301      	str	r3, [sp, #4]
 80098f4:	f7ff fa69 	bl	8008dca <quorem>
 80098f8:	4641      	mov	r1, r8
 80098fa:	9002      	str	r0, [sp, #8]
 80098fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009900:	4650      	mov	r0, sl
 8009902:	f000 fc6d 	bl	800a1e0 <__mcmp>
 8009906:	463a      	mov	r2, r7
 8009908:	9005      	str	r0, [sp, #20]
 800990a:	4631      	mov	r1, r6
 800990c:	4620      	mov	r0, r4
 800990e:	f000 fc83 	bl	800a218 <__mdiff>
 8009912:	68c2      	ldr	r2, [r0, #12]
 8009914:	4605      	mov	r5, r0
 8009916:	bb02      	cbnz	r2, 800995a <_dtoa_r+0xa7a>
 8009918:	4601      	mov	r1, r0
 800991a:	4650      	mov	r0, sl
 800991c:	f000 fc60 	bl	800a1e0 <__mcmp>
 8009920:	4602      	mov	r2, r0
 8009922:	4629      	mov	r1, r5
 8009924:	4620      	mov	r0, r4
 8009926:	9209      	str	r2, [sp, #36]	; 0x24
 8009928:	f000 fa1e 	bl	8009d68 <_Bfree>
 800992c:	9b07      	ldr	r3, [sp, #28]
 800992e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009930:	9d04      	ldr	r5, [sp, #16]
 8009932:	ea43 0102 	orr.w	r1, r3, r2
 8009936:	9b06      	ldr	r3, [sp, #24]
 8009938:	4319      	orrs	r1, r3
 800993a:	d110      	bne.n	800995e <_dtoa_r+0xa7e>
 800993c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009940:	d029      	beq.n	8009996 <_dtoa_r+0xab6>
 8009942:	9b05      	ldr	r3, [sp, #20]
 8009944:	2b00      	cmp	r3, #0
 8009946:	dd02      	ble.n	800994e <_dtoa_r+0xa6e>
 8009948:	9b02      	ldr	r3, [sp, #8]
 800994a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800994e:	9b01      	ldr	r3, [sp, #4]
 8009950:	f883 9000 	strb.w	r9, [r3]
 8009954:	e774      	b.n	8009840 <_dtoa_r+0x960>
 8009956:	4638      	mov	r0, r7
 8009958:	e7ba      	b.n	80098d0 <_dtoa_r+0x9f0>
 800995a:	2201      	movs	r2, #1
 800995c:	e7e1      	b.n	8009922 <_dtoa_r+0xa42>
 800995e:	9b05      	ldr	r3, [sp, #20]
 8009960:	2b00      	cmp	r3, #0
 8009962:	db04      	blt.n	800996e <_dtoa_r+0xa8e>
 8009964:	9907      	ldr	r1, [sp, #28]
 8009966:	430b      	orrs	r3, r1
 8009968:	9906      	ldr	r1, [sp, #24]
 800996a:	430b      	orrs	r3, r1
 800996c:	d120      	bne.n	80099b0 <_dtoa_r+0xad0>
 800996e:	2a00      	cmp	r2, #0
 8009970:	dded      	ble.n	800994e <_dtoa_r+0xa6e>
 8009972:	4651      	mov	r1, sl
 8009974:	2201      	movs	r2, #1
 8009976:	4620      	mov	r0, r4
 8009978:	f000 fbc6 	bl	800a108 <__lshift>
 800997c:	4631      	mov	r1, r6
 800997e:	4682      	mov	sl, r0
 8009980:	f000 fc2e 	bl	800a1e0 <__mcmp>
 8009984:	2800      	cmp	r0, #0
 8009986:	dc03      	bgt.n	8009990 <_dtoa_r+0xab0>
 8009988:	d1e1      	bne.n	800994e <_dtoa_r+0xa6e>
 800998a:	f019 0f01 	tst.w	r9, #1
 800998e:	d0de      	beq.n	800994e <_dtoa_r+0xa6e>
 8009990:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009994:	d1d8      	bne.n	8009948 <_dtoa_r+0xa68>
 8009996:	9a01      	ldr	r2, [sp, #4]
 8009998:	2339      	movs	r3, #57	; 0x39
 800999a:	7013      	strb	r3, [r2, #0]
 800999c:	462b      	mov	r3, r5
 800999e:	461d      	mov	r5, r3
 80099a0:	3b01      	subs	r3, #1
 80099a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80099a6:	2a39      	cmp	r2, #57	; 0x39
 80099a8:	d06c      	beq.n	8009a84 <_dtoa_r+0xba4>
 80099aa:	3201      	adds	r2, #1
 80099ac:	701a      	strb	r2, [r3, #0]
 80099ae:	e747      	b.n	8009840 <_dtoa_r+0x960>
 80099b0:	2a00      	cmp	r2, #0
 80099b2:	dd07      	ble.n	80099c4 <_dtoa_r+0xae4>
 80099b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099b8:	d0ed      	beq.n	8009996 <_dtoa_r+0xab6>
 80099ba:	9a01      	ldr	r2, [sp, #4]
 80099bc:	f109 0301 	add.w	r3, r9, #1
 80099c0:	7013      	strb	r3, [r2, #0]
 80099c2:	e73d      	b.n	8009840 <_dtoa_r+0x960>
 80099c4:	9b04      	ldr	r3, [sp, #16]
 80099c6:	9a08      	ldr	r2, [sp, #32]
 80099c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d043      	beq.n	8009a58 <_dtoa_r+0xb78>
 80099d0:	4651      	mov	r1, sl
 80099d2:	2300      	movs	r3, #0
 80099d4:	220a      	movs	r2, #10
 80099d6:	4620      	mov	r0, r4
 80099d8:	f000 f9e8 	bl	8009dac <__multadd>
 80099dc:	45b8      	cmp	r8, r7
 80099de:	4682      	mov	sl, r0
 80099e0:	f04f 0300 	mov.w	r3, #0
 80099e4:	f04f 020a 	mov.w	r2, #10
 80099e8:	4641      	mov	r1, r8
 80099ea:	4620      	mov	r0, r4
 80099ec:	d107      	bne.n	80099fe <_dtoa_r+0xb1e>
 80099ee:	f000 f9dd 	bl	8009dac <__multadd>
 80099f2:	4680      	mov	r8, r0
 80099f4:	4607      	mov	r7, r0
 80099f6:	9b04      	ldr	r3, [sp, #16]
 80099f8:	3301      	adds	r3, #1
 80099fa:	9304      	str	r3, [sp, #16]
 80099fc:	e775      	b.n	80098ea <_dtoa_r+0xa0a>
 80099fe:	f000 f9d5 	bl	8009dac <__multadd>
 8009a02:	4639      	mov	r1, r7
 8009a04:	4680      	mov	r8, r0
 8009a06:	2300      	movs	r3, #0
 8009a08:	220a      	movs	r2, #10
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f000 f9ce 	bl	8009dac <__multadd>
 8009a10:	4607      	mov	r7, r0
 8009a12:	e7f0      	b.n	80099f6 <_dtoa_r+0xb16>
 8009a14:	9b04      	ldr	r3, [sp, #16]
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	9d00      	ldr	r5, [sp, #0]
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4650      	mov	r0, sl
 8009a1e:	f7ff f9d4 	bl	8008dca <quorem>
 8009a22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009a26:	9b00      	ldr	r3, [sp, #0]
 8009a28:	f805 9b01 	strb.w	r9, [r5], #1
 8009a2c:	1aea      	subs	r2, r5, r3
 8009a2e:	9b01      	ldr	r3, [sp, #4]
 8009a30:	4293      	cmp	r3, r2
 8009a32:	dd07      	ble.n	8009a44 <_dtoa_r+0xb64>
 8009a34:	4651      	mov	r1, sl
 8009a36:	2300      	movs	r3, #0
 8009a38:	220a      	movs	r2, #10
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 f9b6 	bl	8009dac <__multadd>
 8009a40:	4682      	mov	sl, r0
 8009a42:	e7ea      	b.n	8009a1a <_dtoa_r+0xb3a>
 8009a44:	9b01      	ldr	r3, [sp, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	bfc8      	it	gt
 8009a4a:	461d      	movgt	r5, r3
 8009a4c:	9b00      	ldr	r3, [sp, #0]
 8009a4e:	bfd8      	it	le
 8009a50:	2501      	movle	r5, #1
 8009a52:	441d      	add	r5, r3
 8009a54:	f04f 0800 	mov.w	r8, #0
 8009a58:	4651      	mov	r1, sl
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f000 fb53 	bl	800a108 <__lshift>
 8009a62:	4631      	mov	r1, r6
 8009a64:	4682      	mov	sl, r0
 8009a66:	f000 fbbb 	bl	800a1e0 <__mcmp>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	dc96      	bgt.n	800999c <_dtoa_r+0xabc>
 8009a6e:	d102      	bne.n	8009a76 <_dtoa_r+0xb96>
 8009a70:	f019 0f01 	tst.w	r9, #1
 8009a74:	d192      	bne.n	800999c <_dtoa_r+0xabc>
 8009a76:	462b      	mov	r3, r5
 8009a78:	461d      	mov	r5, r3
 8009a7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a7e:	2a30      	cmp	r2, #48	; 0x30
 8009a80:	d0fa      	beq.n	8009a78 <_dtoa_r+0xb98>
 8009a82:	e6dd      	b.n	8009840 <_dtoa_r+0x960>
 8009a84:	9a00      	ldr	r2, [sp, #0]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d189      	bne.n	800999e <_dtoa_r+0xabe>
 8009a8a:	f10b 0b01 	add.w	fp, fp, #1
 8009a8e:	2331      	movs	r3, #49	; 0x31
 8009a90:	e796      	b.n	80099c0 <_dtoa_r+0xae0>
 8009a92:	4b0a      	ldr	r3, [pc, #40]	; (8009abc <_dtoa_r+0xbdc>)
 8009a94:	f7ff ba99 	b.w	8008fca <_dtoa_r+0xea>
 8009a98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f47f aa6d 	bne.w	8008f7a <_dtoa_r+0x9a>
 8009aa0:	4b07      	ldr	r3, [pc, #28]	; (8009ac0 <_dtoa_r+0xbe0>)
 8009aa2:	f7ff ba92 	b.w	8008fca <_dtoa_r+0xea>
 8009aa6:	9b01      	ldr	r3, [sp, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	dcb5      	bgt.n	8009a18 <_dtoa_r+0xb38>
 8009aac:	9b07      	ldr	r3, [sp, #28]
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	f73f aeb1 	bgt.w	8009816 <_dtoa_r+0x936>
 8009ab4:	e7b0      	b.n	8009a18 <_dtoa_r+0xb38>
 8009ab6:	bf00      	nop
 8009ab8:	0800bc7d 	.word	0x0800bc7d
 8009abc:	0800bbd3 	.word	0x0800bbd3
 8009ac0:	0800bc01 	.word	0x0800bc01

08009ac4 <_free_r>:
 8009ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ac6:	2900      	cmp	r1, #0
 8009ac8:	d044      	beq.n	8009b54 <_free_r+0x90>
 8009aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ace:	9001      	str	r0, [sp, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ad6:	bfb8      	it	lt
 8009ad8:	18e4      	addlt	r4, r4, r3
 8009ada:	f000 f8f9 	bl	8009cd0 <__malloc_lock>
 8009ade:	4a1e      	ldr	r2, [pc, #120]	; (8009b58 <_free_r+0x94>)
 8009ae0:	9801      	ldr	r0, [sp, #4]
 8009ae2:	6813      	ldr	r3, [r2, #0]
 8009ae4:	b933      	cbnz	r3, 8009af4 <_free_r+0x30>
 8009ae6:	6063      	str	r3, [r4, #4]
 8009ae8:	6014      	str	r4, [r2, #0]
 8009aea:	b003      	add	sp, #12
 8009aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009af0:	f000 b8f4 	b.w	8009cdc <__malloc_unlock>
 8009af4:	42a3      	cmp	r3, r4
 8009af6:	d908      	bls.n	8009b0a <_free_r+0x46>
 8009af8:	6825      	ldr	r5, [r4, #0]
 8009afa:	1961      	adds	r1, r4, r5
 8009afc:	428b      	cmp	r3, r1
 8009afe:	bf01      	itttt	eq
 8009b00:	6819      	ldreq	r1, [r3, #0]
 8009b02:	685b      	ldreq	r3, [r3, #4]
 8009b04:	1949      	addeq	r1, r1, r5
 8009b06:	6021      	streq	r1, [r4, #0]
 8009b08:	e7ed      	b.n	8009ae6 <_free_r+0x22>
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	b10b      	cbz	r3, 8009b14 <_free_r+0x50>
 8009b10:	42a3      	cmp	r3, r4
 8009b12:	d9fa      	bls.n	8009b0a <_free_r+0x46>
 8009b14:	6811      	ldr	r1, [r2, #0]
 8009b16:	1855      	adds	r5, r2, r1
 8009b18:	42a5      	cmp	r5, r4
 8009b1a:	d10b      	bne.n	8009b34 <_free_r+0x70>
 8009b1c:	6824      	ldr	r4, [r4, #0]
 8009b1e:	4421      	add	r1, r4
 8009b20:	1854      	adds	r4, r2, r1
 8009b22:	42a3      	cmp	r3, r4
 8009b24:	6011      	str	r1, [r2, #0]
 8009b26:	d1e0      	bne.n	8009aea <_free_r+0x26>
 8009b28:	681c      	ldr	r4, [r3, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	6053      	str	r3, [r2, #4]
 8009b2e:	440c      	add	r4, r1
 8009b30:	6014      	str	r4, [r2, #0]
 8009b32:	e7da      	b.n	8009aea <_free_r+0x26>
 8009b34:	d902      	bls.n	8009b3c <_free_r+0x78>
 8009b36:	230c      	movs	r3, #12
 8009b38:	6003      	str	r3, [r0, #0]
 8009b3a:	e7d6      	b.n	8009aea <_free_r+0x26>
 8009b3c:	6825      	ldr	r5, [r4, #0]
 8009b3e:	1961      	adds	r1, r4, r5
 8009b40:	428b      	cmp	r3, r1
 8009b42:	bf04      	itt	eq
 8009b44:	6819      	ldreq	r1, [r3, #0]
 8009b46:	685b      	ldreq	r3, [r3, #4]
 8009b48:	6063      	str	r3, [r4, #4]
 8009b4a:	bf04      	itt	eq
 8009b4c:	1949      	addeq	r1, r1, r5
 8009b4e:	6021      	streq	r1, [r4, #0]
 8009b50:	6054      	str	r4, [r2, #4]
 8009b52:	e7ca      	b.n	8009aea <_free_r+0x26>
 8009b54:	b003      	add	sp, #12
 8009b56:	bd30      	pop	{r4, r5, pc}
 8009b58:	20000f58 	.word	0x20000f58

08009b5c <malloc>:
 8009b5c:	4b02      	ldr	r3, [pc, #8]	; (8009b68 <malloc+0xc>)
 8009b5e:	4601      	mov	r1, r0
 8009b60:	6818      	ldr	r0, [r3, #0]
 8009b62:	f000 b823 	b.w	8009bac <_malloc_r>
 8009b66:	bf00      	nop
 8009b68:	200001d0 	.word	0x200001d0

08009b6c <sbrk_aligned>:
 8009b6c:	b570      	push	{r4, r5, r6, lr}
 8009b6e:	4e0e      	ldr	r6, [pc, #56]	; (8009ba8 <sbrk_aligned+0x3c>)
 8009b70:	460c      	mov	r4, r1
 8009b72:	6831      	ldr	r1, [r6, #0]
 8009b74:	4605      	mov	r5, r0
 8009b76:	b911      	cbnz	r1, 8009b7e <sbrk_aligned+0x12>
 8009b78:	f000 fcee 	bl	800a558 <_sbrk_r>
 8009b7c:	6030      	str	r0, [r6, #0]
 8009b7e:	4621      	mov	r1, r4
 8009b80:	4628      	mov	r0, r5
 8009b82:	f000 fce9 	bl	800a558 <_sbrk_r>
 8009b86:	1c43      	adds	r3, r0, #1
 8009b88:	d00a      	beq.n	8009ba0 <sbrk_aligned+0x34>
 8009b8a:	1cc4      	adds	r4, r0, #3
 8009b8c:	f024 0403 	bic.w	r4, r4, #3
 8009b90:	42a0      	cmp	r0, r4
 8009b92:	d007      	beq.n	8009ba4 <sbrk_aligned+0x38>
 8009b94:	1a21      	subs	r1, r4, r0
 8009b96:	4628      	mov	r0, r5
 8009b98:	f000 fcde 	bl	800a558 <_sbrk_r>
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	d101      	bne.n	8009ba4 <sbrk_aligned+0x38>
 8009ba0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	20000f5c 	.word	0x20000f5c

08009bac <_malloc_r>:
 8009bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bb0:	1ccd      	adds	r5, r1, #3
 8009bb2:	f025 0503 	bic.w	r5, r5, #3
 8009bb6:	3508      	adds	r5, #8
 8009bb8:	2d0c      	cmp	r5, #12
 8009bba:	bf38      	it	cc
 8009bbc:	250c      	movcc	r5, #12
 8009bbe:	2d00      	cmp	r5, #0
 8009bc0:	4607      	mov	r7, r0
 8009bc2:	db01      	blt.n	8009bc8 <_malloc_r+0x1c>
 8009bc4:	42a9      	cmp	r1, r5
 8009bc6:	d905      	bls.n	8009bd4 <_malloc_r+0x28>
 8009bc8:	230c      	movs	r3, #12
 8009bca:	603b      	str	r3, [r7, #0]
 8009bcc:	2600      	movs	r6, #0
 8009bce:	4630      	mov	r0, r6
 8009bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ca8 <_malloc_r+0xfc>
 8009bd8:	f000 f87a 	bl	8009cd0 <__malloc_lock>
 8009bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009be0:	461c      	mov	r4, r3
 8009be2:	bb5c      	cbnz	r4, 8009c3c <_malloc_r+0x90>
 8009be4:	4629      	mov	r1, r5
 8009be6:	4638      	mov	r0, r7
 8009be8:	f7ff ffc0 	bl	8009b6c <sbrk_aligned>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	4604      	mov	r4, r0
 8009bf0:	d155      	bne.n	8009c9e <_malloc_r+0xf2>
 8009bf2:	f8d8 4000 	ldr.w	r4, [r8]
 8009bf6:	4626      	mov	r6, r4
 8009bf8:	2e00      	cmp	r6, #0
 8009bfa:	d145      	bne.n	8009c88 <_malloc_r+0xdc>
 8009bfc:	2c00      	cmp	r4, #0
 8009bfe:	d048      	beq.n	8009c92 <_malloc_r+0xe6>
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	4631      	mov	r1, r6
 8009c04:	4638      	mov	r0, r7
 8009c06:	eb04 0903 	add.w	r9, r4, r3
 8009c0a:	f000 fca5 	bl	800a558 <_sbrk_r>
 8009c0e:	4581      	cmp	r9, r0
 8009c10:	d13f      	bne.n	8009c92 <_malloc_r+0xe6>
 8009c12:	6821      	ldr	r1, [r4, #0]
 8009c14:	1a6d      	subs	r5, r5, r1
 8009c16:	4629      	mov	r1, r5
 8009c18:	4638      	mov	r0, r7
 8009c1a:	f7ff ffa7 	bl	8009b6c <sbrk_aligned>
 8009c1e:	3001      	adds	r0, #1
 8009c20:	d037      	beq.n	8009c92 <_malloc_r+0xe6>
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	442b      	add	r3, r5
 8009c26:	6023      	str	r3, [r4, #0]
 8009c28:	f8d8 3000 	ldr.w	r3, [r8]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d038      	beq.n	8009ca2 <_malloc_r+0xf6>
 8009c30:	685a      	ldr	r2, [r3, #4]
 8009c32:	42a2      	cmp	r2, r4
 8009c34:	d12b      	bne.n	8009c8e <_malloc_r+0xe2>
 8009c36:	2200      	movs	r2, #0
 8009c38:	605a      	str	r2, [r3, #4]
 8009c3a:	e00f      	b.n	8009c5c <_malloc_r+0xb0>
 8009c3c:	6822      	ldr	r2, [r4, #0]
 8009c3e:	1b52      	subs	r2, r2, r5
 8009c40:	d41f      	bmi.n	8009c82 <_malloc_r+0xd6>
 8009c42:	2a0b      	cmp	r2, #11
 8009c44:	d917      	bls.n	8009c76 <_malloc_r+0xca>
 8009c46:	1961      	adds	r1, r4, r5
 8009c48:	42a3      	cmp	r3, r4
 8009c4a:	6025      	str	r5, [r4, #0]
 8009c4c:	bf18      	it	ne
 8009c4e:	6059      	strne	r1, [r3, #4]
 8009c50:	6863      	ldr	r3, [r4, #4]
 8009c52:	bf08      	it	eq
 8009c54:	f8c8 1000 	streq.w	r1, [r8]
 8009c58:	5162      	str	r2, [r4, r5]
 8009c5a:	604b      	str	r3, [r1, #4]
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	f104 060b 	add.w	r6, r4, #11
 8009c62:	f000 f83b 	bl	8009cdc <__malloc_unlock>
 8009c66:	f026 0607 	bic.w	r6, r6, #7
 8009c6a:	1d23      	adds	r3, r4, #4
 8009c6c:	1af2      	subs	r2, r6, r3
 8009c6e:	d0ae      	beq.n	8009bce <_malloc_r+0x22>
 8009c70:	1b9b      	subs	r3, r3, r6
 8009c72:	50a3      	str	r3, [r4, r2]
 8009c74:	e7ab      	b.n	8009bce <_malloc_r+0x22>
 8009c76:	42a3      	cmp	r3, r4
 8009c78:	6862      	ldr	r2, [r4, #4]
 8009c7a:	d1dd      	bne.n	8009c38 <_malloc_r+0x8c>
 8009c7c:	f8c8 2000 	str.w	r2, [r8]
 8009c80:	e7ec      	b.n	8009c5c <_malloc_r+0xb0>
 8009c82:	4623      	mov	r3, r4
 8009c84:	6864      	ldr	r4, [r4, #4]
 8009c86:	e7ac      	b.n	8009be2 <_malloc_r+0x36>
 8009c88:	4634      	mov	r4, r6
 8009c8a:	6876      	ldr	r6, [r6, #4]
 8009c8c:	e7b4      	b.n	8009bf8 <_malloc_r+0x4c>
 8009c8e:	4613      	mov	r3, r2
 8009c90:	e7cc      	b.n	8009c2c <_malloc_r+0x80>
 8009c92:	230c      	movs	r3, #12
 8009c94:	603b      	str	r3, [r7, #0]
 8009c96:	4638      	mov	r0, r7
 8009c98:	f000 f820 	bl	8009cdc <__malloc_unlock>
 8009c9c:	e797      	b.n	8009bce <_malloc_r+0x22>
 8009c9e:	6025      	str	r5, [r4, #0]
 8009ca0:	e7dc      	b.n	8009c5c <_malloc_r+0xb0>
 8009ca2:	605b      	str	r3, [r3, #4]
 8009ca4:	deff      	udf	#255	; 0xff
 8009ca6:	bf00      	nop
 8009ca8:	20000f58 	.word	0x20000f58

08009cac <__ascii_mbtowc>:
 8009cac:	b082      	sub	sp, #8
 8009cae:	b901      	cbnz	r1, 8009cb2 <__ascii_mbtowc+0x6>
 8009cb0:	a901      	add	r1, sp, #4
 8009cb2:	b142      	cbz	r2, 8009cc6 <__ascii_mbtowc+0x1a>
 8009cb4:	b14b      	cbz	r3, 8009cca <__ascii_mbtowc+0x1e>
 8009cb6:	7813      	ldrb	r3, [r2, #0]
 8009cb8:	600b      	str	r3, [r1, #0]
 8009cba:	7812      	ldrb	r2, [r2, #0]
 8009cbc:	1e10      	subs	r0, r2, #0
 8009cbe:	bf18      	it	ne
 8009cc0:	2001      	movne	r0, #1
 8009cc2:	b002      	add	sp, #8
 8009cc4:	4770      	bx	lr
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	e7fb      	b.n	8009cc2 <__ascii_mbtowc+0x16>
 8009cca:	f06f 0001 	mvn.w	r0, #1
 8009cce:	e7f8      	b.n	8009cc2 <__ascii_mbtowc+0x16>

08009cd0 <__malloc_lock>:
 8009cd0:	4801      	ldr	r0, [pc, #4]	; (8009cd8 <__malloc_lock+0x8>)
 8009cd2:	f7ff b86a 	b.w	8008daa <__retarget_lock_acquire_recursive>
 8009cd6:	bf00      	nop
 8009cd8:	20000f54 	.word	0x20000f54

08009cdc <__malloc_unlock>:
 8009cdc:	4801      	ldr	r0, [pc, #4]	; (8009ce4 <__malloc_unlock+0x8>)
 8009cde:	f7ff b865 	b.w	8008dac <__retarget_lock_release_recursive>
 8009ce2:	bf00      	nop
 8009ce4:	20000f54 	.word	0x20000f54

08009ce8 <_Balloc>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	69c6      	ldr	r6, [r0, #28]
 8009cec:	4604      	mov	r4, r0
 8009cee:	460d      	mov	r5, r1
 8009cf0:	b976      	cbnz	r6, 8009d10 <_Balloc+0x28>
 8009cf2:	2010      	movs	r0, #16
 8009cf4:	f7ff ff32 	bl	8009b5c <malloc>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	61e0      	str	r0, [r4, #28]
 8009cfc:	b920      	cbnz	r0, 8009d08 <_Balloc+0x20>
 8009cfe:	4b18      	ldr	r3, [pc, #96]	; (8009d60 <_Balloc+0x78>)
 8009d00:	4818      	ldr	r0, [pc, #96]	; (8009d64 <_Balloc+0x7c>)
 8009d02:	216b      	movs	r1, #107	; 0x6b
 8009d04:	f000 fc38 	bl	800a578 <__assert_func>
 8009d08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d0c:	6006      	str	r6, [r0, #0]
 8009d0e:	60c6      	str	r6, [r0, #12]
 8009d10:	69e6      	ldr	r6, [r4, #28]
 8009d12:	68f3      	ldr	r3, [r6, #12]
 8009d14:	b183      	cbz	r3, 8009d38 <_Balloc+0x50>
 8009d16:	69e3      	ldr	r3, [r4, #28]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d1e:	b9b8      	cbnz	r0, 8009d50 <_Balloc+0x68>
 8009d20:	2101      	movs	r1, #1
 8009d22:	fa01 f605 	lsl.w	r6, r1, r5
 8009d26:	1d72      	adds	r2, r6, #5
 8009d28:	0092      	lsls	r2, r2, #2
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f000 fc42 	bl	800a5b4 <_calloc_r>
 8009d30:	b160      	cbz	r0, 8009d4c <_Balloc+0x64>
 8009d32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d36:	e00e      	b.n	8009d56 <_Balloc+0x6e>
 8009d38:	2221      	movs	r2, #33	; 0x21
 8009d3a:	2104      	movs	r1, #4
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f000 fc39 	bl	800a5b4 <_calloc_r>
 8009d42:	69e3      	ldr	r3, [r4, #28]
 8009d44:	60f0      	str	r0, [r6, #12]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1e4      	bne.n	8009d16 <_Balloc+0x2e>
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}
 8009d50:	6802      	ldr	r2, [r0, #0]
 8009d52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d56:	2300      	movs	r3, #0
 8009d58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d5c:	e7f7      	b.n	8009d4e <_Balloc+0x66>
 8009d5e:	bf00      	nop
 8009d60:	0800bc0e 	.word	0x0800bc0e
 8009d64:	0800bc8e 	.word	0x0800bc8e

08009d68 <_Bfree>:
 8009d68:	b570      	push	{r4, r5, r6, lr}
 8009d6a:	69c6      	ldr	r6, [r0, #28]
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	460c      	mov	r4, r1
 8009d70:	b976      	cbnz	r6, 8009d90 <_Bfree+0x28>
 8009d72:	2010      	movs	r0, #16
 8009d74:	f7ff fef2 	bl	8009b5c <malloc>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	61e8      	str	r0, [r5, #28]
 8009d7c:	b920      	cbnz	r0, 8009d88 <_Bfree+0x20>
 8009d7e:	4b09      	ldr	r3, [pc, #36]	; (8009da4 <_Bfree+0x3c>)
 8009d80:	4809      	ldr	r0, [pc, #36]	; (8009da8 <_Bfree+0x40>)
 8009d82:	218f      	movs	r1, #143	; 0x8f
 8009d84:	f000 fbf8 	bl	800a578 <__assert_func>
 8009d88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d8c:	6006      	str	r6, [r0, #0]
 8009d8e:	60c6      	str	r6, [r0, #12]
 8009d90:	b13c      	cbz	r4, 8009da2 <_Bfree+0x3a>
 8009d92:	69eb      	ldr	r3, [r5, #28]
 8009d94:	6862      	ldr	r2, [r4, #4]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d9c:	6021      	str	r1, [r4, #0]
 8009d9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009da2:	bd70      	pop	{r4, r5, r6, pc}
 8009da4:	0800bc0e 	.word	0x0800bc0e
 8009da8:	0800bc8e 	.word	0x0800bc8e

08009dac <__multadd>:
 8009dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db0:	690d      	ldr	r5, [r1, #16]
 8009db2:	4607      	mov	r7, r0
 8009db4:	460c      	mov	r4, r1
 8009db6:	461e      	mov	r6, r3
 8009db8:	f101 0c14 	add.w	ip, r1, #20
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	f8dc 3000 	ldr.w	r3, [ip]
 8009dc2:	b299      	uxth	r1, r3
 8009dc4:	fb02 6101 	mla	r1, r2, r1, r6
 8009dc8:	0c1e      	lsrs	r6, r3, #16
 8009dca:	0c0b      	lsrs	r3, r1, #16
 8009dcc:	fb02 3306 	mla	r3, r2, r6, r3
 8009dd0:	b289      	uxth	r1, r1
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009dd8:	4285      	cmp	r5, r0
 8009dda:	f84c 1b04 	str.w	r1, [ip], #4
 8009dde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009de2:	dcec      	bgt.n	8009dbe <__multadd+0x12>
 8009de4:	b30e      	cbz	r6, 8009e2a <__multadd+0x7e>
 8009de6:	68a3      	ldr	r3, [r4, #8]
 8009de8:	42ab      	cmp	r3, r5
 8009dea:	dc19      	bgt.n	8009e20 <__multadd+0x74>
 8009dec:	6861      	ldr	r1, [r4, #4]
 8009dee:	4638      	mov	r0, r7
 8009df0:	3101      	adds	r1, #1
 8009df2:	f7ff ff79 	bl	8009ce8 <_Balloc>
 8009df6:	4680      	mov	r8, r0
 8009df8:	b928      	cbnz	r0, 8009e06 <__multadd+0x5a>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	4b0c      	ldr	r3, [pc, #48]	; (8009e30 <__multadd+0x84>)
 8009dfe:	480d      	ldr	r0, [pc, #52]	; (8009e34 <__multadd+0x88>)
 8009e00:	21ba      	movs	r1, #186	; 0xba
 8009e02:	f000 fbb9 	bl	800a578 <__assert_func>
 8009e06:	6922      	ldr	r2, [r4, #16]
 8009e08:	3202      	adds	r2, #2
 8009e0a:	f104 010c 	add.w	r1, r4, #12
 8009e0e:	0092      	lsls	r2, r2, #2
 8009e10:	300c      	adds	r0, #12
 8009e12:	f7fe ffcc 	bl	8008dae <memcpy>
 8009e16:	4621      	mov	r1, r4
 8009e18:	4638      	mov	r0, r7
 8009e1a:	f7ff ffa5 	bl	8009d68 <_Bfree>
 8009e1e:	4644      	mov	r4, r8
 8009e20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e24:	3501      	adds	r5, #1
 8009e26:	615e      	str	r6, [r3, #20]
 8009e28:	6125      	str	r5, [r4, #16]
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e30:	0800bc7d 	.word	0x0800bc7d
 8009e34:	0800bc8e 	.word	0x0800bc8e

08009e38 <__hi0bits>:
 8009e38:	0c03      	lsrs	r3, r0, #16
 8009e3a:	041b      	lsls	r3, r3, #16
 8009e3c:	b9d3      	cbnz	r3, 8009e74 <__hi0bits+0x3c>
 8009e3e:	0400      	lsls	r0, r0, #16
 8009e40:	2310      	movs	r3, #16
 8009e42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e46:	bf04      	itt	eq
 8009e48:	0200      	lsleq	r0, r0, #8
 8009e4a:	3308      	addeq	r3, #8
 8009e4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e50:	bf04      	itt	eq
 8009e52:	0100      	lsleq	r0, r0, #4
 8009e54:	3304      	addeq	r3, #4
 8009e56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e5a:	bf04      	itt	eq
 8009e5c:	0080      	lsleq	r0, r0, #2
 8009e5e:	3302      	addeq	r3, #2
 8009e60:	2800      	cmp	r0, #0
 8009e62:	db05      	blt.n	8009e70 <__hi0bits+0x38>
 8009e64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e68:	f103 0301 	add.w	r3, r3, #1
 8009e6c:	bf08      	it	eq
 8009e6e:	2320      	moveq	r3, #32
 8009e70:	4618      	mov	r0, r3
 8009e72:	4770      	bx	lr
 8009e74:	2300      	movs	r3, #0
 8009e76:	e7e4      	b.n	8009e42 <__hi0bits+0xa>

08009e78 <__lo0bits>:
 8009e78:	6803      	ldr	r3, [r0, #0]
 8009e7a:	f013 0207 	ands.w	r2, r3, #7
 8009e7e:	d00c      	beq.n	8009e9a <__lo0bits+0x22>
 8009e80:	07d9      	lsls	r1, r3, #31
 8009e82:	d422      	bmi.n	8009eca <__lo0bits+0x52>
 8009e84:	079a      	lsls	r2, r3, #30
 8009e86:	bf49      	itett	mi
 8009e88:	085b      	lsrmi	r3, r3, #1
 8009e8a:	089b      	lsrpl	r3, r3, #2
 8009e8c:	6003      	strmi	r3, [r0, #0]
 8009e8e:	2201      	movmi	r2, #1
 8009e90:	bf5c      	itt	pl
 8009e92:	6003      	strpl	r3, [r0, #0]
 8009e94:	2202      	movpl	r2, #2
 8009e96:	4610      	mov	r0, r2
 8009e98:	4770      	bx	lr
 8009e9a:	b299      	uxth	r1, r3
 8009e9c:	b909      	cbnz	r1, 8009ea2 <__lo0bits+0x2a>
 8009e9e:	0c1b      	lsrs	r3, r3, #16
 8009ea0:	2210      	movs	r2, #16
 8009ea2:	b2d9      	uxtb	r1, r3
 8009ea4:	b909      	cbnz	r1, 8009eaa <__lo0bits+0x32>
 8009ea6:	3208      	adds	r2, #8
 8009ea8:	0a1b      	lsrs	r3, r3, #8
 8009eaa:	0719      	lsls	r1, r3, #28
 8009eac:	bf04      	itt	eq
 8009eae:	091b      	lsreq	r3, r3, #4
 8009eb0:	3204      	addeq	r2, #4
 8009eb2:	0799      	lsls	r1, r3, #30
 8009eb4:	bf04      	itt	eq
 8009eb6:	089b      	lsreq	r3, r3, #2
 8009eb8:	3202      	addeq	r2, #2
 8009eba:	07d9      	lsls	r1, r3, #31
 8009ebc:	d403      	bmi.n	8009ec6 <__lo0bits+0x4e>
 8009ebe:	085b      	lsrs	r3, r3, #1
 8009ec0:	f102 0201 	add.w	r2, r2, #1
 8009ec4:	d003      	beq.n	8009ece <__lo0bits+0x56>
 8009ec6:	6003      	str	r3, [r0, #0]
 8009ec8:	e7e5      	b.n	8009e96 <__lo0bits+0x1e>
 8009eca:	2200      	movs	r2, #0
 8009ecc:	e7e3      	b.n	8009e96 <__lo0bits+0x1e>
 8009ece:	2220      	movs	r2, #32
 8009ed0:	e7e1      	b.n	8009e96 <__lo0bits+0x1e>
	...

08009ed4 <__i2b>:
 8009ed4:	b510      	push	{r4, lr}
 8009ed6:	460c      	mov	r4, r1
 8009ed8:	2101      	movs	r1, #1
 8009eda:	f7ff ff05 	bl	8009ce8 <_Balloc>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	b928      	cbnz	r0, 8009eee <__i2b+0x1a>
 8009ee2:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <__i2b+0x24>)
 8009ee4:	4805      	ldr	r0, [pc, #20]	; (8009efc <__i2b+0x28>)
 8009ee6:	f240 1145 	movw	r1, #325	; 0x145
 8009eea:	f000 fb45 	bl	800a578 <__assert_func>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	6144      	str	r4, [r0, #20]
 8009ef2:	6103      	str	r3, [r0, #16]
 8009ef4:	bd10      	pop	{r4, pc}
 8009ef6:	bf00      	nop
 8009ef8:	0800bc7d 	.word	0x0800bc7d
 8009efc:	0800bc8e 	.word	0x0800bc8e

08009f00 <__multiply>:
 8009f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f04:	4691      	mov	r9, r2
 8009f06:	690a      	ldr	r2, [r1, #16]
 8009f08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	bfb8      	it	lt
 8009f10:	460b      	movlt	r3, r1
 8009f12:	460c      	mov	r4, r1
 8009f14:	bfbc      	itt	lt
 8009f16:	464c      	movlt	r4, r9
 8009f18:	4699      	movlt	r9, r3
 8009f1a:	6927      	ldr	r7, [r4, #16]
 8009f1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f20:	68a3      	ldr	r3, [r4, #8]
 8009f22:	6861      	ldr	r1, [r4, #4]
 8009f24:	eb07 060a 	add.w	r6, r7, sl
 8009f28:	42b3      	cmp	r3, r6
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	bfb8      	it	lt
 8009f2e:	3101      	addlt	r1, #1
 8009f30:	f7ff feda 	bl	8009ce8 <_Balloc>
 8009f34:	b930      	cbnz	r0, 8009f44 <__multiply+0x44>
 8009f36:	4602      	mov	r2, r0
 8009f38:	4b44      	ldr	r3, [pc, #272]	; (800a04c <__multiply+0x14c>)
 8009f3a:	4845      	ldr	r0, [pc, #276]	; (800a050 <__multiply+0x150>)
 8009f3c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009f40:	f000 fb1a 	bl	800a578 <__assert_func>
 8009f44:	f100 0514 	add.w	r5, r0, #20
 8009f48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009f4c:	462b      	mov	r3, r5
 8009f4e:	2200      	movs	r2, #0
 8009f50:	4543      	cmp	r3, r8
 8009f52:	d321      	bcc.n	8009f98 <__multiply+0x98>
 8009f54:	f104 0314 	add.w	r3, r4, #20
 8009f58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009f5c:	f109 0314 	add.w	r3, r9, #20
 8009f60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009f64:	9202      	str	r2, [sp, #8]
 8009f66:	1b3a      	subs	r2, r7, r4
 8009f68:	3a15      	subs	r2, #21
 8009f6a:	f022 0203 	bic.w	r2, r2, #3
 8009f6e:	3204      	adds	r2, #4
 8009f70:	f104 0115 	add.w	r1, r4, #21
 8009f74:	428f      	cmp	r7, r1
 8009f76:	bf38      	it	cc
 8009f78:	2204      	movcc	r2, #4
 8009f7a:	9201      	str	r2, [sp, #4]
 8009f7c:	9a02      	ldr	r2, [sp, #8]
 8009f7e:	9303      	str	r3, [sp, #12]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d80c      	bhi.n	8009f9e <__multiply+0x9e>
 8009f84:	2e00      	cmp	r6, #0
 8009f86:	dd03      	ble.n	8009f90 <__multiply+0x90>
 8009f88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d05b      	beq.n	800a048 <__multiply+0x148>
 8009f90:	6106      	str	r6, [r0, #16]
 8009f92:	b005      	add	sp, #20
 8009f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f98:	f843 2b04 	str.w	r2, [r3], #4
 8009f9c:	e7d8      	b.n	8009f50 <__multiply+0x50>
 8009f9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009fa2:	f1ba 0f00 	cmp.w	sl, #0
 8009fa6:	d024      	beq.n	8009ff2 <__multiply+0xf2>
 8009fa8:	f104 0e14 	add.w	lr, r4, #20
 8009fac:	46a9      	mov	r9, r5
 8009fae:	f04f 0c00 	mov.w	ip, #0
 8009fb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009fb6:	f8d9 1000 	ldr.w	r1, [r9]
 8009fba:	fa1f fb82 	uxth.w	fp, r2
 8009fbe:	b289      	uxth	r1, r1
 8009fc0:	fb0a 110b 	mla	r1, sl, fp, r1
 8009fc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009fc8:	f8d9 2000 	ldr.w	r2, [r9]
 8009fcc:	4461      	add	r1, ip
 8009fce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fd2:	fb0a c20b 	mla	r2, sl, fp, ip
 8009fd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009fda:	b289      	uxth	r1, r1
 8009fdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fe0:	4577      	cmp	r7, lr
 8009fe2:	f849 1b04 	str.w	r1, [r9], #4
 8009fe6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009fea:	d8e2      	bhi.n	8009fb2 <__multiply+0xb2>
 8009fec:	9a01      	ldr	r2, [sp, #4]
 8009fee:	f845 c002 	str.w	ip, [r5, r2]
 8009ff2:	9a03      	ldr	r2, [sp, #12]
 8009ff4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	f1b9 0f00 	cmp.w	r9, #0
 8009ffe:	d021      	beq.n	800a044 <__multiply+0x144>
 800a000:	6829      	ldr	r1, [r5, #0]
 800a002:	f104 0c14 	add.w	ip, r4, #20
 800a006:	46ae      	mov	lr, r5
 800a008:	f04f 0a00 	mov.w	sl, #0
 800a00c:	f8bc b000 	ldrh.w	fp, [ip]
 800a010:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a014:	fb09 220b 	mla	r2, r9, fp, r2
 800a018:	4452      	add	r2, sl
 800a01a:	b289      	uxth	r1, r1
 800a01c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a020:	f84e 1b04 	str.w	r1, [lr], #4
 800a024:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a028:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a02c:	f8be 1000 	ldrh.w	r1, [lr]
 800a030:	fb09 110a 	mla	r1, r9, sl, r1
 800a034:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a038:	4567      	cmp	r7, ip
 800a03a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a03e:	d8e5      	bhi.n	800a00c <__multiply+0x10c>
 800a040:	9a01      	ldr	r2, [sp, #4]
 800a042:	50a9      	str	r1, [r5, r2]
 800a044:	3504      	adds	r5, #4
 800a046:	e799      	b.n	8009f7c <__multiply+0x7c>
 800a048:	3e01      	subs	r6, #1
 800a04a:	e79b      	b.n	8009f84 <__multiply+0x84>
 800a04c:	0800bc7d 	.word	0x0800bc7d
 800a050:	0800bc8e 	.word	0x0800bc8e

0800a054 <__pow5mult>:
 800a054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a058:	4615      	mov	r5, r2
 800a05a:	f012 0203 	ands.w	r2, r2, #3
 800a05e:	4606      	mov	r6, r0
 800a060:	460f      	mov	r7, r1
 800a062:	d007      	beq.n	800a074 <__pow5mult+0x20>
 800a064:	4c25      	ldr	r4, [pc, #148]	; (800a0fc <__pow5mult+0xa8>)
 800a066:	3a01      	subs	r2, #1
 800a068:	2300      	movs	r3, #0
 800a06a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a06e:	f7ff fe9d 	bl	8009dac <__multadd>
 800a072:	4607      	mov	r7, r0
 800a074:	10ad      	asrs	r5, r5, #2
 800a076:	d03d      	beq.n	800a0f4 <__pow5mult+0xa0>
 800a078:	69f4      	ldr	r4, [r6, #28]
 800a07a:	b97c      	cbnz	r4, 800a09c <__pow5mult+0x48>
 800a07c:	2010      	movs	r0, #16
 800a07e:	f7ff fd6d 	bl	8009b5c <malloc>
 800a082:	4602      	mov	r2, r0
 800a084:	61f0      	str	r0, [r6, #28]
 800a086:	b928      	cbnz	r0, 800a094 <__pow5mult+0x40>
 800a088:	4b1d      	ldr	r3, [pc, #116]	; (800a100 <__pow5mult+0xac>)
 800a08a:	481e      	ldr	r0, [pc, #120]	; (800a104 <__pow5mult+0xb0>)
 800a08c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a090:	f000 fa72 	bl	800a578 <__assert_func>
 800a094:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a098:	6004      	str	r4, [r0, #0]
 800a09a:	60c4      	str	r4, [r0, #12]
 800a09c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a0a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0a4:	b94c      	cbnz	r4, 800a0ba <__pow5mult+0x66>
 800a0a6:	f240 2171 	movw	r1, #625	; 0x271
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	f7ff ff12 	bl	8009ed4 <__i2b>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	6003      	str	r3, [r0, #0]
 800a0ba:	f04f 0900 	mov.w	r9, #0
 800a0be:	07eb      	lsls	r3, r5, #31
 800a0c0:	d50a      	bpl.n	800a0d8 <__pow5mult+0x84>
 800a0c2:	4639      	mov	r1, r7
 800a0c4:	4622      	mov	r2, r4
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f7ff ff1a 	bl	8009f00 <__multiply>
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	4680      	mov	r8, r0
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f7ff fe49 	bl	8009d68 <_Bfree>
 800a0d6:	4647      	mov	r7, r8
 800a0d8:	106d      	asrs	r5, r5, #1
 800a0da:	d00b      	beq.n	800a0f4 <__pow5mult+0xa0>
 800a0dc:	6820      	ldr	r0, [r4, #0]
 800a0de:	b938      	cbnz	r0, 800a0f0 <__pow5mult+0x9c>
 800a0e0:	4622      	mov	r2, r4
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f7ff ff0b 	bl	8009f00 <__multiply>
 800a0ea:	6020      	str	r0, [r4, #0]
 800a0ec:	f8c0 9000 	str.w	r9, [r0]
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	e7e4      	b.n	800a0be <__pow5mult+0x6a>
 800a0f4:	4638      	mov	r0, r7
 800a0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0fa:	bf00      	nop
 800a0fc:	0800bdd8 	.word	0x0800bdd8
 800a100:	0800bc0e 	.word	0x0800bc0e
 800a104:	0800bc8e 	.word	0x0800bc8e

0800a108 <__lshift>:
 800a108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a10c:	460c      	mov	r4, r1
 800a10e:	6849      	ldr	r1, [r1, #4]
 800a110:	6923      	ldr	r3, [r4, #16]
 800a112:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a116:	68a3      	ldr	r3, [r4, #8]
 800a118:	4607      	mov	r7, r0
 800a11a:	4691      	mov	r9, r2
 800a11c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a120:	f108 0601 	add.w	r6, r8, #1
 800a124:	42b3      	cmp	r3, r6
 800a126:	db0b      	blt.n	800a140 <__lshift+0x38>
 800a128:	4638      	mov	r0, r7
 800a12a:	f7ff fddd 	bl	8009ce8 <_Balloc>
 800a12e:	4605      	mov	r5, r0
 800a130:	b948      	cbnz	r0, 800a146 <__lshift+0x3e>
 800a132:	4602      	mov	r2, r0
 800a134:	4b28      	ldr	r3, [pc, #160]	; (800a1d8 <__lshift+0xd0>)
 800a136:	4829      	ldr	r0, [pc, #164]	; (800a1dc <__lshift+0xd4>)
 800a138:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a13c:	f000 fa1c 	bl	800a578 <__assert_func>
 800a140:	3101      	adds	r1, #1
 800a142:	005b      	lsls	r3, r3, #1
 800a144:	e7ee      	b.n	800a124 <__lshift+0x1c>
 800a146:	2300      	movs	r3, #0
 800a148:	f100 0114 	add.w	r1, r0, #20
 800a14c:	f100 0210 	add.w	r2, r0, #16
 800a150:	4618      	mov	r0, r3
 800a152:	4553      	cmp	r3, sl
 800a154:	db33      	blt.n	800a1be <__lshift+0xb6>
 800a156:	6920      	ldr	r0, [r4, #16]
 800a158:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a15c:	f104 0314 	add.w	r3, r4, #20
 800a160:	f019 091f 	ands.w	r9, r9, #31
 800a164:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a168:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a16c:	d02b      	beq.n	800a1c6 <__lshift+0xbe>
 800a16e:	f1c9 0e20 	rsb	lr, r9, #32
 800a172:	468a      	mov	sl, r1
 800a174:	2200      	movs	r2, #0
 800a176:	6818      	ldr	r0, [r3, #0]
 800a178:	fa00 f009 	lsl.w	r0, r0, r9
 800a17c:	4310      	orrs	r0, r2
 800a17e:	f84a 0b04 	str.w	r0, [sl], #4
 800a182:	f853 2b04 	ldr.w	r2, [r3], #4
 800a186:	459c      	cmp	ip, r3
 800a188:	fa22 f20e 	lsr.w	r2, r2, lr
 800a18c:	d8f3      	bhi.n	800a176 <__lshift+0x6e>
 800a18e:	ebac 0304 	sub.w	r3, ip, r4
 800a192:	3b15      	subs	r3, #21
 800a194:	f023 0303 	bic.w	r3, r3, #3
 800a198:	3304      	adds	r3, #4
 800a19a:	f104 0015 	add.w	r0, r4, #21
 800a19e:	4584      	cmp	ip, r0
 800a1a0:	bf38      	it	cc
 800a1a2:	2304      	movcc	r3, #4
 800a1a4:	50ca      	str	r2, [r1, r3]
 800a1a6:	b10a      	cbz	r2, 800a1ac <__lshift+0xa4>
 800a1a8:	f108 0602 	add.w	r6, r8, #2
 800a1ac:	3e01      	subs	r6, #1
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	612e      	str	r6, [r5, #16]
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	f7ff fdd8 	bl	8009d68 <_Bfree>
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1be:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	e7c5      	b.n	800a152 <__lshift+0x4a>
 800a1c6:	3904      	subs	r1, #4
 800a1c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1d0:	459c      	cmp	ip, r3
 800a1d2:	d8f9      	bhi.n	800a1c8 <__lshift+0xc0>
 800a1d4:	e7ea      	b.n	800a1ac <__lshift+0xa4>
 800a1d6:	bf00      	nop
 800a1d8:	0800bc7d 	.word	0x0800bc7d
 800a1dc:	0800bc8e 	.word	0x0800bc8e

0800a1e0 <__mcmp>:
 800a1e0:	b530      	push	{r4, r5, lr}
 800a1e2:	6902      	ldr	r2, [r0, #16]
 800a1e4:	690c      	ldr	r4, [r1, #16]
 800a1e6:	1b12      	subs	r2, r2, r4
 800a1e8:	d10e      	bne.n	800a208 <__mcmp+0x28>
 800a1ea:	f100 0314 	add.w	r3, r0, #20
 800a1ee:	3114      	adds	r1, #20
 800a1f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a1f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a1f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a1fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a200:	42a5      	cmp	r5, r4
 800a202:	d003      	beq.n	800a20c <__mcmp+0x2c>
 800a204:	d305      	bcc.n	800a212 <__mcmp+0x32>
 800a206:	2201      	movs	r2, #1
 800a208:	4610      	mov	r0, r2
 800a20a:	bd30      	pop	{r4, r5, pc}
 800a20c:	4283      	cmp	r3, r0
 800a20e:	d3f3      	bcc.n	800a1f8 <__mcmp+0x18>
 800a210:	e7fa      	b.n	800a208 <__mcmp+0x28>
 800a212:	f04f 32ff 	mov.w	r2, #4294967295
 800a216:	e7f7      	b.n	800a208 <__mcmp+0x28>

0800a218 <__mdiff>:
 800a218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	460c      	mov	r4, r1
 800a21e:	4606      	mov	r6, r0
 800a220:	4611      	mov	r1, r2
 800a222:	4620      	mov	r0, r4
 800a224:	4690      	mov	r8, r2
 800a226:	f7ff ffdb 	bl	800a1e0 <__mcmp>
 800a22a:	1e05      	subs	r5, r0, #0
 800a22c:	d110      	bne.n	800a250 <__mdiff+0x38>
 800a22e:	4629      	mov	r1, r5
 800a230:	4630      	mov	r0, r6
 800a232:	f7ff fd59 	bl	8009ce8 <_Balloc>
 800a236:	b930      	cbnz	r0, 800a246 <__mdiff+0x2e>
 800a238:	4b3a      	ldr	r3, [pc, #232]	; (800a324 <__mdiff+0x10c>)
 800a23a:	4602      	mov	r2, r0
 800a23c:	f240 2137 	movw	r1, #567	; 0x237
 800a240:	4839      	ldr	r0, [pc, #228]	; (800a328 <__mdiff+0x110>)
 800a242:	f000 f999 	bl	800a578 <__assert_func>
 800a246:	2301      	movs	r3, #1
 800a248:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a24c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a250:	bfa4      	itt	ge
 800a252:	4643      	movge	r3, r8
 800a254:	46a0      	movge	r8, r4
 800a256:	4630      	mov	r0, r6
 800a258:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a25c:	bfa6      	itte	ge
 800a25e:	461c      	movge	r4, r3
 800a260:	2500      	movge	r5, #0
 800a262:	2501      	movlt	r5, #1
 800a264:	f7ff fd40 	bl	8009ce8 <_Balloc>
 800a268:	b920      	cbnz	r0, 800a274 <__mdiff+0x5c>
 800a26a:	4b2e      	ldr	r3, [pc, #184]	; (800a324 <__mdiff+0x10c>)
 800a26c:	4602      	mov	r2, r0
 800a26e:	f240 2145 	movw	r1, #581	; 0x245
 800a272:	e7e5      	b.n	800a240 <__mdiff+0x28>
 800a274:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a278:	6926      	ldr	r6, [r4, #16]
 800a27a:	60c5      	str	r5, [r0, #12]
 800a27c:	f104 0914 	add.w	r9, r4, #20
 800a280:	f108 0514 	add.w	r5, r8, #20
 800a284:	f100 0e14 	add.w	lr, r0, #20
 800a288:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a28c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a290:	f108 0210 	add.w	r2, r8, #16
 800a294:	46f2      	mov	sl, lr
 800a296:	2100      	movs	r1, #0
 800a298:	f859 3b04 	ldr.w	r3, [r9], #4
 800a29c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a2a0:	fa11 f88b 	uxtah	r8, r1, fp
 800a2a4:	b299      	uxth	r1, r3
 800a2a6:	0c1b      	lsrs	r3, r3, #16
 800a2a8:	eba8 0801 	sub.w	r8, r8, r1
 800a2ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a2b0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a2b4:	fa1f f888 	uxth.w	r8, r8
 800a2b8:	1419      	asrs	r1, r3, #16
 800a2ba:	454e      	cmp	r6, r9
 800a2bc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a2c0:	f84a 3b04 	str.w	r3, [sl], #4
 800a2c4:	d8e8      	bhi.n	800a298 <__mdiff+0x80>
 800a2c6:	1b33      	subs	r3, r6, r4
 800a2c8:	3b15      	subs	r3, #21
 800a2ca:	f023 0303 	bic.w	r3, r3, #3
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	3415      	adds	r4, #21
 800a2d2:	42a6      	cmp	r6, r4
 800a2d4:	bf38      	it	cc
 800a2d6:	2304      	movcc	r3, #4
 800a2d8:	441d      	add	r5, r3
 800a2da:	4473      	add	r3, lr
 800a2dc:	469e      	mov	lr, r3
 800a2de:	462e      	mov	r6, r5
 800a2e0:	4566      	cmp	r6, ip
 800a2e2:	d30e      	bcc.n	800a302 <__mdiff+0xea>
 800a2e4:	f10c 0203 	add.w	r2, ip, #3
 800a2e8:	1b52      	subs	r2, r2, r5
 800a2ea:	f022 0203 	bic.w	r2, r2, #3
 800a2ee:	3d03      	subs	r5, #3
 800a2f0:	45ac      	cmp	ip, r5
 800a2f2:	bf38      	it	cc
 800a2f4:	2200      	movcc	r2, #0
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a2fc:	b17a      	cbz	r2, 800a31e <__mdiff+0x106>
 800a2fe:	6107      	str	r7, [r0, #16]
 800a300:	e7a4      	b.n	800a24c <__mdiff+0x34>
 800a302:	f856 8b04 	ldr.w	r8, [r6], #4
 800a306:	fa11 f288 	uxtah	r2, r1, r8
 800a30a:	1414      	asrs	r4, r2, #16
 800a30c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a310:	b292      	uxth	r2, r2
 800a312:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a316:	f84e 2b04 	str.w	r2, [lr], #4
 800a31a:	1421      	asrs	r1, r4, #16
 800a31c:	e7e0      	b.n	800a2e0 <__mdiff+0xc8>
 800a31e:	3f01      	subs	r7, #1
 800a320:	e7ea      	b.n	800a2f8 <__mdiff+0xe0>
 800a322:	bf00      	nop
 800a324:	0800bc7d 	.word	0x0800bc7d
 800a328:	0800bc8e 	.word	0x0800bc8e

0800a32c <__d2b>:
 800a32c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a330:	460f      	mov	r7, r1
 800a332:	2101      	movs	r1, #1
 800a334:	ec59 8b10 	vmov	r8, r9, d0
 800a338:	4616      	mov	r6, r2
 800a33a:	f7ff fcd5 	bl	8009ce8 <_Balloc>
 800a33e:	4604      	mov	r4, r0
 800a340:	b930      	cbnz	r0, 800a350 <__d2b+0x24>
 800a342:	4602      	mov	r2, r0
 800a344:	4b24      	ldr	r3, [pc, #144]	; (800a3d8 <__d2b+0xac>)
 800a346:	4825      	ldr	r0, [pc, #148]	; (800a3dc <__d2b+0xb0>)
 800a348:	f240 310f 	movw	r1, #783	; 0x30f
 800a34c:	f000 f914 	bl	800a578 <__assert_func>
 800a350:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a354:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a358:	bb2d      	cbnz	r5, 800a3a6 <__d2b+0x7a>
 800a35a:	9301      	str	r3, [sp, #4]
 800a35c:	f1b8 0300 	subs.w	r3, r8, #0
 800a360:	d026      	beq.n	800a3b0 <__d2b+0x84>
 800a362:	4668      	mov	r0, sp
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	f7ff fd87 	bl	8009e78 <__lo0bits>
 800a36a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a36e:	b1e8      	cbz	r0, 800a3ac <__d2b+0x80>
 800a370:	f1c0 0320 	rsb	r3, r0, #32
 800a374:	fa02 f303 	lsl.w	r3, r2, r3
 800a378:	430b      	orrs	r3, r1
 800a37a:	40c2      	lsrs	r2, r0
 800a37c:	6163      	str	r3, [r4, #20]
 800a37e:	9201      	str	r2, [sp, #4]
 800a380:	9b01      	ldr	r3, [sp, #4]
 800a382:	61a3      	str	r3, [r4, #24]
 800a384:	2b00      	cmp	r3, #0
 800a386:	bf14      	ite	ne
 800a388:	2202      	movne	r2, #2
 800a38a:	2201      	moveq	r2, #1
 800a38c:	6122      	str	r2, [r4, #16]
 800a38e:	b1bd      	cbz	r5, 800a3c0 <__d2b+0x94>
 800a390:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a394:	4405      	add	r5, r0
 800a396:	603d      	str	r5, [r7, #0]
 800a398:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a39c:	6030      	str	r0, [r6, #0]
 800a39e:	4620      	mov	r0, r4
 800a3a0:	b003      	add	sp, #12
 800a3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3aa:	e7d6      	b.n	800a35a <__d2b+0x2e>
 800a3ac:	6161      	str	r1, [r4, #20]
 800a3ae:	e7e7      	b.n	800a380 <__d2b+0x54>
 800a3b0:	a801      	add	r0, sp, #4
 800a3b2:	f7ff fd61 	bl	8009e78 <__lo0bits>
 800a3b6:	9b01      	ldr	r3, [sp, #4]
 800a3b8:	6163      	str	r3, [r4, #20]
 800a3ba:	3020      	adds	r0, #32
 800a3bc:	2201      	movs	r2, #1
 800a3be:	e7e5      	b.n	800a38c <__d2b+0x60>
 800a3c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3c8:	6038      	str	r0, [r7, #0]
 800a3ca:	6918      	ldr	r0, [r3, #16]
 800a3cc:	f7ff fd34 	bl	8009e38 <__hi0bits>
 800a3d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3d4:	e7e2      	b.n	800a39c <__d2b+0x70>
 800a3d6:	bf00      	nop
 800a3d8:	0800bc7d 	.word	0x0800bc7d
 800a3dc:	0800bc8e 	.word	0x0800bc8e

0800a3e0 <__ascii_wctomb>:
 800a3e0:	b149      	cbz	r1, 800a3f6 <__ascii_wctomb+0x16>
 800a3e2:	2aff      	cmp	r2, #255	; 0xff
 800a3e4:	bf85      	ittet	hi
 800a3e6:	238a      	movhi	r3, #138	; 0x8a
 800a3e8:	6003      	strhi	r3, [r0, #0]
 800a3ea:	700a      	strbls	r2, [r1, #0]
 800a3ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800a3f0:	bf98      	it	ls
 800a3f2:	2001      	movls	r0, #1
 800a3f4:	4770      	bx	lr
 800a3f6:	4608      	mov	r0, r1
 800a3f8:	4770      	bx	lr
	...

0800a3fc <__sflush_r>:
 800a3fc:	898a      	ldrh	r2, [r1, #12]
 800a3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a402:	4605      	mov	r5, r0
 800a404:	0710      	lsls	r0, r2, #28
 800a406:	460c      	mov	r4, r1
 800a408:	d458      	bmi.n	800a4bc <__sflush_r+0xc0>
 800a40a:	684b      	ldr	r3, [r1, #4]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	dc05      	bgt.n	800a41c <__sflush_r+0x20>
 800a410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a412:	2b00      	cmp	r3, #0
 800a414:	dc02      	bgt.n	800a41c <__sflush_r+0x20>
 800a416:	2000      	movs	r0, #0
 800a418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a41c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a41e:	2e00      	cmp	r6, #0
 800a420:	d0f9      	beq.n	800a416 <__sflush_r+0x1a>
 800a422:	2300      	movs	r3, #0
 800a424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a428:	682f      	ldr	r7, [r5, #0]
 800a42a:	6a21      	ldr	r1, [r4, #32]
 800a42c:	602b      	str	r3, [r5, #0]
 800a42e:	d032      	beq.n	800a496 <__sflush_r+0x9a>
 800a430:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a432:	89a3      	ldrh	r3, [r4, #12]
 800a434:	075a      	lsls	r2, r3, #29
 800a436:	d505      	bpl.n	800a444 <__sflush_r+0x48>
 800a438:	6863      	ldr	r3, [r4, #4]
 800a43a:	1ac0      	subs	r0, r0, r3
 800a43c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a43e:	b10b      	cbz	r3, 800a444 <__sflush_r+0x48>
 800a440:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a442:	1ac0      	subs	r0, r0, r3
 800a444:	2300      	movs	r3, #0
 800a446:	4602      	mov	r2, r0
 800a448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a44a:	6a21      	ldr	r1, [r4, #32]
 800a44c:	4628      	mov	r0, r5
 800a44e:	47b0      	blx	r6
 800a450:	1c43      	adds	r3, r0, #1
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	d106      	bne.n	800a464 <__sflush_r+0x68>
 800a456:	6829      	ldr	r1, [r5, #0]
 800a458:	291d      	cmp	r1, #29
 800a45a:	d82b      	bhi.n	800a4b4 <__sflush_r+0xb8>
 800a45c:	4a29      	ldr	r2, [pc, #164]	; (800a504 <__sflush_r+0x108>)
 800a45e:	410a      	asrs	r2, r1
 800a460:	07d6      	lsls	r6, r2, #31
 800a462:	d427      	bmi.n	800a4b4 <__sflush_r+0xb8>
 800a464:	2200      	movs	r2, #0
 800a466:	6062      	str	r2, [r4, #4]
 800a468:	04d9      	lsls	r1, r3, #19
 800a46a:	6922      	ldr	r2, [r4, #16]
 800a46c:	6022      	str	r2, [r4, #0]
 800a46e:	d504      	bpl.n	800a47a <__sflush_r+0x7e>
 800a470:	1c42      	adds	r2, r0, #1
 800a472:	d101      	bne.n	800a478 <__sflush_r+0x7c>
 800a474:	682b      	ldr	r3, [r5, #0]
 800a476:	b903      	cbnz	r3, 800a47a <__sflush_r+0x7e>
 800a478:	6560      	str	r0, [r4, #84]	; 0x54
 800a47a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a47c:	602f      	str	r7, [r5, #0]
 800a47e:	2900      	cmp	r1, #0
 800a480:	d0c9      	beq.n	800a416 <__sflush_r+0x1a>
 800a482:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a486:	4299      	cmp	r1, r3
 800a488:	d002      	beq.n	800a490 <__sflush_r+0x94>
 800a48a:	4628      	mov	r0, r5
 800a48c:	f7ff fb1a 	bl	8009ac4 <_free_r>
 800a490:	2000      	movs	r0, #0
 800a492:	6360      	str	r0, [r4, #52]	; 0x34
 800a494:	e7c0      	b.n	800a418 <__sflush_r+0x1c>
 800a496:	2301      	movs	r3, #1
 800a498:	4628      	mov	r0, r5
 800a49a:	47b0      	blx	r6
 800a49c:	1c41      	adds	r1, r0, #1
 800a49e:	d1c8      	bne.n	800a432 <__sflush_r+0x36>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0c5      	beq.n	800a432 <__sflush_r+0x36>
 800a4a6:	2b1d      	cmp	r3, #29
 800a4a8:	d001      	beq.n	800a4ae <__sflush_r+0xb2>
 800a4aa:	2b16      	cmp	r3, #22
 800a4ac:	d101      	bne.n	800a4b2 <__sflush_r+0xb6>
 800a4ae:	602f      	str	r7, [r5, #0]
 800a4b0:	e7b1      	b.n	800a416 <__sflush_r+0x1a>
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	e7ad      	b.n	800a418 <__sflush_r+0x1c>
 800a4bc:	690f      	ldr	r7, [r1, #16]
 800a4be:	2f00      	cmp	r7, #0
 800a4c0:	d0a9      	beq.n	800a416 <__sflush_r+0x1a>
 800a4c2:	0793      	lsls	r3, r2, #30
 800a4c4:	680e      	ldr	r6, [r1, #0]
 800a4c6:	bf08      	it	eq
 800a4c8:	694b      	ldreq	r3, [r1, #20]
 800a4ca:	600f      	str	r7, [r1, #0]
 800a4cc:	bf18      	it	ne
 800a4ce:	2300      	movne	r3, #0
 800a4d0:	eba6 0807 	sub.w	r8, r6, r7
 800a4d4:	608b      	str	r3, [r1, #8]
 800a4d6:	f1b8 0f00 	cmp.w	r8, #0
 800a4da:	dd9c      	ble.n	800a416 <__sflush_r+0x1a>
 800a4dc:	6a21      	ldr	r1, [r4, #32]
 800a4de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4e0:	4643      	mov	r3, r8
 800a4e2:	463a      	mov	r2, r7
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	47b0      	blx	r6
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	dc06      	bgt.n	800a4fa <__sflush_r+0xfe>
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4f2:	81a3      	strh	r3, [r4, #12]
 800a4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f8:	e78e      	b.n	800a418 <__sflush_r+0x1c>
 800a4fa:	4407      	add	r7, r0
 800a4fc:	eba8 0800 	sub.w	r8, r8, r0
 800a500:	e7e9      	b.n	800a4d6 <__sflush_r+0xda>
 800a502:	bf00      	nop
 800a504:	dfbffffe 	.word	0xdfbffffe

0800a508 <_fflush_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	690b      	ldr	r3, [r1, #16]
 800a50c:	4605      	mov	r5, r0
 800a50e:	460c      	mov	r4, r1
 800a510:	b913      	cbnz	r3, 800a518 <_fflush_r+0x10>
 800a512:	2500      	movs	r5, #0
 800a514:	4628      	mov	r0, r5
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	b118      	cbz	r0, 800a522 <_fflush_r+0x1a>
 800a51a:	6a03      	ldr	r3, [r0, #32]
 800a51c:	b90b      	cbnz	r3, 800a522 <_fflush_r+0x1a>
 800a51e:	f7fe fb5f 	bl	8008be0 <__sinit>
 800a522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d0f3      	beq.n	800a512 <_fflush_r+0xa>
 800a52a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a52c:	07d0      	lsls	r0, r2, #31
 800a52e:	d404      	bmi.n	800a53a <_fflush_r+0x32>
 800a530:	0599      	lsls	r1, r3, #22
 800a532:	d402      	bmi.n	800a53a <_fflush_r+0x32>
 800a534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a536:	f7fe fc38 	bl	8008daa <__retarget_lock_acquire_recursive>
 800a53a:	4628      	mov	r0, r5
 800a53c:	4621      	mov	r1, r4
 800a53e:	f7ff ff5d 	bl	800a3fc <__sflush_r>
 800a542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a544:	07da      	lsls	r2, r3, #31
 800a546:	4605      	mov	r5, r0
 800a548:	d4e4      	bmi.n	800a514 <_fflush_r+0xc>
 800a54a:	89a3      	ldrh	r3, [r4, #12]
 800a54c:	059b      	lsls	r3, r3, #22
 800a54e:	d4e1      	bmi.n	800a514 <_fflush_r+0xc>
 800a550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a552:	f7fe fc2b 	bl	8008dac <__retarget_lock_release_recursive>
 800a556:	e7dd      	b.n	800a514 <_fflush_r+0xc>

0800a558 <_sbrk_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4d06      	ldr	r5, [pc, #24]	; (800a574 <_sbrk_r+0x1c>)
 800a55c:	2300      	movs	r3, #0
 800a55e:	4604      	mov	r4, r0
 800a560:	4608      	mov	r0, r1
 800a562:	602b      	str	r3, [r5, #0]
 800a564:	f001 fa76 	bl	800ba54 <_sbrk>
 800a568:	1c43      	adds	r3, r0, #1
 800a56a:	d102      	bne.n	800a572 <_sbrk_r+0x1a>
 800a56c:	682b      	ldr	r3, [r5, #0]
 800a56e:	b103      	cbz	r3, 800a572 <_sbrk_r+0x1a>
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	bd38      	pop	{r3, r4, r5, pc}
 800a574:	20000f50 	.word	0x20000f50

0800a578 <__assert_func>:
 800a578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a57a:	4614      	mov	r4, r2
 800a57c:	461a      	mov	r2, r3
 800a57e:	4b09      	ldr	r3, [pc, #36]	; (800a5a4 <__assert_func+0x2c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4605      	mov	r5, r0
 800a584:	68d8      	ldr	r0, [r3, #12]
 800a586:	b14c      	cbz	r4, 800a59c <__assert_func+0x24>
 800a588:	4b07      	ldr	r3, [pc, #28]	; (800a5a8 <__assert_func+0x30>)
 800a58a:	9100      	str	r1, [sp, #0]
 800a58c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a590:	4906      	ldr	r1, [pc, #24]	; (800a5ac <__assert_func+0x34>)
 800a592:	462b      	mov	r3, r5
 800a594:	f000 f824 	bl	800a5e0 <fiprintf>
 800a598:	f000 f834 	bl	800a604 <abort>
 800a59c:	4b04      	ldr	r3, [pc, #16]	; (800a5b0 <__assert_func+0x38>)
 800a59e:	461c      	mov	r4, r3
 800a5a0:	e7f3      	b.n	800a58a <__assert_func+0x12>
 800a5a2:	bf00      	nop
 800a5a4:	200001d0 	.word	0x200001d0
 800a5a8:	0800bde4 	.word	0x0800bde4
 800a5ac:	0800bdf1 	.word	0x0800bdf1
 800a5b0:	0800be1f 	.word	0x0800be1f

0800a5b4 <_calloc_r>:
 800a5b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5b6:	fba1 2402 	umull	r2, r4, r1, r2
 800a5ba:	b94c      	cbnz	r4, 800a5d0 <_calloc_r+0x1c>
 800a5bc:	4611      	mov	r1, r2
 800a5be:	9201      	str	r2, [sp, #4]
 800a5c0:	f7ff faf4 	bl	8009bac <_malloc_r>
 800a5c4:	9a01      	ldr	r2, [sp, #4]
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	b930      	cbnz	r0, 800a5d8 <_calloc_r+0x24>
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	b003      	add	sp, #12
 800a5ce:	bd30      	pop	{r4, r5, pc}
 800a5d0:	220c      	movs	r2, #12
 800a5d2:	6002      	str	r2, [r0, #0]
 800a5d4:	2500      	movs	r5, #0
 800a5d6:	e7f8      	b.n	800a5ca <_calloc_r+0x16>
 800a5d8:	4621      	mov	r1, r4
 800a5da:	f7fe fb7a 	bl	8008cd2 <memset>
 800a5de:	e7f4      	b.n	800a5ca <_calloc_r+0x16>

0800a5e0 <fiprintf>:
 800a5e0:	b40e      	push	{r1, r2, r3}
 800a5e2:	b503      	push	{r0, r1, lr}
 800a5e4:	4601      	mov	r1, r0
 800a5e6:	ab03      	add	r3, sp, #12
 800a5e8:	4805      	ldr	r0, [pc, #20]	; (800a600 <fiprintf+0x20>)
 800a5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ee:	6800      	ldr	r0, [r0, #0]
 800a5f0:	9301      	str	r3, [sp, #4]
 800a5f2:	f000 f837 	bl	800a664 <_vfiprintf_r>
 800a5f6:	b002      	add	sp, #8
 800a5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5fc:	b003      	add	sp, #12
 800a5fe:	4770      	bx	lr
 800a600:	200001d0 	.word	0x200001d0

0800a604 <abort>:
 800a604:	b508      	push	{r3, lr}
 800a606:	2006      	movs	r0, #6
 800a608:	f000 fa04 	bl	800aa14 <raise>
 800a60c:	2001      	movs	r0, #1
 800a60e:	f7f7 fff9 	bl	8002604 <_exit>

0800a612 <__sfputc_r>:
 800a612:	6893      	ldr	r3, [r2, #8]
 800a614:	3b01      	subs	r3, #1
 800a616:	2b00      	cmp	r3, #0
 800a618:	b410      	push	{r4}
 800a61a:	6093      	str	r3, [r2, #8]
 800a61c:	da08      	bge.n	800a630 <__sfputc_r+0x1e>
 800a61e:	6994      	ldr	r4, [r2, #24]
 800a620:	42a3      	cmp	r3, r4
 800a622:	db01      	blt.n	800a628 <__sfputc_r+0x16>
 800a624:	290a      	cmp	r1, #10
 800a626:	d103      	bne.n	800a630 <__sfputc_r+0x1e>
 800a628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a62c:	f000 b934 	b.w	800a898 <__swbuf_r>
 800a630:	6813      	ldr	r3, [r2, #0]
 800a632:	1c58      	adds	r0, r3, #1
 800a634:	6010      	str	r0, [r2, #0]
 800a636:	7019      	strb	r1, [r3, #0]
 800a638:	4608      	mov	r0, r1
 800a63a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <__sfputs_r>:
 800a640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a642:	4606      	mov	r6, r0
 800a644:	460f      	mov	r7, r1
 800a646:	4614      	mov	r4, r2
 800a648:	18d5      	adds	r5, r2, r3
 800a64a:	42ac      	cmp	r4, r5
 800a64c:	d101      	bne.n	800a652 <__sfputs_r+0x12>
 800a64e:	2000      	movs	r0, #0
 800a650:	e007      	b.n	800a662 <__sfputs_r+0x22>
 800a652:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a656:	463a      	mov	r2, r7
 800a658:	4630      	mov	r0, r6
 800a65a:	f7ff ffda 	bl	800a612 <__sfputc_r>
 800a65e:	1c43      	adds	r3, r0, #1
 800a660:	d1f3      	bne.n	800a64a <__sfputs_r+0xa>
 800a662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a664 <_vfiprintf_r>:
 800a664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a668:	460d      	mov	r5, r1
 800a66a:	b09d      	sub	sp, #116	; 0x74
 800a66c:	4614      	mov	r4, r2
 800a66e:	4698      	mov	r8, r3
 800a670:	4606      	mov	r6, r0
 800a672:	b118      	cbz	r0, 800a67c <_vfiprintf_r+0x18>
 800a674:	6a03      	ldr	r3, [r0, #32]
 800a676:	b90b      	cbnz	r3, 800a67c <_vfiprintf_r+0x18>
 800a678:	f7fe fab2 	bl	8008be0 <__sinit>
 800a67c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a67e:	07d9      	lsls	r1, r3, #31
 800a680:	d405      	bmi.n	800a68e <_vfiprintf_r+0x2a>
 800a682:	89ab      	ldrh	r3, [r5, #12]
 800a684:	059a      	lsls	r2, r3, #22
 800a686:	d402      	bmi.n	800a68e <_vfiprintf_r+0x2a>
 800a688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a68a:	f7fe fb8e 	bl	8008daa <__retarget_lock_acquire_recursive>
 800a68e:	89ab      	ldrh	r3, [r5, #12]
 800a690:	071b      	lsls	r3, r3, #28
 800a692:	d501      	bpl.n	800a698 <_vfiprintf_r+0x34>
 800a694:	692b      	ldr	r3, [r5, #16]
 800a696:	b99b      	cbnz	r3, 800a6c0 <_vfiprintf_r+0x5c>
 800a698:	4629      	mov	r1, r5
 800a69a:	4630      	mov	r0, r6
 800a69c:	f000 f93a 	bl	800a914 <__swsetup_r>
 800a6a0:	b170      	cbz	r0, 800a6c0 <_vfiprintf_r+0x5c>
 800a6a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6a4:	07dc      	lsls	r4, r3, #31
 800a6a6:	d504      	bpl.n	800a6b2 <_vfiprintf_r+0x4e>
 800a6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ac:	b01d      	add	sp, #116	; 0x74
 800a6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b2:	89ab      	ldrh	r3, [r5, #12]
 800a6b4:	0598      	lsls	r0, r3, #22
 800a6b6:	d4f7      	bmi.n	800a6a8 <_vfiprintf_r+0x44>
 800a6b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ba:	f7fe fb77 	bl	8008dac <__retarget_lock_release_recursive>
 800a6be:	e7f3      	b.n	800a6a8 <_vfiprintf_r+0x44>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c4:	2320      	movs	r3, #32
 800a6c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6ce:	2330      	movs	r3, #48	; 0x30
 800a6d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a884 <_vfiprintf_r+0x220>
 800a6d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6d8:	f04f 0901 	mov.w	r9, #1
 800a6dc:	4623      	mov	r3, r4
 800a6de:	469a      	mov	sl, r3
 800a6e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6e4:	b10a      	cbz	r2, 800a6ea <_vfiprintf_r+0x86>
 800a6e6:	2a25      	cmp	r2, #37	; 0x25
 800a6e8:	d1f9      	bne.n	800a6de <_vfiprintf_r+0x7a>
 800a6ea:	ebba 0b04 	subs.w	fp, sl, r4
 800a6ee:	d00b      	beq.n	800a708 <_vfiprintf_r+0xa4>
 800a6f0:	465b      	mov	r3, fp
 800a6f2:	4622      	mov	r2, r4
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	f7ff ffa2 	bl	800a640 <__sfputs_r>
 800a6fc:	3001      	adds	r0, #1
 800a6fe:	f000 80a9 	beq.w	800a854 <_vfiprintf_r+0x1f0>
 800a702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a704:	445a      	add	r2, fp
 800a706:	9209      	str	r2, [sp, #36]	; 0x24
 800a708:	f89a 3000 	ldrb.w	r3, [sl]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f000 80a1 	beq.w	800a854 <_vfiprintf_r+0x1f0>
 800a712:	2300      	movs	r3, #0
 800a714:	f04f 32ff 	mov.w	r2, #4294967295
 800a718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a71c:	f10a 0a01 	add.w	sl, sl, #1
 800a720:	9304      	str	r3, [sp, #16]
 800a722:	9307      	str	r3, [sp, #28]
 800a724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a728:	931a      	str	r3, [sp, #104]	; 0x68
 800a72a:	4654      	mov	r4, sl
 800a72c:	2205      	movs	r2, #5
 800a72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a732:	4854      	ldr	r0, [pc, #336]	; (800a884 <_vfiprintf_r+0x220>)
 800a734:	f7f5 fdbc 	bl	80002b0 <memchr>
 800a738:	9a04      	ldr	r2, [sp, #16]
 800a73a:	b9d8      	cbnz	r0, 800a774 <_vfiprintf_r+0x110>
 800a73c:	06d1      	lsls	r1, r2, #27
 800a73e:	bf44      	itt	mi
 800a740:	2320      	movmi	r3, #32
 800a742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a746:	0713      	lsls	r3, r2, #28
 800a748:	bf44      	itt	mi
 800a74a:	232b      	movmi	r3, #43	; 0x2b
 800a74c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a750:	f89a 3000 	ldrb.w	r3, [sl]
 800a754:	2b2a      	cmp	r3, #42	; 0x2a
 800a756:	d015      	beq.n	800a784 <_vfiprintf_r+0x120>
 800a758:	9a07      	ldr	r2, [sp, #28]
 800a75a:	4654      	mov	r4, sl
 800a75c:	2000      	movs	r0, #0
 800a75e:	f04f 0c0a 	mov.w	ip, #10
 800a762:	4621      	mov	r1, r4
 800a764:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a768:	3b30      	subs	r3, #48	; 0x30
 800a76a:	2b09      	cmp	r3, #9
 800a76c:	d94d      	bls.n	800a80a <_vfiprintf_r+0x1a6>
 800a76e:	b1b0      	cbz	r0, 800a79e <_vfiprintf_r+0x13a>
 800a770:	9207      	str	r2, [sp, #28]
 800a772:	e014      	b.n	800a79e <_vfiprintf_r+0x13a>
 800a774:	eba0 0308 	sub.w	r3, r0, r8
 800a778:	fa09 f303 	lsl.w	r3, r9, r3
 800a77c:	4313      	orrs	r3, r2
 800a77e:	9304      	str	r3, [sp, #16]
 800a780:	46a2      	mov	sl, r4
 800a782:	e7d2      	b.n	800a72a <_vfiprintf_r+0xc6>
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	1d19      	adds	r1, r3, #4
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	9103      	str	r1, [sp, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bfbb      	ittet	lt
 800a790:	425b      	neglt	r3, r3
 800a792:	f042 0202 	orrlt.w	r2, r2, #2
 800a796:	9307      	strge	r3, [sp, #28]
 800a798:	9307      	strlt	r3, [sp, #28]
 800a79a:	bfb8      	it	lt
 800a79c:	9204      	strlt	r2, [sp, #16]
 800a79e:	7823      	ldrb	r3, [r4, #0]
 800a7a0:	2b2e      	cmp	r3, #46	; 0x2e
 800a7a2:	d10c      	bne.n	800a7be <_vfiprintf_r+0x15a>
 800a7a4:	7863      	ldrb	r3, [r4, #1]
 800a7a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7a8:	d134      	bne.n	800a814 <_vfiprintf_r+0x1b0>
 800a7aa:	9b03      	ldr	r3, [sp, #12]
 800a7ac:	1d1a      	adds	r2, r3, #4
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	9203      	str	r2, [sp, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	bfb8      	it	lt
 800a7b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7ba:	3402      	adds	r4, #2
 800a7bc:	9305      	str	r3, [sp, #20]
 800a7be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a894 <_vfiprintf_r+0x230>
 800a7c2:	7821      	ldrb	r1, [r4, #0]
 800a7c4:	2203      	movs	r2, #3
 800a7c6:	4650      	mov	r0, sl
 800a7c8:	f7f5 fd72 	bl	80002b0 <memchr>
 800a7cc:	b138      	cbz	r0, 800a7de <_vfiprintf_r+0x17a>
 800a7ce:	9b04      	ldr	r3, [sp, #16]
 800a7d0:	eba0 000a 	sub.w	r0, r0, sl
 800a7d4:	2240      	movs	r2, #64	; 0x40
 800a7d6:	4082      	lsls	r2, r0
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	3401      	adds	r4, #1
 800a7dc:	9304      	str	r3, [sp, #16]
 800a7de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7e2:	4829      	ldr	r0, [pc, #164]	; (800a888 <_vfiprintf_r+0x224>)
 800a7e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7e8:	2206      	movs	r2, #6
 800a7ea:	f7f5 fd61 	bl	80002b0 <memchr>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d03f      	beq.n	800a872 <_vfiprintf_r+0x20e>
 800a7f2:	4b26      	ldr	r3, [pc, #152]	; (800a88c <_vfiprintf_r+0x228>)
 800a7f4:	bb1b      	cbnz	r3, 800a83e <_vfiprintf_r+0x1da>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	3307      	adds	r3, #7
 800a7fa:	f023 0307 	bic.w	r3, r3, #7
 800a7fe:	3308      	adds	r3, #8
 800a800:	9303      	str	r3, [sp, #12]
 800a802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a804:	443b      	add	r3, r7
 800a806:	9309      	str	r3, [sp, #36]	; 0x24
 800a808:	e768      	b.n	800a6dc <_vfiprintf_r+0x78>
 800a80a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a80e:	460c      	mov	r4, r1
 800a810:	2001      	movs	r0, #1
 800a812:	e7a6      	b.n	800a762 <_vfiprintf_r+0xfe>
 800a814:	2300      	movs	r3, #0
 800a816:	3401      	adds	r4, #1
 800a818:	9305      	str	r3, [sp, #20]
 800a81a:	4619      	mov	r1, r3
 800a81c:	f04f 0c0a 	mov.w	ip, #10
 800a820:	4620      	mov	r0, r4
 800a822:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a826:	3a30      	subs	r2, #48	; 0x30
 800a828:	2a09      	cmp	r2, #9
 800a82a:	d903      	bls.n	800a834 <_vfiprintf_r+0x1d0>
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d0c6      	beq.n	800a7be <_vfiprintf_r+0x15a>
 800a830:	9105      	str	r1, [sp, #20]
 800a832:	e7c4      	b.n	800a7be <_vfiprintf_r+0x15a>
 800a834:	fb0c 2101 	mla	r1, ip, r1, r2
 800a838:	4604      	mov	r4, r0
 800a83a:	2301      	movs	r3, #1
 800a83c:	e7f0      	b.n	800a820 <_vfiprintf_r+0x1bc>
 800a83e:	ab03      	add	r3, sp, #12
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	462a      	mov	r2, r5
 800a844:	4b12      	ldr	r3, [pc, #72]	; (800a890 <_vfiprintf_r+0x22c>)
 800a846:	a904      	add	r1, sp, #16
 800a848:	4630      	mov	r0, r6
 800a84a:	f7fd fd77 	bl	800833c <_printf_float>
 800a84e:	4607      	mov	r7, r0
 800a850:	1c78      	adds	r0, r7, #1
 800a852:	d1d6      	bne.n	800a802 <_vfiprintf_r+0x19e>
 800a854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a856:	07d9      	lsls	r1, r3, #31
 800a858:	d405      	bmi.n	800a866 <_vfiprintf_r+0x202>
 800a85a:	89ab      	ldrh	r3, [r5, #12]
 800a85c:	059a      	lsls	r2, r3, #22
 800a85e:	d402      	bmi.n	800a866 <_vfiprintf_r+0x202>
 800a860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a862:	f7fe faa3 	bl	8008dac <__retarget_lock_release_recursive>
 800a866:	89ab      	ldrh	r3, [r5, #12]
 800a868:	065b      	lsls	r3, r3, #25
 800a86a:	f53f af1d 	bmi.w	800a6a8 <_vfiprintf_r+0x44>
 800a86e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a870:	e71c      	b.n	800a6ac <_vfiprintf_r+0x48>
 800a872:	ab03      	add	r3, sp, #12
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	462a      	mov	r2, r5
 800a878:	4b05      	ldr	r3, [pc, #20]	; (800a890 <_vfiprintf_r+0x22c>)
 800a87a:	a904      	add	r1, sp, #16
 800a87c:	4630      	mov	r0, r6
 800a87e:	f7fe f801 	bl	8008884 <_printf_i>
 800a882:	e7e4      	b.n	800a84e <_vfiprintf_r+0x1ea>
 800a884:	0800be20 	.word	0x0800be20
 800a888:	0800be2a 	.word	0x0800be2a
 800a88c:	0800833d 	.word	0x0800833d
 800a890:	0800a641 	.word	0x0800a641
 800a894:	0800be26 	.word	0x0800be26

0800a898 <__swbuf_r>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	460e      	mov	r6, r1
 800a89c:	4614      	mov	r4, r2
 800a89e:	4605      	mov	r5, r0
 800a8a0:	b118      	cbz	r0, 800a8aa <__swbuf_r+0x12>
 800a8a2:	6a03      	ldr	r3, [r0, #32]
 800a8a4:	b90b      	cbnz	r3, 800a8aa <__swbuf_r+0x12>
 800a8a6:	f7fe f99b 	bl	8008be0 <__sinit>
 800a8aa:	69a3      	ldr	r3, [r4, #24]
 800a8ac:	60a3      	str	r3, [r4, #8]
 800a8ae:	89a3      	ldrh	r3, [r4, #12]
 800a8b0:	071a      	lsls	r2, r3, #28
 800a8b2:	d525      	bpl.n	800a900 <__swbuf_r+0x68>
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	b31b      	cbz	r3, 800a900 <__swbuf_r+0x68>
 800a8b8:	6823      	ldr	r3, [r4, #0]
 800a8ba:	6922      	ldr	r2, [r4, #16]
 800a8bc:	1a98      	subs	r0, r3, r2
 800a8be:	6963      	ldr	r3, [r4, #20]
 800a8c0:	b2f6      	uxtb	r6, r6
 800a8c2:	4283      	cmp	r3, r0
 800a8c4:	4637      	mov	r7, r6
 800a8c6:	dc04      	bgt.n	800a8d2 <__swbuf_r+0x3a>
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f7ff fe1c 	bl	800a508 <_fflush_r>
 800a8d0:	b9e0      	cbnz	r0, 800a90c <__swbuf_r+0x74>
 800a8d2:	68a3      	ldr	r3, [r4, #8]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	60a3      	str	r3, [r4, #8]
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	6022      	str	r2, [r4, #0]
 800a8de:	701e      	strb	r6, [r3, #0]
 800a8e0:	6962      	ldr	r2, [r4, #20]
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d004      	beq.n	800a8f2 <__swbuf_r+0x5a>
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	07db      	lsls	r3, r3, #31
 800a8ec:	d506      	bpl.n	800a8fc <__swbuf_r+0x64>
 800a8ee:	2e0a      	cmp	r6, #10
 800a8f0:	d104      	bne.n	800a8fc <__swbuf_r+0x64>
 800a8f2:	4621      	mov	r1, r4
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	f7ff fe07 	bl	800a508 <_fflush_r>
 800a8fa:	b938      	cbnz	r0, 800a90c <__swbuf_r+0x74>
 800a8fc:	4638      	mov	r0, r7
 800a8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a900:	4621      	mov	r1, r4
 800a902:	4628      	mov	r0, r5
 800a904:	f000 f806 	bl	800a914 <__swsetup_r>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d0d5      	beq.n	800a8b8 <__swbuf_r+0x20>
 800a90c:	f04f 37ff 	mov.w	r7, #4294967295
 800a910:	e7f4      	b.n	800a8fc <__swbuf_r+0x64>
	...

0800a914 <__swsetup_r>:
 800a914:	b538      	push	{r3, r4, r5, lr}
 800a916:	4b2a      	ldr	r3, [pc, #168]	; (800a9c0 <__swsetup_r+0xac>)
 800a918:	4605      	mov	r5, r0
 800a91a:	6818      	ldr	r0, [r3, #0]
 800a91c:	460c      	mov	r4, r1
 800a91e:	b118      	cbz	r0, 800a928 <__swsetup_r+0x14>
 800a920:	6a03      	ldr	r3, [r0, #32]
 800a922:	b90b      	cbnz	r3, 800a928 <__swsetup_r+0x14>
 800a924:	f7fe f95c 	bl	8008be0 <__sinit>
 800a928:	89a3      	ldrh	r3, [r4, #12]
 800a92a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a92e:	0718      	lsls	r0, r3, #28
 800a930:	d422      	bmi.n	800a978 <__swsetup_r+0x64>
 800a932:	06d9      	lsls	r1, r3, #27
 800a934:	d407      	bmi.n	800a946 <__swsetup_r+0x32>
 800a936:	2309      	movs	r3, #9
 800a938:	602b      	str	r3, [r5, #0]
 800a93a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a93e:	81a3      	strh	r3, [r4, #12]
 800a940:	f04f 30ff 	mov.w	r0, #4294967295
 800a944:	e034      	b.n	800a9b0 <__swsetup_r+0x9c>
 800a946:	0758      	lsls	r0, r3, #29
 800a948:	d512      	bpl.n	800a970 <__swsetup_r+0x5c>
 800a94a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a94c:	b141      	cbz	r1, 800a960 <__swsetup_r+0x4c>
 800a94e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a952:	4299      	cmp	r1, r3
 800a954:	d002      	beq.n	800a95c <__swsetup_r+0x48>
 800a956:	4628      	mov	r0, r5
 800a958:	f7ff f8b4 	bl	8009ac4 <_free_r>
 800a95c:	2300      	movs	r3, #0
 800a95e:	6363      	str	r3, [r4, #52]	; 0x34
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a966:	81a3      	strh	r3, [r4, #12]
 800a968:	2300      	movs	r3, #0
 800a96a:	6063      	str	r3, [r4, #4]
 800a96c:	6923      	ldr	r3, [r4, #16]
 800a96e:	6023      	str	r3, [r4, #0]
 800a970:	89a3      	ldrh	r3, [r4, #12]
 800a972:	f043 0308 	orr.w	r3, r3, #8
 800a976:	81a3      	strh	r3, [r4, #12]
 800a978:	6923      	ldr	r3, [r4, #16]
 800a97a:	b94b      	cbnz	r3, 800a990 <__swsetup_r+0x7c>
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a986:	d003      	beq.n	800a990 <__swsetup_r+0x7c>
 800a988:	4621      	mov	r1, r4
 800a98a:	4628      	mov	r0, r5
 800a98c:	f000 f884 	bl	800aa98 <__smakebuf_r>
 800a990:	89a0      	ldrh	r0, [r4, #12]
 800a992:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a996:	f010 0301 	ands.w	r3, r0, #1
 800a99a:	d00a      	beq.n	800a9b2 <__swsetup_r+0x9e>
 800a99c:	2300      	movs	r3, #0
 800a99e:	60a3      	str	r3, [r4, #8]
 800a9a0:	6963      	ldr	r3, [r4, #20]
 800a9a2:	425b      	negs	r3, r3
 800a9a4:	61a3      	str	r3, [r4, #24]
 800a9a6:	6923      	ldr	r3, [r4, #16]
 800a9a8:	b943      	cbnz	r3, 800a9bc <__swsetup_r+0xa8>
 800a9aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9ae:	d1c4      	bne.n	800a93a <__swsetup_r+0x26>
 800a9b0:	bd38      	pop	{r3, r4, r5, pc}
 800a9b2:	0781      	lsls	r1, r0, #30
 800a9b4:	bf58      	it	pl
 800a9b6:	6963      	ldrpl	r3, [r4, #20]
 800a9b8:	60a3      	str	r3, [r4, #8]
 800a9ba:	e7f4      	b.n	800a9a6 <__swsetup_r+0x92>
 800a9bc:	2000      	movs	r0, #0
 800a9be:	e7f7      	b.n	800a9b0 <__swsetup_r+0x9c>
 800a9c0:	200001d0 	.word	0x200001d0

0800a9c4 <_raise_r>:
 800a9c4:	291f      	cmp	r1, #31
 800a9c6:	b538      	push	{r3, r4, r5, lr}
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	460d      	mov	r5, r1
 800a9cc:	d904      	bls.n	800a9d8 <_raise_r+0x14>
 800a9ce:	2316      	movs	r3, #22
 800a9d0:	6003      	str	r3, [r0, #0]
 800a9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d6:	bd38      	pop	{r3, r4, r5, pc}
 800a9d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a9da:	b112      	cbz	r2, 800a9e2 <_raise_r+0x1e>
 800a9dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9e0:	b94b      	cbnz	r3, 800a9f6 <_raise_r+0x32>
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f000 f830 	bl	800aa48 <_getpid_r>
 800a9e8:	462a      	mov	r2, r5
 800a9ea:	4601      	mov	r1, r0
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9f2:	f000 b817 	b.w	800aa24 <_kill_r>
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d00a      	beq.n	800aa10 <_raise_r+0x4c>
 800a9fa:	1c59      	adds	r1, r3, #1
 800a9fc:	d103      	bne.n	800aa06 <_raise_r+0x42>
 800a9fe:	2316      	movs	r3, #22
 800aa00:	6003      	str	r3, [r0, #0]
 800aa02:	2001      	movs	r0, #1
 800aa04:	e7e7      	b.n	800a9d6 <_raise_r+0x12>
 800aa06:	2400      	movs	r4, #0
 800aa08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	4798      	blx	r3
 800aa10:	2000      	movs	r0, #0
 800aa12:	e7e0      	b.n	800a9d6 <_raise_r+0x12>

0800aa14 <raise>:
 800aa14:	4b02      	ldr	r3, [pc, #8]	; (800aa20 <raise+0xc>)
 800aa16:	4601      	mov	r1, r0
 800aa18:	6818      	ldr	r0, [r3, #0]
 800aa1a:	f7ff bfd3 	b.w	800a9c4 <_raise_r>
 800aa1e:	bf00      	nop
 800aa20:	200001d0 	.word	0x200001d0

0800aa24 <_kill_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	4d07      	ldr	r5, [pc, #28]	; (800aa44 <_kill_r+0x20>)
 800aa28:	2300      	movs	r3, #0
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	4608      	mov	r0, r1
 800aa2e:	4611      	mov	r1, r2
 800aa30:	602b      	str	r3, [r5, #0]
 800aa32:	f7f7 fdd7 	bl	80025e4 <_kill>
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	d102      	bne.n	800aa40 <_kill_r+0x1c>
 800aa3a:	682b      	ldr	r3, [r5, #0]
 800aa3c:	b103      	cbz	r3, 800aa40 <_kill_r+0x1c>
 800aa3e:	6023      	str	r3, [r4, #0]
 800aa40:	bd38      	pop	{r3, r4, r5, pc}
 800aa42:	bf00      	nop
 800aa44:	20000f50 	.word	0x20000f50

0800aa48 <_getpid_r>:
 800aa48:	f7f7 bdc4 	b.w	80025d4 <_getpid>

0800aa4c <__swhatbuf_r>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	460c      	mov	r4, r1
 800aa50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa54:	2900      	cmp	r1, #0
 800aa56:	b096      	sub	sp, #88	; 0x58
 800aa58:	4615      	mov	r5, r2
 800aa5a:	461e      	mov	r6, r3
 800aa5c:	da0d      	bge.n	800aa7a <__swhatbuf_r+0x2e>
 800aa5e:	89a3      	ldrh	r3, [r4, #12]
 800aa60:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa64:	f04f 0100 	mov.w	r1, #0
 800aa68:	bf0c      	ite	eq
 800aa6a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aa6e:	2340      	movne	r3, #64	; 0x40
 800aa70:	2000      	movs	r0, #0
 800aa72:	6031      	str	r1, [r6, #0]
 800aa74:	602b      	str	r3, [r5, #0]
 800aa76:	b016      	add	sp, #88	; 0x58
 800aa78:	bd70      	pop	{r4, r5, r6, pc}
 800aa7a:	466a      	mov	r2, sp
 800aa7c:	f000 f848 	bl	800ab10 <_fstat_r>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	dbec      	blt.n	800aa5e <__swhatbuf_r+0x12>
 800aa84:	9901      	ldr	r1, [sp, #4]
 800aa86:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aa8a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aa8e:	4259      	negs	r1, r3
 800aa90:	4159      	adcs	r1, r3
 800aa92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa96:	e7eb      	b.n	800aa70 <__swhatbuf_r+0x24>

0800aa98 <__smakebuf_r>:
 800aa98:	898b      	ldrh	r3, [r1, #12]
 800aa9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa9c:	079d      	lsls	r5, r3, #30
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	460c      	mov	r4, r1
 800aaa2:	d507      	bpl.n	800aab4 <__smakebuf_r+0x1c>
 800aaa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	6123      	str	r3, [r4, #16]
 800aaac:	2301      	movs	r3, #1
 800aaae:	6163      	str	r3, [r4, #20]
 800aab0:	b002      	add	sp, #8
 800aab2:	bd70      	pop	{r4, r5, r6, pc}
 800aab4:	ab01      	add	r3, sp, #4
 800aab6:	466a      	mov	r2, sp
 800aab8:	f7ff ffc8 	bl	800aa4c <__swhatbuf_r>
 800aabc:	9900      	ldr	r1, [sp, #0]
 800aabe:	4605      	mov	r5, r0
 800aac0:	4630      	mov	r0, r6
 800aac2:	f7ff f873 	bl	8009bac <_malloc_r>
 800aac6:	b948      	cbnz	r0, 800aadc <__smakebuf_r+0x44>
 800aac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aacc:	059a      	lsls	r2, r3, #22
 800aace:	d4ef      	bmi.n	800aab0 <__smakebuf_r+0x18>
 800aad0:	f023 0303 	bic.w	r3, r3, #3
 800aad4:	f043 0302 	orr.w	r3, r3, #2
 800aad8:	81a3      	strh	r3, [r4, #12]
 800aada:	e7e3      	b.n	800aaa4 <__smakebuf_r+0xc>
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	6020      	str	r0, [r4, #0]
 800aae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aae4:	81a3      	strh	r3, [r4, #12]
 800aae6:	9b00      	ldr	r3, [sp, #0]
 800aae8:	6163      	str	r3, [r4, #20]
 800aaea:	9b01      	ldr	r3, [sp, #4]
 800aaec:	6120      	str	r0, [r4, #16]
 800aaee:	b15b      	cbz	r3, 800ab08 <__smakebuf_r+0x70>
 800aaf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	f000 f81d 	bl	800ab34 <_isatty_r>
 800aafa:	b128      	cbz	r0, 800ab08 <__smakebuf_r+0x70>
 800aafc:	89a3      	ldrh	r3, [r4, #12]
 800aafe:	f023 0303 	bic.w	r3, r3, #3
 800ab02:	f043 0301 	orr.w	r3, r3, #1
 800ab06:	81a3      	strh	r3, [r4, #12]
 800ab08:	89a3      	ldrh	r3, [r4, #12]
 800ab0a:	431d      	orrs	r5, r3
 800ab0c:	81a5      	strh	r5, [r4, #12]
 800ab0e:	e7cf      	b.n	800aab0 <__smakebuf_r+0x18>

0800ab10 <_fstat_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4d07      	ldr	r5, [pc, #28]	; (800ab30 <_fstat_r+0x20>)
 800ab14:	2300      	movs	r3, #0
 800ab16:	4604      	mov	r4, r0
 800ab18:	4608      	mov	r0, r1
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	602b      	str	r3, [r5, #0]
 800ab1e:	f7f7 fda4 	bl	800266a <_fstat>
 800ab22:	1c43      	adds	r3, r0, #1
 800ab24:	d102      	bne.n	800ab2c <_fstat_r+0x1c>
 800ab26:	682b      	ldr	r3, [r5, #0]
 800ab28:	b103      	cbz	r3, 800ab2c <_fstat_r+0x1c>
 800ab2a:	6023      	str	r3, [r4, #0]
 800ab2c:	bd38      	pop	{r3, r4, r5, pc}
 800ab2e:	bf00      	nop
 800ab30:	20000f50 	.word	0x20000f50

0800ab34 <_isatty_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4d06      	ldr	r5, [pc, #24]	; (800ab50 <_isatty_r+0x1c>)
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	602b      	str	r3, [r5, #0]
 800ab40:	f7f7 fda3 	bl	800268a <_isatty>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_isatty_r+0x1a>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_isatty_r+0x1a>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	20000f50 	.word	0x20000f50

0800ab54 <pow>:
 800ab54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab56:	ed2d 8b02 	vpush	{d8}
 800ab5a:	eeb0 8a40 	vmov.f32	s16, s0
 800ab5e:	eef0 8a60 	vmov.f32	s17, s1
 800ab62:	ec55 4b11 	vmov	r4, r5, d1
 800ab66:	f000 f993 	bl	800ae90 <__ieee754_pow>
 800ab6a:	4622      	mov	r2, r4
 800ab6c:	462b      	mov	r3, r5
 800ab6e:	4620      	mov	r0, r4
 800ab70:	4629      	mov	r1, r5
 800ab72:	ec57 6b10 	vmov	r6, r7, d0
 800ab76:	f7f6 f849 	bl	8000c0c <__aeabi_dcmpun>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d13b      	bne.n	800abf6 <pow+0xa2>
 800ab7e:	ec51 0b18 	vmov	r0, r1, d8
 800ab82:	2200      	movs	r2, #0
 800ab84:	2300      	movs	r3, #0
 800ab86:	f7f6 f80f 	bl	8000ba8 <__aeabi_dcmpeq>
 800ab8a:	b1b8      	cbz	r0, 800abbc <pow+0x68>
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2300      	movs	r3, #0
 800ab90:	4620      	mov	r0, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	f7f6 f808 	bl	8000ba8 <__aeabi_dcmpeq>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d146      	bne.n	800ac2a <pow+0xd6>
 800ab9c:	ec45 4b10 	vmov	d0, r4, r5
 800aba0:	f000 f848 	bl	800ac34 <finite>
 800aba4:	b338      	cbz	r0, 800abf6 <pow+0xa2>
 800aba6:	2200      	movs	r2, #0
 800aba8:	2300      	movs	r3, #0
 800abaa:	4620      	mov	r0, r4
 800abac:	4629      	mov	r1, r5
 800abae:	f7f6 f805 	bl	8000bbc <__aeabi_dcmplt>
 800abb2:	b300      	cbz	r0, 800abf6 <pow+0xa2>
 800abb4:	f7fe f8ce 	bl	8008d54 <__errno>
 800abb8:	2322      	movs	r3, #34	; 0x22
 800abba:	e01b      	b.n	800abf4 <pow+0xa0>
 800abbc:	ec47 6b10 	vmov	d0, r6, r7
 800abc0:	f000 f838 	bl	800ac34 <finite>
 800abc4:	b9e0      	cbnz	r0, 800ac00 <pow+0xac>
 800abc6:	eeb0 0a48 	vmov.f32	s0, s16
 800abca:	eef0 0a68 	vmov.f32	s1, s17
 800abce:	f000 f831 	bl	800ac34 <finite>
 800abd2:	b1a8      	cbz	r0, 800ac00 <pow+0xac>
 800abd4:	ec45 4b10 	vmov	d0, r4, r5
 800abd8:	f000 f82c 	bl	800ac34 <finite>
 800abdc:	b180      	cbz	r0, 800ac00 <pow+0xac>
 800abde:	4632      	mov	r2, r6
 800abe0:	463b      	mov	r3, r7
 800abe2:	4630      	mov	r0, r6
 800abe4:	4639      	mov	r1, r7
 800abe6:	f7f6 f811 	bl	8000c0c <__aeabi_dcmpun>
 800abea:	2800      	cmp	r0, #0
 800abec:	d0e2      	beq.n	800abb4 <pow+0x60>
 800abee:	f7fe f8b1 	bl	8008d54 <__errno>
 800abf2:	2321      	movs	r3, #33	; 0x21
 800abf4:	6003      	str	r3, [r0, #0]
 800abf6:	ecbd 8b02 	vpop	{d8}
 800abfa:	ec47 6b10 	vmov	d0, r6, r7
 800abfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac00:	2200      	movs	r2, #0
 800ac02:	2300      	movs	r3, #0
 800ac04:	4630      	mov	r0, r6
 800ac06:	4639      	mov	r1, r7
 800ac08:	f7f5 ffce 	bl	8000ba8 <__aeabi_dcmpeq>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d0f2      	beq.n	800abf6 <pow+0xa2>
 800ac10:	eeb0 0a48 	vmov.f32	s0, s16
 800ac14:	eef0 0a68 	vmov.f32	s1, s17
 800ac18:	f000 f80c 	bl	800ac34 <finite>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d0ea      	beq.n	800abf6 <pow+0xa2>
 800ac20:	ec45 4b10 	vmov	d0, r4, r5
 800ac24:	f000 f806 	bl	800ac34 <finite>
 800ac28:	e7c3      	b.n	800abb2 <pow+0x5e>
 800ac2a:	4f01      	ldr	r7, [pc, #4]	; (800ac30 <pow+0xdc>)
 800ac2c:	2600      	movs	r6, #0
 800ac2e:	e7e2      	b.n	800abf6 <pow+0xa2>
 800ac30:	3ff00000 	.word	0x3ff00000

0800ac34 <finite>:
 800ac34:	b082      	sub	sp, #8
 800ac36:	ed8d 0b00 	vstr	d0, [sp]
 800ac3a:	9801      	ldr	r0, [sp, #4]
 800ac3c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ac40:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ac44:	0fc0      	lsrs	r0, r0, #31
 800ac46:	b002      	add	sp, #8
 800ac48:	4770      	bx	lr
	...

0800ac4c <__ieee754_sqrt>:
 800ac4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac50:	ec55 4b10 	vmov	r4, r5, d0
 800ac54:	4e67      	ldr	r6, [pc, #412]	; (800adf4 <__ieee754_sqrt+0x1a8>)
 800ac56:	43ae      	bics	r6, r5
 800ac58:	ee10 0a10 	vmov	r0, s0
 800ac5c:	ee10 2a10 	vmov	r2, s0
 800ac60:	4629      	mov	r1, r5
 800ac62:	462b      	mov	r3, r5
 800ac64:	d10d      	bne.n	800ac82 <__ieee754_sqrt+0x36>
 800ac66:	f7f5 fd37 	bl	80006d8 <__aeabi_dmul>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	4620      	mov	r0, r4
 800ac70:	4629      	mov	r1, r5
 800ac72:	f7f5 fb7b 	bl	800036c <__adddf3>
 800ac76:	4604      	mov	r4, r0
 800ac78:	460d      	mov	r5, r1
 800ac7a:	ec45 4b10 	vmov	d0, r4, r5
 800ac7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac82:	2d00      	cmp	r5, #0
 800ac84:	dc0b      	bgt.n	800ac9e <__ieee754_sqrt+0x52>
 800ac86:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ac8a:	4326      	orrs	r6, r4
 800ac8c:	d0f5      	beq.n	800ac7a <__ieee754_sqrt+0x2e>
 800ac8e:	b135      	cbz	r5, 800ac9e <__ieee754_sqrt+0x52>
 800ac90:	f7f5 fb6a 	bl	8000368 <__aeabi_dsub>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	f7f5 fe48 	bl	800092c <__aeabi_ddiv>
 800ac9c:	e7eb      	b.n	800ac76 <__ieee754_sqrt+0x2a>
 800ac9e:	1509      	asrs	r1, r1, #20
 800aca0:	f000 808d 	beq.w	800adbe <__ieee754_sqrt+0x172>
 800aca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aca8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800acac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acb0:	07c9      	lsls	r1, r1, #31
 800acb2:	bf5c      	itt	pl
 800acb4:	005b      	lslpl	r3, r3, #1
 800acb6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800acba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800acbe:	bf58      	it	pl
 800acc0:	0052      	lslpl	r2, r2, #1
 800acc2:	2500      	movs	r5, #0
 800acc4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800acc8:	1076      	asrs	r6, r6, #1
 800acca:	0052      	lsls	r2, r2, #1
 800accc:	f04f 0e16 	mov.w	lr, #22
 800acd0:	46ac      	mov	ip, r5
 800acd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acd6:	eb0c 0001 	add.w	r0, ip, r1
 800acda:	4298      	cmp	r0, r3
 800acdc:	bfde      	ittt	le
 800acde:	1a1b      	suble	r3, r3, r0
 800ace0:	eb00 0c01 	addle.w	ip, r0, r1
 800ace4:	186d      	addle	r5, r5, r1
 800ace6:	005b      	lsls	r3, r3, #1
 800ace8:	f1be 0e01 	subs.w	lr, lr, #1
 800acec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800acf0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800acf4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800acf8:	d1ed      	bne.n	800acd6 <__ieee754_sqrt+0x8a>
 800acfa:	4674      	mov	r4, lr
 800acfc:	2720      	movs	r7, #32
 800acfe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ad02:	4563      	cmp	r3, ip
 800ad04:	eb01 000e 	add.w	r0, r1, lr
 800ad08:	dc02      	bgt.n	800ad10 <__ieee754_sqrt+0xc4>
 800ad0a:	d113      	bne.n	800ad34 <__ieee754_sqrt+0xe8>
 800ad0c:	4290      	cmp	r0, r2
 800ad0e:	d811      	bhi.n	800ad34 <__ieee754_sqrt+0xe8>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	eb00 0e01 	add.w	lr, r0, r1
 800ad16:	da57      	bge.n	800adc8 <__ieee754_sqrt+0x17c>
 800ad18:	f1be 0f00 	cmp.w	lr, #0
 800ad1c:	db54      	blt.n	800adc8 <__ieee754_sqrt+0x17c>
 800ad1e:	f10c 0801 	add.w	r8, ip, #1
 800ad22:	eba3 030c 	sub.w	r3, r3, ip
 800ad26:	4290      	cmp	r0, r2
 800ad28:	bf88      	it	hi
 800ad2a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ad2e:	1a12      	subs	r2, r2, r0
 800ad30:	440c      	add	r4, r1
 800ad32:	46c4      	mov	ip, r8
 800ad34:	005b      	lsls	r3, r3, #1
 800ad36:	3f01      	subs	r7, #1
 800ad38:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ad3c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ad40:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ad44:	d1dd      	bne.n	800ad02 <__ieee754_sqrt+0xb6>
 800ad46:	4313      	orrs	r3, r2
 800ad48:	d01b      	beq.n	800ad82 <__ieee754_sqrt+0x136>
 800ad4a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800adf8 <__ieee754_sqrt+0x1ac>
 800ad4e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800adfc <__ieee754_sqrt+0x1b0>
 800ad52:	e9da 0100 	ldrd	r0, r1, [sl]
 800ad56:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad5a:	f7f5 fb05 	bl	8000368 <__aeabi_dsub>
 800ad5e:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	4640      	mov	r0, r8
 800ad68:	4649      	mov	r1, r9
 800ad6a:	f7f5 ff31 	bl	8000bd0 <__aeabi_dcmple>
 800ad6e:	b140      	cbz	r0, 800ad82 <__ieee754_sqrt+0x136>
 800ad70:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ad74:	e9da 0100 	ldrd	r0, r1, [sl]
 800ad78:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad7c:	d126      	bne.n	800adcc <__ieee754_sqrt+0x180>
 800ad7e:	3501      	adds	r5, #1
 800ad80:	463c      	mov	r4, r7
 800ad82:	106a      	asrs	r2, r5, #1
 800ad84:	0863      	lsrs	r3, r4, #1
 800ad86:	07e9      	lsls	r1, r5, #31
 800ad88:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ad8c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ad90:	bf48      	it	mi
 800ad92:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ad96:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ad9a:	461c      	mov	r4, r3
 800ad9c:	e76d      	b.n	800ac7a <__ieee754_sqrt+0x2e>
 800ad9e:	0ad3      	lsrs	r3, r2, #11
 800ada0:	3815      	subs	r0, #21
 800ada2:	0552      	lsls	r2, r2, #21
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d0fa      	beq.n	800ad9e <__ieee754_sqrt+0x152>
 800ada8:	02dc      	lsls	r4, r3, #11
 800adaa:	d50a      	bpl.n	800adc2 <__ieee754_sqrt+0x176>
 800adac:	f1c1 0420 	rsb	r4, r1, #32
 800adb0:	fa22 f404 	lsr.w	r4, r2, r4
 800adb4:	1e4d      	subs	r5, r1, #1
 800adb6:	408a      	lsls	r2, r1
 800adb8:	4323      	orrs	r3, r4
 800adba:	1b41      	subs	r1, r0, r5
 800adbc:	e772      	b.n	800aca4 <__ieee754_sqrt+0x58>
 800adbe:	4608      	mov	r0, r1
 800adc0:	e7f0      	b.n	800ada4 <__ieee754_sqrt+0x158>
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	3101      	adds	r1, #1
 800adc6:	e7ef      	b.n	800ada8 <__ieee754_sqrt+0x15c>
 800adc8:	46e0      	mov	r8, ip
 800adca:	e7aa      	b.n	800ad22 <__ieee754_sqrt+0xd6>
 800adcc:	f7f5 face 	bl	800036c <__adddf3>
 800add0:	e9da 8900 	ldrd	r8, r9, [sl]
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	4640      	mov	r0, r8
 800adda:	4649      	mov	r1, r9
 800addc:	f7f5 feee 	bl	8000bbc <__aeabi_dcmplt>
 800ade0:	b120      	cbz	r0, 800adec <__ieee754_sqrt+0x1a0>
 800ade2:	1ca0      	adds	r0, r4, #2
 800ade4:	bf08      	it	eq
 800ade6:	3501      	addeq	r5, #1
 800ade8:	3402      	adds	r4, #2
 800adea:	e7ca      	b.n	800ad82 <__ieee754_sqrt+0x136>
 800adec:	3401      	adds	r4, #1
 800adee:	f024 0401 	bic.w	r4, r4, #1
 800adf2:	e7c6      	b.n	800ad82 <__ieee754_sqrt+0x136>
 800adf4:	7ff00000 	.word	0x7ff00000
 800adf8:	200001d8 	.word	0x200001d8
 800adfc:	200001e0 	.word	0x200001e0

0800ae00 <round>:
 800ae00:	ec53 2b10 	vmov	r2, r3, d0
 800ae04:	b570      	push	{r4, r5, r6, lr}
 800ae06:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800ae0a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800ae0e:	2813      	cmp	r0, #19
 800ae10:	ee10 5a10 	vmov	r5, s0
 800ae14:	4619      	mov	r1, r3
 800ae16:	dc18      	bgt.n	800ae4a <round+0x4a>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	da09      	bge.n	800ae30 <round+0x30>
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800ae22:	d103      	bne.n	800ae2c <round+0x2c>
 800ae24:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800ae28:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	e02a      	b.n	800ae86 <round+0x86>
 800ae30:	4c16      	ldr	r4, [pc, #88]	; (800ae8c <round+0x8c>)
 800ae32:	4104      	asrs	r4, r0
 800ae34:	ea03 0604 	and.w	r6, r3, r4
 800ae38:	4316      	orrs	r6, r2
 800ae3a:	d011      	beq.n	800ae60 <round+0x60>
 800ae3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae40:	4103      	asrs	r3, r0
 800ae42:	440b      	add	r3, r1
 800ae44:	ea23 0104 	bic.w	r1, r3, r4
 800ae48:	e7f0      	b.n	800ae2c <round+0x2c>
 800ae4a:	2833      	cmp	r0, #51	; 0x33
 800ae4c:	dd0b      	ble.n	800ae66 <round+0x66>
 800ae4e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ae52:	d105      	bne.n	800ae60 <round+0x60>
 800ae54:	ee10 0a10 	vmov	r0, s0
 800ae58:	f7f5 fa88 	bl	800036c <__adddf3>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	460b      	mov	r3, r1
 800ae60:	ec43 2b10 	vmov	d0, r2, r3
 800ae64:	bd70      	pop	{r4, r5, r6, pc}
 800ae66:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800ae6a:	f04f 34ff 	mov.w	r4, #4294967295
 800ae6e:	40f4      	lsrs	r4, r6
 800ae70:	4214      	tst	r4, r2
 800ae72:	d0f5      	beq.n	800ae60 <round+0x60>
 800ae74:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800ae78:	2301      	movs	r3, #1
 800ae7a:	4083      	lsls	r3, r0
 800ae7c:	195b      	adds	r3, r3, r5
 800ae7e:	bf28      	it	cs
 800ae80:	3101      	addcs	r1, #1
 800ae82:	ea23 0304 	bic.w	r3, r3, r4
 800ae86:	461a      	mov	r2, r3
 800ae88:	460b      	mov	r3, r1
 800ae8a:	e7e9      	b.n	800ae60 <round+0x60>
 800ae8c:	000fffff 	.word	0x000fffff

0800ae90 <__ieee754_pow>:
 800ae90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae94:	ed2d 8b06 	vpush	{d8-d10}
 800ae98:	b089      	sub	sp, #36	; 0x24
 800ae9a:	ed8d 1b00 	vstr	d1, [sp]
 800ae9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800aea2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800aea6:	ea58 0102 	orrs.w	r1, r8, r2
 800aeaa:	ec57 6b10 	vmov	r6, r7, d0
 800aeae:	d115      	bne.n	800aedc <__ieee754_pow+0x4c>
 800aeb0:	19b3      	adds	r3, r6, r6
 800aeb2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800aeb6:	4152      	adcs	r2, r2
 800aeb8:	4299      	cmp	r1, r3
 800aeba:	4b89      	ldr	r3, [pc, #548]	; (800b0e0 <__ieee754_pow+0x250>)
 800aebc:	4193      	sbcs	r3, r2
 800aebe:	f080 84d1 	bcs.w	800b864 <__ieee754_pow+0x9d4>
 800aec2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aec6:	4630      	mov	r0, r6
 800aec8:	4639      	mov	r1, r7
 800aeca:	f7f5 fa4f 	bl	800036c <__adddf3>
 800aece:	ec41 0b10 	vmov	d0, r0, r1
 800aed2:	b009      	add	sp, #36	; 0x24
 800aed4:	ecbd 8b06 	vpop	{d8-d10}
 800aed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aedc:	4b81      	ldr	r3, [pc, #516]	; (800b0e4 <__ieee754_pow+0x254>)
 800aede:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800aee2:	429c      	cmp	r4, r3
 800aee4:	ee10 aa10 	vmov	sl, s0
 800aee8:	463d      	mov	r5, r7
 800aeea:	dc06      	bgt.n	800aefa <__ieee754_pow+0x6a>
 800aeec:	d101      	bne.n	800aef2 <__ieee754_pow+0x62>
 800aeee:	2e00      	cmp	r6, #0
 800aef0:	d1e7      	bne.n	800aec2 <__ieee754_pow+0x32>
 800aef2:	4598      	cmp	r8, r3
 800aef4:	dc01      	bgt.n	800aefa <__ieee754_pow+0x6a>
 800aef6:	d10f      	bne.n	800af18 <__ieee754_pow+0x88>
 800aef8:	b172      	cbz	r2, 800af18 <__ieee754_pow+0x88>
 800aefa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800aefe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800af02:	ea55 050a 	orrs.w	r5, r5, sl
 800af06:	d1dc      	bne.n	800aec2 <__ieee754_pow+0x32>
 800af08:	e9dd 3200 	ldrd	r3, r2, [sp]
 800af0c:	18db      	adds	r3, r3, r3
 800af0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800af12:	4152      	adcs	r2, r2
 800af14:	429d      	cmp	r5, r3
 800af16:	e7d0      	b.n	800aeba <__ieee754_pow+0x2a>
 800af18:	2d00      	cmp	r5, #0
 800af1a:	da3b      	bge.n	800af94 <__ieee754_pow+0x104>
 800af1c:	4b72      	ldr	r3, [pc, #456]	; (800b0e8 <__ieee754_pow+0x258>)
 800af1e:	4598      	cmp	r8, r3
 800af20:	dc51      	bgt.n	800afc6 <__ieee754_pow+0x136>
 800af22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800af26:	4598      	cmp	r8, r3
 800af28:	f340 84ab 	ble.w	800b882 <__ieee754_pow+0x9f2>
 800af2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800af30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800af34:	2b14      	cmp	r3, #20
 800af36:	dd0f      	ble.n	800af58 <__ieee754_pow+0xc8>
 800af38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800af3c:	fa22 f103 	lsr.w	r1, r2, r3
 800af40:	fa01 f303 	lsl.w	r3, r1, r3
 800af44:	4293      	cmp	r3, r2
 800af46:	f040 849c 	bne.w	800b882 <__ieee754_pow+0x9f2>
 800af4a:	f001 0101 	and.w	r1, r1, #1
 800af4e:	f1c1 0302 	rsb	r3, r1, #2
 800af52:	9304      	str	r3, [sp, #16]
 800af54:	b182      	cbz	r2, 800af78 <__ieee754_pow+0xe8>
 800af56:	e05f      	b.n	800b018 <__ieee754_pow+0x188>
 800af58:	2a00      	cmp	r2, #0
 800af5a:	d15b      	bne.n	800b014 <__ieee754_pow+0x184>
 800af5c:	f1c3 0314 	rsb	r3, r3, #20
 800af60:	fa48 f103 	asr.w	r1, r8, r3
 800af64:	fa01 f303 	lsl.w	r3, r1, r3
 800af68:	4543      	cmp	r3, r8
 800af6a:	f040 8487 	bne.w	800b87c <__ieee754_pow+0x9ec>
 800af6e:	f001 0101 	and.w	r1, r1, #1
 800af72:	f1c1 0302 	rsb	r3, r1, #2
 800af76:	9304      	str	r3, [sp, #16]
 800af78:	4b5c      	ldr	r3, [pc, #368]	; (800b0ec <__ieee754_pow+0x25c>)
 800af7a:	4598      	cmp	r8, r3
 800af7c:	d132      	bne.n	800afe4 <__ieee754_pow+0x154>
 800af7e:	f1b9 0f00 	cmp.w	r9, #0
 800af82:	f280 8477 	bge.w	800b874 <__ieee754_pow+0x9e4>
 800af86:	4959      	ldr	r1, [pc, #356]	; (800b0ec <__ieee754_pow+0x25c>)
 800af88:	4632      	mov	r2, r6
 800af8a:	463b      	mov	r3, r7
 800af8c:	2000      	movs	r0, #0
 800af8e:	f7f5 fccd 	bl	800092c <__aeabi_ddiv>
 800af92:	e79c      	b.n	800aece <__ieee754_pow+0x3e>
 800af94:	2300      	movs	r3, #0
 800af96:	9304      	str	r3, [sp, #16]
 800af98:	2a00      	cmp	r2, #0
 800af9a:	d13d      	bne.n	800b018 <__ieee754_pow+0x188>
 800af9c:	4b51      	ldr	r3, [pc, #324]	; (800b0e4 <__ieee754_pow+0x254>)
 800af9e:	4598      	cmp	r8, r3
 800afa0:	d1ea      	bne.n	800af78 <__ieee754_pow+0xe8>
 800afa2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800afa6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800afaa:	ea53 030a 	orrs.w	r3, r3, sl
 800afae:	f000 8459 	beq.w	800b864 <__ieee754_pow+0x9d4>
 800afb2:	4b4f      	ldr	r3, [pc, #316]	; (800b0f0 <__ieee754_pow+0x260>)
 800afb4:	429c      	cmp	r4, r3
 800afb6:	dd08      	ble.n	800afca <__ieee754_pow+0x13a>
 800afb8:	f1b9 0f00 	cmp.w	r9, #0
 800afbc:	f2c0 8456 	blt.w	800b86c <__ieee754_pow+0x9dc>
 800afc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afc4:	e783      	b.n	800aece <__ieee754_pow+0x3e>
 800afc6:	2302      	movs	r3, #2
 800afc8:	e7e5      	b.n	800af96 <__ieee754_pow+0x106>
 800afca:	f1b9 0f00 	cmp.w	r9, #0
 800afce:	f04f 0000 	mov.w	r0, #0
 800afd2:	f04f 0100 	mov.w	r1, #0
 800afd6:	f6bf af7a 	bge.w	800aece <__ieee754_pow+0x3e>
 800afda:	e9dd 0300 	ldrd	r0, r3, [sp]
 800afde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800afe2:	e774      	b.n	800aece <__ieee754_pow+0x3e>
 800afe4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800afe8:	d106      	bne.n	800aff8 <__ieee754_pow+0x168>
 800afea:	4632      	mov	r2, r6
 800afec:	463b      	mov	r3, r7
 800afee:	4630      	mov	r0, r6
 800aff0:	4639      	mov	r1, r7
 800aff2:	f7f5 fb71 	bl	80006d8 <__aeabi_dmul>
 800aff6:	e76a      	b.n	800aece <__ieee754_pow+0x3e>
 800aff8:	4b3e      	ldr	r3, [pc, #248]	; (800b0f4 <__ieee754_pow+0x264>)
 800affa:	4599      	cmp	r9, r3
 800affc:	d10c      	bne.n	800b018 <__ieee754_pow+0x188>
 800affe:	2d00      	cmp	r5, #0
 800b000:	db0a      	blt.n	800b018 <__ieee754_pow+0x188>
 800b002:	ec47 6b10 	vmov	d0, r6, r7
 800b006:	b009      	add	sp, #36	; 0x24
 800b008:	ecbd 8b06 	vpop	{d8-d10}
 800b00c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b010:	f7ff be1c 	b.w	800ac4c <__ieee754_sqrt>
 800b014:	2300      	movs	r3, #0
 800b016:	9304      	str	r3, [sp, #16]
 800b018:	ec47 6b10 	vmov	d0, r6, r7
 800b01c:	f000 fc62 	bl	800b8e4 <fabs>
 800b020:	ec51 0b10 	vmov	r0, r1, d0
 800b024:	f1ba 0f00 	cmp.w	sl, #0
 800b028:	d129      	bne.n	800b07e <__ieee754_pow+0x1ee>
 800b02a:	b124      	cbz	r4, 800b036 <__ieee754_pow+0x1a6>
 800b02c:	4b2f      	ldr	r3, [pc, #188]	; (800b0ec <__ieee754_pow+0x25c>)
 800b02e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b032:	429a      	cmp	r2, r3
 800b034:	d123      	bne.n	800b07e <__ieee754_pow+0x1ee>
 800b036:	f1b9 0f00 	cmp.w	r9, #0
 800b03a:	da05      	bge.n	800b048 <__ieee754_pow+0x1b8>
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	2000      	movs	r0, #0
 800b042:	492a      	ldr	r1, [pc, #168]	; (800b0ec <__ieee754_pow+0x25c>)
 800b044:	f7f5 fc72 	bl	800092c <__aeabi_ddiv>
 800b048:	2d00      	cmp	r5, #0
 800b04a:	f6bf af40 	bge.w	800aece <__ieee754_pow+0x3e>
 800b04e:	9b04      	ldr	r3, [sp, #16]
 800b050:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b054:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b058:	431c      	orrs	r4, r3
 800b05a:	d108      	bne.n	800b06e <__ieee754_pow+0x1de>
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
 800b060:	4610      	mov	r0, r2
 800b062:	4619      	mov	r1, r3
 800b064:	f7f5 f980 	bl	8000368 <__aeabi_dsub>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	e78f      	b.n	800af8e <__ieee754_pow+0xfe>
 800b06e:	9b04      	ldr	r3, [sp, #16]
 800b070:	2b01      	cmp	r3, #1
 800b072:	f47f af2c 	bne.w	800aece <__ieee754_pow+0x3e>
 800b076:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b07a:	4619      	mov	r1, r3
 800b07c:	e727      	b.n	800aece <__ieee754_pow+0x3e>
 800b07e:	0feb      	lsrs	r3, r5, #31
 800b080:	3b01      	subs	r3, #1
 800b082:	9306      	str	r3, [sp, #24]
 800b084:	9a06      	ldr	r2, [sp, #24]
 800b086:	9b04      	ldr	r3, [sp, #16]
 800b088:	4313      	orrs	r3, r2
 800b08a:	d102      	bne.n	800b092 <__ieee754_pow+0x202>
 800b08c:	4632      	mov	r2, r6
 800b08e:	463b      	mov	r3, r7
 800b090:	e7e6      	b.n	800b060 <__ieee754_pow+0x1d0>
 800b092:	4b19      	ldr	r3, [pc, #100]	; (800b0f8 <__ieee754_pow+0x268>)
 800b094:	4598      	cmp	r8, r3
 800b096:	f340 80fb 	ble.w	800b290 <__ieee754_pow+0x400>
 800b09a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b09e:	4598      	cmp	r8, r3
 800b0a0:	4b13      	ldr	r3, [pc, #76]	; (800b0f0 <__ieee754_pow+0x260>)
 800b0a2:	dd0c      	ble.n	800b0be <__ieee754_pow+0x22e>
 800b0a4:	429c      	cmp	r4, r3
 800b0a6:	dc0f      	bgt.n	800b0c8 <__ieee754_pow+0x238>
 800b0a8:	f1b9 0f00 	cmp.w	r9, #0
 800b0ac:	da0f      	bge.n	800b0ce <__ieee754_pow+0x23e>
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	b009      	add	sp, #36	; 0x24
 800b0b2:	ecbd 8b06 	vpop	{d8-d10}
 800b0b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ba:	f000 bcc2 	b.w	800ba42 <__math_oflow>
 800b0be:	429c      	cmp	r4, r3
 800b0c0:	dbf2      	blt.n	800b0a8 <__ieee754_pow+0x218>
 800b0c2:	4b0a      	ldr	r3, [pc, #40]	; (800b0ec <__ieee754_pow+0x25c>)
 800b0c4:	429c      	cmp	r4, r3
 800b0c6:	dd19      	ble.n	800b0fc <__ieee754_pow+0x26c>
 800b0c8:	f1b9 0f00 	cmp.w	r9, #0
 800b0cc:	dcef      	bgt.n	800b0ae <__ieee754_pow+0x21e>
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	b009      	add	sp, #36	; 0x24
 800b0d2:	ecbd 8b06 	vpop	{d8-d10}
 800b0d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0da:	f000 bca9 	b.w	800ba30 <__math_uflow>
 800b0de:	bf00      	nop
 800b0e0:	fff00000 	.word	0xfff00000
 800b0e4:	7ff00000 	.word	0x7ff00000
 800b0e8:	433fffff 	.word	0x433fffff
 800b0ec:	3ff00000 	.word	0x3ff00000
 800b0f0:	3fefffff 	.word	0x3fefffff
 800b0f4:	3fe00000 	.word	0x3fe00000
 800b0f8:	41e00000 	.word	0x41e00000
 800b0fc:	4b60      	ldr	r3, [pc, #384]	; (800b280 <__ieee754_pow+0x3f0>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	f7f5 f932 	bl	8000368 <__aeabi_dsub>
 800b104:	a354      	add	r3, pc, #336	; (adr r3, 800b258 <__ieee754_pow+0x3c8>)
 800b106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10a:	4604      	mov	r4, r0
 800b10c:	460d      	mov	r5, r1
 800b10e:	f7f5 fae3 	bl	80006d8 <__aeabi_dmul>
 800b112:	a353      	add	r3, pc, #332	; (adr r3, 800b260 <__ieee754_pow+0x3d0>)
 800b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b118:	4606      	mov	r6, r0
 800b11a:	460f      	mov	r7, r1
 800b11c:	4620      	mov	r0, r4
 800b11e:	4629      	mov	r1, r5
 800b120:	f7f5 fada 	bl	80006d8 <__aeabi_dmul>
 800b124:	4b57      	ldr	r3, [pc, #348]	; (800b284 <__ieee754_pow+0x3f4>)
 800b126:	4682      	mov	sl, r0
 800b128:	468b      	mov	fp, r1
 800b12a:	2200      	movs	r2, #0
 800b12c:	4620      	mov	r0, r4
 800b12e:	4629      	mov	r1, r5
 800b130:	f7f5 fad2 	bl	80006d8 <__aeabi_dmul>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	a14b      	add	r1, pc, #300	; (adr r1, 800b268 <__ieee754_pow+0x3d8>)
 800b13a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b13e:	f7f5 f913 	bl	8000368 <__aeabi_dsub>
 800b142:	4622      	mov	r2, r4
 800b144:	462b      	mov	r3, r5
 800b146:	f7f5 fac7 	bl	80006d8 <__aeabi_dmul>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	2000      	movs	r0, #0
 800b150:	494d      	ldr	r1, [pc, #308]	; (800b288 <__ieee754_pow+0x3f8>)
 800b152:	f7f5 f909 	bl	8000368 <__aeabi_dsub>
 800b156:	4622      	mov	r2, r4
 800b158:	4680      	mov	r8, r0
 800b15a:	4689      	mov	r9, r1
 800b15c:	462b      	mov	r3, r5
 800b15e:	4620      	mov	r0, r4
 800b160:	4629      	mov	r1, r5
 800b162:	f7f5 fab9 	bl	80006d8 <__aeabi_dmul>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	4640      	mov	r0, r8
 800b16c:	4649      	mov	r1, r9
 800b16e:	f7f5 fab3 	bl	80006d8 <__aeabi_dmul>
 800b172:	a33f      	add	r3, pc, #252	; (adr r3, 800b270 <__ieee754_pow+0x3e0>)
 800b174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b178:	f7f5 faae 	bl	80006d8 <__aeabi_dmul>
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	4650      	mov	r0, sl
 800b182:	4659      	mov	r1, fp
 800b184:	f7f5 f8f0 	bl	8000368 <__aeabi_dsub>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	4680      	mov	r8, r0
 800b18e:	4689      	mov	r9, r1
 800b190:	4630      	mov	r0, r6
 800b192:	4639      	mov	r1, r7
 800b194:	f7f5 f8ea 	bl	800036c <__adddf3>
 800b198:	2000      	movs	r0, #0
 800b19a:	4632      	mov	r2, r6
 800b19c:	463b      	mov	r3, r7
 800b19e:	4604      	mov	r4, r0
 800b1a0:	460d      	mov	r5, r1
 800b1a2:	f7f5 f8e1 	bl	8000368 <__aeabi_dsub>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4640      	mov	r0, r8
 800b1ac:	4649      	mov	r1, r9
 800b1ae:	f7f5 f8db 	bl	8000368 <__aeabi_dsub>
 800b1b2:	9b04      	ldr	r3, [sp, #16]
 800b1b4:	9a06      	ldr	r2, [sp, #24]
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	4682      	mov	sl, r0
 800b1bc:	468b      	mov	fp, r1
 800b1be:	f040 81e7 	bne.w	800b590 <__ieee754_pow+0x700>
 800b1c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b278 <__ieee754_pow+0x3e8>
 800b1c6:	eeb0 8a47 	vmov.f32	s16, s14
 800b1ca:	eef0 8a67 	vmov.f32	s17, s15
 800b1ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b1d2:	2600      	movs	r6, #0
 800b1d4:	4632      	mov	r2, r6
 800b1d6:	463b      	mov	r3, r7
 800b1d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1dc:	f7f5 f8c4 	bl	8000368 <__aeabi_dsub>
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	462b      	mov	r3, r5
 800b1e4:	f7f5 fa78 	bl	80006d8 <__aeabi_dmul>
 800b1e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1ec:	4680      	mov	r8, r0
 800b1ee:	4689      	mov	r9, r1
 800b1f0:	4650      	mov	r0, sl
 800b1f2:	4659      	mov	r1, fp
 800b1f4:	f7f5 fa70 	bl	80006d8 <__aeabi_dmul>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	4649      	mov	r1, r9
 800b200:	f7f5 f8b4 	bl	800036c <__adddf3>
 800b204:	4632      	mov	r2, r6
 800b206:	463b      	mov	r3, r7
 800b208:	4680      	mov	r8, r0
 800b20a:	4689      	mov	r9, r1
 800b20c:	4620      	mov	r0, r4
 800b20e:	4629      	mov	r1, r5
 800b210:	f7f5 fa62 	bl	80006d8 <__aeabi_dmul>
 800b214:	460b      	mov	r3, r1
 800b216:	4604      	mov	r4, r0
 800b218:	460d      	mov	r5, r1
 800b21a:	4602      	mov	r2, r0
 800b21c:	4649      	mov	r1, r9
 800b21e:	4640      	mov	r0, r8
 800b220:	f7f5 f8a4 	bl	800036c <__adddf3>
 800b224:	4b19      	ldr	r3, [pc, #100]	; (800b28c <__ieee754_pow+0x3fc>)
 800b226:	4299      	cmp	r1, r3
 800b228:	ec45 4b19 	vmov	d9, r4, r5
 800b22c:	4606      	mov	r6, r0
 800b22e:	460f      	mov	r7, r1
 800b230:	468b      	mov	fp, r1
 800b232:	f340 82f0 	ble.w	800b816 <__ieee754_pow+0x986>
 800b236:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b23a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b23e:	4303      	orrs	r3, r0
 800b240:	f000 81e4 	beq.w	800b60c <__ieee754_pow+0x77c>
 800b244:	ec51 0b18 	vmov	r0, r1, d8
 800b248:	2200      	movs	r2, #0
 800b24a:	2300      	movs	r3, #0
 800b24c:	f7f5 fcb6 	bl	8000bbc <__aeabi_dcmplt>
 800b250:	3800      	subs	r0, #0
 800b252:	bf18      	it	ne
 800b254:	2001      	movne	r0, #1
 800b256:	e72b      	b.n	800b0b0 <__ieee754_pow+0x220>
 800b258:	60000000 	.word	0x60000000
 800b25c:	3ff71547 	.word	0x3ff71547
 800b260:	f85ddf44 	.word	0xf85ddf44
 800b264:	3e54ae0b 	.word	0x3e54ae0b
 800b268:	55555555 	.word	0x55555555
 800b26c:	3fd55555 	.word	0x3fd55555
 800b270:	652b82fe 	.word	0x652b82fe
 800b274:	3ff71547 	.word	0x3ff71547
 800b278:	00000000 	.word	0x00000000
 800b27c:	bff00000 	.word	0xbff00000
 800b280:	3ff00000 	.word	0x3ff00000
 800b284:	3fd00000 	.word	0x3fd00000
 800b288:	3fe00000 	.word	0x3fe00000
 800b28c:	408fffff 	.word	0x408fffff
 800b290:	4bd5      	ldr	r3, [pc, #852]	; (800b5e8 <__ieee754_pow+0x758>)
 800b292:	402b      	ands	r3, r5
 800b294:	2200      	movs	r2, #0
 800b296:	b92b      	cbnz	r3, 800b2a4 <__ieee754_pow+0x414>
 800b298:	4bd4      	ldr	r3, [pc, #848]	; (800b5ec <__ieee754_pow+0x75c>)
 800b29a:	f7f5 fa1d 	bl	80006d8 <__aeabi_dmul>
 800b29e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	1523      	asrs	r3, r4, #20
 800b2a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b2aa:	4413      	add	r3, r2
 800b2ac:	9305      	str	r3, [sp, #20]
 800b2ae:	4bd0      	ldr	r3, [pc, #832]	; (800b5f0 <__ieee754_pow+0x760>)
 800b2b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b2b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b2b8:	429c      	cmp	r4, r3
 800b2ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b2be:	dd08      	ble.n	800b2d2 <__ieee754_pow+0x442>
 800b2c0:	4bcc      	ldr	r3, [pc, #816]	; (800b5f4 <__ieee754_pow+0x764>)
 800b2c2:	429c      	cmp	r4, r3
 800b2c4:	f340 8162 	ble.w	800b58c <__ieee754_pow+0x6fc>
 800b2c8:	9b05      	ldr	r3, [sp, #20]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	9305      	str	r3, [sp, #20]
 800b2ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b2d2:	2400      	movs	r4, #0
 800b2d4:	00e3      	lsls	r3, r4, #3
 800b2d6:	9307      	str	r3, [sp, #28]
 800b2d8:	4bc7      	ldr	r3, [pc, #796]	; (800b5f8 <__ieee754_pow+0x768>)
 800b2da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2de:	ed93 7b00 	vldr	d7, [r3]
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	ec53 2b17 	vmov	r2, r3, d7
 800b2e8:	eeb0 9a47 	vmov.f32	s18, s14
 800b2ec:	eef0 9a67 	vmov.f32	s19, s15
 800b2f0:	4682      	mov	sl, r0
 800b2f2:	f7f5 f839 	bl	8000368 <__aeabi_dsub>
 800b2f6:	4652      	mov	r2, sl
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	460f      	mov	r7, r1
 800b2fc:	462b      	mov	r3, r5
 800b2fe:	ec51 0b19 	vmov	r0, r1, d9
 800b302:	f7f5 f833 	bl	800036c <__adddf3>
 800b306:	4602      	mov	r2, r0
 800b308:	460b      	mov	r3, r1
 800b30a:	2000      	movs	r0, #0
 800b30c:	49bb      	ldr	r1, [pc, #748]	; (800b5fc <__ieee754_pow+0x76c>)
 800b30e:	f7f5 fb0d 	bl	800092c <__aeabi_ddiv>
 800b312:	ec41 0b1a 	vmov	d10, r0, r1
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4630      	mov	r0, r6
 800b31c:	4639      	mov	r1, r7
 800b31e:	f7f5 f9db 	bl	80006d8 <__aeabi_dmul>
 800b322:	2300      	movs	r3, #0
 800b324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b328:	9302      	str	r3, [sp, #8]
 800b32a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b32e:	46ab      	mov	fp, r5
 800b330:	106d      	asrs	r5, r5, #1
 800b332:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b336:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b33a:	ec41 0b18 	vmov	d8, r0, r1
 800b33e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b342:	2200      	movs	r2, #0
 800b344:	4640      	mov	r0, r8
 800b346:	4649      	mov	r1, r9
 800b348:	4614      	mov	r4, r2
 800b34a:	461d      	mov	r5, r3
 800b34c:	f7f5 f9c4 	bl	80006d8 <__aeabi_dmul>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	4630      	mov	r0, r6
 800b356:	4639      	mov	r1, r7
 800b358:	f7f5 f806 	bl	8000368 <__aeabi_dsub>
 800b35c:	ec53 2b19 	vmov	r2, r3, d9
 800b360:	4606      	mov	r6, r0
 800b362:	460f      	mov	r7, r1
 800b364:	4620      	mov	r0, r4
 800b366:	4629      	mov	r1, r5
 800b368:	f7f4 fffe 	bl	8000368 <__aeabi_dsub>
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	4650      	mov	r0, sl
 800b372:	4659      	mov	r1, fp
 800b374:	f7f4 fff8 	bl	8000368 <__aeabi_dsub>
 800b378:	4642      	mov	r2, r8
 800b37a:	464b      	mov	r3, r9
 800b37c:	f7f5 f9ac 	bl	80006d8 <__aeabi_dmul>
 800b380:	4602      	mov	r2, r0
 800b382:	460b      	mov	r3, r1
 800b384:	4630      	mov	r0, r6
 800b386:	4639      	mov	r1, r7
 800b388:	f7f4 ffee 	bl	8000368 <__aeabi_dsub>
 800b38c:	ec53 2b1a 	vmov	r2, r3, d10
 800b390:	f7f5 f9a2 	bl	80006d8 <__aeabi_dmul>
 800b394:	ec53 2b18 	vmov	r2, r3, d8
 800b398:	ec41 0b19 	vmov	d9, r0, r1
 800b39c:	ec51 0b18 	vmov	r0, r1, d8
 800b3a0:	f7f5 f99a 	bl	80006d8 <__aeabi_dmul>
 800b3a4:	a37c      	add	r3, pc, #496	; (adr r3, 800b598 <__ieee754_pow+0x708>)
 800b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	460d      	mov	r5, r1
 800b3ae:	f7f5 f993 	bl	80006d8 <__aeabi_dmul>
 800b3b2:	a37b      	add	r3, pc, #492	; (adr r3, 800b5a0 <__ieee754_pow+0x710>)
 800b3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b8:	f7f4 ffd8 	bl	800036c <__adddf3>
 800b3bc:	4622      	mov	r2, r4
 800b3be:	462b      	mov	r3, r5
 800b3c0:	f7f5 f98a 	bl	80006d8 <__aeabi_dmul>
 800b3c4:	a378      	add	r3, pc, #480	; (adr r3, 800b5a8 <__ieee754_pow+0x718>)
 800b3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ca:	f7f4 ffcf 	bl	800036c <__adddf3>
 800b3ce:	4622      	mov	r2, r4
 800b3d0:	462b      	mov	r3, r5
 800b3d2:	f7f5 f981 	bl	80006d8 <__aeabi_dmul>
 800b3d6:	a376      	add	r3, pc, #472	; (adr r3, 800b5b0 <__ieee754_pow+0x720>)
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	f7f4 ffc6 	bl	800036c <__adddf3>
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	462b      	mov	r3, r5
 800b3e4:	f7f5 f978 	bl	80006d8 <__aeabi_dmul>
 800b3e8:	a373      	add	r3, pc, #460	; (adr r3, 800b5b8 <__ieee754_pow+0x728>)
 800b3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ee:	f7f4 ffbd 	bl	800036c <__adddf3>
 800b3f2:	4622      	mov	r2, r4
 800b3f4:	462b      	mov	r3, r5
 800b3f6:	f7f5 f96f 	bl	80006d8 <__aeabi_dmul>
 800b3fa:	a371      	add	r3, pc, #452	; (adr r3, 800b5c0 <__ieee754_pow+0x730>)
 800b3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b400:	f7f4 ffb4 	bl	800036c <__adddf3>
 800b404:	4622      	mov	r2, r4
 800b406:	4606      	mov	r6, r0
 800b408:	460f      	mov	r7, r1
 800b40a:	462b      	mov	r3, r5
 800b40c:	4620      	mov	r0, r4
 800b40e:	4629      	mov	r1, r5
 800b410:	f7f5 f962 	bl	80006d8 <__aeabi_dmul>
 800b414:	4602      	mov	r2, r0
 800b416:	460b      	mov	r3, r1
 800b418:	4630      	mov	r0, r6
 800b41a:	4639      	mov	r1, r7
 800b41c:	f7f5 f95c 	bl	80006d8 <__aeabi_dmul>
 800b420:	4642      	mov	r2, r8
 800b422:	4604      	mov	r4, r0
 800b424:	460d      	mov	r5, r1
 800b426:	464b      	mov	r3, r9
 800b428:	ec51 0b18 	vmov	r0, r1, d8
 800b42c:	f7f4 ff9e 	bl	800036c <__adddf3>
 800b430:	ec53 2b19 	vmov	r2, r3, d9
 800b434:	f7f5 f950 	bl	80006d8 <__aeabi_dmul>
 800b438:	4622      	mov	r2, r4
 800b43a:	462b      	mov	r3, r5
 800b43c:	f7f4 ff96 	bl	800036c <__adddf3>
 800b440:	4642      	mov	r2, r8
 800b442:	4682      	mov	sl, r0
 800b444:	468b      	mov	fp, r1
 800b446:	464b      	mov	r3, r9
 800b448:	4640      	mov	r0, r8
 800b44a:	4649      	mov	r1, r9
 800b44c:	f7f5 f944 	bl	80006d8 <__aeabi_dmul>
 800b450:	4b6b      	ldr	r3, [pc, #428]	; (800b600 <__ieee754_pow+0x770>)
 800b452:	2200      	movs	r2, #0
 800b454:	4606      	mov	r6, r0
 800b456:	460f      	mov	r7, r1
 800b458:	f7f4 ff88 	bl	800036c <__adddf3>
 800b45c:	4652      	mov	r2, sl
 800b45e:	465b      	mov	r3, fp
 800b460:	f7f4 ff84 	bl	800036c <__adddf3>
 800b464:	2000      	movs	r0, #0
 800b466:	4604      	mov	r4, r0
 800b468:	460d      	mov	r5, r1
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	4640      	mov	r0, r8
 800b470:	4649      	mov	r1, r9
 800b472:	f7f5 f931 	bl	80006d8 <__aeabi_dmul>
 800b476:	4b62      	ldr	r3, [pc, #392]	; (800b600 <__ieee754_pow+0x770>)
 800b478:	4680      	mov	r8, r0
 800b47a:	4689      	mov	r9, r1
 800b47c:	2200      	movs	r2, #0
 800b47e:	4620      	mov	r0, r4
 800b480:	4629      	mov	r1, r5
 800b482:	f7f4 ff71 	bl	8000368 <__aeabi_dsub>
 800b486:	4632      	mov	r2, r6
 800b488:	463b      	mov	r3, r7
 800b48a:	f7f4 ff6d 	bl	8000368 <__aeabi_dsub>
 800b48e:	4602      	mov	r2, r0
 800b490:	460b      	mov	r3, r1
 800b492:	4650      	mov	r0, sl
 800b494:	4659      	mov	r1, fp
 800b496:	f7f4 ff67 	bl	8000368 <__aeabi_dsub>
 800b49a:	ec53 2b18 	vmov	r2, r3, d8
 800b49e:	f7f5 f91b 	bl	80006d8 <__aeabi_dmul>
 800b4a2:	4622      	mov	r2, r4
 800b4a4:	4606      	mov	r6, r0
 800b4a6:	460f      	mov	r7, r1
 800b4a8:	462b      	mov	r3, r5
 800b4aa:	ec51 0b19 	vmov	r0, r1, d9
 800b4ae:	f7f5 f913 	bl	80006d8 <__aeabi_dmul>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	4630      	mov	r0, r6
 800b4b8:	4639      	mov	r1, r7
 800b4ba:	f7f4 ff57 	bl	800036c <__adddf3>
 800b4be:	4606      	mov	r6, r0
 800b4c0:	460f      	mov	r7, r1
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	4640      	mov	r0, r8
 800b4c8:	4649      	mov	r1, r9
 800b4ca:	f7f4 ff4f 	bl	800036c <__adddf3>
 800b4ce:	a33e      	add	r3, pc, #248	; (adr r3, 800b5c8 <__ieee754_pow+0x738>)
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	460d      	mov	r5, r1
 800b4da:	f7f5 f8fd 	bl	80006d8 <__aeabi_dmul>
 800b4de:	4642      	mov	r2, r8
 800b4e0:	ec41 0b18 	vmov	d8, r0, r1
 800b4e4:	464b      	mov	r3, r9
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	f7f4 ff3d 	bl	8000368 <__aeabi_dsub>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	4639      	mov	r1, r7
 800b4f6:	f7f4 ff37 	bl	8000368 <__aeabi_dsub>
 800b4fa:	a335      	add	r3, pc, #212	; (adr r3, 800b5d0 <__ieee754_pow+0x740>)
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f7f5 f8ea 	bl	80006d8 <__aeabi_dmul>
 800b504:	a334      	add	r3, pc, #208	; (adr r3, 800b5d8 <__ieee754_pow+0x748>)
 800b506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50a:	4606      	mov	r6, r0
 800b50c:	460f      	mov	r7, r1
 800b50e:	4620      	mov	r0, r4
 800b510:	4629      	mov	r1, r5
 800b512:	f7f5 f8e1 	bl	80006d8 <__aeabi_dmul>
 800b516:	4602      	mov	r2, r0
 800b518:	460b      	mov	r3, r1
 800b51a:	4630      	mov	r0, r6
 800b51c:	4639      	mov	r1, r7
 800b51e:	f7f4 ff25 	bl	800036c <__adddf3>
 800b522:	9a07      	ldr	r2, [sp, #28]
 800b524:	4b37      	ldr	r3, [pc, #220]	; (800b604 <__ieee754_pow+0x774>)
 800b526:	4413      	add	r3, r2
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f7f4 ff1e 	bl	800036c <__adddf3>
 800b530:	4682      	mov	sl, r0
 800b532:	9805      	ldr	r0, [sp, #20]
 800b534:	468b      	mov	fp, r1
 800b536:	f7f5 f865 	bl	8000604 <__aeabi_i2d>
 800b53a:	9a07      	ldr	r2, [sp, #28]
 800b53c:	4b32      	ldr	r3, [pc, #200]	; (800b608 <__ieee754_pow+0x778>)
 800b53e:	4413      	add	r3, r2
 800b540:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b544:	4606      	mov	r6, r0
 800b546:	460f      	mov	r7, r1
 800b548:	4652      	mov	r2, sl
 800b54a:	465b      	mov	r3, fp
 800b54c:	ec51 0b18 	vmov	r0, r1, d8
 800b550:	f7f4 ff0c 	bl	800036c <__adddf3>
 800b554:	4642      	mov	r2, r8
 800b556:	464b      	mov	r3, r9
 800b558:	f7f4 ff08 	bl	800036c <__adddf3>
 800b55c:	4632      	mov	r2, r6
 800b55e:	463b      	mov	r3, r7
 800b560:	f7f4 ff04 	bl	800036c <__adddf3>
 800b564:	2000      	movs	r0, #0
 800b566:	4632      	mov	r2, r6
 800b568:	463b      	mov	r3, r7
 800b56a:	4604      	mov	r4, r0
 800b56c:	460d      	mov	r5, r1
 800b56e:	f7f4 fefb 	bl	8000368 <__aeabi_dsub>
 800b572:	4642      	mov	r2, r8
 800b574:	464b      	mov	r3, r9
 800b576:	f7f4 fef7 	bl	8000368 <__aeabi_dsub>
 800b57a:	ec53 2b18 	vmov	r2, r3, d8
 800b57e:	f7f4 fef3 	bl	8000368 <__aeabi_dsub>
 800b582:	4602      	mov	r2, r0
 800b584:	460b      	mov	r3, r1
 800b586:	4650      	mov	r0, sl
 800b588:	4659      	mov	r1, fp
 800b58a:	e610      	b.n	800b1ae <__ieee754_pow+0x31e>
 800b58c:	2401      	movs	r4, #1
 800b58e:	e6a1      	b.n	800b2d4 <__ieee754_pow+0x444>
 800b590:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b5e0 <__ieee754_pow+0x750>
 800b594:	e617      	b.n	800b1c6 <__ieee754_pow+0x336>
 800b596:	bf00      	nop
 800b598:	4a454eef 	.word	0x4a454eef
 800b59c:	3fca7e28 	.word	0x3fca7e28
 800b5a0:	93c9db65 	.word	0x93c9db65
 800b5a4:	3fcd864a 	.word	0x3fcd864a
 800b5a8:	a91d4101 	.word	0xa91d4101
 800b5ac:	3fd17460 	.word	0x3fd17460
 800b5b0:	518f264d 	.word	0x518f264d
 800b5b4:	3fd55555 	.word	0x3fd55555
 800b5b8:	db6fabff 	.word	0xdb6fabff
 800b5bc:	3fdb6db6 	.word	0x3fdb6db6
 800b5c0:	33333303 	.word	0x33333303
 800b5c4:	3fe33333 	.word	0x3fe33333
 800b5c8:	e0000000 	.word	0xe0000000
 800b5cc:	3feec709 	.word	0x3feec709
 800b5d0:	dc3a03fd 	.word	0xdc3a03fd
 800b5d4:	3feec709 	.word	0x3feec709
 800b5d8:	145b01f5 	.word	0x145b01f5
 800b5dc:	be3e2fe0 	.word	0xbe3e2fe0
 800b5e0:	00000000 	.word	0x00000000
 800b5e4:	3ff00000 	.word	0x3ff00000
 800b5e8:	7ff00000 	.word	0x7ff00000
 800b5ec:	43400000 	.word	0x43400000
 800b5f0:	0003988e 	.word	0x0003988e
 800b5f4:	000bb679 	.word	0x000bb679
 800b5f8:	0800be38 	.word	0x0800be38
 800b5fc:	3ff00000 	.word	0x3ff00000
 800b600:	40080000 	.word	0x40080000
 800b604:	0800be58 	.word	0x0800be58
 800b608:	0800be48 	.word	0x0800be48
 800b60c:	a3b3      	add	r3, pc, #716	; (adr r3, 800b8dc <__ieee754_pow+0xa4c>)
 800b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b612:	4640      	mov	r0, r8
 800b614:	4649      	mov	r1, r9
 800b616:	f7f4 fea9 	bl	800036c <__adddf3>
 800b61a:	4622      	mov	r2, r4
 800b61c:	ec41 0b1a 	vmov	d10, r0, r1
 800b620:	462b      	mov	r3, r5
 800b622:	4630      	mov	r0, r6
 800b624:	4639      	mov	r1, r7
 800b626:	f7f4 fe9f 	bl	8000368 <__aeabi_dsub>
 800b62a:	4602      	mov	r2, r0
 800b62c:	460b      	mov	r3, r1
 800b62e:	ec51 0b1a 	vmov	r0, r1, d10
 800b632:	f7f5 fae1 	bl	8000bf8 <__aeabi_dcmpgt>
 800b636:	2800      	cmp	r0, #0
 800b638:	f47f ae04 	bne.w	800b244 <__ieee754_pow+0x3b4>
 800b63c:	4aa2      	ldr	r2, [pc, #648]	; (800b8c8 <__ieee754_pow+0xa38>)
 800b63e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b642:	4293      	cmp	r3, r2
 800b644:	f340 8107 	ble.w	800b856 <__ieee754_pow+0x9c6>
 800b648:	151b      	asrs	r3, r3, #20
 800b64a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b64e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b652:	fa4a fa03 	asr.w	sl, sl, r3
 800b656:	44da      	add	sl, fp
 800b658:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b65c:	489b      	ldr	r0, [pc, #620]	; (800b8cc <__ieee754_pow+0xa3c>)
 800b65e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b662:	4108      	asrs	r0, r1
 800b664:	ea00 030a 	and.w	r3, r0, sl
 800b668:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b66c:	f1c1 0114 	rsb	r1, r1, #20
 800b670:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b674:	fa4a fa01 	asr.w	sl, sl, r1
 800b678:	f1bb 0f00 	cmp.w	fp, #0
 800b67c:	f04f 0200 	mov.w	r2, #0
 800b680:	4620      	mov	r0, r4
 800b682:	4629      	mov	r1, r5
 800b684:	bfb8      	it	lt
 800b686:	f1ca 0a00 	rsblt	sl, sl, #0
 800b68a:	f7f4 fe6d 	bl	8000368 <__aeabi_dsub>
 800b68e:	ec41 0b19 	vmov	d9, r0, r1
 800b692:	4642      	mov	r2, r8
 800b694:	464b      	mov	r3, r9
 800b696:	ec51 0b19 	vmov	r0, r1, d9
 800b69a:	f7f4 fe67 	bl	800036c <__adddf3>
 800b69e:	a37a      	add	r3, pc, #488	; (adr r3, 800b888 <__ieee754_pow+0x9f8>)
 800b6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	460d      	mov	r5, r1
 800b6aa:	f7f5 f815 	bl	80006d8 <__aeabi_dmul>
 800b6ae:	ec53 2b19 	vmov	r2, r3, d9
 800b6b2:	4606      	mov	r6, r0
 800b6b4:	460f      	mov	r7, r1
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	f7f4 fe55 	bl	8000368 <__aeabi_dsub>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	4640      	mov	r0, r8
 800b6c4:	4649      	mov	r1, r9
 800b6c6:	f7f4 fe4f 	bl	8000368 <__aeabi_dsub>
 800b6ca:	a371      	add	r3, pc, #452	; (adr r3, 800b890 <__ieee754_pow+0xa00>)
 800b6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d0:	f7f5 f802 	bl	80006d8 <__aeabi_dmul>
 800b6d4:	a370      	add	r3, pc, #448	; (adr r3, 800b898 <__ieee754_pow+0xa08>)
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	4680      	mov	r8, r0
 800b6dc:	4689      	mov	r9, r1
 800b6de:	4620      	mov	r0, r4
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	f7f4 fff9 	bl	80006d8 <__aeabi_dmul>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	4640      	mov	r0, r8
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	f7f4 fe3d 	bl	800036c <__adddf3>
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	460d      	mov	r5, r1
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	4639      	mov	r1, r7
 800b6fe:	f7f4 fe35 	bl	800036c <__adddf3>
 800b702:	4632      	mov	r2, r6
 800b704:	463b      	mov	r3, r7
 800b706:	4680      	mov	r8, r0
 800b708:	4689      	mov	r9, r1
 800b70a:	f7f4 fe2d 	bl	8000368 <__aeabi_dsub>
 800b70e:	4602      	mov	r2, r0
 800b710:	460b      	mov	r3, r1
 800b712:	4620      	mov	r0, r4
 800b714:	4629      	mov	r1, r5
 800b716:	f7f4 fe27 	bl	8000368 <__aeabi_dsub>
 800b71a:	4642      	mov	r2, r8
 800b71c:	4606      	mov	r6, r0
 800b71e:	460f      	mov	r7, r1
 800b720:	464b      	mov	r3, r9
 800b722:	4640      	mov	r0, r8
 800b724:	4649      	mov	r1, r9
 800b726:	f7f4 ffd7 	bl	80006d8 <__aeabi_dmul>
 800b72a:	a35d      	add	r3, pc, #372	; (adr r3, 800b8a0 <__ieee754_pow+0xa10>)
 800b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b730:	4604      	mov	r4, r0
 800b732:	460d      	mov	r5, r1
 800b734:	f7f4 ffd0 	bl	80006d8 <__aeabi_dmul>
 800b738:	a35b      	add	r3, pc, #364	; (adr r3, 800b8a8 <__ieee754_pow+0xa18>)
 800b73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73e:	f7f4 fe13 	bl	8000368 <__aeabi_dsub>
 800b742:	4622      	mov	r2, r4
 800b744:	462b      	mov	r3, r5
 800b746:	f7f4 ffc7 	bl	80006d8 <__aeabi_dmul>
 800b74a:	a359      	add	r3, pc, #356	; (adr r3, 800b8b0 <__ieee754_pow+0xa20>)
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	f7f4 fe0c 	bl	800036c <__adddf3>
 800b754:	4622      	mov	r2, r4
 800b756:	462b      	mov	r3, r5
 800b758:	f7f4 ffbe 	bl	80006d8 <__aeabi_dmul>
 800b75c:	a356      	add	r3, pc, #344	; (adr r3, 800b8b8 <__ieee754_pow+0xa28>)
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	f7f4 fe01 	bl	8000368 <__aeabi_dsub>
 800b766:	4622      	mov	r2, r4
 800b768:	462b      	mov	r3, r5
 800b76a:	f7f4 ffb5 	bl	80006d8 <__aeabi_dmul>
 800b76e:	a354      	add	r3, pc, #336	; (adr r3, 800b8c0 <__ieee754_pow+0xa30>)
 800b770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b774:	f7f4 fdfa 	bl	800036c <__adddf3>
 800b778:	4622      	mov	r2, r4
 800b77a:	462b      	mov	r3, r5
 800b77c:	f7f4 ffac 	bl	80006d8 <__aeabi_dmul>
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	4640      	mov	r0, r8
 800b786:	4649      	mov	r1, r9
 800b788:	f7f4 fdee 	bl	8000368 <__aeabi_dsub>
 800b78c:	4604      	mov	r4, r0
 800b78e:	460d      	mov	r5, r1
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	4640      	mov	r0, r8
 800b796:	4649      	mov	r1, r9
 800b798:	f7f4 ff9e 	bl	80006d8 <__aeabi_dmul>
 800b79c:	2200      	movs	r2, #0
 800b79e:	ec41 0b19 	vmov	d9, r0, r1
 800b7a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	f7f4 fddd 	bl	8000368 <__aeabi_dsub>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	ec51 0b19 	vmov	r0, r1, d9
 800b7b6:	f7f5 f8b9 	bl	800092c <__aeabi_ddiv>
 800b7ba:	4632      	mov	r2, r6
 800b7bc:	4604      	mov	r4, r0
 800b7be:	460d      	mov	r5, r1
 800b7c0:	463b      	mov	r3, r7
 800b7c2:	4640      	mov	r0, r8
 800b7c4:	4649      	mov	r1, r9
 800b7c6:	f7f4 ff87 	bl	80006d8 <__aeabi_dmul>
 800b7ca:	4632      	mov	r2, r6
 800b7cc:	463b      	mov	r3, r7
 800b7ce:	f7f4 fdcd 	bl	800036c <__adddf3>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	4629      	mov	r1, r5
 800b7da:	f7f4 fdc5 	bl	8000368 <__aeabi_dsub>
 800b7de:	4642      	mov	r2, r8
 800b7e0:	464b      	mov	r3, r9
 800b7e2:	f7f4 fdc1 	bl	8000368 <__aeabi_dsub>
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	4939      	ldr	r1, [pc, #228]	; (800b8d0 <__ieee754_pow+0xa40>)
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	f7f4 fdbb 	bl	8000368 <__aeabi_dsub>
 800b7f2:	ec41 0b10 	vmov	d0, r0, r1
 800b7f6:	ee10 3a90 	vmov	r3, s1
 800b7fa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b7fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b802:	da2b      	bge.n	800b85c <__ieee754_pow+0x9cc>
 800b804:	4650      	mov	r0, sl
 800b806:	f000 f877 	bl	800b8f8 <scalbn>
 800b80a:	ec51 0b10 	vmov	r0, r1, d0
 800b80e:	ec53 2b18 	vmov	r2, r3, d8
 800b812:	f7ff bbee 	b.w	800aff2 <__ieee754_pow+0x162>
 800b816:	4b2f      	ldr	r3, [pc, #188]	; (800b8d4 <__ieee754_pow+0xa44>)
 800b818:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b81c:	429e      	cmp	r6, r3
 800b81e:	f77f af0d 	ble.w	800b63c <__ieee754_pow+0x7ac>
 800b822:	4b2d      	ldr	r3, [pc, #180]	; (800b8d8 <__ieee754_pow+0xa48>)
 800b824:	440b      	add	r3, r1
 800b826:	4303      	orrs	r3, r0
 800b828:	d009      	beq.n	800b83e <__ieee754_pow+0x9ae>
 800b82a:	ec51 0b18 	vmov	r0, r1, d8
 800b82e:	2200      	movs	r2, #0
 800b830:	2300      	movs	r3, #0
 800b832:	f7f5 f9c3 	bl	8000bbc <__aeabi_dcmplt>
 800b836:	3800      	subs	r0, #0
 800b838:	bf18      	it	ne
 800b83a:	2001      	movne	r0, #1
 800b83c:	e448      	b.n	800b0d0 <__ieee754_pow+0x240>
 800b83e:	4622      	mov	r2, r4
 800b840:	462b      	mov	r3, r5
 800b842:	f7f4 fd91 	bl	8000368 <__aeabi_dsub>
 800b846:	4642      	mov	r2, r8
 800b848:	464b      	mov	r3, r9
 800b84a:	f7f5 f9cb 	bl	8000be4 <__aeabi_dcmpge>
 800b84e:	2800      	cmp	r0, #0
 800b850:	f43f aef4 	beq.w	800b63c <__ieee754_pow+0x7ac>
 800b854:	e7e9      	b.n	800b82a <__ieee754_pow+0x99a>
 800b856:	f04f 0a00 	mov.w	sl, #0
 800b85a:	e71a      	b.n	800b692 <__ieee754_pow+0x802>
 800b85c:	ec51 0b10 	vmov	r0, r1, d0
 800b860:	4619      	mov	r1, r3
 800b862:	e7d4      	b.n	800b80e <__ieee754_pow+0x97e>
 800b864:	491a      	ldr	r1, [pc, #104]	; (800b8d0 <__ieee754_pow+0xa40>)
 800b866:	2000      	movs	r0, #0
 800b868:	f7ff bb31 	b.w	800aece <__ieee754_pow+0x3e>
 800b86c:	2000      	movs	r0, #0
 800b86e:	2100      	movs	r1, #0
 800b870:	f7ff bb2d 	b.w	800aece <__ieee754_pow+0x3e>
 800b874:	4630      	mov	r0, r6
 800b876:	4639      	mov	r1, r7
 800b878:	f7ff bb29 	b.w	800aece <__ieee754_pow+0x3e>
 800b87c:	9204      	str	r2, [sp, #16]
 800b87e:	f7ff bb7b 	b.w	800af78 <__ieee754_pow+0xe8>
 800b882:	2300      	movs	r3, #0
 800b884:	f7ff bb65 	b.w	800af52 <__ieee754_pow+0xc2>
 800b888:	00000000 	.word	0x00000000
 800b88c:	3fe62e43 	.word	0x3fe62e43
 800b890:	fefa39ef 	.word	0xfefa39ef
 800b894:	3fe62e42 	.word	0x3fe62e42
 800b898:	0ca86c39 	.word	0x0ca86c39
 800b89c:	be205c61 	.word	0xbe205c61
 800b8a0:	72bea4d0 	.word	0x72bea4d0
 800b8a4:	3e663769 	.word	0x3e663769
 800b8a8:	c5d26bf1 	.word	0xc5d26bf1
 800b8ac:	3ebbbd41 	.word	0x3ebbbd41
 800b8b0:	af25de2c 	.word	0xaf25de2c
 800b8b4:	3f11566a 	.word	0x3f11566a
 800b8b8:	16bebd93 	.word	0x16bebd93
 800b8bc:	3f66c16c 	.word	0x3f66c16c
 800b8c0:	5555553e 	.word	0x5555553e
 800b8c4:	3fc55555 	.word	0x3fc55555
 800b8c8:	3fe00000 	.word	0x3fe00000
 800b8cc:	fff00000 	.word	0xfff00000
 800b8d0:	3ff00000 	.word	0x3ff00000
 800b8d4:	4090cbff 	.word	0x4090cbff
 800b8d8:	3f6f3400 	.word	0x3f6f3400
 800b8dc:	652b82fe 	.word	0x652b82fe
 800b8e0:	3c971547 	.word	0x3c971547

0800b8e4 <fabs>:
 800b8e4:	ec51 0b10 	vmov	r0, r1, d0
 800b8e8:	ee10 2a10 	vmov	r2, s0
 800b8ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b8f0:	ec43 2b10 	vmov	d0, r2, r3
 800b8f4:	4770      	bx	lr
	...

0800b8f8 <scalbn>:
 800b8f8:	b570      	push	{r4, r5, r6, lr}
 800b8fa:	ec55 4b10 	vmov	r4, r5, d0
 800b8fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b902:	4606      	mov	r6, r0
 800b904:	462b      	mov	r3, r5
 800b906:	b999      	cbnz	r1, 800b930 <scalbn+0x38>
 800b908:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b90c:	4323      	orrs	r3, r4
 800b90e:	d03f      	beq.n	800b990 <scalbn+0x98>
 800b910:	4b35      	ldr	r3, [pc, #212]	; (800b9e8 <scalbn+0xf0>)
 800b912:	4629      	mov	r1, r5
 800b914:	ee10 0a10 	vmov	r0, s0
 800b918:	2200      	movs	r2, #0
 800b91a:	f7f4 fedd 	bl	80006d8 <__aeabi_dmul>
 800b91e:	4b33      	ldr	r3, [pc, #204]	; (800b9ec <scalbn+0xf4>)
 800b920:	429e      	cmp	r6, r3
 800b922:	4604      	mov	r4, r0
 800b924:	460d      	mov	r5, r1
 800b926:	da10      	bge.n	800b94a <scalbn+0x52>
 800b928:	a327      	add	r3, pc, #156	; (adr r3, 800b9c8 <scalbn+0xd0>)
 800b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92e:	e01f      	b.n	800b970 <scalbn+0x78>
 800b930:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b934:	4291      	cmp	r1, r2
 800b936:	d10c      	bne.n	800b952 <scalbn+0x5a>
 800b938:	ee10 2a10 	vmov	r2, s0
 800b93c:	4620      	mov	r0, r4
 800b93e:	4629      	mov	r1, r5
 800b940:	f7f4 fd14 	bl	800036c <__adddf3>
 800b944:	4604      	mov	r4, r0
 800b946:	460d      	mov	r5, r1
 800b948:	e022      	b.n	800b990 <scalbn+0x98>
 800b94a:	460b      	mov	r3, r1
 800b94c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b950:	3936      	subs	r1, #54	; 0x36
 800b952:	f24c 3250 	movw	r2, #50000	; 0xc350
 800b956:	4296      	cmp	r6, r2
 800b958:	dd0d      	ble.n	800b976 <scalbn+0x7e>
 800b95a:	2d00      	cmp	r5, #0
 800b95c:	a11c      	add	r1, pc, #112	; (adr r1, 800b9d0 <scalbn+0xd8>)
 800b95e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b962:	da02      	bge.n	800b96a <scalbn+0x72>
 800b964:	a11c      	add	r1, pc, #112	; (adr r1, 800b9d8 <scalbn+0xe0>)
 800b966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b96a:	a319      	add	r3, pc, #100	; (adr r3, 800b9d0 <scalbn+0xd8>)
 800b96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b970:	f7f4 feb2 	bl	80006d8 <__aeabi_dmul>
 800b974:	e7e6      	b.n	800b944 <scalbn+0x4c>
 800b976:	1872      	adds	r2, r6, r1
 800b978:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b97c:	428a      	cmp	r2, r1
 800b97e:	dcec      	bgt.n	800b95a <scalbn+0x62>
 800b980:	2a00      	cmp	r2, #0
 800b982:	dd08      	ble.n	800b996 <scalbn+0x9e>
 800b984:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b988:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b98c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b990:	ec45 4b10 	vmov	d0, r4, r5
 800b994:	bd70      	pop	{r4, r5, r6, pc}
 800b996:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b99a:	da08      	bge.n	800b9ae <scalbn+0xb6>
 800b99c:	2d00      	cmp	r5, #0
 800b99e:	a10a      	add	r1, pc, #40	; (adr r1, 800b9c8 <scalbn+0xd0>)
 800b9a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9a4:	dac0      	bge.n	800b928 <scalbn+0x30>
 800b9a6:	a10e      	add	r1, pc, #56	; (adr r1, 800b9e0 <scalbn+0xe8>)
 800b9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9ac:	e7bc      	b.n	800b928 <scalbn+0x30>
 800b9ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9b2:	3236      	adds	r2, #54	; 0x36
 800b9b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b9b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b9bc:	4620      	mov	r0, r4
 800b9be:	4b0c      	ldr	r3, [pc, #48]	; (800b9f0 <scalbn+0xf8>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	e7d5      	b.n	800b970 <scalbn+0x78>
 800b9c4:	f3af 8000 	nop.w
 800b9c8:	c2f8f359 	.word	0xc2f8f359
 800b9cc:	01a56e1f 	.word	0x01a56e1f
 800b9d0:	8800759c 	.word	0x8800759c
 800b9d4:	7e37e43c 	.word	0x7e37e43c
 800b9d8:	8800759c 	.word	0x8800759c
 800b9dc:	fe37e43c 	.word	0xfe37e43c
 800b9e0:	c2f8f359 	.word	0xc2f8f359
 800b9e4:	81a56e1f 	.word	0x81a56e1f
 800b9e8:	43500000 	.word	0x43500000
 800b9ec:	ffff3cb0 	.word	0xffff3cb0
 800b9f0:	3c900000 	.word	0x3c900000

0800b9f4 <with_errno>:
 800b9f4:	b570      	push	{r4, r5, r6, lr}
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	460d      	mov	r5, r1
 800b9fa:	4616      	mov	r6, r2
 800b9fc:	f7fd f9aa 	bl	8008d54 <__errno>
 800ba00:	4629      	mov	r1, r5
 800ba02:	6006      	str	r6, [r0, #0]
 800ba04:	4620      	mov	r0, r4
 800ba06:	bd70      	pop	{r4, r5, r6, pc}

0800ba08 <xflow>:
 800ba08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba0a:	4614      	mov	r4, r2
 800ba0c:	461d      	mov	r5, r3
 800ba0e:	b108      	cbz	r0, 800ba14 <xflow+0xc>
 800ba10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba14:	e9cd 2300 	strd	r2, r3, [sp]
 800ba18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	4629      	mov	r1, r5
 800ba20:	f7f4 fe5a 	bl	80006d8 <__aeabi_dmul>
 800ba24:	2222      	movs	r2, #34	; 0x22
 800ba26:	b003      	add	sp, #12
 800ba28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba2c:	f7ff bfe2 	b.w	800b9f4 <with_errno>

0800ba30 <__math_uflow>:
 800ba30:	b508      	push	{r3, lr}
 800ba32:	2200      	movs	r2, #0
 800ba34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba38:	f7ff ffe6 	bl	800ba08 <xflow>
 800ba3c:	ec41 0b10 	vmov	d0, r0, r1
 800ba40:	bd08      	pop	{r3, pc}

0800ba42 <__math_oflow>:
 800ba42:	b508      	push	{r3, lr}
 800ba44:	2200      	movs	r2, #0
 800ba46:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ba4a:	f7ff ffdd 	bl	800ba08 <xflow>
 800ba4e:	ec41 0b10 	vmov	d0, r0, r1
 800ba52:	bd08      	pop	{r3, pc}

0800ba54 <_sbrk>:
 800ba54:	4a04      	ldr	r2, [pc, #16]	; (800ba68 <_sbrk+0x14>)
 800ba56:	6811      	ldr	r1, [r2, #0]
 800ba58:	4603      	mov	r3, r0
 800ba5a:	b909      	cbnz	r1, 800ba60 <_sbrk+0xc>
 800ba5c:	4903      	ldr	r1, [pc, #12]	; (800ba6c <_sbrk+0x18>)
 800ba5e:	6011      	str	r1, [r2, #0]
 800ba60:	6810      	ldr	r0, [r2, #0]
 800ba62:	4403      	add	r3, r0
 800ba64:	6013      	str	r3, [r2, #0]
 800ba66:	4770      	bx	lr
 800ba68:	20000f60 	.word	0x20000f60
 800ba6c:	20000f68 	.word	0x20000f68

0800ba70 <_init>:
 800ba70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba72:	bf00      	nop
 800ba74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba76:	bc08      	pop	{r3}
 800ba78:	469e      	mov	lr, r3
 800ba7a:	4770      	bx	lr

0800ba7c <_fini>:
 800ba7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7e:	bf00      	nop
 800ba80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba82:	bc08      	pop	{r3}
 800ba84:	469e      	mov	lr, r3
 800ba86:	4770      	bx	lr
