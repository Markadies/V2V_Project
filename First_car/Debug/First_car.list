
First_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011168  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08011338  08011338  00021338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080118e8  080118e8  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  080118e8  080118e8  000218e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080118f0  080118f0  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118f0  080118f0  000218f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080118f4  080118f4  000218f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080118f8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a25c  200001f8  08011af0  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001a454  08011af0  0003a454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002203b  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052b4  00000000  00000000  000522a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e20  00000000  00000000  00057560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000174f  00000000  00000000  00059380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000282c9  00000000  00000000  0005aacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027af5  00000000  00000000  00082d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6a4c  00000000  00000000  000aa88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000911c  00000000  00000000  001912dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0019a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011320 	.word	0x08011320

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08011320 	.word	0x08011320

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20019d38 	.word	0x20019d38
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <strlen>:
 8000350:	4603      	mov	r3, r0
 8000352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000356:	2a00      	cmp	r2, #0
 8000358:	d1fb      	bne.n	8000352 <strlen+0x2>
 800035a:	1a18      	subs	r0, r3, r0
 800035c:	3801      	subs	r0, #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	; 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2iz>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c40:	d215      	bcs.n	8000c6e <__aeabi_d2iz+0x36>
 8000c42:	d511      	bpl.n	8000c68 <__aeabi_d2iz+0x30>
 8000c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d912      	bls.n	8000c74 <__aeabi_d2iz+0x3c>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	4770      	bx	lr
 8000c68:	f04f 0000 	mov.w	r0, #0
 8000c6c:	4770      	bx	lr
 8000c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c72:	d105      	bne.n	8000c80 <__aeabi_d2iz+0x48>
 8000c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	bf08      	it	eq
 8000c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2uiz>:
 8000c88:	004a      	lsls	r2, r1, #1
 8000c8a:	d211      	bcs.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c90:	d211      	bcs.n	8000cb6 <__aeabi_d2uiz+0x2e>
 8000c92:	d50d      	bpl.n	8000cb0 <__aeabi_d2uiz+0x28>
 8000c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c9c:	d40e      	bmi.n	8000cbc <__aeabi_d2uiz+0x34>
 8000c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000caa:	fa23 f002 	lsr.w	r0, r3, r2
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cba:	d102      	bne.n	8000cc2 <__aeabi_d2uiz+0x3a>
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	4770      	bx	lr
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2f>:
 8000cc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ccc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cd0:	bf24      	itt	cs
 8000cd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cda:	d90d      	bls.n	8000cf8 <__aeabi_d2f+0x30>
 8000cdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ce0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ce4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ce8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cfc:	d121      	bne.n	8000d42 <__aeabi_d2f+0x7a>
 8000cfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d02:	bfbc      	itt	lt
 8000d04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d08:	4770      	bxlt	lr
 8000d0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d12:	f1c2 0218 	rsb	r2, r2, #24
 8000d16:	f1c2 0c20 	rsb	ip, r2, #32
 8000d1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d22:	bf18      	it	ne
 8000d24:	f040 0001 	orrne.w	r0, r0, #1
 8000d28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d34:	ea40 000c 	orr.w	r0, r0, ip
 8000d38:	fa23 f302 	lsr.w	r3, r3, r2
 8000d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d40:	e7cc      	b.n	8000cdc <__aeabi_d2f+0x14>
 8000d42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d46:	d107      	bne.n	8000d58 <__aeabi_d2f+0x90>
 8000d48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d56:	4770      	bxne	lr
 8000d58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b970 	b.w	8001060 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f806 	bl	8000d98 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__udivmoddi4>:
 8000d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d9c:	9e08      	ldr	r6, [sp, #32]
 8000d9e:	460d      	mov	r5, r1
 8000da0:	4604      	mov	r4, r0
 8000da2:	460f      	mov	r7, r1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d14a      	bne.n	8000e3e <__udivmoddi4+0xa6>
 8000da8:	428a      	cmp	r2, r1
 8000daa:	4694      	mov	ip, r2
 8000dac:	d965      	bls.n	8000e7a <__udivmoddi4+0xe2>
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	b143      	cbz	r3, 8000dc6 <__udivmoddi4+0x2e>
 8000db4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db8:	f1c3 0220 	rsb	r2, r3, #32
 8000dbc:	409f      	lsls	r7, r3
 8000dbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc2:	4317      	orrs	r7, r2
 8000dc4:	409c      	lsls	r4, r3
 8000dc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dca:	fa1f f58c 	uxth.w	r5, ip
 8000dce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dd2:	0c22      	lsrs	r2, r4, #16
 8000dd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ddc:	fb01 f005 	mul.w	r0, r1, r5
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x62>
 8000de4:	eb1c 0202 	adds.w	r2, ip, r2
 8000de8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dec:	f080 811c 	bcs.w	8001028 <__udivmoddi4+0x290>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f240 8119 	bls.w	8001028 <__udivmoddi4+0x290>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a12      	subs	r2, r2, r0
 8000dfc:	b2a4      	uxth	r4, r4
 8000dfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0a:	fb00 f505 	mul.w	r5, r0, r5
 8000e0e:	42a5      	cmp	r5, r4
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x90>
 8000e12:	eb1c 0404 	adds.w	r4, ip, r4
 8000e16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1a:	f080 8107 	bcs.w	800102c <__udivmoddi4+0x294>
 8000e1e:	42a5      	cmp	r5, r4
 8000e20:	f240 8104 	bls.w	800102c <__udivmoddi4+0x294>
 8000e24:	4464      	add	r4, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e2c:	1b64      	subs	r4, r4, r5
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11e      	cbz	r6, 8000e3a <__udivmoddi4+0xa2>
 8000e32:	40dc      	lsrs	r4, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	e9c6 4300 	strd	r4, r3, [r6]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0xbc>
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	f000 80ed 	beq.w	8001022 <__udivmoddi4+0x28a>
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e54:	fab3 f183 	clz	r1, r3
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d149      	bne.n	8000ef0 <__udivmoddi4+0x158>
 8000e5c:	42ab      	cmp	r3, r5
 8000e5e:	d302      	bcc.n	8000e66 <__udivmoddi4+0xce>
 8000e60:	4282      	cmp	r2, r0
 8000e62:	f200 80f8 	bhi.w	8001056 <__udivmoddi4+0x2be>
 8000e66:	1a84      	subs	r4, r0, r2
 8000e68:	eb65 0203 	sbc.w	r2, r5, r3
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	4617      	mov	r7, r2
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d0e2      	beq.n	8000e3a <__udivmoddi4+0xa2>
 8000e74:	e9c6 4700 	strd	r4, r7, [r6]
 8000e78:	e7df      	b.n	8000e3a <__udivmoddi4+0xa2>
 8000e7a:	b902      	cbnz	r2, 8000e7e <__udivmoddi4+0xe6>
 8000e7c:	deff      	udf	#255	; 0xff
 8000e7e:	fab2 f382 	clz	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8090 	bne.w	8000fa8 <__udivmoddi4+0x210>
 8000e88:	1a8a      	subs	r2, r1, r2
 8000e8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	2101      	movs	r1, #1
 8000e94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e98:	fb07 2015 	mls	r0, r7, r5, r2
 8000e9c:	0c22      	lsrs	r2, r4, #16
 8000e9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ea2:	fb0e f005 	mul.w	r0, lr, r5
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x124>
 8000eaa:	eb1c 0202 	adds.w	r2, ip, r2
 8000eae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x122>
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	f200 80cb 	bhi.w	8001050 <__udivmoddi4+0x2b8>
 8000eba:	4645      	mov	r5, r8
 8000ebc:	1a12      	subs	r2, r2, r0
 8000ebe:	b2a4      	uxth	r4, r4
 8000ec0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ec4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ecc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ed0:	45a6      	cmp	lr, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x14e>
 8000ed4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000edc:	d202      	bcs.n	8000ee4 <__udivmoddi4+0x14c>
 8000ede:	45a6      	cmp	lr, r4
 8000ee0:	f200 80bb 	bhi.w	800105a <__udivmoddi4+0x2c2>
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	eba4 040e 	sub.w	r4, r4, lr
 8000eea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eee:	e79f      	b.n	8000e30 <__udivmoddi4+0x98>
 8000ef0:	f1c1 0720 	rsb	r7, r1, #32
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000efe:	fa05 f401 	lsl.w	r4, r5, r1
 8000f02:	fa20 f307 	lsr.w	r3, r0, r7
 8000f06:	40fd      	lsrs	r5, r7
 8000f08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f12:	fa1f fe8c 	uxth.w	lr, ip
 8000f16:	fb09 5518 	mls	r5, r9, r8, r5
 8000f1a:	0c1c      	lsrs	r4, r3, #16
 8000f1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f20:	fb08 f50e 	mul.w	r5, r8, lr
 8000f24:	42a5      	cmp	r5, r4
 8000f26:	fa02 f201 	lsl.w	r2, r2, r1
 8000f2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f2e:	d90b      	bls.n	8000f48 <__udivmoddi4+0x1b0>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f38:	f080 8088 	bcs.w	800104c <__udivmoddi4+0x2b4>
 8000f3c:	42a5      	cmp	r5, r4
 8000f3e:	f240 8085 	bls.w	800104c <__udivmoddi4+0x2b4>
 8000f42:	f1a8 0802 	sub.w	r8, r8, #2
 8000f46:	4464      	add	r4, ip
 8000f48:	1b64      	subs	r4, r4, r5
 8000f4a:	b29d      	uxth	r5, r3
 8000f4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f50:	fb09 4413 	mls	r4, r9, r3, r4
 8000f54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x1da>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f68:	d26c      	bcs.n	8001044 <__udivmoddi4+0x2ac>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	d96a      	bls.n	8001044 <__udivmoddi4+0x2ac>
 8000f6e:	3b02      	subs	r3, #2
 8000f70:	4464      	add	r4, ip
 8000f72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f76:	fba3 9502 	umull	r9, r5, r3, r2
 8000f7a:	eba4 040e 	sub.w	r4, r4, lr
 8000f7e:	42ac      	cmp	r4, r5
 8000f80:	46c8      	mov	r8, r9
 8000f82:	46ae      	mov	lr, r5
 8000f84:	d356      	bcc.n	8001034 <__udivmoddi4+0x29c>
 8000f86:	d053      	beq.n	8001030 <__udivmoddi4+0x298>
 8000f88:	b156      	cbz	r6, 8000fa0 <__udivmoddi4+0x208>
 8000f8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f92:	fa04 f707 	lsl.w	r7, r4, r7
 8000f96:	40ca      	lsrs	r2, r1
 8000f98:	40cc      	lsrs	r4, r1
 8000f9a:	4317      	orrs	r7, r2
 8000f9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa8:	f1c3 0120 	rsb	r1, r3, #32
 8000fac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000fb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000fb8:	409d      	lsls	r5, r3
 8000fba:	432a      	orrs	r2, r5
 8000fbc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc0:	fa1f fe8c 	uxth.w	lr, ip
 8000fc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fc8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fcc:	0c11      	lsrs	r1, r2, #16
 8000fce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fd2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fd6:	428d      	cmp	r5, r1
 8000fd8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0x258>
 8000fde:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fe6:	d22f      	bcs.n	8001048 <__udivmoddi4+0x2b0>
 8000fe8:	428d      	cmp	r5, r1
 8000fea:	d92d      	bls.n	8001048 <__udivmoddi4+0x2b0>
 8000fec:	3802      	subs	r0, #2
 8000fee:	4461      	add	r1, ip
 8000ff0:	1b49      	subs	r1, r1, r5
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ff8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	fb05 f10e 	mul.w	r1, r5, lr
 8001004:	4291      	cmp	r1, r2
 8001006:	d908      	bls.n	800101a <__udivmoddi4+0x282>
 8001008:	eb1c 0202 	adds.w	r2, ip, r2
 800100c:	f105 38ff 	add.w	r8, r5, #4294967295
 8001010:	d216      	bcs.n	8001040 <__udivmoddi4+0x2a8>
 8001012:	4291      	cmp	r1, r2
 8001014:	d914      	bls.n	8001040 <__udivmoddi4+0x2a8>
 8001016:	3d02      	subs	r5, #2
 8001018:	4462      	add	r2, ip
 800101a:	1a52      	subs	r2, r2, r1
 800101c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001020:	e738      	b.n	8000e94 <__udivmoddi4+0xfc>
 8001022:	4631      	mov	r1, r6
 8001024:	4630      	mov	r0, r6
 8001026:	e708      	b.n	8000e3a <__udivmoddi4+0xa2>
 8001028:	4639      	mov	r1, r7
 800102a:	e6e6      	b.n	8000dfa <__udivmoddi4+0x62>
 800102c:	4610      	mov	r0, r2
 800102e:	e6fb      	b.n	8000e28 <__udivmoddi4+0x90>
 8001030:	4548      	cmp	r0, r9
 8001032:	d2a9      	bcs.n	8000f88 <__udivmoddi4+0x1f0>
 8001034:	ebb9 0802 	subs.w	r8, r9, r2
 8001038:	eb65 0e0c 	sbc.w	lr, r5, ip
 800103c:	3b01      	subs	r3, #1
 800103e:	e7a3      	b.n	8000f88 <__udivmoddi4+0x1f0>
 8001040:	4645      	mov	r5, r8
 8001042:	e7ea      	b.n	800101a <__udivmoddi4+0x282>
 8001044:	462b      	mov	r3, r5
 8001046:	e794      	b.n	8000f72 <__udivmoddi4+0x1da>
 8001048:	4640      	mov	r0, r8
 800104a:	e7d1      	b.n	8000ff0 <__udivmoddi4+0x258>
 800104c:	46d0      	mov	r8, sl
 800104e:	e77b      	b.n	8000f48 <__udivmoddi4+0x1b0>
 8001050:	3d02      	subs	r5, #2
 8001052:	4462      	add	r2, ip
 8001054:	e732      	b.n	8000ebc <__udivmoddi4+0x124>
 8001056:	4608      	mov	r0, r1
 8001058:	e70a      	b.n	8000e70 <__udivmoddi4+0xd8>
 800105a:	4464      	add	r4, ip
 800105c:	3802      	subs	r0, #2
 800105e:	e742      	b.n	8000ee6 <__udivmoddi4+0x14e>

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <GPSSPEED_voidBuildMsg>:
#include <stdio.h>
#include "Build_msg.h"


void GPSSPEED_voidBuildMsg(uint8_t* Msg_Array,double Copy_doubleGPS_Longitude,double Copy_doubleGPS_Latitude,uint16_t Copy_uint16Speed)
{
 8001064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001068:	b092      	sub	sp, #72	; 0x48
 800106a:	af02      	add	r7, sp, #8
 800106c:	6178      	str	r0, [r7, #20]
 800106e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001072:	ed87 1b00 	vstr	d1, [r7]
 8001076:	460b      	mov	r3, r1
 8001078:	827b      	strh	r3, [r7, #18]
 800107a:	466b      	mov	r3, sp
 800107c:	469a      	mov	sl, r3

	uint8_t Local_uint8LatitudeArr[11];
	uint8_t Local_uint8LongitudeArr[11];
	uint8_t Local_uint8SpeedElements;

	uint8_t Local_uint8Counter=0;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if(Copy_uint16Speed<10)
 8001084:	8a7b      	ldrh	r3, [r7, #18]
 8001086:	2b09      	cmp	r3, #9
 8001088:	d803      	bhi.n	8001092 <GPSSPEED_voidBuildMsg+0x2e>
	{
		Local_uint8SpeedElements=1;
 800108a:	2301      	movs	r3, #1
 800108c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001090:	e014      	b.n	80010bc <GPSSPEED_voidBuildMsg+0x58>
	}
	else if(Copy_uint16Speed<100)
 8001092:	8a7b      	ldrh	r3, [r7, #18]
 8001094:	2b63      	cmp	r3, #99	; 0x63
 8001096:	d803      	bhi.n	80010a0 <GPSSPEED_voidBuildMsg+0x3c>
	{
		Local_uint8SpeedElements=2;
 8001098:	2302      	movs	r3, #2
 800109a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800109e:	e00d      	b.n	80010bc <GPSSPEED_voidBuildMsg+0x58>
	}
	else if((Copy_uint16Speed>100) && (Copy_uint16Speed<1000))
 80010a0:	8a7b      	ldrh	r3, [r7, #18]
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d907      	bls.n	80010b6 <GPSSPEED_voidBuildMsg+0x52>
 80010a6:	8a7b      	ldrh	r3, [r7, #18]
 80010a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ac:	d203      	bcs.n	80010b6 <GPSSPEED_voidBuildMsg+0x52>
	{
		Local_uint8SpeedElements=3;
 80010ae:	2303      	movs	r3, #3
 80010b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80010b4:	e002      	b.n	80010bc <GPSSPEED_voidBuildMsg+0x58>
	}
	else
	{
		Local_uint8SpeedElements=4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	uint8_t Local_uint8SpeedArr[Local_uint8SpeedElements+1];
 80010bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010c0:	1c5e      	adds	r6, r3, #1
 80010c2:	1e73      	subs	r3, r6, #1
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80010c6:	4632      	mov	r2, r6
 80010c8:	2300      	movs	r3, #0
 80010ca:	4690      	mov	r8, r2
 80010cc:	4699      	mov	r9, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010e2:	4632      	mov	r2, r6
 80010e4:	2300      	movs	r3, #0
 80010e6:	4614      	mov	r4, r2
 80010e8:	461d      	mov	r5, r3
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	00eb      	lsls	r3, r5, #3
 80010f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010f8:	00e2      	lsls	r2, r4, #3
 80010fa:	4633      	mov	r3, r6
 80010fc:	3307      	adds	r3, #7
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	ebad 0d03 	sub.w	sp, sp, r3
 8001106:	ab02      	add	r3, sp, #8
 8001108:	3300      	adds	r3, #0
 800110a:	637b      	str	r3, [r7, #52]	; 0x34

	/*Putting the lat and lon in a string form to be sent to the esp*/
	snprintf(&Local_uint8LongitudeArr,sizeof(Local_uint8LongitudeArr),"%.6f",Copy_doubleGPS_Longitude);
 800110c:	f107 001c 	add.w	r0, r7, #28
 8001110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001114:	e9cd 2300 	strd	r2, r3, [sp]
 8001118:	4a50      	ldr	r2, [pc, #320]	; (800125c <GPSSPEED_voidBuildMsg+0x1f8>)
 800111a:	210b      	movs	r1, #11
 800111c:	f00c fffe 	bl	800e11c <sniprintf>
	snprintf(&Local_uint8LatitudeArr,sizeof(Local_uint8LatitudeArr),"%.6f",Copy_doubleGPS_Latitude);
 8001120:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001128:	e9cd 2300 	strd	r2, r3, [sp]
 800112c:	4a4b      	ldr	r2, [pc, #300]	; (800125c <GPSSPEED_voidBuildMsg+0x1f8>)
 800112e:	210b      	movs	r1, #11
 8001130:	f00c fff4 	bl	800e11c <sniprintf>

	snprintf(&Local_uint8SpeedArr,sizeof(Local_uint8SpeedArr),"%d",Copy_uint16Speed);
 8001134:	4631      	mov	r1, r6
 8001136:	8a7b      	ldrh	r3, [r7, #18]
 8001138:	4a49      	ldr	r2, [pc, #292]	; (8001260 <GPSSPEED_voidBuildMsg+0x1fc>)
 800113a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800113c:	f00c ffee 	bl	800e11c <sniprintf>

	Msg_Array[0]='#';
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2223      	movs	r2, #35	; 0x23
 8001144:	701a      	strb	r2, [r3, #0]
	Msg_Array[1]=Local_uint8LongitudeArr[0];
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	7f3a      	ldrb	r2, [r7, #28]
 800114c:	701a      	strb	r2, [r3, #0]
	Msg_Array[2]=Local_uint8LongitudeArr[1];
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3302      	adds	r3, #2
 8001152:	7f7a      	ldrb	r2, [r7, #29]
 8001154:	701a      	strb	r2, [r3, #0]
	Msg_Array[3]=Local_uint8LongitudeArr[2];
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3303      	adds	r3, #3
 800115a:	7fba      	ldrb	r2, [r7, #30]
 800115c:	701a      	strb	r2, [r3, #0]
	Msg_Array[4]=Local_uint8LongitudeArr[3];
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3304      	adds	r3, #4
 8001162:	7ffa      	ldrb	r2, [r7, #31]
 8001164:	701a      	strb	r2, [r3, #0]

	Msg_Array[5]=Local_uint8LongitudeArr[4];
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3305      	adds	r3, #5
 800116a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800116e:	701a      	strb	r2, [r3, #0]
	Msg_Array[6]=Local_uint8LongitudeArr[5];
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3306      	adds	r3, #6
 8001174:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001178:	701a      	strb	r2, [r3, #0]
	Msg_Array[7]=Local_uint8LongitudeArr[6];
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3307      	adds	r3, #7
 800117e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001182:	701a      	strb	r2, [r3, #0]
	Msg_Array[8]=Local_uint8LongitudeArr[7];
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3308      	adds	r3, #8
 8001188:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800118c:	701a      	strb	r2, [r3, #0]
	Msg_Array[9]=Local_uint8LongitudeArr[8];
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3309      	adds	r3, #9
 8001192:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001196:	701a      	strb	r2, [r3, #0]

	Msg_Array[10]='*';
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	330a      	adds	r3, #10
 800119c:	222a      	movs	r2, #42	; 0x2a
 800119e:	701a      	strb	r2, [r3, #0]

	Msg_Array[11]= Local_uint8LatitudeArr[0];
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	330b      	adds	r3, #11
 80011a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80011a8:	701a      	strb	r2, [r3, #0]
	Msg_Array[12]= Local_uint8LatitudeArr[1];
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	330c      	adds	r3, #12
 80011ae:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80011b2:	701a      	strb	r2, [r3, #0]
	Msg_Array[13]= Local_uint8LatitudeArr[2];
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	330d      	adds	r3, #13
 80011b8:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80011bc:	701a      	strb	r2, [r3, #0]
	Msg_Array[14]= Local_uint8LatitudeArr[3];
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	330e      	adds	r3, #14
 80011c2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80011c6:	701a      	strb	r2, [r3, #0]
	Msg_Array[15]= Local_uint8LatitudeArr[4];
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	330f      	adds	r3, #15
 80011cc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80011d0:	701a      	strb	r2, [r3, #0]
	Msg_Array[16]= Local_uint8LatitudeArr[5];
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3310      	adds	r3, #16
 80011d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80011da:	701a      	strb	r2, [r3, #0]
	Msg_Array[17]= Local_uint8LatitudeArr[6];
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3311      	adds	r3, #17
 80011e0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80011e4:	701a      	strb	r2, [r3, #0]
	Msg_Array[18]= Local_uint8LatitudeArr[7];
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3312      	adds	r3, #18
 80011ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80011ee:	701a      	strb	r2, [r3, #0]
	Msg_Array[19]= Local_uint8LatitudeArr[8];
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3313      	adds	r3, #19
 80011f4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80011f8:	701a      	strb	r2, [r3, #0]

	Msg_Array[20]= '&';
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3314      	adds	r3, #20
 80011fe:	2226      	movs	r2, #38	; 0x26
 8001200:	701a      	strb	r2, [r3, #0]


	for(Local_uint8Counter;Local_uint8Counter<Local_uint8SpeedElements;Local_uint8Counter++)
 8001202:	e00f      	b.n	8001224 <GPSSPEED_voidBuildMsg+0x1c0>
	{
		Msg_Array[21+Local_uint8Counter]=Local_uint8SpeedArr[Local_uint8Counter];
 8001204:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001208:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800120c:	3315      	adds	r3, #21
 800120e:	4619      	mov	r1, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	440b      	add	r3, r1
 8001214:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001216:	5c8a      	ldrb	r2, [r1, r2]
 8001218:	701a      	strb	r2, [r3, #0]
	for(Local_uint8Counter;Local_uint8Counter<Local_uint8SpeedElements;Local_uint8Counter++)
 800121a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800121e:	3301      	adds	r3, #1
 8001220:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001224:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001228:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800122c:	429a      	cmp	r2, r3
 800122e:	d3e9      	bcc.n	8001204 <GPSSPEED_voidBuildMsg+0x1a0>
	}

	Msg_Array[21+Local_uint8Counter]='^';
 8001230:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001234:	3315      	adds	r3, #21
 8001236:	461a      	mov	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	4413      	add	r3, r2
 800123c:	225e      	movs	r2, #94	; 0x5e
 800123e:	701a      	strb	r2, [r3, #0]
	Msg_Array[22+Local_uint8Counter]='!';
 8001240:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001244:	3316      	adds	r3, #22
 8001246:	461a      	mov	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	4413      	add	r3, r2
 800124c:	2221      	movs	r2, #33	; 0x21
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	46d5      	mov	sp, sl

}
 8001252:	bf00      	nop
 8001254:	3740      	adds	r7, #64	; 0x40
 8001256:	46bd      	mov	sp, r7
 8001258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125c:	08011338 	.word	0x08011338
 8001260:	08011340 	.word	0x08011340

08001264 <Buzzer_voidHighSound>:
#endif


}
void Buzzer_voidHighSound(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0


#endif
#elif Buzzer_Timer_Connected == TIMER12
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1
	TIM12->CCR1=90;
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <Buzzer_voidHighSound+0x18>)
 800126a:	225a      	movs	r2, #90	; 0x5a
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 800126e:	2100      	movs	r1, #0
 8001270:	4803      	ldr	r0, [pc, #12]	; (8001280 <Buzzer_voidHighSound+0x1c>)
 8001272:	f005 fba9 	bl	80069c8 <HAL_TIM_PWM_Start>

#endif



}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40001800 	.word	0x40001800
 8001280:	20000914 	.word	0x20000914

08001284 <Buzzer_voidStop>:

void Buzzer_voidStop(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
#endif

#elif Buzzer_Timer_Connected == TIMER12
#if Buzzer_TimerChannel_Connected == TIMER_CHANNEL_1

	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8001288:	2100      	movs	r1, #0
 800128a:	4802      	ldr	r0, [pc, #8]	; (8001294 <Buzzer_voidStop+0x10>)
 800128c:	f005 fc64 	bl	8006b58 <HAL_TIM_PWM_Stop>




#endif
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000914 	.word	0x20000914

08001298 <HAL_TIM_IC_CaptureCallback>:


/***************************************Interrupts_Call_Backs********************************************************/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a8:	d10c      	bne.n	80012c4 <HAL_TIM_IC_CaptureCallback+0x2c>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7f1b      	ldrb	r3, [r3, #28]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d003      	beq.n	80012ba <HAL_TIM_IC_CaptureCallback+0x22>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7f1b      	ldrb	r3, [r3, #28]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d104      	bne.n	80012c4 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		edges_counter++;
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0x38>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0x38>)
 80012c2:	6013      	str	r3, [r2, #0]
	}
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	20000214 	.word	0x20000214

080012d4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af02      	add	r7, sp, #8
 80012da:	6078      	str	r0, [r7, #4]
	/* Bluetooth interrupt*/
	if(huart->Instance==USART3)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <HAL_UART_RxCpltCallback+0x3c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d10f      	bne.n	8001306 <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_UART_Receive_IT(&huart3, &received_char, 1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	490a      	ldr	r1, [pc, #40]	; (8001314 <HAL_UART_RxCpltCallback+0x40>)
 80012ea:	480b      	ldr	r0, [pc, #44]	; (8001318 <HAL_UART_RxCpltCallback+0x44>)
 80012ec:	f006 fbf5 	bl	8007ada <HAL_UART_Receive_IT>

		/*Give the Notification to the CarControl task*/
		xTaskNotifyFromISR(Handle_CarControl,NULL,eNoAction,NULL);
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_UART_RxCpltCallback+0x48>)
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	2300      	movs	r3, #0
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2300      	movs	r3, #0
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	f009 fb87 	bl	800aa14 <xTaskGenericNotifyFromISR>
	else if(huart->Instance==UART5)
	{


	}
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40004800 	.word	0x40004800
 8001314:	20000a6c 	.word	0x20000a6c
 8001318:	200009e4 	.word	0x200009e4
 800131c:	20000a74 	.word	0x20000a74

08001320 <vApplicationIdleHook>:

/*********************************************Application_Hook*************************************************************/
void vApplicationIdleHook(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	/*The processor will go to sleep in the IDLE Task*/
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001324:	2101      	movs	r1, #1
 8001326:	2000      	movs	r0, #0
 8001328:	f004 fc40 	bl	8005bac <HAL_PWR_EnterSLEEPMode>

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <CallBack_TimerLCDBuzzer>:

/*********************************************SW_Timers_CallBacks*********************************************************/
void CallBack_TimerLCDBuzzer(TimerHandle_t xTimer)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	/*When the LCDBuzzer task starts the timer it should turn off the buzzer and clear the LCD*/

	/*Stopping the buzzer*/
	Buzzer_voidStop();
 8001338:	f7ff ffa4 	bl	8001284 <Buzzer_voidStop>

	/*Clearing the LCD*/
	LCD_voidClearDisplay();
 800133c:	f000 fc64 	bl	8001c08 <LCD_voidClearDisplay>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <Car_Move_Forward_High_Speed>:

void Motor4_Rotate_CW(void);
void Motor4_Rotate_CCW(void);


void Car_Move_Forward_High_Speed(void){
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 800134c:	f000 f928 	bl	80015a0 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <Car_Move_Forward_High_Speed+0x54>)
 8001352:	2263      	movs	r2, #99	; 0x63
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <Car_Move_Forward_High_Speed+0x54>)
 8001358:	2263      	movs	r2, #99	; 0x63
 800135a:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <Car_Move_Forward_High_Speed+0x54>)
 800135e:	2263      	movs	r2, #99	; 0x63
 8001360:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <Car_Move_Forward_High_Speed+0x54>)
 8001364:	2263      	movs	r2, #99	; 0x63
 8001366:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001368:	2100      	movs	r1, #0
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <Car_Move_Forward_High_Speed+0x58>)
 800136c:	f005 fb2c 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001370:	2104      	movs	r1, #4
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <Car_Move_Forward_High_Speed+0x58>)
 8001374:	f005 fb28 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001378:	2108      	movs	r1, #8
 800137a:	4809      	ldr	r0, [pc, #36]	; (80013a0 <Car_Move_Forward_High_Speed+0x58>)
 800137c:	f005 fb24 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001380:	210c      	movs	r1, #12
 8001382:	4807      	ldr	r0, [pc, #28]	; (80013a0 <Car_Move_Forward_High_Speed+0x58>)
 8001384:	f005 fb20 	bl	80069c8 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at the same direction*/
	Motor1_Rotate_CW();
 8001388:	f000 f93e 	bl	8001608 <Motor1_Rotate_CW>
	Motor2_Rotate_CW();
 800138c:	f000 f960 	bl	8001650 <Motor2_Rotate_CW>
	Motor3_Rotate_CW();
 8001390:	f000 f97e 	bl	8001690 <Motor3_Rotate_CW>
	Motor4_Rotate_CW();
 8001394:	f000 f9a0 	bl	80016d8 <Motor4_Rotate_CW>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40000400 	.word	0x40000400
 80013a0:	20000884 	.word	0x20000884

080013a4 <Car_Move_Backward>:
	Motor2_Rotate_CW();
	Motor3_Rotate_CW();
	Motor4_Rotate_CW();
}
void Car_Move_Backward(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 80013a8:	f000 f8fa 	bl	80015a0 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <Car_Move_Backward+0x54>)
 80013ae:	2263      	movs	r2, #99	; 0x63
 80013b0:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <Car_Move_Backward+0x54>)
 80013b4:	2263      	movs	r2, #99	; 0x63
 80013b6:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <Car_Move_Backward+0x54>)
 80013ba:	2263      	movs	r2, #99	; 0x63
 80013bc:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <Car_Move_Backward+0x54>)
 80013c0:	2263      	movs	r2, #99	; 0x63
 80013c2:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 80013c4:	2100      	movs	r1, #0
 80013c6:	480d      	ldr	r0, [pc, #52]	; (80013fc <Car_Move_Backward+0x58>)
 80013c8:	f005 fafe 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 80013cc:	2104      	movs	r1, #4
 80013ce:	480b      	ldr	r0, [pc, #44]	; (80013fc <Car_Move_Backward+0x58>)
 80013d0:	f005 fafa 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 80013d4:	2108      	movs	r1, #8
 80013d6:	4809      	ldr	r0, [pc, #36]	; (80013fc <Car_Move_Backward+0x58>)
 80013d8:	f005 faf6 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 80013dc:	210c      	movs	r1, #12
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <Car_Move_Backward+0x58>)
 80013e0:	f005 faf2 	bl	80069c8 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at the same  direction*/
	Motor1_Rotate_CCW();
 80013e4:	f000 f922 	bl	800162c <Motor1_Rotate_CCW>
	Motor2_Rotate_CCW();
 80013e8:	f000 f942 	bl	8001670 <Motor2_Rotate_CCW>
	Motor3_Rotate_CCW();
 80013ec:	f000 f962 	bl	80016b4 <Motor3_Rotate_CCW>
	Motor4_Rotate_CCW();
 80013f0:	f000 f984 	bl	80016fc <Motor4_Rotate_CCW>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40000400 	.word	0x40000400
 80013fc:	20000884 	.word	0x20000884

08001400 <Car_Rotate_Right>:

void Car_Rotate_Right(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 8001404:	f000 f8cc 	bl	80015a0 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=HIGH_SPEED;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <Car_Rotate_Right+0x54>)
 800140a:	2263      	movs	r2, #99	; 0x63
 800140c:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <Car_Rotate_Right+0x54>)
 8001410:	2263      	movs	r2, #99	; 0x63
 8001412:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <Car_Rotate_Right+0x54>)
 8001416:	2263      	movs	r2, #99	; 0x63
 8001418:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <Car_Rotate_Right+0x54>)
 800141c:	2263      	movs	r2, #99	; 0x63
 800141e:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001420:	2100      	movs	r1, #0
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <Car_Rotate_Right+0x58>)
 8001424:	f005 fad0 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001428:	2104      	movs	r1, #4
 800142a:	480b      	ldr	r0, [pc, #44]	; (8001458 <Car_Rotate_Right+0x58>)
 800142c:	f005 facc 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001430:	2108      	movs	r1, #8
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <Car_Rotate_Right+0x58>)
 8001434:	f005 fac8 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001438:	210c      	movs	r1, #12
 800143a:	4807      	ldr	r0, [pc, #28]	; (8001458 <Car_Rotate_Right+0x58>)
 800143c:	f005 fac4 	bl	80069c8 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at opposite direction*/
	Motor1_Rotate_CW();
 8001440:	f000 f8e2 	bl	8001608 <Motor1_Rotate_CW>
	Motor2_Rotate_CCW();
 8001444:	f000 f914 	bl	8001670 <Motor2_Rotate_CCW>
	Motor3_Rotate_CW();
 8001448:	f000 f922 	bl	8001690 <Motor3_Rotate_CW>
	Motor4_Rotate_CCW();
 800144c:	f000 f956 	bl	80016fc <Motor4_Rotate_CCW>
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40000400 	.word	0x40000400
 8001458:	20000884 	.word	0x20000884

0800145c <Car_Rotate_Left>:
void Car_Rotate_Left(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	/*First Disabling the two motors*/
	Motors_Disabling();
 8001460:	f000 f89e 	bl	80015a0 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Assigning the duty cycle*/
	PWM_Motor_1=LOW_SPEED;
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <Car_Rotate_Left+0x54>)
 8001466:	2246      	movs	r2, #70	; 0x46
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=LOW_SPEED;
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <Car_Rotate_Left+0x54>)
 800146c:	2246      	movs	r2, #70	; 0x46
 800146e:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=LOW_SPEED;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <Car_Rotate_Left+0x54>)
 8001472:	2246      	movs	r2, #70	; 0x46
 8001474:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=LOW_SPEED;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <Car_Rotate_Left+0x54>)
 8001478:	2246      	movs	r2, #70	; 0x46
 800147a:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/
	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 800147c:	2100      	movs	r1, #0
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <Car_Rotate_Left+0x58>)
 8001480:	f005 faa2 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 8001484:	2104      	movs	r1, #4
 8001486:	480b      	ldr	r0, [pc, #44]	; (80014b4 <Car_Rotate_Left+0x58>)
 8001488:	f005 fa9e 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 800148c:	2108      	movs	r1, #8
 800148e:	4809      	ldr	r0, [pc, #36]	; (80014b4 <Car_Rotate_Left+0x58>)
 8001490:	f005 fa9a 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 8001494:	210c      	movs	r1, #12
 8001496:	4807      	ldr	r0, [pc, #28]	; (80014b4 <Car_Rotate_Left+0x58>)
 8001498:	f005 fa96 	bl	80069c8 <HAL_TIM_PWM_Start>

	/*Making Both motors rotate at opposite direction*/
	Motor1_Rotate_CCW();
 800149c:	f000 f8c6 	bl	800162c <Motor1_Rotate_CCW>
	Motor2_Rotate_CW();
 80014a0:	f000 f8d6 	bl	8001650 <Motor2_Rotate_CW>
	Motor3_Rotate_CCW();
 80014a4:	f000 f906 	bl	80016b4 <Motor3_Rotate_CCW>
	Motor4_Rotate_CW();
 80014a8:	f000 f916 	bl	80016d8 <Motor4_Rotate_CW>

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40000400 	.word	0x40000400
 80014b4:	20000884 	.word	0x20000884

080014b8 <Car_Rotate_RightForward>:
void Car_Rotate_RightForward(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	/*First Disabling the Four motors*/
	Motors_Disabling();
 80014bc:	f000 f870 	bl	80015a0 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Right motors rotate high speed and the Left with low speed*/
	/*Assigning the duty cycle*/

	PWM_Motor_1=LOW_SPEED;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <Car_Rotate_RightForward+0x54>)
 80014c2:	2246      	movs	r2, #70	; 0x46
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=HIGH_SPEED;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <Car_Rotate_RightForward+0x54>)
 80014c8:	2263      	movs	r2, #99	; 0x63
 80014ca:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=LOW_SPEED;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <Car_Rotate_RightForward+0x54>)
 80014ce:	2246      	movs	r2, #70	; 0x46
 80014d0:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=HIGH_SPEED;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <Car_Rotate_RightForward+0x54>)
 80014d4:	2263      	movs	r2, #99	; 0x63
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/

	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 80014d8:	2100      	movs	r1, #0
 80014da:	480d      	ldr	r0, [pc, #52]	; (8001510 <Car_Rotate_RightForward+0x58>)
 80014dc:	f005 fa74 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 80014e0:	2104      	movs	r1, #4
 80014e2:	480b      	ldr	r0, [pc, #44]	; (8001510 <Car_Rotate_RightForward+0x58>)
 80014e4:	f005 fa70 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 80014e8:	2108      	movs	r1, #8
 80014ea:	4809      	ldr	r0, [pc, #36]	; (8001510 <Car_Rotate_RightForward+0x58>)
 80014ec:	f005 fa6c 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 80014f0:	210c      	movs	r1, #12
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <Car_Rotate_RightForward+0x58>)
 80014f4:	f005 fa68 	bl	80069c8 <HAL_TIM_PWM_Start>

	/*Making  motors rotate at opposite direction*/
		Motor1_Rotate_CW();
 80014f8:	f000 f886 	bl	8001608 <Motor1_Rotate_CW>
		Motor2_Rotate_CW();
 80014fc:	f000 f8a8 	bl	8001650 <Motor2_Rotate_CW>
		Motor3_Rotate_CW();
 8001500:	f000 f8c6 	bl	8001690 <Motor3_Rotate_CW>
		Motor4_Rotate_CW();
 8001504:	f000 f8e8 	bl	80016d8 <Motor4_Rotate_CW>



}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40000400 	.word	0x40000400
 8001510:	20000884 	.word	0x20000884

08001514 <Car_Rotate_LeftForward>:
void Car_Rotate_LeftForward(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

	/*First Disabling the Four motors*/
	Motors_Disabling();
 8001518:	f000 f842 	bl	80015a0 <Motors_Disabling>

	/*Setting the PWM for both motors to high Speed & Starting the PWM generation on both motors*/
	/*Right motors rotate high speed and the Left with low speed*/
	/*Assigning the duty cycle*/

	PWM_Motor_1=HIGH_SPEED;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <Car_Rotate_LeftForward+0x54>)
 800151e:	2263      	movs	r2, #99	; 0x63
 8001520:	635a      	str	r2, [r3, #52]	; 0x34
	PWM_Motor_2=LOW_SPEED;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <Car_Rotate_LeftForward+0x54>)
 8001524:	2246      	movs	r2, #70	; 0x46
 8001526:	639a      	str	r2, [r3, #56]	; 0x38
	PWM_Motor_3=HIGH_SPEED;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <Car_Rotate_LeftForward+0x54>)
 800152a:	2263      	movs	r2, #99	; 0x63
 800152c:	63da      	str	r2, [r3, #60]	; 0x3c
	PWM_Motor_4=LOW_SPEED;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <Car_Rotate_LeftForward+0x54>)
 8001530:	2246      	movs	r2, #70	; 0x46
 8001532:	641a      	str	r2, [r3, #64]	; 0x40

	/*Starting the generation*/

	HAL_TIM_PWM_Start(Motor1_Timer,Motor1_Channel);
 8001534:	2100      	movs	r1, #0
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <Car_Rotate_LeftForward+0x58>)
 8001538:	f005 fa46 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor2_Timer,Motor2_Channel);
 800153c:	2104      	movs	r1, #4
 800153e:	480b      	ldr	r0, [pc, #44]	; (800156c <Car_Rotate_LeftForward+0x58>)
 8001540:	f005 fa42 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor3_Timer,Motor3_Channel);
 8001544:	2108      	movs	r1, #8
 8001546:	4809      	ldr	r0, [pc, #36]	; (800156c <Car_Rotate_LeftForward+0x58>)
 8001548:	f005 fa3e 	bl	80069c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Motor4_Timer,Motor4_Channel);
 800154c:	210c      	movs	r1, #12
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <Car_Rotate_LeftForward+0x58>)
 8001550:	f005 fa3a 	bl	80069c8 <HAL_TIM_PWM_Start>

	/*Making  motors rotate at opposite direction*/
		Motor1_Rotate_CW();
 8001554:	f000 f858 	bl	8001608 <Motor1_Rotate_CW>
		Motor2_Rotate_CW();
 8001558:	f000 f87a 	bl	8001650 <Motor2_Rotate_CW>
		Motor3_Rotate_CW();
 800155c:	f000 f898 	bl	8001690 <Motor3_Rotate_CW>
		Motor4_Rotate_CW();
 8001560:	f000 f8ba 	bl	80016d8 <Motor4_Rotate_CW>




}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40000400 	.word	0x40000400
 800156c:	20000884 	.word	0x20000884

08001570 <Car_Stop>:
void Car_Stop(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
    /*Stopping the PWM generation on both motors*/
	HAL_TIM_PWM_Stop(Motor1_Timer, Motor1_Channel);
 8001574:	2100      	movs	r1, #0
 8001576:	4809      	ldr	r0, [pc, #36]	; (800159c <Car_Stop+0x2c>)
 8001578:	f005 faee 	bl	8006b58 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor2_Timer, Motor2_Channel);
 800157c:	2104      	movs	r1, #4
 800157e:	4807      	ldr	r0, [pc, #28]	; (800159c <Car_Stop+0x2c>)
 8001580:	f005 faea 	bl	8006b58 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor3_Timer, Motor3_Channel);
 8001584:	2108      	movs	r1, #8
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <Car_Stop+0x2c>)
 8001588:	f005 fae6 	bl	8006b58 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(Motor4_Timer, Motor4_Channel);
 800158c:	210c      	movs	r1, #12
 800158e:	4803      	ldr	r0, [pc, #12]	; (800159c <Car_Stop+0x2c>)
 8001590:	f005 fae2 	bl	8006b58 <HAL_TIM_PWM_Stop>
	/*Disabling both motors*/
	Motors_Disabling();
 8001594:	f000 f804 	bl	80015a0 <Motors_Disabling>

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000884 	.word	0x20000884

080015a0 <Motors_Disabling>:
static void Motors_Disabling(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port, IN1, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015aa:	4815      	ldr	r0, [pc, #84]	; (8001600 <Motors_Disabling+0x60>)
 80015ac:	f003 f9a4 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port, IN2, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b6:	4812      	ldr	r0, [pc, #72]	; (8001600 <Motors_Disabling+0x60>)
 80015b8:	f003 f99e 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port, IN3, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2104      	movs	r1, #4
 80015c0:	480f      	ldr	r0, [pc, #60]	; (8001600 <Motors_Disabling+0x60>)
 80015c2:	f003 f999 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port, IN4, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2108      	movs	r1, #8
 80015ca:	480d      	ldr	r0, [pc, #52]	; (8001600 <Motors_Disabling+0x60>)
 80015cc:	f003 f994 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port, IN5, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d6:	480a      	ldr	r0, [pc, #40]	; (8001600 <Motors_Disabling+0x60>)
 80015d8:	f003 f98e 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port, IN6, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	2110      	movs	r1, #16
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <Motors_Disabling+0x60>)
 80015e2:	f003 f989 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port, IN7, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2120      	movs	r1, #32
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <Motors_Disabling+0x64>)
 80015ec:	f003 f984 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port, IN8, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f6:	4803      	ldr	r0, [pc, #12]	; (8001604 <Motors_Disabling+0x64>)
 80015f8:	f003 f97e 	bl	80048f8 <HAL_GPIO_WritePin>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40020800 	.word	0x40020800
 8001604:	40020400 	.word	0x40020400

08001608 <Motor1_Rotate_CW>:
 void Motor1_Rotate_CW(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor1_Port,IN1, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <Motor1_Rotate_CW+0x20>)
 8001614:	f003 f970 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port,IN2, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800161e:	4802      	ldr	r0, [pc, #8]	; (8001628 <Motor1_Rotate_CW+0x20>)
 8001620:	f003 f96a 	bl	80048f8 <HAL_GPIO_WritePin>
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40020800 	.word	0x40020800

0800162c <Motor1_Rotate_CCW>:
 void Motor1_Rotate_CCW(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port,IN1, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <Motor1_Rotate_CCW+0x20>)
 8001638:	f003 f95e 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port,IN2, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001642:	4802      	ldr	r0, [pc, #8]	; (800164c <Motor1_Rotate_CCW+0x20>)
 8001644:	f003 f958 	bl	80048f8 <HAL_GPIO_WritePin>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40020800 	.word	0x40020800

08001650 <Motor2_Rotate_CW>:
void Motor2_Rotate_CW(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor2_Port,IN3, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	2104      	movs	r1, #4
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <Motor2_Rotate_CW+0x1c>)
 800165a:	f003 f94d 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port,IN4, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	2108      	movs	r1, #8
 8001662:	4802      	ldr	r0, [pc, #8]	; (800166c <Motor2_Rotate_CW+0x1c>)
 8001664:	f003 f948 	bl	80048f8 <HAL_GPIO_WritePin>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40020800 	.word	0x40020800

08001670 <Motor2_Rotate_CCW>:
void Motor2_Rotate_CCW(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor2_Port,IN3, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	2104      	movs	r1, #4
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <Motor2_Rotate_CCW+0x1c>)
 800167a:	f003 f93d 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_Port,IN4, GPIO_PIN_SET);
 800167e:	2201      	movs	r2, #1
 8001680:	2108      	movs	r1, #8
 8001682:	4802      	ldr	r0, [pc, #8]	; (800168c <Motor2_Rotate_CCW+0x1c>)
 8001684:	f003 f938 	bl	80048f8 <HAL_GPIO_WritePin>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40020800 	.word	0x40020800

08001690 <Motor3_Rotate_CW>:




 void Motor3_Rotate_CW(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor3_Port,IN5, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <Motor3_Rotate_CW+0x20>)
 800169c:	f003 f92c 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port,IN6, GPIO_PIN_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	2110      	movs	r1, #16
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <Motor3_Rotate_CW+0x20>)
 80016a6:	f003 f927 	bl	80048f8 <HAL_GPIO_WritePin>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40020800 	.word	0x40020800

080016b4 <Motor3_Rotate_CCW>:
 void Motor3_Rotate_CCW(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor3_Port,IN5, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <Motor3_Rotate_CCW+0x20>)
 80016c0:	f003 f91a 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor3_Port,IN6, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2110      	movs	r1, #16
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <Motor3_Rotate_CCW+0x20>)
 80016ca:	f003 f915 	bl	80048f8 <HAL_GPIO_WritePin>
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40020800 	.word	0x40020800

080016d8 <Motor4_Rotate_CW>:



 void Motor4_Rotate_CW(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor4_Port,IN7, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	2120      	movs	r1, #32
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <Motor4_Rotate_CW+0x20>)
 80016e2:	f003 f909 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port,IN8, GPIO_PIN_SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <Motor4_Rotate_CW+0x20>)
 80016ee:	f003 f903 	bl	80048f8 <HAL_GPIO_WritePin>
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40020400 	.word	0x40020400

080016fc <Motor4_Rotate_CCW>:
 void Motor4_Rotate_CCW(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor4_Port,IN7, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	2120      	movs	r1, #32
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <Motor4_Rotate_CCW+0x20>)
 8001706:	f003 f8f7 	bl	80048f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor4_Port,IN8, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <Motor4_Rotate_CCW+0x20>)
 8001712:	f003 f8f1 	bl	80048f8 <HAL_GPIO_WritePin>
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40020400 	.word	0x40020400

08001720 <GPS_voidInit>:
/*This is the object of our struct*/
GPS_Data_t GPS_Data;

/*Waits till the gps gets right information and its done*/
void GPS_voidInit(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	/*Ringbuffer initialization*/
	Ringbuf_init();
 8001724:	f001 f992 	bl	8002a4c <Ringbuf_init>
	HAL_Delay(500);
 8001728:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800172c:	f002 fdb8 	bl	80042a0 <HAL_Delay>

	/*LCD initializing*/
	LCD_voidInit();
 8001730:	f000 f97a 	bl	8001a28 <LCD_voidInit>

	/*Writing on LCD that the gps still warming up*/
	LCD_voidSetPositionXY(0,2);
 8001734:	2102      	movs	r1, #2
 8001736:	2000      	movs	r0, #0
 8001738:	f000 fa20 	bl	8001b7c <LCD_voidSetPositionXY>
	LCD_voidSendString("Waiting for GPS");
 800173c:	481d      	ldr	r0, [pc, #116]	; (80017b4 <GPS_voidInit+0x94>)
 800173e:	f000 fa01 	bl	8001b44 <LCD_voidSendString>

	/*waiting till the GGA data is valid*/
	while(flagGGA!=Valid_Data)
 8001742:	e017      	b.n	8001774 <GPS_voidInit+0x54>
	{
		if (Wait_for("GGA") == 1)
 8001744:	481c      	ldr	r0, [pc, #112]	; (80017b8 <GPS_voidInit+0x98>)
 8001746:	f001 fab1 	bl	8002cac <Wait_for>
 800174a:	4603      	mov	r3, r0
 800174c:	2b01      	cmp	r3, #1
 800174e:	d111      	bne.n	8001774 <GPS_voidInit+0x54>
		{
			Copy_upto("*", GGA);
 8001750:	491a      	ldr	r1, [pc, #104]	; (80017bc <GPS_voidInit+0x9c>)
 8001752:	481b      	ldr	r0, [pc, #108]	; (80017c0 <GPS_voidInit+0xa0>)
 8001754:	f001 fa2a 	bl	8002bac <Copy_upto>
			if (decodeGGA(GGA, &GPS_NMEA_DATA.ggastruct) == 0) flagGGA = Valid_Data;  // 2 indicates the data is valid
 8001758:	491a      	ldr	r1, [pc, #104]	; (80017c4 <GPS_voidInit+0xa4>)
 800175a:	4818      	ldr	r0, [pc, #96]	; (80017bc <GPS_voidInit+0x9c>)
 800175c:	f000 fc48 	bl	8001ff0 <decodeGGA>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <GPS_voidInit+0x4e>
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <GPS_voidInit+0xa8>)
 8001768:	2202      	movs	r2, #2
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	e002      	b.n	8001774 <GPS_voidInit+0x54>
			else flagGGA = unValid_Data;  // 1 indicates the data is invalid
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <GPS_voidInit+0xa8>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
	while(flagGGA!=Valid_Data)
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <GPS_voidInit+0xa8>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d1e3      	bne.n	8001744 <GPS_voidInit+0x24>
		}
	}

	/*Clearing the LCD and telling the user to start the project */
	LCD_voidClearDisplay();
 800177c:	f000 fa44 	bl	8001c08 <LCD_voidClearDisplay>
	LCD_voidSetPositionXY(0,4);
 8001780:	2104      	movs	r1, #4
 8001782:	2000      	movs	r0, #0
 8001784:	f000 f9fa 	bl	8001b7c <LCD_voidSetPositionXY>
	LCD_voidSendString("GPS is done");
 8001788:	4810      	ldr	r0, [pc, #64]	; (80017cc <GPS_voidInit+0xac>)
 800178a:	f000 f9db 	bl	8001b44 <LCD_voidSendString>
	LCD_voidSetPositionXY(1,4);
 800178e:	2104      	movs	r1, #4
 8001790:	2001      	movs	r0, #1
 8001792:	f000 f9f3 	bl	8001b7c <LCD_voidSetPositionXY>
	LCD_voidSendString("good 2 go");
 8001796:	480e      	ldr	r0, [pc, #56]	; (80017d0 <GPS_voidInit+0xb0>)
 8001798:	f000 f9d4 	bl	8001b44 <LCD_voidSendString>

	/*Clearing the flag*/
	flagGGA=0;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <GPS_voidInit+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 80017a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a6:	f002 fd7b 	bl	80042a0 <HAL_Delay>

	/*Clearing the LCD*/
	LCD_voidClearDisplay();
 80017aa:	f000 fa2d 	bl	8001c08 <LCD_voidClearDisplay>

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	08011344 	.word	0x08011344
 80017b8:	08011354 	.word	0x08011354
 80017bc:	20000218 	.word	0x20000218
 80017c0:	08011358 	.word	0x08011358
 80017c4:	20000280 	.word	0x20000280
 80017c8:	200002e0 	.word	0x200002e0
 80017cc:	0801135c 	.word	0x0801135c
 80017d0:	08011368 	.word	0x08011368

080017d4 <GPS_uint8DecodeGGAData>:
/*Decode the message and puts the important information in the global variables
 * like: longitude, latitude, North/south , East/west*/

/*Returns 1 in success and 2 if the decoding process failed*/
uint8_t GPS_uint8DecodeGGAData()
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
	uint8_t Local_uint8ErrorCode=0;
 80017da:	2300      	movs	r3, #0
 80017dc:	71fb      	strb	r3, [r7, #7]

	if (Wait_for("GGA") == 1)
 80017de:	4825      	ldr	r0, [pc, #148]	; (8001874 <GPS_uint8DecodeGGAData+0xa0>)
 80017e0:	f001 fa64 	bl	8002cac <Wait_for>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d111      	bne.n	800180e <GPS_uint8DecodeGGAData+0x3a>
	{
		Copy_upto("*", GGA);
 80017ea:	4923      	ldr	r1, [pc, #140]	; (8001878 <GPS_uint8DecodeGGAData+0xa4>)
 80017ec:	4823      	ldr	r0, [pc, #140]	; (800187c <GPS_uint8DecodeGGAData+0xa8>)
 80017ee:	f001 f9dd 	bl	8002bac <Copy_upto>
		if (decodeGGA(GGA, &GPS_NMEA_DATA.ggastruct) == 0) flagGGA = Valid_Data;  // 2 indicates the data is valid
 80017f2:	4923      	ldr	r1, [pc, #140]	; (8001880 <GPS_uint8DecodeGGAData+0xac>)
 80017f4:	4820      	ldr	r0, [pc, #128]	; (8001878 <GPS_uint8DecodeGGAData+0xa4>)
 80017f6:	f000 fbfb 	bl	8001ff0 <decodeGGA>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d103      	bne.n	8001808 <GPS_uint8DecodeGGAData+0x34>
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <GPS_uint8DecodeGGAData+0xb0>)
 8001802:	2202      	movs	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
 8001806:	e002      	b.n	800180e <GPS_uint8DecodeGGAData+0x3a>
		else flagGGA = unValid_Data;  // 1 indicates the data is invalid
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <GPS_uint8DecodeGGAData+0xb0>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
	}

	if(flagGGA==Valid_Data)
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <GPS_uint8DecodeGGAData+0xb0>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d11e      	bne.n	8001854 <GPS_uint8DecodeGGAData+0x80>
	{
		Local_uint8ErrorCode=Decode_Success;
 8001816:	2301      	movs	r3, #1
 8001818:	71fb      	strb	r3, [r7, #7]
		GPS_Data.Latitude  = GPS_NMEA_DATA.ggastruct.lcation.latitude;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <GPS_uint8DecodeGGAData+0xac>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff fa50 	bl	8000cc8 <__aeabi_d2f>
 8001828:	4603      	mov	r3, r0
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <GPS_uint8DecodeGGAData+0xb4>)
 800182c:	6013      	str	r3, [r2, #0]
		GPS_Data.Longitude = GPS_NMEA_DATA.ggastruct.lcation.longitude;
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <GPS_uint8DecodeGGAData+0xac>)
 8001830:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff fa46 	bl	8000cc8 <__aeabi_d2f>
 800183c:	4603      	mov	r3, r0
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <GPS_uint8DecodeGGAData+0xb4>)
 8001840:	6053      	str	r3, [r2, #4]

		GPS_Data.East_West = GPS_NMEA_DATA.ggastruct.lcation.EW;
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <GPS_uint8DecodeGGAData+0xac>)
 8001844:	7e1a      	ldrb	r2, [r3, #24]
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <GPS_uint8DecodeGGAData+0xb4>)
 8001848:	721a      	strb	r2, [r3, #8]
		GPS_Data.North_South = GPS_NMEA_DATA.ggastruct.lcation.NS;
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <GPS_uint8DecodeGGAData+0xac>)
 800184c:	7a1a      	ldrb	r2, [r3, #8]
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <GPS_uint8DecodeGGAData+0xb4>)
 8001850:	725a      	strb	r2, [r3, #9]
 8001852:	e00a      	b.n	800186a <GPS_uint8DecodeGGAData+0x96>
	}
	else
	{
		Local_uint8ErrorCode=Decode_Failed;
 8001854:	2302      	movs	r3, #2
 8001856:	71fb      	strb	r3, [r7, #7]
		/*When the decoding is unsuccessful, you shouldnot print on the LCD,
		 * you will know when the flag is = 2*/
		LCD_voidClearDisplay();
 8001858:	f000 f9d6 	bl	8001c08 <LCD_voidClearDisplay>
		LCD_voidSetPositionXY(2,2);
 800185c:	2102      	movs	r1, #2
 800185e:	2002      	movs	r0, #2
 8001860:	f000 f98c 	bl	8001b7c <LCD_voidSetPositionXY>
		LCD_voidSendString("GPS decode fail");
 8001864:	4809      	ldr	r0, [pc, #36]	; (800188c <GPS_uint8DecodeGGAData+0xb8>)
 8001866:	f000 f96d 	bl	8001b44 <LCD_voidSendString>
	}


	return Local_uint8ErrorCode;
 800186a:	79fb      	ldrb	r3, [r7, #7]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	08011354 	.word	0x08011354
 8001878:	20000218 	.word	0x20000218
 800187c:	08011358 	.word	0x08011358
 8001880:	20000280 	.word	0x20000280
 8001884:	200002e0 	.word	0x200002e0
 8001888:	200002e4 	.word	0x200002e4
 800188c:	08011374 	.word	0x08011374

08001890 <LCD_AvoidHardBraking>:

}


void LCD_AvoidHardBraking(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	/*Printing the warning sign*/
	LCD_Print_WarningSign();
 8001894:	f000 f814 	bl	80018c0 <LCD_Print_WarningSign>

	/*Printing the warning message to the driver*/
	LCD_voidSetPositionXY(1,0);
 8001898:	2100      	movs	r1, #0
 800189a:	2001      	movs	r0, #1
 800189c:	f000 f96e 	bl	8001b7c <LCD_voidSetPositionXY>
	LCD_voidSendString("Hit Brakes");
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <LCD_AvoidHardBraking+0x28>)
 80018a2:	f000 f94f 	bl	8001b44 <LCD_voidSendString>

	LCD_voidSetPositionXY(2,3);
 80018a6:	2103      	movs	r1, #3
 80018a8:	2002      	movs	r0, #2
 80018aa:	f000 f967 	bl	8001b7c <LCD_voidSetPositionXY>
	LCD_voidSendString("ASAP!!!");
 80018ae:	4803      	ldr	r0, [pc, #12]	; (80018bc <LCD_AvoidHardBraking+0x2c>)
 80018b0:	f000 f948 	bl	8001b44 <LCD_voidSendString>

}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	080113bc 	.word	0x080113bc
 80018bc:	080113c8 	.word	0x080113c8

080018c0 <LCD_Print_WarningSign>:
	LCD_voidSendString("Slow Down");


}
static void LCD_Print_WarningSign(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b096      	sub	sp, #88	; 0x58
 80018c4:	af00      	add	r7, sp, #0
	/*Saving the elemetents of each block of the LCD in multiple arrays to be sent to the special charachter function*/

	uint8_t LCD_R1_C16_Array[8] =
 80018c6:	4a4e      	ldr	r2, [pc, #312]	; (8001a00 <LCD_Print_WarningSign+0x140>)
 80018c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018d0:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00001110,
			0b00001110,
			0b00001110
	};
	uint8_t LCD_R1_C15_Array[8] =
 80018d4:	4a4b      	ldr	r2, [pc, #300]	; (8001a04 <LCD_Print_WarningSign+0x144>)
 80018d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018de:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00010000,
			0b00000000
	};

	uint8_t LCD_R1_C14_Array[8] =
 80018e2:	4a49      	ldr	r2, [pc, #292]	; (8001a08 <LCD_Print_WarningSign+0x148>)
 80018e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ec:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00000001
	};
	uint8_t LCD_R1_C18_Array[8] =
 80018f0:	4a46      	ldr	r2, [pc, #280]	; (8001a0c <LCD_Print_WarningSign+0x14c>)
 80018f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018fa:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00010000
	};
	uint8_t LCD_R2_C14_Array[8] =
 80018fe:	4a44      	ldr	r2, [pc, #272]	; (8001a10 <LCD_Print_WarningSign+0x150>)
 8001900:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001908:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	uint8_t LCD_R2_C18_Array[8] =
 800190c:	4a41      	ldr	r2, [pc, #260]	; (8001a14 <LCD_Print_WarningSign+0x154>)
 800190e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001912:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001916:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C13_Array[8] =
 800191a:	4a3f      	ldr	r2, [pc, #252]	; (8001a18 <LCD_Print_WarningSign+0x158>)
 800191c:	f107 0320 	add.w	r3, r7, #32
 8001920:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001924:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000010,
			0b00000100,
			0b00001000,
			0b00011111
	};
	uint8_t LCD_R2_C19_Array[8] =
 8001928:	4a3c      	ldr	r2, [pc, #240]	; (8001a1c <LCD_Print_WarningSign+0x15c>)
 800192a:	f107 0318 	add.w	r3, r7, #24
 800192e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001932:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00001000,
			0b00000100,
			0b00000010,
			0b00011111
	};
	uint8_t LCD_R2_C15_Array[8] =
 8001936:	4a3a      	ldr	r2, [pc, #232]	; (8001a20 <LCD_Print_WarningSign+0x160>)
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001940:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C17_Array[8] =
 8001944:	4a36      	ldr	r2, [pc, #216]	; (8001a20 <LCD_Print_WarningSign+0x160>)
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800194e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00000000,
			0b00011111
	};
	uint8_t LCD_R2_C16_Array[8] =
 8001952:	4a34      	ldr	r2, [pc, #208]	; (8001a24 <LCD_Print_WarningSign+0x164>)
 8001954:	463b      	mov	r3, r7
 8001956:	e892 0003 	ldmia.w	r2, {r0, r1}
 800195a:	e883 0003 	stmia.w	r3, {r0, r1}
			0b00000000,
			0b00000000,
			0b00011111
	};

	LCD_voidDrawSpecialCharachter(&LCD_R1_C14_Array, 0, 1, 14);
 800195e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001962:	230e      	movs	r3, #14
 8001964:	2201      	movs	r2, #1
 8001966:	2100      	movs	r1, #0
 8001968:	f000 f955 	bl	8001c16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C15_Array, 0, 1, 15);
 800196c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001970:	230f      	movs	r3, #15
 8001972:	2201      	movs	r2, #1
 8001974:	2100      	movs	r1, #0
 8001976:	f000 f94e 	bl	8001c16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C16_Array, 0, 1, 16);
 800197a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800197e:	2310      	movs	r3, #16
 8001980:	2201      	movs	r2, #1
 8001982:	2100      	movs	r1, #0
 8001984:	f000 f947 	bl	8001c16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R1_C18_Array, 0, 1, 18);
 8001988:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800198c:	2312      	movs	r3, #18
 800198e:	2201      	movs	r2, #1
 8001990:	2100      	movs	r1, #0
 8001992:	f000 f940 	bl	8001c16 <LCD_voidDrawSpecialCharachter>

	LCD_voidDrawSpecialCharachter(&LCD_R2_C13_Array, 0, 2, 13);
 8001996:	f107 0020 	add.w	r0, r7, #32
 800199a:	230d      	movs	r3, #13
 800199c:	2202      	movs	r2, #2
 800199e:	2100      	movs	r1, #0
 80019a0:	f000 f939 	bl	8001c16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C14_Array, 0, 2, 14);
 80019a4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80019a8:	230e      	movs	r3, #14
 80019aa:	2202      	movs	r2, #2
 80019ac:	2100      	movs	r1, #0
 80019ae:	f000 f932 	bl	8001c16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C15_Array, 0, 2, 15);
 80019b2:	f107 0010 	add.w	r0, r7, #16
 80019b6:	230f      	movs	r3, #15
 80019b8:	2202      	movs	r2, #2
 80019ba:	2100      	movs	r1, #0
 80019bc:	f000 f92b 	bl	8001c16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C16_Array, 0, 2, 16);
 80019c0:	4638      	mov	r0, r7
 80019c2:	2310      	movs	r3, #16
 80019c4:	2202      	movs	r2, #2
 80019c6:	2100      	movs	r1, #0
 80019c8:	f000 f925 	bl	8001c16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C17_Array, 0, 2, 17);
 80019cc:	f107 0008 	add.w	r0, r7, #8
 80019d0:	2311      	movs	r3, #17
 80019d2:	2202      	movs	r2, #2
 80019d4:	2100      	movs	r1, #0
 80019d6:	f000 f91e 	bl	8001c16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C18_Array, 0, 2, 18);
 80019da:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80019de:	2312      	movs	r3, #18
 80019e0:	2202      	movs	r2, #2
 80019e2:	2100      	movs	r1, #0
 80019e4:	f000 f917 	bl	8001c16 <LCD_voidDrawSpecialCharachter>
	LCD_voidDrawSpecialCharachter(&LCD_R2_C19_Array, 0, 2, 19);
 80019e8:	f107 0018 	add.w	r0, r7, #24
 80019ec:	2313      	movs	r3, #19
 80019ee:	2202      	movs	r2, #2
 80019f0:	2100      	movs	r1, #0
 80019f2:	f000 f910 	bl	8001c16 <LCD_voidDrawSpecialCharachter>



}
 80019f6:	bf00      	nop
 80019f8:	3758      	adds	r7, #88	; 0x58
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	080113f0 	.word	0x080113f0
 8001a04:	080113f8 	.word	0x080113f8
 8001a08:	08011400 	.word	0x08011400
 8001a0c:	08011408 	.word	0x08011408
 8001a10:	08011410 	.word	0x08011410
 8001a14:	08011418 	.word	0x08011418
 8001a18:	08011420 	.word	0x08011420
 8001a1c:	08011428 	.word	0x08011428
 8001a20:	08011430 	.word	0x08011430
 8001a24:	08011438 	.word	0x08011438

08001a28 <LCD_voidInit>:
#define LCD_SLAVE_ADDRESS 0b01001110

extern I2C_HandleTypeDef hi2c1;

void LCD_voidInit(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	/*Setting 4 bits interface(Twice as the datasheet specefies)*/
	LCD_voidSendCommand(0b00110011);
 8001a2c:	2033      	movs	r0, #51	; 0x33
 8001a2e:	f000 f829 	bl	8001a84 <LCD_voidSendCommand>
	LCD_voidSendCommand(0b00110010);
 8001a32:	2032      	movs	r0, #50	; 0x32
 8001a34:	f000 f826 	bl	8001a84 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001a38:	2032      	movs	r0, #50	; 0x32
 8001a3a:	f002 fc31 	bl	80042a0 <HAL_Delay>
	/*Setting the LCD Function*/
	LCD_voidSendCommand(0b00101000);
 8001a3e:	2028      	movs	r0, #40	; 0x28
 8001a40:	f000 f820 	bl	8001a84 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001a44:	2032      	movs	r0, #50	; 0x32
 8001a46:	f002 fc2b 	bl	80042a0 <HAL_Delay>
	/*Clearing the display*/
	LCD_voidSendCommand(0b00000001);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f000 f81a 	bl	8001a84 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001a50:	2032      	movs	r0, #50	; 0x32
 8001a52:	f002 fc25 	bl	80042a0 <HAL_Delay>
	/*Set the entry mode*/
	LCD_voidSendCommand(0b00000110);
 8001a56:	2006      	movs	r0, #6
 8001a58:	f000 f814 	bl	8001a84 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001a5c:	2032      	movs	r0, #50	; 0x32
 8001a5e:	f002 fc1f 	bl	80042a0 <HAL_Delay>
	/*Set the display to on*/
	LCD_voidSendCommand(0b00001100);
 8001a62:	200c      	movs	r0, #12
 8001a64:	f000 f80e 	bl	8001a84 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001a68:	2032      	movs	r0, #50	; 0x32
 8001a6a:	f002 fc19 	bl	80042a0 <HAL_Delay>
	/*Set the cursor to home */
	LCD_voidSendCommand(0b00000010);
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f000 f808 	bl	8001a84 <LCD_voidSendCommand>
	HAL_Delay(50);
 8001a74:	2032      	movs	r0, #50	; 0x32
 8001a76:	f002 fc13 	bl	80042a0 <HAL_Delay>
	/*and the Data address to 0*/
	LCD_voidSendCommand(0b10000000);
 8001a7a:	2080      	movs	r0, #128	; 0x80
 8001a7c:	f000 f802 	bl	8001a84 <LCD_voidSendCommand>

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8_t Copy_uint8Command)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
 *
 *
 * 0b00000001 --> DataU --> 0b000000000-->0b00000001100
 *
 * */
	Local_uint8Local_uint8DataU=(Copy_uint8Command&0b11110000);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	f023 030f 	bic.w	r3, r3, #15
 8001a94:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Command<<4)&0b11110000);
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001100; //EN=1 RS=0
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	f043 030c 	orr.w	r3, r3, #12
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001000; //EN=0 RS=0
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	f043 0308 	orr.w	r3, r3, #8
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001100; //EN=1 RS=0
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	f043 030c 	orr.w	r3, r3, #12
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001000; //EN=0 RS=0
 8001aba:	7bbb      	ldrb	r3, [r7, #14]
 8001abc:	f043 0308 	orr.w	r3, r3, #8
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001ac4:	f107 0208 	add.w	r2, r7, #8
 8001ac8:	2364      	movs	r3, #100	; 0x64
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2304      	movs	r3, #4
 8001ace:	214e      	movs	r1, #78	; 0x4e
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <LCD_voidSendCommand+0x5c>)
 8001ad2:	f003 f86f 	bl	8004bb4 <HAL_I2C_Master_Transmit>
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000740 	.word	0x20000740

08001ae4 <LCD_voidSendCharachter>:

void LCD_voidSendCharachter(uint8_t Copy_uint8Charachter)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_uint8Local_uint8DataU,Local_uint8Local_uint8DataL;
	uint8_t Local_uint8Local_uint8DataT[4];
	Local_uint8Local_uint8DataU=(Copy_uint8Charachter&0b11110000);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f023 030f 	bic.w	r3, r3, #15
 8001af4:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Charachter<<4)&0b11110000);
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001101; //EN=1 RS=0
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	f043 030d 	orr.w	r3, r3, #13
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001001; //EN=0 RS=0
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	f043 0309 	orr.w	r3, r3, #9
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001101; //EN=1 RS=0
 8001b10:	7bbb      	ldrb	r3, [r7, #14]
 8001b12:	f043 030d 	orr.w	r3, r3, #13
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001001; //EN=0 RS=0
 8001b1a:	7bbb      	ldrb	r3, [r7, #14]
 8001b1c:	f043 0309 	orr.w	r3, r3, #9
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8001b24:	f107 0208 	add.w	r2, r7, #8
 8001b28:	2364      	movs	r3, #100	; 0x64
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	214e      	movs	r1, #78	; 0x4e
 8001b30:	4803      	ldr	r0, [pc, #12]	; (8001b40 <LCD_voidSendCharachter+0x5c>)
 8001b32:	f003 f83f 	bl	8004bb4 <HAL_I2C_Master_Transmit>

}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000740 	.word	0x20000740

08001b44 <LCD_voidSendString>:

void LCD_voidSendString (uint8_t *Copy_pu8StringOfCharachters)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8Counter=0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 8001b50:	e009      	b.n	8001b66 <LCD_voidSendString+0x22>
	{
		LCD_voidSendCharachter(Copy_pu8StringOfCharachters[Local_uint8Counter]);
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ffc2 	bl	8001ae4 <LCD_voidSendCharachter>
		Local_uint8Counter++;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	3301      	adds	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
	while(Copy_pu8StringOfCharachters[Local_uint8Counter] !='\0')
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ef      	bne.n	8001b52 <LCD_voidSendString+0xe>
	}


}
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <LCD_voidSetPositionXY>:
void LCD_voidSetPositionXY(uint8_t Copy_uint8Row,uint8_t Copy_uint8Column)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	460a      	mov	r2, r1
 8001b86:	71fb      	strb	r3, [r7, #7]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	71bb      	strb	r3, [r7, #6]
	//1,add,add,add,add,add,add,add,0,0
	uint8_t Local_uint8PositionAddress = 0b10000000;
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	73fb      	strb	r3, [r7, #15]
	switch(Copy_uint8Row){
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d82d      	bhi.n	8001bf2 <LCD_voidSetPositionXY+0x76>
 8001b96:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <LCD_voidSetPositionXY+0x20>)
 8001b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9c:	08001bad 	.word	0x08001bad
 8001ba0:	08001bb7 	.word	0x08001bb7
 8001ba4:	08001bcb 	.word	0x08001bcb
 8001ba8:	08001bdf 	.word	0x08001bdf
	case 0:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 0);
 8001bac:	7bfa      	ldrb	r2, [r7, #15]
 8001bae:	79bb      	ldrb	r3, [r7, #6]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	73fb      	strb	r3, [r7, #15]
		break;
 8001bb4:	e01d      	b.n	8001bf2 <LCD_voidSetPositionXY+0x76>
	case 1:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 64);
 8001bb6:	79bb      	ldrb	r3, [r7, #6]
 8001bb8:	3340      	adds	r3, #64	; 0x40
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	b25a      	sxtb	r2, r3
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	73fb      	strb	r3, [r7, #15]
		break;
 8001bc8:	e013      	b.n	8001bf2 <LCD_voidSetPositionXY+0x76>
	case 2:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 20);
 8001bca:	79bb      	ldrb	r3, [r7, #6]
 8001bcc:	3314      	adds	r3, #20
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	b25a      	sxtb	r2, r3
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b25b      	sxtb	r3, r3
 8001bda:	73fb      	strb	r3, [r7, #15]
		break;
 8001bdc:	e009      	b.n	8001bf2 <LCD_voidSetPositionXY+0x76>
	case 3:
		Local_uint8PositionAddress = Local_uint8PositionAddress | (Copy_uint8Column + 84);
 8001bde:	79bb      	ldrb	r3, [r7, #6]
 8001be0:	3354      	adds	r3, #84	; 0x54
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	b25a      	sxtb	r2, r3
 8001be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	73fb      	strb	r3, [r7, #15]
		break;
 8001bf0:	bf00      	nop
	}
		LCD_voidSendCommand(Local_uint8PositionAddress);
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff45 	bl	8001a84 <LCD_voidSendCommand>
		HAL_Delay(1);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f002 fb50 	bl	80042a0 <HAL_Delay>

}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	/*Clearing the display by command 0b00000001*/
	LCD_voidSendCommand(0b00000001);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f7ff ff39 	bl	8001a84 <LCD_voidSendCommand>
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <LCD_voidDrawSpecialCharachter>:
		}
	}
}

void LCD_voidDrawSpecialCharachter(uint8_t*Copy_puint8Pattern,uint8_t Copy_uint8LocationNum,uint8_t Copy_uint8RowNum,uint8_t Copy_uint8ColNum)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	4608      	mov	r0, r1
 8001c20:	4611      	mov	r1, r2
 8001c22:	461a      	mov	r2, r3
 8001c24:	4603      	mov	r3, r0
 8001c26:	70fb      	strb	r3, [r7, #3]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70bb      	strb	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
	/*Accessing the CGRAM address*/
	uint8_t Local_uint8CGRAMAddress,Local_uint8Counter;
	Local_uint8CGRAMAddress=Copy_uint8LocationNum*8;
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	73bb      	strb	r3, [r7, #14]
	/*Accessing CGRAM of lcd by command 0b01xxxxxx*/
	LCD_voidSendCommand(Local_uint8CGRAMAddress+64);
 8001c36:	7bbb      	ldrb	r3, [r7, #14]
 8001c38:	3340      	adds	r3, #64	; 0x40
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff21 	bl	8001a84 <LCD_voidSendCommand>
	/*Write the pattern on CGRAM*/
	/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes
	 * in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	e009      	b.n	8001c5c <LCD_voidDrawSpecialCharachter+0x46>
	{
		LCD_voidSendCharachter(Copy_puint8Pattern[Local_uint8Counter]);
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff47 	bl	8001ae4 <LCD_voidSendCharachter>
	for(Local_uint8Counter=0;Local_uint8Counter<8;Local_uint8Counter++)
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	2b07      	cmp	r3, #7
 8001c60:	d9f2      	bls.n	8001c48 <LCD_voidDrawSpecialCharachter+0x32>
	}
	/*Keda e7na 7atena al pattern fe location mo3yn fel CGRAM, fa na2esna bas neb3at al pattern lel DDRAM 34an n7oto fel LCD */
	/*kona fo2 3malna command 34an ne access al CGRAM 34an ne access al DDRAM lazem command tany
	 * wel set position feha asln al command dah*/
	LCD_voidSetPositionXY(Copy_uint8RowNum,Copy_uint8ColNum);
 8001c62:	787a      	ldrb	r2, [r7, #1]
 8001c64:	78bb      	ldrb	r3, [r7, #2]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff87 	bl	8001b7c <LCD_voidSetPositionXY>
	LCD_voidSendCharachter(Copy_uint8LocationNum);
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff37 	bl	8001ae4 <LCD_voidSendCharachter>
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <LightSensor_voidInit>:
static void TSL2561_GetChannelsReadings(uint16_t* Copy_uint16Data0Val, uint16_t* Copy_uint16Data1Val);
static void TSL2561_WriteByte(uint8_t Copy_uint8RegisterAddress, uint8_t Copy_uint8RegisterValue);
static void TSL2561_ReadByte(uint8_t Copy_uint8RegisterAddress, uint8_t *Copy_puinit8RecivingVariable);

void LightSensor_voidInit(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0

	/*Powering up the module*/

	/*1-first element is the command -> Address of control register
	 * 2-Second element is the 0b00000011 which power up the module */
	TSL2561_WriteByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_CONTROL),0b00000011);
 8001c82:	2103      	movs	r1, #3
 8001c84:	2080      	movs	r0, #128	; 0x80
 8001c86:	f000 f97d 	bl	8001f84 <TSL2561_WriteByte>

	/*1- first element is the command -> Address of timing register
	 *2- Second element is the 0b00010010 which makes the gain = 1 and the integration time
	 *2- =402ms which is the default value*/

	TSL2561_WriteByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_TIMING),0b00000010);
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	2081      	movs	r0, #129	; 0x81
 8001c8e:	f000 f979 	bl	8001f84 <TSL2561_WriteByte>


}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <LightSensor_uint8ReadIntensity>:

void LightSensor_uint8ReadIntensity(uint16_t *Copy_puint16LuxValue)
{
 8001c98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
	//Variables for storing Data registers
	uint16_t Local_uint16Channel0Val, Local_uint16Channel1Val,flux_integar=0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	827b      	strh	r3, [r7, #18]
	float flux=0;
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

	//Get the values from the data registers
	TSL2561_GetChannelsReadings(&Local_uint16Channel0Val, &Local_uint16Channel1Val);
 8001cac:	f107 0208 	add.w	r2, r7, #8
 8001cb0:	f107 030a 	add.w	r3, r7, #10
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f92e 	bl	8001f18 <TSL2561_GetChannelsReadings>
	/*Calculating the lux for T, FN, and CL Package of the sensor*/

	//Calculate the ratio of the PhotoDiodes
	float Ratio = ((float)Local_uint16Channel1Val) / ((float)Local_uint16Channel0Val);
 8001cbc:	893b      	ldrh	r3, [r7, #8]
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cc6:	897b      	ldrh	r3, [r7, #10]
 8001cc8:	ee07 3a90 	vmov	s15, r3
 8001ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cd4:	edc7 7a03 	vstr	s15, [r7, #12]

	//Calculating Lux
	//Ratio between 0 and 0.50

	if(Ratio <= 0.50)
 8001cd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cdc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce8:	d839      	bhi.n	8001d5e <LightSensor_uint8ReadIntensity+0xc6>
	{
		flux= (0.0304 * Local_uint16Channel0Val) - (0.062* Local_uint16Channel0Val * pow(Ratio, 1.4));
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc89 	bl	8000604 <__aeabi_i2d>
 8001cf2:	a373      	add	r3, pc, #460	; (adr r3, 8001ec0 <LightSensor_uint8ReadIntensity+0x228>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fcee 	bl	80006d8 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4614      	mov	r4, r2
 8001d02:	461d      	mov	r5, r3
 8001d04:	897b      	ldrh	r3, [r7, #10]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fc7c 	bl	8000604 <__aeabi_i2d>
 8001d0c:	a36e      	add	r3, pc, #440	; (adr r3, 8001ec8 <LightSensor_uint8ReadIntensity+0x230>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fce1 	bl	80006d8 <__aeabi_dmul>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4690      	mov	r8, r2
 8001d1c:	4699      	mov	r9, r3
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f7fe fc82 	bl	8000628 <__aeabi_f2d>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8001eb8 <LightSensor_uint8ReadIntensity+0x220>
 8001d2c:	ec43 2b10 	vmov	d0, r2, r3
 8001d30:	f00e fb66 	bl	8010400 <pow>
 8001d34:	ec53 2b10 	vmov	r2, r3, d0
 8001d38:	4640      	mov	r0, r8
 8001d3a:	4649      	mov	r1, r9
 8001d3c:	f7fe fccc 	bl	80006d8 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4620      	mov	r0, r4
 8001d46:	4629      	mov	r1, r5
 8001d48:	f7fe fb0e 	bl	8000368 <__aeabi_dsub>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	f7fe ffb8 	bl	8000cc8 <__aeabi_d2f>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e092      	b.n	8001e84 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the ratio is between 0.51 and 0.61
	else if(Ratio <= 0.61)
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f7fe fc62 	bl	8000628 <__aeabi_f2d>
 8001d64:	a35a      	add	r3, pc, #360	; (adr r3, 8001ed0 <LightSensor_uint8ReadIntensity+0x238>)
 8001d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6a:	f7fe ff31 	bl	8000bd0 <__aeabi_dcmple>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d024      	beq.n	8001dbe <LightSensor_uint8ReadIntensity+0x126>
	{
		flux = (0.0224 * Local_uint16Channel0Val) - (0.031 * Local_uint16Channel1Val);
 8001d74:	897b      	ldrh	r3, [r7, #10]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fc44 	bl	8000604 <__aeabi_i2d>
 8001d7c:	a356      	add	r3, pc, #344	; (adr r3, 8001ed8 <LightSensor_uint8ReadIntensity+0x240>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	f7fe fca9 	bl	80006d8 <__aeabi_dmul>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4614      	mov	r4, r2
 8001d8c:	461d      	mov	r5, r3
 8001d8e:	893b      	ldrh	r3, [r7, #8]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fc37 	bl	8000604 <__aeabi_i2d>
 8001d96:	a352      	add	r3, pc, #328	; (adr r3, 8001ee0 <LightSensor_uint8ReadIntensity+0x248>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fc9c 	bl	80006d8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fade 	bl	8000368 <__aeabi_dsub>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7fe ff88 	bl	8000cc8 <__aeabi_d2f>
 8001db8:	4603      	mov	r3, r0
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	e062      	b.n	8001e84 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the Ratio is between 0.62 and 0.81
	else if(Ratio <= 0.80)
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f7fe fc32 	bl	8000628 <__aeabi_f2d>
 8001dc4:	a348      	add	r3, pc, #288	; (adr r3, 8001ee8 <LightSensor_uint8ReadIntensity+0x250>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	f7fe ff01 	bl	8000bd0 <__aeabi_dcmple>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d024      	beq.n	8001e1e <LightSensor_uint8ReadIntensity+0x186>
	{
		flux = (0.0128 * Local_uint16Channel0Val) - (0.0153 * Local_uint16Channel1Val);
 8001dd4:	897b      	ldrh	r3, [r7, #10]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fc14 	bl	8000604 <__aeabi_i2d>
 8001ddc:	a344      	add	r3, pc, #272	; (adr r3, 8001ef0 <LightSensor_uint8ReadIntensity+0x258>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	f7fe fc79 	bl	80006d8 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4614      	mov	r4, r2
 8001dec:	461d      	mov	r5, r3
 8001dee:	893b      	ldrh	r3, [r7, #8]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fc07 	bl	8000604 <__aeabi_i2d>
 8001df6:	a340      	add	r3, pc, #256	; (adr r3, 8001ef8 <LightSensor_uint8ReadIntensity+0x260>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fc6c 	bl	80006d8 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4620      	mov	r0, r4
 8001e06:	4629      	mov	r1, r5
 8001e08:	f7fe faae 	bl	8000368 <__aeabi_dsub>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe ff58 	bl	8000cc8 <__aeabi_d2f>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e032      	b.n	8001e84 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the Ratio is between 0.82 and 1.39
	else if(Ratio <= 1.30)
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7fe fc02 	bl	8000628 <__aeabi_f2d>
 8001e24:	a336      	add	r3, pc, #216	; (adr r3, 8001f00 <LightSensor_uint8ReadIntensity+0x268>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fed1 	bl	8000bd0 <__aeabi_dcmple>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d024      	beq.n	8001e7e <LightSensor_uint8ReadIntensity+0x1e6>
	{
		flux = (0.00146 * Local_uint16Channel0Val) - (0.00112 * Local_uint16Channel1Val);
 8001e34:	897b      	ldrh	r3, [r7, #10]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fbe4 	bl	8000604 <__aeabi_i2d>
 8001e3c:	a332      	add	r3, pc, #200	; (adr r3, 8001f08 <LightSensor_uint8ReadIntensity+0x270>)
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	f7fe fc49 	bl	80006d8 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4614      	mov	r4, r2
 8001e4c:	461d      	mov	r5, r3
 8001e4e:	893b      	ldrh	r3, [r7, #8]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fbd7 	bl	8000604 <__aeabi_i2d>
 8001e56:	a32e      	add	r3, pc, #184	; (adr r3, 8001f10 <LightSensor_uint8ReadIntensity+0x278>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f7fe fc3c 	bl	80006d8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4620      	mov	r0, r4
 8001e66:	4629      	mov	r1, r5
 8001e68:	f7fe fa7e 	bl	8000368 <__aeabi_dsub>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f7fe ff28 	bl	8000cc8 <__aeabi_d2f>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	e002      	b.n	8001e84 <LightSensor_uint8ReadIntensity+0x1ec>
	}

	//If the Ratio is bigger than 1.30
	else
	{
		flux = 0;
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
	}

	flux_integar=round(flux);
 8001e84:	6978      	ldr	r0, [r7, #20]
 8001e86:	f7fe fbcf 	bl	8000628 <__aeabi_f2d>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	ec43 2b10 	vmov	d0, r2, r3
 8001e92:	f00e fc0b 	bl	80106ac <round>
 8001e96:	ec53 2b10 	vmov	r2, r3, d0
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f7fe fef3 	bl	8000c88 <__aeabi_d2uiz>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	827b      	strh	r3, [r7, #18]

	/*Update the user variable*/
	*Copy_puint16LuxValue=flux_integar;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	8a7a      	ldrh	r2, [r7, #18]
 8001eaa:	801a      	strh	r2, [r3, #0]
	{
      TSL2561_Reset();
	}
	 */

}
 8001eac:	bf00      	nop
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001eb6:	bf00      	nop
 8001eb8:	66666666 	.word	0x66666666
 8001ebc:	3ff66666 	.word	0x3ff66666
 8001ec0:	77318fc5 	.word	0x77318fc5
 8001ec4:	3f9f212d 	.word	0x3f9f212d
 8001ec8:	c8b43958 	.word	0xc8b43958
 8001ecc:	3fafbe76 	.word	0x3fafbe76
 8001ed0:	b851eb85 	.word	0xb851eb85
 8001ed4:	3fe3851e 	.word	0x3fe3851e
 8001ed8:	8db8bac7 	.word	0x8db8bac7
 8001edc:	3f96f006 	.word	0x3f96f006
 8001ee0:	c8b43958 	.word	0xc8b43958
 8001ee4:	3f9fbe76 	.word	0x3f9fbe76
 8001ee8:	9999999a 	.word	0x9999999a
 8001eec:	3fe99999 	.word	0x3fe99999
 8001ef0:	eb1c432d 	.word	0xeb1c432d
 8001ef4:	3f8a36e2 	.word	0x3f8a36e2
 8001ef8:	3d07c84b 	.word	0x3d07c84b
 8001efc:	3f8f559b 	.word	0x3f8f559b
 8001f00:	cccccccd 	.word	0xcccccccd
 8001f04:	3ff4cccc 	.word	0x3ff4cccc
 8001f08:	102363b2 	.word	0x102363b2
 8001f0c:	3f57ebaf 	.word	0x3f57ebaf
 8001f10:	d7c6fbd2 	.word	0xd7c6fbd2
 8001f14:	3f52599e 	.word	0x3f52599e

08001f18 <TSL2561_GetChannelsReadings>:
	TSL2561_WriteByte((TSL2561_COMMAND_NORMAL | TSL2561_REG_INTERRUPT), 0b00000000);

}

static void TSL2561_GetChannelsReadings(uint16_t* Copy_uint16Data0Val, uint16_t* Copy_uint16Data1Val)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
	//Variables for storing received data
	uint8_t data0Low, data0High, data1Low, data1High;

	//Read Data0 registers
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA0LOW),	&data0Low);
 8001f22:	f107 030f 	add.w	r3, r7, #15
 8001f26:	4619      	mov	r1, r3
 8001f28:	208c      	movs	r0, #140	; 0x8c
 8001f2a:	f000 f847 	bl	8001fbc <TSL2561_ReadByte>
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA0HIGH), &data0High);
 8001f2e:	f107 030e 	add.w	r3, r7, #14
 8001f32:	4619      	mov	r1, r3
 8001f34:	208d      	movs	r0, #141	; 0x8d
 8001f36:	f000 f841 	bl	8001fbc <TSL2561_ReadByte>

	//Read Data1 registers
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA1LOW),	&data1Low);
 8001f3a:	f107 030d 	add.w	r3, r7, #13
 8001f3e:	4619      	mov	r1, r3
 8001f40:	208e      	movs	r0, #142	; 0x8e
 8001f42:	f000 f83b 	bl	8001fbc <TSL2561_ReadByte>
	TSL2561_ReadByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_DATA1HIGH), &data1High);
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	208f      	movs	r0, #143	; 0x8f
 8001f4e:	f000 f835 	bl	8001fbc <TSL2561_ReadByte>

	//Combine Data register values into single 16 bit variable
	*Copy_uint16Data0Val = data0High * 256 + data0Low;
 8001f52:	7bbb      	ldrb	r3, [r7, #14]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	801a      	strh	r2, [r3, #0]
	*Copy_uint16Data1Val = data1High * 256 + data1Low;
 8001f66:	7b3b      	ldrb	r3, [r7, #12]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	7b7b      	ldrb	r3, [r7, #13]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	801a      	strh	r2, [r3, #0]

}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <TSL2561_WriteByte>:
	LightSensor_voidInit();

}

static void TSL2561_WriteByte(uint8_t Copy_uint8RegisterAddress, uint8_t Copy_uint8RegisterValue)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af04      	add	r7, sp, #16
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	4613      	mov	r3, r2
 8001f92:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(LightSensor_I2CChannel, LightSensor_SLAVE_ADDRESS,Copy_uint8RegisterAddress, 1, &Copy_uint8RegisterValue,1,TSL2561_Max_Delay);
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9c:	9302      	str	r3, [sp, #8]
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	9301      	str	r3, [sp, #4]
 8001fa2:	1dbb      	adds	r3, r7, #6
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	2172      	movs	r1, #114	; 0x72
 8001faa:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <TSL2561_WriteByte+0x34>)
 8001fac:	f002 ff00 	bl	8004db0 <HAL_I2C_Mem_Write>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000794 	.word	0x20000794

08001fbc <TSL2561_ReadByte>:

static void TSL2561_ReadByte(uint8_t Copy_uint8RegisterAddress, uint8_t *Copy_puinit8RecivingVariable)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af04      	add	r7, sp, #16
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(LightSensor_I2CChannel, LightSensor_SLAVE_ADDRESS,Copy_uint8RegisterAddress, 1, Copy_puinit8RecivingVariable, 1,TSL2561_Max_Delay);
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd0:	9302      	str	r3, [sp, #8]
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2301      	movs	r3, #1
 8001fdc:	2172      	movs	r1, #114	; 0x72
 8001fde:	4803      	ldr	r0, [pc, #12]	; (8001fec <TSL2561_ReadByte+0x30>)
 8001fe0:	f002 ffe0 	bl	8004fa4 <HAL_I2C_Mem_Read>
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000794 	.word	0x20000794

08001ff0 <decodeGGA>:
 GGAbuffer is the buffer which stores the GGA Data
 GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
 Returns 0 on success
 */

int decodeGGA(char *GGAbuffer, GGASTRUCT *gga) {
 8001ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ff4:	b08e      	sub	sp, #56	; 0x38
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001ffc:	4b5b      	ldr	r3, [pc, #364]	; (800216c <decodeGGA+0x17c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')
 8002006:	e004      	b.n	8002012 <decodeGGA+0x22>
		inx++;  // 1st ','
 8002008:	4b58      	ldr	r3, [pc, #352]	; (800216c <decodeGGA+0x17c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	3301      	adds	r3, #1
 800200e:	4a57      	ldr	r2, [pc, #348]	; (800216c <decodeGGA+0x17c>)
 8002010:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002012:	4b56      	ldr	r3, [pc, #344]	; (800216c <decodeGGA+0x17c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4413      	add	r3, r2
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b2c      	cmp	r3, #44	; 0x2c
 8002020:	d1f2      	bne.n	8002008 <decodeGGA+0x18>
	inx++;
 8002022:	4b52      	ldr	r3, [pc, #328]	; (800216c <decodeGGA+0x17c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	3301      	adds	r3, #1
 8002028:	4a50      	ldr	r2, [pc, #320]	; (800216c <decodeGGA+0x17c>)
 800202a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800202c:	e004      	b.n	8002038 <decodeGGA+0x48>
		inx++;  // After time ','
 800202e:	4b4f      	ldr	r3, [pc, #316]	; (800216c <decodeGGA+0x17c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	4a4d      	ldr	r2, [pc, #308]	; (800216c <decodeGGA+0x17c>)
 8002036:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002038:	4b4c      	ldr	r3, [pc, #304]	; (800216c <decodeGGA+0x17c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b2c      	cmp	r3, #44	; 0x2c
 8002046:	d1f2      	bne.n	800202e <decodeGGA+0x3e>
	inx++;
 8002048:	4b48      	ldr	r3, [pc, #288]	; (800216c <decodeGGA+0x17c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	3301      	adds	r3, #1
 800204e:	4a47      	ldr	r2, [pc, #284]	; (800216c <decodeGGA+0x17c>)
 8002050:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002052:	e004      	b.n	800205e <decodeGGA+0x6e>
		inx++;  // after latitude ','
 8002054:	4b45      	ldr	r3, [pc, #276]	; (800216c <decodeGGA+0x17c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	4a44      	ldr	r2, [pc, #272]	; (800216c <decodeGGA+0x17c>)
 800205c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800205e:	4b43      	ldr	r3, [pc, #268]	; (800216c <decodeGGA+0x17c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b2c      	cmp	r3, #44	; 0x2c
 800206c:	d1f2      	bne.n	8002054 <decodeGGA+0x64>
	inx++;
 800206e:	4b3f      	ldr	r3, [pc, #252]	; (800216c <decodeGGA+0x17c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	4a3d      	ldr	r2, [pc, #244]	; (800216c <decodeGGA+0x17c>)
 8002076:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002078:	e004      	b.n	8002084 <decodeGGA+0x94>
		inx++;  // after NS ','
 800207a:	4b3c      	ldr	r3, [pc, #240]	; (800216c <decodeGGA+0x17c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a3a      	ldr	r2, [pc, #232]	; (800216c <decodeGGA+0x17c>)
 8002082:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <decodeGGA+0x17c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b2c      	cmp	r3, #44	; 0x2c
 8002092:	d1f2      	bne.n	800207a <decodeGGA+0x8a>
	inx++;
 8002094:	4b35      	ldr	r3, [pc, #212]	; (800216c <decodeGGA+0x17c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a34      	ldr	r2, [pc, #208]	; (800216c <decodeGGA+0x17c>)
 800209c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800209e:	e004      	b.n	80020aa <decodeGGA+0xba>
		inx++;  // after longitude ','
 80020a0:	4b32      	ldr	r3, [pc, #200]	; (800216c <decodeGGA+0x17c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a31      	ldr	r2, [pc, #196]	; (800216c <decodeGGA+0x17c>)
 80020a8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80020aa:	4b30      	ldr	r3, [pc, #192]	; (800216c <decodeGGA+0x17c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b2c      	cmp	r3, #44	; 0x2c
 80020b8:	d1f2      	bne.n	80020a0 <decodeGGA+0xb0>
	inx++;
 80020ba:	4b2c      	ldr	r3, [pc, #176]	; (800216c <decodeGGA+0x17c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3301      	adds	r3, #1
 80020c0:	4a2a      	ldr	r2, [pc, #168]	; (800216c <decodeGGA+0x17c>)
 80020c2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80020c4:	e004      	b.n	80020d0 <decodeGGA+0xe0>
		inx++;  // after EW ','
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <decodeGGA+0x17c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	4a27      	ldr	r2, [pc, #156]	; (800216c <decodeGGA+0x17c>)
 80020ce:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80020d0:	4b26      	ldr	r3, [pc, #152]	; (800216c <decodeGGA+0x17c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b2c      	cmp	r3, #44	; 0x2c
 80020de:	d1f2      	bne.n	80020c6 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 80020e0:	4b22      	ldr	r3, [pc, #136]	; (800216c <decodeGGA+0x17c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a21      	ldr	r2, [pc, #132]	; (800216c <decodeGGA+0x17c>)
 80020e8:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2')
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <decodeGGA+0x17c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b31      	cmp	r3, #49	; 0x31
 80020f8:	d00f      	beq.n	800211a <decodeGGA+0x12a>
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <decodeGGA+0x17c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b32      	cmp	r3, #50	; 0x32
 8002108:	d007      	beq.n	800211a <decodeGGA+0x12a>
			|| (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <decodeGGA+0x17c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b36      	cmp	r3, #54	; 0x36
 8002118:	d106      	bne.n	8002128 <decodeGGA+0x138>
			{
		gga->isfixValid = 1;   // fix available
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c
		inx = 0; // reset the index. We will start from the inx=0 and extract information now
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <decodeGGA+0x17c>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
	} else {
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',')
 8002126:	e009      	b.n	800213c <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	62da      	str	r2, [r3, #44]	; 0x2c
		return 1;  // return error
 800212e:	2301      	movs	r3, #1
 8002130:	e2f3      	b.n	800271a <decodeGGA+0x72a>
		inx++;  // 1st ','
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <decodeGGA+0x17c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3301      	adds	r3, #1
 8002138:	4a0c      	ldr	r2, [pc, #48]	; (800216c <decodeGGA+0x17c>)
 800213a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <decodeGGA+0x17c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b2c      	cmp	r3, #44	; 0x2c
 800214a:	d1f2      	bne.n	8002132 <decodeGGA+0x142>

	/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)
	inx++;   // reach the first number in time
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <decodeGGA+0x17c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	4a06      	ldr	r2, [pc, #24]	; (800216c <decodeGGA+0x17c>)
 8002154:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	220c      	movs	r2, #12
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f00c f863 	bl	800e22a <memset>
	i = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8002168:	e016      	b.n	8002198 <decodeGGA+0x1a8>
 800216a:	bf00      	nop
 800216c:	200002f0 	.word	0x200002f0
	{
		buffer[i] = GGAbuffer[inx];
 8002170:	4ba9      	ldr	r3, [pc, #676]	; (8002418 <decodeGGA+0x428>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	7819      	ldrb	r1, [r3, #0]
 800217c:	f107 020c 	add.w	r2, r7, #12
 8002180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002182:	4413      	add	r3, r2
 8002184:	460a      	mov	r2, r1
 8002186:	701a      	strb	r2, [r3, #0]
		i++;
 8002188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218a:	3301      	adds	r3, #1
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800218e:	4ba2      	ldr	r3, [pc, #648]	; (8002418 <decodeGGA+0x428>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	4aa0      	ldr	r2, [pc, #640]	; (8002418 <decodeGGA+0x428>)
 8002196:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8002198:	4b9f      	ldr	r3, [pc, #636]	; (8002418 <decodeGGA+0x428>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b2c      	cmp	r3, #44	; 0x2c
 80021a6:	d1e3      	bne.n	8002170 <decodeGGA+0x180>
	}

	hr = (atoi(buffer) / 10000) + GMT / 100; // get the hours from the 6 digit number
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	4618      	mov	r0, r3
 80021ae:	f00b f9fc 	bl	800d5aa <atoi>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4a99      	ldr	r2, [pc, #612]	; (800241c <decodeGGA+0x42c>)
 80021b6:	fb82 1203 	smull	r1, r2, r2, r3
 80021ba:	1312      	asrs	r2, r2, #12
 80021bc:	17db      	asrs	r3, r3, #31
 80021be:	1ad2      	subs	r2, r2, r3
 80021c0:	4b97      	ldr	r3, [pc, #604]	; (8002420 <decodeGGA+0x430>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4997      	ldr	r1, [pc, #604]	; (8002424 <decodeGGA+0x434>)
 80021c6:	fb81 0103 	smull	r0, r1, r1, r3
 80021ca:	1149      	asrs	r1, r1, #5
 80021cc:	17db      	asrs	r3, r3, #31
 80021ce:	1acb      	subs	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	4a95      	ldr	r2, [pc, #596]	; (8002428 <decodeGGA+0x438>)
 80021d4:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer) / 100) % 100) + GMT % 100; // get the minutes from the 6 digit number
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	4618      	mov	r0, r3
 80021dc:	f00b f9e5 	bl	800d5aa <atoi>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4a90      	ldr	r2, [pc, #576]	; (8002424 <decodeGGA+0x434>)
 80021e4:	fb82 1203 	smull	r1, r2, r2, r3
 80021e8:	1152      	asrs	r2, r2, #5
 80021ea:	17db      	asrs	r3, r3, #31
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	4a8d      	ldr	r2, [pc, #564]	; (8002424 <decodeGGA+0x434>)
 80021f0:	fb82 1203 	smull	r1, r2, r2, r3
 80021f4:	1151      	asrs	r1, r2, #5
 80021f6:	17da      	asrs	r2, r3, #31
 80021f8:	1a8a      	subs	r2, r1, r2
 80021fa:	2164      	movs	r1, #100	; 0x64
 80021fc:	fb01 f202 	mul.w	r2, r1, r2
 8002200:	1a9a      	subs	r2, r3, r2
 8002202:	4b87      	ldr	r3, [pc, #540]	; (8002420 <decodeGGA+0x430>)
 8002204:	6819      	ldr	r1, [r3, #0]
 8002206:	4b87      	ldr	r3, [pc, #540]	; (8002424 <decodeGGA+0x434>)
 8002208:	fb83 0301 	smull	r0, r3, r3, r1
 800220c:	1158      	asrs	r0, r3, #5
 800220e:	17cb      	asrs	r3, r1, #31
 8002210:	1ac3      	subs	r3, r0, r3
 8002212:	2064      	movs	r0, #100	; 0x64
 8002214:	fb00 f303 	mul.w	r3, r0, r3
 8002218:	1acb      	subs	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	4a83      	ldr	r2, [pc, #524]	; (800242c <decodeGGA+0x43c>)
 800221e:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) {
 8002220:	4b82      	ldr	r3, [pc, #520]	; (800242c <decodeGGA+0x43c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b3b      	cmp	r3, #59	; 0x3b
 8002226:	dd09      	ble.n	800223c <decodeGGA+0x24c>
		min = min - 60;
 8002228:	4b80      	ldr	r3, [pc, #512]	; (800242c <decodeGGA+0x43c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	3b3c      	subs	r3, #60	; 0x3c
 800222e:	4a7f      	ldr	r2, [pc, #508]	; (800242c <decodeGGA+0x43c>)
 8002230:	6013      	str	r3, [r2, #0]
		hr++;
 8002232:	4b7d      	ldr	r3, [pc, #500]	; (8002428 <decodeGGA+0x438>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	4a7b      	ldr	r2, [pc, #492]	; (8002428 <decodeGGA+0x438>)
 800223a:	6013      	str	r3, [r2, #0]
	}
	if (hr < 0) {
 800223c:	4b7a      	ldr	r3, [pc, #488]	; (8002428 <decodeGGA+0x438>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	da09      	bge.n	8002258 <decodeGGA+0x268>
		hr = 24 + hr;
 8002244:	4b78      	ldr	r3, [pc, #480]	; (8002428 <decodeGGA+0x438>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3318      	adds	r3, #24
 800224a:	4a77      	ldr	r2, [pc, #476]	; (8002428 <decodeGGA+0x438>)
 800224c:	6013      	str	r3, [r2, #0]
		daychange--;
 800224e:	4b78      	ldr	r3, [pc, #480]	; (8002430 <decodeGGA+0x440>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3b01      	subs	r3, #1
 8002254:	4a76      	ldr	r2, [pc, #472]	; (8002430 <decodeGGA+0x440>)
 8002256:	6013      	str	r3, [r2, #0]
	}
	if (hr >= 24) {
 8002258:	4b73      	ldr	r3, [pc, #460]	; (8002428 <decodeGGA+0x438>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b17      	cmp	r3, #23
 800225e:	dd09      	ble.n	8002274 <decodeGGA+0x284>
		hr = hr - 24;
 8002260:	4b71      	ldr	r3, [pc, #452]	; (8002428 <decodeGGA+0x438>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3b18      	subs	r3, #24
 8002266:	4a70      	ldr	r2, [pc, #448]	; (8002428 <decodeGGA+0x438>)
 8002268:	6013      	str	r3, [r2, #0]
		daychange++;
 800226a:	4b71      	ldr	r3, [pc, #452]	; (8002430 <decodeGGA+0x440>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3301      	adds	r3, #1
 8002270:	4a6f      	ldr	r2, [pc, #444]	; (8002430 <decodeGGA+0x440>)
 8002272:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8002274:	4b6c      	ldr	r3, [pc, #432]	; (8002428 <decodeGGA+0x438>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	621a      	str	r2, [r3, #32]
	gga->tim.min = min;
 800227c:	4b6b      	ldr	r3, [pc, #428]	; (800242c <decodeGGA+0x43c>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	625a      	str	r2, [r3, #36]	; 0x24
	gga->tim.sec = atoi(buffer) % 100;
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	4618      	mov	r0, r3
 800228a:	f00b f98e 	bl	800d5aa <atoi>
 800228e:	4602      	mov	r2, r0
 8002290:	4b64      	ldr	r3, [pc, #400]	; (8002424 <decodeGGA+0x434>)
 8002292:	fb83 1302 	smull	r1, r3, r3, r2
 8002296:	1159      	asrs	r1, r3, #5
 8002298:	17d3      	asrs	r3, r2, #31
 800229a:	1acb      	subs	r3, r1, r3
 800229c:	2164      	movs	r1, #100	; 0x64
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	6293      	str	r3, [r2, #40]	; 0x28

	/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 80022a8:	4b5b      	ldr	r3, [pc, #364]	; (8002418 <decodeGGA+0x428>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	4a5a      	ldr	r2, [pc, #360]	; (8002418 <decodeGGA+0x428>)
 80022b0:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	220c      	movs	r2, #12
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f00b ffb5 	bl	800e22a <memset>
	i = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 80022c4:	e013      	b.n	80022ee <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 80022c6:	4b54      	ldr	r3, [pc, #336]	; (8002418 <decodeGGA+0x428>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	7819      	ldrb	r1, [r3, #0]
 80022d2:	f107 020c 	add.w	r2, r7, #12
 80022d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d8:	4413      	add	r3, r2
 80022da:	460a      	mov	r2, r1
 80022dc:	701a      	strb	r2, [r3, #0]
		i++;
 80022de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e0:	3301      	adds	r3, #1
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 80022e4:	4b4c      	ldr	r3, [pc, #304]	; (8002418 <decodeGGA+0x428>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	4a4b      	ldr	r2, [pc, #300]	; (8002418 <decodeGGA+0x428>)
 80022ec:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 80022ee:	4b4a      	ldr	r3, [pc, #296]	; (8002418 <decodeGGA+0x428>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b2c      	cmp	r3, #44	; 0x2c
 80022fc:	d1e3      	bne.n	80022c6 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6)
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f824 	bl	8000350 <strlen>
 8002308:	4603      	mov	r3, r0
 800230a:	2b05      	cmp	r3, #5
 800230c:	d801      	bhi.n	8002312 <decodeGGA+0x322>
		return 2;  // If the buffer length is not appropriate, return error
 800230e:	2302      	movs	r3, #2
 8002310:	e203      	b.n	800271a <decodeGGA+0x72a>
	int16_t num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	4618      	mov	r0, r3
 8002318:	f00b f947 	bl	800d5aa <atoi>
 800231c:	4603      	mov	r3, r0
 800231e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int j = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8002324:	e002      	b.n	800232c <decodeGGA+0x33c>
		j++;   // Figure out how many digits before the decimal
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	3301      	adds	r3, #1
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800232c:	f107 020c 	add.w	r2, r7, #12
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	4413      	add	r3, r2
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b2e      	cmp	r3, #46	; 0x2e
 8002338:	d1f5      	bne.n	8002326 <decodeGGA+0x336>
	j++;
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	3301      	adds	r3, #1
 800233e:	633b      	str	r3, [r7, #48]	; 0x30
	int declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f803 	bl	8000350 <strlen>
 800234a:	4602      	mov	r2, r0
 800234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
	int dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	f107 020c 	add.w	r2, r7, #12
 8002358:	4413      	add	r3, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f00b f925 	bl	800d5aa <atoi>
 8002360:	6278      	str	r0, [r7, #36]	; 0x24
	double lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 8002362:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f94c 	bl	8000604 <__aeabi_i2d>
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	4b30      	ldr	r3, [pc, #192]	; (8002434 <decodeGGA+0x444>)
 8002372:	f7fe fadb 	bl	800092c <__aeabi_ddiv>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4690      	mov	r8, r2
 800237c:	4699      	mov	r9, r3
 800237e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002380:	f7fe f940 	bl	8000604 <__aeabi_i2d>
 8002384:	4604      	mov	r4, r0
 8002386:	460d      	mov	r5, r1
 8002388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238a:	3302      	adds	r3, #2
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f939 	bl	8000604 <__aeabi_i2d>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	ec43 2b11 	vmov	d1, r2, r3
 800239a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8002410 <decodeGGA+0x420>
 800239e:	f00e f82f 	bl	8010400 <pow>
 80023a2:	ec53 2b10 	vmov	r2, r3, d0
 80023a6:	4620      	mov	r0, r4
 80023a8:	4629      	mov	r1, r5
 80023aa:	f7fe fabf 	bl	800092c <__aeabi_ddiv>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4640      	mov	r0, r8
 80023b4:	4649      	mov	r1, r9
 80023b6:	f7fd ffd9 	bl	800036c <__adddf3>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 80023c2:	6839      	ldr	r1, [r7, #0]
 80023c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023c8:	e9c1 2300 	strd	r2, r3, [r1]
	inx++;
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <decodeGGA+0x428>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	4a11      	ldr	r2, [pc, #68]	; (8002418 <decodeGGA+0x428>)
 80023d4:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <decodeGGA+0x428>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	721a      	strb	r2, [r3, #8]

	/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 80023e6:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <decodeGGA+0x428>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	3301      	adds	r3, #1
 80023ec:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <decodeGGA+0x428>)
 80023ee:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <decodeGGA+0x428>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	4a08      	ldr	r2, [pc, #32]	; (8002418 <decodeGGA+0x428>)
 80023f8:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	220c      	movs	r2, #12
 8002400:	2100      	movs	r1, #0
 8002402:	4618      	mov	r0, r3
 8002404:	f00b ff11 	bl	800e22a <memset>
	i = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 800240c:	e028      	b.n	8002460 <decodeGGA+0x470>
 800240e:	bf00      	nop
 8002410:	00000000 	.word	0x00000000
 8002414:	40240000 	.word	0x40240000
 8002418:	200002f0 	.word	0x200002f0
 800241c:	68db8bad 	.word	0x68db8bad
 8002420:	20000000 	.word	0x20000000
 8002424:	51eb851f 	.word	0x51eb851f
 8002428:	200002f4 	.word	0x200002f4
 800242c:	200002f8 	.word	0x200002f8
 8002430:	200002fc 	.word	0x200002fc
 8002434:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 8002438:	4b89      	ldr	r3, [pc, #548]	; (8002660 <decodeGGA+0x670>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	7819      	ldrb	r1, [r3, #0]
 8002444:	f107 020c 	add.w	r2, r7, #12
 8002448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244a:	4413      	add	r3, r2
 800244c:	460a      	mov	r2, r1
 800244e:	701a      	strb	r2, [r3, #0]
		i++;
 8002450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002452:	3301      	adds	r3, #1
 8002454:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 8002456:	4b82      	ldr	r3, [pc, #520]	; (8002660 <decodeGGA+0x670>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	4a80      	ldr	r2, [pc, #512]	; (8002660 <decodeGGA+0x670>)
 800245e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 8002460:	4b7f      	ldr	r3, [pc, #508]	; (8002660 <decodeGGA+0x670>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b2c      	cmp	r3, #44	; 0x2c
 800246e:	d1e3      	bne.n	8002438 <decodeGGA+0x448>
	}
	num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	4618      	mov	r0, r3
 8002476:	f00b f898 	bl	800d5aa <atoi>
 800247a:	4603      	mov	r3, r0
 800247c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8002482:	e002      	b.n	800248a <decodeGGA+0x49a>
		j++;  // Figure out how many digits before the decimal
 8002484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002486:	3301      	adds	r3, #1
 8002488:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800248a:	f107 020c 	add.w	r2, r7, #12
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	4413      	add	r3, r2
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b2e      	cmp	r3, #46	; 0x2e
 8002496:	d1f5      	bne.n	8002484 <decodeGGA+0x494>
	j++;
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	3301      	adds	r3, #1
 800249c:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 800249e:	f107 030c 	add.w	r3, r7, #12
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fd ff54 	bl	8000350 <strlen>
 80024a8:	4602      	mov	r2, r0
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	f107 020c 	add.w	r2, r7, #12
 80024b6:	4413      	add	r3, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f00b f876 	bl	800d5aa <atoi>
 80024be:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 80024c0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f89d 	bl	8000604 <__aeabi_i2d>
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	4b65      	ldr	r3, [pc, #404]	; (8002664 <decodeGGA+0x674>)
 80024d0:	f7fe fa2c 	bl	800092c <__aeabi_ddiv>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4690      	mov	r8, r2
 80024da:	4699      	mov	r9, r3
 80024dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024de:	f7fe f891 	bl	8000604 <__aeabi_i2d>
 80024e2:	4604      	mov	r4, r0
 80024e4:	460d      	mov	r5, r1
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	3302      	adds	r3, #2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe f88a 	bl	8000604 <__aeabi_i2d>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	ec43 2b11 	vmov	d1, r2, r3
 80024f8:	ed9f 0b57 	vldr	d0, [pc, #348]	; 8002658 <decodeGGA+0x668>
 80024fc:	f00d ff80 	bl	8010400 <pow>
 8002500:	ec53 2b10 	vmov	r2, r3, d0
 8002504:	4620      	mov	r0, r4
 8002506:	4629      	mov	r1, r5
 8002508:	f7fe fa10 	bl	800092c <__aeabi_ddiv>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4640      	mov	r0, r8
 8002512:	4649      	mov	r1, r9
 8002514:	f7fd ff2a 	bl	800036c <__adddf3>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8002520:	6839      	ldr	r1, [r7, #0]
 8002522:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002526:	e9c1 2304 	strd	r2, r3, [r1, #16]
	inx++;
 800252a:	4b4d      	ldr	r3, [pc, #308]	; (8002660 <decodeGGA+0x670>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	4a4b      	ldr	r2, [pc, #300]	; (8002660 <decodeGGA+0x670>)
 8002532:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 8002534:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <decodeGGA+0x670>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	781a      	ldrb	r2, [r3, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	761a      	strb	r2, [r3, #24]

	/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8002544:	4b46      	ldr	r3, [pc, #280]	; (8002660 <decodeGGA+0x670>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3301      	adds	r3, #1
 800254a:	4a45      	ldr	r2, [pc, #276]	; (8002660 <decodeGGA+0x670>)
 800254c:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 800254e:	4b44      	ldr	r3, [pc, #272]	; (8002660 <decodeGGA+0x670>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	4a42      	ldr	r2, [pc, #264]	; (8002660 <decodeGGA+0x670>)
 8002556:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 8002558:	4b41      	ldr	r3, [pc, #260]	; (8002660 <decodeGGA+0x670>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3301      	adds	r3, #1
 800255e:	4a40      	ldr	r2, [pc, #256]	; (8002660 <decodeGGA+0x670>)
 8002560:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8002562:	4b3f      	ldr	r3, [pc, #252]	; (8002660 <decodeGGA+0x670>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	4a3d      	ldr	r2, [pc, #244]	; (8002660 <decodeGGA+0x670>)
 800256a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	220c      	movs	r2, #12
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f00b fe58 	bl	800e22a <memset>
	i = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 800257e:	e013      	b.n	80025a8 <decodeGGA+0x5b8>
	{
		buffer[i] = GGAbuffer[inx];
 8002580:	4b37      	ldr	r3, [pc, #220]	; (8002660 <decodeGGA+0x670>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	7819      	ldrb	r1, [r3, #0]
 800258c:	f107 020c 	add.w	r2, r7, #12
 8002590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002592:	4413      	add	r3, r2
 8002594:	460a      	mov	r2, r1
 8002596:	701a      	strb	r2, [r3, #0]
		i++;
 8002598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259a:	3301      	adds	r3, #1
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800259e:	4b30      	ldr	r3, [pc, #192]	; (8002660 <decodeGGA+0x670>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	4a2e      	ldr	r2, [pc, #184]	; (8002660 <decodeGGA+0x670>)
 80025a6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <decodeGGA+0x670>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b2c      	cmp	r3, #44	; 0x2c
 80025b6:	d1e3      	bne.n	8002580 <decodeGGA+0x590>
	}
	gga->numofsat = atoi(buffer); // convert the buffer to number and save into the structure
 80025b8:	f107 030c 	add.w	r3, r7, #12
 80025bc:	4618      	mov	r0, r3
 80025be:	f00a fff4 	bl	800d5aa <atoi>
 80025c2:	4602      	mov	r2, r0
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40

	/***************** skip HDOP  *********************/
	inx++;
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <decodeGGA+0x670>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	4a24      	ldr	r2, [pc, #144]	; (8002660 <decodeGGA+0x670>)
 80025d0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80025d2:	e004      	b.n	80025de <decodeGGA+0x5ee>
		inx++;
 80025d4:	4b22      	ldr	r3, [pc, #136]	; (8002660 <decodeGGA+0x670>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	4a21      	ldr	r2, [pc, #132]	; (8002660 <decodeGGA+0x670>)
 80025dc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <decodeGGA+0x670>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4413      	add	r3, r2
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b2c      	cmp	r3, #44	; 0x2c
 80025ec:	d1f2      	bne.n	80025d4 <decodeGGA+0x5e4>

	/*************** Altitude calculation ********************/
	inx++;
 80025ee:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <decodeGGA+0x670>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3301      	adds	r3, #1
 80025f4:	4a1a      	ldr	r2, [pc, #104]	; (8002660 <decodeGGA+0x670>)
 80025f6:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80025f8:	f107 030c 	add.w	r3, r7, #12
 80025fc:	220c      	movs	r2, #12
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f00b fe12 	bl	800e22a <memset>
	i = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
	while (GGAbuffer[inx] != ',') {
 800260a:	e013      	b.n	8002634 <decodeGGA+0x644>
		buffer[i] = GGAbuffer[inx];
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <decodeGGA+0x670>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	7819      	ldrb	r1, [r3, #0]
 8002618:	f107 020c 	add.w	r2, r7, #12
 800261c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261e:	4413      	add	r3, r2
 8002620:	460a      	mov	r2, r1
 8002622:	701a      	strb	r2, [r3, #0]
		i++;
 8002624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002626:	3301      	adds	r3, #1
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
		inx++;
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <decodeGGA+0x670>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3301      	adds	r3, #1
 8002630:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <decodeGGA+0x670>)
 8002632:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <decodeGGA+0x670>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b2c      	cmp	r3, #44	; 0x2c
 8002642:	d1e3      	bne.n	800260c <decodeGGA+0x61c>
	}
	num = (atoi(buffer));
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	4618      	mov	r0, r3
 800264a:	f00a ffae 	bl	800d5aa <atoi>
 800264e:	4603      	mov	r3, r0
 8002650:	85fb      	strh	r3, [r7, #46]	; 0x2e
	j = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 8002656:	e00a      	b.n	800266e <decodeGGA+0x67e>
 8002658:	00000000 	.word	0x00000000
 800265c:	40240000 	.word	0x40240000
 8002660:	200002f0 	.word	0x200002f0
 8002664:	40590000 	.word	0x40590000
		j++;
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	3301      	adds	r3, #1
 800266c:	633b      	str	r3, [r7, #48]	; 0x30
	while (buffer[j] != '.')
 800266e:	f107 020c 	add.w	r2, r7, #12
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b2e      	cmp	r3, #46	; 0x2e
 800267a:	d1f5      	bne.n	8002668 <decodeGGA+0x678>
	j++;
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	3301      	adds	r3, #1
 8002680:	633b      	str	r3, [r7, #48]	; 0x30
	declen = (strlen(buffer)) - j;
 8002682:	f107 030c 	add.w	r3, r7, #12
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd fe62 	bl	8000350 <strlen>
 800268c:	4602      	mov	r2, r0
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
	dec = atoi((char*) buffer + j);
 8002694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002696:	f107 020c 	add.w	r2, r7, #12
 800269a:	4413      	add	r3, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f00a ff84 	bl	800d5aa <atoi>
 80026a2:	6278      	str	r0, [r7, #36]	; 0x24
	lat = (num) + (dec / pow(10, (declen)));
 80026a4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd ffab 	bl	8000604 <__aeabi_i2d>
 80026ae:	4604      	mov	r4, r0
 80026b0:	460d      	mov	r5, r1
 80026b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026b4:	f7fd ffa6 	bl	8000604 <__aeabi_i2d>
 80026b8:	4680      	mov	r8, r0
 80026ba:	4689      	mov	r9, r1
 80026bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026be:	f7fd ffa1 	bl	8000604 <__aeabi_i2d>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	ec43 2b11 	vmov	d1, r2, r3
 80026ca:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002728 <decodeGGA+0x738>
 80026ce:	f00d fe97 	bl	8010400 <pow>
 80026d2:	ec53 2b10 	vmov	r2, r3, d0
 80026d6:	4640      	mov	r0, r8
 80026d8:	4649      	mov	r1, r9
 80026da:	f7fe f927 	bl	800092c <__aeabi_ddiv>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4620      	mov	r0, r4
 80026e4:	4629      	mov	r1, r5
 80026e6:	f7fd fe41 	bl	800036c <__adddf3>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gga->alt.altitude = lat;
 80026f2:	6839      	ldr	r1, [r7, #0]
 80026f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	inx++;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <decodeGGA+0x740>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <decodeGGA+0x740>)
 8002704:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <decodeGGA+0x740>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	return 0;
 8002718:	2300      	movs	r3, #0

}
 800271a:	4618      	mov	r0, r3
 800271c:	3738      	adds	r7, #56	; 0x38
 800271e:	46bd      	mov	sp, r7
 8002720:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002724:	f3af 8000 	nop.w
 8002728:	00000000 	.word	0x00000000
 800272c:	40240000 	.word	0x40240000
 8002730:	200002f0 	.word	0x200002f0

08002734 <TASK_GPS>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart6;

void TASK_GPS(void *pvParameters)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af02      	add	r7, sp, #8
 800273a:	6078      	str	r0, [r7, #4]
	uint8_t Decode_Error_Code;
	while(1)
	{
		/*Update the GPS Data*/
		Decode_Error_Code = GPS_uint8DecodeGGAData();
 800273c:	f7ff f84a 	bl	80017d4 <GPS_uint8DecodeGGAData>
 8002740:	4603      	mov	r3, r0
 8002742:	73fb      	strb	r3, [r7, #15]
		if(Decode_Error_Code==Decode_Success)
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d1f8      	bne.n	800273c <TASK_GPS+0x8>
		{
			/*Update the completion flag to activate the sendESP_Periodic task*/
			if(Global_GPS_Speed_Completetion==Nothing_Completed)
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <TASK_GPS+0x50>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d103      	bne.n	800275a <TASK_GPS+0x26>
			{
				Global_GPS_Speed_Completetion=Half_Completed_GPS;
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <TASK_GPS+0x50>)
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e00f      	b.n	800277a <TASK_GPS+0x46>

			}
			else if(Global_GPS_Speed_Completetion==Half_Completed_Speed)
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <TASK_GPS+0x50>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d10b      	bne.n	800277a <TASK_GPS+0x46>
			{

				Global_GPS_Speed_Completetion=Nothing_Completed;
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <TASK_GPS+0x50>)
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]


				/*Activate the ESPTask*/
				xTaskNotify(Handle_ESP_Periodic,0,eNoAction);
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <TASK_GPS+0x54>)
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	2300      	movs	r3, #0
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	2300      	movs	r3, #0
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	f008 f819 	bl	800a7ac <xTaskGenericNotify>
			}
			/*Stopping the task for 400ms to free the processor*/
			vTaskDelay(pdMS_TO_TICKS(400));
 800277a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800277e:	f007 f8fb 	bl	8009978 <vTaskDelay>
		Decode_Error_Code = GPS_uint8DecodeGGAData();
 8002782:	e7db      	b.n	800273c <TASK_GPS+0x8>
 8002784:	20000300 	.word	0x20000300
 8002788:	20000a7c 	.word	0x20000a7c

0800278c <TASK_LCDBuzzer>:


}

void TASK_LCDBuzzer (void *pvParameters)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b087      	sub	sp, #28
 8002790:	af02      	add	r7, sp, #8
 8002792:	6078      	str	r0, [r7, #4]
	uint32_t Local_uint32NotificationValue;

	while(1)
	{
		xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint32NotificationValue, portMAX_DELAY);
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	f04f 32ff 	mov.w	r2, #4294967295
 800279c:	9200      	str	r2, [sp, #0]
 800279e:	f04f 32ff 	mov.w	r2, #4294967295
 80027a2:	2100      	movs	r1, #0
 80027a4:	2000      	movs	r0, #0
 80027a6:	f007 ff79 	bl	800a69c <xTaskGenericNotifyWait>

		switch(Local_uint32NotificationValue)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d111      	bne.n	80027d4 <TASK_LCDBuzzer+0x48>
		{
		case Notify_TASK_LCDBuzzer_Break:

			/*Activating the warning message and the buzzer to alert the driver*/
			Buzzer_voidHighSound();
 80027b0:	f7fe fd58 	bl	8001264 <Buzzer_voidHighSound>
			LCD_AvoidHardBraking();
 80027b4:	f7ff f86c 	bl	8001890 <LCD_AvoidHardBraking>

			/*Start the timer to stop the buzzer and clear LCD after period of specified time*/
			xTimerStart(Handle_Timer_LCDBuzzer,1000);
 80027b8:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <TASK_LCDBuzzer+0x4c>)
 80027ba:	681c      	ldr	r4, [r3, #0]
 80027bc:	f007 fa84 	bl	8009cc8 <xTaskGetTickCount>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2300      	movs	r3, #0
 80027ca:	2101      	movs	r1, #1
 80027cc:	4620      	mov	r0, r4
 80027ce:	f008 fb9b 	bl	800af08 <xTimerGenericCommand>

			break;
 80027d2:	e000      	b.n	80027d6 <TASK_LCDBuzzer+0x4a>

		default:
			/*Do Nothing*/
			break;
 80027d4:	bf00      	nop
		xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint32NotificationValue, portMAX_DELAY);
 80027d6:	e7dd      	b.n	8002794 <TASK_LCDBuzzer+0x8>
 80027d8:	20000aa0 	.word	0x20000aa0

080027dc <TASK_CarControl>:


}

void TASK_CarControl(void *pvParameters)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	6078      	str	r0, [r7, #4]
	uint32_t Local_Notification_Value;
	for (;;) {

		/*Waiting to be notified from the BT ISR */
		xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_Notification_Value,portMAX_DELAY);
 80027e4:	f107 030c 	add.w	r3, r7, #12
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	9200      	str	r2, [sp, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	2100      	movs	r1, #0
 80027f2:	2000      	movs	r0, #0
 80027f4:	f007 ff52 	bl	800a69c <xTaskGenericNotifyWait>

		// Read data from UART
		switch (received_char){
 80027f8:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <TASK_CarControl+0x14c>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	3b31      	subs	r3, #49	; 0x31
 80027fe:	2b3b      	cmp	r3, #59	; 0x3b
 8002800:	d8f0      	bhi.n	80027e4 <TASK_CarControl+0x8>
 8002802:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <TASK_CarControl+0x2c>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	080028f9 	.word	0x080028f9
 800280c:	080028ff 	.word	0x080028ff
 8002810:	080027e5 	.word	0x080027e5
 8002814:	08002905 	.word	0x08002905
 8002818:	0800290b 	.word	0x0800290b
 800281c:	08002911 	.word	0x08002911
 8002820:	08002917 	.word	0x08002917
 8002824:	0800291d 	.word	0x0800291d
 8002828:	080027e5 	.word	0x080027e5
 800282c:	080027e5 	.word	0x080027e5
 8002830:	080027e5 	.word	0x080027e5
 8002834:	080027e5 	.word	0x080027e5
 8002838:	080027e5 	.word	0x080027e5
 800283c:	080027e5 	.word	0x080027e5
 8002840:	080027e5 	.word	0x080027e5
 8002844:	080027e5 	.word	0x080027e5
 8002848:	080027e5 	.word	0x080027e5
 800284c:	080027e5 	.word	0x080027e5
 8002850:	080027e5 	.word	0x080027e5
 8002854:	080027e5 	.word	0x080027e5
 8002858:	080027e5 	.word	0x080027e5
 800285c:	080027e5 	.word	0x080027e5
 8002860:	080027e5 	.word	0x080027e5
 8002864:	080027e5 	.word	0x080027e5
 8002868:	080027e5 	.word	0x080027e5
 800286c:	080027e5 	.word	0x080027e5
 8002870:	080027e5 	.word	0x080027e5
 8002874:	080027e5 	.word	0x080027e5
 8002878:	080027e5 	.word	0x080027e5
 800287c:	080027e5 	.word	0x080027e5
 8002880:	080027e5 	.word	0x080027e5
 8002884:	080027e5 	.word	0x080027e5
 8002888:	080027e5 	.word	0x080027e5
 800288c:	080027e5 	.word	0x080027e5
 8002890:	080027e5 	.word	0x080027e5
 8002894:	080027e5 	.word	0x080027e5
 8002898:	080027e5 	.word	0x080027e5
 800289c:	080027e5 	.word	0x080027e5
 80028a0:	080027e5 	.word	0x080027e5
 80028a4:	080027e5 	.word	0x080027e5
 80028a8:	080027e5 	.word	0x080027e5
 80028ac:	080027e5 	.word	0x080027e5
 80028b0:	080027e5 	.word	0x080027e5
 80028b4:	080027e5 	.word	0x080027e5
 80028b8:	080027e5 	.word	0x080027e5
 80028bc:	080027e5 	.word	0x080027e5
 80028c0:	080027e5 	.word	0x080027e5
 80028c4:	080027e5 	.word	0x080027e5
 80028c8:	080027e5 	.word	0x080027e5
 80028cc:	080027e5 	.word	0x080027e5
 80028d0:	080027e5 	.word	0x080027e5
 80028d4:	080027e5 	.word	0x080027e5
 80028d8:	080027e5 	.word	0x080027e5
 80028dc:	080027e5 	.word	0x080027e5
 80028e0:	080027e5 	.word	0x080027e5
 80028e4:	080027e5 	.word	0x080027e5
 80028e8:	080027e5 	.word	0x080027e5
 80028ec:	080027e5 	.word	0x080027e5
 80028f0:	080027e5 	.word	0x080027e5
 80028f4:	080027e5 	.word	0x080027e5
		case '1':
			Car_Rotate_LeftForward();
 80028f8:	f7fe fe0c 	bl	8001514 <Car_Rotate_LeftForward>
			break;
 80028fc:	e012      	b.n	8002924 <TASK_CarControl+0x148>
		case '2':
			Car_Rotate_Left();
 80028fe:	f7fe fdad 	bl	800145c <Car_Rotate_Left>
			break;
 8002902:	e00f      	b.n	8002924 <TASK_CarControl+0x148>
		case '4':
			Car_Move_Forward_High_Speed();
 8002904:	f7fe fd20 	bl	8001348 <Car_Move_Forward_High_Speed>
			break;
 8002908:	e00c      	b.n	8002924 <TASK_CarControl+0x148>
		case '5':
			Car_Stop();
 800290a:	f7fe fe31 	bl	8001570 <Car_Stop>
			break;
 800290e:	e009      	b.n	8002924 <TASK_CarControl+0x148>
		case '6':
			Car_Move_Backward();
 8002910:	f7fe fd48 	bl	80013a4 <Car_Move_Backward>
			break;
 8002914:	e006      	b.n	8002924 <TASK_CarControl+0x148>
		case '7':
			Car_Rotate_RightForward();
 8002916:	f7fe fdcf 	bl	80014b8 <Car_Rotate_RightForward>
			break;
 800291a:	e003      	b.n	8002924 <TASK_CarControl+0x148>
		case '8':
			Car_Rotate_Right();
 800291c:	f7fe fd70 	bl	8001400 <Car_Rotate_Right>
			break;
 8002920:	bf00      	nop
 8002922:	e75f      	b.n	80027e4 <TASK_CarControl+0x8>
		xTaskNotifyWait((uint32_t)NULL,(uint32_t)NULL,&Local_Notification_Value,portMAX_DELAY);
 8002924:	e75e      	b.n	80027e4 <TASK_CarControl+0x8>
 8002926:	bf00      	nop
 8002928:	20000a6c 	.word	0x20000a6c

0800292c <TASK_LightSensor>:
		}
	}
}

void TASK_LightSensor(void *pvParameters)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af02      	add	r7, sp, #8
 8002932:	6078      	str	r0, [r7, #4]
	uint16_t Local_uint16LightSensor_Flux=0;
 8002934:	2300      	movs	r3, #0
 8002936:	81fb      	strh	r3, [r7, #14]

	while(1)
	{
		/*Read the intensity*/
		LightSensor_uint8ReadIntensity(&Local_uint16LightSensor_Flux);
 8002938:	f107 030e 	add.w	r3, r7, #14
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff f9ab 	bl	8001c98 <LightSensor_uint8ReadIntensity>

		if(Local_uint16LightSensor_Flux>MAX_LightIntensity)
 8002942:	89fb      	ldrh	r3, [r7, #14]
 8002944:	2b64      	cmp	r3, #100	; 0x64
 8002946:	d90d      	bls.n	8002964 <TASK_LightSensor+0x38>
		{
			//Notify the ESPSendStatus task with problem in light
			xTaskNotify(Handle_ESP_Status,Notify_TASK_ESPSend_HighLight,eSetValueWithOverwrite);
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <TASK_LightSensor+0x48>)
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	2300      	movs	r3, #0
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2303      	movs	r3, #3
 8002952:	2205      	movs	r2, #5
 8002954:	2100      	movs	r1, #0
 8002956:	f007 ff29 	bl	800a7ac <xTaskGenericNotify>

			/*Delaying the task to free the processor*/
			vTaskDelay(pdMS_TO_TICKS(800));
 800295a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800295e:	f007 f80b 	bl	8009978 <vTaskDelay>
 8002962:	e7e9      	b.n	8002938 <TASK_LightSensor+0xc>
		}
		else
		{
			ESP_TX_Buffer_Status[1]='0';
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <TASK_LightSensor+0x4c>)
 8002966:	2230      	movs	r2, #48	; 0x30
 8002968:	705a      	strb	r2, [r3, #1]
			/*Delaying the task to free the processor*/
			vTaskDelay(pdMS_TO_TICKS(200));
 800296a:	20c8      	movs	r0, #200	; 0xc8
 800296c:	f007 f804 	bl	8009978 <vTaskDelay>
		LightSensor_uint8ReadIntensity(&Local_uint16LightSensor_Flux);
 8002970:	e7e2      	b.n	8002938 <TASK_LightSensor+0xc>
 8002972:	bf00      	nop
 8002974:	20000a80 	.word	0x20000a80
 8002978:	20000304 	.word	0x20000304

0800297c <TASK_ESPSend_PeriodicData>:
		}
	}
}

void TASK_ESPSend_PeriodicData(void *pvParameters)
{
 800297c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af02      	add	r7, sp, #8
 8002984:	6078      	str	r0, [r7, #4]
	uint32_t Local_uint32NotificationValue;
	while(1)
	{

		/*Reading done from GPS and Speed sensor*/
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint32NotificationValue, portMAX_DELAY);
 8002986:	f107 0308 	add.w	r3, r7, #8
 800298a:	f04f 32ff 	mov.w	r2, #4294967295
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	f04f 32ff 	mov.w	r2, #4294967295
 8002994:	2100      	movs	r1, #0
 8002996:	2000      	movs	r0, #0
 8002998:	f007 fe80 	bl	800a69c <xTaskGenericNotifyWait>
 800299c:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d1f0      	bne.n	8002986 <TASK_ESPSend_PeriodicData+0xa>
		{
			/*Updating the transmission buffer*/
			GPSSPEED_voidBuildMsg(ESP_TX_Buffer_Periodic, GPS_Data.Longitude,GPS_Data.Latitude , Global_Speed);
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <TASK_ESPSend_PeriodicData+0x68>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fe3d 	bl	8000628 <__aeabi_f2d>
 80029ae:	4604      	mov	r4, r0
 80029b0:	460d      	mov	r5, r1
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <TASK_ESPSend_PeriodicData+0x68>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fe36 	bl	8000628 <__aeabi_f2d>
 80029bc:	4680      	mov	r8, r0
 80029be:	4689      	mov	r9, r1
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <TASK_ESPSend_PeriodicData+0x6c>)
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	ec49 8b11 	vmov	d1, r8, r9
 80029ca:	ec45 4b10 	vmov	d0, r4, r5
 80029ce:	4807      	ldr	r0, [pc, #28]	; (80029ec <TASK_ESPSend_PeriodicData+0x70>)
 80029d0:	f7fe fb48 	bl	8001064 <GPSSPEED_voidBuildMsg>

			/*Transmitting the GPS, SPEED elements */
			HAL_UART_Transmit(&huart5,ESP_TX_Buffer_Periodic, sizeof(ESP_TX_Buffer_Periodic), 300);
 80029d4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80029d8:	221b      	movs	r2, #27
 80029da:	4904      	ldr	r1, [pc, #16]	; (80029ec <TASK_ESPSend_PeriodicData+0x70>)
 80029dc:	4804      	ldr	r0, [pc, #16]	; (80029f0 <TASK_ESPSend_PeriodicData+0x74>)
 80029de:	f004 ffea 	bl	80079b6 <HAL_UART_Transmit>
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,0xFFFFFFFF,&Local_uint32NotificationValue, portMAX_DELAY);
 80029e2:	e7d0      	b.n	8002986 <TASK_ESPSend_PeriodicData+0xa>
 80029e4:	200002e4 	.word	0x200002e4
 80029e8:	20000324 	.word	0x20000324
 80029ec:	20000308 	.word	0x20000308
 80029f0:	2000095c 	.word	0x2000095c

080029f4 <TASK_ESP_SendStatus>:
	}


}
void TASK_ESP_SendStatus (void *pvParameters)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	6078      	str	r0, [r7, #4]
	uint32_t Local_Notification_Value;

	BaseType_t Notify_Status;
	ESP_TX_Buffer_Status[0] = '%';
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <TASK_ESP_SendStatus+0x50>)
 80029fe:	2225      	movs	r2, #37	; 0x25
 8002a00:	701a      	strb	r2, [r3, #0]
	ESP_TX_Buffer_Status[3] = '$';
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <TASK_ESP_SendStatus+0x50>)
 8002a04:	2224      	movs	r2, #36	; 0x24
 8002a06:	70da      	strb	r2, [r3, #3]
	while(1)
	{

		/*Waiting to be notified from the TASK_LightSensor */
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,0xffffffff,&Local_Notification_Value,portMAX_DELAY);
 8002a08:	f107 0308 	add.w	r3, r7, #8
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a10:	9200      	str	r2, [sp, #0]
 8002a12:	f04f 32ff 	mov.w	r2, #4294967295
 8002a16:	2100      	movs	r1, #0
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f007 fe3f 	bl	800a69c <xTaskGenericNotifyWait>
 8002a1e:	60f8      	str	r0, [r7, #12]
		if(Notify_Status == pdTRUE)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d1f0      	bne.n	8002a08 <TASK_ESP_SendStatus+0x14>
		{

			/* Read data from Light_Sensor_Task */
			switch (Local_Notification_Value)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b05      	cmp	r3, #5
 8002a2a:	d1ed      	bne.n	8002a08 <TASK_ESP_SendStatus+0x14>
			{
			case Notify_TASK_ESPSend_HighLight:

				/*Updating the TX buffer with the problem of the high Light intensity*/
				ESP_TX_Buffer_Status[1] = '1';
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <TASK_ESP_SendStatus+0x50>)
 8002a2e:	2231      	movs	r2, #49	; 0x31
 8002a30:	705a      	strb	r2, [r3, #1]

				/*Transmitting the Car status to the Esp */
				HAL_UART_Transmit(&huart5,ESP_TX_Buffer_Status, sizeof(ESP_TX_Buffer_Status), 300);
 8002a32:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002a36:	2204      	movs	r2, #4
 8002a38:	4902      	ldr	r1, [pc, #8]	; (8002a44 <TASK_ESP_SendStatus+0x50>)
 8002a3a:	4803      	ldr	r0, [pc, #12]	; (8002a48 <TASK_ESP_SendStatus+0x54>)
 8002a3c:	f004 ffbb 	bl	80079b6 <HAL_UART_Transmit>
				break;
 8002a40:	bf00      	nop
		Notify_Status = xTaskNotifyWait((uint32_t)NULL,0xffffffff,&Local_Notification_Value,portMAX_DELAY);
 8002a42:	e7e1      	b.n	8002a08 <TASK_ESP_SendStatus+0x14>
 8002a44:	20000304 	.word	0x20000304
 8002a48:	2000095c 	.word	0x2000095c

08002a4c <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
	/*Making the pointers points to the objects of the rx_buffer & tx_buffer instances*/
  _rx_buffer = &rx_buffer;
 8002a50:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <Ringbuf_init+0x3c>)
 8002a52:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <Ringbuf_init+0x40>)
 8002a54:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <Ringbuf_init+0x44>)
 8002a58:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <Ringbuf_init+0x48>)
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <Ringbuf_init+0x4c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <Ringbuf_init+0x4c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <Ringbuf_init+0x4c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <Ringbuf_init+0x4c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0220 	orr.w	r2, r2, #32
 8002a7a:	60da      	str	r2, [r3, #12]
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000738 	.word	0x20000738
 8002a8c:	20000328 	.word	0x20000328
 8002a90:	2000073c 	.word	0x2000073c
 8002a94:	20000530 	.word	0x20000530
 8002a98:	200009a0 	.word	0x200009a0

08002a9c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	6039      	str	r1, [r7, #0]
 8002aa6:	71fb      	strb	r3, [r7, #7]
	 * increments by 1 for future storing, it doesnt coincide with the tail
	 * the % UART_BUFFER_SIZE checking if the index of the next storing procedure
	 * is bigger than the buffer size(ex this iteration stores in 512 byte and the next one
	 * will be in the 513 so i should reset the (i) to zero to repeat again)*/

  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab4:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d009      	beq.n	8002ad6 <store_char+0x3a>
  {
	  /*Storing the charachter in the recent head pointed location*/
    buffer->buffer[buffer->head] = c;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	79f9      	ldrb	r1, [r7, #7]
 8002acc:	54d1      	strb	r1, [r2, r3]

    /*After storing the character, incrementing the head for the next storing */
    buffer->head = i;
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <Uart_read+0x54>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <Uart_read+0x54>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d102      	bne.n	8002b04 <Uart_read+0x20>
  {
    return -1;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	e013      	b.n	8002b2c <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <Uart_read+0x54>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <Uart_read+0x54>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b10:	5cd3      	ldrb	r3, [r2, r3]
 8002b12:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <Uart_read+0x54>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <Uart_read+0x54>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	20000738 	.word	0x20000738

08002b3c <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <IsDataAvailable+0x30>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <IsDataAvailable+0x30>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	20000738 	.word	0x20000738

08002b70 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <Uart_peek+0x38>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <Uart_peek+0x38>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d102      	bne.n	8002b8e <Uart_peek+0x1e>
  {
    return -1;
 8002b88:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8c:	e006      	b.n	8002b9c <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <Uart_peek+0x38>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <Uart_peek+0x38>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000738 	.word	0x20000738

08002bac <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fd fbc8 	bl	8000350 <strlen>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002bc8:	e01e      	b.n	8002c08 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8002bca:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <Copy_upto+0xf8>)
 8002bcc:	6819      	ldr	r1, [r3, #0]
 8002bce:	4b35      	ldr	r3, [pc, #212]	; (8002ca4 <Copy_upto+0xf8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	6838      	ldr	r0, [r7, #0]
 8002bda:	4403      	add	r3, r0
 8002bdc:	5c8a      	ldrb	r2, [r1, r2]
 8002bde:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002be0:	4b30      	ldr	r3, [pc, #192]	; (8002ca4 <Copy_upto+0xf8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <Copy_upto+0xf8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bf2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002bfc:	bf00      	nop
 8002bfe:	f7ff ff9d 	bl	8002b3c <IsDataAvailable>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0fa      	beq.n	8002bfe <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8002c08:	f7ff ffb2 	bl	8002b70 <Uart_peek>
 8002c0c:	4601      	mov	r1, r0
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	4413      	add	r3, r2
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	4299      	cmp	r1, r3
 8002c18:	d1d7      	bne.n	8002bca <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8002c1a:	e027      	b.n	8002c6c <Copy_upto+0xc0>
	{
		so_far++;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8002c22:	f7ff ff5f 	bl	8002ae4 <Uart_read>
 8002c26:	4601      	mov	r1, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	613a      	str	r2, [r7, #16]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	b2ca      	uxtb	r2, r1
 8002c36:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d101      	bne.n	8002c44 <Copy_upto+0x98>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e02a      	b.n	8002c9a <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8002c44:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <Copy_upto+0xfc>)
 8002c46:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c4a:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002c4c:	bf00      	nop
 8002c4e:	f7ff ff75 	bl	8002b3c <IsDataAvailable>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <Copy_upto+0xb4>
 8002c58:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <Copy_upto+0xfc>)
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f6      	bne.n	8002c4e <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <Copy_upto+0xfc>)
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <Copy_upto+0xc0>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e016      	b.n	8002c9a <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8002c6c:	f7ff ff80 	bl	8002b70 <Uart_peek>
 8002c70:	4601      	mov	r1, r0
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4413      	add	r3, r2
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	4299      	cmp	r1, r3
 8002c7c:	d0ce      	beq.n	8002c1c <Copy_upto+0x70>
	}

	if (so_far != len)
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d002      	beq.n	8002c8c <Copy_upto+0xe0>
	{
		so_far = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
		goto again;
 8002c8a:	e79d      	b.n	8002bc8 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d101      	bne.n	8002c98 <Copy_upto+0xec>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <Copy_upto+0xee>
	else return 0;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000738 	.word	0x20000738
 8002ca8:	20000326 	.word	0x20000326

08002cac <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7fd fb49 	bl	8000350 <strlen>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002cc2:	4b3c      	ldr	r3, [pc, #240]	; (8002db4 <Wait_for+0x108>)
 8002cc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002cc8:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8002cca:	bf00      	nop
 8002ccc:	f7ff ff36 	bl	8002b3c <IsDataAvailable>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <Wait_for+0x32>
 8002cd6:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <Wait_for+0x108>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f6      	bne.n	8002ccc <Wait_for+0x20>
	if (timeout == 0) return 0;
 8002cde:	4b35      	ldr	r3, [pc, #212]	; (8002db4 <Wait_for+0x108>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d119      	bne.n	8002d1a <Wait_for+0x6e>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e060      	b.n	8002dac <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002cea:	4b33      	ldr	r3, [pc, #204]	; (8002db8 <Wait_for+0x10c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002cf2:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <Wait_for+0x10c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d00b      	beq.n	8002d16 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002cfe:	4b2e      	ldr	r3, [pc, #184]	; (8002db8 <Wait_for+0x10c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	4b2b      	ldr	r3, [pc, #172]	; (8002db8 <Wait_for+0x10c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d14:	e001      	b.n	8002d1a <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e048      	b.n	8002dac <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002d1a:	f7ff ff29 	bl	8002b70 <Uart_peek>
 8002d1e:	4601      	mov	r1, r0
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	4299      	cmp	r1, r3
 8002d2a:	d1de      	bne.n	8002cea <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002d2c:	e027      	b.n	8002d7e <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3301      	adds	r3, #1
 8002d32:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002d34:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <Wait_for+0x10c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <Wait_for+0x10c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d101      	bne.n	8002d56 <Wait_for+0xaa>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e02a      	b.n	8002dac <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8002d56:	4b17      	ldr	r3, [pc, #92]	; (8002db4 <Wait_for+0x108>)
 8002d58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d5c:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002d5e:	bf00      	nop
 8002d60:	f7ff feec 	bl	8002b3c <IsDataAvailable>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d103      	bne.n	8002d72 <Wait_for+0xc6>
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <Wait_for+0x108>)
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f6      	bne.n	8002d60 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <Wait_for+0x108>)
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <Wait_for+0xd2>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e016      	b.n	8002dac <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002d7e:	f7ff fef7 	bl	8002b70 <Uart_peek>
 8002d82:	4601      	mov	r1, r0
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4299      	cmp	r1, r3
 8002d8e:	d0ce      	beq.n	8002d2e <Wait_for+0x82>
	}

	if (so_far != len)
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d002      	beq.n	8002d9e <Wait_for+0xf2>
	{
		so_far = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
		goto again;
 8002d9c:	e791      	b.n	8002cc2 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d101      	bne.n	8002daa <Wait_for+0xfe>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <Wait_for+0x100>
	else return 0;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000326 	.word	0x20000326
 8002db8:	20000738 	.word	0x20000738

08002dbc <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d013      	beq.n	8002e06 <Uart_isr+0x4a>
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00e      	beq.n	8002e06 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8002df6:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <Uart_isr+0xb4>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fe4c 	bl	8002a9c <store_char>
        return;
 8002e04:	e031      	b.n	8002e6a <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d02c      	beq.n	8002e6a <Uart_isr+0xae>
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d027      	beq.n	8002e6a <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8002e1a:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <Uart_isr+0xb8>)
 8002e1c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <Uart_isr+0xb8>)
 8002e22:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d108      	bne.n	8002e3c <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e38:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8002e3a:	e015      	b.n	8002e68 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <Uart_isr+0xb8>)
 8002e3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002e42:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <Uart_isr+0xb8>)
 8002e44:	5cd3      	ldrb	r3, [r2, r3]
 8002e46:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <Uart_isr+0xb8>)
 8002e4a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e54:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <Uart_isr+0xb8>)
 8002e56:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	7bba      	ldrb	r2, [r7, #14]
 8002e66:	605a      	str	r2, [r3, #4]
    	return;
 8002e68:	bf00      	nop
    }
}
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000738 	.word	0x20000738
 8002e74:	20000530 	.word	0x20000530

08002e78 <Calculate_Car_Speed>:
#include "calculateSpeed.h"

extern uint32_t edges_counter;

float Calculate_Car_Speed()
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
	float Local_uint16Speed;
	Local_uint16Speed = (edges_counter/50)/(2000.0*60);
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <Calculate_Car_Speed+0x48>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <Calculate_Car_Speed+0x4c>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd fbaa 	bl	80005e4 <__aeabi_ui2d>
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <Calculate_Car_Speed+0x50>)
 8002e96:	f7fd fd49 	bl	800092c <__aeabi_ddiv>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f7fd ff11 	bl	8000cc8 <__aeabi_d2f>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	607b      	str	r3, [r7, #4]
	edges_counter=0;
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <Calculate_Car_Speed+0x48>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
	return Local_uint16Speed;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	ee07 3a90 	vmov	s15, r3
}
 8002eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20000214 	.word	0x20000214
 8002ec4:	51eb851f 	.word	0x51eb851f
 8002ec8:	40fd4c00 	.word	0x40fd4c00

08002ecc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002ed2:	f001 f9a3 	bl	800421c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002ed6:	f000 f925 	bl	8003124 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002eda:	f000 fc19 	bl	8003710 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002ede:	f000 f98d 	bl	80031fc <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8002ee2:	f000 fb97 	bl	8003614 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8002ee6:	f000 fbbf 	bl	8003668 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8002eea:	f000 fa11 	bl	8003310 <MX_TIM2_Init>
	MX_I2C2_Init();
 8002eee:	f000 f9b3 	bl	8003258 <MX_I2C2_Init>
	MX_I2C3_Init();
 8002ef2:	f000 f9df 	bl	80032b4 <MX_I2C3_Init>
	MX_TIM3_Init();
 8002ef6:	f000 fa6f 	bl	80033d8 <MX_TIM3_Init>
	MX_UART5_Init();
 8002efa:	f000 fb61 	bl	80035c0 <MX_UART5_Init>
	MX_TIM6_Init();
 8002efe:	f000 fae5 	bl	80034cc <MX_TIM6_Init>
	MX_TIM12_Init();
 8002f02:	f000 fb19 	bl	8003538 <MX_TIM12_Init>
	MX_USART6_UART_Init();
 8002f06:	f000 fbd9 	bl	80036bc <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */

	/********************************Hardware_Initializing*********************************************/
	GPS_voidInit(); //Note that LCD Init is included in this API
 8002f0a:	f7fe fc09 	bl	8001720 <GPS_voidInit>
	LightSensor_voidInit();
 8002f0e:	f7fe feb6 	bl	8001c7e <LightSensor_voidInit>

	/********************************Interrupts_Starting***********************************************/
	HAL_UART_Receive_IT(&huart3,&received_char , 1);
 8002f12:	2201      	movs	r2, #1
 8002f14:	4964      	ldr	r1, [pc, #400]	; (80030a8 <main+0x1dc>)
 8002f16:	4865      	ldr	r0, [pc, #404]	; (80030ac <main+0x1e0>)
 8002f18:	f004 fddf 	bl	8007ada <HAL_UART_Receive_IT>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8002f1c:	4b64      	ldr	r3, [pc, #400]	; (80030b0 <main+0x1e4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	4b63      	ldr	r3, [pc, #396]	; (80030b0 <main+0x1e4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	60da      	str	r2, [r3, #12]
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4860      	ldr	r0, [pc, #384]	; (80030b0 <main+0x1e4>)
 8002f30:	f003 fe82 	bl	8006c38 <HAL_TIM_IC_Start_IT>
	//
	//	SEGGER_SYSVIEW_Start();
	//>>>>>>> Stashed change

	/************************************SW_Timers-Creation********************************************/
	Handle_Timer_LCDBuzzer= xTimerCreate("Timer_LCDBuzzer", pdMS_TO_TICKS(5000), pdFALSE, &ID_TImer_LCDBuzzer, CallBack_TimerLCDBuzzer);
 8002f34:	4b5f      	ldr	r3, [pc, #380]	; (80030b4 <main+0x1e8>)
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4b5f      	ldr	r3, [pc, #380]	; (80030b8 <main+0x1ec>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f241 3188 	movw	r1, #5000	; 0x1388
 8002f40:	485e      	ldr	r0, [pc, #376]	; (80030bc <main+0x1f0>)
 8002f42:	f007 ff87 	bl	800ae54 <xTimerCreate>
 8002f46:	4603      	mov	r3, r0
 8002f48:	4a5d      	ldr	r2, [pc, #372]	; (80030c0 <main+0x1f4>)
 8002f4a:	6013      	str	r3, [r2, #0]

	/************************************TASKS_Creation************************************************/
	Status_GPS = xTaskCreate(TASK_GPS, "GPS", 150, NULL, Priority_TASK_GPS, &Handle_GPS);
 8002f4c:	4b5d      	ldr	r3, [pc, #372]	; (80030c4 <main+0x1f8>)
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	2302      	movs	r3, #2
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2300      	movs	r3, #0
 8002f56:	2296      	movs	r2, #150	; 0x96
 8002f58:	495b      	ldr	r1, [pc, #364]	; (80030c8 <main+0x1fc>)
 8002f5a:	485c      	ldr	r0, [pc, #368]	; (80030cc <main+0x200>)
 8002f5c:	f006 fb84 	bl	8009668 <xTaskCreate>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4a5b      	ldr	r2, [pc, #364]	; (80030d0 <main+0x204>)
 8002f64:	6013      	str	r3, [r2, #0]

	configASSERT(Status_GPS==pdPASS);
 8002f66:	4b5a      	ldr	r3, [pc, #360]	; (80030d0 <main+0x204>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d00a      	beq.n	8002f84 <main+0xb8>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002f80:	bf00      	nop
 8002f82:	e7fe      	b.n	8002f82 <main+0xb6>

	Status_LCDBuzzer = xTaskCreate(TASK_LCDBuzzer, "LCDBuzzer", 200, NULL, Priority_TASK_LCDBuzzer, &Handle_LCDBuzzer);
 8002f84:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <main+0x208>)
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	2302      	movs	r3, #2
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	22c8      	movs	r2, #200	; 0xc8
 8002f90:	4951      	ldr	r1, [pc, #324]	; (80030d8 <main+0x20c>)
 8002f92:	4852      	ldr	r0, [pc, #328]	; (80030dc <main+0x210>)
 8002f94:	f006 fb68 	bl	8009668 <xTaskCreate>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4a51      	ldr	r2, [pc, #324]	; (80030e0 <main+0x214>)
 8002f9c:	6013      	str	r3, [r2, #0]

	configASSERT(Status_LCDBuzzer==pdPASS);
 8002f9e:	4b50      	ldr	r3, [pc, #320]	; (80030e0 <main+0x214>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d00a      	beq.n	8002fbc <main+0xf0>
        __asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	613b      	str	r3, [r7, #16]
    }
 8002fb8:	bf00      	nop
 8002fba:	e7fe      	b.n	8002fba <main+0xee>

	Status_CarControl = xTaskCreate(TASK_CarControl, "CarControl", 200, NULL, Priority_TASK_CarControl, &Handle_CarControl);
 8002fbc:	4b49      	ldr	r3, [pc, #292]	; (80030e4 <main+0x218>)
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	22c8      	movs	r2, #200	; 0xc8
 8002fc8:	4947      	ldr	r1, [pc, #284]	; (80030e8 <main+0x21c>)
 8002fca:	4848      	ldr	r0, [pc, #288]	; (80030ec <main+0x220>)
 8002fcc:	f006 fb4c 	bl	8009668 <xTaskCreate>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	4a47      	ldr	r2, [pc, #284]	; (80030f0 <main+0x224>)
 8002fd4:	6013      	str	r3, [r2, #0]

	configASSERT(Status_CarControl==pdPASS);
 8002fd6:	4b46      	ldr	r3, [pc, #280]	; (80030f0 <main+0x224>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d00a      	beq.n	8002ff4 <main+0x128>
        __asm volatile
 8002fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	60fb      	str	r3, [r7, #12]
    }
 8002ff0:	bf00      	nop
 8002ff2:	e7fe      	b.n	8002ff2 <main+0x126>

	Status_ESP_Periodic = xTaskCreate(TASK_ESPSend_PeriodicData, "ESP_Periodic", 200, NULL, Priority_TASK_ESP_Periodic, &Handle_ESP_Periodic);
 8002ff4:	4b3f      	ldr	r3, [pc, #252]	; (80030f4 <main+0x228>)
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	22c8      	movs	r2, #200	; 0xc8
 8003000:	493d      	ldr	r1, [pc, #244]	; (80030f8 <main+0x22c>)
 8003002:	483e      	ldr	r0, [pc, #248]	; (80030fc <main+0x230>)
 8003004:	f006 fb30 	bl	8009668 <xTaskCreate>
 8003008:	4603      	mov	r3, r0
 800300a:	4a3d      	ldr	r2, [pc, #244]	; (8003100 <main+0x234>)
 800300c:	6013      	str	r3, [r2, #0]

	configASSERT(Status_ESP_Periodic==pdPASS);
 800300e:	4b3c      	ldr	r3, [pc, #240]	; (8003100 <main+0x234>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d00a      	beq.n	800302c <main+0x160>
        __asm volatile
 8003016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301a:	f383 8811 	msr	BASEPRI, r3
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	60bb      	str	r3, [r7, #8]
    }
 8003028:	bf00      	nop
 800302a:	e7fe      	b.n	800302a <main+0x15e>

	Status_ESP_Status = xTaskCreate(TASK_ESP_SendStatus, "ESP_Status", 200, NULL, Priority_TASK_ESP_Status, &Handle_ESP_Status);
 800302c:	4b35      	ldr	r3, [pc, #212]	; (8003104 <main+0x238>)
 800302e:	9301      	str	r3, [sp, #4]
 8003030:	2301      	movs	r3, #1
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	2300      	movs	r3, #0
 8003036:	22c8      	movs	r2, #200	; 0xc8
 8003038:	4933      	ldr	r1, [pc, #204]	; (8003108 <main+0x23c>)
 800303a:	4834      	ldr	r0, [pc, #208]	; (800310c <main+0x240>)
 800303c:	f006 fb14 	bl	8009668 <xTaskCreate>
 8003040:	4603      	mov	r3, r0
 8003042:	4a33      	ldr	r2, [pc, #204]	; (8003110 <main+0x244>)
 8003044:	6013      	str	r3, [r2, #0]

	configASSERT(Status_ESP_Status==pdPASS);
 8003046:	4b32      	ldr	r3, [pc, #200]	; (8003110 <main+0x244>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d00a      	beq.n	8003064 <main+0x198>
        __asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	607b      	str	r3, [r7, #4]
    }
 8003060:	bf00      	nop
 8003062:	e7fe      	b.n	8003062 <main+0x196>

	Status_LightSensor = xTaskCreate(TASK_LightSensor, "LightSensor", 200, NULL, Priority_TASK_LightSensor, &Handle_LightSensor);
 8003064:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <main+0x248>)
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	2302      	movs	r3, #2
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2300      	movs	r3, #0
 800306e:	22c8      	movs	r2, #200	; 0xc8
 8003070:	4929      	ldr	r1, [pc, #164]	; (8003118 <main+0x24c>)
 8003072:	482a      	ldr	r0, [pc, #168]	; (800311c <main+0x250>)
 8003074:	f006 faf8 	bl	8009668 <xTaskCreate>
 8003078:	4603      	mov	r3, r0
 800307a:	4a29      	ldr	r2, [pc, #164]	; (8003120 <main+0x254>)
 800307c:	6013      	str	r3, [r2, #0]

	configASSERT(Status_LightSensor==pdPASS);
 800307e:	4b28      	ldr	r3, [pc, #160]	; (8003120 <main+0x254>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d00a      	beq.n	800309c <main+0x1d0>
        __asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	603b      	str	r3, [r7, #0]
    }
 8003098:	bf00      	nop
 800309a:	e7fe      	b.n	800309a <main+0x1ce>


	/**********************************Schedular_Starting********************************************/
	vTaskStartScheduler();
 800309c:	f006 fca4 	bl	80099e8 <vTaskStartScheduler>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		Buzzer_voidHighSound();
 80030a0:	f7fe f8e0 	bl	8001264 <Buzzer_voidHighSound>
 80030a4:	e7fc      	b.n	80030a0 <main+0x1d4>
 80030a6:	bf00      	nop
 80030a8:	20000a6c 	.word	0x20000a6c
 80030ac:	200009e4 	.word	0x200009e4
 80030b0:	2000083c 	.word	0x2000083c
 80030b4:	08001331 	.word	0x08001331
 80030b8:	20000004 	.word	0x20000004
 80030bc:	08011440 	.word	0x08011440
 80030c0:	20000aa0 	.word	0x20000aa0
 80030c4:	20000a78 	.word	0x20000a78
 80030c8:	08011450 	.word	0x08011450
 80030cc:	08002735 	.word	0x08002735
 80030d0:	20000a90 	.word	0x20000a90
 80030d4:	20000a70 	.word	0x20000a70
 80030d8:	08011454 	.word	0x08011454
 80030dc:	0800278d 	.word	0x0800278d
 80030e0:	20000a88 	.word	0x20000a88
 80030e4:	20000a74 	.word	0x20000a74
 80030e8:	08011460 	.word	0x08011460
 80030ec:	080027dd 	.word	0x080027dd
 80030f0:	20000a8c 	.word	0x20000a8c
 80030f4:	20000a7c 	.word	0x20000a7c
 80030f8:	0801146c 	.word	0x0801146c
 80030fc:	0800297d 	.word	0x0800297d
 8003100:	20000a94 	.word	0x20000a94
 8003104:	20000a80 	.word	0x20000a80
 8003108:	0801147c 	.word	0x0801147c
 800310c:	080029f5 	.word	0x080029f5
 8003110:	20000a98 	.word	0x20000a98
 8003114:	20000a84 	.word	0x20000a84
 8003118:	08011488 	.word	0x08011488
 800311c:	0800292d 	.word	0x0800292d
 8003120:	20000a9c 	.word	0x20000a9c

08003124 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b094      	sub	sp, #80	; 0x50
 8003128:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800312a:	f107 031c 	add.w	r3, r7, #28
 800312e:	2234      	movs	r2, #52	; 0x34
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f00b f879 	bl	800e22a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003138:	f107 0308 	add.w	r3, r7, #8
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003148:	2300      	movs	r3, #0
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <SystemClock_Config+0xd0>)
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	4a28      	ldr	r2, [pc, #160]	; (80031f4 <SystemClock_Config+0xd0>)
 8003152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003156:	6413      	str	r3, [r2, #64]	; 0x40
 8003158:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <SystemClock_Config+0xd0>)
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003164:	2300      	movs	r3, #0
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <SystemClock_Config+0xd4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003170:	4a21      	ldr	r2, [pc, #132]	; (80031f8 <SystemClock_Config+0xd4>)
 8003172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <SystemClock_Config+0xd4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003184:	2302      	movs	r3, #2
 8003186:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003188:	2301      	movs	r3, #1
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800318c:	2310      	movs	r3, #16
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003190:	2302      	movs	r3, #2
 8003192:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003194:	2300      	movs	r3, #0
 8003196:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003198:	2308      	movs	r3, #8
 800319a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 800319c:	2340      	movs	r3, #64	; 0x40
 800319e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031a0:	2302      	movs	r3, #2
 80031a2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80031a4:	2302      	movs	r3, #2
 80031a6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80031a8:	2302      	movs	r3, #2
 80031aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ac:	f107 031c 	add.w	r3, r7, #28
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 f80d 	bl	80061d0 <HAL_RCC_OscConfig>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80031bc:	f000 fb32 	bl	8003824 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031c0:	230f      	movs	r3, #15
 80031c2:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031c4:	2302      	movs	r3, #2
 80031c6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031d4:	f107 0308 	add.w	r3, r7, #8
 80031d8:	2101      	movs	r1, #1
 80031da:	4618      	mov	r0, r3
 80031dc:	f002 fd02 	bl	8005be4 <HAL_RCC_ClockConfig>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80031e6:	f000 fb1d 	bl	8003824 <Error_Handler>
	}
}
 80031ea:	bf00      	nop
 80031ec:	3750      	adds	r7, #80	; 0x50
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40007000 	.word	0x40007000

080031fc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003200:	4b13      	ldr	r3, [pc, #76]	; (8003250 <MX_I2C1_Init+0x54>)
 8003202:	4a14      	ldr	r2, [pc, #80]	; (8003254 <MX_I2C1_Init+0x58>)
 8003204:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 1000;
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <MX_I2C1_Init+0x54>)
 8003208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800320c:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <MX_I2C1_Init+0x54>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003214:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <MX_I2C1_Init+0x54>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <MX_I2C1_Init+0x54>)
 800321c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003220:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <MX_I2C1_Init+0x54>)
 8003224:	2200      	movs	r2, #0
 8003226:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <MX_I2C1_Init+0x54>)
 800322a:	2200      	movs	r2, #0
 800322c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <MX_I2C1_Init+0x54>)
 8003230:	2200      	movs	r2, #0
 8003232:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <MX_I2C1_Init+0x54>)
 8003236:	2200      	movs	r2, #0
 8003238:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800323a:	4805      	ldr	r0, [pc, #20]	; (8003250 <MX_I2C1_Init+0x54>)
 800323c:	f001 fb76 	bl	800492c <HAL_I2C_Init>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <MX_I2C1_Init+0x4e>
	{
		Error_Handler();
 8003246:	f000 faed 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000740 	.word	0x20000740
 8003254:	40005400 	.word	0x40005400

08003258 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <MX_I2C2_Init+0x54>)
 800325e:	4a14      	ldr	r2, [pc, #80]	; (80032b0 <MX_I2C2_Init+0x58>)
 8003260:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 1000;
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <MX_I2C2_Init+0x54>)
 8003264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003268:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <MX_I2C2_Init+0x54>)
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 120;
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <MX_I2C2_Init+0x54>)
 8003272:	2278      	movs	r2, #120	; 0x78
 8003274:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <MX_I2C2_Init+0x54>)
 8003278:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800327c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <MX_I2C2_Init+0x54>)
 8003280:	2200      	movs	r2, #0
 8003282:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <MX_I2C2_Init+0x54>)
 8003286:	2200      	movs	r2, #0
 8003288:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <MX_I2C2_Init+0x54>)
 800328c:	2200      	movs	r2, #0
 800328e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <MX_I2C2_Init+0x54>)
 8003292:	2200      	movs	r2, #0
 8003294:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003296:	4805      	ldr	r0, [pc, #20]	; (80032ac <MX_I2C2_Init+0x54>)
 8003298:	f001 fb48 	bl	800492c <HAL_I2C_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_I2C2_Init+0x4e>
	{
		Error_Handler();
 80032a2:	f000 fabf 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000794 	.word	0x20000794
 80032b0:	40005800 	.word	0x40005800

080032b4 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <MX_I2C3_Init+0x50>)
 80032ba:	4a13      	ldr	r2, [pc, #76]	; (8003308 <MX_I2C3_Init+0x54>)
 80032bc:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <MX_I2C3_Init+0x50>)
 80032c0:	4a12      	ldr	r2, [pc, #72]	; (800330c <MX_I2C3_Init+0x58>)
 80032c2:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032c4:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <MX_I2C3_Init+0x50>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 80032ca:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <MX_I2C3_Init+0x50>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <MX_I2C3_Init+0x50>)
 80032d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032d6:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <MX_I2C3_Init+0x50>)
 80032da:	2200      	movs	r2, #0
 80032dc:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80032de:	4b09      	ldr	r3, [pc, #36]	; (8003304 <MX_I2C3_Init+0x50>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032e4:	4b07      	ldr	r3, [pc, #28]	; (8003304 <MX_I2C3_Init+0x50>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <MX_I2C3_Init+0x50>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80032f0:	4804      	ldr	r0, [pc, #16]	; (8003304 <MX_I2C3_Init+0x50>)
 80032f2:	f001 fb1b 	bl	800492c <HAL_I2C_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 80032fc:	f000 fa92 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}
 8003304:	200007e8 	.word	0x200007e8
 8003308:	40005c00 	.word	0x40005c00
 800330c:	000186a0 	.word	0x000186a0

08003310 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003316:	f107 0320 	add.w	r3, r7, #32
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003320:	1d3b      	adds	r3, r7, #4
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	609a      	str	r2, [r3, #8]
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	611a      	str	r2, [r3, #16]
 800332e:	615a      	str	r2, [r3, #20]
 8003330:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003332:	4b28      	ldr	r3, [pc, #160]	; (80033d4 <MX_TIM2_Init+0xc4>)
 8003334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003338:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15999;
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <MX_TIM2_Init+0xc4>)
 800333c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8003340:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <MX_TIM2_Init+0xc4>)
 8003344:	2200      	movs	r2, #0
 8003346:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 12000;
 8003348:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <MX_TIM2_Init+0xc4>)
 800334a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800334e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <MX_TIM2_Init+0xc4>)
 8003352:	2200      	movs	r2, #0
 8003354:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003356:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <MX_TIM2_Init+0xc4>)
 8003358:	2200      	movs	r2, #0
 800335a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800335c:	481d      	ldr	r0, [pc, #116]	; (80033d4 <MX_TIM2_Init+0xc4>)
 800335e:	f003 fa95 	bl	800688c <HAL_TIM_OC_Init>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8003368:	f000 fa5c 	bl	8003824 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800336c:	2300      	movs	r3, #0
 800336e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003374:	f107 0320 	add.w	r3, r7, #32
 8003378:	4619      	mov	r1, r3
 800337a:	4816      	ldr	r0, [pc, #88]	; (80033d4 <MX_TIM2_Init+0xc4>)
 800337c:	f004 fa3e 	bl	80077fc <HAL_TIMEx_MasterConfigSynchronization>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM2_Init+0x7a>
	{
		Error_Handler();
 8003386:	f000 fa4d 	bl	8003824 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800339a:	1d3b      	adds	r3, r7, #4
 800339c:	2200      	movs	r2, #0
 800339e:	4619      	mov	r1, r3
 80033a0:	480c      	ldr	r0, [pc, #48]	; (80033d4 <MX_TIM2_Init+0xc4>)
 80033a2:	f003 fe79 	bl	8007098 <HAL_TIM_OC_ConfigChannel>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM2_Init+0xa0>
	{
		Error_Handler();
 80033ac:	f000 fa3a 	bl	8003824 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	2204      	movs	r2, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4807      	ldr	r0, [pc, #28]	; (80033d4 <MX_TIM2_Init+0xc4>)
 80033b8:	f003 fe6e 	bl	8007098 <HAL_TIM_OC_ConfigChannel>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_TIM2_Init+0xb6>
	{
		Error_Handler();
 80033c2:	f000 fa2f 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80033c6:	4803      	ldr	r0, [pc, #12]	; (80033d4 <MX_TIM2_Init+0xc4>)
 80033c8:	f000 fbac 	bl	8003b24 <HAL_TIM_MspPostInit>

}
 80033cc:	bf00      	nop
 80033ce:	3728      	adds	r7, #40	; 0x28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	2000083c 	.word	0x2000083c

080033d8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033de:	f107 0320 	add.w	r3, r7, #32
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80033e8:	1d3b      	adds	r3, r7, #4
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	609a      	str	r2, [r3, #8]
 80033f2:	60da      	str	r2, [r3, #12]
 80033f4:	611a      	str	r2, [r3, #16]
 80033f6:	615a      	str	r2, [r3, #20]
 80033f8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80033fa:	4b32      	ldr	r3, [pc, #200]	; (80034c4 <MX_TIM3_Init+0xec>)
 80033fc:	4a32      	ldr	r2, [pc, #200]	; (80034c8 <MX_TIM3_Init+0xf0>)
 80033fe:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 320-1;
 8003400:	4b30      	ldr	r3, [pc, #192]	; (80034c4 <MX_TIM3_Init+0xec>)
 8003402:	f240 123f 	movw	r2, #319	; 0x13f
 8003406:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003408:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <MX_TIM3_Init+0xec>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 800340e:	4b2d      	ldr	r3, [pc, #180]	; (80034c4 <MX_TIM3_Init+0xec>)
 8003410:	2263      	movs	r2, #99	; 0x63
 8003412:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003414:	4b2b      	ldr	r3, [pc, #172]	; (80034c4 <MX_TIM3_Init+0xec>)
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800341a:	4b2a      	ldr	r3, [pc, #168]	; (80034c4 <MX_TIM3_Init+0xec>)
 800341c:	2200      	movs	r2, #0
 800341e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003420:	4828      	ldr	r0, [pc, #160]	; (80034c4 <MX_TIM3_Init+0xec>)
 8003422:	f003 fa82 	bl	800692a <HAL_TIM_PWM_Init>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 800342c:	f000 f9fa 	bl	8003824 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003434:	2300      	movs	r3, #0
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003438:	f107 0320 	add.w	r3, r7, #32
 800343c:	4619      	mov	r1, r3
 800343e:	4821      	ldr	r0, [pc, #132]	; (80034c4 <MX_TIM3_Init+0xec>)
 8003440:	f004 f9dc 	bl	80077fc <HAL_TIMEx_MasterConfigSynchronization>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 800344a:	f000 f9eb 	bl	8003824 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800344e:	2360      	movs	r3, #96	; 0x60
 8003450:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800345e:	1d3b      	adds	r3, r7, #4
 8003460:	2200      	movs	r2, #0
 8003462:	4619      	mov	r1, r3
 8003464:	4817      	ldr	r0, [pc, #92]	; (80034c4 <MX_TIM3_Init+0xec>)
 8003466:	f003 fe73 	bl	8007150 <HAL_TIM_PWM_ConfigChannel>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 8003470:	f000 f9d8 	bl	8003824 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003474:	1d3b      	adds	r3, r7, #4
 8003476:	2204      	movs	r2, #4
 8003478:	4619      	mov	r1, r3
 800347a:	4812      	ldr	r0, [pc, #72]	; (80034c4 <MX_TIM3_Init+0xec>)
 800347c:	f003 fe68 	bl	8007150 <HAL_TIM_PWM_ConfigChannel>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8003486:	f000 f9cd 	bl	8003824 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800348a:	1d3b      	adds	r3, r7, #4
 800348c:	2208      	movs	r2, #8
 800348e:	4619      	mov	r1, r3
 8003490:	480c      	ldr	r0, [pc, #48]	; (80034c4 <MX_TIM3_Init+0xec>)
 8003492:	f003 fe5d 	bl	8007150 <HAL_TIM_PWM_ConfigChannel>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_TIM3_Init+0xc8>
	{
		Error_Handler();
 800349c:	f000 f9c2 	bl	8003824 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034a0:	1d3b      	adds	r3, r7, #4
 80034a2:	220c      	movs	r2, #12
 80034a4:	4619      	mov	r1, r3
 80034a6:	4807      	ldr	r0, [pc, #28]	; (80034c4 <MX_TIM3_Init+0xec>)
 80034a8:	f003 fe52 	bl	8007150 <HAL_TIM_PWM_ConfigChannel>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <MX_TIM3_Init+0xde>
	{
		Error_Handler();
 80034b2:	f000 f9b7 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80034b6:	4803      	ldr	r0, [pc, #12]	; (80034c4 <MX_TIM3_Init+0xec>)
 80034b8:	f000 fb34 	bl	8003b24 <HAL_TIM_MspPostInit>

}
 80034bc:	bf00      	nop
 80034be:	3728      	adds	r7, #40	; 0x28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000884 	.word	0x20000884
 80034c8:	40000400 	.word	0x40000400

080034cc <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034d2:	463b      	mov	r3, r7
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <MX_TIM6_Init+0x64>)
 80034dc:	4a15      	ldr	r2, [pc, #84]	; (8003534 <MX_TIM6_Init+0x68>)
 80034de:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 80034e0:	4b13      	ldr	r3, [pc, #76]	; (8003530 <MX_TIM6_Init+0x64>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034e6:	4b12      	ldr	r3, [pc, #72]	; (8003530 <MX_TIM6_Init+0x64>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535;
 80034ec:	4b10      	ldr	r3, [pc, #64]	; (8003530 <MX_TIM6_Init+0x64>)
 80034ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034f2:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f4:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <MX_TIM6_Init+0x64>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80034fa:	480d      	ldr	r0, [pc, #52]	; (8003530 <MX_TIM6_Init+0x64>)
 80034fc:	f003 f906 	bl	800670c <HAL_TIM_Base_Init>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 8003506:	f000 f98d 	bl	8003824 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800350e:	2300      	movs	r3, #0
 8003510:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003512:	463b      	mov	r3, r7
 8003514:	4619      	mov	r1, r3
 8003516:	4806      	ldr	r0, [pc, #24]	; (8003530 <MX_TIM6_Init+0x64>)
 8003518:	f004 f970 	bl	80077fc <HAL_TIMEx_MasterConfigSynchronization>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 8003522:	f000 f97f 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	200008cc 	.word	0x200008cc
 8003534:	40001000 	.word	0x40001000

08003538 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 800353e:	1d3b      	adds	r3, r7, #4
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]
 800354c:	615a      	str	r2, [r3, #20]
 800354e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <MX_TIM12_Init+0x80>)
 8003552:	4a1a      	ldr	r2, [pc, #104]	; (80035bc <MX_TIM12_Init+0x84>)
 8003554:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 160-1;
 8003556:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <MX_TIM12_Init+0x80>)
 8003558:	229f      	movs	r2, #159	; 0x9f
 800355a:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800355c:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <MX_TIM12_Init+0x80>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 100-1;
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <MX_TIM12_Init+0x80>)
 8003564:	2263      	movs	r2, #99	; 0x63
 8003566:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003568:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <MX_TIM12_Init+0x80>)
 800356a:	2200      	movs	r2, #0
 800356c:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800356e:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <MX_TIM12_Init+0x80>)
 8003570:	2200      	movs	r2, #0
 8003572:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8003574:	4810      	ldr	r0, [pc, #64]	; (80035b8 <MX_TIM12_Init+0x80>)
 8003576:	f003 f9d8 	bl	800692a <HAL_TIM_PWM_Init>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <MX_TIM12_Init+0x4c>
	{
		Error_Handler();
 8003580:	f000 f950 	bl	8003824 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003584:	2360      	movs	r3, #96	; 0x60
 8003586:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	2200      	movs	r2, #0
 8003598:	4619      	mov	r1, r3
 800359a:	4807      	ldr	r0, [pc, #28]	; (80035b8 <MX_TIM12_Init+0x80>)
 800359c:	f003 fdd8 	bl	8007150 <HAL_TIM_PWM_ConfigChannel>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <MX_TIM12_Init+0x72>
	{
		Error_Handler();
 80035a6:	f000 f93d 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 80035aa:	4803      	ldr	r0, [pc, #12]	; (80035b8 <MX_TIM12_Init+0x80>)
 80035ac:	f000 faba 	bl	8003b24 <HAL_TIM_MspPostInit>

}
 80035b0:	bf00      	nop
 80035b2:	3720      	adds	r7, #32
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20000914 	.word	0x20000914
 80035bc:	40001800 	.word	0x40001800

080035c0 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80035c4:	4b11      	ldr	r3, [pc, #68]	; (800360c <MX_UART5_Init+0x4c>)
 80035c6:	4a12      	ldr	r2, [pc, #72]	; (8003610 <MX_UART5_Init+0x50>)
 80035c8:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <MX_UART5_Init+0x4c>)
 80035cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035d0:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80035d2:	4b0e      	ldr	r3, [pc, #56]	; (800360c <MX_UART5_Init+0x4c>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80035d8:	4b0c      	ldr	r3, [pc, #48]	; (800360c <MX_UART5_Init+0x4c>)
 80035da:	2200      	movs	r2, #0
 80035dc:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 80035de:	4b0b      	ldr	r3, [pc, #44]	; (800360c <MX_UART5_Init+0x4c>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <MX_UART5_Init+0x4c>)
 80035e6:	220c      	movs	r2, #12
 80035e8:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <MX_UART5_Init+0x4c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <MX_UART5_Init+0x4c>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 80035f6:	4805      	ldr	r0, [pc, #20]	; (800360c <MX_UART5_Init+0x4c>)
 80035f8:	f004 f990 	bl	800791c <HAL_UART_Init>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <MX_UART5_Init+0x46>
	{
		Error_Handler();
 8003602:	f000 f90f 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	2000095c 	.word	0x2000095c
 8003610:	40005000 	.word	0x40005000

08003614 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003618:	4b11      	ldr	r3, [pc, #68]	; (8003660 <MX_USART1_UART_Init+0x4c>)
 800361a:	4a12      	ldr	r2, [pc, #72]	; (8003664 <MX_USART1_UART_Init+0x50>)
 800361c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <MX_USART1_UART_Init+0x4c>)
 8003620:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003624:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003626:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <MX_USART1_UART_Init+0x4c>)
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <MX_USART1_UART_Init+0x4c>)
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <MX_USART1_UART_Init+0x4c>)
 8003634:	2200      	movs	r2, #0
 8003636:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <MX_USART1_UART_Init+0x4c>)
 800363a:	220c      	movs	r2, #12
 800363c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <MX_USART1_UART_Init+0x4c>)
 8003640:	2200      	movs	r2, #0
 8003642:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <MX_USART1_UART_Init+0x4c>)
 8003646:	2200      	movs	r2, #0
 8003648:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800364a:	4805      	ldr	r0, [pc, #20]	; (8003660 <MX_USART1_UART_Init+0x4c>)
 800364c:	f004 f966 	bl	800791c <HAL_UART_Init>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8003656:	f000 f8e5 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	200009a0 	.word	0x200009a0
 8003664:	40011000 	.word	0x40011000

08003668 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800366c:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <MX_USART3_UART_Init+0x4c>)
 800366e:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <MX_USART3_UART_Init+0x50>)
 8003670:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <MX_USART3_UART_Init+0x4c>)
 8003674:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003678:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <MX_USART3_UART_Init+0x4c>)
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <MX_USART3_UART_Init+0x4c>)
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <MX_USART3_UART_Init+0x4c>)
 8003688:	2200      	movs	r2, #0
 800368a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <MX_USART3_UART_Init+0x4c>)
 800368e:	220c      	movs	r2, #12
 8003690:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <MX_USART3_UART_Init+0x4c>)
 8003694:	2200      	movs	r2, #0
 8003696:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <MX_USART3_UART_Init+0x4c>)
 800369a:	2200      	movs	r2, #0
 800369c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800369e:	4805      	ldr	r0, [pc, #20]	; (80036b4 <MX_USART3_UART_Init+0x4c>)
 80036a0:	f004 f93c 	bl	800791c <HAL_UART_Init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80036aa:	f000 f8bb 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80036ae:	bf00      	nop
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200009e4 	.word	0x200009e4
 80036b8:	40004800 	.word	0x40004800

080036bc <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <MX_USART6_UART_Init+0x4c>)
 80036c2:	4a12      	ldr	r2, [pc, #72]	; (800370c <MX_USART6_UART_Init+0x50>)
 80036c4:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <MX_USART6_UART_Init+0x4c>)
 80036c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80036cc:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80036ce:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <MX_USART6_UART_Init+0x4c>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <MX_USART6_UART_Init+0x4c>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <MX_USART6_UART_Init+0x4c>)
 80036dc:	2200      	movs	r2, #0
 80036de:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80036e0:	4b09      	ldr	r3, [pc, #36]	; (8003708 <MX_USART6_UART_Init+0x4c>)
 80036e2:	220c      	movs	r2, #12
 80036e4:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036e6:	4b08      	ldr	r3, [pc, #32]	; (8003708 <MX_USART6_UART_Init+0x4c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <MX_USART6_UART_Init+0x4c>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 80036f2:	4805      	ldr	r0, [pc, #20]	; (8003708 <MX_USART6_UART_Init+0x4c>)
 80036f4:	f004 f912 	bl	800791c <HAL_UART_Init>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 80036fe:	f000 f891 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000a28 	.word	0x20000a28
 800370c:	40011400 	.word	0x40011400

08003710 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	; 0x28
 8003714:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003716:	f107 0314 	add.w	r3, r7, #20
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	605a      	str	r2, [r3, #4]
 8003720:	609a      	str	r2, [r3, #8]
 8003722:	60da      	str	r2, [r3, #12]
 8003724:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <MX_GPIO_Init+0xe4>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4a31      	ldr	r2, [pc, #196]	; (80037f4 <MX_GPIO_Init+0xe4>)
 8003730:	f043 0304 	orr.w	r3, r3, #4
 8003734:	6313      	str	r3, [r2, #48]	; 0x30
 8003736:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <MX_GPIO_Init+0xe4>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <MX_GPIO_Init+0xe4>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	4a2a      	ldr	r2, [pc, #168]	; (80037f4 <MX_GPIO_Init+0xe4>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	6313      	str	r3, [r2, #48]	; 0x30
 8003752:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <MX_GPIO_Init+0xe4>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <MX_GPIO_Init+0xe4>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	4a23      	ldr	r2, [pc, #140]	; (80037f4 <MX_GPIO_Init+0xe4>)
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	6313      	str	r3, [r2, #48]	; 0x30
 800376e:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <MX_GPIO_Init+0xe4>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	607b      	str	r3, [r7, #4]
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <MX_GPIO_Init+0xe4>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <MX_GPIO_Init+0xe4>)
 8003784:	f043 0308 	orr.w	r3, r3, #8
 8003788:	6313      	str	r3, [r2, #48]	; 0x30
 800378a:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <MX_GPIO_Init+0xe4>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	607b      	str	r3, [r7, #4]
 8003794:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8003796:	2200      	movs	r2, #0
 8003798:	f242 311c 	movw	r1, #8988	; 0x231c
 800379c:	4816      	ldr	r0, [pc, #88]	; (80037f8 <MX_GPIO_Init+0xe8>)
 800379e:	f001 f8ab 	bl	80048f8 <HAL_GPIO_WritePin>
			|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 80037a2:	2200      	movs	r2, #0
 80037a4:	f44f 7108 	mov.w	r1, #544	; 0x220
 80037a8:	4814      	ldr	r0, [pc, #80]	; (80037fc <MX_GPIO_Init+0xec>)
 80037aa:	f001 f8a5 	bl	80048f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80037ae:	f242 331c 	movw	r3, #8988	; 0x231c
 80037b2:	617b      	str	r3, [r7, #20]
			|GPIO_PIN_8|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037b4:	2301      	movs	r3, #1
 80037b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037bc:	2300      	movs	r3, #0
 80037be:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	4619      	mov	r1, r3
 80037c6:	480c      	ldr	r0, [pc, #48]	; (80037f8 <MX_GPIO_Init+0xe8>)
 80037c8:	f000 ff02 	bl	80045d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 80037cc:	f44f 7308 	mov.w	r3, #544	; 0x220
 80037d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d2:	2301      	movs	r3, #1
 80037d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037da:	2300      	movs	r3, #0
 80037dc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037de:	f107 0314 	add.w	r3, r7, #20
 80037e2:	4619      	mov	r1, r3
 80037e4:	4805      	ldr	r0, [pc, #20]	; (80037fc <MX_GPIO_Init+0xec>)
 80037e6:	f000 fef3 	bl	80045d0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80037ea:	bf00      	nop
 80037ec:	3728      	adds	r7, #40	; 0x28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40020800 	.word	0x40020800
 80037fc:	40020400 	.word	0x40020400

08003800 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d101      	bne.n	8003816 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8003812:	f000 fd25 	bl	8004260 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40001400 	.word	0x40001400

08003824 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003828:	b672      	cpsid	i
}
 800382a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800382c:	e7fe      	b.n	800382c <Error_Handler+0x8>
	...

08003830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <HAL_MspInit+0x4c>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	4a0f      	ldr	r2, [pc, #60]	; (800387c <HAL_MspInit+0x4c>)
 8003840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003844:	6453      	str	r3, [r2, #68]	; 0x44
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_MspInit+0x4c>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384e:	607b      	str	r3, [r7, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_MspInit+0x4c>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	4a08      	ldr	r2, [pc, #32]	; (800387c <HAL_MspInit+0x4c>)
 800385c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003860:	6413      	str	r3, [r2, #64]	; 0x40
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_MspInit+0x4c>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40023800 	.word	0x40023800

08003880 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08e      	sub	sp, #56	; 0x38
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a5b      	ldr	r2, [pc, #364]	; (8003a0c <HAL_I2C_MspInit+0x18c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d12c      	bne.n	80038fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	623b      	str	r3, [r7, #32]
 80038a6:	4b5a      	ldr	r3, [pc, #360]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a59      	ldr	r2, [pc, #356]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 80038ac:	f043 0302 	orr.w	r3, r3, #2
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	623b      	str	r3, [r7, #32]
 80038bc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038be:	23c0      	movs	r3, #192	; 0xc0
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038c2:	2312      	movs	r3, #18
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ca:	2303      	movs	r3, #3
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038ce:	2304      	movs	r3, #4
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038d6:	4619      	mov	r1, r3
 80038d8:	484e      	ldr	r0, [pc, #312]	; (8003a14 <HAL_I2C_MspInit+0x194>)
 80038da:	f000 fe79 	bl	80045d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	4b4b      	ldr	r3, [pc, #300]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	4a4a      	ldr	r2, [pc, #296]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 80038e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038ec:	6413      	str	r3, [r2, #64]	; 0x40
 80038ee:	4b48      	ldr	r3, [pc, #288]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80038fa:	e082      	b.n	8003a02 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a45      	ldr	r2, [pc, #276]	; (8003a18 <HAL_I2C_MspInit+0x198>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d12d      	bne.n	8003962 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	4b41      	ldr	r3, [pc, #260]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4a40      	ldr	r2, [pc, #256]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 8003910:	f043 0302 	orr.w	r3, r3, #2
 8003914:	6313      	str	r3, [r2, #48]	; 0x30
 8003916:	4b3e      	ldr	r3, [pc, #248]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8003922:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003928:	2312      	movs	r3, #18
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003930:	2303      	movs	r3, #3
 8003932:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003934:	2304      	movs	r3, #4
 8003936:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800393c:	4619      	mov	r1, r3
 800393e:	4835      	ldr	r0, [pc, #212]	; (8003a14 <HAL_I2C_MspInit+0x194>)
 8003940:	f000 fe46 	bl	80045d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	4b31      	ldr	r3, [pc, #196]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	4a30      	ldr	r2, [pc, #192]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 800394e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003952:	6413      	str	r3, [r2, #64]	; 0x40
 8003954:	4b2e      	ldr	r3, [pc, #184]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	697b      	ldr	r3, [r7, #20]
}
 8003960:	e04f      	b.n	8003a02 <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2d      	ldr	r2, [pc, #180]	; (8003a1c <HAL_I2C_MspInit+0x19c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d14a      	bne.n	8003a02 <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396c:	2300      	movs	r3, #0
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	4b27      	ldr	r3, [pc, #156]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	4a26      	ldr	r2, [pc, #152]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6313      	str	r3, [r2, #48]	; 0x30
 800397c:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	4a1f      	ldr	r2, [pc, #124]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 8003992:	f043 0302 	orr.w	r3, r3, #2
 8003996:	6313      	str	r3, [r2, #48]	; 0x30
 8003998:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80039a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039aa:	2312      	movs	r3, #18
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b2:	2303      	movs	r3, #3
 80039b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80039b6:	2304      	movs	r3, #4
 80039b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039be:	4619      	mov	r1, r3
 80039c0:	4817      	ldr	r0, [pc, #92]	; (8003a20 <HAL_I2C_MspInit+0x1a0>)
 80039c2:	f000 fe05 	bl	80045d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80039c6:	2310      	movs	r3, #16
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039ca:	2312      	movs	r3, #18
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d2:	2303      	movs	r3, #3
 80039d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80039d6:	2304      	movs	r3, #4
 80039d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039de:	4619      	mov	r1, r3
 80039e0:	480c      	ldr	r0, [pc, #48]	; (8003a14 <HAL_I2C_MspInit+0x194>)
 80039e2:	f000 fdf5 	bl	80045d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 80039f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039f4:	6413      	str	r3, [r2, #64]	; 0x40
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_I2C_MspInit+0x190>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	68bb      	ldr	r3, [r7, #8]
}
 8003a02:	bf00      	nop
 8003a04:	3738      	adds	r7, #56	; 0x38
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40005400 	.word	0x40005400
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40020400 	.word	0x40020400
 8003a18:	40005800 	.word	0x40005800
 8003a1c:	40005c00 	.word	0x40005c00
 8003a20:	40020000 	.word	0x40020000

08003a24 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a34:	d115      	bne.n	8003a62 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <HAL_TIM_OC_MspInit+0x48>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	4a0b      	ldr	r2, [pc, #44]	; (8003a6c <HAL_TIM_OC_MspInit+0x48>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6413      	str	r3, [r2, #64]	; 0x40
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_TIM_OC_MspInit+0x48>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a52:	2200      	movs	r2, #0
 8003a54:	2100      	movs	r1, #0
 8003a56:	201c      	movs	r0, #28
 8003a58:	f000 fcfe 	bl	8004458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a5c:	201c      	movs	r0, #28
 8003a5e:	f000 fd17 	bl	8004490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800

08003a70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <HAL_TIM_PWM_MspInit+0x64>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10e      	bne.n	8003aa0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <HAL_TIM_PWM_MspInit+0x68>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <HAL_TIM_PWM_MspInit+0x68>)
 8003a8c:	f043 0302 	orr.w	r3, r3, #2
 8003a90:	6413      	str	r3, [r2, #64]	; 0x40
 8003a92:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <HAL_TIM_PWM_MspInit+0x68>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003a9e:	e012      	b.n	8003ac6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <HAL_TIM_PWM_MspInit+0x6c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d10d      	bne.n	8003ac6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <HAL_TIM_PWM_MspInit+0x68>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <HAL_TIM_PWM_MspInit+0x68>)
 8003ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <HAL_TIM_PWM_MspInit+0x68>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
}
 8003ac6:	bf00      	nop
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40001800 	.word	0x40001800

08003ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <HAL_TIM_Base_MspInit+0x3c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d10d      	bne.n	8003b0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <HAL_TIM_Base_MspInit+0x40>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <HAL_TIM_Base_MspInit+0x40>)
 8003afc:	f043 0310 	orr.w	r3, r3, #16
 8003b00:	6413      	str	r3, [r2, #64]	; 0x40
 8003b02:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <HAL_TIM_Base_MspInit+0x40>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40001000 	.word	0x40001000
 8003b20:	40023800 	.word	0x40023800

08003b24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	; 0x30
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2c:	f107 031c 	add.w	r3, r7, #28
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b44:	d11e      	bne.n	8003b84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	4b43      	ldr	r3, [pc, #268]	; (8003c58 <HAL_TIM_MspPostInit+0x134>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a42      	ldr	r2, [pc, #264]	; (8003c58 <HAL_TIM_MspPostInit+0x134>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b40      	ldr	r3, [pc, #256]	; (8003c58 <HAL_TIM_MspPostInit+0x134>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b62:	2303      	movs	r3, #3
 8003b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b66:	2302      	movs	r3, #2
 8003b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b72:	2301      	movs	r3, #1
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b76:	f107 031c 	add.w	r3, r7, #28
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4837      	ldr	r0, [pc, #220]	; (8003c5c <HAL_TIM_MspPostInit+0x138>)
 8003b7e:	f000 fd27 	bl	80045d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003b82:	e065      	b.n	8003c50 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a35      	ldr	r2, [pc, #212]	; (8003c60 <HAL_TIM_MspPostInit+0x13c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d13c      	bne.n	8003c08 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <HAL_TIM_MspPostInit+0x134>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	4a30      	ldr	r2, [pc, #192]	; (8003c58 <HAL_TIM_MspPostInit+0x134>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9e:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <HAL_TIM_MspPostInit+0x134>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <HAL_TIM_MspPostInit+0x134>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	4a29      	ldr	r2, [pc, #164]	; (8003c58 <HAL_TIM_MspPostInit+0x134>)
 8003bb4:	f043 0302 	orr.w	r3, r3, #2
 8003bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bba:	4b27      	ldr	r3, [pc, #156]	; (8003c58 <HAL_TIM_MspPostInit+0x134>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bc6:	23c0      	movs	r3, #192	; 0xc0
 8003bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bda:	f107 031c 	add.w	r3, r7, #28
 8003bde:	4619      	mov	r1, r3
 8003be0:	481e      	ldr	r0, [pc, #120]	; (8003c5c <HAL_TIM_MspPostInit+0x138>)
 8003be2:	f000 fcf5 	bl	80045d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003be6:	2303      	movs	r3, #3
 8003be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bea:	2302      	movs	r3, #2
 8003bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfa:	f107 031c 	add.w	r3, r7, #28
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4818      	ldr	r0, [pc, #96]	; (8003c64 <HAL_TIM_MspPostInit+0x140>)
 8003c02:	f000 fce5 	bl	80045d0 <HAL_GPIO_Init>
}
 8003c06:	e023      	b.n	8003c50 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM12)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a16      	ldr	r2, [pc, #88]	; (8003c68 <HAL_TIM_MspPostInit+0x144>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d11e      	bne.n	8003c50 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <HAL_TIM_MspPostInit+0x134>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	4a0f      	ldr	r2, [pc, #60]	; (8003c58 <HAL_TIM_MspPostInit+0x134>)
 8003c1c:	f043 0302 	orr.w	r3, r3, #2
 8003c20:	6313      	str	r3, [r2, #48]	; 0x30
 8003c22:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <HAL_TIM_MspPostInit+0x134>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c34:	2302      	movs	r3, #2
 8003c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003c40:	2309      	movs	r3, #9
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c44:	f107 031c 	add.w	r3, r7, #28
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4806      	ldr	r0, [pc, #24]	; (8003c64 <HAL_TIM_MspPostInit+0x140>)
 8003c4c:	f000 fcc0 	bl	80045d0 <HAL_GPIO_Init>
}
 8003c50:	bf00      	nop
 8003c52:	3730      	adds	r7, #48	; 0x30
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40020000 	.word	0x40020000
 8003c60:	40000400 	.word	0x40000400
 8003c64:	40020400 	.word	0x40020400
 8003c68:	40001800 	.word	0x40001800

08003c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b090      	sub	sp, #64	; 0x40
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	605a      	str	r2, [r3, #4]
 8003c7e:	609a      	str	r2, [r3, #8]
 8003c80:	60da      	str	r2, [r3, #12]
 8003c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a80      	ldr	r2, [pc, #512]	; (8003e8c <HAL_UART_MspInit+0x220>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d153      	bne.n	8003d36 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c92:	4b7f      	ldr	r3, [pc, #508]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	4a7e      	ldr	r2, [pc, #504]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003c98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9e:	4b7c      	ldr	r3, [pc, #496]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	4b78      	ldr	r3, [pc, #480]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	4a77      	ldr	r2, [pc, #476]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003cb4:	f043 0304 	orr.w	r3, r3, #4
 8003cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cba:	4b75      	ldr	r3, [pc, #468]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	4b71      	ldr	r3, [pc, #452]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	4a70      	ldr	r2, [pc, #448]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003cd0:	f043 0308 	orr.w	r3, r3, #8
 8003cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd6:	4b6e      	ldr	r3, [pc, #440]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	623b      	str	r3, [r7, #32]
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003cf4:	2308      	movs	r3, #8
 8003cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4865      	ldr	r0, [pc, #404]	; (8003e94 <HAL_UART_MspInit+0x228>)
 8003d00:	f000 fc66 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d04:	2304      	movs	r3, #4
 8003d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d10:	2303      	movs	r3, #3
 8003d12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d14:	2308      	movs	r3, #8
 8003d16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	485e      	ldr	r0, [pc, #376]	; (8003e98 <HAL_UART_MspInit+0x22c>)
 8003d20:	f000 fc56 	bl	80045d0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003d24:	2200      	movs	r2, #0
 8003d26:	2100      	movs	r1, #0
 8003d28:	2035      	movs	r0, #53	; 0x35
 8003d2a:	f000 fb95 	bl	8004458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003d2e:	2035      	movs	r0, #53	; 0x35
 8003d30:	f000 fbae 	bl	8004490 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003d34:	e0a6      	b.n	8003e84 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a58      	ldr	r2, [pc, #352]	; (8003e9c <HAL_UART_MspInit+0x230>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d135      	bne.n	8003dac <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d40:	2300      	movs	r3, #0
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	4b52      	ldr	r3, [pc, #328]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d48:	4a51      	ldr	r2, [pc, #324]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003d4a:	f043 0310 	orr.w	r3, r3, #16
 8003d4e:	6453      	str	r3, [r2, #68]	; 0x44
 8003d50:	4b4f      	ldr	r3, [pc, #316]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	4b4b      	ldr	r3, [pc, #300]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	4a4a      	ldr	r2, [pc, #296]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6c:	4b48      	ldr	r3, [pc, #288]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d86:	2303      	movs	r3, #3
 8003d88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d8a:	2307      	movs	r3, #7
 8003d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d92:	4619      	mov	r1, r3
 8003d94:	4842      	ldr	r0, [pc, #264]	; (8003ea0 <HAL_UART_MspInit+0x234>)
 8003d96:	f000 fc1b 	bl	80045d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2106      	movs	r1, #6
 8003d9e:	2025      	movs	r0, #37	; 0x25
 8003da0:	f000 fb5a 	bl	8004458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003da4:	2025      	movs	r0, #37	; 0x25
 8003da6:	f000 fb73 	bl	8004490 <HAL_NVIC_EnableIRQ>
}
 8003daa:	e06b      	b.n	8003e84 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART3)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a3c      	ldr	r2, [pc, #240]	; (8003ea4 <HAL_UART_MspInit+0x238>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d135      	bne.n	8003e22 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	4b35      	ldr	r3, [pc, #212]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	4a34      	ldr	r2, [pc, #208]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc6:	4b32      	ldr	r3, [pc, #200]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003ddc:	f043 0304 	orr.w	r3, r3, #4
 8003de0:	6313      	str	r3, [r2, #48]	; 0x30
 8003de2:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8003dee:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df4:	2302      	movs	r3, #2
 8003df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e00:	2307      	movs	r3, #7
 8003e02:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4822      	ldr	r0, [pc, #136]	; (8003e94 <HAL_UART_MspInit+0x228>)
 8003e0c:	f000 fbe0 	bl	80045d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8003e10:	2200      	movs	r2, #0
 8003e12:	2101      	movs	r1, #1
 8003e14:	2027      	movs	r0, #39	; 0x27
 8003e16:	f000 fb1f 	bl	8004458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003e1a:	2027      	movs	r0, #39	; 0x27
 8003e1c:	f000 fb38 	bl	8004490 <HAL_NVIC_EnableIRQ>
}
 8003e20:	e030      	b.n	8003e84 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART6)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a20      	ldr	r2, [pc, #128]	; (8003ea8 <HAL_UART_MspInit+0x23c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d12b      	bne.n	8003e84 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e34:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003e36:	f043 0320 	orr.w	r3, r3, #32
 8003e3a:	6453      	str	r3, [r2, #68]	; 0x44
 8003e3c:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	4a0f      	ldr	r2, [pc, #60]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003e52:	f043 0304 	orr.w	r3, r3, #4
 8003e56:	6313      	str	r3, [r2, #48]	; 0x30
 8003e58:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <HAL_UART_MspInit+0x224>)
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e64:	23c0      	movs	r3, #192	; 0xc0
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e70:	2303      	movs	r3, #3
 8003e72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003e74:	2308      	movs	r3, #8
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4805      	ldr	r0, [pc, #20]	; (8003e94 <HAL_UART_MspInit+0x228>)
 8003e80:	f000 fba6 	bl	80045d0 <HAL_GPIO_Init>
}
 8003e84:	bf00      	nop
 8003e86:	3740      	adds	r7, #64	; 0x40
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40005000 	.word	0x40005000
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40020800 	.word	0x40020800
 8003e98:	40020c00 	.word	0x40020c00
 8003e9c:	40011000 	.word	0x40011000
 8003ea0:	40020000 	.word	0x40020000
 8003ea4:	40004800 	.word	0x40004800
 8003ea8:	40011400 	.word	0x40011400

08003eac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08e      	sub	sp, #56	; 0x38
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <HAL_InitTick+0xe4>)
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	4a32      	ldr	r2, [pc, #200]	; (8003f90 <HAL_InitTick+0xe4>)
 8003ec6:	f043 0320 	orr.w	r3, r3, #32
 8003eca:	6413      	str	r3, [r2, #64]	; 0x40
 8003ecc:	4b30      	ldr	r3, [pc, #192]	; (8003f90 <HAL_InitTick+0xe4>)
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ed8:	f107 0210 	add.w	r2, r7, #16
 8003edc:	f107 0314 	add.w	r3, r7, #20
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f001 ff98 	bl	8005e18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d103      	bne.n	8003efa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003ef2:	f001 ff69 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 8003ef6:	6378      	str	r0, [r7, #52]	; 0x34
 8003ef8:	e004      	b.n	8003f04 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003efa:	f001 ff65 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 8003efe:	4603      	mov	r3, r0
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f06:	4a23      	ldr	r2, [pc, #140]	; (8003f94 <HAL_InitTick+0xe8>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	0c9b      	lsrs	r3, r3, #18
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003f12:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <HAL_InitTick+0xec>)
 8003f14:	4a21      	ldr	r2, [pc, #132]	; (8003f9c <HAL_InitTick+0xf0>)
 8003f16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8003f18:	4b1f      	ldr	r3, [pc, #124]	; (8003f98 <HAL_InitTick+0xec>)
 8003f1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f1e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003f20:	4a1d      	ldr	r2, [pc, #116]	; (8003f98 <HAL_InitTick+0xec>)
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003f26:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <HAL_InitTick+0xec>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <HAL_InitTick+0xec>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f32:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <HAL_InitTick+0xec>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8003f38:	4817      	ldr	r0, [pc, #92]	; (8003f98 <HAL_InitTick+0xec>)
 8003f3a:	f002 fbe7 	bl	800670c <HAL_TIM_Base_Init>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003f44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d11b      	bne.n	8003f84 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8003f4c:	4812      	ldr	r0, [pc, #72]	; (8003f98 <HAL_InitTick+0xec>)
 8003f4e:	f002 fc2d 	bl	80067ac <HAL_TIM_Base_Start_IT>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003f58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d111      	bne.n	8003f84 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003f60:	2037      	movs	r0, #55	; 0x37
 8003f62:	f000 fa95 	bl	8004490 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b0f      	cmp	r3, #15
 8003f6a:	d808      	bhi.n	8003f7e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	2037      	movs	r0, #55	; 0x37
 8003f72:	f000 fa71 	bl	8004458 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <HAL_InitTick+0xf4>)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	e002      	b.n	8003f84 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003f84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3738      	adds	r7, #56	; 0x38
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40023800 	.word	0x40023800
 8003f94:	431bde83 	.word	0x431bde83
 8003f98:	20000aa4 	.word	0x20000aa4
 8003f9c:	40001400 	.word	0x40001400
 8003fa0:	2000000c 	.word	0x2000000c

08003fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fa8:	e7fe      	b.n	8003fa8 <NMI_Handler+0x4>

08003faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003faa:	b480      	push	{r7}
 8003fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fae:	e7fe      	b.n	8003fae <HardFault_Handler+0x4>

08003fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fb4:	e7fe      	b.n	8003fb4 <MemManage_Handler+0x4>

08003fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fba:	e7fe      	b.n	8003fba <BusFault_Handler+0x4>

08003fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fc0:	e7fe      	b.n	8003fc0 <UsageFault_Handler+0x4>
	...

08003fc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 8003fca:	4b22      	ldr	r3, [pc, #136]	; (8004054 <TIM2_IRQHandler+0x90>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d131      	bne.n	800403c <TIM2_IRQHandler+0x78>
		// Timer overflow interrupt
		Global_Speed = round(Calculate_Car_Speed());
 8003fd8:	f7fe ff4e 	bl	8002e78 <Calculate_Car_Speed>
 8003fdc:	ee10 3a10 	vmov	r3, s0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fc fb21 	bl	8000628 <__aeabi_f2d>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	ec43 2b10 	vmov	d0, r2, r3
 8003fee:	f00c fb5d 	bl	80106ac <round>
 8003ff2:	ec53 2b10 	vmov	r2, r3, d0
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f7fc fe45 	bl	8000c88 <__aeabi_d2uiz>
 8003ffe:	4603      	mov	r3, r0
 8004000:	b29a      	uxth	r2, r3
 8004002:	4b15      	ldr	r3, [pc, #84]	; (8004058 <TIM2_IRQHandler+0x94>)
 8004004:	801a      	strh	r2, [r3, #0]

        if(Global_GPS_Speed_Completetion==Nothing_Completed)
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <TIM2_IRQHandler+0x98>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <TIM2_IRQHandler+0x52>
        {
        	Global_GPS_Speed_Completetion=Half_Completed_Speed;
 800400e:	4b13      	ldr	r3, [pc, #76]	; (800405c <TIM2_IRQHandler+0x98>)
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e017      	b.n	8004046 <TIM2_IRQHandler+0x82>

        }
        else if(Global_GPS_Speed_Completetion==Half_Completed_GPS)
 8004016:	4b11      	ldr	r3, [pc, #68]	; (800405c <TIM2_IRQHandler+0x98>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d113      	bne.n	8004046 <TIM2_IRQHandler+0x82>
        {
        	Global_GPS_Speed_Completetion=Nothing_Completed;
 800401e:	4b0f      	ldr	r3, [pc, #60]	; (800405c <TIM2_IRQHandler+0x98>)
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]

        	/*Notify the ESPPeriodicTask*/
        	xTaskNotifyFromISR(Handle_ESP_Periodic,0,eNoAction,NULL);
 8004024:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <TIM2_IRQHandler+0x9c>)
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	2300      	movs	r3, #0
 800402a:	9301      	str	r3, [sp, #4]
 800402c:	2300      	movs	r3, #0
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	2200      	movs	r2, #0
 8004034:	2100      	movs	r1, #0
 8004036:	f006 fced 	bl	800aa14 <xTaskGenericNotifyFromISR>
 800403a:	e004      	b.n	8004046 <TIM2_IRQHandler+0x82>
        }

	}else {
		edges_counter++;
 800403c:	4b09      	ldr	r3, [pc, #36]	; (8004064 <TIM2_IRQHandler+0xa0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	4a08      	ldr	r2, [pc, #32]	; (8004064 <TIM2_IRQHandler+0xa0>)
 8004044:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004046:	4803      	ldr	r0, [pc, #12]	; (8004054 <TIM2_IRQHandler+0x90>)
 8004048:	f002 ff1e 	bl	8006e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800404c:	bf00      	nop
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	2000083c 	.word	0x2000083c
 8004058:	20000324 	.word	0x20000324
 800405c:	20000300 	.word	0x20000300
 8004060:	20000a7c 	.word	0x20000a7c
 8004064:	20000214 	.word	0x20000214

08004068 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 800406c:	4803      	ldr	r0, [pc, #12]	; (800407c <USART1_IRQHandler+0x14>)
 800406e:	f7fe fea5 	bl	8002dbc <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004072:	4802      	ldr	r0, [pc, #8]	; (800407c <USART1_IRQHandler+0x14>)
 8004074:	f003 fd62 	bl	8007b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004078:	bf00      	nop
 800407a:	bd80      	pop	{r7, pc}
 800407c:	200009a0 	.word	0x200009a0

08004080 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004084:	4802      	ldr	r0, [pc, #8]	; (8004090 <USART3_IRQHandler+0x10>)
 8004086:	f003 fd59 	bl	8007b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	200009e4 	.word	0x200009e4

08004094 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004098:	4802      	ldr	r0, [pc, #8]	; (80040a4 <UART5_IRQHandler+0x10>)
 800409a:	f003 fd4f 	bl	8007b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800409e:	bf00      	nop
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	2000095c 	.word	0x2000095c

080040a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80040ac:	4802      	ldr	r0, [pc, #8]	; (80040b8 <TIM7_IRQHandler+0x10>)
 80040ae:	f002 feeb 	bl	8006e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000aa4 	.word	0x20000aa4

080040bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return 1;
 80040c0:	2301      	movs	r3, #1
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <_kill>:

int _kill(int pid, int sig)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80040d6:	f00a f8e9 	bl	800e2ac <__errno>
 80040da:	4603      	mov	r3, r0
 80040dc:	2216      	movs	r2, #22
 80040de:	601a      	str	r2, [r3, #0]
  return -1;
 80040e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <_exit>:

void _exit (int status)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040f4:	f04f 31ff 	mov.w	r1, #4294967295
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff ffe7 	bl	80040cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80040fe:	e7fe      	b.n	80040fe <_exit+0x12>

08004100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e00a      	b.n	8004128 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004112:	f3af 8000 	nop.w
 8004116:	4601      	mov	r1, r0
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	60ba      	str	r2, [r7, #8]
 800411e:	b2ca      	uxtb	r2, r1
 8004120:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	3301      	adds	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	dbf0      	blt.n	8004112 <_read+0x12>
  }

  return len;
 8004130:	687b      	ldr	r3, [r7, #4]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <_close>:
  }
  return len;
}

int _close(int file)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004142:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004162:	605a      	str	r2, [r3, #4]
  return 0;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <_isatty>:

int _isatty(int file)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800417a:	2301      	movs	r3, #1
}
 800417c:	4618      	mov	r0, r3
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <SystemInit+0x20>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <SystemInit+0x20>)
 80041b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	e000ed00 	.word	0xe000ed00

080041c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80041c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041cc:	480d      	ldr	r0, [pc, #52]	; (8004204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041ce:	490e      	ldr	r1, [pc, #56]	; (8004208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041d0:	4a0e      	ldr	r2, [pc, #56]	; (800420c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041d4:	e002      	b.n	80041dc <LoopCopyDataInit>

080041d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041da:	3304      	adds	r3, #4

080041dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041e0:	d3f9      	bcc.n	80041d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041e2:	4a0b      	ldr	r2, [pc, #44]	; (8004210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041e4:	4c0b      	ldr	r4, [pc, #44]	; (8004214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041e8:	e001      	b.n	80041ee <LoopFillZerobss>

080041ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041ec:	3204      	adds	r2, #4

080041ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041f0:	d3fb      	bcc.n	80041ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041f2:	f7ff ffd7 	bl	80041a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041f6:	f00a f85f 	bl	800e2b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041fa:	f7fe fe67 	bl	8002ecc <main>
  bx  lr    
 80041fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004208:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800420c:	080118f8 	.word	0x080118f8
  ldr r2, =_sbss
 8004210:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004214:	2001a454 	.word	0x2001a454

08004218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004218:	e7fe      	b.n	8004218 <ADC_IRQHandler>
	...

0800421c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004220:	4b0e      	ldr	r3, [pc, #56]	; (800425c <HAL_Init+0x40>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0d      	ldr	r2, [pc, #52]	; (800425c <HAL_Init+0x40>)
 8004226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_Init+0x40>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a0a      	ldr	r2, [pc, #40]	; (800425c <HAL_Init+0x40>)
 8004232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <HAL_Init+0x40>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a07      	ldr	r2, [pc, #28]	; (800425c <HAL_Init+0x40>)
 800423e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004244:	2003      	movs	r0, #3
 8004246:	f000 f8fc 	bl	8004442 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800424a:	200f      	movs	r0, #15
 800424c:	f7ff fe2e 	bl	8003eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004250:	f7ff faee 	bl	8003830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40023c00 	.word	0x40023c00

08004260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <HAL_IncTick+0x20>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_IncTick+0x24>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4413      	add	r3, r2
 8004270:	4a04      	ldr	r2, [pc, #16]	; (8004284 <HAL_IncTick+0x24>)
 8004272:	6013      	str	r3, [r2, #0]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000010 	.word	0x20000010
 8004284:	20000aec 	.word	0x20000aec

08004288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return uwTick;
 800428c:	4b03      	ldr	r3, [pc, #12]	; (800429c <HAL_GetTick+0x14>)
 800428e:	681b      	ldr	r3, [r3, #0]
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	20000aec 	.word	0x20000aec

080042a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042a8:	f7ff ffee 	bl	8004288 <HAL_GetTick>
 80042ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b8:	d005      	beq.n	80042c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <HAL_Delay+0x44>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042c6:	bf00      	nop
 80042c8:	f7ff ffde 	bl	8004288 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d8f7      	bhi.n	80042c8 <HAL_Delay+0x28>
  {
  }
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000010 	.word	0x20000010

080042e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <__NVIC_SetPriorityGrouping+0x44>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004304:	4013      	ands	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800431a:	4a04      	ldr	r2, [pc, #16]	; (800432c <__NVIC_SetPriorityGrouping+0x44>)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	60d3      	str	r3, [r2, #12]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <__NVIC_GetPriorityGrouping+0x18>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	f003 0307 	and.w	r3, r3, #7
}
 800433e:	4618      	mov	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	2b00      	cmp	r3, #0
 800435c:	db0b      	blt.n	8004376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	4907      	ldr	r1, [pc, #28]	; (8004384 <__NVIC_EnableIRQ+0x38>)
 8004366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2001      	movs	r0, #1
 800436e:	fa00 f202 	lsl.w	r2, r0, r2
 8004372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	e000e100 	.word	0xe000e100

08004388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004398:	2b00      	cmp	r3, #0
 800439a:	db0a      	blt.n	80043b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	490c      	ldr	r1, [pc, #48]	; (80043d4 <__NVIC_SetPriority+0x4c>)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	0112      	lsls	r2, r2, #4
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	440b      	add	r3, r1
 80043ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043b0:	e00a      	b.n	80043c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	4908      	ldr	r1, [pc, #32]	; (80043d8 <__NVIC_SetPriority+0x50>)
 80043b8:	79fb      	ldrb	r3, [r7, #7]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	3b04      	subs	r3, #4
 80043c0:	0112      	lsls	r2, r2, #4
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	440b      	add	r3, r1
 80043c6:	761a      	strb	r2, [r3, #24]
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	e000e100 	.word	0xe000e100
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043dc:	b480      	push	{r7}
 80043de:	b089      	sub	sp, #36	; 0x24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f1c3 0307 	rsb	r3, r3, #7
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	bf28      	it	cs
 80043fa:	2304      	movcs	r3, #4
 80043fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3304      	adds	r3, #4
 8004402:	2b06      	cmp	r3, #6
 8004404:	d902      	bls.n	800440c <NVIC_EncodePriority+0x30>
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3b03      	subs	r3, #3
 800440a:	e000      	b.n	800440e <NVIC_EncodePriority+0x32>
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004410:	f04f 32ff 	mov.w	r2, #4294967295
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43da      	mvns	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	401a      	ands	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004424:	f04f 31ff 	mov.w	r1, #4294967295
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	fa01 f303 	lsl.w	r3, r1, r3
 800442e:	43d9      	mvns	r1, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004434:	4313      	orrs	r3, r2
         );
}
 8004436:	4618      	mov	r0, r3
 8004438:	3724      	adds	r7, #36	; 0x24
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff ff4c 	bl	80042e8 <__NVIC_SetPriorityGrouping>
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800446a:	f7ff ff61 	bl	8004330 <__NVIC_GetPriorityGrouping>
 800446e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	68b9      	ldr	r1, [r7, #8]
 8004474:	6978      	ldr	r0, [r7, #20]
 8004476:	f7ff ffb1 	bl	80043dc <NVIC_EncodePriority>
 800447a:	4602      	mov	r2, r0
 800447c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff ff80 	bl	8004388 <__NVIC_SetPriority>
}
 8004488:	bf00      	nop
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800449a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff ff54 	bl	800434c <__NVIC_EnableIRQ>
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80044ba:	f7ff fee5 	bl	8004288 <HAL_GetTick>
 80044be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d008      	beq.n	80044de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2280      	movs	r2, #128	; 0x80
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e052      	b.n	8004584 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0216 	bic.w	r2, r2, #22
 80044ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <HAL_DMA_Abort+0x62>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0208 	bic.w	r2, r2, #8
 800451c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0201 	bic.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800452e:	e013      	b.n	8004558 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004530:	f7ff feaa 	bl	8004288 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b05      	cmp	r3, #5
 800453c:	d90c      	bls.n	8004558 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2203      	movs	r2, #3
 8004548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e015      	b.n	8004584 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e4      	bne.n	8004530 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456a:	223f      	movs	r2, #63	; 0x3f
 800456c:	409a      	lsls	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d004      	beq.n	80045aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2280      	movs	r2, #128	; 0x80
 80045a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e00c      	b.n	80045c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2205      	movs	r2, #5
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	; 0x24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	e165      	b.n	80048b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045ec:	2201      	movs	r2, #1
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4013      	ands	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	429a      	cmp	r2, r3
 8004606:	f040 8154 	bne.w	80048b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d005      	beq.n	8004622 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800461e:	2b02      	cmp	r3, #2
 8004620:	d130      	bne.n	8004684 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	2203      	movs	r2, #3
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4313      	orrs	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004658:	2201      	movs	r2, #1
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4013      	ands	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 0201 	and.w	r2, r3, #1
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	2b03      	cmp	r3, #3
 800468e:	d017      	beq.n	80046c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	2203      	movs	r2, #3
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4013      	ands	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d123      	bne.n	8004714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	08da      	lsrs	r2, r3, #3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3208      	adds	r2, #8
 80046d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	220f      	movs	r2, #15
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4013      	ands	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4313      	orrs	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	08da      	lsrs	r2, r3, #3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3208      	adds	r2, #8
 800470e:	69b9      	ldr	r1, [r7, #24]
 8004710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	2203      	movs	r2, #3
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 0203 	and.w	r2, r3, #3
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80ae 	beq.w	80048b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	4b5d      	ldr	r3, [pc, #372]	; (80048d0 <HAL_GPIO_Init+0x300>)
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	4a5c      	ldr	r2, [pc, #368]	; (80048d0 <HAL_GPIO_Init+0x300>)
 8004760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004764:	6453      	str	r3, [r2, #68]	; 0x44
 8004766:	4b5a      	ldr	r3, [pc, #360]	; (80048d0 <HAL_GPIO_Init+0x300>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004772:	4a58      	ldr	r2, [pc, #352]	; (80048d4 <HAL_GPIO_Init+0x304>)
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	089b      	lsrs	r3, r3, #2
 8004778:	3302      	adds	r3, #2
 800477a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	220f      	movs	r2, #15
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a4f      	ldr	r2, [pc, #316]	; (80048d8 <HAL_GPIO_Init+0x308>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d025      	beq.n	80047ea <HAL_GPIO_Init+0x21a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a4e      	ldr	r2, [pc, #312]	; (80048dc <HAL_GPIO_Init+0x30c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01f      	beq.n	80047e6 <HAL_GPIO_Init+0x216>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a4d      	ldr	r2, [pc, #308]	; (80048e0 <HAL_GPIO_Init+0x310>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d019      	beq.n	80047e2 <HAL_GPIO_Init+0x212>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a4c      	ldr	r2, [pc, #304]	; (80048e4 <HAL_GPIO_Init+0x314>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_GPIO_Init+0x20e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a4b      	ldr	r2, [pc, #300]	; (80048e8 <HAL_GPIO_Init+0x318>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00d      	beq.n	80047da <HAL_GPIO_Init+0x20a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a4a      	ldr	r2, [pc, #296]	; (80048ec <HAL_GPIO_Init+0x31c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <HAL_GPIO_Init+0x206>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a49      	ldr	r2, [pc, #292]	; (80048f0 <HAL_GPIO_Init+0x320>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d101      	bne.n	80047d2 <HAL_GPIO_Init+0x202>
 80047ce:	2306      	movs	r3, #6
 80047d0:	e00c      	b.n	80047ec <HAL_GPIO_Init+0x21c>
 80047d2:	2307      	movs	r3, #7
 80047d4:	e00a      	b.n	80047ec <HAL_GPIO_Init+0x21c>
 80047d6:	2305      	movs	r3, #5
 80047d8:	e008      	b.n	80047ec <HAL_GPIO_Init+0x21c>
 80047da:	2304      	movs	r3, #4
 80047dc:	e006      	b.n	80047ec <HAL_GPIO_Init+0x21c>
 80047de:	2303      	movs	r3, #3
 80047e0:	e004      	b.n	80047ec <HAL_GPIO_Init+0x21c>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e002      	b.n	80047ec <HAL_GPIO_Init+0x21c>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <HAL_GPIO_Init+0x21c>
 80047ea:	2300      	movs	r3, #0
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	f002 0203 	and.w	r2, r2, #3
 80047f2:	0092      	lsls	r2, r2, #2
 80047f4:	4093      	lsls	r3, r2
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047fc:	4935      	ldr	r1, [pc, #212]	; (80048d4 <HAL_GPIO_Init+0x304>)
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	089b      	lsrs	r3, r3, #2
 8004802:	3302      	adds	r3, #2
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800480a:	4b3a      	ldr	r3, [pc, #232]	; (80048f4 <HAL_GPIO_Init+0x324>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800482e:	4a31      	ldr	r2, [pc, #196]	; (80048f4 <HAL_GPIO_Init+0x324>)
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004834:	4b2f      	ldr	r3, [pc, #188]	; (80048f4 <HAL_GPIO_Init+0x324>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	43db      	mvns	r3, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4013      	ands	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004858:	4a26      	ldr	r2, [pc, #152]	; (80048f4 <HAL_GPIO_Init+0x324>)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800485e:	4b25      	ldr	r3, [pc, #148]	; (80048f4 <HAL_GPIO_Init+0x324>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004882:	4a1c      	ldr	r2, [pc, #112]	; (80048f4 <HAL_GPIO_Init+0x324>)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004888:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <HAL_GPIO_Init+0x324>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	43db      	mvns	r3, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4013      	ands	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048ac:	4a11      	ldr	r2, [pc, #68]	; (80048f4 <HAL_GPIO_Init+0x324>)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	3301      	adds	r3, #1
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	2b0f      	cmp	r3, #15
 80048bc:	f67f ae96 	bls.w	80045ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	3724      	adds	r7, #36	; 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40013800 	.word	0x40013800
 80048d8:	40020000 	.word	0x40020000
 80048dc:	40020400 	.word	0x40020400
 80048e0:	40020800 	.word	0x40020800
 80048e4:	40020c00 	.word	0x40020c00
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40021400 	.word	0x40021400
 80048f0:	40021800 	.word	0x40021800
 80048f4:	40013c00 	.word	0x40013c00

080048f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	807b      	strh	r3, [r7, #2]
 8004904:	4613      	mov	r3, r2
 8004906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004908:	787b      	ldrb	r3, [r7, #1]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800490e:	887a      	ldrh	r2, [r7, #2]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004914:	e003      	b.n	800491e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004916:	887b      	ldrh	r3, [r7, #2]
 8004918:	041a      	lsls	r2, r3, #16
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	619a      	str	r2, [r3, #24]
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e12b      	b.n	8004b96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fe ff94 	bl	8003880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2224      	movs	r2, #36	; 0x24
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800497e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800498e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004990:	f001 fa1a 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 8004994:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4a81      	ldr	r2, [pc, #516]	; (8004ba0 <HAL_I2C_Init+0x274>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d807      	bhi.n	80049b0 <HAL_I2C_Init+0x84>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4a80      	ldr	r2, [pc, #512]	; (8004ba4 <HAL_I2C_Init+0x278>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	bf94      	ite	ls
 80049a8:	2301      	movls	r3, #1
 80049aa:	2300      	movhi	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	e006      	b.n	80049be <HAL_I2C_Init+0x92>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4a7d      	ldr	r2, [pc, #500]	; (8004ba8 <HAL_I2C_Init+0x27c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	bf94      	ite	ls
 80049b8:	2301      	movls	r3, #1
 80049ba:	2300      	movhi	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e0e7      	b.n	8004b96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4a78      	ldr	r2, [pc, #480]	; (8004bac <HAL_I2C_Init+0x280>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	0c9b      	lsrs	r3, r3, #18
 80049d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4a6a      	ldr	r2, [pc, #424]	; (8004ba0 <HAL_I2C_Init+0x274>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d802      	bhi.n	8004a00 <HAL_I2C_Init+0xd4>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	3301      	adds	r3, #1
 80049fe:	e009      	b.n	8004a14 <HAL_I2C_Init+0xe8>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a06:	fb02 f303 	mul.w	r3, r2, r3
 8004a0a:	4a69      	ldr	r2, [pc, #420]	; (8004bb0 <HAL_I2C_Init+0x284>)
 8004a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a10:	099b      	lsrs	r3, r3, #6
 8004a12:	3301      	adds	r3, #1
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	495c      	ldr	r1, [pc, #368]	; (8004ba0 <HAL_I2C_Init+0x274>)
 8004a30:	428b      	cmp	r3, r1
 8004a32:	d819      	bhi.n	8004a68 <HAL_I2C_Init+0x13c>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	1e59      	subs	r1, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a42:	1c59      	adds	r1, r3, #1
 8004a44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a48:	400b      	ands	r3, r1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_I2C_Init+0x138>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1e59      	subs	r1, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a62:	e051      	b.n	8004b08 <HAL_I2C_Init+0x1dc>
 8004a64:	2304      	movs	r3, #4
 8004a66:	e04f      	b.n	8004b08 <HAL_I2C_Init+0x1dc>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d111      	bne.n	8004a94 <HAL_I2C_Init+0x168>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1e58      	subs	r0, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6859      	ldr	r1, [r3, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	440b      	add	r3, r1
 8004a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a82:	3301      	adds	r3, #1
 8004a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	e012      	b.n	8004aba <HAL_I2C_Init+0x18e>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	1e58      	subs	r0, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6859      	ldr	r1, [r3, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	0099      	lsls	r1, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aaa:	3301      	adds	r3, #1
 8004aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_I2C_Init+0x196>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e022      	b.n	8004b08 <HAL_I2C_Init+0x1dc>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_I2C_Init+0x1bc>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1e58      	subs	r0, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6859      	ldr	r1, [r3, #4]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	440b      	add	r3, r1
 8004ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004adc:	3301      	adds	r3, #1
 8004ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae6:	e00f      	b.n	8004b08 <HAL_I2C_Init+0x1dc>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	1e58      	subs	r0, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6859      	ldr	r1, [r3, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	0099      	lsls	r1, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004afe:	3301      	adds	r3, #1
 8004b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	6809      	ldr	r1, [r1, #0]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69da      	ldr	r2, [r3, #28]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6911      	ldr	r1, [r2, #16]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68d2      	ldr	r2, [r2, #12]
 8004b42:	4311      	orrs	r1, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	000186a0 	.word	0x000186a0
 8004ba4:	001e847f 	.word	0x001e847f
 8004ba8:	003d08ff 	.word	0x003d08ff
 8004bac:	431bde83 	.word	0x431bde83
 8004bb0:	10624dd3 	.word	0x10624dd3

08004bb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	817b      	strh	r3, [r7, #10]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bc8:	f7ff fb5e 	bl	8004288 <HAL_GetTick>
 8004bcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	f040 80e0 	bne.w	8004d9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	2319      	movs	r3, #25
 8004be2:	2201      	movs	r2, #1
 8004be4:	4970      	ldr	r1, [pc, #448]	; (8004da8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fe02 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e0d3      	b.n	8004d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_I2C_Master_Transmit+0x50>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e0cc      	b.n	8004d9e <HAL_I2C_Master_Transmit+0x1ea>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d007      	beq.n	8004c2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0201 	orr.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2221      	movs	r2, #33	; 0x21
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2210      	movs	r2, #16
 8004c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	893a      	ldrh	r2, [r7, #8]
 8004c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a50      	ldr	r2, [pc, #320]	; (8004dac <HAL_I2C_Master_Transmit+0x1f8>)
 8004c6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c6c:	8979      	ldrh	r1, [r7, #10]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	6a3a      	ldr	r2, [r7, #32]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fbbc 	bl	80053f0 <I2C_MasterRequestWrite>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e08d      	b.n	8004d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c98:	e066      	b.n	8004d68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	6a39      	ldr	r1, [r7, #32]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fe7c 	bl	800599c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00d      	beq.n	8004cc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d107      	bne.n	8004cc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e06b      	b.n	8004d9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	781a      	ldrb	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d11b      	bne.n	8004d3c <HAL_I2C_Master_Transmit+0x188>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d017      	beq.n	8004d3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	781a      	ldrb	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	6a39      	ldr	r1, [r7, #32]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fe6c 	bl	8005a1e <I2C_WaitOnBTFFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00d      	beq.n	8004d68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d107      	bne.n	8004d64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e01a      	b.n	8004d9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d194      	bne.n	8004c9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e000      	b.n	8004d9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d9c:	2302      	movs	r3, #2
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	00100002 	.word	0x00100002
 8004dac:	ffff0000 	.word	0xffff0000

08004db0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	4608      	mov	r0, r1
 8004dba:	4611      	mov	r1, r2
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	817b      	strh	r3, [r7, #10]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	813b      	strh	r3, [r7, #8]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dca:	f7ff fa5d 	bl	8004288 <HAL_GetTick>
 8004dce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	f040 80d9 	bne.w	8004f90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	2319      	movs	r3, #25
 8004de4:	2201      	movs	r2, #1
 8004de6:	496d      	ldr	r1, [pc, #436]	; (8004f9c <HAL_I2C_Mem_Write+0x1ec>)
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 fd01 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004df4:	2302      	movs	r3, #2
 8004df6:	e0cc      	b.n	8004f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_I2C_Mem_Write+0x56>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e0c5      	b.n	8004f92 <HAL_I2C_Mem_Write+0x1e2>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d007      	beq.n	8004e2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2221      	movs	r2, #33	; 0x21
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2240      	movs	r2, #64	; 0x40
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a3a      	ldr	r2, [r7, #32]
 8004e56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4a4d      	ldr	r2, [pc, #308]	; (8004fa0 <HAL_I2C_Mem_Write+0x1f0>)
 8004e6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e6e:	88f8      	ldrh	r0, [r7, #6]
 8004e70:	893a      	ldrh	r2, [r7, #8]
 8004e72:	8979      	ldrh	r1, [r7, #10]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 fb38 	bl	80054f4 <I2C_RequestMemoryWrite>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d052      	beq.n	8004f30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e081      	b.n	8004f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fd82 	bl	800599c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d107      	bne.n	8004eb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e06b      	b.n	8004f92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	781a      	ldrb	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d11b      	bne.n	8004f30 <HAL_I2C_Mem_Write+0x180>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d017      	beq.n	8004f30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1aa      	bne.n	8004e8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 fd6e 	bl	8005a1e <I2C_WaitOnBTFFlagUntilTimeout>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00d      	beq.n	8004f64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d107      	bne.n	8004f60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e016      	b.n	8004f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	e000      	b.n	8004f92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f90:	2302      	movs	r3, #2
  }
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	00100002 	.word	0x00100002
 8004fa0:	ffff0000 	.word	0xffff0000

08004fa4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08c      	sub	sp, #48	; 0x30
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	4608      	mov	r0, r1
 8004fae:	4611      	mov	r1, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	817b      	strh	r3, [r7, #10]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	813b      	strh	r3, [r7, #8]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fbe:	f7ff f963 	bl	8004288 <HAL_GetTick>
 8004fc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	f040 8208 	bne.w	80053e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	2319      	movs	r3, #25
 8004fd8:	2201      	movs	r2, #1
 8004fda:	497b      	ldr	r1, [pc, #492]	; (80051c8 <HAL_I2C_Mem_Read+0x224>)
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fc07 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e1fb      	b.n	80053e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_I2C_Mem_Read+0x56>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e1f4      	b.n	80053e4 <HAL_I2C_Mem_Read+0x440>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b01      	cmp	r3, #1
 800500e:	d007      	beq.n	8005020 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800502e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2222      	movs	r2, #34	; 0x22
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2240      	movs	r2, #64	; 0x40
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800504a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a5b      	ldr	r2, [pc, #364]	; (80051cc <HAL_I2C_Mem_Read+0x228>)
 8005060:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005062:	88f8      	ldrh	r0, [r7, #6]
 8005064:	893a      	ldrh	r2, [r7, #8]
 8005066:	8979      	ldrh	r1, [r7, #10]
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	4603      	mov	r3, r0
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 fad4 	bl	8005620 <I2C_RequestMemoryRead>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e1b0      	b.n	80053e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005086:	2b00      	cmp	r3, #0
 8005088:	d113      	bne.n	80050b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800508a:	2300      	movs	r3, #0
 800508c:	623b      	str	r3, [r7, #32]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	623b      	str	r3, [r7, #32]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	623b      	str	r3, [r7, #32]
 800509e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e184      	b.n	80053bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d11b      	bne.n	80050f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	e164      	b.n	80053bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d11b      	bne.n	8005132 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005108:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005118:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511a:	2300      	movs	r3, #0
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	61bb      	str	r3, [r7, #24]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	e144      	b.n	80053bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005148:	e138      	b.n	80053bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514e:	2b03      	cmp	r3, #3
 8005150:	f200 80f1 	bhi.w	8005336 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005158:	2b01      	cmp	r3, #1
 800515a:	d123      	bne.n	80051a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800515c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800515e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fc9d 	bl	8005aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e139      	b.n	80053e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051a2:	e10b      	b.n	80053bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d14e      	bne.n	800524a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	2200      	movs	r2, #0
 80051b4:	4906      	ldr	r1, [pc, #24]	; (80051d0 <HAL_I2C_Mem_Read+0x22c>)
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 fb1a 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d008      	beq.n	80051d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e10e      	b.n	80053e4 <HAL_I2C_Mem_Read+0x440>
 80051c6:	bf00      	nop
 80051c8:	00100002 	.word	0x00100002
 80051cc:	ffff0000 	.word	0xffff0000
 80051d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005248:	e0b8      	b.n	80053bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	2200      	movs	r2, #0
 8005252:	4966      	ldr	r1, [pc, #408]	; (80053ec <HAL_I2C_Mem_Read+0x448>)
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 facb 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0bf      	b.n	80053e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	2200      	movs	r2, #0
 80052ae:	494f      	ldr	r1, [pc, #316]	; (80053ec <HAL_I2C_Mem_Read+0x448>)
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fa9d 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e091      	b.n	80053e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005334:	e042      	b.n	80053bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 fbb0 	bl	8005aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e04c      	b.n	80053e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b04      	cmp	r3, #4
 8005388:	d118      	bne.n	80053bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f47f aec2 	bne.w	800514a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e000      	b.n	80053e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80053e2:	2302      	movs	r3, #2
  }
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3728      	adds	r7, #40	; 0x28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	00010004 	.word	0x00010004

080053f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	607a      	str	r2, [r7, #4]
 80053fa:	603b      	str	r3, [r7, #0]
 80053fc:	460b      	mov	r3, r1
 80053fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d006      	beq.n	800541a <I2C_MasterRequestWrite+0x2a>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d003      	beq.n	800541a <I2C_MasterRequestWrite+0x2a>
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005418:	d108      	bne.n	800542c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	e00b      	b.n	8005444 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	2b12      	cmp	r3, #18
 8005432:	d107      	bne.n	8005444 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005442:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f9cd 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00d      	beq.n	8005478 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546a:	d103      	bne.n	8005474 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e035      	b.n	80054e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005480:	d108      	bne.n	8005494 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005482:	897b      	ldrh	r3, [r7, #10]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005490:	611a      	str	r2, [r3, #16]
 8005492:	e01b      	b.n	80054cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005494:	897b      	ldrh	r3, [r7, #10]
 8005496:	11db      	asrs	r3, r3, #7
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f003 0306 	and.w	r3, r3, #6
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	f063 030f 	orn	r3, r3, #15
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	490e      	ldr	r1, [pc, #56]	; (80054ec <I2C_MasterRequestWrite+0xfc>)
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 f9f3 	bl	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e010      	b.n	80054e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054c2:	897b      	ldrh	r3, [r7, #10]
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	4907      	ldr	r1, [pc, #28]	; (80054f0 <I2C_MasterRequestWrite+0x100>)
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f9e3 	bl	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	00010008 	.word	0x00010008
 80054f0:	00010002 	.word	0x00010002

080054f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	4608      	mov	r0, r1
 80054fe:	4611      	mov	r1, r2
 8005500:	461a      	mov	r2, r3
 8005502:	4603      	mov	r3, r0
 8005504:	817b      	strh	r3, [r7, #10]
 8005506:	460b      	mov	r3, r1
 8005508:	813b      	strh	r3, [r7, #8]
 800550a:	4613      	mov	r3, r2
 800550c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800551c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	2200      	movs	r2, #0
 8005526:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 f960 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00d      	beq.n	8005552 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005544:	d103      	bne.n	800554e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e05f      	b.n	8005612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005552:	897b      	ldrh	r3, [r7, #10]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005560:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	6a3a      	ldr	r2, [r7, #32]
 8005566:	492d      	ldr	r1, [pc, #180]	; (800561c <I2C_RequestMemoryWrite+0x128>)
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 f998 	bl	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e04c      	b.n	8005612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800558e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005590:	6a39      	ldr	r1, [r7, #32]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 fa02 	bl	800599c <I2C_WaitOnTXEFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00d      	beq.n	80055ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d107      	bne.n	80055b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e02b      	b.n	8005612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d105      	bne.n	80055cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055c0:	893b      	ldrh	r3, [r7, #8]
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	611a      	str	r2, [r3, #16]
 80055ca:	e021      	b.n	8005610 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055cc:	893b      	ldrh	r3, [r7, #8]
 80055ce:	0a1b      	lsrs	r3, r3, #8
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055dc:	6a39      	ldr	r1, [r7, #32]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 f9dc 	bl	800599c <I2C_WaitOnTXEFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00d      	beq.n	8005606 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d107      	bne.n	8005602 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005600:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e005      	b.n	8005612 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005606:	893b      	ldrh	r3, [r7, #8]
 8005608:	b2da      	uxtb	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	00010002 	.word	0x00010002

08005620 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af02      	add	r7, sp, #8
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	4608      	mov	r0, r1
 800562a:	4611      	mov	r1, r2
 800562c:	461a      	mov	r2, r3
 800562e:	4603      	mov	r3, r0
 8005630:	817b      	strh	r3, [r7, #10]
 8005632:	460b      	mov	r3, r1
 8005634:	813b      	strh	r3, [r7, #8]
 8005636:	4613      	mov	r3, r2
 8005638:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005648:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005658:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	2200      	movs	r2, #0
 8005662:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 f8c2 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00d      	beq.n	800568e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005680:	d103      	bne.n	800568a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e0aa      	b.n	80057e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800568e:	897b      	ldrh	r3, [r7, #10]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800569c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	6a3a      	ldr	r2, [r7, #32]
 80056a2:	4952      	ldr	r1, [pc, #328]	; (80057ec <I2C_RequestMemoryRead+0x1cc>)
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f8fa 	bl	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e097      	b.n	80057e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056cc:	6a39      	ldr	r1, [r7, #32]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f964 	bl	800599c <I2C_WaitOnTXEFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00d      	beq.n	80056f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d107      	bne.n	80056f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e076      	b.n	80057e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d105      	bne.n	8005708 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056fc:	893b      	ldrh	r3, [r7, #8]
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	611a      	str	r2, [r3, #16]
 8005706:	e021      	b.n	800574c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005708:	893b      	ldrh	r3, [r7, #8]
 800570a:	0a1b      	lsrs	r3, r3, #8
 800570c:	b29b      	uxth	r3, r3
 800570e:	b2da      	uxtb	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005718:	6a39      	ldr	r1, [r7, #32]
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f93e 	bl	800599c <I2C_WaitOnTXEFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00d      	beq.n	8005742 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	2b04      	cmp	r3, #4
 800572c:	d107      	bne.n	800573e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800573c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e050      	b.n	80057e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005742:	893b      	ldrh	r3, [r7, #8]
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800574c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574e:	6a39      	ldr	r1, [r7, #32]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f923 	bl	800599c <I2C_WaitOnTXEFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00d      	beq.n	8005778 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	2b04      	cmp	r3, #4
 8005762:	d107      	bne.n	8005774 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005772:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e035      	b.n	80057e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005786:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	2200      	movs	r2, #0
 8005790:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f82b 	bl	80057f0 <I2C_WaitOnFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00d      	beq.n	80057bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ae:	d103      	bne.n	80057b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e013      	b.n	80057e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057bc:	897b      	ldrh	r3, [r7, #10]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	6a3a      	ldr	r2, [r7, #32]
 80057d0:	4906      	ldr	r1, [pc, #24]	; (80057ec <I2C_RequestMemoryRead+0x1cc>)
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f863 	bl	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	00010002 	.word	0x00010002

080057f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	4613      	mov	r3, r2
 80057fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005800:	e025      	b.n	800584e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005808:	d021      	beq.n	800584e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580a:	f7fe fd3d 	bl	8004288 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d302      	bcc.n	8005820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d116      	bne.n	800584e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f043 0220 	orr.w	r2, r3, #32
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e023      	b.n	8005896 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	0c1b      	lsrs	r3, r3, #16
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d10d      	bne.n	8005874 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	43da      	mvns	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4013      	ands	r3, r2
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	bf0c      	ite	eq
 800586a:	2301      	moveq	r3, #1
 800586c:	2300      	movne	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	e00c      	b.n	800588e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	43da      	mvns	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4013      	ands	r3, r2
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	bf0c      	ite	eq
 8005886:	2301      	moveq	r3, #1
 8005888:	2300      	movne	r3, #0
 800588a:	b2db      	uxtb	r3, r3
 800588c:	461a      	mov	r2, r3
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	429a      	cmp	r2, r3
 8005892:	d0b6      	beq.n	8005802 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	607a      	str	r2, [r7, #4]
 80058aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058ac:	e051      	b.n	8005952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058bc:	d123      	bne.n	8005906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f043 0204 	orr.w	r2, r3, #4
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e046      	b.n	8005994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d021      	beq.n	8005952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590e:	f7fe fcbb 	bl	8004288 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	429a      	cmp	r2, r3
 800591c:	d302      	bcc.n	8005924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d116      	bne.n	8005952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f043 0220 	orr.w	r2, r3, #32
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e020      	b.n	8005994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	0c1b      	lsrs	r3, r3, #16
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d10c      	bne.n	8005976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	43da      	mvns	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	bf14      	ite	ne
 800596e:	2301      	movne	r3, #1
 8005970:	2300      	moveq	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	e00b      	b.n	800598e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	43da      	mvns	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4013      	ands	r3, r2
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	bf14      	ite	ne
 8005988:	2301      	movne	r3, #1
 800598a:	2300      	moveq	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d18d      	bne.n	80058ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059a8:	e02d      	b.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f8ce 	bl	8005b4c <I2C_IsAcknowledgeFailed>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e02d      	b.n	8005a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c0:	d021      	beq.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c2:	f7fe fc61 	bl	8004288 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d302      	bcc.n	80059d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d116      	bne.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	f043 0220 	orr.w	r2, r3, #32
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e007      	b.n	8005a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a10:	2b80      	cmp	r3, #128	; 0x80
 8005a12:	d1ca      	bne.n	80059aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a2a:	e02d      	b.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 f88d 	bl	8005b4c <I2C_IsAcknowledgeFailed>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e02d      	b.n	8005a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d021      	beq.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a44:	f7fe fc20 	bl	8004288 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d302      	bcc.n	8005a5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d116      	bne.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	f043 0220 	orr.w	r2, r3, #32
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e007      	b.n	8005a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d1ca      	bne.n	8005a2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005aac:	e042      	b.n	8005b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2b10      	cmp	r3, #16
 8005aba:	d119      	bne.n	8005af0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0210 	mvn.w	r2, #16
 8005ac4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e029      	b.n	8005b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af0:	f7fe fbca 	bl	8004288 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d302      	bcc.n	8005b06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d116      	bne.n	8005b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b20:	f043 0220 	orr.w	r2, r3, #32
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e007      	b.n	8005b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b40      	cmp	r3, #64	; 0x40
 8005b40:	d1b5      	bne.n	8005aae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b62:	d11b      	bne.n	8005b9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	f043 0204 	orr.w	r2, r3, #4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
	...

08005bac <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005bb8:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <HAL_PWR_EnterSLEEPMode+0x34>)
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	4a08      	ldr	r2, [pc, #32]	; (8005be0 <HAL_PWR_EnterSLEEPMode+0x34>)
 8005bbe:	f023 0304 	bic.w	r3, r3, #4
 8005bc2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8005bca:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8005bcc:	e002      	b.n	8005bd4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8005bce:	bf40      	sev
    __WFE();
 8005bd0:	bf20      	wfe
    __WFE();
 8005bd2:	bf20      	wfe
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	e000ed00 	.word	0xe000ed00

08005be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0cc      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf8:	4b68      	ldr	r3, [pc, #416]	; (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d90c      	bls.n	8005c20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c06:	4b65      	ldr	r3, [pc, #404]	; (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0e:	4b63      	ldr	r3, [pc, #396]	; (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0b8      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d020      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c38:	4b59      	ldr	r3, [pc, #356]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	4a58      	ldr	r2, [pc, #352]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c50:	4b53      	ldr	r3, [pc, #332]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4a52      	ldr	r2, [pc, #328]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c5c:	4b50      	ldr	r3, [pc, #320]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	494d      	ldr	r1, [pc, #308]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d044      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d107      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c82:	4b47      	ldr	r3, [pc, #284]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d119      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e07f      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d003      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d107      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca2:	4b3f      	ldr	r3, [pc, #252]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d109      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e06f      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb2:	4b3b      	ldr	r3, [pc, #236]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e067      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cc2:	4b37      	ldr	r3, [pc, #220]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f023 0203 	bic.w	r2, r3, #3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	4934      	ldr	r1, [pc, #208]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cd4:	f7fe fad8 	bl	8004288 <HAL_GetTick>
 8005cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cda:	e00a      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cdc:	f7fe fad4 	bl	8004288 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e04f      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf2:	4b2b      	ldr	r3, [pc, #172]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 020c 	and.w	r2, r3, #12
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d1eb      	bne.n	8005cdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d04:	4b25      	ldr	r3, [pc, #148]	; (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d20c      	bcs.n	8005d2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d12:	4b22      	ldr	r3, [pc, #136]	; (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1a:	4b20      	ldr	r3, [pc, #128]	; (8005d9c <HAL_RCC_ClockConfig+0x1b8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e032      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d38:	4b19      	ldr	r3, [pc, #100]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4916      	ldr	r1, [pc, #88]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d009      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d56:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	490e      	ldr	r1, [pc, #56]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d6a:	f000 f887 	bl	8005e7c <HAL_RCC_GetSysClockFreq>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	490a      	ldr	r1, [pc, #40]	; (8005da4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d7c:	5ccb      	ldrb	r3, [r1, r3]
 8005d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d82:	4a09      	ldr	r2, [pc, #36]	; (8005da8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d86:	4b09      	ldr	r3, [pc, #36]	; (8005dac <HAL_RCC_ClockConfig+0x1c8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe f88e 	bl	8003eac <HAL_InitTick>

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40023c00 	.word	0x40023c00
 8005da0:	40023800 	.word	0x40023800
 8005da4:	0801151c 	.word	0x0801151c
 8005da8:	20000008 	.word	0x20000008
 8005dac:	2000000c 	.word	0x2000000c

08005db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005db4:	4b03      	ldr	r3, [pc, #12]	; (8005dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005db6:	681b      	ldr	r3, [r3, #0]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20000008 	.word	0x20000008

08005dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dcc:	f7ff fff0 	bl	8005db0 <HAL_RCC_GetHCLKFreq>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	0a9b      	lsrs	r3, r3, #10
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	4903      	ldr	r1, [pc, #12]	; (8005dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dde:	5ccb      	ldrb	r3, [r1, r3]
 8005de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40023800 	.word	0x40023800
 8005dec:	0801152c 	.word	0x0801152c

08005df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005df4:	f7ff ffdc 	bl	8005db0 <HAL_RCC_GetHCLKFreq>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	0b5b      	lsrs	r3, r3, #13
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	4903      	ldr	r1, [pc, #12]	; (8005e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e06:	5ccb      	ldrb	r3, [r1, r3]
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40023800 	.word	0x40023800
 8005e14:	0801152c 	.word	0x0801152c

08005e18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	220f      	movs	r2, #15
 8005e26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e28:	4b12      	ldr	r3, [pc, #72]	; (8005e74 <HAL_RCC_GetClockConfig+0x5c>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 0203 	and.w	r2, r3, #3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e34:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <HAL_RCC_GetClockConfig+0x5c>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e40:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <HAL_RCC_GetClockConfig+0x5c>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e4c:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <HAL_RCC_GetClockConfig+0x5c>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	08db      	lsrs	r3, r3, #3
 8005e52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e5a:	4b07      	ldr	r3, [pc, #28]	; (8005e78 <HAL_RCC_GetClockConfig+0x60>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 020f 	and.w	r2, r3, #15
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	601a      	str	r2, [r3, #0]
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40023800 	.word	0x40023800
 8005e78:	40023c00 	.word	0x40023c00

08005e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e80:	b0a6      	sub	sp, #152	; 0x98
 8005e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ea2:	4bc8      	ldr	r3, [pc, #800]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 030c 	and.w	r3, r3, #12
 8005eaa:	2b0c      	cmp	r3, #12
 8005eac:	f200 817e 	bhi.w	80061ac <HAL_RCC_GetSysClockFreq+0x330>
 8005eb0:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005eed 	.word	0x08005eed
 8005ebc:	080061ad 	.word	0x080061ad
 8005ec0:	080061ad 	.word	0x080061ad
 8005ec4:	080061ad 	.word	0x080061ad
 8005ec8:	08005ef5 	.word	0x08005ef5
 8005ecc:	080061ad 	.word	0x080061ad
 8005ed0:	080061ad 	.word	0x080061ad
 8005ed4:	080061ad 	.word	0x080061ad
 8005ed8:	08005efd 	.word	0x08005efd
 8005edc:	080061ad 	.word	0x080061ad
 8005ee0:	080061ad 	.word	0x080061ad
 8005ee4:	080061ad 	.word	0x080061ad
 8005ee8:	08006067 	.word	0x08006067
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005eec:	4bb6      	ldr	r3, [pc, #728]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005eee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8005ef2:	e15f      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ef4:	4bb5      	ldr	r3, [pc, #724]	; (80061cc <HAL_RCC_GetSysClockFreq+0x350>)
 8005ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005efa:	e15b      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005efc:	4bb1      	ldr	r3, [pc, #708]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f08:	4bae      	ldr	r3, [pc, #696]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d031      	beq.n	8005f78 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f14:	4bab      	ldr	r3, [pc, #684]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	099b      	lsrs	r3, r3, #6
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f26:	663b      	str	r3, [r7, #96]	; 0x60
 8005f28:	2300      	movs	r3, #0
 8005f2a:	667b      	str	r3, [r7, #100]	; 0x64
 8005f2c:	4ba7      	ldr	r3, [pc, #668]	; (80061cc <HAL_RCC_GetSysClockFreq+0x350>)
 8005f2e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005f32:	462a      	mov	r2, r5
 8005f34:	fb03 f202 	mul.w	r2, r3, r2
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	4413      	add	r3, r2
 8005f42:	4aa2      	ldr	r2, [pc, #648]	; (80061cc <HAL_RCC_GetSysClockFreq+0x350>)
 8005f44:	4621      	mov	r1, r4
 8005f46:	fba1 1202 	umull	r1, r2, r1, r2
 8005f4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f4c:	460a      	mov	r2, r1
 8005f4e:	67ba      	str	r2, [r7, #120]	; 0x78
 8005f50:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f52:	4413      	add	r3, r2
 8005f54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f5e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005f60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f64:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005f68:	f7fa fefe 	bl	8000d68 <__aeabi_uldivmod>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4613      	mov	r3, r2
 8005f72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f76:	e064      	b.n	8006042 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f78:	4b92      	ldr	r3, [pc, #584]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	099b      	lsrs	r3, r3, #6
 8005f7e:	2200      	movs	r2, #0
 8005f80:	653b      	str	r3, [r7, #80]	; 0x50
 8005f82:	657a      	str	r2, [r7, #84]	; 0x54
 8005f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f90:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005f94:	4622      	mov	r2, r4
 8005f96:	462b      	mov	r3, r5
 8005f98:	f04f 0000 	mov.w	r0, #0
 8005f9c:	f04f 0100 	mov.w	r1, #0
 8005fa0:	0159      	lsls	r1, r3, #5
 8005fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fa6:	0150      	lsls	r0, r2, #5
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4621      	mov	r1, r4
 8005fae:	1a51      	subs	r1, r2, r1
 8005fb0:	6139      	str	r1, [r7, #16]
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	eb63 0301 	sbc.w	r3, r3, r1
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fc6:	4659      	mov	r1, fp
 8005fc8:	018b      	lsls	r3, r1, #6
 8005fca:	4651      	mov	r1, sl
 8005fcc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fd0:	4651      	mov	r1, sl
 8005fd2:	018a      	lsls	r2, r1, #6
 8005fd4:	4651      	mov	r1, sl
 8005fd6:	ebb2 0801 	subs.w	r8, r2, r1
 8005fda:	4659      	mov	r1, fp
 8005fdc:	eb63 0901 	sbc.w	r9, r3, r1
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ff0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ff4:	4690      	mov	r8, r2
 8005ff6:	4699      	mov	r9, r3
 8005ff8:	4623      	mov	r3, r4
 8005ffa:	eb18 0303 	adds.w	r3, r8, r3
 8005ffe:	60bb      	str	r3, [r7, #8]
 8006000:	462b      	mov	r3, r5
 8006002:	eb49 0303 	adc.w	r3, r9, r3
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	f04f 0200 	mov.w	r2, #0
 800600c:	f04f 0300 	mov.w	r3, #0
 8006010:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006014:	4629      	mov	r1, r5
 8006016:	028b      	lsls	r3, r1, #10
 8006018:	4621      	mov	r1, r4
 800601a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800601e:	4621      	mov	r1, r4
 8006020:	028a      	lsls	r2, r1, #10
 8006022:	4610      	mov	r0, r2
 8006024:	4619      	mov	r1, r3
 8006026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800602a:	2200      	movs	r2, #0
 800602c:	643b      	str	r3, [r7, #64]	; 0x40
 800602e:	647a      	str	r2, [r7, #68]	; 0x44
 8006030:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006034:	f7fa fe98 	bl	8000d68 <__aeabi_uldivmod>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4613      	mov	r3, r2
 800603e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006042:	4b60      	ldr	r3, [pc, #384]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	0c1b      	lsrs	r3, r3, #16
 8006048:	f003 0303 	and.w	r3, r3, #3
 800604c:	3301      	adds	r3, #1
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8006054:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006058:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800605c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006060:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006064:	e0a6      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006066:	4b57      	ldr	r3, [pc, #348]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800606e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006072:	4b54      	ldr	r3, [pc, #336]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d02a      	beq.n	80060d4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800607e:	4b51      	ldr	r3, [pc, #324]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	099b      	lsrs	r3, r3, #6
 8006084:	2200      	movs	r2, #0
 8006086:	63bb      	str	r3, [r7, #56]	; 0x38
 8006088:	63fa      	str	r2, [r7, #60]	; 0x3c
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006090:	2100      	movs	r1, #0
 8006092:	4b4e      	ldr	r3, [pc, #312]	; (80061cc <HAL_RCC_GetSysClockFreq+0x350>)
 8006094:	fb03 f201 	mul.w	r2, r3, r1
 8006098:	2300      	movs	r3, #0
 800609a:	fb00 f303 	mul.w	r3, r0, r3
 800609e:	4413      	add	r3, r2
 80060a0:	4a4a      	ldr	r2, [pc, #296]	; (80061cc <HAL_RCC_GetSysClockFreq+0x350>)
 80060a2:	fba0 1202 	umull	r1, r2, r0, r2
 80060a6:	677a      	str	r2, [r7, #116]	; 0x74
 80060a8:	460a      	mov	r2, r1
 80060aa:	673a      	str	r2, [r7, #112]	; 0x70
 80060ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80060ae:	4413      	add	r3, r2
 80060b0:	677b      	str	r3, [r7, #116]	; 0x74
 80060b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060b6:	2200      	movs	r2, #0
 80060b8:	633b      	str	r3, [r7, #48]	; 0x30
 80060ba:	637a      	str	r2, [r7, #52]	; 0x34
 80060bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80060c0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80060c4:	f7fa fe50 	bl	8000d68 <__aeabi_uldivmod>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4613      	mov	r3, r2
 80060ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060d2:	e05b      	b.n	800618c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060d4:	4b3b      	ldr	r3, [pc, #236]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x348>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	099b      	lsrs	r3, r3, #6
 80060da:	2200      	movs	r2, #0
 80060dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80060de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e6:	623b      	str	r3, [r7, #32]
 80060e8:	2300      	movs	r3, #0
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
 80060ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060f0:	4642      	mov	r2, r8
 80060f2:	464b      	mov	r3, r9
 80060f4:	f04f 0000 	mov.w	r0, #0
 80060f8:	f04f 0100 	mov.w	r1, #0
 80060fc:	0159      	lsls	r1, r3, #5
 80060fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006102:	0150      	lsls	r0, r2, #5
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4641      	mov	r1, r8
 800610a:	ebb2 0a01 	subs.w	sl, r2, r1
 800610e:	4649      	mov	r1, r9
 8006110:	eb63 0b01 	sbc.w	fp, r3, r1
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	f04f 0300 	mov.w	r3, #0
 800611c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006120:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006124:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006128:	ebb2 040a 	subs.w	r4, r2, sl
 800612c:	eb63 050b 	sbc.w	r5, r3, fp
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	00eb      	lsls	r3, r5, #3
 800613a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800613e:	00e2      	lsls	r2, r4, #3
 8006140:	4614      	mov	r4, r2
 8006142:	461d      	mov	r5, r3
 8006144:	4643      	mov	r3, r8
 8006146:	18e3      	adds	r3, r4, r3
 8006148:	603b      	str	r3, [r7, #0]
 800614a:	464b      	mov	r3, r9
 800614c:	eb45 0303 	adc.w	r3, r5, r3
 8006150:	607b      	str	r3, [r7, #4]
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	f04f 0300 	mov.w	r3, #0
 800615a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800615e:	4629      	mov	r1, r5
 8006160:	028b      	lsls	r3, r1, #10
 8006162:	4621      	mov	r1, r4
 8006164:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006168:	4621      	mov	r1, r4
 800616a:	028a      	lsls	r2, r1, #10
 800616c:	4610      	mov	r0, r2
 800616e:	4619      	mov	r1, r3
 8006170:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006174:	2200      	movs	r2, #0
 8006176:	61bb      	str	r3, [r7, #24]
 8006178:	61fa      	str	r2, [r7, #28]
 800617a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800617e:	f7fa fdf3 	bl	8000d68 <__aeabi_uldivmod>
 8006182:	4602      	mov	r2, r0
 8006184:	460b      	mov	r3, r1
 8006186:	4613      	mov	r3, r2
 8006188:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800618c:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <HAL_RCC_GetSysClockFreq+0x348>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	0f1b      	lsrs	r3, r3, #28
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800619a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800619e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80061aa:	e003      	b.n	80061b4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061ac:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80061ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80061b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3798      	adds	r7, #152	; 0x98
 80061bc:	46bd      	mov	sp, r7
 80061be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061c2:	bf00      	nop
 80061c4:	40023800 	.word	0x40023800
 80061c8:	00f42400 	.word	0x00f42400
 80061cc:	017d7840 	.word	0x017d7840

080061d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e28d      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8083 	beq.w	80062f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80061f0:	4b94      	ldr	r3, [pc, #592]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 030c 	and.w	r3, r3, #12
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d019      	beq.n	8006230 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80061fc:	4b91      	ldr	r3, [pc, #580]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006204:	2b08      	cmp	r3, #8
 8006206:	d106      	bne.n	8006216 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006208:	4b8e      	ldr	r3, [pc, #568]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006214:	d00c      	beq.n	8006230 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006216:	4b8b      	ldr	r3, [pc, #556]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800621e:	2b0c      	cmp	r3, #12
 8006220:	d112      	bne.n	8006248 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006222:	4b88      	ldr	r3, [pc, #544]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800622a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800622e:	d10b      	bne.n	8006248 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006230:	4b84      	ldr	r3, [pc, #528]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d05b      	beq.n	80062f4 <HAL_RCC_OscConfig+0x124>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d157      	bne.n	80062f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e25a      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006250:	d106      	bne.n	8006260 <HAL_RCC_OscConfig+0x90>
 8006252:	4b7c      	ldr	r3, [pc, #496]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a7b      	ldr	r2, [pc, #492]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	e01d      	b.n	800629c <HAL_RCC_OscConfig+0xcc>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006268:	d10c      	bne.n	8006284 <HAL_RCC_OscConfig+0xb4>
 800626a:	4b76      	ldr	r3, [pc, #472]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a75      	ldr	r2, [pc, #468]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	4b73      	ldr	r3, [pc, #460]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a72      	ldr	r2, [pc, #456]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 800627c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	e00b      	b.n	800629c <HAL_RCC_OscConfig+0xcc>
 8006284:	4b6f      	ldr	r3, [pc, #444]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a6e      	ldr	r2, [pc, #440]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 800628a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	4b6c      	ldr	r3, [pc, #432]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a6b      	ldr	r2, [pc, #428]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800629a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d013      	beq.n	80062cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a4:	f7fd fff0 	bl	8004288 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062ac:	f7fd ffec 	bl	8004288 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b64      	cmp	r3, #100	; 0x64
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e21f      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062be:	4b61      	ldr	r3, [pc, #388]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0f0      	beq.n	80062ac <HAL_RCC_OscConfig+0xdc>
 80062ca:	e014      	b.n	80062f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7fd ffdc 	bl	8004288 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062d4:	f7fd ffd8 	bl	8004288 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b64      	cmp	r3, #100	; 0x64
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e20b      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062e6:	4b57      	ldr	r3, [pc, #348]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f0      	bne.n	80062d4 <HAL_RCC_OscConfig+0x104>
 80062f2:	e000      	b.n	80062f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d06f      	beq.n	80063e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006302:	4b50      	ldr	r3, [pc, #320]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 030c 	and.w	r3, r3, #12
 800630a:	2b00      	cmp	r3, #0
 800630c:	d017      	beq.n	800633e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800630e:	4b4d      	ldr	r3, [pc, #308]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006316:	2b08      	cmp	r3, #8
 8006318:	d105      	bne.n	8006326 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800631a:	4b4a      	ldr	r3, [pc, #296]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00b      	beq.n	800633e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006326:	4b47      	ldr	r3, [pc, #284]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800632e:	2b0c      	cmp	r3, #12
 8006330:	d11c      	bne.n	800636c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006332:	4b44      	ldr	r3, [pc, #272]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d116      	bne.n	800636c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800633e:	4b41      	ldr	r3, [pc, #260]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d005      	beq.n	8006356 <HAL_RCC_OscConfig+0x186>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d001      	beq.n	8006356 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e1d3      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006356:	4b3b      	ldr	r3, [pc, #236]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	4937      	ldr	r1, [pc, #220]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006366:	4313      	orrs	r3, r2
 8006368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800636a:	e03a      	b.n	80063e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d020      	beq.n	80063b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006374:	4b34      	ldr	r3, [pc, #208]	; (8006448 <HAL_RCC_OscConfig+0x278>)
 8006376:	2201      	movs	r2, #1
 8006378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637a:	f7fd ff85 	bl	8004288 <HAL_GetTick>
 800637e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006380:	e008      	b.n	8006394 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006382:	f7fd ff81 	bl	8004288 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e1b4      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006394:	4b2b      	ldr	r3, [pc, #172]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0f0      	beq.n	8006382 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a0:	4b28      	ldr	r3, [pc, #160]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	4925      	ldr	r1, [pc, #148]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	600b      	str	r3, [r1, #0]
 80063b4:	e015      	b.n	80063e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063b6:	4b24      	ldr	r3, [pc, #144]	; (8006448 <HAL_RCC_OscConfig+0x278>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063bc:	f7fd ff64 	bl	8004288 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063c4:	f7fd ff60 	bl	8004288 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e193      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063d6:	4b1b      	ldr	r3, [pc, #108]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f0      	bne.n	80063c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d036      	beq.n	800645c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d016      	beq.n	8006424 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063f6:	4b15      	ldr	r3, [pc, #84]	; (800644c <HAL_RCC_OscConfig+0x27c>)
 80063f8:	2201      	movs	r2, #1
 80063fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fc:	f7fd ff44 	bl	8004288 <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006404:	f7fd ff40 	bl	8004288 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e173      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006416:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <HAL_RCC_OscConfig+0x274>)
 8006418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0f0      	beq.n	8006404 <HAL_RCC_OscConfig+0x234>
 8006422:	e01b      	b.n	800645c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006424:	4b09      	ldr	r3, [pc, #36]	; (800644c <HAL_RCC_OscConfig+0x27c>)
 8006426:	2200      	movs	r2, #0
 8006428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800642a:	f7fd ff2d 	bl	8004288 <HAL_GetTick>
 800642e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006430:	e00e      	b.n	8006450 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006432:	f7fd ff29 	bl	8004288 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d907      	bls.n	8006450 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e15c      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
 8006444:	40023800 	.word	0x40023800
 8006448:	42470000 	.word	0x42470000
 800644c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006450:	4b8a      	ldr	r3, [pc, #552]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 8006452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1ea      	bne.n	8006432 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8097 	beq.w	8006598 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800646a:	2300      	movs	r3, #0
 800646c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800646e:	4b83      	ldr	r3, [pc, #524]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10f      	bne.n	800649a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800647a:	2300      	movs	r3, #0
 800647c:	60bb      	str	r3, [r7, #8]
 800647e:	4b7f      	ldr	r3, [pc, #508]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	4a7e      	ldr	r2, [pc, #504]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 8006484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006488:	6413      	str	r3, [r2, #64]	; 0x40
 800648a:	4b7c      	ldr	r3, [pc, #496]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006492:	60bb      	str	r3, [r7, #8]
 8006494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006496:	2301      	movs	r3, #1
 8006498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800649a:	4b79      	ldr	r3, [pc, #484]	; (8006680 <HAL_RCC_OscConfig+0x4b0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d118      	bne.n	80064d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064a6:	4b76      	ldr	r3, [pc, #472]	; (8006680 <HAL_RCC_OscConfig+0x4b0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a75      	ldr	r2, [pc, #468]	; (8006680 <HAL_RCC_OscConfig+0x4b0>)
 80064ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064b2:	f7fd fee9 	bl	8004288 <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ba:	f7fd fee5 	bl	8004288 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e118      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064cc:	4b6c      	ldr	r3, [pc, #432]	; (8006680 <HAL_RCC_OscConfig+0x4b0>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0f0      	beq.n	80064ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d106      	bne.n	80064ee <HAL_RCC_OscConfig+0x31e>
 80064e0:	4b66      	ldr	r3, [pc, #408]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 80064e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e4:	4a65      	ldr	r2, [pc, #404]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	6713      	str	r3, [r2, #112]	; 0x70
 80064ec:	e01c      	b.n	8006528 <HAL_RCC_OscConfig+0x358>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	2b05      	cmp	r3, #5
 80064f4:	d10c      	bne.n	8006510 <HAL_RCC_OscConfig+0x340>
 80064f6:	4b61      	ldr	r3, [pc, #388]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 80064f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fa:	4a60      	ldr	r2, [pc, #384]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 80064fc:	f043 0304 	orr.w	r3, r3, #4
 8006500:	6713      	str	r3, [r2, #112]	; 0x70
 8006502:	4b5e      	ldr	r3, [pc, #376]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 8006504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006506:	4a5d      	ldr	r2, [pc, #372]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 8006508:	f043 0301 	orr.w	r3, r3, #1
 800650c:	6713      	str	r3, [r2, #112]	; 0x70
 800650e:	e00b      	b.n	8006528 <HAL_RCC_OscConfig+0x358>
 8006510:	4b5a      	ldr	r3, [pc, #360]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 8006512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006514:	4a59      	ldr	r2, [pc, #356]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 8006516:	f023 0301 	bic.w	r3, r3, #1
 800651a:	6713      	str	r3, [r2, #112]	; 0x70
 800651c:	4b57      	ldr	r3, [pc, #348]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 800651e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006520:	4a56      	ldr	r2, [pc, #344]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 8006522:	f023 0304 	bic.w	r3, r3, #4
 8006526:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d015      	beq.n	800655c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006530:	f7fd feaa 	bl	8004288 <HAL_GetTick>
 8006534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006536:	e00a      	b.n	800654e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006538:	f7fd fea6 	bl	8004288 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	f241 3288 	movw	r2, #5000	; 0x1388
 8006546:	4293      	cmp	r3, r2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e0d7      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654e:	4b4b      	ldr	r3, [pc, #300]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 8006550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0ee      	beq.n	8006538 <HAL_RCC_OscConfig+0x368>
 800655a:	e014      	b.n	8006586 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800655c:	f7fd fe94 	bl	8004288 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006562:	e00a      	b.n	800657a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006564:	f7fd fe90 	bl	8004288 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006572:	4293      	cmp	r3, r2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e0c1      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800657a:	4b40      	ldr	r3, [pc, #256]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1ee      	bne.n	8006564 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006586:	7dfb      	ldrb	r3, [r7, #23]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d105      	bne.n	8006598 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800658c:	4b3b      	ldr	r3, [pc, #236]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	4a3a      	ldr	r2, [pc, #232]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 8006592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006596:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 80ad 	beq.w	80066fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065a2:	4b36      	ldr	r3, [pc, #216]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 030c 	and.w	r3, r3, #12
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	d060      	beq.n	8006670 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d145      	bne.n	8006642 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b6:	4b33      	ldr	r3, [pc, #204]	; (8006684 <HAL_RCC_OscConfig+0x4b4>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065bc:	f7fd fe64 	bl	8004288 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065c4:	f7fd fe60 	bl	8004288 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e093      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d6:	4b29      	ldr	r3, [pc, #164]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f0      	bne.n	80065c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69da      	ldr	r2, [r3, #28]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	431a      	orrs	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	019b      	lsls	r3, r3, #6
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f8:	085b      	lsrs	r3, r3, #1
 80065fa:	3b01      	subs	r3, #1
 80065fc:	041b      	lsls	r3, r3, #16
 80065fe:	431a      	orrs	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	061b      	lsls	r3, r3, #24
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	071b      	lsls	r3, r3, #28
 800660e:	491b      	ldr	r1, [pc, #108]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 8006610:	4313      	orrs	r3, r2
 8006612:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006614:	4b1b      	ldr	r3, [pc, #108]	; (8006684 <HAL_RCC_OscConfig+0x4b4>)
 8006616:	2201      	movs	r2, #1
 8006618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661a:	f7fd fe35 	bl	8004288 <HAL_GetTick>
 800661e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006620:	e008      	b.n	8006634 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006622:	f7fd fe31 	bl	8004288 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e064      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006634:	4b11      	ldr	r3, [pc, #68]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0f0      	beq.n	8006622 <HAL_RCC_OscConfig+0x452>
 8006640:	e05c      	b.n	80066fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006642:	4b10      	ldr	r3, [pc, #64]	; (8006684 <HAL_RCC_OscConfig+0x4b4>)
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006648:	f7fd fe1e 	bl	8004288 <HAL_GetTick>
 800664c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664e:	e008      	b.n	8006662 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006650:	f7fd fe1a 	bl	8004288 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e04d      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006662:	4b06      	ldr	r3, [pc, #24]	; (800667c <HAL_RCC_OscConfig+0x4ac>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f0      	bne.n	8006650 <HAL_RCC_OscConfig+0x480>
 800666e:	e045      	b.n	80066fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d107      	bne.n	8006688 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e040      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
 800667c:	40023800 	.word	0x40023800
 8006680:	40007000 	.word	0x40007000
 8006684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006688:	4b1f      	ldr	r3, [pc, #124]	; (8006708 <HAL_RCC_OscConfig+0x538>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d030      	beq.n	80066f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d129      	bne.n	80066f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d122      	bne.n	80066f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066b8:	4013      	ands	r3, r2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d119      	bne.n	80066f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	3b01      	subs	r3, #1
 80066d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d10f      	bne.n	80066f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d107      	bne.n	80066f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d001      	beq.n	80066fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	40023800 	.word	0x40023800

0800670c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e041      	b.n	80067a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fd f9d4 	bl	8003ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3304      	adds	r3, #4
 8006748:	4619      	mov	r1, r3
 800674a:	4610      	mov	r0, r2
 800674c:	f000 fde0 	bl	8007310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d001      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e04e      	b.n	8006862 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f042 0201 	orr.w	r2, r2, #1
 80067da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a23      	ldr	r2, [pc, #140]	; (8006870 <HAL_TIM_Base_Start_IT+0xc4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d022      	beq.n	800682c <HAL_TIM_Base_Start_IT+0x80>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ee:	d01d      	beq.n	800682c <HAL_TIM_Base_Start_IT+0x80>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1f      	ldr	r2, [pc, #124]	; (8006874 <HAL_TIM_Base_Start_IT+0xc8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d018      	beq.n	800682c <HAL_TIM_Base_Start_IT+0x80>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1e      	ldr	r2, [pc, #120]	; (8006878 <HAL_TIM_Base_Start_IT+0xcc>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d013      	beq.n	800682c <HAL_TIM_Base_Start_IT+0x80>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1c      	ldr	r2, [pc, #112]	; (800687c <HAL_TIM_Base_Start_IT+0xd0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00e      	beq.n	800682c <HAL_TIM_Base_Start_IT+0x80>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a1b      	ldr	r2, [pc, #108]	; (8006880 <HAL_TIM_Base_Start_IT+0xd4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d009      	beq.n	800682c <HAL_TIM_Base_Start_IT+0x80>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a19      	ldr	r2, [pc, #100]	; (8006884 <HAL_TIM_Base_Start_IT+0xd8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d004      	beq.n	800682c <HAL_TIM_Base_Start_IT+0x80>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a18      	ldr	r2, [pc, #96]	; (8006888 <HAL_TIM_Base_Start_IT+0xdc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d111      	bne.n	8006850 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b06      	cmp	r3, #6
 800683c:	d010      	beq.n	8006860 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f042 0201 	orr.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800684e:	e007      	b.n	8006860 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0201 	orr.w	r2, r2, #1
 800685e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40010000 	.word	0x40010000
 8006874:	40000400 	.word	0x40000400
 8006878:	40000800 	.word	0x40000800
 800687c:	40000c00 	.word	0x40000c00
 8006880:	40010400 	.word	0x40010400
 8006884:	40014000 	.word	0x40014000
 8006888:	40001800 	.word	0x40001800

0800688c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e041      	b.n	8006922 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fd f8b6 	bl	8003a24 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f000 fd20 	bl	8007310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e041      	b.n	80069c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7fd f88d 	bl	8003a70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2202      	movs	r2, #2
 800695a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3304      	adds	r3, #4
 8006966:	4619      	mov	r1, r3
 8006968:	4610      	mov	r0, r2
 800696a:	f000 fcd1 	bl	8007310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d109      	bne.n	80069ec <HAL_TIM_PWM_Start+0x24>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	bf14      	ite	ne
 80069e4:	2301      	movne	r3, #1
 80069e6:	2300      	moveq	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	e022      	b.n	8006a32 <HAL_TIM_PWM_Start+0x6a>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d109      	bne.n	8006a06 <HAL_TIM_PWM_Start+0x3e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	bf14      	ite	ne
 80069fe:	2301      	movne	r3, #1
 8006a00:	2300      	moveq	r3, #0
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	e015      	b.n	8006a32 <HAL_TIM_PWM_Start+0x6a>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d109      	bne.n	8006a20 <HAL_TIM_PWM_Start+0x58>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	bf14      	ite	ne
 8006a18:	2301      	movne	r3, #1
 8006a1a:	2300      	moveq	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	e008      	b.n	8006a32 <HAL_TIM_PWM_Start+0x6a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	bf14      	ite	ne
 8006a2c:	2301      	movne	r3, #1
 8006a2e:	2300      	moveq	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e07c      	b.n	8006b34 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d104      	bne.n	8006a4a <HAL_TIM_PWM_Start+0x82>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a48:	e013      	b.n	8006a72 <HAL_TIM_PWM_Start+0xaa>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d104      	bne.n	8006a5a <HAL_TIM_PWM_Start+0x92>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a58:	e00b      	b.n	8006a72 <HAL_TIM_PWM_Start+0xaa>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d104      	bne.n	8006a6a <HAL_TIM_PWM_Start+0xa2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a68:	e003      	b.n	8006a72 <HAL_TIM_PWM_Start+0xaa>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2201      	movs	r2, #1
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 fe98 	bl	80077b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a2d      	ldr	r2, [pc, #180]	; (8006b3c <HAL_TIM_PWM_Start+0x174>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d004      	beq.n	8006a94 <HAL_TIM_PWM_Start+0xcc>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a2c      	ldr	r2, [pc, #176]	; (8006b40 <HAL_TIM_PWM_Start+0x178>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d101      	bne.n	8006a98 <HAL_TIM_PWM_Start+0xd0>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <HAL_TIM_PWM_Start+0xd2>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d007      	beq.n	8006aae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006aac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a22      	ldr	r2, [pc, #136]	; (8006b3c <HAL_TIM_PWM_Start+0x174>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d022      	beq.n	8006afe <HAL_TIM_PWM_Start+0x136>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac0:	d01d      	beq.n	8006afe <HAL_TIM_PWM_Start+0x136>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a1f      	ldr	r2, [pc, #124]	; (8006b44 <HAL_TIM_PWM_Start+0x17c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d018      	beq.n	8006afe <HAL_TIM_PWM_Start+0x136>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a1d      	ldr	r2, [pc, #116]	; (8006b48 <HAL_TIM_PWM_Start+0x180>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d013      	beq.n	8006afe <HAL_TIM_PWM_Start+0x136>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a1c      	ldr	r2, [pc, #112]	; (8006b4c <HAL_TIM_PWM_Start+0x184>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00e      	beq.n	8006afe <HAL_TIM_PWM_Start+0x136>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a16      	ldr	r2, [pc, #88]	; (8006b40 <HAL_TIM_PWM_Start+0x178>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d009      	beq.n	8006afe <HAL_TIM_PWM_Start+0x136>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a18      	ldr	r2, [pc, #96]	; (8006b50 <HAL_TIM_PWM_Start+0x188>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d004      	beq.n	8006afe <HAL_TIM_PWM_Start+0x136>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a16      	ldr	r2, [pc, #88]	; (8006b54 <HAL_TIM_PWM_Start+0x18c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d111      	bne.n	8006b22 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b06      	cmp	r3, #6
 8006b0e:	d010      	beq.n	8006b32 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0201 	orr.w	r2, r2, #1
 8006b1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b20:	e007      	b.n	8006b32 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0201 	orr.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	40010000 	.word	0x40010000
 8006b40:	40010400 	.word	0x40010400
 8006b44:	40000400 	.word	0x40000400
 8006b48:	40000800 	.word	0x40000800
 8006b4c:	40000c00 	.word	0x40000c00
 8006b50:	40014000 	.word	0x40014000
 8006b54:	40001800 	.word	0x40001800

08006b58 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fe20 	bl	80077b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a2e      	ldr	r2, [pc, #184]	; (8006c30 <HAL_TIM_PWM_Stop+0xd8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d004      	beq.n	8006b84 <HAL_TIM_PWM_Stop+0x2c>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a2d      	ldr	r2, [pc, #180]	; (8006c34 <HAL_TIM_PWM_Stop+0xdc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d101      	bne.n	8006b88 <HAL_TIM_PWM_Stop+0x30>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <HAL_TIM_PWM_Stop+0x32>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d017      	beq.n	8006bbe <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6a1a      	ldr	r2, [r3, #32]
 8006b94:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b98:	4013      	ands	r3, r2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10f      	bne.n	8006bbe <HAL_TIM_PWM_Stop+0x66>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6a1a      	ldr	r2, [r3, #32]
 8006ba4:	f240 4344 	movw	r3, #1092	; 0x444
 8006ba8:	4013      	ands	r3, r2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d107      	bne.n	8006bbe <HAL_TIM_PWM_Stop+0x66>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6a1a      	ldr	r2, [r3, #32]
 8006bc4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006bc8:	4013      	ands	r3, r2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10f      	bne.n	8006bee <HAL_TIM_PWM_Stop+0x96>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6a1a      	ldr	r2, [r3, #32]
 8006bd4:	f240 4344 	movw	r3, #1092	; 0x444
 8006bd8:	4013      	ands	r3, r2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d107      	bne.n	8006bee <HAL_TIM_PWM_Stop+0x96>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d104      	bne.n	8006bfe <HAL_TIM_PWM_Stop+0xa6>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bfc:	e013      	b.n	8006c26 <HAL_TIM_PWM_Stop+0xce>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d104      	bne.n	8006c0e <HAL_TIM_PWM_Stop+0xb6>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c0c:	e00b      	b.n	8006c26 <HAL_TIM_PWM_Stop+0xce>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d104      	bne.n	8006c1e <HAL_TIM_PWM_Stop+0xc6>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c1c:	e003      	b.n	8006c26 <HAL_TIM_PWM_Stop+0xce>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	40010000 	.word	0x40010000
 8006c34:	40010400 	.word	0x40010400

08006c38 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d104      	bne.n	8006c56 <HAL_TIM_IC_Start_IT+0x1e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	e013      	b.n	8006c7e <HAL_TIM_IC_Start_IT+0x46>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d104      	bne.n	8006c66 <HAL_TIM_IC_Start_IT+0x2e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	e00b      	b.n	8006c7e <HAL_TIM_IC_Start_IT+0x46>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d104      	bne.n	8006c76 <HAL_TIM_IC_Start_IT+0x3e>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	e003      	b.n	8006c7e <HAL_TIM_IC_Start_IT+0x46>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d104      	bne.n	8006c90 <HAL_TIM_IC_Start_IT+0x58>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	e013      	b.n	8006cb8 <HAL_TIM_IC_Start_IT+0x80>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d104      	bne.n	8006ca0 <HAL_TIM_IC_Start_IT+0x68>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	e00b      	b.n	8006cb8 <HAL_TIM_IC_Start_IT+0x80>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b08      	cmp	r3, #8
 8006ca4:	d104      	bne.n	8006cb0 <HAL_TIM_IC_Start_IT+0x78>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	e003      	b.n	8006cb8 <HAL_TIM_IC_Start_IT+0x80>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d102      	bne.n	8006cc6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cc0:	7b7b      	ldrb	r3, [r7, #13]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d001      	beq.n	8006cca <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e0cc      	b.n	8006e64 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d104      	bne.n	8006cda <HAL_TIM_IC_Start_IT+0xa2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cd8:	e013      	b.n	8006d02 <HAL_TIM_IC_Start_IT+0xca>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b04      	cmp	r3, #4
 8006cde:	d104      	bne.n	8006cea <HAL_TIM_IC_Start_IT+0xb2>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ce8:	e00b      	b.n	8006d02 <HAL_TIM_IC_Start_IT+0xca>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d104      	bne.n	8006cfa <HAL_TIM_IC_Start_IT+0xc2>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cf8:	e003      	b.n	8006d02 <HAL_TIM_IC_Start_IT+0xca>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d104      	bne.n	8006d12 <HAL_TIM_IC_Start_IT+0xda>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d10:	e013      	b.n	8006d3a <HAL_TIM_IC_Start_IT+0x102>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	d104      	bne.n	8006d22 <HAL_TIM_IC_Start_IT+0xea>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d20:	e00b      	b.n	8006d3a <HAL_TIM_IC_Start_IT+0x102>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d104      	bne.n	8006d32 <HAL_TIM_IC_Start_IT+0xfa>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d30:	e003      	b.n	8006d3a <HAL_TIM_IC_Start_IT+0x102>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2202      	movs	r2, #2
 8006d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b0c      	cmp	r3, #12
 8006d3e:	d841      	bhi.n	8006dc4 <HAL_TIM_IC_Start_IT+0x18c>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <HAL_TIM_IC_Start_IT+0x110>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d7d 	.word	0x08006d7d
 8006d4c:	08006dc5 	.word	0x08006dc5
 8006d50:	08006dc5 	.word	0x08006dc5
 8006d54:	08006dc5 	.word	0x08006dc5
 8006d58:	08006d8f 	.word	0x08006d8f
 8006d5c:	08006dc5 	.word	0x08006dc5
 8006d60:	08006dc5 	.word	0x08006dc5
 8006d64:	08006dc5 	.word	0x08006dc5
 8006d68:	08006da1 	.word	0x08006da1
 8006d6c:	08006dc5 	.word	0x08006dc5
 8006d70:	08006dc5 	.word	0x08006dc5
 8006d74:	08006dc5 	.word	0x08006dc5
 8006d78:	08006db3 	.word	0x08006db3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68da      	ldr	r2, [r3, #12]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0202 	orr.w	r2, r2, #2
 8006d8a:	60da      	str	r2, [r3, #12]
      break;
 8006d8c:	e01d      	b.n	8006dca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f042 0204 	orr.w	r2, r2, #4
 8006d9c:	60da      	str	r2, [r3, #12]
      break;
 8006d9e:	e014      	b.n	8006dca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0208 	orr.w	r2, r2, #8
 8006dae:	60da      	str	r2, [r3, #12]
      break;
 8006db0:	e00b      	b.n	8006dca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0210 	orr.w	r2, r2, #16
 8006dc0:	60da      	str	r2, [r3, #12]
      break;
 8006dc2:	e002      	b.n	8006dca <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d148      	bne.n	8006e62 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fce9 	bl	80077b0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a22      	ldr	r2, [pc, #136]	; (8006e6c <HAL_TIM_IC_Start_IT+0x234>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d022      	beq.n	8006e2e <HAL_TIM_IC_Start_IT+0x1f6>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df0:	d01d      	beq.n	8006e2e <HAL_TIM_IC_Start_IT+0x1f6>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1e      	ldr	r2, [pc, #120]	; (8006e70 <HAL_TIM_IC_Start_IT+0x238>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d018      	beq.n	8006e2e <HAL_TIM_IC_Start_IT+0x1f6>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1c      	ldr	r2, [pc, #112]	; (8006e74 <HAL_TIM_IC_Start_IT+0x23c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d013      	beq.n	8006e2e <HAL_TIM_IC_Start_IT+0x1f6>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a1b      	ldr	r2, [pc, #108]	; (8006e78 <HAL_TIM_IC_Start_IT+0x240>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00e      	beq.n	8006e2e <HAL_TIM_IC_Start_IT+0x1f6>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a19      	ldr	r2, [pc, #100]	; (8006e7c <HAL_TIM_IC_Start_IT+0x244>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d009      	beq.n	8006e2e <HAL_TIM_IC_Start_IT+0x1f6>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a18      	ldr	r2, [pc, #96]	; (8006e80 <HAL_TIM_IC_Start_IT+0x248>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d004      	beq.n	8006e2e <HAL_TIM_IC_Start_IT+0x1f6>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a16      	ldr	r2, [pc, #88]	; (8006e84 <HAL_TIM_IC_Start_IT+0x24c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d111      	bne.n	8006e52 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b06      	cmp	r3, #6
 8006e3e:	d010      	beq.n	8006e62 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0201 	orr.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e50:	e007      	b.n	8006e62 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 0201 	orr.w	r2, r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40010000 	.word	0x40010000
 8006e70:	40000400 	.word	0x40000400
 8006e74:	40000800 	.word	0x40000800
 8006e78:	40000c00 	.word	0x40000c00
 8006e7c:	40010400 	.word	0x40010400
 8006e80:	40014000 	.word	0x40014000
 8006e84:	40001800 	.word	0x40001800

08006e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d122      	bne.n	8006ee4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d11b      	bne.n	8006ee4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0202 	mvn.w	r2, #2
 8006eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fa f9e4 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8006ed0:	e005      	b.n	8006ede <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f9fe 	bl	80072d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fa05 	bl	80072e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d122      	bne.n	8006f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d11b      	bne.n	8006f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f06f 0204 	mvn.w	r2, #4
 8006f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fa f9ba 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8006f24:	e005      	b.n	8006f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f9d4 	bl	80072d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f9db 	bl	80072e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d122      	bne.n	8006f8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d11b      	bne.n	8006f8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0208 	mvn.w	r2, #8
 8006f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2204      	movs	r2, #4
 8006f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fa f990 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f9aa 	bl	80072d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f9b1 	bl	80072e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d122      	bne.n	8006fe0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b10      	cmp	r3, #16
 8006fa6:	d11b      	bne.n	8006fe0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f06f 0210 	mvn.w	r2, #16
 8006fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7fa f966 	bl	8001298 <HAL_TIM_IC_CaptureCallback>
 8006fcc:	e005      	b.n	8006fda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f980 	bl	80072d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f987 	bl	80072e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d10e      	bne.n	800700c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d107      	bne.n	800700c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f06f 0201 	mvn.w	r2, #1
 8007004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7fc fbfa 	bl	8003800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007016:	2b80      	cmp	r3, #128	; 0x80
 8007018:	d10e      	bne.n	8007038 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007024:	2b80      	cmp	r3, #128	; 0x80
 8007026:	d107      	bne.n	8007038 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fc68 	bl	8007908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007042:	2b40      	cmp	r3, #64	; 0x40
 8007044:	d10e      	bne.n	8007064 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007050:	2b40      	cmp	r3, #64	; 0x40
 8007052:	d107      	bne.n	8007064 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800705c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f94c 	bl	80072fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b20      	cmp	r3, #32
 8007070:	d10e      	bne.n	8007090 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b20      	cmp	r3, #32
 800707e:	d107      	bne.n	8007090 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f06f 0220 	mvn.w	r2, #32
 8007088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fc32 	bl	80078f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007090:	bf00      	nop
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e048      	b.n	8007148 <HAL_TIM_OC_ConfigChannel+0xb0>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b0c      	cmp	r3, #12
 80070c2:	d839      	bhi.n	8007138 <HAL_TIM_OC_ConfigChannel+0xa0>
 80070c4:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <HAL_TIM_OC_ConfigChannel+0x34>)
 80070c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ca:	bf00      	nop
 80070cc:	08007101 	.word	0x08007101
 80070d0:	08007139 	.word	0x08007139
 80070d4:	08007139 	.word	0x08007139
 80070d8:	08007139 	.word	0x08007139
 80070dc:	0800710f 	.word	0x0800710f
 80070e0:	08007139 	.word	0x08007139
 80070e4:	08007139 	.word	0x08007139
 80070e8:	08007139 	.word	0x08007139
 80070ec:	0800711d 	.word	0x0800711d
 80070f0:	08007139 	.word	0x08007139
 80070f4:	08007139 	.word	0x08007139
 80070f8:	08007139 	.word	0x08007139
 80070fc:	0800712b 	.word	0x0800712b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68b9      	ldr	r1, [r7, #8]
 8007106:	4618      	mov	r0, r3
 8007108:	f000 f9a2 	bl	8007450 <TIM_OC1_SetConfig>
      break;
 800710c:	e017      	b.n	800713e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fa0b 	bl	8007530 <TIM_OC2_SetConfig>
      break;
 800711a:	e010      	b.n	800713e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fa7a 	bl	800761c <TIM_OC3_SetConfig>
      break;
 8007128:	e009      	b.n	800713e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68b9      	ldr	r1, [r7, #8]
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fae7 	bl	8007704 <TIM_OC4_SetConfig>
      break;
 8007136:	e002      	b.n	800713e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	75fb      	strb	r3, [r7, #23]
      break;
 800713c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007166:	2b01      	cmp	r3, #1
 8007168:	d101      	bne.n	800716e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800716a:	2302      	movs	r3, #2
 800716c:	e0ae      	b.n	80072cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b0c      	cmp	r3, #12
 800717a:	f200 809f 	bhi.w	80072bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800717e:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	080071b9 	.word	0x080071b9
 8007188:	080072bd 	.word	0x080072bd
 800718c:	080072bd 	.word	0x080072bd
 8007190:	080072bd 	.word	0x080072bd
 8007194:	080071f9 	.word	0x080071f9
 8007198:	080072bd 	.word	0x080072bd
 800719c:	080072bd 	.word	0x080072bd
 80071a0:	080072bd 	.word	0x080072bd
 80071a4:	0800723b 	.word	0x0800723b
 80071a8:	080072bd 	.word	0x080072bd
 80071ac:	080072bd 	.word	0x080072bd
 80071b0:	080072bd 	.word	0x080072bd
 80071b4:	0800727b 	.word	0x0800727b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68b9      	ldr	r1, [r7, #8]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f946 	bl	8007450 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699a      	ldr	r2, [r3, #24]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0208 	orr.w	r2, r2, #8
 80071d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699a      	ldr	r2, [r3, #24]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0204 	bic.w	r2, r2, #4
 80071e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6999      	ldr	r1, [r3, #24]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	691a      	ldr	r2, [r3, #16]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	619a      	str	r2, [r3, #24]
      break;
 80071f6:	e064      	b.n	80072c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 f996 	bl	8007530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6999      	ldr	r1, [r3, #24]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	021a      	lsls	r2, r3, #8
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	619a      	str	r2, [r3, #24]
      break;
 8007238:	e043      	b.n	80072c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	4618      	mov	r0, r3
 8007242:	f000 f9eb 	bl	800761c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69da      	ldr	r2, [r3, #28]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0208 	orr.w	r2, r2, #8
 8007254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69da      	ldr	r2, [r3, #28]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0204 	bic.w	r2, r2, #4
 8007264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69d9      	ldr	r1, [r3, #28]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	691a      	ldr	r2, [r3, #16]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	61da      	str	r2, [r3, #28]
      break;
 8007278:	e023      	b.n	80072c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68b9      	ldr	r1, [r7, #8]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fa3f 	bl	8007704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69da      	ldr	r2, [r3, #28]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69da      	ldr	r2, [r3, #28]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69d9      	ldr	r1, [r3, #28]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	021a      	lsls	r2, r3, #8
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	61da      	str	r2, [r3, #28]
      break;
 80072ba:	e002      	b.n	80072c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	75fb      	strb	r3, [r7, #23]
      break;
 80072c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a40      	ldr	r2, [pc, #256]	; (8007424 <TIM_Base_SetConfig+0x114>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d013      	beq.n	8007350 <TIM_Base_SetConfig+0x40>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732e:	d00f      	beq.n	8007350 <TIM_Base_SetConfig+0x40>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a3d      	ldr	r2, [pc, #244]	; (8007428 <TIM_Base_SetConfig+0x118>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d00b      	beq.n	8007350 <TIM_Base_SetConfig+0x40>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a3c      	ldr	r2, [pc, #240]	; (800742c <TIM_Base_SetConfig+0x11c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d007      	beq.n	8007350 <TIM_Base_SetConfig+0x40>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a3b      	ldr	r2, [pc, #236]	; (8007430 <TIM_Base_SetConfig+0x120>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d003      	beq.n	8007350 <TIM_Base_SetConfig+0x40>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a3a      	ldr	r2, [pc, #232]	; (8007434 <TIM_Base_SetConfig+0x124>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d108      	bne.n	8007362 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a2f      	ldr	r2, [pc, #188]	; (8007424 <TIM_Base_SetConfig+0x114>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d02b      	beq.n	80073c2 <TIM_Base_SetConfig+0xb2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007370:	d027      	beq.n	80073c2 <TIM_Base_SetConfig+0xb2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a2c      	ldr	r2, [pc, #176]	; (8007428 <TIM_Base_SetConfig+0x118>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d023      	beq.n	80073c2 <TIM_Base_SetConfig+0xb2>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a2b      	ldr	r2, [pc, #172]	; (800742c <TIM_Base_SetConfig+0x11c>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d01f      	beq.n	80073c2 <TIM_Base_SetConfig+0xb2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a2a      	ldr	r2, [pc, #168]	; (8007430 <TIM_Base_SetConfig+0x120>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d01b      	beq.n	80073c2 <TIM_Base_SetConfig+0xb2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a29      	ldr	r2, [pc, #164]	; (8007434 <TIM_Base_SetConfig+0x124>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d017      	beq.n	80073c2 <TIM_Base_SetConfig+0xb2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a28      	ldr	r2, [pc, #160]	; (8007438 <TIM_Base_SetConfig+0x128>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d013      	beq.n	80073c2 <TIM_Base_SetConfig+0xb2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a27      	ldr	r2, [pc, #156]	; (800743c <TIM_Base_SetConfig+0x12c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d00f      	beq.n	80073c2 <TIM_Base_SetConfig+0xb2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a26      	ldr	r2, [pc, #152]	; (8007440 <TIM_Base_SetConfig+0x130>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00b      	beq.n	80073c2 <TIM_Base_SetConfig+0xb2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a25      	ldr	r2, [pc, #148]	; (8007444 <TIM_Base_SetConfig+0x134>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d007      	beq.n	80073c2 <TIM_Base_SetConfig+0xb2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a24      	ldr	r2, [pc, #144]	; (8007448 <TIM_Base_SetConfig+0x138>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d003      	beq.n	80073c2 <TIM_Base_SetConfig+0xb2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a23      	ldr	r2, [pc, #140]	; (800744c <TIM_Base_SetConfig+0x13c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d108      	bne.n	80073d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a0a      	ldr	r2, [pc, #40]	; (8007424 <TIM_Base_SetConfig+0x114>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d003      	beq.n	8007408 <TIM_Base_SetConfig+0xf8>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a0c      	ldr	r2, [pc, #48]	; (8007434 <TIM_Base_SetConfig+0x124>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d103      	bne.n	8007410 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	615a      	str	r2, [r3, #20]
}
 8007416:	bf00      	nop
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	40010000 	.word	0x40010000
 8007428:	40000400 	.word	0x40000400
 800742c:	40000800 	.word	0x40000800
 8007430:	40000c00 	.word	0x40000c00
 8007434:	40010400 	.word	0x40010400
 8007438:	40014000 	.word	0x40014000
 800743c:	40014400 	.word	0x40014400
 8007440:	40014800 	.word	0x40014800
 8007444:	40001800 	.word	0x40001800
 8007448:	40001c00 	.word	0x40001c00
 800744c:	40002000 	.word	0x40002000

08007450 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	f023 0201 	bic.w	r2, r3, #1
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0303 	bic.w	r3, r3, #3
 8007486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4313      	orrs	r3, r2
 8007490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f023 0302 	bic.w	r3, r3, #2
 8007498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a20      	ldr	r2, [pc, #128]	; (8007528 <TIM_OC1_SetConfig+0xd8>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d003      	beq.n	80074b4 <TIM_OC1_SetConfig+0x64>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a1f      	ldr	r2, [pc, #124]	; (800752c <TIM_OC1_SetConfig+0xdc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d10c      	bne.n	80074ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f023 0308 	bic.w	r3, r3, #8
 80074ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f023 0304 	bic.w	r3, r3, #4
 80074cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a15      	ldr	r2, [pc, #84]	; (8007528 <TIM_OC1_SetConfig+0xd8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d003      	beq.n	80074de <TIM_OC1_SetConfig+0x8e>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a14      	ldr	r2, [pc, #80]	; (800752c <TIM_OC1_SetConfig+0xdc>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d111      	bne.n	8007502 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	4313      	orrs	r3, r2
 8007500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	621a      	str	r2, [r3, #32]
}
 800751c:	bf00      	nop
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	40010000 	.word	0x40010000
 800752c:	40010400 	.word	0x40010400

08007530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	f023 0210 	bic.w	r2, r3, #16
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	021b      	lsls	r3, r3, #8
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4313      	orrs	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f023 0320 	bic.w	r3, r3, #32
 800757a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	011b      	lsls	r3, r3, #4
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	4313      	orrs	r3, r2
 8007586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a22      	ldr	r2, [pc, #136]	; (8007614 <TIM_OC2_SetConfig+0xe4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <TIM_OC2_SetConfig+0x68>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a21      	ldr	r2, [pc, #132]	; (8007618 <TIM_OC2_SetConfig+0xe8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d10d      	bne.n	80075b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800759e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	011b      	lsls	r3, r3, #4
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a17      	ldr	r2, [pc, #92]	; (8007614 <TIM_OC2_SetConfig+0xe4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d003      	beq.n	80075c4 <TIM_OC2_SetConfig+0x94>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a16      	ldr	r2, [pc, #88]	; (8007618 <TIM_OC2_SetConfig+0xe8>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d113      	bne.n	80075ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	4313      	orrs	r3, r2
 80075de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	621a      	str	r2, [r3, #32]
}
 8007606:	bf00      	nop
 8007608:	371c      	adds	r7, #28
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	40010000 	.word	0x40010000
 8007618:	40010400 	.word	0x40010400

0800761c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0303 	bic.w	r3, r3, #3
 8007652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	021b      	lsls	r3, r3, #8
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	4313      	orrs	r3, r2
 8007670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a21      	ldr	r2, [pc, #132]	; (80076fc <TIM_OC3_SetConfig+0xe0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d003      	beq.n	8007682 <TIM_OC3_SetConfig+0x66>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a20      	ldr	r2, [pc, #128]	; (8007700 <TIM_OC3_SetConfig+0xe4>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d10d      	bne.n	800769e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	021b      	lsls	r3, r3, #8
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	4313      	orrs	r3, r2
 8007694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800769c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a16      	ldr	r2, [pc, #88]	; (80076fc <TIM_OC3_SetConfig+0xe0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d003      	beq.n	80076ae <TIM_OC3_SetConfig+0x92>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a15      	ldr	r2, [pc, #84]	; (8007700 <TIM_OC3_SetConfig+0xe4>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d113      	bne.n	80076d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	011b      	lsls	r3, r3, #4
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	621a      	str	r2, [r3, #32]
}
 80076f0:	bf00      	nop
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	40010000 	.word	0x40010000
 8007700:	40010400 	.word	0x40010400

08007704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800773a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4313      	orrs	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800774e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	031b      	lsls	r3, r3, #12
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a12      	ldr	r2, [pc, #72]	; (80077a8 <TIM_OC4_SetConfig+0xa4>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d003      	beq.n	800776c <TIM_OC4_SetConfig+0x68>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a11      	ldr	r2, [pc, #68]	; (80077ac <TIM_OC4_SetConfig+0xa8>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d109      	bne.n	8007780 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	019b      	lsls	r3, r3, #6
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	4313      	orrs	r3, r2
 800777e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	621a      	str	r2, [r3, #32]
}
 800779a:	bf00      	nop
 800779c:	371c      	adds	r7, #28
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	40010000 	.word	0x40010000
 80077ac:	40010400 	.word	0x40010400

080077b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b087      	sub	sp, #28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f003 031f 	and.w	r3, r3, #31
 80077c2:	2201      	movs	r2, #1
 80077c4:	fa02 f303 	lsl.w	r3, r2, r3
 80077c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6a1a      	ldr	r2, [r3, #32]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	43db      	mvns	r3, r3
 80077d2:	401a      	ands	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6a1a      	ldr	r2, [r3, #32]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f003 031f 	and.w	r3, r3, #31
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	fa01 f303 	lsl.w	r3, r1, r3
 80077e8:	431a      	orrs	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	621a      	str	r2, [r3, #32]
}
 80077ee:	bf00      	nop
 80077f0:	371c      	adds	r7, #28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
	...

080077fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007810:	2302      	movs	r3, #2
 8007812:	e05a      	b.n	80078ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a21      	ldr	r2, [pc, #132]	; (80078d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d022      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007860:	d01d      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a1d      	ldr	r2, [pc, #116]	; (80078dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d018      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a1b      	ldr	r2, [pc, #108]	; (80078e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d013      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a1a      	ldr	r2, [pc, #104]	; (80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00e      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a18      	ldr	r2, [pc, #96]	; (80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d009      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a17      	ldr	r2, [pc, #92]	; (80078ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d004      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a15      	ldr	r2, [pc, #84]	; (80078f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d10c      	bne.n	80078b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	40010000 	.word	0x40010000
 80078dc:	40000400 	.word	0x40000400
 80078e0:	40000800 	.word	0x40000800
 80078e4:	40000c00 	.word	0x40000c00
 80078e8:	40010400 	.word	0x40010400
 80078ec:	40014000 	.word	0x40014000
 80078f0:	40001800 	.word	0x40001800

080078f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e03f      	b.n	80079ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d106      	bne.n	8007948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7fc f992 	bl	8003c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2224      	movs	r2, #36	; 0x24
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68da      	ldr	r2, [r3, #12]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800795e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fddf 	bl	8008524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	695a      	ldr	r2, [r3, #20]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68da      	ldr	r2, [r3, #12]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2220      	movs	r2, #32
 80079a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b08a      	sub	sp, #40	; 0x28
 80079ba:	af02      	add	r7, sp, #8
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	603b      	str	r3, [r7, #0]
 80079c2:	4613      	mov	r3, r2
 80079c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	d17c      	bne.n	8007ad0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <HAL_UART_Transmit+0x2c>
 80079dc:	88fb      	ldrh	r3, [r7, #6]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e075      	b.n	8007ad2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d101      	bne.n	80079f4 <HAL_UART_Transmit+0x3e>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e06e      	b.n	8007ad2 <HAL_UART_Transmit+0x11c>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2221      	movs	r2, #33	; 0x21
 8007a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a0a:	f7fc fc3d 	bl	8004288 <HAL_GetTick>
 8007a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	88fa      	ldrh	r2, [r7, #6]
 8007a14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	88fa      	ldrh	r2, [r7, #6]
 8007a1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a24:	d108      	bne.n	8007a38 <HAL_UART_Transmit+0x82>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d104      	bne.n	8007a38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	61bb      	str	r3, [r7, #24]
 8007a36:	e003      	b.n	8007a40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007a48:	e02a      	b.n	8007aa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2200      	movs	r2, #0
 8007a52:	2180      	movs	r1, #128	; 0x80
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 fb1f 	bl	8008098 <UART_WaitOnFlagUntilTimeout>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e036      	b.n	8007ad2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10b      	bne.n	8007a82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	3302      	adds	r3, #2
 8007a7e:	61bb      	str	r3, [r7, #24]
 8007a80:	e007      	b.n	8007a92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	781a      	ldrb	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1cf      	bne.n	8007a4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2140      	movs	r1, #64	; 0x40
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 faef 	bl	8008098 <UART_WaitOnFlagUntilTimeout>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e006      	b.n	8007ad2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	e000      	b.n	8007ad2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007ad0:	2302      	movs	r3, #2
  }
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3720      	adds	r7, #32
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d11d      	bne.n	8007b30 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <HAL_UART_Receive_IT+0x26>
 8007afa:	88fb      	ldrh	r3, [r7, #6]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e016      	b.n	8007b32 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d101      	bne.n	8007b12 <HAL_UART_Receive_IT+0x38>
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e00f      	b.n	8007b32 <HAL_UART_Receive_IT+0x58>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b20:	88fb      	ldrh	r3, [r7, #6]
 8007b22:	461a      	mov	r2, r3
 8007b24:	68b9      	ldr	r1, [r7, #8]
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 fb24 	bl	8008174 <UART_Start_Receive_IT>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	e000      	b.n	8007b32 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007b30:	2302      	movs	r3, #2
  }
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b0ba      	sub	sp, #232	; 0xe8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b72:	f003 030f 	and.w	r3, r3, #15
 8007b76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10f      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d009      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x66>
 8007b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fc07 	bl	80083ae <UART_Receive_IT>
      return;
 8007ba0:	e256      	b.n	8008050 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 80de 	beq.w	8007d68 <HAL_UART_IRQHandler+0x22c>
 8007bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d106      	bne.n	8007bc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 80d1 	beq.w	8007d68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00b      	beq.n	8007bea <HAL_UART_IRQHandler+0xae>
 8007bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be2:	f043 0201 	orr.w	r2, r3, #1
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bee:	f003 0304 	and.w	r3, r3, #4
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <HAL_UART_IRQHandler+0xd2>
 8007bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d005      	beq.n	8007c0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	f043 0202 	orr.w	r2, r3, #2
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00b      	beq.n	8007c32 <HAL_UART_IRQHandler+0xf6>
 8007c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d005      	beq.n	8007c32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	f043 0204 	orr.w	r2, r3, #4
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c36:	f003 0308 	and.w	r3, r3, #8
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d011      	beq.n	8007c62 <HAL_UART_IRQHandler+0x126>
 8007c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c42:	f003 0320 	and.w	r3, r3, #32
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d105      	bne.n	8007c56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d005      	beq.n	8007c62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	f043 0208 	orr.w	r2, r3, #8
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 81ed 	beq.w	8008046 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c70:	f003 0320 	and.w	r3, r3, #32
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d008      	beq.n	8007c8a <HAL_UART_IRQHandler+0x14e>
 8007c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c7c:	f003 0320 	and.w	r3, r3, #32
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fb92 	bl	80083ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c94:	2b40      	cmp	r3, #64	; 0x40
 8007c96:	bf0c      	ite	eq
 8007c98:	2301      	moveq	r3, #1
 8007c9a:	2300      	movne	r3, #0
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca6:	f003 0308 	and.w	r3, r3, #8
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d103      	bne.n	8007cb6 <HAL_UART_IRQHandler+0x17a>
 8007cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d04f      	beq.n	8007d56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fa9a 	bl	80081f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc6:	2b40      	cmp	r3, #64	; 0x40
 8007cc8:	d141      	bne.n	8007d4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3314      	adds	r3, #20
 8007cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3314      	adds	r3, #20
 8007cf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d06:	e841 2300 	strex	r3, r2, [r1]
 8007d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1d9      	bne.n	8007cca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d013      	beq.n	8007d46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d22:	4a7d      	ldr	r2, [pc, #500]	; (8007f18 <HAL_UART_IRQHandler+0x3dc>)
 8007d24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fc fc2e 	bl	800458c <HAL_DMA_Abort_IT>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d016      	beq.n	8007d64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d40:	4610      	mov	r0, r2
 8007d42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d44:	e00e      	b.n	8007d64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f990 	bl	800806c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d4c:	e00a      	b.n	8007d64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f98c 	bl	800806c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d54:	e006      	b.n	8007d64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f988 	bl	800806c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d62:	e170      	b.n	8008046 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d64:	bf00      	nop
    return;
 8007d66:	e16e      	b.n	8008046 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	f040 814a 	bne.w	8008006 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d76:	f003 0310 	and.w	r3, r3, #16
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 8143 	beq.w	8008006 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d84:	f003 0310 	and.w	r3, r3, #16
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 813c 	beq.w	8008006 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60bb      	str	r3, [r7, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	60bb      	str	r3, [r7, #8]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	60bb      	str	r3, [r7, #8]
 8007da2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dae:	2b40      	cmp	r3, #64	; 0x40
 8007db0:	f040 80b4 	bne.w	8007f1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007dc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 8140 	beq.w	800804a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	f080 8139 	bcs.w	800804a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007dde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dea:	f000 8088 	beq.w	8007efe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	330c      	adds	r3, #12
 8007df4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dfc:	e853 3f00 	ldrex	r3, [r3]
 8007e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	330c      	adds	r3, #12
 8007e16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007e1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1d9      	bne.n	8007dee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3314      	adds	r3, #20
 8007e40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e4c:	f023 0301 	bic.w	r3, r3, #1
 8007e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3314      	adds	r3, #20
 8007e5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e6a:	e841 2300 	strex	r3, r2, [r1]
 8007e6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1e1      	bne.n	8007e3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3314      	adds	r3, #20
 8007e7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	3314      	adds	r3, #20
 8007e96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ea0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e3      	bne.n	8007e76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	330c      	adds	r3, #12
 8007ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ece:	f023 0310 	bic.w	r3, r3, #16
 8007ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	330c      	adds	r3, #12
 8007edc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ee0:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ee2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ee6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e3      	bne.n	8007ebc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fc fad7 	bl	80044ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f8b6 	bl	8008080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f14:	e099      	b.n	800804a <HAL_UART_IRQHandler+0x50e>
 8007f16:	bf00      	nop
 8007f18:	080082b7 	.word	0x080082b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 808b 	beq.w	800804e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007f38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 8086 	beq.w	800804e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	330c      	adds	r3, #12
 8007f48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4c:	e853 3f00 	ldrex	r3, [r3]
 8007f50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	330c      	adds	r3, #12
 8007f62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f66:	647a      	str	r2, [r7, #68]	; 0x44
 8007f68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f6e:	e841 2300 	strex	r3, r2, [r1]
 8007f72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1e3      	bne.n	8007f42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3314      	adds	r3, #20
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	623b      	str	r3, [r7, #32]
   return(result);
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	f023 0301 	bic.w	r3, r3, #1
 8007f90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3314      	adds	r3, #20
 8007f9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f9e:	633a      	str	r2, [r7, #48]	; 0x30
 8007fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa6:	e841 2300 	strex	r3, r2, [r1]
 8007faa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1e3      	bne.n	8007f7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	330c      	adds	r3, #12
 8007fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f023 0310 	bic.w	r3, r3, #16
 8007fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	330c      	adds	r3, #12
 8007fe0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007fe4:	61fa      	str	r2, [r7, #28]
 8007fe6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe8:	69b9      	ldr	r1, [r7, #24]
 8007fea:	69fa      	ldr	r2, [r7, #28]
 8007fec:	e841 2300 	strex	r3, r2, [r1]
 8007ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e3      	bne.n	8007fc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ff8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f83e 	bl	8008080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008004:	e023      	b.n	800804e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800800e:	2b00      	cmp	r3, #0
 8008010:	d009      	beq.n	8008026 <HAL_UART_IRQHandler+0x4ea>
 8008012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f95d 	bl	80082de <UART_Transmit_IT>
    return;
 8008024:	e014      	b.n	8008050 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800802a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00e      	beq.n	8008050 <HAL_UART_IRQHandler+0x514>
 8008032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d008      	beq.n	8008050 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f99d 	bl	800837e <UART_EndTransmit_IT>
    return;
 8008044:	e004      	b.n	8008050 <HAL_UART_IRQHandler+0x514>
    return;
 8008046:	bf00      	nop
 8008048:	e002      	b.n	8008050 <HAL_UART_IRQHandler+0x514>
      return;
 800804a:	bf00      	nop
 800804c:	e000      	b.n	8008050 <HAL_UART_IRQHandler+0x514>
      return;
 800804e:	bf00      	nop
  }
}
 8008050:	37e8      	adds	r7, #232	; 0xe8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop

08008058 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b090      	sub	sp, #64	; 0x40
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	603b      	str	r3, [r7, #0]
 80080a4:	4613      	mov	r3, r2
 80080a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a8:	e050      	b.n	800814c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b0:	d04c      	beq.n	800814c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d007      	beq.n	80080c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80080b8:	f7fc f8e6 	bl	8004288 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d241      	bcs.n	800814c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	330c      	adds	r3, #12
 80080ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	330c      	adds	r3, #12
 80080e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080e8:	637a      	str	r2, [r7, #52]	; 0x34
 80080ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e5      	bne.n	80080c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3314      	adds	r3, #20
 8008102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	613b      	str	r3, [r7, #16]
   return(result);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	f023 0301 	bic.w	r3, r3, #1
 8008112:	63bb      	str	r3, [r7, #56]	; 0x38
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3314      	adds	r3, #20
 800811a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800811c:	623a      	str	r2, [r7, #32]
 800811e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008120:	69f9      	ldr	r1, [r7, #28]
 8008122:	6a3a      	ldr	r2, [r7, #32]
 8008124:	e841 2300 	strex	r3, r2, [r1]
 8008128:	61bb      	str	r3, [r7, #24]
   return(result);
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e5      	bne.n	80080fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2220      	movs	r2, #32
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2220      	movs	r2, #32
 800813c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e00f      	b.n	800816c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	4013      	ands	r3, r2
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	429a      	cmp	r2, r3
 800815a:	bf0c      	ite	eq
 800815c:	2301      	moveq	r3, #1
 800815e:	2300      	movne	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	461a      	mov	r2, r3
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	429a      	cmp	r2, r3
 8008168:	d09f      	beq.n	80080aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3740      	adds	r7, #64	; 0x40
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	4613      	mov	r3, r2
 8008180:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	88fa      	ldrh	r2, [r7, #6]
 800818c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	88fa      	ldrh	r2, [r7, #6]
 8008192:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2222      	movs	r2, #34	; 0x22
 800819e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d007      	beq.n	80081c2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	695a      	ldr	r2, [r3, #20]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f042 0201 	orr.w	r2, r2, #1
 80081d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68da      	ldr	r2, [r3, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f042 0220 	orr.w	r2, r2, #32
 80081e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b095      	sub	sp, #84	; 0x54
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	330c      	adds	r3, #12
 80081fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008202:	e853 3f00 	ldrex	r3, [r3]
 8008206:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800820e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	330c      	adds	r3, #12
 8008216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008218:	643a      	str	r2, [r7, #64]	; 0x40
 800821a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800821e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008220:	e841 2300 	strex	r3, r2, [r1]
 8008224:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1e5      	bne.n	80081f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3314      	adds	r3, #20
 8008232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	61fb      	str	r3, [r7, #28]
   return(result);
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	f023 0301 	bic.w	r3, r3, #1
 8008242:	64bb      	str	r3, [r7, #72]	; 0x48
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3314      	adds	r3, #20
 800824a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800824c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800824e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e5      	bne.n	800822c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	2b01      	cmp	r3, #1
 8008266:	d119      	bne.n	800829c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	330c      	adds	r3, #12
 800826e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	e853 3f00 	ldrex	r3, [r3]
 8008276:	60bb      	str	r3, [r7, #8]
   return(result);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f023 0310 	bic.w	r3, r3, #16
 800827e:	647b      	str	r3, [r7, #68]	; 0x44
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	330c      	adds	r3, #12
 8008286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008288:	61ba      	str	r2, [r7, #24]
 800828a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	6979      	ldr	r1, [r7, #20]
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	e841 2300 	strex	r3, r2, [r1]
 8008294:	613b      	str	r3, [r7, #16]
   return(result);
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e5      	bne.n	8008268 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2220      	movs	r2, #32
 80082a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80082aa:	bf00      	nop
 80082ac:	3754      	adds	r7, #84	; 0x54
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7ff fecb 	bl	800806c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082d6:	bf00      	nop
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082de:	b480      	push	{r7}
 80082e0:	b085      	sub	sp, #20
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b21      	cmp	r3, #33	; 0x21
 80082f0:	d13e      	bne.n	8008370 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082fa:	d114      	bne.n	8008326 <UART_Transmit_IT+0x48>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d110      	bne.n	8008326 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a1b      	ldr	r3, [r3, #32]
 8008308:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008318:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	1c9a      	adds	r2, r3, #2
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	621a      	str	r2, [r3, #32]
 8008324:	e008      	b.n	8008338 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	1c59      	adds	r1, r3, #1
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6211      	str	r1, [r2, #32]
 8008330:	781a      	ldrb	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800833c:	b29b      	uxth	r3, r3
 800833e:	3b01      	subs	r3, #1
 8008340:	b29b      	uxth	r3, r3
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	4619      	mov	r1, r3
 8008346:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10f      	bne.n	800836c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800835a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68da      	ldr	r2, [r3, #12]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800836a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	e000      	b.n	8008372 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008370:	2302      	movs	r3, #2
  }
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68da      	ldr	r2, [r3, #12]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008394:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2220      	movs	r2, #32
 800839a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7ff fe5a 	bl	8008058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b08c      	sub	sp, #48	; 0x30
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b22      	cmp	r3, #34	; 0x22
 80083c0:	f040 80ab 	bne.w	800851a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083cc:	d117      	bne.n	80083fe <UART_Receive_IT+0x50>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d113      	bne.n	80083fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f6:	1c9a      	adds	r2, r3, #2
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	629a      	str	r2, [r3, #40]	; 0x28
 80083fc:	e026      	b.n	800844c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008402:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008404:	2300      	movs	r3, #0
 8008406:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008410:	d007      	beq.n	8008422 <UART_Receive_IT+0x74>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10a      	bne.n	8008430 <UART_Receive_IT+0x82>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	b2da      	uxtb	r2, r3
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	701a      	strb	r2, [r3, #0]
 800842e:	e008      	b.n	8008442 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	b2db      	uxtb	r3, r3
 8008438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800843c:	b2da      	uxtb	r2, r3
 800843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008440:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008450:	b29b      	uxth	r3, r3
 8008452:	3b01      	subs	r3, #1
 8008454:	b29b      	uxth	r3, r3
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	4619      	mov	r1, r3
 800845a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800845c:	2b00      	cmp	r3, #0
 800845e:	d15a      	bne.n	8008516 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68da      	ldr	r2, [r3, #12]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 0220 	bic.w	r2, r2, #32
 800846e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800847e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695a      	ldr	r2, [r3, #20]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0201 	bic.w	r2, r2, #1
 800848e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2220      	movs	r2, #32
 8008494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849c:	2b01      	cmp	r3, #1
 800849e:	d135      	bne.n	800850c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	330c      	adds	r3, #12
 80084ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	613b      	str	r3, [r7, #16]
   return(result);
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	f023 0310 	bic.w	r3, r3, #16
 80084bc:	627b      	str	r3, [r7, #36]	; 0x24
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	330c      	adds	r3, #12
 80084c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c6:	623a      	str	r2, [r7, #32]
 80084c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	69f9      	ldr	r1, [r7, #28]
 80084cc:	6a3a      	ldr	r2, [r7, #32]
 80084ce:	e841 2300 	strex	r3, r2, [r1]
 80084d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e5      	bne.n	80084a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0310 	and.w	r3, r3, #16
 80084e4:	2b10      	cmp	r3, #16
 80084e6:	d10a      	bne.n	80084fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084e8:	2300      	movs	r3, #0
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff fdbb 	bl	8008080 <HAL_UARTEx_RxEventCallback>
 800850a:	e002      	b.n	8008512 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7f8 fee1 	bl	80012d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	e002      	b.n	800851c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	e000      	b.n	800851c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800851a:	2302      	movs	r3, #2
  }
}
 800851c:	4618      	mov	r0, r3
 800851e:	3730      	adds	r7, #48	; 0x30
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008528:	b0c0      	sub	sp, #256	; 0x100
 800852a:	af00      	add	r7, sp, #0
 800852c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800853c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008540:	68d9      	ldr	r1, [r3, #12]
 8008542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	ea40 0301 	orr.w	r3, r0, r1
 800854c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800854e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	431a      	orrs	r2, r3
 800855c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	431a      	orrs	r2, r3
 8008564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	4313      	orrs	r3, r2
 800856c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800857c:	f021 010c 	bic.w	r1, r1, #12
 8008580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800858a:	430b      	orrs	r3, r1
 800858c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800858e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800859a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800859e:	6999      	ldr	r1, [r3, #24]
 80085a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	ea40 0301 	orr.w	r3, r0, r1
 80085aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	4b8f      	ldr	r3, [pc, #572]	; (80087f0 <UART_SetConfig+0x2cc>)
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d005      	beq.n	80085c4 <UART_SetConfig+0xa0>
 80085b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b8d      	ldr	r3, [pc, #564]	; (80087f4 <UART_SetConfig+0x2d0>)
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d104      	bne.n	80085ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085c4:	f7fd fc14 	bl	8005df0 <HAL_RCC_GetPCLK2Freq>
 80085c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80085cc:	e003      	b.n	80085d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085ce:	f7fd fbfb 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 80085d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e0:	f040 810c 	bne.w	80087fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80085f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80085f6:	4622      	mov	r2, r4
 80085f8:	462b      	mov	r3, r5
 80085fa:	1891      	adds	r1, r2, r2
 80085fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80085fe:	415b      	adcs	r3, r3
 8008600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008602:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008606:	4621      	mov	r1, r4
 8008608:	eb12 0801 	adds.w	r8, r2, r1
 800860c:	4629      	mov	r1, r5
 800860e:	eb43 0901 	adc.w	r9, r3, r1
 8008612:	f04f 0200 	mov.w	r2, #0
 8008616:	f04f 0300 	mov.w	r3, #0
 800861a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800861e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008626:	4690      	mov	r8, r2
 8008628:	4699      	mov	r9, r3
 800862a:	4623      	mov	r3, r4
 800862c:	eb18 0303 	adds.w	r3, r8, r3
 8008630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008634:	462b      	mov	r3, r5
 8008636:	eb49 0303 	adc.w	r3, r9, r3
 800863a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800863e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800864a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800864e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008652:	460b      	mov	r3, r1
 8008654:	18db      	adds	r3, r3, r3
 8008656:	653b      	str	r3, [r7, #80]	; 0x50
 8008658:	4613      	mov	r3, r2
 800865a:	eb42 0303 	adc.w	r3, r2, r3
 800865e:	657b      	str	r3, [r7, #84]	; 0x54
 8008660:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008664:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008668:	f7f8 fb7e 	bl	8000d68 <__aeabi_uldivmod>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4b61      	ldr	r3, [pc, #388]	; (80087f8 <UART_SetConfig+0x2d4>)
 8008672:	fba3 2302 	umull	r2, r3, r3, r2
 8008676:	095b      	lsrs	r3, r3, #5
 8008678:	011c      	lsls	r4, r3, #4
 800867a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800867e:	2200      	movs	r2, #0
 8008680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008684:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008688:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800868c:	4642      	mov	r2, r8
 800868e:	464b      	mov	r3, r9
 8008690:	1891      	adds	r1, r2, r2
 8008692:	64b9      	str	r1, [r7, #72]	; 0x48
 8008694:	415b      	adcs	r3, r3
 8008696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008698:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800869c:	4641      	mov	r1, r8
 800869e:	eb12 0a01 	adds.w	sl, r2, r1
 80086a2:	4649      	mov	r1, r9
 80086a4:	eb43 0b01 	adc.w	fp, r3, r1
 80086a8:	f04f 0200 	mov.w	r2, #0
 80086ac:	f04f 0300 	mov.w	r3, #0
 80086b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086bc:	4692      	mov	sl, r2
 80086be:	469b      	mov	fp, r3
 80086c0:	4643      	mov	r3, r8
 80086c2:	eb1a 0303 	adds.w	r3, sl, r3
 80086c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086ca:	464b      	mov	r3, r9
 80086cc:	eb4b 0303 	adc.w	r3, fp, r3
 80086d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80086e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80086e8:	460b      	mov	r3, r1
 80086ea:	18db      	adds	r3, r3, r3
 80086ec:	643b      	str	r3, [r7, #64]	; 0x40
 80086ee:	4613      	mov	r3, r2
 80086f0:	eb42 0303 	adc.w	r3, r2, r3
 80086f4:	647b      	str	r3, [r7, #68]	; 0x44
 80086f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80086fe:	f7f8 fb33 	bl	8000d68 <__aeabi_uldivmod>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4611      	mov	r1, r2
 8008708:	4b3b      	ldr	r3, [pc, #236]	; (80087f8 <UART_SetConfig+0x2d4>)
 800870a:	fba3 2301 	umull	r2, r3, r3, r1
 800870e:	095b      	lsrs	r3, r3, #5
 8008710:	2264      	movs	r2, #100	; 0x64
 8008712:	fb02 f303 	mul.w	r3, r2, r3
 8008716:	1acb      	subs	r3, r1, r3
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800871e:	4b36      	ldr	r3, [pc, #216]	; (80087f8 <UART_SetConfig+0x2d4>)
 8008720:	fba3 2302 	umull	r2, r3, r3, r2
 8008724:	095b      	lsrs	r3, r3, #5
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800872c:	441c      	add	r4, r3
 800872e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008732:	2200      	movs	r2, #0
 8008734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008738:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800873c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008740:	4642      	mov	r2, r8
 8008742:	464b      	mov	r3, r9
 8008744:	1891      	adds	r1, r2, r2
 8008746:	63b9      	str	r1, [r7, #56]	; 0x38
 8008748:	415b      	adcs	r3, r3
 800874a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800874c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008750:	4641      	mov	r1, r8
 8008752:	1851      	adds	r1, r2, r1
 8008754:	6339      	str	r1, [r7, #48]	; 0x30
 8008756:	4649      	mov	r1, r9
 8008758:	414b      	adcs	r3, r1
 800875a:	637b      	str	r3, [r7, #52]	; 0x34
 800875c:	f04f 0200 	mov.w	r2, #0
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008768:	4659      	mov	r1, fp
 800876a:	00cb      	lsls	r3, r1, #3
 800876c:	4651      	mov	r1, sl
 800876e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008772:	4651      	mov	r1, sl
 8008774:	00ca      	lsls	r2, r1, #3
 8008776:	4610      	mov	r0, r2
 8008778:	4619      	mov	r1, r3
 800877a:	4603      	mov	r3, r0
 800877c:	4642      	mov	r2, r8
 800877e:	189b      	adds	r3, r3, r2
 8008780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008784:	464b      	mov	r3, r9
 8008786:	460a      	mov	r2, r1
 8008788:	eb42 0303 	adc.w	r3, r2, r3
 800878c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800879c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80087a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80087a4:	460b      	mov	r3, r1
 80087a6:	18db      	adds	r3, r3, r3
 80087a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80087aa:	4613      	mov	r3, r2
 80087ac:	eb42 0303 	adc.w	r3, r2, r3
 80087b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80087ba:	f7f8 fad5 	bl	8000d68 <__aeabi_uldivmod>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4b0d      	ldr	r3, [pc, #52]	; (80087f8 <UART_SetConfig+0x2d4>)
 80087c4:	fba3 1302 	umull	r1, r3, r3, r2
 80087c8:	095b      	lsrs	r3, r3, #5
 80087ca:	2164      	movs	r1, #100	; 0x64
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	3332      	adds	r3, #50	; 0x32
 80087d6:	4a08      	ldr	r2, [pc, #32]	; (80087f8 <UART_SetConfig+0x2d4>)
 80087d8:	fba2 2303 	umull	r2, r3, r2, r3
 80087dc:	095b      	lsrs	r3, r3, #5
 80087de:	f003 0207 	and.w	r2, r3, #7
 80087e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4422      	add	r2, r4
 80087ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087ec:	e106      	b.n	80089fc <UART_SetConfig+0x4d8>
 80087ee:	bf00      	nop
 80087f0:	40011000 	.word	0x40011000
 80087f4:	40011400 	.word	0x40011400
 80087f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008800:	2200      	movs	r2, #0
 8008802:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008806:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800880a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800880e:	4642      	mov	r2, r8
 8008810:	464b      	mov	r3, r9
 8008812:	1891      	adds	r1, r2, r2
 8008814:	6239      	str	r1, [r7, #32]
 8008816:	415b      	adcs	r3, r3
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
 800881a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800881e:	4641      	mov	r1, r8
 8008820:	1854      	adds	r4, r2, r1
 8008822:	4649      	mov	r1, r9
 8008824:	eb43 0501 	adc.w	r5, r3, r1
 8008828:	f04f 0200 	mov.w	r2, #0
 800882c:	f04f 0300 	mov.w	r3, #0
 8008830:	00eb      	lsls	r3, r5, #3
 8008832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008836:	00e2      	lsls	r2, r4, #3
 8008838:	4614      	mov	r4, r2
 800883a:	461d      	mov	r5, r3
 800883c:	4643      	mov	r3, r8
 800883e:	18e3      	adds	r3, r4, r3
 8008840:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008844:	464b      	mov	r3, r9
 8008846:	eb45 0303 	adc.w	r3, r5, r3
 800884a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800884e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800885a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800885e:	f04f 0200 	mov.w	r2, #0
 8008862:	f04f 0300 	mov.w	r3, #0
 8008866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800886a:	4629      	mov	r1, r5
 800886c:	008b      	lsls	r3, r1, #2
 800886e:	4621      	mov	r1, r4
 8008870:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008874:	4621      	mov	r1, r4
 8008876:	008a      	lsls	r2, r1, #2
 8008878:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800887c:	f7f8 fa74 	bl	8000d68 <__aeabi_uldivmod>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4b60      	ldr	r3, [pc, #384]	; (8008a08 <UART_SetConfig+0x4e4>)
 8008886:	fba3 2302 	umull	r2, r3, r3, r2
 800888a:	095b      	lsrs	r3, r3, #5
 800888c:	011c      	lsls	r4, r3, #4
 800888e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008892:	2200      	movs	r2, #0
 8008894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008898:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800889c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80088a0:	4642      	mov	r2, r8
 80088a2:	464b      	mov	r3, r9
 80088a4:	1891      	adds	r1, r2, r2
 80088a6:	61b9      	str	r1, [r7, #24]
 80088a8:	415b      	adcs	r3, r3
 80088aa:	61fb      	str	r3, [r7, #28]
 80088ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088b0:	4641      	mov	r1, r8
 80088b2:	1851      	adds	r1, r2, r1
 80088b4:	6139      	str	r1, [r7, #16]
 80088b6:	4649      	mov	r1, r9
 80088b8:	414b      	adcs	r3, r1
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	f04f 0200 	mov.w	r2, #0
 80088c0:	f04f 0300 	mov.w	r3, #0
 80088c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088c8:	4659      	mov	r1, fp
 80088ca:	00cb      	lsls	r3, r1, #3
 80088cc:	4651      	mov	r1, sl
 80088ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088d2:	4651      	mov	r1, sl
 80088d4:	00ca      	lsls	r2, r1, #3
 80088d6:	4610      	mov	r0, r2
 80088d8:	4619      	mov	r1, r3
 80088da:	4603      	mov	r3, r0
 80088dc:	4642      	mov	r2, r8
 80088de:	189b      	adds	r3, r3, r2
 80088e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088e4:	464b      	mov	r3, r9
 80088e6:	460a      	mov	r2, r1
 80088e8:	eb42 0303 	adc.w	r3, r2, r3
 80088ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80088fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80088fc:	f04f 0200 	mov.w	r2, #0
 8008900:	f04f 0300 	mov.w	r3, #0
 8008904:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008908:	4649      	mov	r1, r9
 800890a:	008b      	lsls	r3, r1, #2
 800890c:	4641      	mov	r1, r8
 800890e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008912:	4641      	mov	r1, r8
 8008914:	008a      	lsls	r2, r1, #2
 8008916:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800891a:	f7f8 fa25 	bl	8000d68 <__aeabi_uldivmod>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4611      	mov	r1, r2
 8008924:	4b38      	ldr	r3, [pc, #224]	; (8008a08 <UART_SetConfig+0x4e4>)
 8008926:	fba3 2301 	umull	r2, r3, r3, r1
 800892a:	095b      	lsrs	r3, r3, #5
 800892c:	2264      	movs	r2, #100	; 0x64
 800892e:	fb02 f303 	mul.w	r3, r2, r3
 8008932:	1acb      	subs	r3, r1, r3
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	3332      	adds	r3, #50	; 0x32
 8008938:	4a33      	ldr	r2, [pc, #204]	; (8008a08 <UART_SetConfig+0x4e4>)
 800893a:	fba2 2303 	umull	r2, r3, r2, r3
 800893e:	095b      	lsrs	r3, r3, #5
 8008940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008944:	441c      	add	r4, r3
 8008946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800894a:	2200      	movs	r2, #0
 800894c:	673b      	str	r3, [r7, #112]	; 0x70
 800894e:	677a      	str	r2, [r7, #116]	; 0x74
 8008950:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008954:	4642      	mov	r2, r8
 8008956:	464b      	mov	r3, r9
 8008958:	1891      	adds	r1, r2, r2
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	415b      	adcs	r3, r3
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008964:	4641      	mov	r1, r8
 8008966:	1851      	adds	r1, r2, r1
 8008968:	6039      	str	r1, [r7, #0]
 800896a:	4649      	mov	r1, r9
 800896c:	414b      	adcs	r3, r1
 800896e:	607b      	str	r3, [r7, #4]
 8008970:	f04f 0200 	mov.w	r2, #0
 8008974:	f04f 0300 	mov.w	r3, #0
 8008978:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800897c:	4659      	mov	r1, fp
 800897e:	00cb      	lsls	r3, r1, #3
 8008980:	4651      	mov	r1, sl
 8008982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008986:	4651      	mov	r1, sl
 8008988:	00ca      	lsls	r2, r1, #3
 800898a:	4610      	mov	r0, r2
 800898c:	4619      	mov	r1, r3
 800898e:	4603      	mov	r3, r0
 8008990:	4642      	mov	r2, r8
 8008992:	189b      	adds	r3, r3, r2
 8008994:	66bb      	str	r3, [r7, #104]	; 0x68
 8008996:	464b      	mov	r3, r9
 8008998:	460a      	mov	r2, r1
 800899a:	eb42 0303 	adc.w	r3, r2, r3
 800899e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	663b      	str	r3, [r7, #96]	; 0x60
 80089aa:	667a      	str	r2, [r7, #100]	; 0x64
 80089ac:	f04f 0200 	mov.w	r2, #0
 80089b0:	f04f 0300 	mov.w	r3, #0
 80089b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80089b8:	4649      	mov	r1, r9
 80089ba:	008b      	lsls	r3, r1, #2
 80089bc:	4641      	mov	r1, r8
 80089be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089c2:	4641      	mov	r1, r8
 80089c4:	008a      	lsls	r2, r1, #2
 80089c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80089ca:	f7f8 f9cd 	bl	8000d68 <__aeabi_uldivmod>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4b0d      	ldr	r3, [pc, #52]	; (8008a08 <UART_SetConfig+0x4e4>)
 80089d4:	fba3 1302 	umull	r1, r3, r3, r2
 80089d8:	095b      	lsrs	r3, r3, #5
 80089da:	2164      	movs	r1, #100	; 0x64
 80089dc:	fb01 f303 	mul.w	r3, r1, r3
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	3332      	adds	r3, #50	; 0x32
 80089e6:	4a08      	ldr	r2, [pc, #32]	; (8008a08 <UART_SetConfig+0x4e4>)
 80089e8:	fba2 2303 	umull	r2, r3, r2, r3
 80089ec:	095b      	lsrs	r3, r3, #5
 80089ee:	f003 020f 	and.w	r2, r3, #15
 80089f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4422      	add	r2, r4
 80089fa:	609a      	str	r2, [r3, #8]
}
 80089fc:	bf00      	nop
 80089fe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008a02:	46bd      	mov	sp, r7
 8008a04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a08:	51eb851f 	.word	0x51eb851f

08008a0c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f103 0208 	add.w	r2, r3, #8
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f04f 32ff 	mov.w	r2, #4294967295
 8008a24:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f103 0208 	add.w	r2, r3, #8
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f103 0208 	add.w	r2, r3, #8
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a5a:	bf00      	nop
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7c:	d103      	bne.n	8008a86 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e00c      	b.n	8008aa0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	3308      	adds	r3, #8
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	e002      	b.n	8008a94 <vListInsert+0x2e>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d2f6      	bcs.n	8008a8e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	601a      	str	r2, [r3, #0]
}
 8008acc:	bf00      	nop
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6892      	ldr	r2, [r2, #8]
 8008aee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6852      	ldr	r2, [r2, #4]
 8008af8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d103      	bne.n	8008b0c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689a      	ldr	r2, [r3, #8]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	1e5a      	subs	r2, r3, #1
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8008b36:	2301      	movs	r3, #1
 8008b38:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10a      	bne.n	8008b5a <xQueueGenericReset+0x2e>
        __asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	60fb      	str	r3, [r7, #12]
    }
 8008b56:	bf00      	nop
 8008b58:	e7fe      	b.n	8008b58 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d05d      	beq.n	8008c1c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d059      	beq.n	8008c1c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b70:	2100      	movs	r1, #0
 8008b72:	fba3 2302 	umull	r2, r3, r3, r2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d000      	beq.n	8008b7c <xQueueGenericReset+0x50>
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d14c      	bne.n	8008c1c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8008b82:	f002 fd91 	bl	800b6a8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b8e:	6939      	ldr	r1, [r7, #16]
 8008b90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b92:	fb01 f303 	mul.w	r3, r1, r3
 8008b96:	441a      	add	r2, r3
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	6939      	ldr	r1, [r7, #16]
 8008bb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008bb8:	fb01 f303 	mul.w	r3, r1, r3
 8008bbc:	441a      	add	r2, r3
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	22ff      	movs	r2, #255	; 0xff
 8008bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	22ff      	movs	r2, #255	; 0xff
 8008bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d114      	bne.n	8008c02 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d01a      	beq.n	8008c16 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	3310      	adds	r3, #16
 8008be4:	4618      	mov	r0, r3
 8008be6:	f001 fa7b 	bl	800a0e0 <xTaskRemoveFromEventList>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d012      	beq.n	8008c16 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008bf0:	4b15      	ldr	r3, [pc, #84]	; (8008c48 <xQueueGenericReset+0x11c>)
 8008bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	e009      	b.n	8008c16 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	3310      	adds	r3, #16
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff ff00 	bl	8008a0c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	3324      	adds	r3, #36	; 0x24
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7ff fefb 	bl	8008a0c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8008c16:	f002 fd77 	bl	800b708 <vPortExitCritical>
 8008c1a:	e001      	b.n	8008c20 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10a      	bne.n	8008c3c <xQueueGenericReset+0x110>
        __asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	60bb      	str	r3, [r7, #8]
    }
 8008c38:	bf00      	nop
 8008c3a:	e7fe      	b.n	8008c3a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8008c3c:	697b      	ldr	r3, [r7, #20]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3718      	adds	r7, #24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b08a      	sub	sp, #40	; 0x28
 8008c50:	af02      	add	r7, sp, #8
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	4613      	mov	r3, r2
 8008c58:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d02e      	beq.n	8008cc2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008c64:	2100      	movs	r1, #0
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d000      	beq.n	8008c74 <xQueueGenericCreate+0x28>
 8008c72:	2101      	movs	r1, #1
 8008c74:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d123      	bne.n	8008cc2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8008c82:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8008c86:	d81c      	bhi.n	8008cc2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	fb02 f303 	mul.w	r3, r2, r3
 8008c90:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	3350      	adds	r3, #80	; 0x50
 8008c96:	4618      	mov	r0, r3
 8008c98:	f002 fe30 	bl	800b8fc <pvPortMalloc>
 8008c9c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d01c      	beq.n	8008cde <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	3350      	adds	r3, #80	; 0x50
 8008cac:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cae:	79fa      	ldrb	r2, [r7, #7]
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	68b9      	ldr	r1, [r7, #8]
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f000 f814 	bl	8008ce8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8008cc0:	e00d      	b.n	8008cde <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10a      	bne.n	8008cde <xQueueGenericCreate+0x92>
        __asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	613b      	str	r3, [r7, #16]
    }
 8008cda:	bf00      	nop
 8008cdc:	e7fe      	b.n	8008cdc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008cde:	69fb      	ldr	r3, [r7, #28]
    }
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3720      	adds	r7, #32
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d103      	bne.n	8008d04 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	601a      	str	r2, [r3, #0]
 8008d02:	e002      	b.n	8008d0a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d16:	2101      	movs	r1, #1
 8008d18:	69b8      	ldr	r0, [r7, #24]
 8008d1a:	f7ff ff07 	bl	8008b2c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	78fa      	ldrb	r2, [r7, #3]
 8008d22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8008d26:	78fb      	ldrb	r3, [r7, #3]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	68f9      	ldr	r1, [r7, #12]
 8008d2c:	2073      	movs	r0, #115	; 0x73
 8008d2e:	f003 fd2d 	bl	800c78c <SEGGER_SYSVIEW_RecordU32x3>
}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b090      	sub	sp, #64	; 0x40
 8008d40:	af02      	add	r7, sp, #8
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
 8008d48:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8008d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <xQueueGenericSend+0x32>
        __asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008d6a:	bf00      	nop
 8008d6c:	e7fe      	b.n	8008d6c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d103      	bne.n	8008d7c <xQueueGenericSend+0x40>
 8008d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <xQueueGenericSend+0x44>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e000      	b.n	8008d82 <xQueueGenericSend+0x46>
 8008d80:	2300      	movs	r3, #0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10a      	bne.n	8008d9c <xQueueGenericSend+0x60>
        __asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8008d98:	bf00      	nop
 8008d9a:	e7fe      	b.n	8008d9a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d103      	bne.n	8008daa <xQueueGenericSend+0x6e>
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d101      	bne.n	8008dae <xQueueGenericSend+0x72>
 8008daa:	2301      	movs	r3, #1
 8008dac:	e000      	b.n	8008db0 <xQueueGenericSend+0x74>
 8008dae:	2300      	movs	r3, #0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <xQueueGenericSend+0x8e>
        __asm volatile
 8008db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	623b      	str	r3, [r7, #32]
    }
 8008dc6:	bf00      	nop
 8008dc8:	e7fe      	b.n	8008dc8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dca:	f001 fb9d 	bl	800a508 <xTaskGetSchedulerState>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d102      	bne.n	8008dda <xQueueGenericSend+0x9e>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <xQueueGenericSend+0xa2>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <xQueueGenericSend+0xa4>
 8008dde:	2300      	movs	r3, #0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10a      	bne.n	8008dfa <xQueueGenericSend+0xbe>
        __asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	61fb      	str	r3, [r7, #28]
    }
 8008df6:	bf00      	nop
 8008df8:	e7fe      	b.n	8008df8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008dfa:	f002 fc55 	bl	800b6a8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d302      	bcc.n	8008e10 <xQueueGenericSend+0xd4>
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d136      	bne.n	8008e7e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8008e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e12:	4618      	mov	r0, r3
 8008e14:	f004 fa70 	bl	800d2f8 <SEGGER_SYSVIEW_ShrinkId>
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	6879      	ldr	r1, [r7, #4]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	460b      	mov	r3, r1
 8008e22:	4601      	mov	r1, r0
 8008e24:	205a      	movs	r0, #90	; 0x5a
 8008e26:	f003 fd27 	bl	800c878 <SEGGER_SYSVIEW_RecordU32x4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e30:	f000 fa80 	bl	8009334 <prvCopyDataToQueue>
 8008e34:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d010      	beq.n	8008e60 <xQueueGenericSend+0x124>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e40:	3324      	adds	r3, #36	; 0x24
 8008e42:	4618      	mov	r0, r3
 8008e44:	f001 f94c 	bl	800a0e0 <xTaskRemoveFromEventList>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d013      	beq.n	8008e76 <xQueueGenericSend+0x13a>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8008e4e:	4b4d      	ldr	r3, [pc, #308]	; (8008f84 <xQueueGenericSend+0x248>)
 8008e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	e00a      	b.n	8008e76 <xQueueGenericSend+0x13a>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d007      	beq.n	8008e76 <xQueueGenericSend+0x13a>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8008e66:	4b47      	ldr	r3, [pc, #284]	; (8008f84 <xQueueGenericSend+0x248>)
 8008e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8008e76:	f002 fc47 	bl	800b708 <vPortExitCritical>
                return pdPASS;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e07d      	b.n	8008f7a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d110      	bne.n	8008ea6 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008e84:	f002 fc40 	bl	800b708 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8008e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f004 fa34 	bl	800d2f8 <SEGGER_SYSVIEW_ShrinkId>
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	6879      	ldr	r1, [r7, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	4601      	mov	r1, r0
 8008e9c:	205a      	movs	r0, #90	; 0x5a
 8008e9e:	f003 fceb 	bl	800c878 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e069      	b.n	8008f7a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d106      	bne.n	8008eba <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008eac:	f107 0314 	add.w	r3, r7, #20
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f001 f9ed 	bl	800a290 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008eba:	f002 fc25 	bl	800b708 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008ebe:	f000 fdf5 	bl	8009aac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008ec2:	f002 fbf1 	bl	800b6a8 <vPortEnterCritical>
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ecc:	b25b      	sxtb	r3, r3
 8008ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed2:	d103      	bne.n	8008edc <xQueueGenericSend+0x1a0>
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ee2:	b25b      	sxtb	r3, r3
 8008ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee8:	d103      	bne.n	8008ef2 <xQueueGenericSend+0x1b6>
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ef2:	f002 fc09 	bl	800b708 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ef6:	1d3a      	adds	r2, r7, #4
 8008ef8:	f107 0314 	add.w	r3, r7, #20
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f001 f9dc 	bl	800a2bc <xTaskCheckForTimeOut>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d124      	bne.n	8008f54 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f0c:	f000 fb0a 	bl	8009524 <prvIsQueueFull>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d018      	beq.n	8008f48 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	3310      	adds	r3, #16
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f001 f872 	bl	800a008 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8008f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f26:	f000 fa95 	bl	8009454 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008f2a:	f000 fdcd 	bl	8009ac8 <xTaskResumeAll>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f47f af62 	bne.w	8008dfa <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8008f36:	4b13      	ldr	r3, [pc, #76]	; (8008f84 <xQueueGenericSend+0x248>)
 8008f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f3c:	601a      	str	r2, [r3, #0]
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	e758      	b.n	8008dfa <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8008f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f4a:	f000 fa83 	bl	8009454 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008f4e:	f000 fdbb 	bl	8009ac8 <xTaskResumeAll>
 8008f52:	e752      	b.n	8008dfa <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8008f54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f56:	f000 fa7d 	bl	8009454 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008f5a:	f000 fdb5 	bl	8009ac8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	4618      	mov	r0, r3
 8008f62:	f004 f9c9 	bl	800d2f8 <SEGGER_SYSVIEW_ShrinkId>
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	6879      	ldr	r1, [r7, #4]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4601      	mov	r1, r0
 8008f72:	205a      	movs	r0, #90	; 0x5a
 8008f74:	f003 fc80 	bl	800c878 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8008f78:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3738      	adds	r7, #56	; 0x38
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	e000ed04 	.word	0xe000ed04

08008f88 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b092      	sub	sp, #72	; 0x48
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8008f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10a      	bne.n	8008fb6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8008fb2:	bf00      	nop
 8008fb4:	e7fe      	b.n	8008fb4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d103      	bne.n	8008fc4 <xQueueGenericSendFromISR+0x3c>
 8008fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <xQueueGenericSendFromISR+0x40>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e000      	b.n	8008fca <xQueueGenericSendFromISR+0x42>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d103      	bne.n	8008ff2 <xQueueGenericSendFromISR+0x6a>
 8008fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d101      	bne.n	8008ff6 <xQueueGenericSendFromISR+0x6e>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e000      	b.n	8008ff8 <xQueueGenericSendFromISR+0x70>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800900e:	bf00      	nop
 8009010:	e7fe      	b.n	8009010 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009012:	f002 fc33 	bl	800b87c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8009016:	f3ef 8211 	mrs	r2, BASEPRI
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	623a      	str	r2, [r7, #32]
 800902c:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800902e:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009030:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903a:	429a      	cmp	r2, r3
 800903c:	d302      	bcc.n	8009044 <xQueueGenericSendFromISR+0xbc>
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2b02      	cmp	r3, #2
 8009042:	d150      	bne.n	80090e6 <xQueueGenericSendFromISR+0x15e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8009044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800904a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800904e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009052:	637b      	str	r3, [r7, #52]	; 0x34

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009056:	4618      	mov	r0, r3
 8009058:	f004 f94e 	bl	800d2f8 <SEGGER_SYSVIEW_ShrinkId>
 800905c:	4601      	mov	r1, r0
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	461a      	mov	r2, r3
 8009062:	2060      	movs	r0, #96	; 0x60
 8009064:	f003 fb38 	bl	800c6d8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	68b9      	ldr	r1, [r7, #8]
 800906c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800906e:	f000 f961 	bl	8009334 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8009072:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8009076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907a:	d112      	bne.n	80090a2 <xQueueGenericSendFromISR+0x11a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800907c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	2b00      	cmp	r3, #0
 8009082:	d02d      	beq.n	80090e0 <xQueueGenericSendFromISR+0x158>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009086:	3324      	adds	r3, #36	; 0x24
 8009088:	4618      	mov	r0, r3
 800908a:	f001 f829 	bl	800a0e0 <xTaskRemoveFromEventList>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d025      	beq.n	80090e0 <xQueueGenericSendFromISR+0x158>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d022      	beq.n	80090e0 <xQueueGenericSendFromISR+0x158>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	601a      	str	r2, [r3, #0]
 80090a0:	e01e      	b.n	80090e0 <xQueueGenericSendFromISR+0x158>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80090a2:	f000 fe21 	bl	8009ce8 <uxTaskGetNumberOfTasks>
 80090a6:	6338      	str	r0, [r7, #48]	; 0x30
 80090a8:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80090ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d916      	bls.n	80090e0 <xQueueGenericSendFromISR+0x158>
 80090b2:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80090b6:	2b7f      	cmp	r3, #127	; 0x7f
 80090b8:	d10a      	bne.n	80090d0 <xQueueGenericSendFromISR+0x148>
        __asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	61bb      	str	r3, [r7, #24]
    }
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <xQueueGenericSendFromISR+0x146>
 80090d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80090d4:	3301      	adds	r3, #1
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	b25a      	sxtb	r2, r3
 80090da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80090e0:	2301      	movs	r3, #1
 80090e2:	647b      	str	r3, [r7, #68]	; 0x44
        {
 80090e4:	e00b      	b.n	80090fe <xQueueGenericSendFromISR+0x176>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80090e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e8:	4618      	mov	r0, r3
 80090ea:	f004 f905 	bl	800d2f8 <SEGGER_SYSVIEW_ShrinkId>
 80090ee:	4601      	mov	r1, r0
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	461a      	mov	r2, r3
 80090f4:	2060      	movs	r0, #96	; 0x60
 80090f6:	f003 faef 	bl	800c6d8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	647b      	str	r3, [r7, #68]	; 0x44
 80090fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009100:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8009108:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800910a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800910c:	4618      	mov	r0, r3
 800910e:	3748      	adds	r7, #72	; 0x48
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009114:	b590      	push	{r4, r7, lr}
 8009116:	b08f      	sub	sp, #60	; 0x3c
 8009118:	af02      	add	r7, sp, #8
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009120:	2300      	movs	r3, #0
 8009122:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10a      	bne.n	8009144 <xQueueReceive+0x30>
        __asm volatile
 800912e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009132:	f383 8811 	msr	BASEPRI, r3
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	623b      	str	r3, [r7, #32]
    }
 8009140:	bf00      	nop
 8009142:	e7fe      	b.n	8009142 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d103      	bne.n	8009152 <xQueueReceive+0x3e>
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <xQueueReceive+0x42>
 8009152:	2301      	movs	r3, #1
 8009154:	e000      	b.n	8009158 <xQueueReceive+0x44>
 8009156:	2300      	movs	r3, #0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10a      	bne.n	8009172 <xQueueReceive+0x5e>
        __asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	61fb      	str	r3, [r7, #28]
    }
 800916e:	bf00      	nop
 8009170:	e7fe      	b.n	8009170 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009172:	f001 f9c9 	bl	800a508 <xTaskGetSchedulerState>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d102      	bne.n	8009182 <xQueueReceive+0x6e>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <xQueueReceive+0x72>
 8009182:	2301      	movs	r3, #1
 8009184:	e000      	b.n	8009188 <xQueueReceive+0x74>
 8009186:	2300      	movs	r3, #0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10a      	bne.n	80091a2 <xQueueReceive+0x8e>
        __asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	61bb      	str	r3, [r7, #24]
    }
 800919e:	bf00      	nop
 80091a0:	e7fe      	b.n	80091a0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80091a2:	f002 fa81 	bl	800b6a8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d02f      	beq.n	8009212 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091b6:	f000 f927 	bl	8009408 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	4618      	mov	r0, r3
 80091be:	f004 f89b 	bl	800d2f8 <SEGGER_SYSVIEW_ShrinkId>
 80091c2:	4604      	mov	r4, r0
 80091c4:	2000      	movs	r0, #0
 80091c6:	f004 f897 	bl	800d2f8 <SEGGER_SYSVIEW_ShrinkId>
 80091ca:	4602      	mov	r2, r0
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2101      	movs	r1, #1
 80091d0:	9100      	str	r1, [sp, #0]
 80091d2:	4621      	mov	r1, r4
 80091d4:	205c      	movs	r0, #92	; 0x5c
 80091d6:	f003 fb4f 	bl	800c878 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091dc:	1e5a      	subs	r2, r3, #1
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00f      	beq.n	800920a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ec:	3310      	adds	r3, #16
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 ff76 	bl	800a0e0 <xTaskRemoveFromEventList>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d007      	beq.n	800920a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80091fa:	4b4d      	ldr	r3, [pc, #308]	; (8009330 <xQueueReceive+0x21c>)
 80091fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800920a:	f002 fa7d 	bl	800b708 <vPortExitCritical>
                return pdPASS;
 800920e:	2301      	movs	r3, #1
 8009210:	e08a      	b.n	8009328 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d113      	bne.n	8009240 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009218:	f002 fa76 	bl	800b708 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	4618      	mov	r0, r3
 8009220:	f004 f86a 	bl	800d2f8 <SEGGER_SYSVIEW_ShrinkId>
 8009224:	4604      	mov	r4, r0
 8009226:	2000      	movs	r0, #0
 8009228:	f004 f866 	bl	800d2f8 <SEGGER_SYSVIEW_ShrinkId>
 800922c:	4602      	mov	r2, r0
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2101      	movs	r1, #1
 8009232:	9100      	str	r1, [sp, #0]
 8009234:	4621      	mov	r1, r4
 8009236:	205c      	movs	r0, #92	; 0x5c
 8009238:	f003 fb1e 	bl	800c878 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800923c:	2300      	movs	r3, #0
 800923e:	e073      	b.n	8009328 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d106      	bne.n	8009254 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009246:	f107 0310 	add.w	r3, r7, #16
 800924a:	4618      	mov	r0, r3
 800924c:	f001 f820 	bl	800a290 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009250:	2301      	movs	r3, #1
 8009252:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009254:	f002 fa58 	bl	800b708 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009258:	f000 fc28 	bl	8009aac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800925c:	f002 fa24 	bl	800b6a8 <vPortEnterCritical>
 8009260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009266:	b25b      	sxtb	r3, r3
 8009268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926c:	d103      	bne.n	8009276 <xQueueReceive+0x162>
 800926e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800927c:	b25b      	sxtb	r3, r3
 800927e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009282:	d103      	bne.n	800928c <xQueueReceive+0x178>
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800928c:	f002 fa3c 	bl	800b708 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009290:	1d3a      	adds	r2, r7, #4
 8009292:	f107 0310 	add.w	r3, r7, #16
 8009296:	4611      	mov	r1, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f001 f80f 	bl	800a2bc <xTaskCheckForTimeOut>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d124      	bne.n	80092ee <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092a6:	f000 f927 	bl	80094f8 <prvIsQueueEmpty>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d018      	beq.n	80092e2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b2:	3324      	adds	r3, #36	; 0x24
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 fea5 	bl	800a008 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80092be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092c0:	f000 f8c8 	bl	8009454 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80092c4:	f000 fc00 	bl	8009ac8 <xTaskResumeAll>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f47f af69 	bne.w	80091a2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80092d0:	4b17      	ldr	r3, [pc, #92]	; (8009330 <xQueueReceive+0x21c>)
 80092d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	e75f      	b.n	80091a2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80092e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e4:	f000 f8b6 	bl	8009454 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80092e8:	f000 fbee 	bl	8009ac8 <xTaskResumeAll>
 80092ec:	e759      	b.n	80091a2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80092ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092f0:	f000 f8b0 	bl	8009454 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80092f4:	f000 fbe8 	bl	8009ac8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092fa:	f000 f8fd 	bl	80094f8 <prvIsQueueEmpty>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	f43f af4e 	beq.w	80091a2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	4618      	mov	r0, r3
 800930a:	f003 fff5 	bl	800d2f8 <SEGGER_SYSVIEW_ShrinkId>
 800930e:	4604      	mov	r4, r0
 8009310:	2000      	movs	r0, #0
 8009312:	f003 fff1 	bl	800d2f8 <SEGGER_SYSVIEW_ShrinkId>
 8009316:	4602      	mov	r2, r0
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2101      	movs	r1, #1
 800931c:	9100      	str	r1, [sp, #0]
 800931e:	4621      	mov	r1, r4
 8009320:	205c      	movs	r0, #92	; 0x5c
 8009322:	f003 faa9 	bl	800c878 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009326:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009328:	4618      	mov	r0, r3
 800932a:	3734      	adds	r7, #52	; 0x34
 800932c:	46bd      	mov	sp, r7
 800932e:	bd90      	pop	{r4, r7, pc}
 8009330:	e000ed04 	.word	0xe000ed04

08009334 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009340:	2300      	movs	r3, #0
 8009342:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009348:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10d      	bne.n	800936e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d14d      	bne.n	80093f6 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	4618      	mov	r0, r3
 8009360:	f001 f8f0 	bl	800a544 <xTaskPriorityDisinherit>
 8009364:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	609a      	str	r2, [r3, #8]
 800936c:	e043      	b.n	80093f6 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d119      	bne.n	80093a8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6858      	ldr	r0, [r3, #4]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937c:	461a      	mov	r2, r3
 800937e:	68b9      	ldr	r1, [r7, #8]
 8009380:	f004 ffc1 	bl	800e306 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938c:	441a      	add	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	429a      	cmp	r2, r3
 800939c:	d32b      	bcc.n	80093f6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	605a      	str	r2, [r3, #4]
 80093a6:	e026      	b.n	80093f6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	68d8      	ldr	r0, [r3, #12]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b0:	461a      	mov	r2, r3
 80093b2:	68b9      	ldr	r1, [r7, #8]
 80093b4:	f004 ffa7 	bl	800e306 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	68da      	ldr	r2, [r3, #12]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c0:	425b      	negs	r3, r3
 80093c2:	441a      	add	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	68da      	ldr	r2, [r3, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d207      	bcs.n	80093e4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093dc:	425b      	negs	r3, r3
 80093de:	441a      	add	r2, r3
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d105      	bne.n	80093f6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80093fe:	697b      	ldr	r3, [r7, #20]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009416:	2b00      	cmp	r3, #0
 8009418:	d018      	beq.n	800944c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009422:	441a      	add	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	68da      	ldr	r2, [r3, #12]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	429a      	cmp	r2, r3
 8009432:	d303      	bcc.n	800943c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68d9      	ldr	r1, [r3, #12]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009444:	461a      	mov	r2, r3
 8009446:	6838      	ldr	r0, [r7, #0]
 8009448:	f004 ff5d 	bl	800e306 <memcpy>
    }
}
 800944c:	bf00      	nop
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800945c:	f002 f924 	bl	800b6a8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009466:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009468:	e011      	b.n	800948e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	2b00      	cmp	r3, #0
 8009470:	d012      	beq.n	8009498 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	3324      	adds	r3, #36	; 0x24
 8009476:	4618      	mov	r0, r3
 8009478:	f000 fe32 	bl	800a0e0 <xTaskRemoveFromEventList>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8009482:	f000 ff81 	bl	800a388 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009486:	7bfb      	ldrb	r3, [r7, #15]
 8009488:	3b01      	subs	r3, #1
 800948a:	b2db      	uxtb	r3, r3
 800948c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800948e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009492:	2b00      	cmp	r3, #0
 8009494:	dce9      	bgt.n	800946a <prvUnlockQueue+0x16>
 8009496:	e000      	b.n	800949a <prvUnlockQueue+0x46>
                    break;
 8009498:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	22ff      	movs	r2, #255	; 0xff
 800949e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80094a2:	f002 f931 	bl	800b708 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80094a6:	f002 f8ff 	bl	800b6a8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094b0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80094b2:	e011      	b.n	80094d8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d012      	beq.n	80094e2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3310      	adds	r3, #16
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fe0d 	bl	800a0e0 <xTaskRemoveFromEventList>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80094cc:	f000 ff5c 	bl	800a388 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80094d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	dce9      	bgt.n	80094b4 <prvUnlockQueue+0x60>
 80094e0:	e000      	b.n	80094e4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80094e2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	22ff      	movs	r2, #255	; 0xff
 80094e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80094ec:	f002 f90c 	bl	800b708 <vPortExitCritical>
}
 80094f0:	bf00      	nop
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009500:	f002 f8d2 	bl	800b6a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009508:	2b00      	cmp	r3, #0
 800950a:	d102      	bne.n	8009512 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800950c:	2301      	movs	r3, #1
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	e001      	b.n	8009516 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009516:	f002 f8f7 	bl	800b708 <vPortExitCritical>

    return xReturn;
 800951a:	68fb      	ldr	r3, [r7, #12]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800952c:	f002 f8bc 	bl	800b6a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009538:	429a      	cmp	r2, r3
 800953a:	d102      	bne.n	8009542 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800953c:	2301      	movs	r3, #1
 800953e:	60fb      	str	r3, [r7, #12]
 8009540:	e001      	b.n	8009546 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8009542:	2300      	movs	r3, #0
 8009544:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009546:	f002 f8df 	bl	800b708 <vPortExitCritical>

    return xReturn;
 800954a:	68fb      	ldr	r3, [r7, #12]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800955e:	2300      	movs	r3, #0
 8009560:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	60fb      	str	r3, [r7, #12]
    }
 800957a:	bf00      	nop
 800957c:	e7fe      	b.n	800957c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d024      	beq.n	80095ce <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009584:	2300      	movs	r3, #0
 8009586:	617b      	str	r3, [r7, #20]
 8009588:	e01e      	b.n	80095c8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800958a:	4a1c      	ldr	r2, [pc, #112]	; (80095fc <vQueueAddToRegistry+0xa8>)
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	00db      	lsls	r3, r3, #3
 8009590:	4413      	add	r3, r2
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	429a      	cmp	r2, r3
 8009598:	d105      	bne.n	80095a6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	00db      	lsls	r3, r3, #3
 800959e:	4a17      	ldr	r2, [pc, #92]	; (80095fc <vQueueAddToRegistry+0xa8>)
 80095a0:	4413      	add	r3, r2
 80095a2:	613b      	str	r3, [r7, #16]
                    break;
 80095a4:	e013      	b.n	80095ce <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10a      	bne.n	80095c2 <vQueueAddToRegistry+0x6e>
 80095ac:	4a13      	ldr	r2, [pc, #76]	; (80095fc <vQueueAddToRegistry+0xa8>)
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d104      	bne.n	80095c2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	00db      	lsls	r3, r3, #3
 80095bc:	4a0f      	ldr	r2, [pc, #60]	; (80095fc <vQueueAddToRegistry+0xa8>)
 80095be:	4413      	add	r3, r2
 80095c0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	3301      	adds	r3, #1
 80095c6:	617b      	str	r3, [r7, #20]
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	2b07      	cmp	r3, #7
 80095cc:	d9dd      	bls.n	800958a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00f      	beq.n	80095f4 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f003 fe88 	bl	800d2f8 <SEGGER_SYSVIEW_ShrinkId>
 80095e8:	4601      	mov	r1, r0
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	461a      	mov	r2, r3
 80095ee:	2071      	movs	r0, #113	; 0x71
 80095f0:	f003 f872 	bl	800c6d8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80095f4:	bf00      	nop
 80095f6:	3718      	adds	r7, #24
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	20000af0 	.word	0x20000af0

08009600 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009610:	f002 f84a 	bl	800b6a8 <vPortEnterCritical>
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800961a:	b25b      	sxtb	r3, r3
 800961c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009620:	d103      	bne.n	800962a <vQueueWaitForMessageRestricted+0x2a>
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009630:	b25b      	sxtb	r3, r3
 8009632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009636:	d103      	bne.n	8009640 <vQueueWaitForMessageRestricted+0x40>
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009640:	f002 f862 	bl	800b708 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009648:	2b00      	cmp	r3, #0
 800964a:	d106      	bne.n	800965a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	3324      	adds	r3, #36	; 0x24
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 fcfb 	bl	800a050 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800965a:	6978      	ldr	r0, [r7, #20]
 800965c:	f7ff fefa 	bl	8009454 <prvUnlockQueue>
    }
 8009660:	bf00      	nop
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009668:	b580      	push	{r7, lr}
 800966a:	b08c      	sub	sp, #48	; 0x30
 800966c:	af04      	add	r7, sp, #16
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	4613      	mov	r3, r2
 8009676:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009678:	88fb      	ldrh	r3, [r7, #6]
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4618      	mov	r0, r3
 800967e:	f002 f93d 	bl	800b8fc <pvPortMalloc>
 8009682:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d013      	beq.n	80096b2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800968a:	2058      	movs	r0, #88	; 0x58
 800968c:	f002 f936 	bl	800b8fc <pvPortMalloc>
 8009690:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d008      	beq.n	80096aa <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8009698:	2258      	movs	r2, #88	; 0x58
 800969a:	2100      	movs	r1, #0
 800969c:	69f8      	ldr	r0, [r7, #28]
 800969e:	f004 fdc4 	bl	800e22a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	631a      	str	r2, [r3, #48]	; 0x30
 80096a8:	e005      	b.n	80096b6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80096aa:	6978      	ldr	r0, [r7, #20]
 80096ac:	f002 f9e0 	bl	800ba70 <vPortFree>
 80096b0:	e001      	b.n	80096b6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80096b2:	2300      	movs	r3, #0
 80096b4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d013      	beq.n	80096e4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096bc:	88fa      	ldrh	r2, [r7, #6]
 80096be:	2300      	movs	r3, #0
 80096c0:	9303      	str	r3, [sp, #12]
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	9302      	str	r3, [sp, #8]
 80096c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c8:	9301      	str	r3, [sp, #4]
 80096ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 f80e 	bl	80096f4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80096d8:	69f8      	ldr	r0, [r7, #28]
 80096da:	f000 f899 	bl	8009810 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80096de:	2301      	movs	r3, #1
 80096e0:	61bb      	str	r3, [r7, #24]
 80096e2:	e002      	b.n	80096ea <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096e4:	f04f 33ff 	mov.w	r3, #4294967295
 80096e8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80096ea:	69bb      	ldr	r3, [r7, #24]
    }
 80096ec:	4618      	mov	r0, r3
 80096ee:	3720      	adds	r7, #32
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b088      	sub	sp, #32
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
 8009700:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	461a      	mov	r2, r3
 800970c:	21a5      	movs	r1, #165	; 0xa5
 800970e:	f004 fd8c 	bl	800e22a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800971c:	3b01      	subs	r3, #1
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	f023 0307 	bic.w	r3, r3, #7
 800972a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	f003 0307 	and.w	r3, r3, #7
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <prvInitialiseNewTask+0x58>
        __asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	617b      	str	r3, [r7, #20]
    }
 8009748:	bf00      	nop
 800974a:	e7fe      	b.n	800974a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d01e      	beq.n	8009790 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009752:	2300      	movs	r3, #0
 8009754:	61fb      	str	r3, [r7, #28]
 8009756:	e012      	b.n	800977e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	4413      	add	r3, r2
 800975e:	7819      	ldrb	r1, [r3, #0]
 8009760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	4413      	add	r3, r2
 8009766:	3334      	adds	r3, #52	; 0x34
 8009768:	460a      	mov	r2, r1
 800976a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	4413      	add	r3, r2
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d006      	beq.n	8009786 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	3301      	adds	r3, #1
 800977c:	61fb      	str	r3, [r7, #28]
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	2b09      	cmp	r3, #9
 8009782:	d9e9      	bls.n	8009758 <prvInitialiseNewTask+0x64>
 8009784:	e000      	b.n	8009788 <prvInitialiseNewTask+0x94>
            {
                break;
 8009786:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978a:	2200      	movs	r2, #0
 800978c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8009790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009792:	2b04      	cmp	r3, #4
 8009794:	d90a      	bls.n	80097ac <prvInitialiseNewTask+0xb8>
        __asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	613b      	str	r3, [r7, #16]
    }
 80097a8:	bf00      	nop
 80097aa:	e7fe      	b.n	80097aa <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	2b04      	cmp	r3, #4
 80097b0:	d901      	bls.n	80097b6 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097b2:	2304      	movs	r3, #4
 80097b4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80097b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ba:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80097bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097c0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c4:	3304      	adds	r3, #4
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7ff f940 	bl	8008a4c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ce:	3318      	adds	r3, #24
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff f93b 	bl	8008a4c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097da:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097de:	f1c3 0205 	rsb	r2, r3, #5
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ea:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	68f9      	ldr	r1, [r7, #12]
 80097f0:	69b8      	ldr	r0, [r7, #24]
 80097f2:	f001 fe29 	bl	800b448 <pxPortInitialiseStack>
 80097f6:	4602      	mov	r2, r0
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80097fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d002      	beq.n	8009808 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009806:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009808:	bf00      	nop
 800980a:	3720      	adds	r7, #32
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009810:	b5b0      	push	{r4, r5, r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af02      	add	r7, sp, #8
 8009816:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009818:	f001 ff46 	bl	800b6a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800981c:	4b4f      	ldr	r3, [pc, #316]	; (800995c <prvAddNewTaskToReadyList+0x14c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3301      	adds	r3, #1
 8009822:	4a4e      	ldr	r2, [pc, #312]	; (800995c <prvAddNewTaskToReadyList+0x14c>)
 8009824:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009826:	4b4e      	ldr	r3, [pc, #312]	; (8009960 <prvAddNewTaskToReadyList+0x150>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d109      	bne.n	8009842 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800982e:	4a4c      	ldr	r2, [pc, #304]	; (8009960 <prvAddNewTaskToReadyList+0x150>)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009834:	4b49      	ldr	r3, [pc, #292]	; (800995c <prvAddNewTaskToReadyList+0x14c>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d110      	bne.n	800985e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800983c:	f000 fdca 	bl	800a3d4 <prvInitialiseTaskLists>
 8009840:	e00d      	b.n	800985e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009842:	4b48      	ldr	r3, [pc, #288]	; (8009964 <prvAddNewTaskToReadyList+0x154>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d109      	bne.n	800985e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800984a:	4b45      	ldr	r3, [pc, #276]	; (8009960 <prvAddNewTaskToReadyList+0x150>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	429a      	cmp	r2, r3
 8009856:	d802      	bhi.n	800985e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009858:	4a41      	ldr	r2, [pc, #260]	; (8009960 <prvAddNewTaskToReadyList+0x150>)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800985e:	4b42      	ldr	r3, [pc, #264]	; (8009968 <prvAddNewTaskToReadyList+0x158>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3301      	adds	r3, #1
 8009864:	4a40      	ldr	r2, [pc, #256]	; (8009968 <prvAddNewTaskToReadyList+0x158>)
 8009866:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009868:	4b3f      	ldr	r3, [pc, #252]	; (8009968 <prvAddNewTaskToReadyList+0x158>)
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d016      	beq.n	80098a4 <prvAddNewTaskToReadyList+0x94>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4618      	mov	r0, r3
 800987a:	f003 fc77 	bl	800d16c <SEGGER_SYSVIEW_OnTaskCreate>
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988e:	461d      	mov	r5, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	461c      	mov	r4, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989a:	1ae3      	subs	r3, r4, r3
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	462b      	mov	r3, r5
 80098a0:	f002 f9f8 	bl	800bc94 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f003 fce4 	bl	800d274 <SEGGER_SYSVIEW_OnTaskStartReady>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b0:	2201      	movs	r2, #1
 80098b2:	409a      	lsls	r2, r3
 80098b4:	4b2d      	ldr	r3, [pc, #180]	; (800996c <prvAddNewTaskToReadyList+0x15c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	4a2c      	ldr	r2, [pc, #176]	; (800996c <prvAddNewTaskToReadyList+0x15c>)
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c2:	492b      	ldr	r1, [pc, #172]	; (8009970 <prvAddNewTaskToReadyList+0x160>)
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	440b      	add	r3, r1
 80098ce:	3304      	adds	r3, #4
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	609a      	str	r2, [r3, #8]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	689a      	ldr	r2, [r3, #8]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	60da      	str	r2, [r3, #12]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	3204      	adds	r2, #4
 80098ea:	605a      	str	r2, [r3, #4]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	1d1a      	adds	r2, r3, #4
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	609a      	str	r2, [r3, #8]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f8:	4613      	mov	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4a1b      	ldr	r2, [pc, #108]	; (8009970 <prvAddNewTaskToReadyList+0x160>)
 8009902:	441a      	add	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	615a      	str	r2, [r3, #20]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990c:	4918      	ldr	r1, [pc, #96]	; (8009970 <prvAddNewTaskToReadyList+0x160>)
 800990e:	4613      	mov	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	440b      	add	r3, r1
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	1c59      	adds	r1, r3, #1
 800991c:	4814      	ldr	r0, [pc, #80]	; (8009970 <prvAddNewTaskToReadyList+0x160>)
 800991e:	4613      	mov	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	4413      	add	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4403      	add	r3, r0
 8009928:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800992a:	f001 feed 	bl	800b708 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800992e:	4b0d      	ldr	r3, [pc, #52]	; (8009964 <prvAddNewTaskToReadyList+0x154>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00e      	beq.n	8009954 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009936:	4b0a      	ldr	r3, [pc, #40]	; (8009960 <prvAddNewTaskToReadyList+0x150>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009940:	429a      	cmp	r2, r3
 8009942:	d207      	bcs.n	8009954 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009944:	4b0b      	ldr	r3, [pc, #44]	; (8009974 <prvAddNewTaskToReadyList+0x164>)
 8009946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009954:	bf00      	nop
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bdb0      	pop	{r4, r5, r7, pc}
 800995c:	20000c08 	.word	0x20000c08
 8009960:	20000b30 	.word	0x20000b30
 8009964:	20000c14 	.word	0x20000c14
 8009968:	20000c24 	.word	0x20000c24
 800996c:	20000c10 	.word	0x20000c10
 8009970:	20000b34 	.word	0x20000b34
 8009974:	e000ed04 	.word	0xe000ed04

08009978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009980:	2300      	movs	r3, #0
 8009982:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d01b      	beq.n	80099c2 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800998a:	4b15      	ldr	r3, [pc, #84]	; (80099e0 <vTaskDelay+0x68>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00a      	beq.n	80099a8 <vTaskDelay+0x30>
        __asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	60bb      	str	r3, [r7, #8]
    }
 80099a4:	bf00      	nop
 80099a6:	e7fe      	b.n	80099a6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80099a8:	f000 f880 	bl	8009aac <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80099ac:	6879      	ldr	r1, [r7, #4]
 80099ae:	2023      	movs	r0, #35	; 0x23
 80099b0:	f002 fe56 	bl	800c660 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80099b4:	2100      	movs	r1, #0
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f001 f99a 	bl	800acf0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80099bc:	f000 f884 	bl	8009ac8 <xTaskResumeAll>
 80099c0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d107      	bne.n	80099d8 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80099c8:	4b06      	ldr	r3, [pc, #24]	; (80099e4 <vTaskDelay+0x6c>)
 80099ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ce:	601a      	str	r2, [r3, #0]
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80099d8:	bf00      	nop
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	20000c30 	.word	0x20000c30
 80099e4:	e000ed04 	.word	0xe000ed04

080099e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80099ee:	4b27      	ldr	r3, [pc, #156]	; (8009a8c <vTaskStartScheduler+0xa4>)
 80099f0:	9301      	str	r3, [sp, #4]
 80099f2:	2300      	movs	r3, #0
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	2300      	movs	r3, #0
 80099f8:	2282      	movs	r2, #130	; 0x82
 80099fa:	4925      	ldr	r1, [pc, #148]	; (8009a90 <vTaskStartScheduler+0xa8>)
 80099fc:	4825      	ldr	r0, [pc, #148]	; (8009a94 <vTaskStartScheduler+0xac>)
 80099fe:	f7ff fe33 	bl	8009668 <xTaskCreate>
 8009a02:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d102      	bne.n	8009a10 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8009a0a:	f001 f9f1 	bl	800adf0 <xTimerCreateTimerTask>
 8009a0e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d124      	bne.n	8009a60 <vTaskStartScheduler+0x78>
        __asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	60bb      	str	r3, [r7, #8]
    }
 8009a28:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8009a2a:	4b1b      	ldr	r3, [pc, #108]	; (8009a98 <vTaskStartScheduler+0xb0>)
 8009a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a30:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009a32:	4b1a      	ldr	r3, [pc, #104]	; (8009a9c <vTaskStartScheduler+0xb4>)
 8009a34:	2201      	movs	r2, #1
 8009a36:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a38:	4b19      	ldr	r3, [pc, #100]	; (8009aa0 <vTaskStartScheduler+0xb8>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8009a3e:	4b19      	ldr	r3, [pc, #100]	; (8009aa4 <vTaskStartScheduler+0xbc>)
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	4b12      	ldr	r3, [pc, #72]	; (8009a8c <vTaskStartScheduler+0xa4>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d102      	bne.n	8009a50 <vTaskStartScheduler+0x68>
 8009a4a:	f003 fb73 	bl	800d134 <SEGGER_SYSVIEW_OnIdle>
 8009a4e:	e004      	b.n	8009a5a <vTaskStartScheduler+0x72>
 8009a50:	4b14      	ldr	r3, [pc, #80]	; (8009aa4 <vTaskStartScheduler+0xbc>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f003 fbcb 	bl	800d1f0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8009a5a:	f001 fd83 	bl	800b564 <xPortStartScheduler>
 8009a5e:	e00e      	b.n	8009a7e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a66:	d10a      	bne.n	8009a7e <vTaskStartScheduler+0x96>
        __asm volatile
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	607b      	str	r3, [r7, #4]
    }
 8009a7a:	bf00      	nop
 8009a7c:	e7fe      	b.n	8009a7c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009a7e:	4b0a      	ldr	r3, [pc, #40]	; (8009aa8 <vTaskStartScheduler+0xc0>)
 8009a80:	681b      	ldr	r3, [r3, #0]
}
 8009a82:	bf00      	nop
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20000c2c 	.word	0x20000c2c
 8009a90:	08011494 	.word	0x08011494
 8009a94:	0800a3a1 	.word	0x0800a3a1
 8009a98:	20000c28 	.word	0x20000c28
 8009a9c:	20000c14 	.word	0x20000c14
 8009aa0:	20000c0c 	.word	0x20000c0c
 8009aa4:	20000b30 	.word	0x20000b30
 8009aa8:	20000014 	.word	0x20000014

08009aac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009aac:	b480      	push	{r7}
 8009aae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009ab0:	4b04      	ldr	r3, [pc, #16]	; (8009ac4 <vTaskSuspendAll+0x18>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	4a03      	ldr	r2, [pc, #12]	; (8009ac4 <vTaskSuspendAll+0x18>)
 8009ab8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009aba:	bf00      	nop
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	20000c30 	.word	0x20000c30

08009ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b088      	sub	sp, #32
 8009acc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8009ad6:	4b73      	ldr	r3, [pc, #460]	; (8009ca4 <xTaskResumeAll+0x1dc>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10a      	bne.n	8009af4 <xTaskResumeAll+0x2c>
        __asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	607b      	str	r3, [r7, #4]
    }
 8009af0:	bf00      	nop
 8009af2:	e7fe      	b.n	8009af2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009af4:	f001 fdd8 	bl	800b6a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8009af8:	4b6a      	ldr	r3, [pc, #424]	; (8009ca4 <xTaskResumeAll+0x1dc>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	4a69      	ldr	r2, [pc, #420]	; (8009ca4 <xTaskResumeAll+0x1dc>)
 8009b00:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b02:	4b68      	ldr	r3, [pc, #416]	; (8009ca4 <xTaskResumeAll+0x1dc>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f040 80c4 	bne.w	8009c94 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b0c:	4b66      	ldr	r3, [pc, #408]	; (8009ca8 <xTaskResumeAll+0x1e0>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 80bf 	beq.w	8009c94 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b16:	e08e      	b.n	8009c36 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b18:	4b64      	ldr	r3, [pc, #400]	; (8009cac <xTaskResumeAll+0x1e4>)
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b24:	613b      	str	r3, [r7, #16]
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	69db      	ldr	r3, [r3, #28]
 8009b2a:	69fa      	ldr	r2, [r7, #28]
 8009b2c:	6a12      	ldr	r2, [r2, #32]
 8009b2e:	609a      	str	r2, [r3, #8]
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	6a1b      	ldr	r3, [r3, #32]
 8009b34:	69fa      	ldr	r2, [r7, #28]
 8009b36:	69d2      	ldr	r2, [r2, #28]
 8009b38:	605a      	str	r2, [r3, #4]
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	3318      	adds	r3, #24
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d103      	bne.n	8009b4e <xTaskResumeAll+0x86>
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	6a1a      	ldr	r2, [r3, #32]
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	605a      	str	r2, [r3, #4]
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	2200      	movs	r2, #0
 8009b52:	629a      	str	r2, [r3, #40]	; 0x28
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	1e5a      	subs	r2, r3, #1
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	60fb      	str	r3, [r7, #12]
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	69fa      	ldr	r2, [r7, #28]
 8009b6a:	68d2      	ldr	r2, [r2, #12]
 8009b6c:	609a      	str	r2, [r3, #8]
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	6892      	ldr	r2, [r2, #8]
 8009b76:	605a      	str	r2, [r3, #4]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d103      	bne.n	8009b8c <xTaskResumeAll+0xc4>
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	605a      	str	r2, [r3, #4]
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	615a      	str	r2, [r3, #20]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	1e5a      	subs	r2, r3, #1
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f003 fb68 	bl	800d274 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	2201      	movs	r2, #1
 8009baa:	409a      	lsls	r2, r3
 8009bac:	4b40      	ldr	r3, [pc, #256]	; (8009cb0 <xTaskResumeAll+0x1e8>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	4a3f      	ldr	r2, [pc, #252]	; (8009cb0 <xTaskResumeAll+0x1e8>)
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bba:	493e      	ldr	r1, [pc, #248]	; (8009cb4 <xTaskResumeAll+0x1ec>)
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	60bb      	str	r3, [r7, #8]
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	609a      	str	r2, [r3, #8]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	689a      	ldr	r2, [r3, #8]
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	60da      	str	r2, [r3, #12]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	69fa      	ldr	r2, [r7, #28]
 8009be0:	3204      	adds	r2, #4
 8009be2:	605a      	str	r2, [r3, #4]
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	1d1a      	adds	r2, r3, #4
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	609a      	str	r2, [r3, #8]
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4a2e      	ldr	r2, [pc, #184]	; (8009cb4 <xTaskResumeAll+0x1ec>)
 8009bfa:	441a      	add	r2, r3
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	615a      	str	r2, [r3, #20]
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c04:	492b      	ldr	r1, [pc, #172]	; (8009cb4 <xTaskResumeAll+0x1ec>)
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	440b      	add	r3, r1
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	1c59      	adds	r1, r3, #1
 8009c14:	4827      	ldr	r0, [pc, #156]	; (8009cb4 <xTaskResumeAll+0x1ec>)
 8009c16:	4613      	mov	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4413      	add	r3, r2
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	4403      	add	r3, r0
 8009c20:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c26:	4b24      	ldr	r3, [pc, #144]	; (8009cb8 <xTaskResumeAll+0x1f0>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d302      	bcc.n	8009c36 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8009c30:	4b22      	ldr	r3, [pc, #136]	; (8009cbc <xTaskResumeAll+0x1f4>)
 8009c32:	2201      	movs	r2, #1
 8009c34:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c36:	4b1d      	ldr	r3, [pc, #116]	; (8009cac <xTaskResumeAll+0x1e4>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f47f af6c 	bne.w	8009b18 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009c46:	f000 fc43 	bl	800a4d0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009c4a:	4b1d      	ldr	r3, [pc, #116]	; (8009cc0 <xTaskResumeAll+0x1f8>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d010      	beq.n	8009c78 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009c56:	f000 f853 	bl	8009d00 <xTaskIncrementTick>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8009c60:	4b16      	ldr	r3, [pc, #88]	; (8009cbc <xTaskResumeAll+0x1f4>)
 8009c62:	2201      	movs	r2, #1
 8009c64:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1f1      	bne.n	8009c56 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8009c72:	4b13      	ldr	r3, [pc, #76]	; (8009cc0 <xTaskResumeAll+0x1f8>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8009c78:	4b10      	ldr	r3, [pc, #64]	; (8009cbc <xTaskResumeAll+0x1f4>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d009      	beq.n	8009c94 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8009c80:	2301      	movs	r3, #1
 8009c82:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009c84:	4b0f      	ldr	r3, [pc, #60]	; (8009cc4 <xTaskResumeAll+0x1fc>)
 8009c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c8a:	601a      	str	r2, [r3, #0]
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8009c94:	f001 fd38 	bl	800b708 <vPortExitCritical>

    return xAlreadyYielded;
 8009c98:	69bb      	ldr	r3, [r7, #24]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3720      	adds	r7, #32
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20000c30 	.word	0x20000c30
 8009ca8:	20000c08 	.word	0x20000c08
 8009cac:	20000bc8 	.word	0x20000bc8
 8009cb0:	20000c10 	.word	0x20000c10
 8009cb4:	20000b34 	.word	0x20000b34
 8009cb8:	20000b30 	.word	0x20000b30
 8009cbc:	20000c1c 	.word	0x20000c1c
 8009cc0:	20000c18 	.word	0x20000c18
 8009cc4:	e000ed04 	.word	0xe000ed04

08009cc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8009cce:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <xTaskGetTickCount+0x1c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009cd4:	687b      	ldr	r3, [r7, #4]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	20000c0c 	.word	0x20000c0c

08009ce8 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8009ce8:	b480      	push	{r7}
 8009cea:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8009cec:	4b03      	ldr	r3, [pc, #12]	; (8009cfc <uxTaskGetNumberOfTasks+0x14>)
 8009cee:	681b      	ldr	r3, [r3, #0]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	20000c08 	.word	0x20000c08

08009d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b08a      	sub	sp, #40	; 0x28
 8009d04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009d06:	2300      	movs	r3, #0
 8009d08:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d0a:	4b7f      	ldr	r3, [pc, #508]	; (8009f08 <xTaskIncrementTick+0x208>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f040 80f0 	bne.w	8009ef4 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d14:	4b7d      	ldr	r3, [pc, #500]	; (8009f0c <xTaskIncrementTick+0x20c>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009d1c:	4a7b      	ldr	r2, [pc, #492]	; (8009f0c <xTaskIncrementTick+0x20c>)
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d22:	6a3b      	ldr	r3, [r7, #32]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d120      	bne.n	8009d6a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8009d28:	4b79      	ldr	r3, [pc, #484]	; (8009f10 <xTaskIncrementTick+0x210>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00a      	beq.n	8009d48 <xTaskIncrementTick+0x48>
        __asm volatile
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	607b      	str	r3, [r7, #4]
    }
 8009d44:	bf00      	nop
 8009d46:	e7fe      	b.n	8009d46 <xTaskIncrementTick+0x46>
 8009d48:	4b71      	ldr	r3, [pc, #452]	; (8009f10 <xTaskIncrementTick+0x210>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	61fb      	str	r3, [r7, #28]
 8009d4e:	4b71      	ldr	r3, [pc, #452]	; (8009f14 <xTaskIncrementTick+0x214>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a6f      	ldr	r2, [pc, #444]	; (8009f10 <xTaskIncrementTick+0x210>)
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	4a6f      	ldr	r2, [pc, #444]	; (8009f14 <xTaskIncrementTick+0x214>)
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	6013      	str	r3, [r2, #0]
 8009d5c:	4b6e      	ldr	r3, [pc, #440]	; (8009f18 <xTaskIncrementTick+0x218>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3301      	adds	r3, #1
 8009d62:	4a6d      	ldr	r2, [pc, #436]	; (8009f18 <xTaskIncrementTick+0x218>)
 8009d64:	6013      	str	r3, [r2, #0]
 8009d66:	f000 fbb3 	bl	800a4d0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8009d6a:	4b6c      	ldr	r3, [pc, #432]	; (8009f1c <xTaskIncrementTick+0x21c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	6a3a      	ldr	r2, [r7, #32]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	f0c0 80aa 	bcc.w	8009eca <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d76:	4b66      	ldr	r3, [pc, #408]	; (8009f10 <xTaskIncrementTick+0x210>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d104      	bne.n	8009d8a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d80:	4b66      	ldr	r3, [pc, #408]	; (8009f1c <xTaskIncrementTick+0x21c>)
 8009d82:	f04f 32ff 	mov.w	r2, #4294967295
 8009d86:	601a      	str	r2, [r3, #0]
                    break;
 8009d88:	e09f      	b.n	8009eca <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d8a:	4b61      	ldr	r3, [pc, #388]	; (8009f10 <xTaskIncrementTick+0x210>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8009d9a:	6a3a      	ldr	r2, [r7, #32]
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d203      	bcs.n	8009daa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009da2:	4a5e      	ldr	r2, [pc, #376]	; (8009f1c <xTaskIncrementTick+0x21c>)
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8009da8:	e08f      	b.n	8009eca <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	613b      	str	r3, [r7, #16]
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	69ba      	ldr	r2, [r7, #24]
 8009db6:	68d2      	ldr	r2, [r2, #12]
 8009db8:	609a      	str	r2, [r3, #8]
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	6892      	ldr	r2, [r2, #8]
 8009dc2:	605a      	str	r2, [r3, #4]
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d103      	bne.n	8009dd8 <xTaskIncrementTick+0xd8>
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	68da      	ldr	r2, [r3, #12]
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	605a      	str	r2, [r3, #4]
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	615a      	str	r2, [r3, #20]
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	1e5a      	subs	r2, r3, #1
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d01e      	beq.n	8009e2e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df4:	60fb      	str	r3, [r7, #12]
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	69ba      	ldr	r2, [r7, #24]
 8009dfc:	6a12      	ldr	r2, [r2, #32]
 8009dfe:	609a      	str	r2, [r3, #8]
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	6a1b      	ldr	r3, [r3, #32]
 8009e04:	69ba      	ldr	r2, [r7, #24]
 8009e06:	69d2      	ldr	r2, [r2, #28]
 8009e08:	605a      	str	r2, [r3, #4]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	3318      	adds	r3, #24
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d103      	bne.n	8009e1e <xTaskIncrementTick+0x11e>
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	6a1a      	ldr	r2, [r3, #32]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	605a      	str	r2, [r3, #4]
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	2200      	movs	r2, #0
 8009e22:	629a      	str	r2, [r3, #40]	; 0x28
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	1e5a      	subs	r2, r3, #1
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f003 fa1f 	bl	800d274 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	409a      	lsls	r2, r3
 8009e3e:	4b38      	ldr	r3, [pc, #224]	; (8009f20 <xTaskIncrementTick+0x220>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	4a36      	ldr	r2, [pc, #216]	; (8009f20 <xTaskIncrementTick+0x220>)
 8009e46:	6013      	str	r3, [r2, #0]
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4c:	4935      	ldr	r1, [pc, #212]	; (8009f24 <xTaskIncrementTick+0x224>)
 8009e4e:	4613      	mov	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	440b      	add	r3, r1
 8009e58:	3304      	adds	r3, #4
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	60bb      	str	r3, [r7, #8]
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	609a      	str	r2, [r3, #8]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	689a      	ldr	r2, [r3, #8]
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	60da      	str	r2, [r3, #12]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	69ba      	ldr	r2, [r7, #24]
 8009e72:	3204      	adds	r2, #4
 8009e74:	605a      	str	r2, [r3, #4]
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	1d1a      	adds	r2, r3, #4
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	609a      	str	r2, [r3, #8]
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e82:	4613      	mov	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4a26      	ldr	r2, [pc, #152]	; (8009f24 <xTaskIncrementTick+0x224>)
 8009e8c:	441a      	add	r2, r3
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	615a      	str	r2, [r3, #20]
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e96:	4923      	ldr	r1, [pc, #140]	; (8009f24 <xTaskIncrementTick+0x224>)
 8009e98:	4613      	mov	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	440b      	add	r3, r1
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	1c59      	adds	r1, r3, #1
 8009ea6:	481f      	ldr	r0, [pc, #124]	; (8009f24 <xTaskIncrementTick+0x224>)
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4413      	add	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4403      	add	r3, r0
 8009eb2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb8:	4b1b      	ldr	r3, [pc, #108]	; (8009f28 <xTaskIncrementTick+0x228>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	f67f af59 	bls.w	8009d76 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ec8:	e755      	b.n	8009d76 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009eca:	4b17      	ldr	r3, [pc, #92]	; (8009f28 <xTaskIncrementTick+0x228>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed0:	4914      	ldr	r1, [pc, #80]	; (8009f24 <xTaskIncrementTick+0x224>)
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	440b      	add	r3, r1
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d901      	bls.n	8009ee6 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8009ee6:	4b11      	ldr	r3, [pc, #68]	; (8009f2c <xTaskIncrementTick+0x22c>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d007      	beq.n	8009efe <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ef2:	e004      	b.n	8009efe <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8009ef4:	4b0e      	ldr	r3, [pc, #56]	; (8009f30 <xTaskIncrementTick+0x230>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	4a0d      	ldr	r2, [pc, #52]	; (8009f30 <xTaskIncrementTick+0x230>)
 8009efc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3728      	adds	r7, #40	; 0x28
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	20000c30 	.word	0x20000c30
 8009f0c:	20000c0c 	.word	0x20000c0c
 8009f10:	20000bc0 	.word	0x20000bc0
 8009f14:	20000bc4 	.word	0x20000bc4
 8009f18:	20000c20 	.word	0x20000c20
 8009f1c:	20000c28 	.word	0x20000c28
 8009f20:	20000c10 	.word	0x20000c10
 8009f24:	20000b34 	.word	0x20000b34
 8009f28:	20000b30 	.word	0x20000b30
 8009f2c:	20000c1c 	.word	0x20000c1c
 8009f30:	20000c18 	.word	0x20000c18

08009f34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f3a:	4b2d      	ldr	r3, [pc, #180]	; (8009ff0 <vTaskSwitchContext+0xbc>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8009f42:	4b2c      	ldr	r3, [pc, #176]	; (8009ff4 <vTaskSwitchContext+0xc0>)
 8009f44:	2201      	movs	r2, #1
 8009f46:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8009f48:	e04d      	b.n	8009fe6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8009f4a:	4b2a      	ldr	r3, [pc, #168]	; (8009ff4 <vTaskSwitchContext+0xc0>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f50:	4b29      	ldr	r3, [pc, #164]	; (8009ff8 <vTaskSwitchContext+0xc4>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	fab3 f383 	clz	r3, r3
 8009f5c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8009f5e:	7afb      	ldrb	r3, [r7, #11]
 8009f60:	f1c3 031f 	rsb	r3, r3, #31
 8009f64:	617b      	str	r3, [r7, #20]
 8009f66:	4925      	ldr	r1, [pc, #148]	; (8009ffc <vTaskSwitchContext+0xc8>)
 8009f68:	697a      	ldr	r2, [r7, #20]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4413      	add	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	440b      	add	r3, r1
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10a      	bne.n	8009f90 <vTaskSwitchContext+0x5c>
        __asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	607b      	str	r3, [r7, #4]
    }
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <vTaskSwitchContext+0x5a>
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	4613      	mov	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4a18      	ldr	r2, [pc, #96]	; (8009ffc <vTaskSwitchContext+0xc8>)
 8009f9c:	4413      	add	r3, r2
 8009f9e:	613b      	str	r3, [r7, #16]
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	605a      	str	r2, [r3, #4]
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d104      	bne.n	8009fc0 <vTaskSwitchContext+0x8c>
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	605a      	str	r2, [r3, #4]
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	4a0e      	ldr	r2, [pc, #56]	; (800a000 <vTaskSwitchContext+0xcc>)
 8009fc8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8009fca:	4b0d      	ldr	r3, [pc, #52]	; (800a000 <vTaskSwitchContext+0xcc>)
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	4b0d      	ldr	r3, [pc, #52]	; (800a004 <vTaskSwitchContext+0xd0>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d102      	bne.n	8009fdc <vTaskSwitchContext+0xa8>
 8009fd6:	f003 f8ad 	bl	800d134 <SEGGER_SYSVIEW_OnIdle>
}
 8009fda:	e004      	b.n	8009fe6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8009fdc:	4b08      	ldr	r3, [pc, #32]	; (800a000 <vTaskSwitchContext+0xcc>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f003 f905 	bl	800d1f0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8009fe6:	bf00      	nop
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	20000c30 	.word	0x20000c30
 8009ff4:	20000c1c 	.word	0x20000c1c
 8009ff8:	20000c10 	.word	0x20000c10
 8009ffc:	20000b34 	.word	0x20000b34
 800a000:	20000b30 	.word	0x20000b30
 800a004:	20000c2c 	.word	0x20000c2c

0800a008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10a      	bne.n	800a02e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	60fb      	str	r3, [r7, #12]
    }
 800a02a:	bf00      	nop
 800a02c:	e7fe      	b.n	800a02c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a02e:	4b07      	ldr	r3, [pc, #28]	; (800a04c <vTaskPlaceOnEventList+0x44>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3318      	adds	r3, #24
 800a034:	4619      	mov	r1, r3
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f7fe fd15 	bl	8008a66 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a03c:	2101      	movs	r1, #1
 800a03e:	6838      	ldr	r0, [r7, #0]
 800a040:	f000 fe56 	bl	800acf0 <prvAddCurrentTaskToDelayedList>
}
 800a044:	bf00      	nop
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	20000b30 	.word	0x20000b30

0800a050 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10a      	bne.n	800a078 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800a062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	613b      	str	r3, [r7, #16]
    }
 800a074:	bf00      	nop
 800a076:	e7fe      	b.n	800a076 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	617b      	str	r3, [r7, #20]
 800a07e:	4b17      	ldr	r3, [pc, #92]	; (800a0dc <vTaskPlaceOnEventListRestricted+0x8c>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	61da      	str	r2, [r3, #28]
 800a086:	4b15      	ldr	r3, [pc, #84]	; (800a0dc <vTaskPlaceOnEventListRestricted+0x8c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	6892      	ldr	r2, [r2, #8]
 800a08e:	621a      	str	r2, [r3, #32]
 800a090:	4b12      	ldr	r3, [pc, #72]	; (800a0dc <vTaskPlaceOnEventListRestricted+0x8c>)
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	3218      	adds	r2, #24
 800a09a:	605a      	str	r2, [r3, #4]
 800a09c:	4b0f      	ldr	r3, [pc, #60]	; (800a0dc <vTaskPlaceOnEventListRestricted+0x8c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f103 0218 	add.w	r2, r3, #24
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	609a      	str	r2, [r3, #8]
 800a0a8:	4b0c      	ldr	r3, [pc, #48]	; (800a0dc <vTaskPlaceOnEventListRestricted+0x8c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	629a      	str	r2, [r3, #40]	; 0x28
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	1c5a      	adds	r2, r3, #1
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800a0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0c4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a0c6:	2024      	movs	r0, #36	; 0x24
 800a0c8:	f002 faac 	bl	800c624 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	68b8      	ldr	r0, [r7, #8]
 800a0d0:	f000 fe0e 	bl	800acf0 <prvAddCurrentTaskToDelayedList>
    }
 800a0d4:	bf00      	nop
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20000b30 	.word	0x20000b30

0800a0e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b08a      	sub	sp, #40	; 0x28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10a      	bne.n	800a10c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800a0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	60fb      	str	r3, [r7, #12]
    }
 800a108:	bf00      	nop
 800a10a:	e7fe      	b.n	800a10a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a110:	61fb      	str	r3, [r7, #28]
 800a112:	6a3b      	ldr	r3, [r7, #32]
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	6a3a      	ldr	r2, [r7, #32]
 800a118:	6a12      	ldr	r2, [r2, #32]
 800a11a:	609a      	str	r2, [r3, #8]
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	6a1b      	ldr	r3, [r3, #32]
 800a120:	6a3a      	ldr	r2, [r7, #32]
 800a122:	69d2      	ldr	r2, [r2, #28]
 800a124:	605a      	str	r2, [r3, #4]
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	685a      	ldr	r2, [r3, #4]
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	3318      	adds	r3, #24
 800a12e:	429a      	cmp	r2, r3
 800a130:	d103      	bne.n	800a13a <xTaskRemoveFromEventList+0x5a>
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	6a1a      	ldr	r2, [r3, #32]
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	605a      	str	r2, [r3, #4]
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	2200      	movs	r2, #0
 800a13e:	629a      	str	r2, [r3, #40]	; 0x28
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	1e5a      	subs	r2, r3, #1
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a14a:	4b4b      	ldr	r3, [pc, #300]	; (800a278 <xTaskRemoveFromEventList+0x198>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d162      	bne.n	800a218 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	617b      	str	r3, [r7, #20]
 800a158:	6a3b      	ldr	r3, [r7, #32]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	6a3a      	ldr	r2, [r7, #32]
 800a15e:	68d2      	ldr	r2, [r2, #12]
 800a160:	609a      	str	r2, [r3, #8]
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	6a3a      	ldr	r2, [r7, #32]
 800a168:	6892      	ldr	r2, [r2, #8]
 800a16a:	605a      	str	r2, [r3, #4]
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	685a      	ldr	r2, [r3, #4]
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	3304      	adds	r3, #4
 800a174:	429a      	cmp	r2, r3
 800a176:	d103      	bne.n	800a180 <xTaskRemoveFromEventList+0xa0>
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	68da      	ldr	r2, [r3, #12]
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	605a      	str	r2, [r3, #4]
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	2200      	movs	r2, #0
 800a184:	615a      	str	r2, [r3, #20]
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	1e5a      	subs	r2, r3, #1
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	4618      	mov	r0, r3
 800a194:	f003 f86e 	bl	800d274 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19c:	2201      	movs	r2, #1
 800a19e:	409a      	lsls	r2, r3
 800a1a0:	4b36      	ldr	r3, [pc, #216]	; (800a27c <xTaskRemoveFromEventList+0x19c>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	4a35      	ldr	r2, [pc, #212]	; (800a27c <xTaskRemoveFromEventList+0x19c>)
 800a1a8:	6013      	str	r3, [r2, #0]
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ae:	4934      	ldr	r1, [pc, #208]	; (800a280 <xTaskRemoveFromEventList+0x1a0>)
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4413      	add	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	440b      	add	r3, r1
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	613b      	str	r3, [r7, #16]
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	609a      	str	r2, [r3, #8]
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	689a      	ldr	r2, [r3, #8]
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	60da      	str	r2, [r3, #12]
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	6a3a      	ldr	r2, [r7, #32]
 800a1d4:	3204      	adds	r2, #4
 800a1d6:	605a      	str	r2, [r3, #4]
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	1d1a      	adds	r2, r3, #4
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	609a      	str	r2, [r3, #8]
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4a24      	ldr	r2, [pc, #144]	; (800a280 <xTaskRemoveFromEventList+0x1a0>)
 800a1ee:	441a      	add	r2, r3
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	615a      	str	r2, [r3, #20]
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f8:	4921      	ldr	r1, [pc, #132]	; (800a280 <xTaskRemoveFromEventList+0x1a0>)
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	440b      	add	r3, r1
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	1c59      	adds	r1, r3, #1
 800a208:	481d      	ldr	r0, [pc, #116]	; (800a280 <xTaskRemoveFromEventList+0x1a0>)
 800a20a:	4613      	mov	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4403      	add	r3, r0
 800a214:	6019      	str	r1, [r3, #0]
 800a216:	e01b      	b.n	800a250 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a218:	4b1a      	ldr	r3, [pc, #104]	; (800a284 <xTaskRemoveFromEventList+0x1a4>)
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	61bb      	str	r3, [r7, #24]
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	69ba      	ldr	r2, [r7, #24]
 800a222:	61da      	str	r2, [r3, #28]
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	621a      	str	r2, [r3, #32]
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	6a3a      	ldr	r2, [r7, #32]
 800a232:	3218      	adds	r2, #24
 800a234:	605a      	str	r2, [r3, #4]
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	f103 0218 	add.w	r2, r3, #24
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	609a      	str	r2, [r3, #8]
 800a240:	6a3b      	ldr	r3, [r7, #32]
 800a242:	4a10      	ldr	r2, [pc, #64]	; (800a284 <xTaskRemoveFromEventList+0x1a4>)
 800a244:	629a      	str	r2, [r3, #40]	; 0x28
 800a246:	4b0f      	ldr	r3, [pc, #60]	; (800a284 <xTaskRemoveFromEventList+0x1a4>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3301      	adds	r3, #1
 800a24c:	4a0d      	ldr	r2, [pc, #52]	; (800a284 <xTaskRemoveFromEventList+0x1a4>)
 800a24e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a254:	4b0c      	ldr	r3, [pc, #48]	; (800a288 <xTaskRemoveFromEventList+0x1a8>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d905      	bls.n	800a26a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a25e:	2301      	movs	r3, #1
 800a260:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a262:	4b0a      	ldr	r3, [pc, #40]	; (800a28c <xTaskRemoveFromEventList+0x1ac>)
 800a264:	2201      	movs	r2, #1
 800a266:	601a      	str	r2, [r3, #0]
 800a268:	e001      	b.n	800a26e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800a26a:	2300      	movs	r3, #0
 800a26c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a270:	4618      	mov	r0, r3
 800a272:	3728      	adds	r7, #40	; 0x28
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	20000c30 	.word	0x20000c30
 800a27c:	20000c10 	.word	0x20000c10
 800a280:	20000b34 	.word	0x20000b34
 800a284:	20000bc8 	.word	0x20000bc8
 800a288:	20000b30 	.word	0x20000b30
 800a28c:	20000c1c 	.word	0x20000c1c

0800a290 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a298:	4b06      	ldr	r3, [pc, #24]	; (800a2b4 <vTaskInternalSetTimeOutState+0x24>)
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a2a0:	4b05      	ldr	r3, [pc, #20]	; (800a2b8 <vTaskInternalSetTimeOutState+0x28>)
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	605a      	str	r2, [r3, #4]
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	20000c20 	.word	0x20000c20
 800a2b8:	20000c0c 	.word	0x20000c0c

0800a2bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b088      	sub	sp, #32
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10a      	bne.n	800a2e2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d0:	f383 8811 	msr	BASEPRI, r3
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	613b      	str	r3, [r7, #16]
    }
 800a2de:	bf00      	nop
 800a2e0:	e7fe      	b.n	800a2e0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10a      	bne.n	800a2fe <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	60fb      	str	r3, [r7, #12]
    }
 800a2fa:	bf00      	nop
 800a2fc:	e7fe      	b.n	800a2fc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800a2fe:	f001 f9d3 	bl	800b6a8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a302:	4b1f      	ldr	r3, [pc, #124]	; (800a380 <xTaskCheckForTimeOut+0xc4>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	69ba      	ldr	r2, [r7, #24]
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31a:	d102      	bne.n	800a322 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a31c:	2300      	movs	r3, #0
 800a31e:	61fb      	str	r3, [r7, #28]
 800a320:	e026      	b.n	800a370 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	4b17      	ldr	r3, [pc, #92]	; (800a384 <xTaskCheckForTimeOut+0xc8>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d00a      	beq.n	800a344 <xTaskCheckForTimeOut+0x88>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	69ba      	ldr	r2, [r7, #24]
 800a334:	429a      	cmp	r2, r3
 800a336:	d305      	bcc.n	800a344 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a338:	2301      	movs	r3, #1
 800a33a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	2200      	movs	r2, #0
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	e015      	b.n	800a370 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d20b      	bcs.n	800a366 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	1ad2      	subs	r2, r2, r3
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7ff ff98 	bl	800a290 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a360:	2300      	movs	r3, #0
 800a362:	61fb      	str	r3, [r7, #28]
 800a364:	e004      	b.n	800a370 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	2200      	movs	r2, #0
 800a36a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a36c:	2301      	movs	r3, #1
 800a36e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800a370:	f001 f9ca 	bl	800b708 <vPortExitCritical>

    return xReturn;
 800a374:	69fb      	ldr	r3, [r7, #28]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3720      	adds	r7, #32
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20000c0c 	.word	0x20000c0c
 800a384:	20000c20 	.word	0x20000c20

0800a388 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a388:	b480      	push	{r7}
 800a38a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a38c:	4b03      	ldr	r3, [pc, #12]	; (800a39c <vTaskMissedYield+0x14>)
 800a38e:	2201      	movs	r2, #1
 800a390:	601a      	str	r2, [r3, #0]
}
 800a392:	bf00      	nop
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	20000c1c 	.word	0x20000c1c

0800a3a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a3a8:	f000 f854 	bl	800a454 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a3ac:	4b07      	ldr	r3, [pc, #28]	; (800a3cc <prvIdleTask+0x2c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d907      	bls.n	800a3c4 <prvIdleTask+0x24>
            {
                taskYIELD();
 800a3b4:	4b06      	ldr	r3, [pc, #24]	; (800a3d0 <prvIdleTask+0x30>)
 800a3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 800a3c4:	f7f6 ffac 	bl	8001320 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 800a3c8:	e7ee      	b.n	800a3a8 <prvIdleTask+0x8>
 800a3ca:	bf00      	nop
 800a3cc:	20000b34 	.word	0x20000b34
 800a3d0:	e000ed04 	.word	0xe000ed04

0800a3d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3da:	2300      	movs	r3, #0
 800a3dc:	607b      	str	r3, [r7, #4]
 800a3de:	e00c      	b.n	800a3fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4413      	add	r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4a12      	ldr	r2, [pc, #72]	; (800a434 <prvInitialiseTaskLists+0x60>)
 800a3ec:	4413      	add	r3, r2
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fe fb0c 	bl	8008a0c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	607b      	str	r3, [r7, #4]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d9ef      	bls.n	800a3e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a400:	480d      	ldr	r0, [pc, #52]	; (800a438 <prvInitialiseTaskLists+0x64>)
 800a402:	f7fe fb03 	bl	8008a0c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a406:	480d      	ldr	r0, [pc, #52]	; (800a43c <prvInitialiseTaskLists+0x68>)
 800a408:	f7fe fb00 	bl	8008a0c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a40c:	480c      	ldr	r0, [pc, #48]	; (800a440 <prvInitialiseTaskLists+0x6c>)
 800a40e:	f7fe fafd 	bl	8008a0c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800a412:	480c      	ldr	r0, [pc, #48]	; (800a444 <prvInitialiseTaskLists+0x70>)
 800a414:	f7fe fafa 	bl	8008a0c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800a418:	480b      	ldr	r0, [pc, #44]	; (800a448 <prvInitialiseTaskLists+0x74>)
 800a41a:	f7fe faf7 	bl	8008a0c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a41e:	4b0b      	ldr	r3, [pc, #44]	; (800a44c <prvInitialiseTaskLists+0x78>)
 800a420:	4a05      	ldr	r2, [pc, #20]	; (800a438 <prvInitialiseTaskLists+0x64>)
 800a422:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a424:	4b0a      	ldr	r3, [pc, #40]	; (800a450 <prvInitialiseTaskLists+0x7c>)
 800a426:	4a05      	ldr	r2, [pc, #20]	; (800a43c <prvInitialiseTaskLists+0x68>)
 800a428:	601a      	str	r2, [r3, #0]
}
 800a42a:	bf00      	nop
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	20000b34 	.word	0x20000b34
 800a438:	20000b98 	.word	0x20000b98
 800a43c:	20000bac 	.word	0x20000bac
 800a440:	20000bc8 	.word	0x20000bc8
 800a444:	20000bdc 	.word	0x20000bdc
 800a448:	20000bf4 	.word	0x20000bf4
 800a44c:	20000bc0 	.word	0x20000bc0
 800a450:	20000bc4 	.word	0x20000bc4

0800a454 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a45a:	e019      	b.n	800a490 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800a45c:	f001 f924 	bl	800b6a8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a460:	4b10      	ldr	r3, [pc, #64]	; (800a4a4 <prvCheckTasksWaitingTermination+0x50>)
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	3304      	adds	r3, #4
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe fb33 	bl	8008ad8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800a472:	4b0d      	ldr	r3, [pc, #52]	; (800a4a8 <prvCheckTasksWaitingTermination+0x54>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3b01      	subs	r3, #1
 800a478:	4a0b      	ldr	r2, [pc, #44]	; (800a4a8 <prvCheckTasksWaitingTermination+0x54>)
 800a47a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800a47c:	4b0b      	ldr	r3, [pc, #44]	; (800a4ac <prvCheckTasksWaitingTermination+0x58>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3b01      	subs	r3, #1
 800a482:	4a0a      	ldr	r2, [pc, #40]	; (800a4ac <prvCheckTasksWaitingTermination+0x58>)
 800a484:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800a486:	f001 f93f 	bl	800b708 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f810 	bl	800a4b0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a490:	4b06      	ldr	r3, [pc, #24]	; (800a4ac <prvCheckTasksWaitingTermination+0x58>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1e1      	bne.n	800a45c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800a498:	bf00      	nop
 800a49a:	bf00      	nop
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20000bdc 	.word	0x20000bdc
 800a4a8:	20000c08 	.word	0x20000c08
 800a4ac:	20000bf0 	.word	0x20000bf0

0800a4b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f001 fad7 	bl	800ba70 <vPortFree>
            vPortFree( pxTCB );
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f001 fad4 	bl	800ba70 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a4c8:	bf00      	nop
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4d4:	4b0a      	ldr	r3, [pc, #40]	; (800a500 <prvResetNextTaskUnblockTime+0x30>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d104      	bne.n	800a4e8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a4de:	4b09      	ldr	r3, [pc, #36]	; (800a504 <prvResetNextTaskUnblockTime+0x34>)
 800a4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a4e6:	e005      	b.n	800a4f4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a4e8:	4b05      	ldr	r3, [pc, #20]	; (800a500 <prvResetNextTaskUnblockTime+0x30>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a04      	ldr	r2, [pc, #16]	; (800a504 <prvResetNextTaskUnblockTime+0x34>)
 800a4f2:	6013      	str	r3, [r2, #0]
}
 800a4f4:	bf00      	nop
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	20000bc0 	.word	0x20000bc0
 800a504:	20000c28 	.word	0x20000c28

0800a508 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a50e:	4b0b      	ldr	r3, [pc, #44]	; (800a53c <xTaskGetSchedulerState+0x34>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d102      	bne.n	800a51c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a516:	2301      	movs	r3, #1
 800a518:	607b      	str	r3, [r7, #4]
 800a51a:	e008      	b.n	800a52e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a51c:	4b08      	ldr	r3, [pc, #32]	; (800a540 <xTaskGetSchedulerState+0x38>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d102      	bne.n	800a52a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a524:	2302      	movs	r3, #2
 800a526:	607b      	str	r3, [r7, #4]
 800a528:	e001      	b.n	800a52e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a52a:	2300      	movs	r3, #0
 800a52c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a52e:	687b      	ldr	r3, [r7, #4]
    }
 800a530:	4618      	mov	r0, r3
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	20000c14 	.word	0x20000c14
 800a540:	20000c30 	.word	0x20000c30

0800a544 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800a550:	2300      	movs	r3, #0
 800a552:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	f000 8095 	beq.w	800a686 <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800a55c:	4b4c      	ldr	r3, [pc, #304]	; (800a690 <xTaskPriorityDisinherit+0x14c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	69ba      	ldr	r2, [r7, #24]
 800a562:	429a      	cmp	r2, r3
 800a564:	d00a      	beq.n	800a57c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800a566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56a:	f383 8811 	msr	BASEPRI, r3
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	613b      	str	r3, [r7, #16]
    }
 800a578:	bf00      	nop
 800a57a:	e7fe      	b.n	800a57a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10a      	bne.n	800a59a <xTaskPriorityDisinherit+0x56>
        __asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	60fb      	str	r3, [r7, #12]
    }
 800a596:	bf00      	nop
 800a598:	e7fe      	b.n	800a598 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a59e:	1e5a      	subs	r2, r3, #1
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d06a      	beq.n	800a686 <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d166      	bne.n	800a686 <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	3304      	adds	r3, #4
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fe fa8b 	bl	8008ad8 <uxListRemove>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10a      	bne.n	800a5de <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d2:	43da      	mvns	r2, r3
 800a5d4:	4b2f      	ldr	r3, [pc, #188]	; (800a694 <xTaskPriorityDisinherit+0x150>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4013      	ands	r3, r2
 800a5da:	4a2e      	ldr	r2, [pc, #184]	; (800a694 <xTaskPriorityDisinherit+0x150>)
 800a5dc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	204a      	movs	r0, #74	; 0x4a
 800a5e4:	f002 f83c 	bl	800c660 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f4:	f1c3 0205 	rsb	r2, r3, #5
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f002 fe38 	bl	800d274 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a608:	2201      	movs	r2, #1
 800a60a:	409a      	lsls	r2, r3
 800a60c:	4b21      	ldr	r3, [pc, #132]	; (800a694 <xTaskPriorityDisinherit+0x150>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4313      	orrs	r3, r2
 800a612:	4a20      	ldr	r2, [pc, #128]	; (800a694 <xTaskPriorityDisinherit+0x150>)
 800a614:	6013      	str	r3, [r2, #0]
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a61a:	491f      	ldr	r1, [pc, #124]	; (800a698 <xTaskPriorityDisinherit+0x154>)
 800a61c:	4613      	mov	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	440b      	add	r3, r1
 800a626:	3304      	adds	r3, #4
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	617b      	str	r3, [r7, #20]
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	609a      	str	r2, [r3, #8]
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	689a      	ldr	r2, [r3, #8]
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	60da      	str	r2, [r3, #12]
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	3204      	adds	r2, #4
 800a642:	605a      	str	r2, [r3, #4]
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	1d1a      	adds	r2, r3, #4
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	609a      	str	r2, [r3, #8]
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a650:	4613      	mov	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4a0f      	ldr	r2, [pc, #60]	; (800a698 <xTaskPriorityDisinherit+0x154>)
 800a65a:	441a      	add	r2, r3
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	615a      	str	r2, [r3, #20]
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a664:	490c      	ldr	r1, [pc, #48]	; (800a698 <xTaskPriorityDisinherit+0x154>)
 800a666:	4613      	mov	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4413      	add	r3, r2
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	440b      	add	r3, r1
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	1c59      	adds	r1, r3, #1
 800a674:	4808      	ldr	r0, [pc, #32]	; (800a698 <xTaskPriorityDisinherit+0x154>)
 800a676:	4613      	mov	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4413      	add	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4403      	add	r3, r0
 800a680:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800a682:	2301      	movs	r3, #1
 800a684:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a686:	69fb      	ldr	r3, [r7, #28]
    }
 800a688:	4618      	mov	r0, r3
 800a68a:	3720      	adds	r7, #32
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	20000b30 	.word	0x20000b30
 800a694:	20000c10 	.word	0x20000c10
 800a698:	20000b34 	.word	0x20000b34

0800a69c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af02      	add	r7, sp, #8
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
 800a6a8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00a      	beq.n	800a6c6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	613b      	str	r3, [r7, #16]
    }
 800a6c2:	bf00      	nop
 800a6c4:	e7fe      	b.n	800a6c4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800a6c6:	f000 ffef 	bl	800b6a8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800a6ca:	4b36      	ldr	r3, [pc, #216]	; (800a7a4 <xTaskGenericNotifyWait+0x108>)
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	3354      	adds	r3, #84	; 0x54
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d022      	beq.n	800a722 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800a6dc:	4b31      	ldr	r3, [pc, #196]	; (800a7a4 <xTaskGenericNotifyWait+0x108>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	3214      	adds	r2, #20
 800a6e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	43d2      	mvns	r2, r2
 800a6ec:	4011      	ands	r1, r2
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	3214      	adds	r2, #20
 800a6f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800a6f6:	4b2b      	ldr	r3, [pc, #172]	; (800a7a4 <xTaskGenericNotifyWait+0x108>)
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	3354      	adds	r3, #84	; 0x54
 800a700:	2201      	movs	r2, #1
 800a702:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800a704:	6a3b      	ldr	r3, [r7, #32]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00b      	beq.n	800a722 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a70a:	2101      	movs	r1, #1
 800a70c:	6a38      	ldr	r0, [r7, #32]
 800a70e:	f000 faef 	bl	800acf0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800a712:	4b25      	ldr	r3, [pc, #148]	; (800a7a8 <xTaskGenericNotifyWait+0x10c>)
 800a714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a722:	f000 fff1 	bl	800b708 <vPortExitCritical>

        taskENTER_CRITICAL();
 800a726:	f000 ffbf 	bl	800b6a8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800a72a:	683a      	ldr	r2, [r7, #0]
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	4613      	mov	r3, r2
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	68b9      	ldr	r1, [r7, #8]
 800a736:	2040      	movs	r0, #64	; 0x40
 800a738:	f002 f89e 	bl	800c878 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d007      	beq.n	800a752 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800a742:	4b18      	ldr	r3, [pc, #96]	; (800a7a4 <xTaskGenericNotifyWait+0x108>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	3214      	adds	r2, #20
 800a74a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800a752:	4b14      	ldr	r3, [pc, #80]	; (800a7a4 <xTaskGenericNotifyWait+0x108>)
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	4413      	add	r3, r2
 800a75a:	3354      	adds	r3, #84	; 0x54
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	2b02      	cmp	r3, #2
 800a762:	d002      	beq.n	800a76a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800a764:	2300      	movs	r3, #0
 800a766:	617b      	str	r3, [r7, #20]
 800a768:	e00e      	b.n	800a788 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800a76a:	4b0e      	ldr	r3, [pc, #56]	; (800a7a4 <xTaskGenericNotifyWait+0x108>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	3214      	adds	r2, #20
 800a772:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	43d2      	mvns	r2, r2
 800a77a:	4011      	ands	r1, r2
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	3214      	adds	r2, #20
 800a780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800a784:	2301      	movs	r3, #1
 800a786:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800a788:	4b06      	ldr	r3, [pc, #24]	; (800a7a4 <xTaskGenericNotifyWait+0x108>)
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	4413      	add	r3, r2
 800a790:	3354      	adds	r3, #84	; 0x54
 800a792:	2200      	movs	r2, #0
 800a794:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800a796:	f000 ffb7 	bl	800b708 <vPortExitCritical>

        return xReturn;
 800a79a:	697b      	ldr	r3, [r7, #20]
    }
 800a79c:	4618      	mov	r0, r3
 800a79e:	3718      	adds	r7, #24
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	20000b30 	.word	0x20000b30
 800a7a8:	e000ed04 	.word	0xe000ed04

0800a7ac <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b090      	sub	sp, #64	; 0x40
 800a7b0:	af02      	add	r7, sp, #8
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00a      	beq.n	800a7da <xTaskGenericNotify+0x2e>
        __asm volatile
 800a7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c8:	f383 8811 	msr	BASEPRI, r3
 800a7cc:	f3bf 8f6f 	isb	sy
 800a7d0:	f3bf 8f4f 	dsb	sy
 800a7d4:	623b      	str	r3, [r7, #32]
    }
 800a7d6:	bf00      	nop
 800a7d8:	e7fe      	b.n	800a7d8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10a      	bne.n	800a7f6 <xTaskGenericNotify+0x4a>
        __asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	61fb      	str	r3, [r7, #28]
    }
 800a7f2:	bf00      	nop
 800a7f4:	e7fe      	b.n	800a7f4 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800a7fa:	f000 ff55 	bl	800b6a8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800a7fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a800:	2b00      	cmp	r3, #0
 800a802:	d006      	beq.n	800a812 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800a804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	3214      	adds	r2, #20
 800a80a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a80e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a810:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800a812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	4413      	add	r3, r2
 800a818:	3354      	adds	r3, #84	; 0x54
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800a820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	4413      	add	r3, r2
 800a826:	3354      	adds	r3, #84	; 0x54
 800a828:	2202      	movs	r2, #2
 800a82a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800a82c:	78fb      	ldrb	r3, [r7, #3]
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d83b      	bhi.n	800a8aa <xTaskGenericNotify+0xfe>
 800a832:	a201      	add	r2, pc, #4	; (adr r2, 800a838 <xTaskGenericNotify+0x8c>)
 800a834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a838:	0800a8c9 	.word	0x0800a8c9
 800a83c:	0800a84d 	.word	0x0800a84d
 800a840:	0800a869 	.word	0x0800a869
 800a844:	0800a881 	.word	0x0800a881
 800a848:	0800a88f 	.word	0x0800a88f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	3214      	adds	r2, #20
 800a852:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	ea42 0103 	orr.w	r1, r2, r3
 800a85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	3214      	adds	r2, #20
 800a862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a866:	e032      	b.n	800a8ce <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	3214      	adds	r2, #20
 800a86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a872:	1c59      	adds	r1, r3, #1
 800a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	3214      	adds	r2, #20
 800a87a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a87e:	e026      	b.n	800a8ce <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800a880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	3214      	adds	r2, #20
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a88c:	e01f      	b.n	800a8ce <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a88e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a892:	2b02      	cmp	r3, #2
 800a894:	d006      	beq.n	800a8a4 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800a896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	3214      	adds	r2, #20
 800a89c:	6879      	ldr	r1, [r7, #4]
 800a89e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800a8a2:	e014      	b.n	800a8ce <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 800a8a8:	e011      	b.n	800a8ce <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800a8aa:	4b55      	ldr	r3, [pc, #340]	; (800aa00 <xTaskGenericNotify+0x254>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00c      	beq.n	800a8cc <xTaskGenericNotify+0x120>
        __asm volatile
 800a8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b6:	f383 8811 	msr	BASEPRI, r3
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	61bb      	str	r3, [r7, #24]
    }
 800a8c4:	bf00      	nop
 800a8c6:	e7fe      	b.n	800a8c6 <xTaskGenericNotify+0x11a>
                    break;
 800a8c8:	bf00      	nop
 800a8ca:	e000      	b.n	800a8ce <xTaskGenericNotify+0x122>

                    break;
 800a8cc:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f002 fd11 	bl	800d2f8 <SEGGER_SYSVIEW_ShrinkId>
 800a8d6:	4601      	mov	r1, r0
 800a8d8:	78fa      	ldrb	r2, [r7, #3]
 800a8da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	203e      	movs	r0, #62	; 0x3e
 800a8e4:	f001 ffc8 	bl	800c878 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a8e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d17f      	bne.n	800a9f0 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8fc:	68d2      	ldr	r2, [r2, #12]
 800a8fe:	609a      	str	r2, [r3, #8]
 800a900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a906:	6892      	ldr	r2, [r2, #8]
 800a908:	605a      	str	r2, [r3, #4]
 800a90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90c:	685a      	ldr	r2, [r3, #4]
 800a90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a910:	3304      	adds	r3, #4
 800a912:	429a      	cmp	r2, r3
 800a914:	d103      	bne.n	800a91e <xTaskGenericNotify+0x172>
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	68da      	ldr	r2, [r3, #12]
 800a91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91c:	605a      	str	r2, [r3, #4]
 800a91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a920:	2200      	movs	r2, #0
 800a922:	615a      	str	r2, [r3, #20]
 800a924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	1e5a      	subs	r2, r3, #1
 800a92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92c:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	4618      	mov	r0, r3
 800a932:	f002 fc9f 	bl	800d274 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93a:	2201      	movs	r2, #1
 800a93c:	409a      	lsls	r2, r3
 800a93e:	4b31      	ldr	r3, [pc, #196]	; (800aa04 <xTaskGenericNotify+0x258>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4313      	orrs	r3, r2
 800a944:	4a2f      	ldr	r2, [pc, #188]	; (800aa04 <xTaskGenericNotify+0x258>)
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a94c:	492e      	ldr	r1, [pc, #184]	; (800aa08 <xTaskGenericNotify+0x25c>)
 800a94e:	4613      	mov	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4413      	add	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	440b      	add	r3, r1
 800a958:	3304      	adds	r3, #4
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	627b      	str	r3, [r7, #36]	; 0x24
 800a95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a962:	609a      	str	r2, [r3, #8]
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	689a      	ldr	r2, [r3, #8]
 800a968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96a:	60da      	str	r2, [r3, #12]
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a972:	3204      	adds	r2, #4
 800a974:	605a      	str	r2, [r3, #4]
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	1d1a      	adds	r2, r3, #4
 800a97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97c:	609a      	str	r2, [r3, #8]
 800a97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a982:	4613      	mov	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4a1f      	ldr	r2, [pc, #124]	; (800aa08 <xTaskGenericNotify+0x25c>)
 800a98c:	441a      	add	r2, r3
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	615a      	str	r2, [r3, #20]
 800a992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a996:	491c      	ldr	r1, [pc, #112]	; (800aa08 <xTaskGenericNotify+0x25c>)
 800a998:	4613      	mov	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4413      	add	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	440b      	add	r3, r1
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	1c59      	adds	r1, r3, #1
 800a9a6:	4818      	ldr	r0, [pc, #96]	; (800aa08 <xTaskGenericNotify+0x25c>)
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	4413      	add	r3, r2
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4403      	add	r3, r0
 800a9b2:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00a      	beq.n	800a9d2 <xTaskGenericNotify+0x226>
        __asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	617b      	str	r3, [r7, #20]
    }
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d6:	4b0d      	ldr	r3, [pc, #52]	; (800aa0c <xTaskGenericNotify+0x260>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d907      	bls.n	800a9f0 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800a9e0:	4b0b      	ldr	r3, [pc, #44]	; (800aa10 <xTaskGenericNotify+0x264>)
 800a9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e6:	601a      	str	r2, [r3, #0]
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a9f0:	f000 fe8a 	bl	800b708 <vPortExitCritical>

        return xReturn;
 800a9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3738      	adds	r7, #56	; 0x38
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000c0c 	.word	0x20000c0c
 800aa04:	20000c10 	.word	0x20000c10
 800aa08:	20000b34 	.word	0x20000b34
 800aa0c:	20000b30 	.word	0x20000b30
 800aa10:	e000ed04 	.word	0xe000ed04

0800aa14 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b094      	sub	sp, #80	; 0x50
 800aa18:	af02      	add	r7, sp, #8
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
 800aa20:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800aa22:	2301      	movs	r3, #1
 800aa24:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d10a      	bne.n	800aa42 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800aa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800aa3e:	bf00      	nop
 800aa40:	e7fe      	b.n	800aa40 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00a      	beq.n	800aa5e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800aa5a:	bf00      	nop
 800aa5c:	e7fe      	b.n	800aa5c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa5e:	f000 ff0d 	bl	800b87c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 800aa66:	f3ef 8211 	mrs	r2, BASEPRI
 800aa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	623a      	str	r2, [r7, #32]
 800aa7c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800aa7e:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa80:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800aa82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d006      	beq.n	800aa96 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800aa88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	3214      	adds	r2, #20
 800aa8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa94:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800aa96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	3354      	adds	r3, #84	; 0x54
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800aaa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	3354      	adds	r3, #84	; 0x54
 800aaac:	2202      	movs	r2, #2
 800aaae:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	2b04      	cmp	r3, #4
 800aab4:	d83b      	bhi.n	800ab2e <xTaskGenericNotifyFromISR+0x11a>
 800aab6:	a201      	add	r2, pc, #4	; (adr r2, 800aabc <xTaskGenericNotifyFromISR+0xa8>)
 800aab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabc:	0800ab4d 	.word	0x0800ab4d
 800aac0:	0800aad1 	.word	0x0800aad1
 800aac4:	0800aaed 	.word	0x0800aaed
 800aac8:	0800ab05 	.word	0x0800ab05
 800aacc:	0800ab13 	.word	0x0800ab13
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800aad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	3214      	adds	r2, #20
 800aad6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	ea42 0103 	orr.w	r1, r2, r3
 800aae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	3214      	adds	r2, #20
 800aae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800aaea:	e032      	b.n	800ab52 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800aaec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	3214      	adds	r2, #20
 800aaf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf6:	1c59      	adds	r1, r3, #1
 800aaf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	3214      	adds	r2, #20
 800aafe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ab02:	e026      	b.n	800ab52 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800ab04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	3214      	adds	r2, #20
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ab10:	e01f      	b.n	800ab52 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ab12:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d006      	beq.n	800ab28 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800ab1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab1c:	68ba      	ldr	r2, [r7, #8]
 800ab1e:	3214      	adds	r2, #20
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800ab26:	e014      	b.n	800ab52 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800ab2c:	e011      	b.n	800ab52 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800ab2e:	4b69      	ldr	r3, [pc, #420]	; (800acd4 <xTaskGenericNotifyFromISR+0x2c0>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00c      	beq.n	800ab50 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800ab36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	61bb      	str	r3, [r7, #24]
    }
 800ab48:	bf00      	nop
 800ab4a:	e7fe      	b.n	800ab4a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800ab4c:	bf00      	nop
 800ab4e:	e000      	b.n	800ab52 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800ab50:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800ab52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab54:	4618      	mov	r0, r3
 800ab56:	f002 fbcf 	bl	800d2f8 <SEGGER_SYSVIEW_ShrinkId>
 800ab5a:	78f9      	ldrb	r1, [r7, #3]
 800ab5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab60:	9201      	str	r2, [sp, #4]
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	460b      	mov	r3, r1
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	4601      	mov	r1, r0
 800ab6a:	203f      	movs	r0, #63	; 0x3f
 800ab6c:	f001 ff16 	bl	800c99c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ab70:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	f040 80a2 	bne.w	800acbe <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ab7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00a      	beq.n	800ab98 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 800ab82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	617b      	str	r3, [r7, #20]
    }
 800ab94:	bf00      	nop
 800ab96:	e7fe      	b.n	800ab96 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab98:	4b4f      	ldr	r3, [pc, #316]	; (800acd8 <xTaskGenericNotifyFromISR+0x2c4>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d162      	bne.n	800ac66 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800aba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aba2:	695b      	ldr	r3, [r3, #20]
 800aba4:	633b      	str	r3, [r7, #48]	; 0x30
 800aba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abac:	68d2      	ldr	r2, [r2, #12]
 800abae:	609a      	str	r2, [r3, #8]
 800abb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abb6:	6892      	ldr	r2, [r2, #8]
 800abb8:	605a      	str	r2, [r3, #4]
 800abba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbc:	685a      	ldr	r2, [r3, #4]
 800abbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abc0:	3304      	adds	r3, #4
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d103      	bne.n	800abce <xTaskGenericNotifyFromISR+0x1ba>
 800abc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abc8:	68da      	ldr	r2, [r3, #12]
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	605a      	str	r2, [r3, #4]
 800abce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abd0:	2200      	movs	r2, #0
 800abd2:	615a      	str	r2, [r3, #20]
 800abd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	1e5a      	subs	r2, r3, #1
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800abde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abe0:	4618      	mov	r0, r3
 800abe2:	f002 fb47 	bl	800d274 <SEGGER_SYSVIEW_OnTaskStartReady>
 800abe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abea:	2201      	movs	r2, #1
 800abec:	409a      	lsls	r2, r3
 800abee:	4b3b      	ldr	r3, [pc, #236]	; (800acdc <xTaskGenericNotifyFromISR+0x2c8>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	4a39      	ldr	r2, [pc, #228]	; (800acdc <xTaskGenericNotifyFromISR+0x2c8>)
 800abf6:	6013      	str	r3, [r2, #0]
 800abf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfc:	4938      	ldr	r1, [pc, #224]	; (800ace0 <xTaskGenericNotifyFromISR+0x2cc>)
 800abfe:	4613      	mov	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4413      	add	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	440b      	add	r3, r1
 800ac08:	3304      	adds	r3, #4
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac12:	609a      	str	r2, [r3, #8]
 800ac14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac16:	689a      	ldr	r2, [r3, #8]
 800ac18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac1a:	60da      	str	r2, [r3, #12]
 800ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac22:	3204      	adds	r2, #4
 800ac24:	605a      	str	r2, [r3, #4]
 800ac26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac28:	1d1a      	adds	r2, r3, #4
 800ac2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2c:	609a      	str	r2, [r3, #8]
 800ac2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac32:	4613      	mov	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4413      	add	r3, r2
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4a29      	ldr	r2, [pc, #164]	; (800ace0 <xTaskGenericNotifyFromISR+0x2cc>)
 800ac3c:	441a      	add	r2, r3
 800ac3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac40:	615a      	str	r2, [r3, #20]
 800ac42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac46:	4926      	ldr	r1, [pc, #152]	; (800ace0 <xTaskGenericNotifyFromISR+0x2cc>)
 800ac48:	4613      	mov	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	440b      	add	r3, r1
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	1c59      	adds	r1, r3, #1
 800ac56:	4822      	ldr	r0, [pc, #136]	; (800ace0 <xTaskGenericNotifyFromISR+0x2cc>)
 800ac58:	4613      	mov	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4403      	add	r3, r0
 800ac62:	6019      	str	r1, [r3, #0]
 800ac64:	e01b      	b.n	800ac9e <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ac66:	4b1f      	ldr	r3, [pc, #124]	; (800ace4 <xTaskGenericNotifyFromISR+0x2d0>)
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac70:	61da      	str	r2, [r3, #28]
 800ac72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac74:	689a      	ldr	r2, [r3, #8]
 800ac76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac78:	621a      	str	r2, [r3, #32]
 800ac7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac80:	3218      	adds	r2, #24
 800ac82:	605a      	str	r2, [r3, #4]
 800ac84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac86:	f103 0218 	add.w	r2, r3, #24
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8c:	609a      	str	r2, [r3, #8]
 800ac8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac90:	4a14      	ldr	r2, [pc, #80]	; (800ace4 <xTaskGenericNotifyFromISR+0x2d0>)
 800ac92:	629a      	str	r2, [r3, #40]	; 0x28
 800ac94:	4b13      	ldr	r3, [pc, #76]	; (800ace4 <xTaskGenericNotifyFromISR+0x2d0>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	4a12      	ldr	r2, [pc, #72]	; (800ace4 <xTaskGenericNotifyFromISR+0x2d0>)
 800ac9c:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca2:	4b11      	ldr	r3, [pc, #68]	; (800ace8 <xTaskGenericNotifyFromISR+0x2d4>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d908      	bls.n	800acbe <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800acac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d002      	beq.n	800acb8 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800acb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acb4:	2201      	movs	r2, #1
 800acb6:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800acb8:	4b0c      	ldr	r3, [pc, #48]	; (800acec <xTaskGenericNotifyFromISR+0x2d8>)
 800acba:	2201      	movs	r2, #1
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc0:	613b      	str	r3, [r7, #16]
        __asm volatile
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	f383 8811 	msr	BASEPRI, r3
    }
 800acc8:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800acca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800accc:	4618      	mov	r0, r3
 800acce:	3748      	adds	r7, #72	; 0x48
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	20000c0c 	.word	0x20000c0c
 800acd8:	20000c30 	.word	0x20000c30
 800acdc:	20000c10 	.word	0x20000c10
 800ace0:	20000b34 	.word	0x20000b34
 800ace4:	20000bc8 	.word	0x20000bc8
 800ace8:	20000b30 	.word	0x20000b30
 800acec:	20000c1c 	.word	0x20000c1c

0800acf0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800acfa:	4b36      	ldr	r3, [pc, #216]	; (800add4 <prvAddCurrentTaskToDelayedList+0xe4>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad00:	4b35      	ldr	r3, [pc, #212]	; (800add8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3304      	adds	r3, #4
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fd fee6 	bl	8008ad8 <uxListRemove>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d10b      	bne.n	800ad2a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ad12:	4b31      	ldr	r3, [pc, #196]	; (800add8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad18:	2201      	movs	r2, #1
 800ad1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad1e:	43da      	mvns	r2, r3
 800ad20:	4b2e      	ldr	r3, [pc, #184]	; (800addc <prvAddCurrentTaskToDelayedList+0xec>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4013      	ands	r3, r2
 800ad26:	4a2d      	ldr	r2, [pc, #180]	; (800addc <prvAddCurrentTaskToDelayedList+0xec>)
 800ad28:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad30:	d124      	bne.n	800ad7c <prvAddCurrentTaskToDelayedList+0x8c>
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d021      	beq.n	800ad7c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad38:	4b29      	ldr	r3, [pc, #164]	; (800ade0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	613b      	str	r3, [r7, #16]
 800ad3e:	4b26      	ldr	r3, [pc, #152]	; (800add8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	693a      	ldr	r2, [r7, #16]
 800ad44:	609a      	str	r2, [r3, #8]
 800ad46:	4b24      	ldr	r3, [pc, #144]	; (800add8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	6892      	ldr	r2, [r2, #8]
 800ad4e:	60da      	str	r2, [r3, #12]
 800ad50:	4b21      	ldr	r3, [pc, #132]	; (800add8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	3204      	adds	r2, #4
 800ad5a:	605a      	str	r2, [r3, #4]
 800ad5c:	4b1e      	ldr	r3, [pc, #120]	; (800add8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	1d1a      	adds	r2, r3, #4
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	609a      	str	r2, [r3, #8]
 800ad66:	4b1c      	ldr	r3, [pc, #112]	; (800add8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a1d      	ldr	r2, [pc, #116]	; (800ade0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ad6c:	615a      	str	r2, [r3, #20]
 800ad6e:	4b1c      	ldr	r3, [pc, #112]	; (800ade0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3301      	adds	r3, #1
 800ad74:	4a1a      	ldr	r2, [pc, #104]	; (800ade0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800ad76:	6013      	str	r3, [r2, #0]
 800ad78:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800ad7a:	e026      	b.n	800adca <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4413      	add	r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad84:	4b14      	ldr	r3, [pc, #80]	; (800add8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d209      	bcs.n	800ada8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad94:	4b13      	ldr	r3, [pc, #76]	; (800ade4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	4b0f      	ldr	r3, [pc, #60]	; (800add8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	4619      	mov	r1, r3
 800ada0:	4610      	mov	r0, r2
 800ada2:	f7fd fe60 	bl	8008a66 <vListInsert>
}
 800ada6:	e010      	b.n	800adca <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ada8:	4b0f      	ldr	r3, [pc, #60]	; (800ade8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	4b0a      	ldr	r3, [pc, #40]	; (800add8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	3304      	adds	r3, #4
 800adb2:	4619      	mov	r1, r3
 800adb4:	4610      	mov	r0, r2
 800adb6:	f7fd fe56 	bl	8008a66 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800adba:	4b0c      	ldr	r3, [pc, #48]	; (800adec <prvAddCurrentTaskToDelayedList+0xfc>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d202      	bcs.n	800adca <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800adc4:	4a09      	ldr	r2, [pc, #36]	; (800adec <prvAddCurrentTaskToDelayedList+0xfc>)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6013      	str	r3, [r2, #0]
}
 800adca:	bf00      	nop
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	20000c0c 	.word	0x20000c0c
 800add8:	20000b30 	.word	0x20000b30
 800addc:	20000c10 	.word	0x20000c10
 800ade0:	20000bf4 	.word	0x20000bf4
 800ade4:	20000bc4 	.word	0x20000bc4
 800ade8:	20000bc0 	.word	0x20000bc0
 800adec:	20000c28 	.word	0x20000c28

0800adf0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800adf6:	2300      	movs	r3, #0
 800adf8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800adfa:	f000 faef 	bl	800b3dc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800adfe:	4b11      	ldr	r3, [pc, #68]	; (800ae44 <xTimerCreateTimerTask+0x54>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00b      	beq.n	800ae1e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800ae06:	4b10      	ldr	r3, [pc, #64]	; (800ae48 <xTimerCreateTimerTask+0x58>)
 800ae08:	9301      	str	r3, [sp, #4]
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	9300      	str	r3, [sp, #0]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ae14:	490d      	ldr	r1, [pc, #52]	; (800ae4c <xTimerCreateTimerTask+0x5c>)
 800ae16:	480e      	ldr	r0, [pc, #56]	; (800ae50 <xTimerCreateTimerTask+0x60>)
 800ae18:	f7fe fc26 	bl	8009668 <xTaskCreate>
 800ae1c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10a      	bne.n	800ae3a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800ae24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae28:	f383 8811 	msr	BASEPRI, r3
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	603b      	str	r3, [r7, #0]
    }
 800ae36:	bf00      	nop
 800ae38:	e7fe      	b.n	800ae38 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800ae3a:	687b      	ldr	r3, [r7, #4]
    }
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	20000c64 	.word	0x20000c64
 800ae48:	20000c68 	.word	0x20000c68
 800ae4c:	0801149c 	.word	0x0801149c
 800ae50:	0800b049 	.word	0x0800b049

0800ae54 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af02      	add	r7, sp, #8
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
 800ae60:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ae62:	202c      	movs	r0, #44	; 0x2c
 800ae64:	f000 fd4a 	bl	800b8fc <pvPortMalloc>
 800ae68:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00d      	beq.n	800ae8c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	9301      	str	r3, [sp, #4]
 800ae7c:	6a3b      	ldr	r3, [r7, #32]
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	68b9      	ldr	r1, [r7, #8]
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f000 f805 	bl	800ae96 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800ae8c:	697b      	ldr	r3, [r7, #20]
        }
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3718      	adds	r7, #24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b086      	sub	sp, #24
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	60f8      	str	r0, [r7, #12]
 800ae9e:	60b9      	str	r1, [r7, #8]
 800aea0:	607a      	str	r2, [r7, #4]
 800aea2:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d10a      	bne.n	800aec0 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	617b      	str	r3, [r7, #20]
    }
 800aebc:	bf00      	nop
 800aebe:	e7fe      	b.n	800aebe <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800aec0:	f000 fa8c 	bl	800b3dc <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800aeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800aed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed8:	6a3a      	ldr	r2, [r7, #32]
 800aeda:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800aedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aede:	3304      	adds	r3, #4
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7fd fdb3 	bl	8008a4c <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d008      	beq.n	800aefe <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aef2:	f043 0304 	orr.w	r3, r3, #4
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 800aefe:	bf00      	nop
 800af00:	3718      	adds	r7, #24
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
	...

0800af08 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800af08:	b580      	push	{r7, lr}
 800af0a:	b08a      	sub	sp, #40	; 0x28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
 800af14:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800af16:	2300      	movs	r3, #0
 800af18:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10a      	bne.n	800af36 <xTimerGenericCommand+0x2e>
        __asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	623b      	str	r3, [r7, #32]
    }
 800af32:	bf00      	nop
 800af34:	e7fe      	b.n	800af34 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800af36:	4b1a      	ldr	r3, [pc, #104]	; (800afa0 <xTimerGenericCommand+0x98>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d02a      	beq.n	800af94 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	2b05      	cmp	r3, #5
 800af4e:	dc18      	bgt.n	800af82 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800af50:	f7ff fada 	bl	800a508 <xTaskGetSchedulerState>
 800af54:	4603      	mov	r3, r0
 800af56:	2b02      	cmp	r3, #2
 800af58:	d109      	bne.n	800af6e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800af5a:	4b11      	ldr	r3, [pc, #68]	; (800afa0 <xTimerGenericCommand+0x98>)
 800af5c:	6818      	ldr	r0, [r3, #0]
 800af5e:	f107 0114 	add.w	r1, r7, #20
 800af62:	2300      	movs	r3, #0
 800af64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af66:	f7fd fee9 	bl	8008d3c <xQueueGenericSend>
 800af6a:	6278      	str	r0, [r7, #36]	; 0x24
 800af6c:	e012      	b.n	800af94 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af6e:	4b0c      	ldr	r3, [pc, #48]	; (800afa0 <xTimerGenericCommand+0x98>)
 800af70:	6818      	ldr	r0, [r3, #0]
 800af72:	f107 0114 	add.w	r1, r7, #20
 800af76:	2300      	movs	r3, #0
 800af78:	2200      	movs	r2, #0
 800af7a:	f7fd fedf 	bl	8008d3c <xQueueGenericSend>
 800af7e:	6278      	str	r0, [r7, #36]	; 0x24
 800af80:	e008      	b.n	800af94 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af82:	4b07      	ldr	r3, [pc, #28]	; (800afa0 <xTimerGenericCommand+0x98>)
 800af84:	6818      	ldr	r0, [r3, #0]
 800af86:	f107 0114 	add.w	r1, r7, #20
 800af8a:	2300      	movs	r3, #0
 800af8c:	683a      	ldr	r2, [r7, #0]
 800af8e:	f7fd fffb 	bl	8008f88 <xQueueGenericSendFromISR>
 800af92:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800af94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800af96:	4618      	mov	r0, r3
 800af98:	3728      	adds	r7, #40	; 0x28
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	20000c64 	.word	0x20000c64

0800afa4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800afb0:	e008      	b.n	800afc4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	4413      	add	r3, r2
 800afba:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6a1b      	ldr	r3, [r3, #32]
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	699a      	ldr	r2, [r3, #24]
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	18d1      	adds	r1, r2, r3
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 f8dd 	bl	800b190 <prvInsertTimerInActiveList>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1ea      	bne.n	800afb2 <prvReloadTimer+0xe>
        }
    }
 800afdc:	bf00      	nop
 800afde:	bf00      	nop
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
	...

0800afe8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aff2:	4b14      	ldr	r3, [pc, #80]	; (800b044 <prvProcessExpiredTimer+0x5c>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	3304      	adds	r3, #4
 800b000:	4618      	mov	r0, r3
 800b002:	f7fd fd69 	bl	8008ad8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b00c:	f003 0304 	and.w	r3, r3, #4
 800b010:	2b00      	cmp	r3, #0
 800b012:	d005      	beq.n	800b020 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	6879      	ldr	r1, [r7, #4]
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f7ff ffc3 	bl	800afa4 <prvReloadTimer>
 800b01e:	e008      	b.n	800b032 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b026:	f023 0301 	bic.w	r3, r3, #1
 800b02a:	b2da      	uxtb	r2, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	4798      	blx	r3
    }
 800b03a:	bf00      	nop
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20000c5c 	.word	0x20000c5c

0800b048 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b050:	f107 0308 	add.w	r3, r7, #8
 800b054:	4618      	mov	r0, r3
 800b056:	f000 f857 	bl	800b108 <prvGetNextExpireTime>
 800b05a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	4619      	mov	r1, r3
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f000 f803 	bl	800b06c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b066:	f000 f8d5 	bl	800b214 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b06a:	e7f1      	b.n	800b050 <prvTimerTask+0x8>

0800b06c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b076:	f7fe fd19 	bl	8009aac <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b07a:	f107 0308 	add.w	r3, r7, #8
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 f866 	bl	800b150 <prvSampleTimeNow>
 800b084:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d130      	bne.n	800b0ee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10a      	bne.n	800b0a8 <prvProcessTimerOrBlockTask+0x3c>
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	429a      	cmp	r2, r3
 800b098:	d806      	bhi.n	800b0a8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b09a:	f7fe fd15 	bl	8009ac8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b09e:	68f9      	ldr	r1, [r7, #12]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f7ff ffa1 	bl	800afe8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b0a6:	e024      	b.n	800b0f2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d008      	beq.n	800b0c0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b0ae:	4b13      	ldr	r3, [pc, #76]	; (800b0fc <prvProcessTimerOrBlockTask+0x90>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <prvProcessTimerOrBlockTask+0x50>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e000      	b.n	800b0be <prvProcessTimerOrBlockTask+0x52>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b0c0:	4b0f      	ldr	r3, [pc, #60]	; (800b100 <prvProcessTimerOrBlockTask+0x94>)
 800b0c2:	6818      	ldr	r0, [r3, #0]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	f7fe fa97 	bl	8009600 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b0d2:	f7fe fcf9 	bl	8009ac8 <xTaskResumeAll>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10a      	bne.n	800b0f2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800b0dc:	4b09      	ldr	r3, [pc, #36]	; (800b104 <prvProcessTimerOrBlockTask+0x98>)
 800b0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	f3bf 8f6f 	isb	sy
    }
 800b0ec:	e001      	b.n	800b0f2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800b0ee:	f7fe fceb 	bl	8009ac8 <xTaskResumeAll>
    }
 800b0f2:	bf00      	nop
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20000c60 	.word	0x20000c60
 800b100:	20000c64 	.word	0x20000c64
 800b104:	e000ed04 	.word	0xe000ed04

0800b108 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b110:	4b0e      	ldr	r3, [pc, #56]	; (800b14c <prvGetNextExpireTime+0x44>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d101      	bne.n	800b11e <prvGetNextExpireTime+0x16>
 800b11a:	2201      	movs	r2, #1
 800b11c:	e000      	b.n	800b120 <prvGetNextExpireTime+0x18>
 800b11e:	2200      	movs	r2, #0
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d105      	bne.n	800b138 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b12c:	4b07      	ldr	r3, [pc, #28]	; (800b14c <prvGetNextExpireTime+0x44>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	60fb      	str	r3, [r7, #12]
 800b136:	e001      	b.n	800b13c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b138:	2300      	movs	r3, #0
 800b13a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b13c:	68fb      	ldr	r3, [r7, #12]
    }
 800b13e:	4618      	mov	r0, r3
 800b140:	3714      	adds	r7, #20
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	20000c5c 	.word	0x20000c5c

0800b150 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800b158:	f7fe fdb6 	bl	8009cc8 <xTaskGetTickCount>
 800b15c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b15e:	4b0b      	ldr	r3, [pc, #44]	; (800b18c <prvSampleTimeNow+0x3c>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	429a      	cmp	r2, r3
 800b166:	d205      	bcs.n	800b174 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b168:	f000 f912 	bl	800b390 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	601a      	str	r2, [r3, #0]
 800b172:	e002      	b.n	800b17a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800b17a:	4a04      	ldr	r2, [pc, #16]	; (800b18c <prvSampleTimeNow+0x3c>)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800b180:	68fb      	ldr	r3, [r7, #12]
    }
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	20000c6c 	.word	0x20000c6c

0800b190 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
 800b19c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	68ba      	ldr	r2, [r7, #8]
 800b1a6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d812      	bhi.n	800b1dc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	1ad2      	subs	r2, r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d302      	bcc.n	800b1ca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	617b      	str	r3, [r7, #20]
 800b1c8:	e01b      	b.n	800b202 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b1ca:	4b10      	ldr	r3, [pc, #64]	; (800b20c <prvInsertTimerInActiveList+0x7c>)
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	f7fd fc46 	bl	8008a66 <vListInsert>
 800b1da:	e012      	b.n	800b202 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d206      	bcs.n	800b1f2 <prvInsertTimerInActiveList+0x62>
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d302      	bcc.n	800b1f2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	617b      	str	r3, [r7, #20]
 800b1f0:	e007      	b.n	800b202 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1f2:	4b07      	ldr	r3, [pc, #28]	; (800b210 <prvInsertTimerInActiveList+0x80>)
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	f7fd fc32 	bl	8008a66 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b202:	697b      	ldr	r3, [r7, #20]
    }
 800b204:	4618      	mov	r0, r3
 800b206:	3718      	adds	r7, #24
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	20000c60 	.word	0x20000c60
 800b210:	20000c5c 	.word	0x20000c5c

0800b214 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800b214:	b580      	push	{r7, lr}
 800b216:	b088      	sub	sp, #32
 800b218:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b21a:	e0a6      	b.n	800b36a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f2c0 80a3 	blt.w	800b36a <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	695b      	ldr	r3, [r3, #20]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d004      	beq.n	800b23a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	3304      	adds	r3, #4
 800b234:	4618      	mov	r0, r3
 800b236:	f7fd fc4f 	bl	8008ad8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b23a:	1d3b      	adds	r3, r7, #4
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7ff ff87 	bl	800b150 <prvSampleTimeNow>
 800b242:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	3b01      	subs	r3, #1
 800b248:	2b08      	cmp	r3, #8
 800b24a:	f200 808d 	bhi.w	800b368 <prvProcessReceivedCommands+0x154>
 800b24e:	a201      	add	r2, pc, #4	; (adr r2, 800b254 <prvProcessReceivedCommands+0x40>)
 800b250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b254:	0800b279 	.word	0x0800b279
 800b258:	0800b279 	.word	0x0800b279
 800b25c:	0800b2e1 	.word	0x0800b2e1
 800b260:	0800b2f5 	.word	0x0800b2f5
 800b264:	0800b33f 	.word	0x0800b33f
 800b268:	0800b279 	.word	0x0800b279
 800b26c:	0800b279 	.word	0x0800b279
 800b270:	0800b2e1 	.word	0x0800b2e1
 800b274:	0800b2f5 	.word	0x0800b2f5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b27e:	f043 0301 	orr.w	r3, r3, #1
 800b282:	b2da      	uxtb	r2, r3
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	18d1      	adds	r1, r2, r3
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	69ba      	ldr	r2, [r7, #24]
 800b296:	69f8      	ldr	r0, [r7, #28]
 800b298:	f7ff ff7a 	bl	800b190 <prvInsertTimerInActiveList>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d063      	beq.n	800b36a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2a8:	f003 0304 	and.w	r3, r3, #4
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d009      	beq.n	800b2c4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	69ba      	ldr	r2, [r7, #24]
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	69f8      	ldr	r0, [r7, #28]
 800b2be:	f7ff fe71 	bl	800afa4 <prvReloadTimer>
 800b2c2:	e008      	b.n	800b2d6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2ca:	f023 0301 	bic.w	r3, r3, #1
 800b2ce:	b2da      	uxtb	r2, r3
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	6a1b      	ldr	r3, [r3, #32]
 800b2da:	69f8      	ldr	r0, [r7, #28]
 800b2dc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800b2de:	e044      	b.n	800b36a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2e6:	f023 0301 	bic.w	r3, r3, #1
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800b2f2:	e03a      	b.n	800b36a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2fa:	f043 0301 	orr.w	r3, r3, #1
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <prvProcessReceivedCommands+0x116>
        __asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	617b      	str	r3, [r7, #20]
    }
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	699a      	ldr	r2, [r3, #24]
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	18d1      	adds	r1, r2, r3
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	69ba      	ldr	r2, [r7, #24]
 800b336:	69f8      	ldr	r0, [r7, #28]
 800b338:	f7ff ff2a 	bl	800b190 <prvInsertTimerInActiveList>
                        break;
 800b33c:	e015      	b.n	800b36a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b344:	f003 0302 	and.w	r3, r3, #2
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d103      	bne.n	800b354 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800b34c:	69f8      	ldr	r0, [r7, #28]
 800b34e:	f000 fb8f 	bl	800ba70 <vPortFree>
 800b352:	e00a      	b.n	800b36a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b35a:	f023 0301 	bic.w	r3, r3, #1
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b366:	e000      	b.n	800b36a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 800b368:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b36a:	4b08      	ldr	r3, [pc, #32]	; (800b38c <prvProcessReceivedCommands+0x178>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f107 0108 	add.w	r1, r7, #8
 800b372:	2200      	movs	r2, #0
 800b374:	4618      	mov	r0, r3
 800b376:	f7fd fecd 	bl	8009114 <xQueueReceive>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f47f af4d 	bne.w	800b21c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800b382:	bf00      	nop
 800b384:	bf00      	nop
 800b386:	3720      	adds	r7, #32
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	20000c64 	.word	0x20000c64

0800b390 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b396:	e009      	b.n	800b3ac <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b398:	4b0e      	ldr	r3, [pc, #56]	; (800b3d4 <prvSwitchTimerLists+0x44>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800b3a2:	f04f 31ff 	mov.w	r1, #4294967295
 800b3a6:	6838      	ldr	r0, [r7, #0]
 800b3a8:	f7ff fe1e 	bl	800afe8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3ac:	4b09      	ldr	r3, [pc, #36]	; (800b3d4 <prvSwitchTimerLists+0x44>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1f0      	bne.n	800b398 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800b3b6:	4b07      	ldr	r3, [pc, #28]	; (800b3d4 <prvSwitchTimerLists+0x44>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800b3bc:	4b06      	ldr	r3, [pc, #24]	; (800b3d8 <prvSwitchTimerLists+0x48>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a04      	ldr	r2, [pc, #16]	; (800b3d4 <prvSwitchTimerLists+0x44>)
 800b3c2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800b3c4:	4a04      	ldr	r2, [pc, #16]	; (800b3d8 <prvSwitchTimerLists+0x48>)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6013      	str	r3, [r2, #0]
    }
 800b3ca:	bf00      	nop
 800b3cc:	3708      	adds	r7, #8
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	20000c5c 	.word	0x20000c5c
 800b3d8:	20000c60 	.word	0x20000c60

0800b3dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800b3e0:	f000 f962 	bl	800b6a8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800b3e4:	4b12      	ldr	r3, [pc, #72]	; (800b430 <prvCheckForValidListAndQueue+0x54>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d11d      	bne.n	800b428 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800b3ec:	4811      	ldr	r0, [pc, #68]	; (800b434 <prvCheckForValidListAndQueue+0x58>)
 800b3ee:	f7fd fb0d 	bl	8008a0c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800b3f2:	4811      	ldr	r0, [pc, #68]	; (800b438 <prvCheckForValidListAndQueue+0x5c>)
 800b3f4:	f7fd fb0a 	bl	8008a0c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800b3f8:	4b10      	ldr	r3, [pc, #64]	; (800b43c <prvCheckForValidListAndQueue+0x60>)
 800b3fa:	4a0e      	ldr	r2, [pc, #56]	; (800b434 <prvCheckForValidListAndQueue+0x58>)
 800b3fc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800b3fe:	4b10      	ldr	r3, [pc, #64]	; (800b440 <prvCheckForValidListAndQueue+0x64>)
 800b400:	4a0d      	ldr	r2, [pc, #52]	; (800b438 <prvCheckForValidListAndQueue+0x5c>)
 800b402:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b404:	2200      	movs	r2, #0
 800b406:	210c      	movs	r1, #12
 800b408:	200a      	movs	r0, #10
 800b40a:	f7fd fc1f 	bl	8008c4c <xQueueGenericCreate>
 800b40e:	4603      	mov	r3, r0
 800b410:	4a07      	ldr	r2, [pc, #28]	; (800b430 <prvCheckForValidListAndQueue+0x54>)
 800b412:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800b414:	4b06      	ldr	r3, [pc, #24]	; (800b430 <prvCheckForValidListAndQueue+0x54>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d005      	beq.n	800b428 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b41c:	4b04      	ldr	r3, [pc, #16]	; (800b430 <prvCheckForValidListAndQueue+0x54>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4908      	ldr	r1, [pc, #32]	; (800b444 <prvCheckForValidListAndQueue+0x68>)
 800b422:	4618      	mov	r0, r3
 800b424:	f7fe f896 	bl	8009554 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b428:	f000 f96e 	bl	800b708 <vPortExitCritical>
    }
 800b42c:	bf00      	nop
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	20000c64 	.word	0x20000c64
 800b434:	20000c34 	.word	0x20000c34
 800b438:	20000c48 	.word	0x20000c48
 800b43c:	20000c5c 	.word	0x20000c5c
 800b440:	20000c60 	.word	0x20000c60
 800b444:	080114a4 	.word	0x080114a4

0800b448 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	3b04      	subs	r3, #4
 800b458:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b460:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3b04      	subs	r3, #4
 800b466:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	f023 0201 	bic.w	r2, r3, #1
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	3b04      	subs	r3, #4
 800b476:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800b478:	4a0c      	ldr	r2, [pc, #48]	; (800b4ac <pxPortInitialiseStack+0x64>)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	3b14      	subs	r3, #20
 800b482:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3b04      	subs	r3, #4
 800b48e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f06f 0202 	mvn.w	r2, #2
 800b496:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	3b20      	subs	r3, #32
 800b49c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800b49e:	68fb      	ldr	r3, [r7, #12]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3714      	adds	r7, #20
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr
 800b4ac:	0800b4b1 	.word	0x0800b4b1

0800b4b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800b4ba:	4b12      	ldr	r3, [pc, #72]	; (800b504 <prvTaskExitError+0x54>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c2:	d00a      	beq.n	800b4da <prvTaskExitError+0x2a>
        __asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	60fb      	str	r3, [r7, #12]
    }
 800b4d6:	bf00      	nop
 800b4d8:	e7fe      	b.n	800b4d8 <prvTaskExitError+0x28>
        __asm volatile
 800b4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	60bb      	str	r3, [r7, #8]
    }
 800b4ec:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800b4ee:	bf00      	nop
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d0fc      	beq.n	800b4f0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800b4f6:	bf00      	nop
 800b4f8:	bf00      	nop
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr
 800b504:	20000018 	.word	0x20000018
	...

0800b510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800b510:	4b07      	ldr	r3, [pc, #28]	; (800b530 <pxCurrentTCBConst2>)
 800b512:	6819      	ldr	r1, [r3, #0]
 800b514:	6808      	ldr	r0, [r1, #0]
 800b516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51a:	f380 8809 	msr	PSP, r0
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f04f 0000 	mov.w	r0, #0
 800b526:	f380 8811 	msr	BASEPRI, r0
 800b52a:	4770      	bx	lr
 800b52c:	f3af 8000 	nop.w

0800b530 <pxCurrentTCBConst2>:
 800b530:	20000b30 	.word	0x20000b30
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800b534:	bf00      	nop
 800b536:	bf00      	nop

0800b538 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800b538:	4808      	ldr	r0, [pc, #32]	; (800b55c <prvPortStartFirstTask+0x24>)
 800b53a:	6800      	ldr	r0, [r0, #0]
 800b53c:	6800      	ldr	r0, [r0, #0]
 800b53e:	f380 8808 	msr	MSP, r0
 800b542:	f04f 0000 	mov.w	r0, #0
 800b546:	f380 8814 	msr	CONTROL, r0
 800b54a:	b662      	cpsie	i
 800b54c:	b661      	cpsie	f
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	df00      	svc	0
 800b558:	bf00      	nop
 800b55a:	0000      	.short	0x0000
 800b55c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800b560:	bf00      	nop
 800b562:	bf00      	nop

0800b564 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b56a:	4b46      	ldr	r3, [pc, #280]	; (800b684 <xPortStartScheduler+0x120>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a46      	ldr	r2, [pc, #280]	; (800b688 <xPortStartScheduler+0x124>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d10a      	bne.n	800b58a <xPortStartScheduler+0x26>
        __asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	613b      	str	r3, [r7, #16]
    }
 800b586:	bf00      	nop
 800b588:	e7fe      	b.n	800b588 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b58a:	4b3e      	ldr	r3, [pc, #248]	; (800b684 <xPortStartScheduler+0x120>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a3f      	ldr	r2, [pc, #252]	; (800b68c <xPortStartScheduler+0x128>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d10a      	bne.n	800b5aa <xPortStartScheduler+0x46>
        __asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	60fb      	str	r3, [r7, #12]
    }
 800b5a6:	bf00      	nop
 800b5a8:	e7fe      	b.n	800b5a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5aa:	4b39      	ldr	r3, [pc, #228]	; (800b690 <xPortStartScheduler+0x12c>)
 800b5ac:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	22ff      	movs	r2, #255	; 0xff
 800b5ba:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5c4:	78fb      	ldrb	r3, [r7, #3]
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b5cc:	b2da      	uxtb	r2, r3
 800b5ce:	4b31      	ldr	r3, [pc, #196]	; (800b694 <xPortStartScheduler+0x130>)
 800b5d0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5d2:	4b31      	ldr	r3, [pc, #196]	; (800b698 <xPortStartScheduler+0x134>)
 800b5d4:	2207      	movs	r2, #7
 800b5d6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5d8:	e009      	b.n	800b5ee <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800b5da:	4b2f      	ldr	r3, [pc, #188]	; (800b698 <xPortStartScheduler+0x134>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	4a2d      	ldr	r2, [pc, #180]	; (800b698 <xPortStartScheduler+0x134>)
 800b5e2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b5e4:	78fb      	ldrb	r3, [r7, #3]
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	005b      	lsls	r3, r3, #1
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5ee:	78fb      	ldrb	r3, [r7, #3]
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5f6:	2b80      	cmp	r3, #128	; 0x80
 800b5f8:	d0ef      	beq.n	800b5da <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b5fa:	4b27      	ldr	r3, [pc, #156]	; (800b698 <xPortStartScheduler+0x134>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f1c3 0307 	rsb	r3, r3, #7
 800b602:	2b04      	cmp	r3, #4
 800b604:	d00a      	beq.n	800b61c <xPortStartScheduler+0xb8>
        __asm volatile
 800b606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	60bb      	str	r3, [r7, #8]
    }
 800b618:	bf00      	nop
 800b61a:	e7fe      	b.n	800b61a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b61c:	4b1e      	ldr	r3, [pc, #120]	; (800b698 <xPortStartScheduler+0x134>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	021b      	lsls	r3, r3, #8
 800b622:	4a1d      	ldr	r2, [pc, #116]	; (800b698 <xPortStartScheduler+0x134>)
 800b624:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b626:	4b1c      	ldr	r3, [pc, #112]	; (800b698 <xPortStartScheduler+0x134>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b62e:	4a1a      	ldr	r2, [pc, #104]	; (800b698 <xPortStartScheduler+0x134>)
 800b630:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	b2da      	uxtb	r2, r3
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800b63a:	4b18      	ldr	r3, [pc, #96]	; (800b69c <xPortStartScheduler+0x138>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a17      	ldr	r2, [pc, #92]	; (800b69c <xPortStartScheduler+0x138>)
 800b640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b644:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800b646:	4b15      	ldr	r3, [pc, #84]	; (800b69c <xPortStartScheduler+0x138>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a14      	ldr	r2, [pc, #80]	; (800b69c <xPortStartScheduler+0x138>)
 800b64c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b650:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800b652:	f000 f8e3 	bl	800b81c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800b656:	4b12      	ldr	r3, [pc, #72]	; (800b6a0 <xPortStartScheduler+0x13c>)
 800b658:	2200      	movs	r2, #0
 800b65a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800b65c:	f000 f902 	bl	800b864 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b660:	4b10      	ldr	r3, [pc, #64]	; (800b6a4 <xPortStartScheduler+0x140>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a0f      	ldr	r2, [pc, #60]	; (800b6a4 <xPortStartScheduler+0x140>)
 800b666:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b66a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800b66c:	f7ff ff64 	bl	800b538 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800b670:	f7fe fc60 	bl	8009f34 <vTaskSwitchContext>
    prvTaskExitError();
 800b674:	f7ff ff1c 	bl	800b4b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3718      	adds	r7, #24
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	e000ed00 	.word	0xe000ed00
 800b688:	410fc271 	.word	0x410fc271
 800b68c:	410fc270 	.word	0x410fc270
 800b690:	e000e400 	.word	0xe000e400
 800b694:	20000c70 	.word	0x20000c70
 800b698:	20000c74 	.word	0x20000c74
 800b69c:	e000ed20 	.word	0xe000ed20
 800b6a0:	20000018 	.word	0x20000018
 800b6a4:	e000ef34 	.word	0xe000ef34

0800b6a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
        __asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	607b      	str	r3, [r7, #4]
    }
 800b6c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800b6c2:	4b0f      	ldr	r3, [pc, #60]	; (800b700 <vPortEnterCritical+0x58>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	4a0d      	ldr	r2, [pc, #52]	; (800b700 <vPortEnterCritical+0x58>)
 800b6ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800b6cc:	4b0c      	ldr	r3, [pc, #48]	; (800b700 <vPortEnterCritical+0x58>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d10f      	bne.n	800b6f4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6d4:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <vPortEnterCritical+0x5c>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00a      	beq.n	800b6f4 <vPortEnterCritical+0x4c>
        __asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	603b      	str	r3, [r7, #0]
    }
 800b6f0:	bf00      	nop
 800b6f2:	e7fe      	b.n	800b6f2 <vPortEnterCritical+0x4a>
    }
}
 800b6f4:	bf00      	nop
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	20000018 	.word	0x20000018
 800b704:	e000ed04 	.word	0xe000ed04

0800b708 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800b70e:	4b12      	ldr	r3, [pc, #72]	; (800b758 <vPortExitCritical+0x50>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10a      	bne.n	800b72c <vPortExitCritical+0x24>
        __asm volatile
 800b716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	607b      	str	r3, [r7, #4]
    }
 800b728:	bf00      	nop
 800b72a:	e7fe      	b.n	800b72a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800b72c:	4b0a      	ldr	r3, [pc, #40]	; (800b758 <vPortExitCritical+0x50>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	3b01      	subs	r3, #1
 800b732:	4a09      	ldr	r2, [pc, #36]	; (800b758 <vPortExitCritical+0x50>)
 800b734:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800b736:	4b08      	ldr	r3, [pc, #32]	; (800b758 <vPortExitCritical+0x50>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d105      	bne.n	800b74a <vPortExitCritical+0x42>
 800b73e:	2300      	movs	r3, #0
 800b740:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	f383 8811 	msr	BASEPRI, r3
    }
 800b748:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800b74a:	bf00      	nop
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	20000018 	.word	0x20000018
 800b75c:	00000000 	.word	0x00000000

0800b760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800b760:	f3ef 8009 	mrs	r0, PSP
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	4b15      	ldr	r3, [pc, #84]	; (800b7c0 <pxCurrentTCBConst>)
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	f01e 0f10 	tst.w	lr, #16
 800b770:	bf08      	it	eq
 800b772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b77a:	6010      	str	r0, [r2, #0]
 800b77c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b780:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b784:	f380 8811 	msr	BASEPRI, r0
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f7fe fbd0 	bl	8009f34 <vTaskSwitchContext>
 800b794:	f04f 0000 	mov.w	r0, #0
 800b798:	f380 8811 	msr	BASEPRI, r0
 800b79c:	bc09      	pop	{r0, r3}
 800b79e:	6819      	ldr	r1, [r3, #0]
 800b7a0:	6808      	ldr	r0, [r1, #0]
 800b7a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a6:	f01e 0f10 	tst.w	lr, #16
 800b7aa:	bf08      	it	eq
 800b7ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7b0:	f380 8809 	msr	PSP, r0
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	f3af 8000 	nop.w

0800b7c0 <pxCurrentTCBConst>:
 800b7c0:	20000b30 	.word	0x20000b30
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800b7c4:	bf00      	nop
 800b7c6:	bf00      	nop

0800b7c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
        __asm volatile
 800b7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	607b      	str	r3, [r7, #4]
    }
 800b7e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800b7e2:	f001 fc2d 	bl	800d040 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800b7e6:	f7fe fa8b 	bl	8009d00 <xTaskIncrementTick>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d006      	beq.n	800b7fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800b7f0:	f001 fc84 	bl	800d0fc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b7f4:	4b08      	ldr	r3, [pc, #32]	; (800b818 <SysTick_Handler+0x50>)
 800b7f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fa:	601a      	str	r2, [r3, #0]
 800b7fc:	e001      	b.n	800b802 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800b7fe:	f001 fc61 	bl	800d0c4 <SEGGER_SYSVIEW_RecordExitISR>
 800b802:	2300      	movs	r3, #0
 800b804:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	f383 8811 	msr	BASEPRI, r3
    }
 800b80c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800b80e:	bf00      	nop
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	e000ed04 	.word	0xe000ed04

0800b81c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800b81c:	b480      	push	{r7}
 800b81e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b820:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <vPortSetupTimerInterrupt+0x34>)
 800b822:	2200      	movs	r2, #0
 800b824:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b826:	4b0b      	ldr	r3, [pc, #44]	; (800b854 <vPortSetupTimerInterrupt+0x38>)
 800b828:	2200      	movs	r2, #0
 800b82a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b82c:	4b0a      	ldr	r3, [pc, #40]	; (800b858 <vPortSetupTimerInterrupt+0x3c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a0a      	ldr	r2, [pc, #40]	; (800b85c <vPortSetupTimerInterrupt+0x40>)
 800b832:	fba2 2303 	umull	r2, r3, r2, r3
 800b836:	099b      	lsrs	r3, r3, #6
 800b838:	4a09      	ldr	r2, [pc, #36]	; (800b860 <vPortSetupTimerInterrupt+0x44>)
 800b83a:	3b01      	subs	r3, #1
 800b83c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b83e:	4b04      	ldr	r3, [pc, #16]	; (800b850 <vPortSetupTimerInterrupt+0x34>)
 800b840:	2207      	movs	r2, #7
 800b842:	601a      	str	r2, [r3, #0]
}
 800b844:	bf00      	nop
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	e000e010 	.word	0xe000e010
 800b854:	e000e018 	.word	0xe000e018
 800b858:	20000008 	.word	0x20000008
 800b85c:	10624dd3 	.word	0x10624dd3
 800b860:	e000e014 	.word	0xe000e014

0800b864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800b864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b874 <vPortEnableVFP+0x10>
 800b868:	6801      	ldr	r1, [r0, #0]
 800b86a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b86e:	6001      	str	r1, [r0, #0]
 800b870:	4770      	bx	lr
 800b872:	0000      	.short	0x0000
 800b874:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800b878:	bf00      	nop
 800b87a:	bf00      	nop

0800b87c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800b882:	f3ef 8305 	mrs	r3, IPSR
 800b886:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b0f      	cmp	r3, #15
 800b88c:	d914      	bls.n	800b8b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b88e:	4a17      	ldr	r2, [pc, #92]	; (800b8ec <vPortValidateInterruptPriority+0x70>)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	4413      	add	r3, r2
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b898:	4b15      	ldr	r3, [pc, #84]	; (800b8f0 <vPortValidateInterruptPriority+0x74>)
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	7afa      	ldrb	r2, [r7, #11]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d20a      	bcs.n	800b8b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800b8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a6:	f383 8811 	msr	BASEPRI, r3
 800b8aa:	f3bf 8f6f 	isb	sy
 800b8ae:	f3bf 8f4f 	dsb	sy
 800b8b2:	607b      	str	r3, [r7, #4]
    }
 800b8b4:	bf00      	nop
 800b8b6:	e7fe      	b.n	800b8b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8b8:	4b0e      	ldr	r3, [pc, #56]	; (800b8f4 <vPortValidateInterruptPriority+0x78>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8c0:	4b0d      	ldr	r3, [pc, #52]	; (800b8f8 <vPortValidateInterruptPriority+0x7c>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d90a      	bls.n	800b8de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800b8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8cc:	f383 8811 	msr	BASEPRI, r3
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	603b      	str	r3, [r7, #0]
    }
 800b8da:	bf00      	nop
 800b8dc:	e7fe      	b.n	800b8dc <vPortValidateInterruptPriority+0x60>
    }
 800b8de:	bf00      	nop
 800b8e0:	3714      	adds	r7, #20
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	e000e3f0 	.word	0xe000e3f0
 800b8f0:	20000c70 	.word	0x20000c70
 800b8f4:	e000ed0c 	.word	0xe000ed0c
 800b8f8:	20000c74 	.word	0x20000c74

0800b8fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08a      	sub	sp, #40	; 0x28
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800b904:	2300      	movs	r3, #0
 800b906:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800b908:	f7fe f8d0 	bl	8009aac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800b90c:	4b53      	ldr	r3, [pc, #332]	; (800ba5c <pvPortMalloc+0x160>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d101      	bne.n	800b918 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800b914:	f000 f908 	bl	800bb28 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d012      	beq.n	800b944 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800b91e:	2208      	movs	r2, #8
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f003 0307 	and.w	r3, r3, #7
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	3308      	adds	r3, #8
 800b92a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	43db      	mvns	r3, r3
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	429a      	cmp	r2, r3
 800b934:	d804      	bhi.n	800b940 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	4413      	add	r3, r2
 800b93c:	607b      	str	r3, [r7, #4]
 800b93e:	e001      	b.n	800b944 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800b940:	2300      	movs	r3, #0
 800b942:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	db70      	blt.n	800ba2c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d06d      	beq.n	800ba2c <pvPortMalloc+0x130>
 800b950:	4b43      	ldr	r3, [pc, #268]	; (800ba60 <pvPortMalloc+0x164>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	429a      	cmp	r2, r3
 800b958:	d868      	bhi.n	800ba2c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800b95a:	4b42      	ldr	r3, [pc, #264]	; (800ba64 <pvPortMalloc+0x168>)
 800b95c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800b95e:	4b41      	ldr	r3, [pc, #260]	; (800ba64 <pvPortMalloc+0x168>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b964:	e004      	b.n	800b970 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800b966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b968:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	429a      	cmp	r2, r3
 800b978:	d903      	bls.n	800b982 <pvPortMalloc+0x86>
 800b97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1f1      	bne.n	800b966 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800b982:	4b36      	ldr	r3, [pc, #216]	; (800ba5c <pvPortMalloc+0x160>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b988:	429a      	cmp	r2, r3
 800b98a:	d04f      	beq.n	800ba2c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b98c:	6a3b      	ldr	r3, [r7, #32]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2208      	movs	r2, #8
 800b992:	4413      	add	r3, r2
 800b994:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	6a3b      	ldr	r3, [r7, #32]
 800b99c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a0:	685a      	ldr	r2, [r3, #4]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	1ad2      	subs	r2, r2, r3
 800b9a6:	2308      	movs	r3, #8
 800b9a8:	005b      	lsls	r3, r3, #1
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d91f      	bls.n	800b9ee <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f003 0307 	and.w	r3, r3, #7
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00a      	beq.n	800b9d6 <pvPortMalloc+0xda>
        __asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	613b      	str	r3, [r7, #16]
    }
 800b9d2:	bf00      	nop
 800b9d4:	e7fe      	b.n	800b9d4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d8:	685a      	ldr	r2, [r3, #4]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	1ad2      	subs	r2, r2, r3
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800b9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9e8:	6978      	ldr	r0, [r7, #20]
 800b9ea:	f000 f8f9 	bl	800bbe0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b9ee:	4b1c      	ldr	r3, [pc, #112]	; (800ba60 <pvPortMalloc+0x164>)
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	1ad3      	subs	r3, r2, r3
 800b9f8:	4a19      	ldr	r2, [pc, #100]	; (800ba60 <pvPortMalloc+0x164>)
 800b9fa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9fc:	4b18      	ldr	r3, [pc, #96]	; (800ba60 <pvPortMalloc+0x164>)
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	4b19      	ldr	r3, [pc, #100]	; (800ba68 <pvPortMalloc+0x16c>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d203      	bcs.n	800ba10 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba08:	4b15      	ldr	r3, [pc, #84]	; (800ba60 <pvPortMalloc+0x164>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a16      	ldr	r2, [pc, #88]	; (800ba68 <pvPortMalloc+0x16c>)
 800ba0e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1e:	2200      	movs	r2, #0
 800ba20:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800ba22:	4b12      	ldr	r3, [pc, #72]	; (800ba6c <pvPortMalloc+0x170>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3301      	adds	r3, #1
 800ba28:	4a10      	ldr	r2, [pc, #64]	; (800ba6c <pvPortMalloc+0x170>)
 800ba2a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800ba2c:	f7fe f84c 	bl	8009ac8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	f003 0307 	and.w	r3, r3, #7
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00a      	beq.n	800ba50 <pvPortMalloc+0x154>
        __asm volatile
 800ba3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	60fb      	str	r3, [r7, #12]
    }
 800ba4c:	bf00      	nop
 800ba4e:	e7fe      	b.n	800ba4e <pvPortMalloc+0x152>
    return pvReturn;
 800ba50:	69fb      	ldr	r3, [r7, #28]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3728      	adds	r7, #40	; 0x28
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	20019c80 	.word	0x20019c80
 800ba60:	20019c84 	.word	0x20019c84
 800ba64:	20019c78 	.word	0x20019c78
 800ba68:	20019c88 	.word	0x20019c88
 800ba6c:	20019c8c 	.word	0x20019c8c

0800ba70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b086      	sub	sp, #24
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d049      	beq.n	800bb16 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800ba82:	2308      	movs	r3, #8
 800ba84:	425b      	negs	r3, r3
 800ba86:	697a      	ldr	r2, [r7, #20]
 800ba88:	4413      	add	r3, r2
 800ba8a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	db0a      	blt.n	800baae <vPortFree+0x3e>
        __asm volatile
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	60fb      	str	r3, [r7, #12]
    }
 800baaa:	bf00      	nop
 800baac:	e7fe      	b.n	800baac <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00a      	beq.n	800bacc <vPortFree+0x5c>
        __asm volatile
 800bab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baba:	f383 8811 	msr	BASEPRI, r3
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	60bb      	str	r3, [r7, #8]
    }
 800bac8:	bf00      	nop
 800baca:	e7fe      	b.n	800baca <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	0fdb      	lsrs	r3, r3, #31
 800bad2:	f003 0301 	and.w	r3, r3, #1
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d01c      	beq.n	800bb16 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d118      	bne.n	800bb16 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800baf0:	f7fd ffdc 	bl	8009aac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	685a      	ldr	r2, [r3, #4]
 800baf8:	4b09      	ldr	r3, [pc, #36]	; (800bb20 <vPortFree+0xb0>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4413      	add	r3, r2
 800bafe:	4a08      	ldr	r2, [pc, #32]	; (800bb20 <vPortFree+0xb0>)
 800bb00:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb02:	6938      	ldr	r0, [r7, #16]
 800bb04:	f000 f86c 	bl	800bbe0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800bb08:	4b06      	ldr	r3, [pc, #24]	; (800bb24 <vPortFree+0xb4>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	4a05      	ldr	r2, [pc, #20]	; (800bb24 <vPortFree+0xb4>)
 800bb10:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800bb12:	f7fd ffd9 	bl	8009ac8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800bb16:	bf00      	nop
 800bb18:	3718      	adds	r7, #24
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20019c84 	.word	0x20019c84
 800bb24:	20019c90 	.word	0x20019c90

0800bb28 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb2e:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800bb32:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800bb34:	4b25      	ldr	r3, [pc, #148]	; (800bbcc <prvHeapInit+0xa4>)
 800bb36:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f003 0307 	and.w	r3, r3, #7
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00c      	beq.n	800bb5c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	3307      	adds	r3, #7
 800bb46:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f023 0307 	bic.w	r3, r3, #7
 800bb4e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800bb50:	68ba      	ldr	r2, [r7, #8]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	4a1d      	ldr	r2, [pc, #116]	; (800bbcc <prvHeapInit+0xa4>)
 800bb58:	4413      	add	r3, r2
 800bb5a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb60:	4a1b      	ldr	r2, [pc, #108]	; (800bbd0 <prvHeapInit+0xa8>)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800bb66:	4b1a      	ldr	r3, [pc, #104]	; (800bbd0 <prvHeapInit+0xa8>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	4413      	add	r3, r2
 800bb72:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800bb74:	2208      	movs	r2, #8
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	1a9b      	subs	r3, r3, r2
 800bb7a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f023 0307 	bic.w	r3, r3, #7
 800bb82:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	4a13      	ldr	r2, [pc, #76]	; (800bbd4 <prvHeapInit+0xac>)
 800bb88:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800bb8a:	4b12      	ldr	r3, [pc, #72]	; (800bbd4 <prvHeapInit+0xac>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800bb92:	4b10      	ldr	r3, [pc, #64]	; (800bbd4 <prvHeapInit+0xac>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2200      	movs	r2, #0
 800bb98:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	1ad2      	subs	r2, r2, r3
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bba8:	4b0a      	ldr	r3, [pc, #40]	; (800bbd4 <prvHeapInit+0xac>)
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	4a08      	ldr	r2, [pc, #32]	; (800bbd8 <prvHeapInit+0xb0>)
 800bbb6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	4a07      	ldr	r2, [pc, #28]	; (800bbdc <prvHeapInit+0xb4>)
 800bbbe:	6013      	str	r3, [r2, #0]
}
 800bbc0:	bf00      	nop
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	20000c78 	.word	0x20000c78
 800bbd0:	20019c78 	.word	0x20019c78
 800bbd4:	20019c80 	.word	0x20019c80
 800bbd8:	20019c88 	.word	0x20019c88
 800bbdc:	20019c84 	.word	0x20019c84

0800bbe0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbe8:	4b28      	ldr	r3, [pc, #160]	; (800bc8c <prvInsertBlockIntoFreeList+0xac>)
 800bbea:	60fb      	str	r3, [r7, #12]
 800bbec:	e002      	b.n	800bbf4 <prvInsertBlockIntoFreeList+0x14>
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	60fb      	str	r3, [r7, #12]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d8f7      	bhi.n	800bbee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	4413      	add	r3, r2
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d108      	bne.n	800bc22 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	685a      	ldr	r2, [r3, #4]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	441a      	add	r2, r3
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	441a      	add	r2, r3
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d118      	bne.n	800bc68 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	4b15      	ldr	r3, [pc, #84]	; (800bc90 <prvInsertBlockIntoFreeList+0xb0>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d00d      	beq.n	800bc5e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	441a      	add	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	601a      	str	r2, [r3, #0]
 800bc5c:	e008      	b.n	800bc70 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc5e:	4b0c      	ldr	r3, [pc, #48]	; (800bc90 <prvInsertBlockIntoFreeList+0xb0>)
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	601a      	str	r2, [r3, #0]
 800bc66:	e003      	b.n	800bc70 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d002      	beq.n	800bc7e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800bc7e:	bf00      	nop
 800bc80:	3714      	adds	r7, #20
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop
 800bc8c:	20019c78 	.word	0x20019c78
 800bc90:	20019c80 	.word	0x20019c80

0800bc94 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b086      	sub	sp, #24
 800bc98:	af02      	add	r7, sp, #8
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
 800bca0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800bca2:	2205      	movs	r2, #5
 800bca4:	492b      	ldr	r1, [pc, #172]	; (800bd54 <SYSVIEW_AddTask+0xc0>)
 800bca6:	68b8      	ldr	r0, [r7, #8]
 800bca8:	f002 faaf 	bl	800e20a <memcmp>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d04b      	beq.n	800bd4a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800bcb2:	4b29      	ldr	r3, [pc, #164]	; (800bd58 <SYSVIEW_AddTask+0xc4>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b07      	cmp	r3, #7
 800bcb8:	d903      	bls.n	800bcc2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800bcba:	4828      	ldr	r0, [pc, #160]	; (800bd5c <SYSVIEW_AddTask+0xc8>)
 800bcbc:	f001 fc08 	bl	800d4d0 <SEGGER_SYSVIEW_Warn>
    return;
 800bcc0:	e044      	b.n	800bd4c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800bcc2:	4b25      	ldr	r3, [pc, #148]	; (800bd58 <SYSVIEW_AddTask+0xc4>)
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	4926      	ldr	r1, [pc, #152]	; (800bd60 <SYSVIEW_AddTask+0xcc>)
 800bcc8:	4613      	mov	r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	4413      	add	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	440b      	add	r3, r1
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800bcd6:	4b20      	ldr	r3, [pc, #128]	; (800bd58 <SYSVIEW_AddTask+0xc4>)
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	4921      	ldr	r1, [pc, #132]	; (800bd60 <SYSVIEW_AddTask+0xcc>)
 800bcdc:	4613      	mov	r3, r2
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	440b      	add	r3, r1
 800bce6:	3304      	adds	r3, #4
 800bce8:	68ba      	ldr	r2, [r7, #8]
 800bcea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800bcec:	4b1a      	ldr	r3, [pc, #104]	; (800bd58 <SYSVIEW_AddTask+0xc4>)
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	491b      	ldr	r1, [pc, #108]	; (800bd60 <SYSVIEW_AddTask+0xcc>)
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4413      	add	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	440b      	add	r3, r1
 800bcfc:	3308      	adds	r3, #8
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800bd02:	4b15      	ldr	r3, [pc, #84]	; (800bd58 <SYSVIEW_AddTask+0xc4>)
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	4916      	ldr	r1, [pc, #88]	; (800bd60 <SYSVIEW_AddTask+0xcc>)
 800bd08:	4613      	mov	r3, r2
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	4413      	add	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	440b      	add	r3, r1
 800bd12:	330c      	adds	r3, #12
 800bd14:	683a      	ldr	r2, [r7, #0]
 800bd16:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800bd18:	4b0f      	ldr	r3, [pc, #60]	; (800bd58 <SYSVIEW_AddTask+0xc4>)
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	4910      	ldr	r1, [pc, #64]	; (800bd60 <SYSVIEW_AddTask+0xcc>)
 800bd1e:	4613      	mov	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4413      	add	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	440b      	add	r3, r1
 800bd28:	3310      	adds	r3, #16
 800bd2a:	69ba      	ldr	r2, [r7, #24]
 800bd2c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800bd2e:	4b0a      	ldr	r3, [pc, #40]	; (800bd58 <SYSVIEW_AddTask+0xc4>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	3301      	adds	r3, #1
 800bd34:	4a08      	ldr	r2, [pc, #32]	; (800bd58 <SYSVIEW_AddTask+0xc4>)
 800bd36:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	9300      	str	r3, [sp, #0]
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	68b9      	ldr	r1, [r7, #8]
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	f000 f80e 	bl	800bd64 <SYSVIEW_SendTaskInfo>
 800bd48:	e000      	b.n	800bd4c <SYSVIEW_AddTask+0xb8>
    return;
 800bd4a:	bf00      	nop

}
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	080114ac 	.word	0x080114ac
 800bd58:	20019d34 	.word	0x20019d34
 800bd5c:	080114b4 	.word	0x080114b4
 800bd60:	20019c94 	.word	0x20019c94

0800bd64 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b08a      	sub	sp, #40	; 0x28
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
 800bd70:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800bd72:	f107 0314 	add.w	r3, r7, #20
 800bd76:	2214      	movs	r2, #20
 800bd78:	2100      	movs	r1, #0
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f002 fa55 	bl	800e22a <memset>
  TaskInfo.TaskID     = TaskID;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800bd94:	f107 0314 	add.w	r3, r7, #20
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f001 f827 	bl	800cdec <SEGGER_SYSVIEW_SendTaskInfo>
}
 800bd9e:	bf00      	nop
 800bda0:	3728      	adds	r7, #40	; 0x28
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
	...

0800bda8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800bdae:	4b24      	ldr	r3, [pc, #144]	; (800be40 <_DoInit+0x98>)
 800bdb0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2203      	movs	r2, #3
 800bdb6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2203      	movs	r2, #3
 800bdbc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a20      	ldr	r2, [pc, #128]	; (800be44 <_DoInit+0x9c>)
 800bdc2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a20      	ldr	r2, [pc, #128]	; (800be48 <_DoInit+0xa0>)
 800bdc8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bdd0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a17      	ldr	r2, [pc, #92]	; (800be44 <_DoInit+0x9c>)
 800bde8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4a17      	ldr	r2, [pc, #92]	; (800be4c <_DoInit+0xa4>)
 800bdee:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2210      	movs	r2, #16
 800bdf4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	3307      	adds	r3, #7
 800be0c:	4a10      	ldr	r2, [pc, #64]	; (800be50 <_DoInit+0xa8>)
 800be0e:	6810      	ldr	r0, [r2, #0]
 800be10:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800be12:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	4a0e      	ldr	r2, [pc, #56]	; (800be54 <_DoInit+0xac>)
 800be1a:	6810      	ldr	r0, [r2, #0]
 800be1c:	6018      	str	r0, [r3, #0]
 800be1e:	8891      	ldrh	r1, [r2, #4]
 800be20:	7992      	ldrb	r2, [r2, #6]
 800be22:	8099      	strh	r1, [r3, #4]
 800be24:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800be26:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2220      	movs	r2, #32
 800be2e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800be30:	f3bf 8f5f 	dmb	sy
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	20019d38 	.word	0x20019d38
 800be44:	08011504 	.word	0x08011504
 800be48:	20019de0 	.word	0x20019de0
 800be4c:	2001a1e0 	.word	0x2001a1e0
 800be50:	08011510 	.word	0x08011510
 800be54:	08011514 	.word	0x08011514

0800be58 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800be58:	b580      	push	{r7, lr}
 800be5a:	b08a      	sub	sp, #40	; 0x28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800be64:	2300      	movs	r3, #0
 800be66:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	691b      	ldr	r3, [r3, #16]
 800be72:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800be74:	69ba      	ldr	r2, [r7, #24]
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d905      	bls.n	800be88 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800be7c:	69ba      	ldr	r2, [r7, #24]
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	1ad3      	subs	r3, r2, r3
 800be82:	3b01      	subs	r3, #1
 800be84:	627b      	str	r3, [r7, #36]	; 0x24
 800be86:	e007      	b.n	800be98 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	689a      	ldr	r2, [r3, #8]
 800be8c:	69b9      	ldr	r1, [r7, #24]
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	1acb      	subs	r3, r1, r3
 800be92:	4413      	add	r3, r2
 800be94:	3b01      	subs	r3, #1
 800be96:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	689a      	ldr	r2, [r3, #8]
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bea2:	4293      	cmp	r3, r2
 800bea4:	bf28      	it	cs
 800bea6:	4613      	movcs	r3, r2
 800bea8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800beaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4293      	cmp	r3, r2
 800beb0:	bf28      	it	cs
 800beb2:	4613      	movcs	r3, r2
 800beb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	4413      	add	r3, r2
 800bebe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800bec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bec2:	68b9      	ldr	r1, [r7, #8]
 800bec4:	6978      	ldr	r0, [r7, #20]
 800bec6:	f002 fa1e 	bl	800e306 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800beca:	6a3a      	ldr	r2, [r7, #32]
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	4413      	add	r3, r2
 800bed0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	4413      	add	r3, r2
 800bed8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800bee2:	69fa      	ldr	r2, [r7, #28]
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee6:	4413      	add	r3, r2
 800bee8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	69fa      	ldr	r2, [r7, #28]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d101      	bne.n	800bef8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800bef4:	2300      	movs	r3, #0
 800bef6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800bef8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	69fa      	ldr	r2, [r7, #28]
 800bf00:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d1b2      	bne.n	800be6e <_WriteBlocking+0x16>
  return NumBytesWritten;
 800bf08:	6a3b      	ldr	r3, [r7, #32]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3728      	adds	r7, #40	; 0x28
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b088      	sub	sp, #32
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	60f8      	str	r0, [r7, #12]
 800bf1a:	60b9      	str	r1, [r7, #8]
 800bf1c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	689a      	ldr	r2, [r3, #8]
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800bf2e:	69ba      	ldr	r2, [r7, #24]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d911      	bls.n	800bf5a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	685a      	ldr	r2, [r3, #4]
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	68b9      	ldr	r1, [r7, #8]
 800bf44:	6938      	ldr	r0, [r7, #16]
 800bf46:	f002 f9de 	bl	800e306 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800bf4a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800bf4e:	69fa      	ldr	r2, [r7, #28]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	441a      	add	r2, r3
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800bf58:	e01f      	b.n	800bf9a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	685a      	ldr	r2, [r3, #4]
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	4413      	add	r3, r2
 800bf66:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800bf68:	697a      	ldr	r2, [r7, #20]
 800bf6a:	68b9      	ldr	r1, [r7, #8]
 800bf6c:	6938      	ldr	r0, [r7, #16]
 800bf6e:	f002 f9ca 	bl	800e306 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	4413      	add	r3, r2
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	4619      	mov	r1, r3
 800bf8a:	6938      	ldr	r0, [r7, #16]
 800bf8c:	f002 f9bb 	bl	800e306 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800bf90:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	60da      	str	r2, [r3, #12]
}
 800bf9a:	bf00      	nop
 800bf9c:	3720      	adds	r7, #32
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800bfa2:	b480      	push	{r7}
 800bfa4:	b087      	sub	sp, #28
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	691b      	ldr	r3, [r3, #16]
 800bfae:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800bfb6:	693a      	ldr	r2, [r7, #16]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d808      	bhi.n	800bfd0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	689a      	ldr	r2, [r3, #8]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	1ad2      	subs	r2, r2, r3
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	4413      	add	r3, r2
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	617b      	str	r3, [r7, #20]
 800bfce:	e004      	b.n	800bfda <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800bfd0:	693a      	ldr	r2, [r7, #16]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	1ad3      	subs	r3, r2, r3
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	617b      	str	r3, [r7, #20]
  }
  return r;
 800bfda:	697b      	ldr	r3, [r7, #20]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	371c      	adds	r7, #28
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr

0800bfe8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08c      	sub	sp, #48	; 0x30
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800bff4:	4b3e      	ldr	r3, [pc, #248]	; (800c0f0 <SEGGER_RTT_ReadNoLock+0x108>)
 800bff6:	623b      	str	r3, [r7, #32]
 800bff8:	6a3b      	ldr	r3, [r7, #32]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d101      	bne.n	800c006 <SEGGER_RTT_ReadNoLock+0x1e>
 800c002:	f7ff fed1 	bl	800bda8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	4613      	mov	r3, r2
 800c00a:	005b      	lsls	r3, r3, #1
 800c00c:	4413      	add	r3, r2
 800c00e:	00db      	lsls	r3, r3, #3
 800c010:	3360      	adds	r3, #96	; 0x60
 800c012:	4a37      	ldr	r2, [pc, #220]	; (800c0f0 <SEGGER_RTT_ReadNoLock+0x108>)
 800c014:	4413      	add	r3, r2
 800c016:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800c028:	2300      	movs	r3, #0
 800c02a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800c02c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	429a      	cmp	r2, r3
 800c032:	d92b      	bls.n	800c08c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	689a      	ldr	r2, [r3, #8]
 800c038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03a:	1ad3      	subs	r3, r2, r3
 800c03c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4293      	cmp	r3, r2
 800c044:	bf28      	it	cs
 800c046:	4613      	movcs	r3, r2
 800c048:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	685a      	ldr	r2, [r3, #4]
 800c04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c050:	4413      	add	r3, r2
 800c052:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c054:	697a      	ldr	r2, [r7, #20]
 800c056:	6939      	ldr	r1, [r7, #16]
 800c058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c05a:	f002 f954 	bl	800e306 <memcpy>
    NumBytesRead += NumBytesRem;
 800c05e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	4413      	add	r3, r2
 800c064:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800c066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	4413      	add	r3, r2
 800c06c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	4413      	add	r3, r2
 800c07c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c084:	429a      	cmp	r2, r3
 800c086:	d101      	bne.n	800c08c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800c088:	2300      	movs	r3, #0
 800c08a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800c08c:	69ba      	ldr	r2, [r7, #24]
 800c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4293      	cmp	r3, r2
 800c09a:	bf28      	it	cs
 800c09c:	4613      	movcs	r3, r2
 800c09e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d019      	beq.n	800c0da <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ac:	4413      	add	r3, r2
 800c0ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c0b0:	697a      	ldr	r2, [r7, #20]
 800c0b2:	6939      	ldr	r1, [r7, #16]
 800c0b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0b6:	f002 f926 	bl	800e306 <memcpy>
    NumBytesRead += NumBytesRem;
 800c0ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	4413      	add	r3, r2
 800c0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800c0c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	1ad3      	subs	r3, r2, r3
 800c0d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c0d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800c0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0e4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800c0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3730      	adds	r7, #48	; 0x30
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	20019d38 	.word	0x20019d38

0800c0f4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b088      	sub	sp, #32
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	1c5a      	adds	r2, r3, #1
 800c108:	4613      	mov	r3, r2
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	4413      	add	r3, r2
 800c10e:	00db      	lsls	r3, r3, #3
 800c110:	4a1f      	ldr	r2, [pc, #124]	; (800c190 <SEGGER_RTT_WriteNoLock+0x9c>)
 800c112:	4413      	add	r3, r2
 800c114:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	695b      	ldr	r3, [r3, #20]
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d029      	beq.n	800c172 <SEGGER_RTT_WriteNoLock+0x7e>
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d82e      	bhi.n	800c180 <SEGGER_RTT_WriteNoLock+0x8c>
 800c122:	2b00      	cmp	r3, #0
 800c124:	d002      	beq.n	800c12c <SEGGER_RTT_WriteNoLock+0x38>
 800c126:	2b01      	cmp	r3, #1
 800c128:	d013      	beq.n	800c152 <SEGGER_RTT_WriteNoLock+0x5e>
 800c12a:	e029      	b.n	800c180 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800c12c:	6978      	ldr	r0, [r7, #20]
 800c12e:	f7ff ff38 	bl	800bfa2 <_GetAvailWriteSpace>
 800c132:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d202      	bcs.n	800c142 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800c13c:	2300      	movs	r3, #0
 800c13e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800c140:	e021      	b.n	800c186 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	69b9      	ldr	r1, [r7, #24]
 800c14a:	6978      	ldr	r0, [r7, #20]
 800c14c:	f7ff fee1 	bl	800bf12 <_WriteNoCheck>
    break;
 800c150:	e019      	b.n	800c186 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800c152:	6978      	ldr	r0, [r7, #20]
 800c154:	f7ff ff25 	bl	800bfa2 <_GetAvailWriteSpace>
 800c158:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	4293      	cmp	r3, r2
 800c160:	bf28      	it	cs
 800c162:	4613      	movcs	r3, r2
 800c164:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800c166:	69fa      	ldr	r2, [r7, #28]
 800c168:	69b9      	ldr	r1, [r7, #24]
 800c16a:	6978      	ldr	r0, [r7, #20]
 800c16c:	f7ff fed1 	bl	800bf12 <_WriteNoCheck>
    break;
 800c170:	e009      	b.n	800c186 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	69b9      	ldr	r1, [r7, #24]
 800c176:	6978      	ldr	r0, [r7, #20]
 800c178:	f7ff fe6e 	bl	800be58 <_WriteBlocking>
 800c17c:	61f8      	str	r0, [r7, #28]
    break;
 800c17e:	e002      	b.n	800c186 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800c180:	2300      	movs	r3, #0
 800c182:	61fb      	str	r3, [r7, #28]
    break;
 800c184:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800c186:	69fb      	ldr	r3, [r7, #28]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3720      	adds	r7, #32
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	20019d38 	.word	0x20019d38

0800c194 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800c194:	b580      	push	{r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800c1a0:	4b0e      	ldr	r3, [pc, #56]	; (800c1dc <SEGGER_RTT_Write+0x48>)
 800c1a2:	61fb      	str	r3, [r7, #28]
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <SEGGER_RTT_Write+0x1e>
 800c1ae:	f7ff fdfb 	bl	800bda8 <_DoInit>
  SEGGER_RTT_LOCK();
 800c1b2:	f3ef 8311 	mrs	r3, BASEPRI
 800c1b6:	f04f 0120 	mov.w	r1, #32
 800c1ba:	f381 8811 	msr	BASEPRI, r1
 800c1be:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	68b9      	ldr	r1, [r7, #8]
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f7ff ff95 	bl	800c0f4 <SEGGER_RTT_WriteNoLock>
 800c1ca:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800c1d2:	697b      	ldr	r3, [r7, #20]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3720      	adds	r7, #32
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	20019d38 	.word	0x20019d38

0800c1e0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800c1e0:	b480      	push	{r7}
 800c1e2:	b087      	sub	sp, #28
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	60f8      	str	r0, [r7, #12]
 800c1e8:	60b9      	str	r1, [r7, #8]
 800c1ea:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800c1f0:	e002      	b.n	800c1f8 <_EncodeStr+0x18>
    Len++;
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800c1f8:	68ba      	ldr	r2, [r7, #8]
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1f6      	bne.n	800c1f2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d901      	bls.n	800c210 <_EncodeStr+0x30>
    Len = Limit;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	2bfe      	cmp	r3, #254	; 0xfe
 800c214:	d806      	bhi.n	800c224 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	1c5a      	adds	r2, r3, #1
 800c21a:	60fa      	str	r2, [r7, #12]
 800c21c:	693a      	ldr	r2, [r7, #16]
 800c21e:	b2d2      	uxtb	r2, r2
 800c220:	701a      	strb	r2, [r3, #0]
 800c222:	e011      	b.n	800c248 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	1c5a      	adds	r2, r3, #1
 800c228:	60fa      	str	r2, [r7, #12]
 800c22a:	22ff      	movs	r2, #255	; 0xff
 800c22c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	1c5a      	adds	r2, r3, #1
 800c232:	60fa      	str	r2, [r7, #12]
 800c234:	693a      	ldr	r2, [r7, #16]
 800c236:	b2d2      	uxtb	r2, r2
 800c238:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	0a19      	lsrs	r1, r3, #8
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	1c5a      	adds	r2, r3, #1
 800c242:	60fa      	str	r2, [r7, #12]
 800c244:	b2ca      	uxtb	r2, r1
 800c246:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800c248:	2300      	movs	r3, #0
 800c24a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c24c:	e00a      	b.n	800c264 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800c24e:	68ba      	ldr	r2, [r7, #8]
 800c250:	1c53      	adds	r3, r2, #1
 800c252:	60bb      	str	r3, [r7, #8]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	1c59      	adds	r1, r3, #1
 800c258:	60f9      	str	r1, [r7, #12]
 800c25a:	7812      	ldrb	r2, [r2, #0]
 800c25c:	701a      	strb	r2, [r3, #0]
    n++;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	3301      	adds	r3, #1
 800c262:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d3f0      	bcc.n	800c24e <_EncodeStr+0x6e>
  }
  return pPayload;
 800c26c:	68fb      	ldr	r3, [r7, #12]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	371c      	adds	r7, #28
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800c27a:	b480      	push	{r7}
 800c27c:	b083      	sub	sp, #12
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	3304      	adds	r3, #4
}
 800c286:	4618      	mov	r0, r3
 800c288:	370c      	adds	r7, #12
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr
	...

0800c294 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c29a:	4b35      	ldr	r3, [pc, #212]	; (800c370 <_HandleIncomingPacket+0xdc>)
 800c29c:	7e1b      	ldrb	r3, [r3, #24]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	1cfb      	adds	r3, r7, #3
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	f7ff fe9f 	bl	800bfe8 <SEGGER_RTT_ReadNoLock>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	dd59      	ble.n	800c368 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800c2b4:	78fb      	ldrb	r3, [r7, #3]
 800c2b6:	2b80      	cmp	r3, #128	; 0x80
 800c2b8:	d032      	beq.n	800c320 <_HandleIncomingPacket+0x8c>
 800c2ba:	2b80      	cmp	r3, #128	; 0x80
 800c2bc:	dc42      	bgt.n	800c344 <_HandleIncomingPacket+0xb0>
 800c2be:	2b07      	cmp	r3, #7
 800c2c0:	dc16      	bgt.n	800c2f0 <_HandleIncomingPacket+0x5c>
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	dd3e      	ble.n	800c344 <_HandleIncomingPacket+0xb0>
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	2b06      	cmp	r3, #6
 800c2ca:	d83b      	bhi.n	800c344 <_HandleIncomingPacket+0xb0>
 800c2cc:	a201      	add	r2, pc, #4	; (adr r2, 800c2d4 <_HandleIncomingPacket+0x40>)
 800c2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d2:	bf00      	nop
 800c2d4:	0800c2f7 	.word	0x0800c2f7
 800c2d8:	0800c2fd 	.word	0x0800c2fd
 800c2dc:	0800c303 	.word	0x0800c303
 800c2e0:	0800c309 	.word	0x0800c309
 800c2e4:	0800c30f 	.word	0x0800c30f
 800c2e8:	0800c315 	.word	0x0800c315
 800c2ec:	0800c31b 	.word	0x0800c31b
 800c2f0:	2b7f      	cmp	r3, #127	; 0x7f
 800c2f2:	d034      	beq.n	800c35e <_HandleIncomingPacket+0xca>
 800c2f4:	e026      	b.n	800c344 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800c2f6:	f000 fbff 	bl	800caf8 <SEGGER_SYSVIEW_Start>
      break;
 800c2fa:	e035      	b.n	800c368 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800c2fc:	f000 fcb6 	bl	800cc6c <SEGGER_SYSVIEW_Stop>
      break;
 800c300:	e032      	b.n	800c368 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800c302:	f000 fe6b 	bl	800cfdc <SEGGER_SYSVIEW_RecordSystime>
      break;
 800c306:	e02f      	b.n	800c368 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800c308:	f000 fe54 	bl	800cfb4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800c30c:	e02c      	b.n	800c368 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800c30e:	f000 fcd3 	bl	800ccb8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800c312:	e029      	b.n	800c368 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800c314:	f001 f89e 	bl	800d454 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800c318:	e026      	b.n	800c368 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800c31a:	f001 f87d 	bl	800d418 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800c31e:	e023      	b.n	800c368 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c320:	4b13      	ldr	r3, [pc, #76]	; (800c370 <_HandleIncomingPacket+0xdc>)
 800c322:	7e1b      	ldrb	r3, [r3, #24]
 800c324:	4618      	mov	r0, r3
 800c326:	1cfb      	adds	r3, r7, #3
 800c328:	2201      	movs	r2, #1
 800c32a:	4619      	mov	r1, r3
 800c32c:	f7ff fe5c 	bl	800bfe8 <SEGGER_RTT_ReadNoLock>
 800c330:	4603      	mov	r3, r0
 800c332:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	dd13      	ble.n	800c362 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800c33a:	78fb      	ldrb	r3, [r7, #3]
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 ffeb 	bl	800d318 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800c342:	e00e      	b.n	800c362 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800c344:	78fb      	ldrb	r3, [r7, #3]
 800c346:	b25b      	sxtb	r3, r3
 800c348:	2b00      	cmp	r3, #0
 800c34a:	da0c      	bge.n	800c366 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c34c:	4b08      	ldr	r3, [pc, #32]	; (800c370 <_HandleIncomingPacket+0xdc>)
 800c34e:	7e1b      	ldrb	r3, [r3, #24]
 800c350:	4618      	mov	r0, r3
 800c352:	1cfb      	adds	r3, r7, #3
 800c354:	2201      	movs	r2, #1
 800c356:	4619      	mov	r1, r3
 800c358:	f7ff fe46 	bl	800bfe8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800c35c:	e003      	b.n	800c366 <_HandleIncomingPacket+0xd2>
      break;
 800c35e:	bf00      	nop
 800c360:	e002      	b.n	800c368 <_HandleIncomingPacket+0xd4>
      break;
 800c362:	bf00      	nop
 800c364:	e000      	b.n	800c368 <_HandleIncomingPacket+0xd4>
      break;
 800c366:	bf00      	nop
    }
  }
}
 800c368:	bf00      	nop
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	2001a1f0 	.word	0x2001a1f0

0800c374 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800c374:	b580      	push	{r7, lr}
 800c376:	b08c      	sub	sp, #48	; 0x30
 800c378:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800c37a:	2301      	movs	r3, #1
 800c37c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800c37e:	1d3b      	adds	r3, r7, #4
 800c380:	3301      	adds	r3, #1
 800c382:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c388:	4b31      	ldr	r3, [pc, #196]	; (800c450 <_TrySendOverflowPacket+0xdc>)
 800c38a:	695b      	ldr	r3, [r3, #20]
 800c38c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c38e:	e00b      	b.n	800c3a8 <_TrySendOverflowPacket+0x34>
 800c390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c392:	b2da      	uxtb	r2, r3
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c396:	1c59      	adds	r1, r3, #1
 800c398:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c39a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c39e:	b2d2      	uxtb	r2, r2
 800c3a0:	701a      	strb	r2, [r3, #0]
 800c3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a4:	09db      	lsrs	r3, r3, #7
 800c3a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3aa:	2b7f      	cmp	r3, #127	; 0x7f
 800c3ac:	d8f0      	bhi.n	800c390 <_TrySendOverflowPacket+0x1c>
 800c3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b0:	1c5a      	adds	r2, r3, #1
 800c3b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c3b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3b6:	b2d2      	uxtb	r2, r2
 800c3b8:	701a      	strb	r2, [r3, #0]
 800c3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3bc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c3be:	4b25      	ldr	r3, [pc, #148]	; (800c454 <_TrySendOverflowPacket+0xe0>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c3c4:	4b22      	ldr	r3, [pc, #136]	; (800c450 <_TrySendOverflowPacket+0xdc>)
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	69ba      	ldr	r2, [r7, #24]
 800c3ca:	1ad3      	subs	r3, r2, r3
 800c3cc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	627b      	str	r3, [r7, #36]	; 0x24
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	623b      	str	r3, [r7, #32]
 800c3d6:	e00b      	b.n	800c3f0 <_TrySendOverflowPacket+0x7c>
 800c3d8:	6a3b      	ldr	r3, [r7, #32]
 800c3da:	b2da      	uxtb	r2, r3
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3de:	1c59      	adds	r1, r3, #1
 800c3e0:	6279      	str	r1, [r7, #36]	; 0x24
 800c3e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c3e6:	b2d2      	uxtb	r2, r2
 800c3e8:	701a      	strb	r2, [r3, #0]
 800c3ea:	6a3b      	ldr	r3, [r7, #32]
 800c3ec:	09db      	lsrs	r3, r3, #7
 800c3ee:	623b      	str	r3, [r7, #32]
 800c3f0:	6a3b      	ldr	r3, [r7, #32]
 800c3f2:	2b7f      	cmp	r3, #127	; 0x7f
 800c3f4:	d8f0      	bhi.n	800c3d8 <_TrySendOverflowPacket+0x64>
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f8:	1c5a      	adds	r2, r3, #1
 800c3fa:	627a      	str	r2, [r7, #36]	; 0x24
 800c3fc:	6a3a      	ldr	r2, [r7, #32]
 800c3fe:	b2d2      	uxtb	r2, r2
 800c400:	701a      	strb	r2, [r3, #0]
 800c402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c404:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800c406:	4b12      	ldr	r3, [pc, #72]	; (800c450 <_TrySendOverflowPacket+0xdc>)
 800c408:	785b      	ldrb	r3, [r3, #1]
 800c40a:	4618      	mov	r0, r3
 800c40c:	1d3b      	adds	r3, r7, #4
 800c40e:	69fa      	ldr	r2, [r7, #28]
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	461a      	mov	r2, r3
 800c414:	1d3b      	adds	r3, r7, #4
 800c416:	4619      	mov	r1, r3
 800c418:	f7f3 fefa 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c41c:	4603      	mov	r3, r0
 800c41e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d009      	beq.n	800c43a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c426:	4a0a      	ldr	r2, [pc, #40]	; (800c450 <_TrySendOverflowPacket+0xdc>)
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800c42c:	4b08      	ldr	r3, [pc, #32]	; (800c450 <_TrySendOverflowPacket+0xdc>)
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	3b01      	subs	r3, #1
 800c432:	b2da      	uxtb	r2, r3
 800c434:	4b06      	ldr	r3, [pc, #24]	; (800c450 <_TrySendOverflowPacket+0xdc>)
 800c436:	701a      	strb	r2, [r3, #0]
 800c438:	e004      	b.n	800c444 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800c43a:	4b05      	ldr	r3, [pc, #20]	; (800c450 <_TrySendOverflowPacket+0xdc>)
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	3301      	adds	r3, #1
 800c440:	4a03      	ldr	r2, [pc, #12]	; (800c450 <_TrySendOverflowPacket+0xdc>)
 800c442:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800c444:	693b      	ldr	r3, [r7, #16]
}
 800c446:	4618      	mov	r0, r3
 800c448:	3730      	adds	r7, #48	; 0x30
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	2001a1f0 	.word	0x2001a1f0
 800c454:	e0001004 	.word	0xe0001004

0800c458 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800c458:	b580      	push	{r7, lr}
 800c45a:	b08a      	sub	sp, #40	; 0x28
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800c464:	4b6c      	ldr	r3, [pc, #432]	; (800c618 <_SendPacket+0x1c0>)
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d010      	beq.n	800c48e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800c46c:	4b6a      	ldr	r3, [pc, #424]	; (800c618 <_SendPacket+0x1c0>)
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	f000 80a3 	beq.w	800c5bc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800c476:	4b68      	ldr	r3, [pc, #416]	; (800c618 <_SendPacket+0x1c0>)
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d109      	bne.n	800c492 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800c47e:	f7ff ff79 	bl	800c374 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800c482:	4b65      	ldr	r3, [pc, #404]	; (800c618 <_SendPacket+0x1c0>)
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	2b01      	cmp	r3, #1
 800c488:	f040 809a 	bne.w	800c5c0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800c48c:	e001      	b.n	800c492 <_SendPacket+0x3a>
    goto Send;
 800c48e:	bf00      	nop
 800c490:	e000      	b.n	800c494 <_SendPacket+0x3c>
Send:
 800c492:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b1f      	cmp	r3, #31
 800c498:	d809      	bhi.n	800c4ae <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800c49a:	4b5f      	ldr	r3, [pc, #380]	; (800c618 <_SendPacket+0x1c0>)
 800c49c:	69da      	ldr	r2, [r3, #28]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c4a4:	f003 0301 	and.w	r3, r3, #1
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f040 808b 	bne.w	800c5c4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2b17      	cmp	r3, #23
 800c4b2:	d807      	bhi.n	800c4c4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	60fb      	str	r3, [r7, #12]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	701a      	strb	r2, [r3, #0]
 800c4c2:	e03d      	b.n	800c540 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	2b7f      	cmp	r3, #127	; 0x7f
 800c4d0:	d912      	bls.n	800c4f8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	09da      	lsrs	r2, r3, #7
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3b01      	subs	r3, #1
 800c4da:	60fb      	str	r3, [r7, #12]
 800c4dc:	b2d2      	uxtb	r2, r2
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	68fa      	ldr	r2, [r7, #12]
 800c4e8:	3a01      	subs	r2, #1
 800c4ea:	60fa      	str	r2, [r7, #12]
 800c4ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c4f0:	b2da      	uxtb	r2, r3
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	701a      	strb	r2, [r3, #0]
 800c4f6:	e006      	b.n	800c506 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	b2da      	uxtb	r2, r3
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2b7f      	cmp	r3, #127	; 0x7f
 800c50a:	d912      	bls.n	800c532 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	09da      	lsrs	r2, r3, #7
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	3b01      	subs	r3, #1
 800c514:	60fb      	str	r3, [r7, #12]
 800c516:	b2d2      	uxtb	r2, r2
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	3a01      	subs	r2, #1
 800c524:	60fa      	str	r2, [r7, #12]
 800c526:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c52a:	b2da      	uxtb	r2, r3
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	701a      	strb	r2, [r3, #0]
 800c530:	e006      	b.n	800c540 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	3b01      	subs	r3, #1
 800c536:	60fb      	str	r3, [r7, #12]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	b2da      	uxtb	r2, r3
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c540:	4b36      	ldr	r3, [pc, #216]	; (800c61c <_SendPacket+0x1c4>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c546:	4b34      	ldr	r3, [pc, #208]	; (800c618 <_SendPacket+0x1c0>)
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	69ba      	ldr	r2, [r7, #24]
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	627b      	str	r3, [r7, #36]	; 0x24
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	623b      	str	r3, [r7, #32]
 800c558:	e00b      	b.n	800c572 <_SendPacket+0x11a>
 800c55a:	6a3b      	ldr	r3, [r7, #32]
 800c55c:	b2da      	uxtb	r2, r3
 800c55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c560:	1c59      	adds	r1, r3, #1
 800c562:	6279      	str	r1, [r7, #36]	; 0x24
 800c564:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c568:	b2d2      	uxtb	r2, r2
 800c56a:	701a      	strb	r2, [r3, #0]
 800c56c:	6a3b      	ldr	r3, [r7, #32]
 800c56e:	09db      	lsrs	r3, r3, #7
 800c570:	623b      	str	r3, [r7, #32]
 800c572:	6a3b      	ldr	r3, [r7, #32]
 800c574:	2b7f      	cmp	r3, #127	; 0x7f
 800c576:	d8f0      	bhi.n	800c55a <_SendPacket+0x102>
 800c578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57a:	1c5a      	adds	r2, r3, #1
 800c57c:	627a      	str	r2, [r7, #36]	; 0x24
 800c57e:	6a3a      	ldr	r2, [r7, #32]
 800c580:	b2d2      	uxtb	r2, r2
 800c582:	701a      	strb	r2, [r3, #0]
 800c584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c586:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800c588:	4b23      	ldr	r3, [pc, #140]	; (800c618 <_SendPacket+0x1c0>)
 800c58a:	785b      	ldrb	r3, [r3, #1]
 800c58c:	4618      	mov	r0, r3
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	1ad3      	subs	r3, r2, r3
 800c594:	461a      	mov	r2, r3
 800c596:	68f9      	ldr	r1, [r7, #12]
 800c598:	f7f3 fe3a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c59c:	4603      	mov	r3, r0
 800c59e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d003      	beq.n	800c5ae <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c5a6:	4a1c      	ldr	r2, [pc, #112]	; (800c618 <_SendPacket+0x1c0>)
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	60d3      	str	r3, [r2, #12]
 800c5ac:	e00b      	b.n	800c5c6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800c5ae:	4b1a      	ldr	r3, [pc, #104]	; (800c618 <_SendPacket+0x1c0>)
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	b2da      	uxtb	r2, r3
 800c5b6:	4b18      	ldr	r3, [pc, #96]	; (800c618 <_SendPacket+0x1c0>)
 800c5b8:	701a      	strb	r2, [r3, #0]
 800c5ba:	e004      	b.n	800c5c6 <_SendPacket+0x16e>
    goto SendDone;
 800c5bc:	bf00      	nop
 800c5be:	e002      	b.n	800c5c6 <_SendPacket+0x16e>
      goto SendDone;
 800c5c0:	bf00      	nop
 800c5c2:	e000      	b.n	800c5c6 <_SendPacket+0x16e>
      goto SendDone;
 800c5c4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800c5c6:	4b14      	ldr	r3, [pc, #80]	; (800c618 <_SendPacket+0x1c0>)
 800c5c8:	7e1b      	ldrb	r3, [r3, #24]
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	4a14      	ldr	r2, [pc, #80]	; (800c620 <_SendPacket+0x1c8>)
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	005b      	lsls	r3, r3, #1
 800c5d2:	440b      	add	r3, r1
 800c5d4:	00db      	lsls	r3, r3, #3
 800c5d6:	4413      	add	r3, r2
 800c5d8:	336c      	adds	r3, #108	; 0x6c
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	4b0e      	ldr	r3, [pc, #56]	; (800c618 <_SendPacket+0x1c0>)
 800c5de:	7e1b      	ldrb	r3, [r3, #24]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	490f      	ldr	r1, [pc, #60]	; (800c620 <_SendPacket+0x1c8>)
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	005b      	lsls	r3, r3, #1
 800c5e8:	4403      	add	r3, r0
 800c5ea:	00db      	lsls	r3, r3, #3
 800c5ec:	440b      	add	r3, r1
 800c5ee:	3370      	adds	r3, #112	; 0x70
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d00b      	beq.n	800c60e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800c5f6:	4b08      	ldr	r3, [pc, #32]	; (800c618 <_SendPacket+0x1c0>)
 800c5f8:	789b      	ldrb	r3, [r3, #2]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d107      	bne.n	800c60e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800c5fe:	4b06      	ldr	r3, [pc, #24]	; (800c618 <_SendPacket+0x1c0>)
 800c600:	2201      	movs	r2, #1
 800c602:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800c604:	f7ff fe46 	bl	800c294 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800c608:	4b03      	ldr	r3, [pc, #12]	; (800c618 <_SendPacket+0x1c0>)
 800c60a:	2200      	movs	r2, #0
 800c60c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800c60e:	bf00      	nop
 800c610:	3728      	adds	r7, #40	; 0x28
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	2001a1f0 	.word	0x2001a1f0
 800c61c:	e0001004 	.word	0xe0001004
 800c620:	20019d38 	.word	0x20019d38

0800c624 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c62c:	f3ef 8311 	mrs	r3, BASEPRI
 800c630:	f04f 0120 	mov.w	r1, #32
 800c634:	f381 8811 	msr	BASEPRI, r1
 800c638:	60fb      	str	r3, [r7, #12]
 800c63a:	4808      	ldr	r0, [pc, #32]	; (800c65c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800c63c:	f7ff fe1d 	bl	800c27a <_PreparePacket>
 800c640:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	68b9      	ldr	r1, [r7, #8]
 800c646:	68b8      	ldr	r0, [r7, #8]
 800c648:	f7ff ff06 	bl	800c458 <_SendPacket>
  RECORD_END();
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f383 8811 	msr	BASEPRI, r3
}
 800c652:	bf00      	nop
 800c654:	3710      	adds	r7, #16
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	2001a220 	.word	0x2001a220

0800c660 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800c660:	b580      	push	{r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c66a:	f3ef 8311 	mrs	r3, BASEPRI
 800c66e:	f04f 0120 	mov.w	r1, #32
 800c672:	f381 8811 	msr	BASEPRI, r1
 800c676:	617b      	str	r3, [r7, #20]
 800c678:	4816      	ldr	r0, [pc, #88]	; (800c6d4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800c67a:	f7ff fdfe 	bl	800c27a <_PreparePacket>
 800c67e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	61fb      	str	r3, [r7, #28]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	61bb      	str	r3, [r7, #24]
 800c68c:	e00b      	b.n	800c6a6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	b2da      	uxtb	r2, r3
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	1c59      	adds	r1, r3, #1
 800c696:	61f9      	str	r1, [r7, #28]
 800c698:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c69c:	b2d2      	uxtb	r2, r2
 800c69e:	701a      	strb	r2, [r3, #0]
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	09db      	lsrs	r3, r3, #7
 800c6a4:	61bb      	str	r3, [r7, #24]
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	2b7f      	cmp	r3, #127	; 0x7f
 800c6aa:	d8f0      	bhi.n	800c68e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	1c5a      	adds	r2, r3, #1
 800c6b0:	61fa      	str	r2, [r7, #28]
 800c6b2:	69ba      	ldr	r2, [r7, #24]
 800c6b4:	b2d2      	uxtb	r2, r2
 800c6b6:	701a      	strb	r2, [r3, #0]
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	68f9      	ldr	r1, [r7, #12]
 800c6c0:	6938      	ldr	r0, [r7, #16]
 800c6c2:	f7ff fec9 	bl	800c458 <_SendPacket>
  RECORD_END();
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	f383 8811 	msr	BASEPRI, r3
}
 800c6cc:	bf00      	nop
 800c6ce:	3720      	adds	r7, #32
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	2001a220 	.word	0x2001a220

0800c6d8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b08c      	sub	sp, #48	; 0x30
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c6e4:	f3ef 8311 	mrs	r3, BASEPRI
 800c6e8:	f04f 0120 	mov.w	r1, #32
 800c6ec:	f381 8811 	msr	BASEPRI, r1
 800c6f0:	61fb      	str	r3, [r7, #28]
 800c6f2:	4825      	ldr	r0, [pc, #148]	; (800c788 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800c6f4:	f7ff fdc1 	bl	800c27a <_PreparePacket>
 800c6f8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	62bb      	str	r3, [r7, #40]	; 0x28
 800c706:	e00b      	b.n	800c720 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800c708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70a:	b2da      	uxtb	r2, r3
 800c70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70e:	1c59      	adds	r1, r3, #1
 800c710:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c712:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c716:	b2d2      	uxtb	r2, r2
 800c718:	701a      	strb	r2, [r3, #0]
 800c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71c:	09db      	lsrs	r3, r3, #7
 800c71e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c722:	2b7f      	cmp	r3, #127	; 0x7f
 800c724:	d8f0      	bhi.n	800c708 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800c726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c728:	1c5a      	adds	r2, r3, #1
 800c72a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c72e:	b2d2      	uxtb	r2, r2
 800c730:	701a      	strb	r2, [r3, #0]
 800c732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c734:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	627b      	str	r3, [r7, #36]	; 0x24
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	623b      	str	r3, [r7, #32]
 800c73e:	e00b      	b.n	800c758 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800c740:	6a3b      	ldr	r3, [r7, #32]
 800c742:	b2da      	uxtb	r2, r3
 800c744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c746:	1c59      	adds	r1, r3, #1
 800c748:	6279      	str	r1, [r7, #36]	; 0x24
 800c74a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c74e:	b2d2      	uxtb	r2, r2
 800c750:	701a      	strb	r2, [r3, #0]
 800c752:	6a3b      	ldr	r3, [r7, #32]
 800c754:	09db      	lsrs	r3, r3, #7
 800c756:	623b      	str	r3, [r7, #32]
 800c758:	6a3b      	ldr	r3, [r7, #32]
 800c75a:	2b7f      	cmp	r3, #127	; 0x7f
 800c75c:	d8f0      	bhi.n	800c740 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800c75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c760:	1c5a      	adds	r2, r3, #1
 800c762:	627a      	str	r2, [r7, #36]	; 0x24
 800c764:	6a3a      	ldr	r2, [r7, #32]
 800c766:	b2d2      	uxtb	r2, r2
 800c768:	701a      	strb	r2, [r3, #0]
 800c76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c76e:	68fa      	ldr	r2, [r7, #12]
 800c770:	6979      	ldr	r1, [r7, #20]
 800c772:	69b8      	ldr	r0, [r7, #24]
 800c774:	f7ff fe70 	bl	800c458 <_SendPacket>
  RECORD_END();
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	f383 8811 	msr	BASEPRI, r3
}
 800c77e:	bf00      	nop
 800c780:	3730      	adds	r7, #48	; 0x30
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	2001a220 	.word	0x2001a220

0800c78c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b08e      	sub	sp, #56	; 0x38
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
 800c798:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800c79a:	f3ef 8311 	mrs	r3, BASEPRI
 800c79e:	f04f 0120 	mov.w	r1, #32
 800c7a2:	f381 8811 	msr	BASEPRI, r1
 800c7a6:	61fb      	str	r3, [r7, #28]
 800c7a8:	4832      	ldr	r0, [pc, #200]	; (800c874 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800c7aa:	f7ff fd66 	bl	800c27a <_PreparePacket>
 800c7ae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	633b      	str	r3, [r7, #48]	; 0x30
 800c7bc:	e00b      	b.n	800c7d6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7c4:	1c59      	adds	r1, r3, #1
 800c7c6:	6379      	str	r1, [r7, #52]	; 0x34
 800c7c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7cc:	b2d2      	uxtb	r2, r2
 800c7ce:	701a      	strb	r2, [r3, #0]
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	09db      	lsrs	r3, r3, #7
 800c7d4:	633b      	str	r3, [r7, #48]	; 0x30
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d8:	2b7f      	cmp	r3, #127	; 0x7f
 800c7da:	d8f0      	bhi.n	800c7be <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800c7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7de:	1c5a      	adds	r2, r3, #1
 800c7e0:	637a      	str	r2, [r7, #52]	; 0x34
 800c7e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7e4:	b2d2      	uxtb	r2, r2
 800c7e6:	701a      	strb	r2, [r3, #0]
 800c7e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7f4:	e00b      	b.n	800c80e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800c7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fc:	1c59      	adds	r1, r3, #1
 800c7fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c800:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c804:	b2d2      	uxtb	r2, r2
 800c806:	701a      	strb	r2, [r3, #0]
 800c808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80a:	09db      	lsrs	r3, r3, #7
 800c80c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c810:	2b7f      	cmp	r3, #127	; 0x7f
 800c812:	d8f0      	bhi.n	800c7f6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	1c5a      	adds	r2, r3, #1
 800c818:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c81a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c81c:	b2d2      	uxtb	r2, r2
 800c81e:	701a      	strb	r2, [r3, #0]
 800c820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c822:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	627b      	str	r3, [r7, #36]	; 0x24
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	623b      	str	r3, [r7, #32]
 800c82c:	e00b      	b.n	800c846 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800c82e:	6a3b      	ldr	r3, [r7, #32]
 800c830:	b2da      	uxtb	r2, r3
 800c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c834:	1c59      	adds	r1, r3, #1
 800c836:	6279      	str	r1, [r7, #36]	; 0x24
 800c838:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c83c:	b2d2      	uxtb	r2, r2
 800c83e:	701a      	strb	r2, [r3, #0]
 800c840:	6a3b      	ldr	r3, [r7, #32]
 800c842:	09db      	lsrs	r3, r3, #7
 800c844:	623b      	str	r3, [r7, #32]
 800c846:	6a3b      	ldr	r3, [r7, #32]
 800c848:	2b7f      	cmp	r3, #127	; 0x7f
 800c84a:	d8f0      	bhi.n	800c82e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800c84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	627a      	str	r2, [r7, #36]	; 0x24
 800c852:	6a3a      	ldr	r2, [r7, #32]
 800c854:	b2d2      	uxtb	r2, r2
 800c856:	701a      	strb	r2, [r3, #0]
 800c858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	6979      	ldr	r1, [r7, #20]
 800c860:	69b8      	ldr	r0, [r7, #24]
 800c862:	f7ff fdf9 	bl	800c458 <_SendPacket>
  RECORD_END();
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	f383 8811 	msr	BASEPRI, r3
}
 800c86c:	bf00      	nop
 800c86e:	3738      	adds	r7, #56	; 0x38
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	2001a220 	.word	0x2001a220

0800c878 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800c878:	b580      	push	{r7, lr}
 800c87a:	b090      	sub	sp, #64	; 0x40
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	60f8      	str	r0, [r7, #12]
 800c880:	60b9      	str	r1, [r7, #8]
 800c882:	607a      	str	r2, [r7, #4]
 800c884:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c886:	f3ef 8311 	mrs	r3, BASEPRI
 800c88a:	f04f 0120 	mov.w	r1, #32
 800c88e:	f381 8811 	msr	BASEPRI, r1
 800c892:	61fb      	str	r3, [r7, #28]
 800c894:	4840      	ldr	r0, [pc, #256]	; (800c998 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800c896:	f7ff fcf0 	bl	800c27a <_PreparePacket>
 800c89a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8a8:	e00b      	b.n	800c8c2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800c8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ac:	b2da      	uxtb	r2, r3
 800c8ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8b0:	1c59      	adds	r1, r3, #1
 800c8b2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c8b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c8b8:	b2d2      	uxtb	r2, r2
 800c8ba:	701a      	strb	r2, [r3, #0]
 800c8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8be:	09db      	lsrs	r3, r3, #7
 800c8c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c4:	2b7f      	cmp	r3, #127	; 0x7f
 800c8c6:	d8f0      	bhi.n	800c8aa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800c8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ca:	1c5a      	adds	r2, r3, #1
 800c8cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c8ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8d0:	b2d2      	uxtb	r2, r2
 800c8d2:	701a      	strb	r2, [r3, #0]
 800c8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	637b      	str	r3, [r7, #52]	; 0x34
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	633b      	str	r3, [r7, #48]	; 0x30
 800c8e0:	e00b      	b.n	800c8fa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800c8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e4:	b2da      	uxtb	r2, r3
 800c8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8e8:	1c59      	adds	r1, r3, #1
 800c8ea:	6379      	str	r1, [r7, #52]	; 0x34
 800c8ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c8f0:	b2d2      	uxtb	r2, r2
 800c8f2:	701a      	strb	r2, [r3, #0]
 800c8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f6:	09db      	lsrs	r3, r3, #7
 800c8f8:	633b      	str	r3, [r7, #48]	; 0x30
 800c8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fc:	2b7f      	cmp	r3, #127	; 0x7f
 800c8fe:	d8f0      	bhi.n	800c8e2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800c900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c902:	1c5a      	adds	r2, r3, #1
 800c904:	637a      	str	r2, [r7, #52]	; 0x34
 800c906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c908:	b2d2      	uxtb	r2, r2
 800c90a:	701a      	strb	r2, [r3, #0]
 800c90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c90e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	62bb      	str	r3, [r7, #40]	; 0x28
 800c918:	e00b      	b.n	800c932 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800c91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91c:	b2da      	uxtb	r2, r3
 800c91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c920:	1c59      	adds	r1, r3, #1
 800c922:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c924:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c928:	b2d2      	uxtb	r2, r2
 800c92a:	701a      	strb	r2, [r3, #0]
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	09db      	lsrs	r3, r3, #7
 800c930:	62bb      	str	r3, [r7, #40]	; 0x28
 800c932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c934:	2b7f      	cmp	r3, #127	; 0x7f
 800c936:	d8f0      	bhi.n	800c91a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800c938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c93e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c940:	b2d2      	uxtb	r2, r2
 800c942:	701a      	strb	r2, [r3, #0]
 800c944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c946:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	627b      	str	r3, [r7, #36]	; 0x24
 800c94c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c94e:	623b      	str	r3, [r7, #32]
 800c950:	e00b      	b.n	800c96a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800c952:	6a3b      	ldr	r3, [r7, #32]
 800c954:	b2da      	uxtb	r2, r3
 800c956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c958:	1c59      	adds	r1, r3, #1
 800c95a:	6279      	str	r1, [r7, #36]	; 0x24
 800c95c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c960:	b2d2      	uxtb	r2, r2
 800c962:	701a      	strb	r2, [r3, #0]
 800c964:	6a3b      	ldr	r3, [r7, #32]
 800c966:	09db      	lsrs	r3, r3, #7
 800c968:	623b      	str	r3, [r7, #32]
 800c96a:	6a3b      	ldr	r3, [r7, #32]
 800c96c:	2b7f      	cmp	r3, #127	; 0x7f
 800c96e:	d8f0      	bhi.n	800c952 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	1c5a      	adds	r2, r3, #1
 800c974:	627a      	str	r2, [r7, #36]	; 0x24
 800c976:	6a3a      	ldr	r2, [r7, #32]
 800c978:	b2d2      	uxtb	r2, r2
 800c97a:	701a      	strb	r2, [r3, #0]
 800c97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	6979      	ldr	r1, [r7, #20]
 800c984:	69b8      	ldr	r0, [r7, #24]
 800c986:	f7ff fd67 	bl	800c458 <_SendPacket>
  RECORD_END();
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	f383 8811 	msr	BASEPRI, r3
}
 800c990:	bf00      	nop
 800c992:	3740      	adds	r7, #64	; 0x40
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	2001a220 	.word	0x2001a220

0800c99c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b092      	sub	sp, #72	; 0x48
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	607a      	str	r2, [r7, #4]
 800c9a8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800c9aa:	f3ef 8311 	mrs	r3, BASEPRI
 800c9ae:	f04f 0120 	mov.w	r1, #32
 800c9b2:	f381 8811 	msr	BASEPRI, r1
 800c9b6:	61fb      	str	r3, [r7, #28]
 800c9b8:	484e      	ldr	r0, [pc, #312]	; (800caf4 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800c9ba:	f7ff fc5e 	bl	800c27a <_PreparePacket>
 800c9be:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	647b      	str	r3, [r7, #68]	; 0x44
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	643b      	str	r3, [r7, #64]	; 0x40
 800c9cc:	e00b      	b.n	800c9e6 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800c9ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9d0:	b2da      	uxtb	r2, r3
 800c9d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9d4:	1c59      	adds	r1, r3, #1
 800c9d6:	6479      	str	r1, [r7, #68]	; 0x44
 800c9d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c9dc:	b2d2      	uxtb	r2, r2
 800c9de:	701a      	strb	r2, [r3, #0]
 800c9e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9e2:	09db      	lsrs	r3, r3, #7
 800c9e4:	643b      	str	r3, [r7, #64]	; 0x40
 800c9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9e8:	2b7f      	cmp	r3, #127	; 0x7f
 800c9ea:	d8f0      	bhi.n	800c9ce <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800c9ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9ee:	1c5a      	adds	r2, r3, #1
 800c9f0:	647a      	str	r2, [r7, #68]	; 0x44
 800c9f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9f4:	b2d2      	uxtb	r2, r2
 800c9f6:	701a      	strb	r2, [r3, #0]
 800c9f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca04:	e00b      	b.n	800ca1e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800ca06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca0c:	1c59      	adds	r1, r3, #1
 800ca0e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ca10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca14:	b2d2      	uxtb	r2, r2
 800ca16:	701a      	strb	r2, [r3, #0]
 800ca18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1a:	09db      	lsrs	r3, r3, #7
 800ca1c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca20:	2b7f      	cmp	r3, #127	; 0x7f
 800ca22:	d8f0      	bhi.n	800ca06 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 800ca24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca26:	1c5a      	adds	r2, r3, #1
 800ca28:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ca2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca2c:	b2d2      	uxtb	r2, r2
 800ca2e:	701a      	strb	r2, [r3, #0]
 800ca30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	637b      	str	r3, [r7, #52]	; 0x34
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	633b      	str	r3, [r7, #48]	; 0x30
 800ca3c:	e00b      	b.n	800ca56 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca40:	b2da      	uxtb	r2, r3
 800ca42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca44:	1c59      	adds	r1, r3, #1
 800ca46:	6379      	str	r1, [r7, #52]	; 0x34
 800ca48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca4c:	b2d2      	uxtb	r2, r2
 800ca4e:	701a      	strb	r2, [r3, #0]
 800ca50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca52:	09db      	lsrs	r3, r3, #7
 800ca54:	633b      	str	r3, [r7, #48]	; 0x30
 800ca56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca58:	2b7f      	cmp	r3, #127	; 0x7f
 800ca5a:	d8f0      	bhi.n	800ca3e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800ca5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	637a      	str	r2, [r7, #52]	; 0x34
 800ca62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca64:	b2d2      	uxtb	r2, r2
 800ca66:	701a      	strb	r2, [r3, #0]
 800ca68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca72:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca74:	e00b      	b.n	800ca8e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800ca76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca78:	b2da      	uxtb	r2, r3
 800ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7c:	1c59      	adds	r1, r3, #1
 800ca7e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ca80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca84:	b2d2      	uxtb	r2, r2
 800ca86:	701a      	strb	r2, [r3, #0]
 800ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8a:	09db      	lsrs	r3, r3, #7
 800ca8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca90:	2b7f      	cmp	r3, #127	; 0x7f
 800ca92:	d8f0      	bhi.n	800ca76 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 800ca94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca96:	1c5a      	adds	r2, r3, #1
 800ca98:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca9c:	b2d2      	uxtb	r2, r2
 800ca9e:	701a      	strb	r2, [r3, #0]
 800caa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	627b      	str	r3, [r7, #36]	; 0x24
 800caa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caaa:	623b      	str	r3, [r7, #32]
 800caac:	e00b      	b.n	800cac6 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800caae:	6a3b      	ldr	r3, [r7, #32]
 800cab0:	b2da      	uxtb	r2, r3
 800cab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab4:	1c59      	adds	r1, r3, #1
 800cab6:	6279      	str	r1, [r7, #36]	; 0x24
 800cab8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cabc:	b2d2      	uxtb	r2, r2
 800cabe:	701a      	strb	r2, [r3, #0]
 800cac0:	6a3b      	ldr	r3, [r7, #32]
 800cac2:	09db      	lsrs	r3, r3, #7
 800cac4:	623b      	str	r3, [r7, #32]
 800cac6:	6a3b      	ldr	r3, [r7, #32]
 800cac8:	2b7f      	cmp	r3, #127	; 0x7f
 800caca:	d8f0      	bhi.n	800caae <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	1c5a      	adds	r2, r3, #1
 800cad0:	627a      	str	r2, [r7, #36]	; 0x24
 800cad2:	6a3a      	ldr	r2, [r7, #32]
 800cad4:	b2d2      	uxtb	r2, r2
 800cad6:	701a      	strb	r2, [r3, #0]
 800cad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cada:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	6979      	ldr	r1, [r7, #20]
 800cae0:	69b8      	ldr	r0, [r7, #24]
 800cae2:	f7ff fcb9 	bl	800c458 <_SendPacket>
  RECORD_END();
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	f383 8811 	msr	BASEPRI, r3
}
 800caec:	bf00      	nop
 800caee:	3748      	adds	r7, #72	; 0x48
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	2001a220 	.word	0x2001a220

0800caf8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b08c      	sub	sp, #48	; 0x30
 800cafc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800cafe:	4b58      	ldr	r3, [pc, #352]	; (800cc60 <SEGGER_SYSVIEW_Start+0x168>)
 800cb00:	2201      	movs	r2, #1
 800cb02:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800cb04:	f3ef 8311 	mrs	r3, BASEPRI
 800cb08:	f04f 0120 	mov.w	r1, #32
 800cb0c:	f381 8811 	msr	BASEPRI, r1
 800cb10:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800cb12:	4b53      	ldr	r3, [pc, #332]	; (800cc60 <SEGGER_SYSVIEW_Start+0x168>)
 800cb14:	785b      	ldrb	r3, [r3, #1]
 800cb16:	220a      	movs	r2, #10
 800cb18:	4952      	ldr	r1, [pc, #328]	; (800cc64 <SEGGER_SYSVIEW_Start+0x16c>)
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7f3 fb78 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800cb26:	200a      	movs	r0, #10
 800cb28:	f7ff fd7c 	bl	800c624 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cb2c:	f3ef 8311 	mrs	r3, BASEPRI
 800cb30:	f04f 0120 	mov.w	r1, #32
 800cb34:	f381 8811 	msr	BASEPRI, r1
 800cb38:	60bb      	str	r3, [r7, #8]
 800cb3a:	484b      	ldr	r0, [pc, #300]	; (800cc68 <SEGGER_SYSVIEW_Start+0x170>)
 800cb3c:	f7ff fb9d 	bl	800c27a <_PreparePacket>
 800cb40:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb4a:	4b45      	ldr	r3, [pc, #276]	; (800cc60 <SEGGER_SYSVIEW_Start+0x168>)
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb50:	e00b      	b.n	800cb6a <SEGGER_SYSVIEW_Start+0x72>
 800cb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb58:	1c59      	adds	r1, r3, #1
 800cb5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cb5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb60:	b2d2      	uxtb	r2, r2
 800cb62:	701a      	strb	r2, [r3, #0]
 800cb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb66:	09db      	lsrs	r3, r3, #7
 800cb68:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6c:	2b7f      	cmp	r3, #127	; 0x7f
 800cb6e:	d8f0      	bhi.n	800cb52 <SEGGER_SYSVIEW_Start+0x5a>
 800cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb72:	1c5a      	adds	r2, r3, #1
 800cb74:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb78:	b2d2      	uxtb	r2, r2
 800cb7a:	701a      	strb	r2, [r3, #0]
 800cb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	627b      	str	r3, [r7, #36]	; 0x24
 800cb84:	4b36      	ldr	r3, [pc, #216]	; (800cc60 <SEGGER_SYSVIEW_Start+0x168>)
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	623b      	str	r3, [r7, #32]
 800cb8a:	e00b      	b.n	800cba4 <SEGGER_SYSVIEW_Start+0xac>
 800cb8c:	6a3b      	ldr	r3, [r7, #32]
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb92:	1c59      	adds	r1, r3, #1
 800cb94:	6279      	str	r1, [r7, #36]	; 0x24
 800cb96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb9a:	b2d2      	uxtb	r2, r2
 800cb9c:	701a      	strb	r2, [r3, #0]
 800cb9e:	6a3b      	ldr	r3, [r7, #32]
 800cba0:	09db      	lsrs	r3, r3, #7
 800cba2:	623b      	str	r3, [r7, #32]
 800cba4:	6a3b      	ldr	r3, [r7, #32]
 800cba6:	2b7f      	cmp	r3, #127	; 0x7f
 800cba8:	d8f0      	bhi.n	800cb8c <SEGGER_SYSVIEW_Start+0x94>
 800cbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbac:	1c5a      	adds	r2, r3, #1
 800cbae:	627a      	str	r2, [r7, #36]	; 0x24
 800cbb0:	6a3a      	ldr	r2, [r7, #32]
 800cbb2:	b2d2      	uxtb	r2, r2
 800cbb4:	701a      	strb	r2, [r3, #0]
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	61fb      	str	r3, [r7, #28]
 800cbbe:	4b28      	ldr	r3, [pc, #160]	; (800cc60 <SEGGER_SYSVIEW_Start+0x168>)
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	61bb      	str	r3, [r7, #24]
 800cbc4:	e00b      	b.n	800cbde <SEGGER_SYSVIEW_Start+0xe6>
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	1c59      	adds	r1, r3, #1
 800cbce:	61f9      	str	r1, [r7, #28]
 800cbd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cbd4:	b2d2      	uxtb	r2, r2
 800cbd6:	701a      	strb	r2, [r3, #0]
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	09db      	lsrs	r3, r3, #7
 800cbdc:	61bb      	str	r3, [r7, #24]
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	2b7f      	cmp	r3, #127	; 0x7f
 800cbe2:	d8f0      	bhi.n	800cbc6 <SEGGER_SYSVIEW_Start+0xce>
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	1c5a      	adds	r2, r3, #1
 800cbe8:	61fa      	str	r2, [r7, #28]
 800cbea:	69ba      	ldr	r2, [r7, #24]
 800cbec:	b2d2      	uxtb	r2, r2
 800cbee:	701a      	strb	r2, [r3, #0]
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	617b      	str	r3, [r7, #20]
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	613b      	str	r3, [r7, #16]
 800cbfc:	e00b      	b.n	800cc16 <SEGGER_SYSVIEW_Start+0x11e>
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	b2da      	uxtb	r2, r3
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	1c59      	adds	r1, r3, #1
 800cc06:	6179      	str	r1, [r7, #20]
 800cc08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc0c:	b2d2      	uxtb	r2, r2
 800cc0e:	701a      	strb	r2, [r3, #0]
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	09db      	lsrs	r3, r3, #7
 800cc14:	613b      	str	r3, [r7, #16]
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	2b7f      	cmp	r3, #127	; 0x7f
 800cc1a:	d8f0      	bhi.n	800cbfe <SEGGER_SYSVIEW_Start+0x106>
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	1c5a      	adds	r2, r3, #1
 800cc20:	617a      	str	r2, [r7, #20]
 800cc22:	693a      	ldr	r2, [r7, #16]
 800cc24:	b2d2      	uxtb	r2, r2
 800cc26:	701a      	strb	r2, [r3, #0]
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800cc2c:	2218      	movs	r2, #24
 800cc2e:	6839      	ldr	r1, [r7, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f7ff fc11 	bl	800c458 <_SendPacket>
      RECORD_END();
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800cc3c:	4b08      	ldr	r3, [pc, #32]	; (800cc60 <SEGGER_SYSVIEW_Start+0x168>)
 800cc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d002      	beq.n	800cc4a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800cc44:	4b06      	ldr	r3, [pc, #24]	; (800cc60 <SEGGER_SYSVIEW_Start+0x168>)
 800cc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc48:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800cc4a:	f000 f9c7 	bl	800cfdc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800cc4e:	f000 f9b1 	bl	800cfb4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800cc52:	f000 fbff 	bl	800d454 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800cc56:	bf00      	nop
 800cc58:	3730      	adds	r7, #48	; 0x30
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	2001a1f0 	.word	0x2001a1f0
 800cc64:	08011534 	.word	0x08011534
 800cc68:	2001a220 	.word	0x2001a220

0800cc6c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cc72:	f3ef 8311 	mrs	r3, BASEPRI
 800cc76:	f04f 0120 	mov.w	r1, #32
 800cc7a:	f381 8811 	msr	BASEPRI, r1
 800cc7e:	607b      	str	r3, [r7, #4]
 800cc80:	480b      	ldr	r0, [pc, #44]	; (800ccb0 <SEGGER_SYSVIEW_Stop+0x44>)
 800cc82:	f7ff fafa 	bl	800c27a <_PreparePacket>
 800cc86:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800cc88:	4b0a      	ldr	r3, [pc, #40]	; (800ccb4 <SEGGER_SYSVIEW_Stop+0x48>)
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d007      	beq.n	800cca0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800cc90:	220b      	movs	r2, #11
 800cc92:	6839      	ldr	r1, [r7, #0]
 800cc94:	6838      	ldr	r0, [r7, #0]
 800cc96:	f7ff fbdf 	bl	800c458 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800cc9a:	4b06      	ldr	r3, [pc, #24]	; (800ccb4 <SEGGER_SYSVIEW_Stop+0x48>)
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f383 8811 	msr	BASEPRI, r3
}
 800cca6:	bf00      	nop
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	2001a220 	.word	0x2001a220
 800ccb4:	2001a1f0 	.word	0x2001a1f0

0800ccb8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b08c      	sub	sp, #48	; 0x30
 800ccbc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ccbe:	f3ef 8311 	mrs	r3, BASEPRI
 800ccc2:	f04f 0120 	mov.w	r1, #32
 800ccc6:	f381 8811 	msr	BASEPRI, r1
 800ccca:	60fb      	str	r3, [r7, #12]
 800cccc:	4845      	ldr	r0, [pc, #276]	; (800cde4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800ccce:	f7ff fad4 	bl	800c27a <_PreparePacket>
 800ccd2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccdc:	4b42      	ldr	r3, [pc, #264]	; (800cde8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cce2:	e00b      	b.n	800ccfc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800cce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce6:	b2da      	uxtb	r2, r3
 800cce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccea:	1c59      	adds	r1, r3, #1
 800ccec:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ccee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ccf2:	b2d2      	uxtb	r2, r2
 800ccf4:	701a      	strb	r2, [r3, #0]
 800ccf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf8:	09db      	lsrs	r3, r3, #7
 800ccfa:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfe:	2b7f      	cmp	r3, #127	; 0x7f
 800cd00:	d8f0      	bhi.n	800cce4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800cd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd04:	1c5a      	adds	r2, r3, #1
 800cd06:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cd08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd0a:	b2d2      	uxtb	r2, r2
 800cd0c:	701a      	strb	r2, [r3, #0]
 800cd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd10:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	627b      	str	r3, [r7, #36]	; 0x24
 800cd16:	4b34      	ldr	r3, [pc, #208]	; (800cde8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	623b      	str	r3, [r7, #32]
 800cd1c:	e00b      	b.n	800cd36 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800cd1e:	6a3b      	ldr	r3, [r7, #32]
 800cd20:	b2da      	uxtb	r2, r3
 800cd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd24:	1c59      	adds	r1, r3, #1
 800cd26:	6279      	str	r1, [r7, #36]	; 0x24
 800cd28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd2c:	b2d2      	uxtb	r2, r2
 800cd2e:	701a      	strb	r2, [r3, #0]
 800cd30:	6a3b      	ldr	r3, [r7, #32]
 800cd32:	09db      	lsrs	r3, r3, #7
 800cd34:	623b      	str	r3, [r7, #32]
 800cd36:	6a3b      	ldr	r3, [r7, #32]
 800cd38:	2b7f      	cmp	r3, #127	; 0x7f
 800cd3a:	d8f0      	bhi.n	800cd1e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3e:	1c5a      	adds	r2, r3, #1
 800cd40:	627a      	str	r2, [r7, #36]	; 0x24
 800cd42:	6a3a      	ldr	r2, [r7, #32]
 800cd44:	b2d2      	uxtb	r2, r2
 800cd46:	701a      	strb	r2, [r3, #0]
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	61fb      	str	r3, [r7, #28]
 800cd50:	4b25      	ldr	r3, [pc, #148]	; (800cde8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cd52:	691b      	ldr	r3, [r3, #16]
 800cd54:	61bb      	str	r3, [r7, #24]
 800cd56:	e00b      	b.n	800cd70 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	b2da      	uxtb	r2, r3
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	1c59      	adds	r1, r3, #1
 800cd60:	61f9      	str	r1, [r7, #28]
 800cd62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd66:	b2d2      	uxtb	r2, r2
 800cd68:	701a      	strb	r2, [r3, #0]
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	09db      	lsrs	r3, r3, #7
 800cd6e:	61bb      	str	r3, [r7, #24]
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	2b7f      	cmp	r3, #127	; 0x7f
 800cd74:	d8f0      	bhi.n	800cd58 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	1c5a      	adds	r2, r3, #1
 800cd7a:	61fa      	str	r2, [r7, #28]
 800cd7c:	69ba      	ldr	r2, [r7, #24]
 800cd7e:	b2d2      	uxtb	r2, r2
 800cd80:	701a      	strb	r2, [r3, #0]
 800cd82:	69fb      	ldr	r3, [r7, #28]
 800cd84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	617b      	str	r3, [r7, #20]
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	613b      	str	r3, [r7, #16]
 800cd8e:	e00b      	b.n	800cda8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	b2da      	uxtb	r2, r3
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	1c59      	adds	r1, r3, #1
 800cd98:	6179      	str	r1, [r7, #20]
 800cd9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd9e:	b2d2      	uxtb	r2, r2
 800cda0:	701a      	strb	r2, [r3, #0]
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	09db      	lsrs	r3, r3, #7
 800cda6:	613b      	str	r3, [r7, #16]
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	2b7f      	cmp	r3, #127	; 0x7f
 800cdac:	d8f0      	bhi.n	800cd90 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	1c5a      	adds	r2, r3, #1
 800cdb2:	617a      	str	r2, [r7, #20]
 800cdb4:	693a      	ldr	r2, [r7, #16]
 800cdb6:	b2d2      	uxtb	r2, r2
 800cdb8:	701a      	strb	r2, [r3, #0]
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800cdbe:	2218      	movs	r2, #24
 800cdc0:	6879      	ldr	r1, [r7, #4]
 800cdc2:	68b8      	ldr	r0, [r7, #8]
 800cdc4:	f7ff fb48 	bl	800c458 <_SendPacket>
  RECORD_END();
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800cdce:	4b06      	ldr	r3, [pc, #24]	; (800cde8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cdd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d002      	beq.n	800cddc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800cdd6:	4b04      	ldr	r3, [pc, #16]	; (800cde8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdda:	4798      	blx	r3
  }
}
 800cddc:	bf00      	nop
 800cdde:	3730      	adds	r7, #48	; 0x30
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	2001a220 	.word	0x2001a220
 800cde8:	2001a1f0 	.word	0x2001a1f0

0800cdec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b092      	sub	sp, #72	; 0x48
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800cdf4:	f3ef 8311 	mrs	r3, BASEPRI
 800cdf8:	f04f 0120 	mov.w	r1, #32
 800cdfc:	f381 8811 	msr	BASEPRI, r1
 800ce00:	617b      	str	r3, [r7, #20]
 800ce02:	486a      	ldr	r0, [pc, #424]	; (800cfac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800ce04:	f7ff fa39 	bl	800c27a <_PreparePacket>
 800ce08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	647b      	str	r3, [r7, #68]	; 0x44
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	4b66      	ldr	r3, [pc, #408]	; (800cfb0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800ce18:	691b      	ldr	r3, [r3, #16]
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	643b      	str	r3, [r7, #64]	; 0x40
 800ce1e:	e00b      	b.n	800ce38 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800ce20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce22:	b2da      	uxtb	r2, r3
 800ce24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce26:	1c59      	adds	r1, r3, #1
 800ce28:	6479      	str	r1, [r7, #68]	; 0x44
 800ce2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce2e:	b2d2      	uxtb	r2, r2
 800ce30:	701a      	strb	r2, [r3, #0]
 800ce32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce34:	09db      	lsrs	r3, r3, #7
 800ce36:	643b      	str	r3, [r7, #64]	; 0x40
 800ce38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce3a:	2b7f      	cmp	r3, #127	; 0x7f
 800ce3c:	d8f0      	bhi.n	800ce20 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800ce3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce40:	1c5a      	adds	r2, r3, #1
 800ce42:	647a      	str	r2, [r7, #68]	; 0x44
 800ce44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce46:	b2d2      	uxtb	r2, r2
 800ce48:	701a      	strb	r2, [r3, #0]
 800ce4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce58:	e00b      	b.n	800ce72 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800ce5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5c:	b2da      	uxtb	r2, r3
 800ce5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce60:	1c59      	adds	r1, r3, #1
 800ce62:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ce64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce68:	b2d2      	uxtb	r2, r2
 800ce6a:	701a      	strb	r2, [r3, #0]
 800ce6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6e:	09db      	lsrs	r3, r3, #7
 800ce70:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce74:	2b7f      	cmp	r3, #127	; 0x7f
 800ce76:	d8f0      	bhi.n	800ce5a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800ce78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce7a:	1c5a      	adds	r2, r3, #1
 800ce7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ce7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce80:	b2d2      	uxtb	r2, r2
 800ce82:	701a      	strb	r2, [r3, #0]
 800ce84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce86:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	2220      	movs	r2, #32
 800ce8e:	4619      	mov	r1, r3
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	f7ff f9a5 	bl	800c1e0 <_EncodeStr>
 800ce96:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800ce98:	2209      	movs	r2, #9
 800ce9a:	68f9      	ldr	r1, [r7, #12]
 800ce9c:	6938      	ldr	r0, [r7, #16]
 800ce9e:	f7ff fadb 	bl	800c458 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	637b      	str	r3, [r7, #52]	; 0x34
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	4b40      	ldr	r3, [pc, #256]	; (800cfb0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	1ad3      	subs	r3, r2, r3
 800ceb4:	633b      	str	r3, [r7, #48]	; 0x30
 800ceb6:	e00b      	b.n	800ced0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceba:	b2da      	uxtb	r2, r3
 800cebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cebe:	1c59      	adds	r1, r3, #1
 800cec0:	6379      	str	r1, [r7, #52]	; 0x34
 800cec2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cec6:	b2d2      	uxtb	r2, r2
 800cec8:	701a      	strb	r2, [r3, #0]
 800ceca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cecc:	09db      	lsrs	r3, r3, #7
 800cece:	633b      	str	r3, [r7, #48]	; 0x30
 800ced0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced2:	2b7f      	cmp	r3, #127	; 0x7f
 800ced4:	d8f0      	bhi.n	800ceb8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800ced6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced8:	1c5a      	adds	r2, r3, #1
 800ceda:	637a      	str	r2, [r7, #52]	; 0x34
 800cedc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cede:	b2d2      	uxtb	r2, r2
 800cee0:	701a      	strb	r2, [r3, #0]
 800cee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	62bb      	str	r3, [r7, #40]	; 0x28
 800cef0:	e00b      	b.n	800cf0a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800cef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef4:	b2da      	uxtb	r2, r3
 800cef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef8:	1c59      	adds	r1, r3, #1
 800cefa:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cefc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cf00:	b2d2      	uxtb	r2, r2
 800cf02:	701a      	strb	r2, [r3, #0]
 800cf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf06:	09db      	lsrs	r3, r3, #7
 800cf08:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0c:	2b7f      	cmp	r3, #127	; 0x7f
 800cf0e:	d8f0      	bhi.n	800cef2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800cf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf12:	1c5a      	adds	r2, r3, #1
 800cf14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf18:	b2d2      	uxtb	r2, r2
 800cf1a:	701a      	strb	r2, [r3, #0]
 800cf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	627b      	str	r3, [r7, #36]	; 0x24
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	691b      	ldr	r3, [r3, #16]
 800cf28:	623b      	str	r3, [r7, #32]
 800cf2a:	e00b      	b.n	800cf44 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800cf2c:	6a3b      	ldr	r3, [r7, #32]
 800cf2e:	b2da      	uxtb	r2, r3
 800cf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf32:	1c59      	adds	r1, r3, #1
 800cf34:	6279      	str	r1, [r7, #36]	; 0x24
 800cf36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cf3a:	b2d2      	uxtb	r2, r2
 800cf3c:	701a      	strb	r2, [r3, #0]
 800cf3e:	6a3b      	ldr	r3, [r7, #32]
 800cf40:	09db      	lsrs	r3, r3, #7
 800cf42:	623b      	str	r3, [r7, #32]
 800cf44:	6a3b      	ldr	r3, [r7, #32]
 800cf46:	2b7f      	cmp	r3, #127	; 0x7f
 800cf48:	d8f0      	bhi.n	800cf2c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800cf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4c:	1c5a      	adds	r2, r3, #1
 800cf4e:	627a      	str	r2, [r7, #36]	; 0x24
 800cf50:	6a3a      	ldr	r2, [r7, #32]
 800cf52:	b2d2      	uxtb	r2, r2
 800cf54:	701a      	strb	r2, [r3, #0]
 800cf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	61fb      	str	r3, [r7, #28]
 800cf5e:	2300      	movs	r3, #0
 800cf60:	61bb      	str	r3, [r7, #24]
 800cf62:	e00b      	b.n	800cf7c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800cf64:	69bb      	ldr	r3, [r7, #24]
 800cf66:	b2da      	uxtb	r2, r3
 800cf68:	69fb      	ldr	r3, [r7, #28]
 800cf6a:	1c59      	adds	r1, r3, #1
 800cf6c:	61f9      	str	r1, [r7, #28]
 800cf6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cf72:	b2d2      	uxtb	r2, r2
 800cf74:	701a      	strb	r2, [r3, #0]
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	09db      	lsrs	r3, r3, #7
 800cf7a:	61bb      	str	r3, [r7, #24]
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	2b7f      	cmp	r3, #127	; 0x7f
 800cf80:	d8f0      	bhi.n	800cf64 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800cf82:	69fb      	ldr	r3, [r7, #28]
 800cf84:	1c5a      	adds	r2, r3, #1
 800cf86:	61fa      	str	r2, [r7, #28]
 800cf88:	69ba      	ldr	r2, [r7, #24]
 800cf8a:	b2d2      	uxtb	r2, r2
 800cf8c:	701a      	strb	r2, [r3, #0]
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800cf92:	2215      	movs	r2, #21
 800cf94:	68f9      	ldr	r1, [r7, #12]
 800cf96:	6938      	ldr	r0, [r7, #16]
 800cf98:	f7ff fa5e 	bl	800c458 <_SendPacket>
  RECORD_END();
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	f383 8811 	msr	BASEPRI, r3
}
 800cfa2:	bf00      	nop
 800cfa4:	3748      	adds	r7, #72	; 0x48
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	2001a220 	.word	0x2001a220
 800cfb0:	2001a1f0 	.word	0x2001a1f0

0800cfb4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800cfb8:	4b07      	ldr	r3, [pc, #28]	; (800cfd8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cfba:	6a1b      	ldr	r3, [r3, #32]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d008      	beq.n	800cfd2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800cfc0:	4b05      	ldr	r3, [pc, #20]	; (800cfd8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cfc2:	6a1b      	ldr	r3, [r3, #32]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d003      	beq.n	800cfd2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800cfca:	4b03      	ldr	r3, [pc, #12]	; (800cfd8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cfcc:	6a1b      	ldr	r3, [r3, #32]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	4798      	blx	r3
  }
}
 800cfd2:	bf00      	nop
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	2001a1f0 	.word	0x2001a1f0

0800cfdc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800cfdc:	b590      	push	{r4, r7, lr}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800cfe2:	4b15      	ldr	r3, [pc, #84]	; (800d038 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cfe4:	6a1b      	ldr	r3, [r3, #32]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d01a      	beq.n	800d020 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800cfea:	4b13      	ldr	r3, [pc, #76]	; (800d038 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cfec:	6a1b      	ldr	r3, [r3, #32]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d015      	beq.n	800d020 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800cff4:	4b10      	ldr	r3, [pc, #64]	; (800d038 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cff6:	6a1b      	ldr	r3, [r3, #32]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4798      	blx	r3
 800cffc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d000:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800d002:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d006:	f04f 0200 	mov.w	r2, #0
 800d00a:	f04f 0300 	mov.w	r3, #0
 800d00e:	000a      	movs	r2, r1
 800d010:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d012:	4613      	mov	r3, r2
 800d014:	461a      	mov	r2, r3
 800d016:	4621      	mov	r1, r4
 800d018:	200d      	movs	r0, #13
 800d01a:	f7ff fb5d 	bl	800c6d8 <SEGGER_SYSVIEW_RecordU32x2>
 800d01e:	e006      	b.n	800d02e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800d020:	4b06      	ldr	r3, [pc, #24]	; (800d03c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4619      	mov	r1, r3
 800d026:	200c      	movs	r0, #12
 800d028:	f7ff fb1a 	bl	800c660 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800d02c:	bf00      	nop
 800d02e:	bf00      	nop
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	bd90      	pop	{r4, r7, pc}
 800d036:	bf00      	nop
 800d038:	2001a1f0 	.word	0x2001a1f0
 800d03c:	e0001004 	.word	0xe0001004

0800d040 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d046:	f3ef 8311 	mrs	r3, BASEPRI
 800d04a:	f04f 0120 	mov.w	r1, #32
 800d04e:	f381 8811 	msr	BASEPRI, r1
 800d052:	60fb      	str	r3, [r7, #12]
 800d054:	4819      	ldr	r0, [pc, #100]	; (800d0bc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800d056:	f7ff f910 	bl	800c27a <_PreparePacket>
 800d05a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800d060:	4b17      	ldr	r3, [pc, #92]	; (800d0c0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d068:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	617b      	str	r3, [r7, #20]
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	613b      	str	r3, [r7, #16]
 800d072:	e00b      	b.n	800d08c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	b2da      	uxtb	r2, r3
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	1c59      	adds	r1, r3, #1
 800d07c:	6179      	str	r1, [r7, #20]
 800d07e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d082:	b2d2      	uxtb	r2, r2
 800d084:	701a      	strb	r2, [r3, #0]
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	09db      	lsrs	r3, r3, #7
 800d08a:	613b      	str	r3, [r7, #16]
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	2b7f      	cmp	r3, #127	; 0x7f
 800d090:	d8f0      	bhi.n	800d074 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	1c5a      	adds	r2, r3, #1
 800d096:	617a      	str	r2, [r7, #20]
 800d098:	693a      	ldr	r2, [r7, #16]
 800d09a:	b2d2      	uxtb	r2, r2
 800d09c:	701a      	strb	r2, [r3, #0]
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800d0a2:	2202      	movs	r2, #2
 800d0a4:	6879      	ldr	r1, [r7, #4]
 800d0a6:	68b8      	ldr	r0, [r7, #8]
 800d0a8:	f7ff f9d6 	bl	800c458 <_SendPacket>
  RECORD_END();
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f383 8811 	msr	BASEPRI, r3
}
 800d0b2:	bf00      	nop
 800d0b4:	3718      	adds	r7, #24
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	2001a220 	.word	0x2001a220
 800d0c0:	e000ed04 	.word	0xe000ed04

0800d0c4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d0ca:	f3ef 8311 	mrs	r3, BASEPRI
 800d0ce:	f04f 0120 	mov.w	r1, #32
 800d0d2:	f381 8811 	msr	BASEPRI, r1
 800d0d6:	607b      	str	r3, [r7, #4]
 800d0d8:	4807      	ldr	r0, [pc, #28]	; (800d0f8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800d0da:	f7ff f8ce 	bl	800c27a <_PreparePacket>
 800d0de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800d0e0:	2203      	movs	r2, #3
 800d0e2:	6839      	ldr	r1, [r7, #0]
 800d0e4:	6838      	ldr	r0, [r7, #0]
 800d0e6:	f7ff f9b7 	bl	800c458 <_SendPacket>
  RECORD_END();
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f383 8811 	msr	BASEPRI, r3
}
 800d0f0:	bf00      	nop
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	2001a220 	.word	0x2001a220

0800d0fc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d102:	f3ef 8311 	mrs	r3, BASEPRI
 800d106:	f04f 0120 	mov.w	r1, #32
 800d10a:	f381 8811 	msr	BASEPRI, r1
 800d10e:	607b      	str	r3, [r7, #4]
 800d110:	4807      	ldr	r0, [pc, #28]	; (800d130 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800d112:	f7ff f8b2 	bl	800c27a <_PreparePacket>
 800d116:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800d118:	2212      	movs	r2, #18
 800d11a:	6839      	ldr	r1, [r7, #0]
 800d11c:	6838      	ldr	r0, [r7, #0]
 800d11e:	f7ff f99b 	bl	800c458 <_SendPacket>
  RECORD_END();
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f383 8811 	msr	BASEPRI, r3
}
 800d128:	bf00      	nop
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	2001a220 	.word	0x2001a220

0800d134 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d13a:	f3ef 8311 	mrs	r3, BASEPRI
 800d13e:	f04f 0120 	mov.w	r1, #32
 800d142:	f381 8811 	msr	BASEPRI, r1
 800d146:	607b      	str	r3, [r7, #4]
 800d148:	4807      	ldr	r0, [pc, #28]	; (800d168 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800d14a:	f7ff f896 	bl	800c27a <_PreparePacket>
 800d14e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800d150:	2211      	movs	r2, #17
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	6838      	ldr	r0, [r7, #0]
 800d156:	f7ff f97f 	bl	800c458 <_SendPacket>
  RECORD_END();
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f383 8811 	msr	BASEPRI, r3
}
 800d160:	bf00      	nop
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	2001a220 	.word	0x2001a220

0800d16c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b088      	sub	sp, #32
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d174:	f3ef 8311 	mrs	r3, BASEPRI
 800d178:	f04f 0120 	mov.w	r1, #32
 800d17c:	f381 8811 	msr	BASEPRI, r1
 800d180:	617b      	str	r3, [r7, #20]
 800d182:	4819      	ldr	r0, [pc, #100]	; (800d1e8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800d184:	f7ff f879 	bl	800c27a <_PreparePacket>
 800d188:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d18e:	4b17      	ldr	r3, [pc, #92]	; (800d1ec <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	1ad3      	subs	r3, r2, r3
 800d196:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	61fb      	str	r3, [r7, #28]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	61bb      	str	r3, [r7, #24]
 800d1a0:	e00b      	b.n	800d1ba <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	b2da      	uxtb	r2, r3
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	1c59      	adds	r1, r3, #1
 800d1aa:	61f9      	str	r1, [r7, #28]
 800d1ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d1b0:	b2d2      	uxtb	r2, r2
 800d1b2:	701a      	strb	r2, [r3, #0]
 800d1b4:	69bb      	ldr	r3, [r7, #24]
 800d1b6:	09db      	lsrs	r3, r3, #7
 800d1b8:	61bb      	str	r3, [r7, #24]
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	2b7f      	cmp	r3, #127	; 0x7f
 800d1be:	d8f0      	bhi.n	800d1a2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	1c5a      	adds	r2, r3, #1
 800d1c4:	61fa      	str	r2, [r7, #28]
 800d1c6:	69ba      	ldr	r2, [r7, #24]
 800d1c8:	b2d2      	uxtb	r2, r2
 800d1ca:	701a      	strb	r2, [r3, #0]
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800d1d0:	2208      	movs	r2, #8
 800d1d2:	68f9      	ldr	r1, [r7, #12]
 800d1d4:	6938      	ldr	r0, [r7, #16]
 800d1d6:	f7ff f93f 	bl	800c458 <_SendPacket>
  RECORD_END();
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	f383 8811 	msr	BASEPRI, r3
}
 800d1e0:	bf00      	nop
 800d1e2:	3720      	adds	r7, #32
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	2001a220 	.word	0x2001a220
 800d1ec:	2001a1f0 	.word	0x2001a1f0

0800d1f0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b088      	sub	sp, #32
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d1f8:	f3ef 8311 	mrs	r3, BASEPRI
 800d1fc:	f04f 0120 	mov.w	r1, #32
 800d200:	f381 8811 	msr	BASEPRI, r1
 800d204:	617b      	str	r3, [r7, #20]
 800d206:	4819      	ldr	r0, [pc, #100]	; (800d26c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800d208:	f7ff f837 	bl	800c27a <_PreparePacket>
 800d20c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d212:	4b17      	ldr	r3, [pc, #92]	; (800d270 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800d214:	691b      	ldr	r3, [r3, #16]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	61fb      	str	r3, [r7, #28]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	61bb      	str	r3, [r7, #24]
 800d224:	e00b      	b.n	800d23e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	1c59      	adds	r1, r3, #1
 800d22e:	61f9      	str	r1, [r7, #28]
 800d230:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d234:	b2d2      	uxtb	r2, r2
 800d236:	701a      	strb	r2, [r3, #0]
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	09db      	lsrs	r3, r3, #7
 800d23c:	61bb      	str	r3, [r7, #24]
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	2b7f      	cmp	r3, #127	; 0x7f
 800d242:	d8f0      	bhi.n	800d226 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	1c5a      	adds	r2, r3, #1
 800d248:	61fa      	str	r2, [r7, #28]
 800d24a:	69ba      	ldr	r2, [r7, #24]
 800d24c:	b2d2      	uxtb	r2, r2
 800d24e:	701a      	strb	r2, [r3, #0]
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800d254:	2204      	movs	r2, #4
 800d256:	68f9      	ldr	r1, [r7, #12]
 800d258:	6938      	ldr	r0, [r7, #16]
 800d25a:	f7ff f8fd 	bl	800c458 <_SendPacket>
  RECORD_END();
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	f383 8811 	msr	BASEPRI, r3
}
 800d264:	bf00      	nop
 800d266:	3720      	adds	r7, #32
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	2001a220 	.word	0x2001a220
 800d270:	2001a1f0 	.word	0x2001a1f0

0800d274 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800d274:	b580      	push	{r7, lr}
 800d276:	b088      	sub	sp, #32
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d27c:	f3ef 8311 	mrs	r3, BASEPRI
 800d280:	f04f 0120 	mov.w	r1, #32
 800d284:	f381 8811 	msr	BASEPRI, r1
 800d288:	617b      	str	r3, [r7, #20]
 800d28a:	4819      	ldr	r0, [pc, #100]	; (800d2f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800d28c:	f7fe fff5 	bl	800c27a <_PreparePacket>
 800d290:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d296:	4b17      	ldr	r3, [pc, #92]	; (800d2f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800d298:	691b      	ldr	r3, [r3, #16]
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	1ad3      	subs	r3, r2, r3
 800d29e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	61fb      	str	r3, [r7, #28]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	61bb      	str	r3, [r7, #24]
 800d2a8:	e00b      	b.n	800d2c2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	b2da      	uxtb	r2, r3
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	1c59      	adds	r1, r3, #1
 800d2b2:	61f9      	str	r1, [r7, #28]
 800d2b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d2b8:	b2d2      	uxtb	r2, r2
 800d2ba:	701a      	strb	r2, [r3, #0]
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	09db      	lsrs	r3, r3, #7
 800d2c0:	61bb      	str	r3, [r7, #24]
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	2b7f      	cmp	r3, #127	; 0x7f
 800d2c6:	d8f0      	bhi.n	800d2aa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	1c5a      	adds	r2, r3, #1
 800d2cc:	61fa      	str	r2, [r7, #28]
 800d2ce:	69ba      	ldr	r2, [r7, #24]
 800d2d0:	b2d2      	uxtb	r2, r2
 800d2d2:	701a      	strb	r2, [r3, #0]
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800d2d8:	2206      	movs	r2, #6
 800d2da:	68f9      	ldr	r1, [r7, #12]
 800d2dc:	6938      	ldr	r0, [r7, #16]
 800d2de:	f7ff f8bb 	bl	800c458 <_SendPacket>
  RECORD_END();
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	f383 8811 	msr	BASEPRI, r3
}
 800d2e8:	bf00      	nop
 800d2ea:	3720      	adds	r7, #32
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	2001a220 	.word	0x2001a220
 800d2f4:	2001a1f0 	.word	0x2001a1f0

0800d2f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800d2f8:	b480      	push	{r7}
 800d2fa:	b083      	sub	sp, #12
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800d300:	4b04      	ldr	r3, [pc, #16]	; (800d314 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800d302:	691b      	ldr	r3, [r3, #16]
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	1ad3      	subs	r3, r2, r3
}
 800d308:	4618      	mov	r0, r3
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	2001a1f0 	.word	0x2001a1f0

0800d318 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800d318:	b580      	push	{r7, lr}
 800d31a:	b08c      	sub	sp, #48	; 0x30
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	4603      	mov	r3, r0
 800d320:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800d322:	4b3b      	ldr	r3, [pc, #236]	; (800d410 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d06d      	beq.n	800d406 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800d32a:	4b39      	ldr	r3, [pc, #228]	; (800d410 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800d330:	2300      	movs	r3, #0
 800d332:	62bb      	str	r3, [r7, #40]	; 0x28
 800d334:	e008      	b.n	800d348 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800d336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d338:	691b      	ldr	r3, [r3, #16]
 800d33a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800d33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d007      	beq.n	800d352 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800d342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d344:	3301      	adds	r3, #1
 800d346:	62bb      	str	r3, [r7, #40]	; 0x28
 800d348:	79fb      	ldrb	r3, [r7, #7]
 800d34a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d3f2      	bcc.n	800d336 <SEGGER_SYSVIEW_SendModule+0x1e>
 800d350:	e000      	b.n	800d354 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800d352:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800d354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d356:	2b00      	cmp	r3, #0
 800d358:	d055      	beq.n	800d406 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d35a:	f3ef 8311 	mrs	r3, BASEPRI
 800d35e:	f04f 0120 	mov.w	r1, #32
 800d362:	f381 8811 	msr	BASEPRI, r1
 800d366:	617b      	str	r3, [r7, #20]
 800d368:	482a      	ldr	r0, [pc, #168]	; (800d414 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800d36a:	f7fe ff86 	bl	800c27a <_PreparePacket>
 800d36e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	627b      	str	r3, [r7, #36]	; 0x24
 800d378:	79fb      	ldrb	r3, [r7, #7]
 800d37a:	623b      	str	r3, [r7, #32]
 800d37c:	e00b      	b.n	800d396 <SEGGER_SYSVIEW_SendModule+0x7e>
 800d37e:	6a3b      	ldr	r3, [r7, #32]
 800d380:	b2da      	uxtb	r2, r3
 800d382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d384:	1c59      	adds	r1, r3, #1
 800d386:	6279      	str	r1, [r7, #36]	; 0x24
 800d388:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d38c:	b2d2      	uxtb	r2, r2
 800d38e:	701a      	strb	r2, [r3, #0]
 800d390:	6a3b      	ldr	r3, [r7, #32]
 800d392:	09db      	lsrs	r3, r3, #7
 800d394:	623b      	str	r3, [r7, #32]
 800d396:	6a3b      	ldr	r3, [r7, #32]
 800d398:	2b7f      	cmp	r3, #127	; 0x7f
 800d39a:	d8f0      	bhi.n	800d37e <SEGGER_SYSVIEW_SendModule+0x66>
 800d39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39e:	1c5a      	adds	r2, r3, #1
 800d3a0:	627a      	str	r2, [r7, #36]	; 0x24
 800d3a2:	6a3a      	ldr	r2, [r7, #32]
 800d3a4:	b2d2      	uxtb	r2, r2
 800d3a6:	701a      	strb	r2, [r3, #0]
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	61fb      	str	r3, [r7, #28]
 800d3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	61bb      	str	r3, [r7, #24]
 800d3b6:	e00b      	b.n	800d3d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	b2da      	uxtb	r2, r3
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	1c59      	adds	r1, r3, #1
 800d3c0:	61f9      	str	r1, [r7, #28]
 800d3c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d3c6:	b2d2      	uxtb	r2, r2
 800d3c8:	701a      	strb	r2, [r3, #0]
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	09db      	lsrs	r3, r3, #7
 800d3ce:	61bb      	str	r3, [r7, #24]
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	2b7f      	cmp	r3, #127	; 0x7f
 800d3d4:	d8f0      	bhi.n	800d3b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	1c5a      	adds	r2, r3, #1
 800d3da:	61fa      	str	r2, [r7, #28]
 800d3dc:	69ba      	ldr	r2, [r7, #24]
 800d3de:	b2d2      	uxtb	r2, r2
 800d3e0:	701a      	strb	r2, [r3, #0]
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2280      	movs	r2, #128	; 0x80
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	68f8      	ldr	r0, [r7, #12]
 800d3f0:	f7fe fef6 	bl	800c1e0 <_EncodeStr>
 800d3f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800d3f6:	2216      	movs	r2, #22
 800d3f8:	68f9      	ldr	r1, [r7, #12]
 800d3fa:	6938      	ldr	r0, [r7, #16]
 800d3fc:	f7ff f82c 	bl	800c458 <_SendPacket>
      RECORD_END();
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800d406:	bf00      	nop
 800d408:	3730      	adds	r7, #48	; 0x30
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	2001a218 	.word	0x2001a218
 800d414:	2001a220 	.word	0x2001a220

0800d418 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800d41e:	4b0c      	ldr	r3, [pc, #48]	; (800d450 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00f      	beq.n	800d446 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800d426:	4b0a      	ldr	r3, [pc, #40]	; (800d450 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	68db      	ldr	r3, [r3, #12]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d002      	beq.n	800d43a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	68db      	ldr	r3, [r3, #12]
 800d438:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	691b      	ldr	r3, [r3, #16]
 800d43e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1f2      	bne.n	800d42c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800d446:	bf00      	nop
 800d448:	3708      	adds	r7, #8
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	2001a218 	.word	0x2001a218

0800d454 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800d454:	b580      	push	{r7, lr}
 800d456:	b086      	sub	sp, #24
 800d458:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800d45a:	f3ef 8311 	mrs	r3, BASEPRI
 800d45e:	f04f 0120 	mov.w	r1, #32
 800d462:	f381 8811 	msr	BASEPRI, r1
 800d466:	60fb      	str	r3, [r7, #12]
 800d468:	4817      	ldr	r0, [pc, #92]	; (800d4c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800d46a:	f7fe ff06 	bl	800c27a <_PreparePacket>
 800d46e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	617b      	str	r3, [r7, #20]
 800d478:	4b14      	ldr	r3, [pc, #80]	; (800d4cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	613b      	str	r3, [r7, #16]
 800d47e:	e00b      	b.n	800d498 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	b2da      	uxtb	r2, r3
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	1c59      	adds	r1, r3, #1
 800d488:	6179      	str	r1, [r7, #20]
 800d48a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d48e:	b2d2      	uxtb	r2, r2
 800d490:	701a      	strb	r2, [r3, #0]
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	09db      	lsrs	r3, r3, #7
 800d496:	613b      	str	r3, [r7, #16]
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	2b7f      	cmp	r3, #127	; 0x7f
 800d49c:	d8f0      	bhi.n	800d480 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	1c5a      	adds	r2, r3, #1
 800d4a2:	617a      	str	r2, [r7, #20]
 800d4a4:	693a      	ldr	r2, [r7, #16]
 800d4a6:	b2d2      	uxtb	r2, r2
 800d4a8:	701a      	strb	r2, [r3, #0]
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800d4ae:	221b      	movs	r2, #27
 800d4b0:	6879      	ldr	r1, [r7, #4]
 800d4b2:	68b8      	ldr	r0, [r7, #8]
 800d4b4:	f7fe ffd0 	bl	800c458 <_SendPacket>
  RECORD_END();
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f383 8811 	msr	BASEPRI, r3
}
 800d4be:	bf00      	nop
 800d4c0:	3718      	adds	r7, #24
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	2001a220 	.word	0x2001a220
 800d4cc:	2001a21c 	.word	0x2001a21c

0800d4d0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b08a      	sub	sp, #40	; 0x28
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d4d8:	f3ef 8311 	mrs	r3, BASEPRI
 800d4dc:	f04f 0120 	mov.w	r1, #32
 800d4e0:	f381 8811 	msr	BASEPRI, r1
 800d4e4:	617b      	str	r3, [r7, #20]
 800d4e6:	4827      	ldr	r0, [pc, #156]	; (800d584 <SEGGER_SYSVIEW_Warn+0xb4>)
 800d4e8:	f7fe fec7 	bl	800c27a <_PreparePacket>
 800d4ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d4ee:	2280      	movs	r2, #128	; 0x80
 800d4f0:	6879      	ldr	r1, [r7, #4]
 800d4f2:	6938      	ldr	r0, [r7, #16]
 800d4f4:	f7fe fe74 	bl	800c1e0 <_EncodeStr>
 800d4f8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	627b      	str	r3, [r7, #36]	; 0x24
 800d4fe:	2301      	movs	r3, #1
 800d500:	623b      	str	r3, [r7, #32]
 800d502:	e00b      	b.n	800d51c <SEGGER_SYSVIEW_Warn+0x4c>
 800d504:	6a3b      	ldr	r3, [r7, #32]
 800d506:	b2da      	uxtb	r2, r3
 800d508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50a:	1c59      	adds	r1, r3, #1
 800d50c:	6279      	str	r1, [r7, #36]	; 0x24
 800d50e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d512:	b2d2      	uxtb	r2, r2
 800d514:	701a      	strb	r2, [r3, #0]
 800d516:	6a3b      	ldr	r3, [r7, #32]
 800d518:	09db      	lsrs	r3, r3, #7
 800d51a:	623b      	str	r3, [r7, #32]
 800d51c:	6a3b      	ldr	r3, [r7, #32]
 800d51e:	2b7f      	cmp	r3, #127	; 0x7f
 800d520:	d8f0      	bhi.n	800d504 <SEGGER_SYSVIEW_Warn+0x34>
 800d522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d524:	1c5a      	adds	r2, r3, #1
 800d526:	627a      	str	r2, [r7, #36]	; 0x24
 800d528:	6a3a      	ldr	r2, [r7, #32]
 800d52a:	b2d2      	uxtb	r2, r2
 800d52c:	701a      	strb	r2, [r3, #0]
 800d52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d530:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	61fb      	str	r3, [r7, #28]
 800d536:	2300      	movs	r3, #0
 800d538:	61bb      	str	r3, [r7, #24]
 800d53a:	e00b      	b.n	800d554 <SEGGER_SYSVIEW_Warn+0x84>
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	b2da      	uxtb	r2, r3
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	1c59      	adds	r1, r3, #1
 800d544:	61f9      	str	r1, [r7, #28]
 800d546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d54a:	b2d2      	uxtb	r2, r2
 800d54c:	701a      	strb	r2, [r3, #0]
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	09db      	lsrs	r3, r3, #7
 800d552:	61bb      	str	r3, [r7, #24]
 800d554:	69bb      	ldr	r3, [r7, #24]
 800d556:	2b7f      	cmp	r3, #127	; 0x7f
 800d558:	d8f0      	bhi.n	800d53c <SEGGER_SYSVIEW_Warn+0x6c>
 800d55a:	69fb      	ldr	r3, [r7, #28]
 800d55c:	1c5a      	adds	r2, r3, #1
 800d55e:	61fa      	str	r2, [r7, #28]
 800d560:	69ba      	ldr	r2, [r7, #24]
 800d562:	b2d2      	uxtb	r2, r2
 800d564:	701a      	strb	r2, [r3, #0]
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800d56a:	221a      	movs	r2, #26
 800d56c:	68f9      	ldr	r1, [r7, #12]
 800d56e:	6938      	ldr	r0, [r7, #16]
 800d570:	f7fe ff72 	bl	800c458 <_SendPacket>
  RECORD_END();
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	f383 8811 	msr	BASEPRI, r3
}
 800d57a:	bf00      	nop
 800d57c:	3728      	adds	r7, #40	; 0x28
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	2001a220 	.word	0x2001a220

0800d588 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	607a      	str	r2, [r7, #4]
 800d594:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800d596:	683a      	ldr	r2, [r7, #0]
 800d598:	6879      	ldr	r1, [r7, #4]
 800d59a:	2000      	movs	r0, #0
 800d59c:	f7fe fdfa 	bl	800c194 <SEGGER_RTT_Write>
  return len;
 800d5a0:	683b      	ldr	r3, [r7, #0]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <atoi>:
 800d5aa:	220a      	movs	r2, #10
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	f000 b883 	b.w	800d6b8 <strtol>
	...

0800d5b4 <_strtol_l.constprop.0>:
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5ba:	d001      	beq.n	800d5c0 <_strtol_l.constprop.0+0xc>
 800d5bc:	2b24      	cmp	r3, #36	; 0x24
 800d5be:	d906      	bls.n	800d5ce <_strtol_l.constprop.0+0x1a>
 800d5c0:	f000 fe74 	bl	800e2ac <__errno>
 800d5c4:	2316      	movs	r3, #22
 800d5c6:	6003      	str	r3, [r0, #0]
 800d5c8:	2000      	movs	r0, #0
 800d5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d6b4 <_strtol_l.constprop.0+0x100>
 800d5d2:	460d      	mov	r5, r1
 800d5d4:	462e      	mov	r6, r5
 800d5d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d5da:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d5de:	f017 0708 	ands.w	r7, r7, #8
 800d5e2:	d1f7      	bne.n	800d5d4 <_strtol_l.constprop.0+0x20>
 800d5e4:	2c2d      	cmp	r4, #45	; 0x2d
 800d5e6:	d132      	bne.n	800d64e <_strtol_l.constprop.0+0x9a>
 800d5e8:	782c      	ldrb	r4, [r5, #0]
 800d5ea:	2701      	movs	r7, #1
 800d5ec:	1cb5      	adds	r5, r6, #2
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d05b      	beq.n	800d6aa <_strtol_l.constprop.0+0xf6>
 800d5f2:	2b10      	cmp	r3, #16
 800d5f4:	d109      	bne.n	800d60a <_strtol_l.constprop.0+0x56>
 800d5f6:	2c30      	cmp	r4, #48	; 0x30
 800d5f8:	d107      	bne.n	800d60a <_strtol_l.constprop.0+0x56>
 800d5fa:	782c      	ldrb	r4, [r5, #0]
 800d5fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d600:	2c58      	cmp	r4, #88	; 0x58
 800d602:	d14d      	bne.n	800d6a0 <_strtol_l.constprop.0+0xec>
 800d604:	786c      	ldrb	r4, [r5, #1]
 800d606:	2310      	movs	r3, #16
 800d608:	3502      	adds	r5, #2
 800d60a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d60e:	f108 38ff 	add.w	r8, r8, #4294967295
 800d612:	f04f 0e00 	mov.w	lr, #0
 800d616:	fbb8 f9f3 	udiv	r9, r8, r3
 800d61a:	4676      	mov	r6, lr
 800d61c:	fb03 8a19 	mls	sl, r3, r9, r8
 800d620:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d624:	f1bc 0f09 	cmp.w	ip, #9
 800d628:	d816      	bhi.n	800d658 <_strtol_l.constprop.0+0xa4>
 800d62a:	4664      	mov	r4, ip
 800d62c:	42a3      	cmp	r3, r4
 800d62e:	dd24      	ble.n	800d67a <_strtol_l.constprop.0+0xc6>
 800d630:	f1be 3fff 	cmp.w	lr, #4294967295
 800d634:	d008      	beq.n	800d648 <_strtol_l.constprop.0+0x94>
 800d636:	45b1      	cmp	r9, r6
 800d638:	d31c      	bcc.n	800d674 <_strtol_l.constprop.0+0xc0>
 800d63a:	d101      	bne.n	800d640 <_strtol_l.constprop.0+0x8c>
 800d63c:	45a2      	cmp	sl, r4
 800d63e:	db19      	blt.n	800d674 <_strtol_l.constprop.0+0xc0>
 800d640:	fb06 4603 	mla	r6, r6, r3, r4
 800d644:	f04f 0e01 	mov.w	lr, #1
 800d648:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d64c:	e7e8      	b.n	800d620 <_strtol_l.constprop.0+0x6c>
 800d64e:	2c2b      	cmp	r4, #43	; 0x2b
 800d650:	bf04      	itt	eq
 800d652:	782c      	ldrbeq	r4, [r5, #0]
 800d654:	1cb5      	addeq	r5, r6, #2
 800d656:	e7ca      	b.n	800d5ee <_strtol_l.constprop.0+0x3a>
 800d658:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d65c:	f1bc 0f19 	cmp.w	ip, #25
 800d660:	d801      	bhi.n	800d666 <_strtol_l.constprop.0+0xb2>
 800d662:	3c37      	subs	r4, #55	; 0x37
 800d664:	e7e2      	b.n	800d62c <_strtol_l.constprop.0+0x78>
 800d666:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d66a:	f1bc 0f19 	cmp.w	ip, #25
 800d66e:	d804      	bhi.n	800d67a <_strtol_l.constprop.0+0xc6>
 800d670:	3c57      	subs	r4, #87	; 0x57
 800d672:	e7db      	b.n	800d62c <_strtol_l.constprop.0+0x78>
 800d674:	f04f 3eff 	mov.w	lr, #4294967295
 800d678:	e7e6      	b.n	800d648 <_strtol_l.constprop.0+0x94>
 800d67a:	f1be 3fff 	cmp.w	lr, #4294967295
 800d67e:	d105      	bne.n	800d68c <_strtol_l.constprop.0+0xd8>
 800d680:	2322      	movs	r3, #34	; 0x22
 800d682:	6003      	str	r3, [r0, #0]
 800d684:	4646      	mov	r6, r8
 800d686:	b942      	cbnz	r2, 800d69a <_strtol_l.constprop.0+0xe6>
 800d688:	4630      	mov	r0, r6
 800d68a:	e79e      	b.n	800d5ca <_strtol_l.constprop.0+0x16>
 800d68c:	b107      	cbz	r7, 800d690 <_strtol_l.constprop.0+0xdc>
 800d68e:	4276      	negs	r6, r6
 800d690:	2a00      	cmp	r2, #0
 800d692:	d0f9      	beq.n	800d688 <_strtol_l.constprop.0+0xd4>
 800d694:	f1be 0f00 	cmp.w	lr, #0
 800d698:	d000      	beq.n	800d69c <_strtol_l.constprop.0+0xe8>
 800d69a:	1e69      	subs	r1, r5, #1
 800d69c:	6011      	str	r1, [r2, #0]
 800d69e:	e7f3      	b.n	800d688 <_strtol_l.constprop.0+0xd4>
 800d6a0:	2430      	movs	r4, #48	; 0x30
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1b1      	bne.n	800d60a <_strtol_l.constprop.0+0x56>
 800d6a6:	2308      	movs	r3, #8
 800d6a8:	e7af      	b.n	800d60a <_strtol_l.constprop.0+0x56>
 800d6aa:	2c30      	cmp	r4, #48	; 0x30
 800d6ac:	d0a5      	beq.n	800d5fa <_strtol_l.constprop.0+0x46>
 800d6ae:	230a      	movs	r3, #10
 800d6b0:	e7ab      	b.n	800d60a <_strtol_l.constprop.0+0x56>
 800d6b2:	bf00      	nop
 800d6b4:	0801153f 	.word	0x0801153f

0800d6b8 <strtol>:
 800d6b8:	4613      	mov	r3, r2
 800d6ba:	460a      	mov	r2, r1
 800d6bc:	4601      	mov	r1, r0
 800d6be:	4802      	ldr	r0, [pc, #8]	; (800d6c8 <strtol+0x10>)
 800d6c0:	6800      	ldr	r0, [r0, #0]
 800d6c2:	f7ff bf77 	b.w	800d5b4 <_strtol_l.constprop.0>
 800d6c6:	bf00      	nop
 800d6c8:	200001e0 	.word	0x200001e0

0800d6cc <__cvt>:
 800d6cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6d0:	ec55 4b10 	vmov	r4, r5, d0
 800d6d4:	2d00      	cmp	r5, #0
 800d6d6:	460e      	mov	r6, r1
 800d6d8:	4619      	mov	r1, r3
 800d6da:	462b      	mov	r3, r5
 800d6dc:	bfbb      	ittet	lt
 800d6de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d6e2:	461d      	movlt	r5, r3
 800d6e4:	2300      	movge	r3, #0
 800d6e6:	232d      	movlt	r3, #45	; 0x2d
 800d6e8:	700b      	strb	r3, [r1, #0]
 800d6ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d6f0:	4691      	mov	r9, r2
 800d6f2:	f023 0820 	bic.w	r8, r3, #32
 800d6f6:	bfbc      	itt	lt
 800d6f8:	4622      	movlt	r2, r4
 800d6fa:	4614      	movlt	r4, r2
 800d6fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d700:	d005      	beq.n	800d70e <__cvt+0x42>
 800d702:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d706:	d100      	bne.n	800d70a <__cvt+0x3e>
 800d708:	3601      	adds	r6, #1
 800d70a:	2102      	movs	r1, #2
 800d70c:	e000      	b.n	800d710 <__cvt+0x44>
 800d70e:	2103      	movs	r1, #3
 800d710:	ab03      	add	r3, sp, #12
 800d712:	9301      	str	r3, [sp, #4]
 800d714:	ab02      	add	r3, sp, #8
 800d716:	9300      	str	r3, [sp, #0]
 800d718:	ec45 4b10 	vmov	d0, r4, r5
 800d71c:	4653      	mov	r3, sl
 800d71e:	4632      	mov	r2, r6
 800d720:	f000 fe8a 	bl	800e438 <_dtoa_r>
 800d724:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d728:	4607      	mov	r7, r0
 800d72a:	d102      	bne.n	800d732 <__cvt+0x66>
 800d72c:	f019 0f01 	tst.w	r9, #1
 800d730:	d022      	beq.n	800d778 <__cvt+0xac>
 800d732:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d736:	eb07 0906 	add.w	r9, r7, r6
 800d73a:	d110      	bne.n	800d75e <__cvt+0x92>
 800d73c:	783b      	ldrb	r3, [r7, #0]
 800d73e:	2b30      	cmp	r3, #48	; 0x30
 800d740:	d10a      	bne.n	800d758 <__cvt+0x8c>
 800d742:	2200      	movs	r2, #0
 800d744:	2300      	movs	r3, #0
 800d746:	4620      	mov	r0, r4
 800d748:	4629      	mov	r1, r5
 800d74a:	f7f3 fa2d 	bl	8000ba8 <__aeabi_dcmpeq>
 800d74e:	b918      	cbnz	r0, 800d758 <__cvt+0x8c>
 800d750:	f1c6 0601 	rsb	r6, r6, #1
 800d754:	f8ca 6000 	str.w	r6, [sl]
 800d758:	f8da 3000 	ldr.w	r3, [sl]
 800d75c:	4499      	add	r9, r3
 800d75e:	2200      	movs	r2, #0
 800d760:	2300      	movs	r3, #0
 800d762:	4620      	mov	r0, r4
 800d764:	4629      	mov	r1, r5
 800d766:	f7f3 fa1f 	bl	8000ba8 <__aeabi_dcmpeq>
 800d76a:	b108      	cbz	r0, 800d770 <__cvt+0xa4>
 800d76c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d770:	2230      	movs	r2, #48	; 0x30
 800d772:	9b03      	ldr	r3, [sp, #12]
 800d774:	454b      	cmp	r3, r9
 800d776:	d307      	bcc.n	800d788 <__cvt+0xbc>
 800d778:	9b03      	ldr	r3, [sp, #12]
 800d77a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d77c:	1bdb      	subs	r3, r3, r7
 800d77e:	4638      	mov	r0, r7
 800d780:	6013      	str	r3, [r2, #0]
 800d782:	b004      	add	sp, #16
 800d784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d788:	1c59      	adds	r1, r3, #1
 800d78a:	9103      	str	r1, [sp, #12]
 800d78c:	701a      	strb	r2, [r3, #0]
 800d78e:	e7f0      	b.n	800d772 <__cvt+0xa6>

0800d790 <__exponent>:
 800d790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d792:	4603      	mov	r3, r0
 800d794:	2900      	cmp	r1, #0
 800d796:	bfb8      	it	lt
 800d798:	4249      	neglt	r1, r1
 800d79a:	f803 2b02 	strb.w	r2, [r3], #2
 800d79e:	bfb4      	ite	lt
 800d7a0:	222d      	movlt	r2, #45	; 0x2d
 800d7a2:	222b      	movge	r2, #43	; 0x2b
 800d7a4:	2909      	cmp	r1, #9
 800d7a6:	7042      	strb	r2, [r0, #1]
 800d7a8:	dd2a      	ble.n	800d800 <__exponent+0x70>
 800d7aa:	f10d 0207 	add.w	r2, sp, #7
 800d7ae:	4617      	mov	r7, r2
 800d7b0:	260a      	movs	r6, #10
 800d7b2:	4694      	mov	ip, r2
 800d7b4:	fb91 f5f6 	sdiv	r5, r1, r6
 800d7b8:	fb06 1415 	mls	r4, r6, r5, r1
 800d7bc:	3430      	adds	r4, #48	; 0x30
 800d7be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d7c2:	460c      	mov	r4, r1
 800d7c4:	2c63      	cmp	r4, #99	; 0x63
 800d7c6:	f102 32ff 	add.w	r2, r2, #4294967295
 800d7ca:	4629      	mov	r1, r5
 800d7cc:	dcf1      	bgt.n	800d7b2 <__exponent+0x22>
 800d7ce:	3130      	adds	r1, #48	; 0x30
 800d7d0:	f1ac 0402 	sub.w	r4, ip, #2
 800d7d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d7d8:	1c41      	adds	r1, r0, #1
 800d7da:	4622      	mov	r2, r4
 800d7dc:	42ba      	cmp	r2, r7
 800d7de:	d30a      	bcc.n	800d7f6 <__exponent+0x66>
 800d7e0:	f10d 0209 	add.w	r2, sp, #9
 800d7e4:	eba2 020c 	sub.w	r2, r2, ip
 800d7e8:	42bc      	cmp	r4, r7
 800d7ea:	bf88      	it	hi
 800d7ec:	2200      	movhi	r2, #0
 800d7ee:	4413      	add	r3, r2
 800d7f0:	1a18      	subs	r0, r3, r0
 800d7f2:	b003      	add	sp, #12
 800d7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d7fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d7fe:	e7ed      	b.n	800d7dc <__exponent+0x4c>
 800d800:	2330      	movs	r3, #48	; 0x30
 800d802:	3130      	adds	r1, #48	; 0x30
 800d804:	7083      	strb	r3, [r0, #2]
 800d806:	70c1      	strb	r1, [r0, #3]
 800d808:	1d03      	adds	r3, r0, #4
 800d80a:	e7f1      	b.n	800d7f0 <__exponent+0x60>

0800d80c <_printf_float>:
 800d80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d810:	ed2d 8b02 	vpush	{d8}
 800d814:	b08d      	sub	sp, #52	; 0x34
 800d816:	460c      	mov	r4, r1
 800d818:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d81c:	4616      	mov	r6, r2
 800d81e:	461f      	mov	r7, r3
 800d820:	4605      	mov	r5, r0
 800d822:	f000 fd0b 	bl	800e23c <_localeconv_r>
 800d826:	f8d0 a000 	ldr.w	sl, [r0]
 800d82a:	4650      	mov	r0, sl
 800d82c:	f7f2 fd90 	bl	8000350 <strlen>
 800d830:	2300      	movs	r3, #0
 800d832:	930a      	str	r3, [sp, #40]	; 0x28
 800d834:	6823      	ldr	r3, [r4, #0]
 800d836:	9305      	str	r3, [sp, #20]
 800d838:	f8d8 3000 	ldr.w	r3, [r8]
 800d83c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d840:	3307      	adds	r3, #7
 800d842:	f023 0307 	bic.w	r3, r3, #7
 800d846:	f103 0208 	add.w	r2, r3, #8
 800d84a:	f8c8 2000 	str.w	r2, [r8]
 800d84e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d852:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d856:	9307      	str	r3, [sp, #28]
 800d858:	f8cd 8018 	str.w	r8, [sp, #24]
 800d85c:	ee08 0a10 	vmov	s16, r0
 800d860:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d868:	4b9e      	ldr	r3, [pc, #632]	; (800dae4 <_printf_float+0x2d8>)
 800d86a:	f04f 32ff 	mov.w	r2, #4294967295
 800d86e:	f7f3 f9cd 	bl	8000c0c <__aeabi_dcmpun>
 800d872:	bb88      	cbnz	r0, 800d8d8 <_printf_float+0xcc>
 800d874:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d878:	4b9a      	ldr	r3, [pc, #616]	; (800dae4 <_printf_float+0x2d8>)
 800d87a:	f04f 32ff 	mov.w	r2, #4294967295
 800d87e:	f7f3 f9a7 	bl	8000bd0 <__aeabi_dcmple>
 800d882:	bb48      	cbnz	r0, 800d8d8 <_printf_float+0xcc>
 800d884:	2200      	movs	r2, #0
 800d886:	2300      	movs	r3, #0
 800d888:	4640      	mov	r0, r8
 800d88a:	4649      	mov	r1, r9
 800d88c:	f7f3 f996 	bl	8000bbc <__aeabi_dcmplt>
 800d890:	b110      	cbz	r0, 800d898 <_printf_float+0x8c>
 800d892:	232d      	movs	r3, #45	; 0x2d
 800d894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d898:	4a93      	ldr	r2, [pc, #588]	; (800dae8 <_printf_float+0x2dc>)
 800d89a:	4b94      	ldr	r3, [pc, #592]	; (800daec <_printf_float+0x2e0>)
 800d89c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d8a0:	bf94      	ite	ls
 800d8a2:	4690      	movls	r8, r2
 800d8a4:	4698      	movhi	r8, r3
 800d8a6:	2303      	movs	r3, #3
 800d8a8:	6123      	str	r3, [r4, #16]
 800d8aa:	9b05      	ldr	r3, [sp, #20]
 800d8ac:	f023 0304 	bic.w	r3, r3, #4
 800d8b0:	6023      	str	r3, [r4, #0]
 800d8b2:	f04f 0900 	mov.w	r9, #0
 800d8b6:	9700      	str	r7, [sp, #0]
 800d8b8:	4633      	mov	r3, r6
 800d8ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800d8bc:	4621      	mov	r1, r4
 800d8be:	4628      	mov	r0, r5
 800d8c0:	f000 f9da 	bl	800dc78 <_printf_common>
 800d8c4:	3001      	adds	r0, #1
 800d8c6:	f040 8090 	bne.w	800d9ea <_printf_float+0x1de>
 800d8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ce:	b00d      	add	sp, #52	; 0x34
 800d8d0:	ecbd 8b02 	vpop	{d8}
 800d8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d8:	4642      	mov	r2, r8
 800d8da:	464b      	mov	r3, r9
 800d8dc:	4640      	mov	r0, r8
 800d8de:	4649      	mov	r1, r9
 800d8e0:	f7f3 f994 	bl	8000c0c <__aeabi_dcmpun>
 800d8e4:	b140      	cbz	r0, 800d8f8 <_printf_float+0xec>
 800d8e6:	464b      	mov	r3, r9
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	bfbc      	itt	lt
 800d8ec:	232d      	movlt	r3, #45	; 0x2d
 800d8ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d8f2:	4a7f      	ldr	r2, [pc, #508]	; (800daf0 <_printf_float+0x2e4>)
 800d8f4:	4b7f      	ldr	r3, [pc, #508]	; (800daf4 <_printf_float+0x2e8>)
 800d8f6:	e7d1      	b.n	800d89c <_printf_float+0x90>
 800d8f8:	6863      	ldr	r3, [r4, #4]
 800d8fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d8fe:	9206      	str	r2, [sp, #24]
 800d900:	1c5a      	adds	r2, r3, #1
 800d902:	d13f      	bne.n	800d984 <_printf_float+0x178>
 800d904:	2306      	movs	r3, #6
 800d906:	6063      	str	r3, [r4, #4]
 800d908:	9b05      	ldr	r3, [sp, #20]
 800d90a:	6861      	ldr	r1, [r4, #4]
 800d90c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d910:	2300      	movs	r3, #0
 800d912:	9303      	str	r3, [sp, #12]
 800d914:	ab0a      	add	r3, sp, #40	; 0x28
 800d916:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d91a:	ab09      	add	r3, sp, #36	; 0x24
 800d91c:	ec49 8b10 	vmov	d0, r8, r9
 800d920:	9300      	str	r3, [sp, #0]
 800d922:	6022      	str	r2, [r4, #0]
 800d924:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d928:	4628      	mov	r0, r5
 800d92a:	f7ff fecf 	bl	800d6cc <__cvt>
 800d92e:	9b06      	ldr	r3, [sp, #24]
 800d930:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d932:	2b47      	cmp	r3, #71	; 0x47
 800d934:	4680      	mov	r8, r0
 800d936:	d108      	bne.n	800d94a <_printf_float+0x13e>
 800d938:	1cc8      	adds	r0, r1, #3
 800d93a:	db02      	blt.n	800d942 <_printf_float+0x136>
 800d93c:	6863      	ldr	r3, [r4, #4]
 800d93e:	4299      	cmp	r1, r3
 800d940:	dd41      	ble.n	800d9c6 <_printf_float+0x1ba>
 800d942:	f1ab 0302 	sub.w	r3, fp, #2
 800d946:	fa5f fb83 	uxtb.w	fp, r3
 800d94a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d94e:	d820      	bhi.n	800d992 <_printf_float+0x186>
 800d950:	3901      	subs	r1, #1
 800d952:	465a      	mov	r2, fp
 800d954:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d958:	9109      	str	r1, [sp, #36]	; 0x24
 800d95a:	f7ff ff19 	bl	800d790 <__exponent>
 800d95e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d960:	1813      	adds	r3, r2, r0
 800d962:	2a01      	cmp	r2, #1
 800d964:	4681      	mov	r9, r0
 800d966:	6123      	str	r3, [r4, #16]
 800d968:	dc02      	bgt.n	800d970 <_printf_float+0x164>
 800d96a:	6822      	ldr	r2, [r4, #0]
 800d96c:	07d2      	lsls	r2, r2, #31
 800d96e:	d501      	bpl.n	800d974 <_printf_float+0x168>
 800d970:	3301      	adds	r3, #1
 800d972:	6123      	str	r3, [r4, #16]
 800d974:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d09c      	beq.n	800d8b6 <_printf_float+0xaa>
 800d97c:	232d      	movs	r3, #45	; 0x2d
 800d97e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d982:	e798      	b.n	800d8b6 <_printf_float+0xaa>
 800d984:	9a06      	ldr	r2, [sp, #24]
 800d986:	2a47      	cmp	r2, #71	; 0x47
 800d988:	d1be      	bne.n	800d908 <_printf_float+0xfc>
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1bc      	bne.n	800d908 <_printf_float+0xfc>
 800d98e:	2301      	movs	r3, #1
 800d990:	e7b9      	b.n	800d906 <_printf_float+0xfa>
 800d992:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d996:	d118      	bne.n	800d9ca <_printf_float+0x1be>
 800d998:	2900      	cmp	r1, #0
 800d99a:	6863      	ldr	r3, [r4, #4]
 800d99c:	dd0b      	ble.n	800d9b6 <_printf_float+0x1aa>
 800d99e:	6121      	str	r1, [r4, #16]
 800d9a0:	b913      	cbnz	r3, 800d9a8 <_printf_float+0x19c>
 800d9a2:	6822      	ldr	r2, [r4, #0]
 800d9a4:	07d0      	lsls	r0, r2, #31
 800d9a6:	d502      	bpl.n	800d9ae <_printf_float+0x1a2>
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	440b      	add	r3, r1
 800d9ac:	6123      	str	r3, [r4, #16]
 800d9ae:	65a1      	str	r1, [r4, #88]	; 0x58
 800d9b0:	f04f 0900 	mov.w	r9, #0
 800d9b4:	e7de      	b.n	800d974 <_printf_float+0x168>
 800d9b6:	b913      	cbnz	r3, 800d9be <_printf_float+0x1b2>
 800d9b8:	6822      	ldr	r2, [r4, #0]
 800d9ba:	07d2      	lsls	r2, r2, #31
 800d9bc:	d501      	bpl.n	800d9c2 <_printf_float+0x1b6>
 800d9be:	3302      	adds	r3, #2
 800d9c0:	e7f4      	b.n	800d9ac <_printf_float+0x1a0>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e7f2      	b.n	800d9ac <_printf_float+0x1a0>
 800d9c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9cc:	4299      	cmp	r1, r3
 800d9ce:	db05      	blt.n	800d9dc <_printf_float+0x1d0>
 800d9d0:	6823      	ldr	r3, [r4, #0]
 800d9d2:	6121      	str	r1, [r4, #16]
 800d9d4:	07d8      	lsls	r0, r3, #31
 800d9d6:	d5ea      	bpl.n	800d9ae <_printf_float+0x1a2>
 800d9d8:	1c4b      	adds	r3, r1, #1
 800d9da:	e7e7      	b.n	800d9ac <_printf_float+0x1a0>
 800d9dc:	2900      	cmp	r1, #0
 800d9de:	bfd4      	ite	le
 800d9e0:	f1c1 0202 	rsble	r2, r1, #2
 800d9e4:	2201      	movgt	r2, #1
 800d9e6:	4413      	add	r3, r2
 800d9e8:	e7e0      	b.n	800d9ac <_printf_float+0x1a0>
 800d9ea:	6823      	ldr	r3, [r4, #0]
 800d9ec:	055a      	lsls	r2, r3, #21
 800d9ee:	d407      	bmi.n	800da00 <_printf_float+0x1f4>
 800d9f0:	6923      	ldr	r3, [r4, #16]
 800d9f2:	4642      	mov	r2, r8
 800d9f4:	4631      	mov	r1, r6
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	47b8      	blx	r7
 800d9fa:	3001      	adds	r0, #1
 800d9fc:	d12c      	bne.n	800da58 <_printf_float+0x24c>
 800d9fe:	e764      	b.n	800d8ca <_printf_float+0xbe>
 800da00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800da04:	f240 80e0 	bls.w	800dbc8 <_printf_float+0x3bc>
 800da08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da0c:	2200      	movs	r2, #0
 800da0e:	2300      	movs	r3, #0
 800da10:	f7f3 f8ca 	bl	8000ba8 <__aeabi_dcmpeq>
 800da14:	2800      	cmp	r0, #0
 800da16:	d034      	beq.n	800da82 <_printf_float+0x276>
 800da18:	4a37      	ldr	r2, [pc, #220]	; (800daf8 <_printf_float+0x2ec>)
 800da1a:	2301      	movs	r3, #1
 800da1c:	4631      	mov	r1, r6
 800da1e:	4628      	mov	r0, r5
 800da20:	47b8      	blx	r7
 800da22:	3001      	adds	r0, #1
 800da24:	f43f af51 	beq.w	800d8ca <_printf_float+0xbe>
 800da28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da2c:	429a      	cmp	r2, r3
 800da2e:	db02      	blt.n	800da36 <_printf_float+0x22a>
 800da30:	6823      	ldr	r3, [r4, #0]
 800da32:	07d8      	lsls	r0, r3, #31
 800da34:	d510      	bpl.n	800da58 <_printf_float+0x24c>
 800da36:	ee18 3a10 	vmov	r3, s16
 800da3a:	4652      	mov	r2, sl
 800da3c:	4631      	mov	r1, r6
 800da3e:	4628      	mov	r0, r5
 800da40:	47b8      	blx	r7
 800da42:	3001      	adds	r0, #1
 800da44:	f43f af41 	beq.w	800d8ca <_printf_float+0xbe>
 800da48:	f04f 0800 	mov.w	r8, #0
 800da4c:	f104 091a 	add.w	r9, r4, #26
 800da50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da52:	3b01      	subs	r3, #1
 800da54:	4543      	cmp	r3, r8
 800da56:	dc09      	bgt.n	800da6c <_printf_float+0x260>
 800da58:	6823      	ldr	r3, [r4, #0]
 800da5a:	079b      	lsls	r3, r3, #30
 800da5c:	f100 8107 	bmi.w	800dc6e <_printf_float+0x462>
 800da60:	68e0      	ldr	r0, [r4, #12]
 800da62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da64:	4298      	cmp	r0, r3
 800da66:	bfb8      	it	lt
 800da68:	4618      	movlt	r0, r3
 800da6a:	e730      	b.n	800d8ce <_printf_float+0xc2>
 800da6c:	2301      	movs	r3, #1
 800da6e:	464a      	mov	r2, r9
 800da70:	4631      	mov	r1, r6
 800da72:	4628      	mov	r0, r5
 800da74:	47b8      	blx	r7
 800da76:	3001      	adds	r0, #1
 800da78:	f43f af27 	beq.w	800d8ca <_printf_float+0xbe>
 800da7c:	f108 0801 	add.w	r8, r8, #1
 800da80:	e7e6      	b.n	800da50 <_printf_float+0x244>
 800da82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da84:	2b00      	cmp	r3, #0
 800da86:	dc39      	bgt.n	800dafc <_printf_float+0x2f0>
 800da88:	4a1b      	ldr	r2, [pc, #108]	; (800daf8 <_printf_float+0x2ec>)
 800da8a:	2301      	movs	r3, #1
 800da8c:	4631      	mov	r1, r6
 800da8e:	4628      	mov	r0, r5
 800da90:	47b8      	blx	r7
 800da92:	3001      	adds	r0, #1
 800da94:	f43f af19 	beq.w	800d8ca <_printf_float+0xbe>
 800da98:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800da9c:	4313      	orrs	r3, r2
 800da9e:	d102      	bne.n	800daa6 <_printf_float+0x29a>
 800daa0:	6823      	ldr	r3, [r4, #0]
 800daa2:	07d9      	lsls	r1, r3, #31
 800daa4:	d5d8      	bpl.n	800da58 <_printf_float+0x24c>
 800daa6:	ee18 3a10 	vmov	r3, s16
 800daaa:	4652      	mov	r2, sl
 800daac:	4631      	mov	r1, r6
 800daae:	4628      	mov	r0, r5
 800dab0:	47b8      	blx	r7
 800dab2:	3001      	adds	r0, #1
 800dab4:	f43f af09 	beq.w	800d8ca <_printf_float+0xbe>
 800dab8:	f04f 0900 	mov.w	r9, #0
 800dabc:	f104 0a1a 	add.w	sl, r4, #26
 800dac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dac2:	425b      	negs	r3, r3
 800dac4:	454b      	cmp	r3, r9
 800dac6:	dc01      	bgt.n	800dacc <_printf_float+0x2c0>
 800dac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daca:	e792      	b.n	800d9f2 <_printf_float+0x1e6>
 800dacc:	2301      	movs	r3, #1
 800dace:	4652      	mov	r2, sl
 800dad0:	4631      	mov	r1, r6
 800dad2:	4628      	mov	r0, r5
 800dad4:	47b8      	blx	r7
 800dad6:	3001      	adds	r0, #1
 800dad8:	f43f aef7 	beq.w	800d8ca <_printf_float+0xbe>
 800dadc:	f109 0901 	add.w	r9, r9, #1
 800dae0:	e7ee      	b.n	800dac0 <_printf_float+0x2b4>
 800dae2:	bf00      	nop
 800dae4:	7fefffff 	.word	0x7fefffff
 800dae8:	0801163f 	.word	0x0801163f
 800daec:	08011643 	.word	0x08011643
 800daf0:	08011647 	.word	0x08011647
 800daf4:	0801164b 	.word	0x0801164b
 800daf8:	0801164f 	.word	0x0801164f
 800dafc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dafe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db00:	429a      	cmp	r2, r3
 800db02:	bfa8      	it	ge
 800db04:	461a      	movge	r2, r3
 800db06:	2a00      	cmp	r2, #0
 800db08:	4691      	mov	r9, r2
 800db0a:	dc37      	bgt.n	800db7c <_printf_float+0x370>
 800db0c:	f04f 0b00 	mov.w	fp, #0
 800db10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db14:	f104 021a 	add.w	r2, r4, #26
 800db18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db1a:	9305      	str	r3, [sp, #20]
 800db1c:	eba3 0309 	sub.w	r3, r3, r9
 800db20:	455b      	cmp	r3, fp
 800db22:	dc33      	bgt.n	800db8c <_printf_float+0x380>
 800db24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db28:	429a      	cmp	r2, r3
 800db2a:	db3b      	blt.n	800dba4 <_printf_float+0x398>
 800db2c:	6823      	ldr	r3, [r4, #0]
 800db2e:	07da      	lsls	r2, r3, #31
 800db30:	d438      	bmi.n	800dba4 <_printf_float+0x398>
 800db32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800db36:	eba2 0903 	sub.w	r9, r2, r3
 800db3a:	9b05      	ldr	r3, [sp, #20]
 800db3c:	1ad2      	subs	r2, r2, r3
 800db3e:	4591      	cmp	r9, r2
 800db40:	bfa8      	it	ge
 800db42:	4691      	movge	r9, r2
 800db44:	f1b9 0f00 	cmp.w	r9, #0
 800db48:	dc35      	bgt.n	800dbb6 <_printf_float+0x3aa>
 800db4a:	f04f 0800 	mov.w	r8, #0
 800db4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db52:	f104 0a1a 	add.w	sl, r4, #26
 800db56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db5a:	1a9b      	subs	r3, r3, r2
 800db5c:	eba3 0309 	sub.w	r3, r3, r9
 800db60:	4543      	cmp	r3, r8
 800db62:	f77f af79 	ble.w	800da58 <_printf_float+0x24c>
 800db66:	2301      	movs	r3, #1
 800db68:	4652      	mov	r2, sl
 800db6a:	4631      	mov	r1, r6
 800db6c:	4628      	mov	r0, r5
 800db6e:	47b8      	blx	r7
 800db70:	3001      	adds	r0, #1
 800db72:	f43f aeaa 	beq.w	800d8ca <_printf_float+0xbe>
 800db76:	f108 0801 	add.w	r8, r8, #1
 800db7a:	e7ec      	b.n	800db56 <_printf_float+0x34a>
 800db7c:	4613      	mov	r3, r2
 800db7e:	4631      	mov	r1, r6
 800db80:	4642      	mov	r2, r8
 800db82:	4628      	mov	r0, r5
 800db84:	47b8      	blx	r7
 800db86:	3001      	adds	r0, #1
 800db88:	d1c0      	bne.n	800db0c <_printf_float+0x300>
 800db8a:	e69e      	b.n	800d8ca <_printf_float+0xbe>
 800db8c:	2301      	movs	r3, #1
 800db8e:	4631      	mov	r1, r6
 800db90:	4628      	mov	r0, r5
 800db92:	9205      	str	r2, [sp, #20]
 800db94:	47b8      	blx	r7
 800db96:	3001      	adds	r0, #1
 800db98:	f43f ae97 	beq.w	800d8ca <_printf_float+0xbe>
 800db9c:	9a05      	ldr	r2, [sp, #20]
 800db9e:	f10b 0b01 	add.w	fp, fp, #1
 800dba2:	e7b9      	b.n	800db18 <_printf_float+0x30c>
 800dba4:	ee18 3a10 	vmov	r3, s16
 800dba8:	4652      	mov	r2, sl
 800dbaa:	4631      	mov	r1, r6
 800dbac:	4628      	mov	r0, r5
 800dbae:	47b8      	blx	r7
 800dbb0:	3001      	adds	r0, #1
 800dbb2:	d1be      	bne.n	800db32 <_printf_float+0x326>
 800dbb4:	e689      	b.n	800d8ca <_printf_float+0xbe>
 800dbb6:	9a05      	ldr	r2, [sp, #20]
 800dbb8:	464b      	mov	r3, r9
 800dbba:	4442      	add	r2, r8
 800dbbc:	4631      	mov	r1, r6
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	47b8      	blx	r7
 800dbc2:	3001      	adds	r0, #1
 800dbc4:	d1c1      	bne.n	800db4a <_printf_float+0x33e>
 800dbc6:	e680      	b.n	800d8ca <_printf_float+0xbe>
 800dbc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbca:	2a01      	cmp	r2, #1
 800dbcc:	dc01      	bgt.n	800dbd2 <_printf_float+0x3c6>
 800dbce:	07db      	lsls	r3, r3, #31
 800dbd0:	d53a      	bpl.n	800dc48 <_printf_float+0x43c>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	4642      	mov	r2, r8
 800dbd6:	4631      	mov	r1, r6
 800dbd8:	4628      	mov	r0, r5
 800dbda:	47b8      	blx	r7
 800dbdc:	3001      	adds	r0, #1
 800dbde:	f43f ae74 	beq.w	800d8ca <_printf_float+0xbe>
 800dbe2:	ee18 3a10 	vmov	r3, s16
 800dbe6:	4652      	mov	r2, sl
 800dbe8:	4631      	mov	r1, r6
 800dbea:	4628      	mov	r0, r5
 800dbec:	47b8      	blx	r7
 800dbee:	3001      	adds	r0, #1
 800dbf0:	f43f ae6b 	beq.w	800d8ca <_printf_float+0xbe>
 800dbf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800dc00:	f7f2 ffd2 	bl	8000ba8 <__aeabi_dcmpeq>
 800dc04:	b9d8      	cbnz	r0, 800dc3e <_printf_float+0x432>
 800dc06:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dc0a:	f108 0201 	add.w	r2, r8, #1
 800dc0e:	4631      	mov	r1, r6
 800dc10:	4628      	mov	r0, r5
 800dc12:	47b8      	blx	r7
 800dc14:	3001      	adds	r0, #1
 800dc16:	d10e      	bne.n	800dc36 <_printf_float+0x42a>
 800dc18:	e657      	b.n	800d8ca <_printf_float+0xbe>
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	4652      	mov	r2, sl
 800dc1e:	4631      	mov	r1, r6
 800dc20:	4628      	mov	r0, r5
 800dc22:	47b8      	blx	r7
 800dc24:	3001      	adds	r0, #1
 800dc26:	f43f ae50 	beq.w	800d8ca <_printf_float+0xbe>
 800dc2a:	f108 0801 	add.w	r8, r8, #1
 800dc2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc30:	3b01      	subs	r3, #1
 800dc32:	4543      	cmp	r3, r8
 800dc34:	dcf1      	bgt.n	800dc1a <_printf_float+0x40e>
 800dc36:	464b      	mov	r3, r9
 800dc38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dc3c:	e6da      	b.n	800d9f4 <_printf_float+0x1e8>
 800dc3e:	f04f 0800 	mov.w	r8, #0
 800dc42:	f104 0a1a 	add.w	sl, r4, #26
 800dc46:	e7f2      	b.n	800dc2e <_printf_float+0x422>
 800dc48:	2301      	movs	r3, #1
 800dc4a:	4642      	mov	r2, r8
 800dc4c:	e7df      	b.n	800dc0e <_printf_float+0x402>
 800dc4e:	2301      	movs	r3, #1
 800dc50:	464a      	mov	r2, r9
 800dc52:	4631      	mov	r1, r6
 800dc54:	4628      	mov	r0, r5
 800dc56:	47b8      	blx	r7
 800dc58:	3001      	adds	r0, #1
 800dc5a:	f43f ae36 	beq.w	800d8ca <_printf_float+0xbe>
 800dc5e:	f108 0801 	add.w	r8, r8, #1
 800dc62:	68e3      	ldr	r3, [r4, #12]
 800dc64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc66:	1a5b      	subs	r3, r3, r1
 800dc68:	4543      	cmp	r3, r8
 800dc6a:	dcf0      	bgt.n	800dc4e <_printf_float+0x442>
 800dc6c:	e6f8      	b.n	800da60 <_printf_float+0x254>
 800dc6e:	f04f 0800 	mov.w	r8, #0
 800dc72:	f104 0919 	add.w	r9, r4, #25
 800dc76:	e7f4      	b.n	800dc62 <_printf_float+0x456>

0800dc78 <_printf_common>:
 800dc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc7c:	4616      	mov	r6, r2
 800dc7e:	4699      	mov	r9, r3
 800dc80:	688a      	ldr	r2, [r1, #8]
 800dc82:	690b      	ldr	r3, [r1, #16]
 800dc84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	bfb8      	it	lt
 800dc8c:	4613      	movlt	r3, r2
 800dc8e:	6033      	str	r3, [r6, #0]
 800dc90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc94:	4607      	mov	r7, r0
 800dc96:	460c      	mov	r4, r1
 800dc98:	b10a      	cbz	r2, 800dc9e <_printf_common+0x26>
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	6033      	str	r3, [r6, #0]
 800dc9e:	6823      	ldr	r3, [r4, #0]
 800dca0:	0699      	lsls	r1, r3, #26
 800dca2:	bf42      	ittt	mi
 800dca4:	6833      	ldrmi	r3, [r6, #0]
 800dca6:	3302      	addmi	r3, #2
 800dca8:	6033      	strmi	r3, [r6, #0]
 800dcaa:	6825      	ldr	r5, [r4, #0]
 800dcac:	f015 0506 	ands.w	r5, r5, #6
 800dcb0:	d106      	bne.n	800dcc0 <_printf_common+0x48>
 800dcb2:	f104 0a19 	add.w	sl, r4, #25
 800dcb6:	68e3      	ldr	r3, [r4, #12]
 800dcb8:	6832      	ldr	r2, [r6, #0]
 800dcba:	1a9b      	subs	r3, r3, r2
 800dcbc:	42ab      	cmp	r3, r5
 800dcbe:	dc26      	bgt.n	800dd0e <_printf_common+0x96>
 800dcc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dcc4:	1e13      	subs	r3, r2, #0
 800dcc6:	6822      	ldr	r2, [r4, #0]
 800dcc8:	bf18      	it	ne
 800dcca:	2301      	movne	r3, #1
 800dccc:	0692      	lsls	r2, r2, #26
 800dcce:	d42b      	bmi.n	800dd28 <_printf_common+0xb0>
 800dcd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcd4:	4649      	mov	r1, r9
 800dcd6:	4638      	mov	r0, r7
 800dcd8:	47c0      	blx	r8
 800dcda:	3001      	adds	r0, #1
 800dcdc:	d01e      	beq.n	800dd1c <_printf_common+0xa4>
 800dcde:	6823      	ldr	r3, [r4, #0]
 800dce0:	6922      	ldr	r2, [r4, #16]
 800dce2:	f003 0306 	and.w	r3, r3, #6
 800dce6:	2b04      	cmp	r3, #4
 800dce8:	bf02      	ittt	eq
 800dcea:	68e5      	ldreq	r5, [r4, #12]
 800dcec:	6833      	ldreq	r3, [r6, #0]
 800dcee:	1aed      	subeq	r5, r5, r3
 800dcf0:	68a3      	ldr	r3, [r4, #8]
 800dcf2:	bf0c      	ite	eq
 800dcf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dcf8:	2500      	movne	r5, #0
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	bfc4      	itt	gt
 800dcfe:	1a9b      	subgt	r3, r3, r2
 800dd00:	18ed      	addgt	r5, r5, r3
 800dd02:	2600      	movs	r6, #0
 800dd04:	341a      	adds	r4, #26
 800dd06:	42b5      	cmp	r5, r6
 800dd08:	d11a      	bne.n	800dd40 <_printf_common+0xc8>
 800dd0a:	2000      	movs	r0, #0
 800dd0c:	e008      	b.n	800dd20 <_printf_common+0xa8>
 800dd0e:	2301      	movs	r3, #1
 800dd10:	4652      	mov	r2, sl
 800dd12:	4649      	mov	r1, r9
 800dd14:	4638      	mov	r0, r7
 800dd16:	47c0      	blx	r8
 800dd18:	3001      	adds	r0, #1
 800dd1a:	d103      	bne.n	800dd24 <_printf_common+0xac>
 800dd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd24:	3501      	adds	r5, #1
 800dd26:	e7c6      	b.n	800dcb6 <_printf_common+0x3e>
 800dd28:	18e1      	adds	r1, r4, r3
 800dd2a:	1c5a      	adds	r2, r3, #1
 800dd2c:	2030      	movs	r0, #48	; 0x30
 800dd2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd32:	4422      	add	r2, r4
 800dd34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd3c:	3302      	adds	r3, #2
 800dd3e:	e7c7      	b.n	800dcd0 <_printf_common+0x58>
 800dd40:	2301      	movs	r3, #1
 800dd42:	4622      	mov	r2, r4
 800dd44:	4649      	mov	r1, r9
 800dd46:	4638      	mov	r0, r7
 800dd48:	47c0      	blx	r8
 800dd4a:	3001      	adds	r0, #1
 800dd4c:	d0e6      	beq.n	800dd1c <_printf_common+0xa4>
 800dd4e:	3601      	adds	r6, #1
 800dd50:	e7d9      	b.n	800dd06 <_printf_common+0x8e>
	...

0800dd54 <_printf_i>:
 800dd54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd58:	7e0f      	ldrb	r7, [r1, #24]
 800dd5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd5c:	2f78      	cmp	r7, #120	; 0x78
 800dd5e:	4691      	mov	r9, r2
 800dd60:	4680      	mov	r8, r0
 800dd62:	460c      	mov	r4, r1
 800dd64:	469a      	mov	sl, r3
 800dd66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dd6a:	d807      	bhi.n	800dd7c <_printf_i+0x28>
 800dd6c:	2f62      	cmp	r7, #98	; 0x62
 800dd6e:	d80a      	bhi.n	800dd86 <_printf_i+0x32>
 800dd70:	2f00      	cmp	r7, #0
 800dd72:	f000 80d4 	beq.w	800df1e <_printf_i+0x1ca>
 800dd76:	2f58      	cmp	r7, #88	; 0x58
 800dd78:	f000 80c0 	beq.w	800defc <_printf_i+0x1a8>
 800dd7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd84:	e03a      	b.n	800ddfc <_printf_i+0xa8>
 800dd86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd8a:	2b15      	cmp	r3, #21
 800dd8c:	d8f6      	bhi.n	800dd7c <_printf_i+0x28>
 800dd8e:	a101      	add	r1, pc, #4	; (adr r1, 800dd94 <_printf_i+0x40>)
 800dd90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd94:	0800dded 	.word	0x0800dded
 800dd98:	0800de01 	.word	0x0800de01
 800dd9c:	0800dd7d 	.word	0x0800dd7d
 800dda0:	0800dd7d 	.word	0x0800dd7d
 800dda4:	0800dd7d 	.word	0x0800dd7d
 800dda8:	0800dd7d 	.word	0x0800dd7d
 800ddac:	0800de01 	.word	0x0800de01
 800ddb0:	0800dd7d 	.word	0x0800dd7d
 800ddb4:	0800dd7d 	.word	0x0800dd7d
 800ddb8:	0800dd7d 	.word	0x0800dd7d
 800ddbc:	0800dd7d 	.word	0x0800dd7d
 800ddc0:	0800df05 	.word	0x0800df05
 800ddc4:	0800de2d 	.word	0x0800de2d
 800ddc8:	0800debf 	.word	0x0800debf
 800ddcc:	0800dd7d 	.word	0x0800dd7d
 800ddd0:	0800dd7d 	.word	0x0800dd7d
 800ddd4:	0800df27 	.word	0x0800df27
 800ddd8:	0800dd7d 	.word	0x0800dd7d
 800dddc:	0800de2d 	.word	0x0800de2d
 800dde0:	0800dd7d 	.word	0x0800dd7d
 800dde4:	0800dd7d 	.word	0x0800dd7d
 800dde8:	0800dec7 	.word	0x0800dec7
 800ddec:	682b      	ldr	r3, [r5, #0]
 800ddee:	1d1a      	adds	r2, r3, #4
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	602a      	str	r2, [r5, #0]
 800ddf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ddf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e09f      	b.n	800df40 <_printf_i+0x1ec>
 800de00:	6820      	ldr	r0, [r4, #0]
 800de02:	682b      	ldr	r3, [r5, #0]
 800de04:	0607      	lsls	r7, r0, #24
 800de06:	f103 0104 	add.w	r1, r3, #4
 800de0a:	6029      	str	r1, [r5, #0]
 800de0c:	d501      	bpl.n	800de12 <_printf_i+0xbe>
 800de0e:	681e      	ldr	r6, [r3, #0]
 800de10:	e003      	b.n	800de1a <_printf_i+0xc6>
 800de12:	0646      	lsls	r6, r0, #25
 800de14:	d5fb      	bpl.n	800de0e <_printf_i+0xba>
 800de16:	f9b3 6000 	ldrsh.w	r6, [r3]
 800de1a:	2e00      	cmp	r6, #0
 800de1c:	da03      	bge.n	800de26 <_printf_i+0xd2>
 800de1e:	232d      	movs	r3, #45	; 0x2d
 800de20:	4276      	negs	r6, r6
 800de22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de26:	485a      	ldr	r0, [pc, #360]	; (800df90 <_printf_i+0x23c>)
 800de28:	230a      	movs	r3, #10
 800de2a:	e012      	b.n	800de52 <_printf_i+0xfe>
 800de2c:	682b      	ldr	r3, [r5, #0]
 800de2e:	6820      	ldr	r0, [r4, #0]
 800de30:	1d19      	adds	r1, r3, #4
 800de32:	6029      	str	r1, [r5, #0]
 800de34:	0605      	lsls	r5, r0, #24
 800de36:	d501      	bpl.n	800de3c <_printf_i+0xe8>
 800de38:	681e      	ldr	r6, [r3, #0]
 800de3a:	e002      	b.n	800de42 <_printf_i+0xee>
 800de3c:	0641      	lsls	r1, r0, #25
 800de3e:	d5fb      	bpl.n	800de38 <_printf_i+0xe4>
 800de40:	881e      	ldrh	r6, [r3, #0]
 800de42:	4853      	ldr	r0, [pc, #332]	; (800df90 <_printf_i+0x23c>)
 800de44:	2f6f      	cmp	r7, #111	; 0x6f
 800de46:	bf0c      	ite	eq
 800de48:	2308      	moveq	r3, #8
 800de4a:	230a      	movne	r3, #10
 800de4c:	2100      	movs	r1, #0
 800de4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de52:	6865      	ldr	r5, [r4, #4]
 800de54:	60a5      	str	r5, [r4, #8]
 800de56:	2d00      	cmp	r5, #0
 800de58:	bfa2      	ittt	ge
 800de5a:	6821      	ldrge	r1, [r4, #0]
 800de5c:	f021 0104 	bicge.w	r1, r1, #4
 800de60:	6021      	strge	r1, [r4, #0]
 800de62:	b90e      	cbnz	r6, 800de68 <_printf_i+0x114>
 800de64:	2d00      	cmp	r5, #0
 800de66:	d04b      	beq.n	800df00 <_printf_i+0x1ac>
 800de68:	4615      	mov	r5, r2
 800de6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800de6e:	fb03 6711 	mls	r7, r3, r1, r6
 800de72:	5dc7      	ldrb	r7, [r0, r7]
 800de74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800de78:	4637      	mov	r7, r6
 800de7a:	42bb      	cmp	r3, r7
 800de7c:	460e      	mov	r6, r1
 800de7e:	d9f4      	bls.n	800de6a <_printf_i+0x116>
 800de80:	2b08      	cmp	r3, #8
 800de82:	d10b      	bne.n	800de9c <_printf_i+0x148>
 800de84:	6823      	ldr	r3, [r4, #0]
 800de86:	07de      	lsls	r6, r3, #31
 800de88:	d508      	bpl.n	800de9c <_printf_i+0x148>
 800de8a:	6923      	ldr	r3, [r4, #16]
 800de8c:	6861      	ldr	r1, [r4, #4]
 800de8e:	4299      	cmp	r1, r3
 800de90:	bfde      	ittt	le
 800de92:	2330      	movle	r3, #48	; 0x30
 800de94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de9c:	1b52      	subs	r2, r2, r5
 800de9e:	6122      	str	r2, [r4, #16]
 800dea0:	f8cd a000 	str.w	sl, [sp]
 800dea4:	464b      	mov	r3, r9
 800dea6:	aa03      	add	r2, sp, #12
 800dea8:	4621      	mov	r1, r4
 800deaa:	4640      	mov	r0, r8
 800deac:	f7ff fee4 	bl	800dc78 <_printf_common>
 800deb0:	3001      	adds	r0, #1
 800deb2:	d14a      	bne.n	800df4a <_printf_i+0x1f6>
 800deb4:	f04f 30ff 	mov.w	r0, #4294967295
 800deb8:	b004      	add	sp, #16
 800deba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800debe:	6823      	ldr	r3, [r4, #0]
 800dec0:	f043 0320 	orr.w	r3, r3, #32
 800dec4:	6023      	str	r3, [r4, #0]
 800dec6:	4833      	ldr	r0, [pc, #204]	; (800df94 <_printf_i+0x240>)
 800dec8:	2778      	movs	r7, #120	; 0x78
 800deca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dece:	6823      	ldr	r3, [r4, #0]
 800ded0:	6829      	ldr	r1, [r5, #0]
 800ded2:	061f      	lsls	r7, r3, #24
 800ded4:	f851 6b04 	ldr.w	r6, [r1], #4
 800ded8:	d402      	bmi.n	800dee0 <_printf_i+0x18c>
 800deda:	065f      	lsls	r7, r3, #25
 800dedc:	bf48      	it	mi
 800dede:	b2b6      	uxthmi	r6, r6
 800dee0:	07df      	lsls	r7, r3, #31
 800dee2:	bf48      	it	mi
 800dee4:	f043 0320 	orrmi.w	r3, r3, #32
 800dee8:	6029      	str	r1, [r5, #0]
 800deea:	bf48      	it	mi
 800deec:	6023      	strmi	r3, [r4, #0]
 800deee:	b91e      	cbnz	r6, 800def8 <_printf_i+0x1a4>
 800def0:	6823      	ldr	r3, [r4, #0]
 800def2:	f023 0320 	bic.w	r3, r3, #32
 800def6:	6023      	str	r3, [r4, #0]
 800def8:	2310      	movs	r3, #16
 800defa:	e7a7      	b.n	800de4c <_printf_i+0xf8>
 800defc:	4824      	ldr	r0, [pc, #144]	; (800df90 <_printf_i+0x23c>)
 800defe:	e7e4      	b.n	800deca <_printf_i+0x176>
 800df00:	4615      	mov	r5, r2
 800df02:	e7bd      	b.n	800de80 <_printf_i+0x12c>
 800df04:	682b      	ldr	r3, [r5, #0]
 800df06:	6826      	ldr	r6, [r4, #0]
 800df08:	6961      	ldr	r1, [r4, #20]
 800df0a:	1d18      	adds	r0, r3, #4
 800df0c:	6028      	str	r0, [r5, #0]
 800df0e:	0635      	lsls	r5, r6, #24
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	d501      	bpl.n	800df18 <_printf_i+0x1c4>
 800df14:	6019      	str	r1, [r3, #0]
 800df16:	e002      	b.n	800df1e <_printf_i+0x1ca>
 800df18:	0670      	lsls	r0, r6, #25
 800df1a:	d5fb      	bpl.n	800df14 <_printf_i+0x1c0>
 800df1c:	8019      	strh	r1, [r3, #0]
 800df1e:	2300      	movs	r3, #0
 800df20:	6123      	str	r3, [r4, #16]
 800df22:	4615      	mov	r5, r2
 800df24:	e7bc      	b.n	800dea0 <_printf_i+0x14c>
 800df26:	682b      	ldr	r3, [r5, #0]
 800df28:	1d1a      	adds	r2, r3, #4
 800df2a:	602a      	str	r2, [r5, #0]
 800df2c:	681d      	ldr	r5, [r3, #0]
 800df2e:	6862      	ldr	r2, [r4, #4]
 800df30:	2100      	movs	r1, #0
 800df32:	4628      	mov	r0, r5
 800df34:	f7f2 f9bc 	bl	80002b0 <memchr>
 800df38:	b108      	cbz	r0, 800df3e <_printf_i+0x1ea>
 800df3a:	1b40      	subs	r0, r0, r5
 800df3c:	6060      	str	r0, [r4, #4]
 800df3e:	6863      	ldr	r3, [r4, #4]
 800df40:	6123      	str	r3, [r4, #16]
 800df42:	2300      	movs	r3, #0
 800df44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df48:	e7aa      	b.n	800dea0 <_printf_i+0x14c>
 800df4a:	6923      	ldr	r3, [r4, #16]
 800df4c:	462a      	mov	r2, r5
 800df4e:	4649      	mov	r1, r9
 800df50:	4640      	mov	r0, r8
 800df52:	47d0      	blx	sl
 800df54:	3001      	adds	r0, #1
 800df56:	d0ad      	beq.n	800deb4 <_printf_i+0x160>
 800df58:	6823      	ldr	r3, [r4, #0]
 800df5a:	079b      	lsls	r3, r3, #30
 800df5c:	d413      	bmi.n	800df86 <_printf_i+0x232>
 800df5e:	68e0      	ldr	r0, [r4, #12]
 800df60:	9b03      	ldr	r3, [sp, #12]
 800df62:	4298      	cmp	r0, r3
 800df64:	bfb8      	it	lt
 800df66:	4618      	movlt	r0, r3
 800df68:	e7a6      	b.n	800deb8 <_printf_i+0x164>
 800df6a:	2301      	movs	r3, #1
 800df6c:	4632      	mov	r2, r6
 800df6e:	4649      	mov	r1, r9
 800df70:	4640      	mov	r0, r8
 800df72:	47d0      	blx	sl
 800df74:	3001      	adds	r0, #1
 800df76:	d09d      	beq.n	800deb4 <_printf_i+0x160>
 800df78:	3501      	adds	r5, #1
 800df7a:	68e3      	ldr	r3, [r4, #12]
 800df7c:	9903      	ldr	r1, [sp, #12]
 800df7e:	1a5b      	subs	r3, r3, r1
 800df80:	42ab      	cmp	r3, r5
 800df82:	dcf2      	bgt.n	800df6a <_printf_i+0x216>
 800df84:	e7eb      	b.n	800df5e <_printf_i+0x20a>
 800df86:	2500      	movs	r5, #0
 800df88:	f104 0619 	add.w	r6, r4, #25
 800df8c:	e7f5      	b.n	800df7a <_printf_i+0x226>
 800df8e:	bf00      	nop
 800df90:	08011651 	.word	0x08011651
 800df94:	08011662 	.word	0x08011662

0800df98 <std>:
 800df98:	2300      	movs	r3, #0
 800df9a:	b510      	push	{r4, lr}
 800df9c:	4604      	mov	r4, r0
 800df9e:	e9c0 3300 	strd	r3, r3, [r0]
 800dfa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dfa6:	6083      	str	r3, [r0, #8]
 800dfa8:	8181      	strh	r1, [r0, #12]
 800dfaa:	6643      	str	r3, [r0, #100]	; 0x64
 800dfac:	81c2      	strh	r2, [r0, #14]
 800dfae:	6183      	str	r3, [r0, #24]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	2208      	movs	r2, #8
 800dfb4:	305c      	adds	r0, #92	; 0x5c
 800dfb6:	f000 f938 	bl	800e22a <memset>
 800dfba:	4b0d      	ldr	r3, [pc, #52]	; (800dff0 <std+0x58>)
 800dfbc:	6263      	str	r3, [r4, #36]	; 0x24
 800dfbe:	4b0d      	ldr	r3, [pc, #52]	; (800dff4 <std+0x5c>)
 800dfc0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dfc2:	4b0d      	ldr	r3, [pc, #52]	; (800dff8 <std+0x60>)
 800dfc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dfc6:	4b0d      	ldr	r3, [pc, #52]	; (800dffc <std+0x64>)
 800dfc8:	6323      	str	r3, [r4, #48]	; 0x30
 800dfca:	4b0d      	ldr	r3, [pc, #52]	; (800e000 <std+0x68>)
 800dfcc:	6224      	str	r4, [r4, #32]
 800dfce:	429c      	cmp	r4, r3
 800dfd0:	d006      	beq.n	800dfe0 <std+0x48>
 800dfd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800dfd6:	4294      	cmp	r4, r2
 800dfd8:	d002      	beq.n	800dfe0 <std+0x48>
 800dfda:	33d0      	adds	r3, #208	; 0xd0
 800dfdc:	429c      	cmp	r4, r3
 800dfde:	d105      	bne.n	800dfec <std+0x54>
 800dfe0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfe8:	f000 b98a 	b.w	800e300 <__retarget_lock_init_recursive>
 800dfec:	bd10      	pop	{r4, pc}
 800dfee:	bf00      	nop
 800dff0:	0800e185 	.word	0x0800e185
 800dff4:	0800e1a7 	.word	0x0800e1a7
 800dff8:	0800e1df 	.word	0x0800e1df
 800dffc:	0800e203 	.word	0x0800e203
 800e000:	2001a304 	.word	0x2001a304

0800e004 <stdio_exit_handler>:
 800e004:	4a02      	ldr	r2, [pc, #8]	; (800e010 <stdio_exit_handler+0xc>)
 800e006:	4903      	ldr	r1, [pc, #12]	; (800e014 <stdio_exit_handler+0x10>)
 800e008:	4803      	ldr	r0, [pc, #12]	; (800e018 <stdio_exit_handler+0x14>)
 800e00a:	f000 b869 	b.w	800e0e0 <_fwalk_sglue>
 800e00e:	bf00      	nop
 800e010:	2000001c 	.word	0x2000001c
 800e014:	0800fd11 	.word	0x0800fd11
 800e018:	20000194 	.word	0x20000194

0800e01c <cleanup_stdio>:
 800e01c:	6841      	ldr	r1, [r0, #4]
 800e01e:	4b0c      	ldr	r3, [pc, #48]	; (800e050 <cleanup_stdio+0x34>)
 800e020:	4299      	cmp	r1, r3
 800e022:	b510      	push	{r4, lr}
 800e024:	4604      	mov	r4, r0
 800e026:	d001      	beq.n	800e02c <cleanup_stdio+0x10>
 800e028:	f001 fe72 	bl	800fd10 <_fflush_r>
 800e02c:	68a1      	ldr	r1, [r4, #8]
 800e02e:	4b09      	ldr	r3, [pc, #36]	; (800e054 <cleanup_stdio+0x38>)
 800e030:	4299      	cmp	r1, r3
 800e032:	d002      	beq.n	800e03a <cleanup_stdio+0x1e>
 800e034:	4620      	mov	r0, r4
 800e036:	f001 fe6b 	bl	800fd10 <_fflush_r>
 800e03a:	68e1      	ldr	r1, [r4, #12]
 800e03c:	4b06      	ldr	r3, [pc, #24]	; (800e058 <cleanup_stdio+0x3c>)
 800e03e:	4299      	cmp	r1, r3
 800e040:	d004      	beq.n	800e04c <cleanup_stdio+0x30>
 800e042:	4620      	mov	r0, r4
 800e044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e048:	f001 be62 	b.w	800fd10 <_fflush_r>
 800e04c:	bd10      	pop	{r4, pc}
 800e04e:	bf00      	nop
 800e050:	2001a304 	.word	0x2001a304
 800e054:	2001a36c 	.word	0x2001a36c
 800e058:	2001a3d4 	.word	0x2001a3d4

0800e05c <global_stdio_init.part.0>:
 800e05c:	b510      	push	{r4, lr}
 800e05e:	4b0b      	ldr	r3, [pc, #44]	; (800e08c <global_stdio_init.part.0+0x30>)
 800e060:	4c0b      	ldr	r4, [pc, #44]	; (800e090 <global_stdio_init.part.0+0x34>)
 800e062:	4a0c      	ldr	r2, [pc, #48]	; (800e094 <global_stdio_init.part.0+0x38>)
 800e064:	601a      	str	r2, [r3, #0]
 800e066:	4620      	mov	r0, r4
 800e068:	2200      	movs	r2, #0
 800e06a:	2104      	movs	r1, #4
 800e06c:	f7ff ff94 	bl	800df98 <std>
 800e070:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e074:	2201      	movs	r2, #1
 800e076:	2109      	movs	r1, #9
 800e078:	f7ff ff8e 	bl	800df98 <std>
 800e07c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e080:	2202      	movs	r2, #2
 800e082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e086:	2112      	movs	r1, #18
 800e088:	f7ff bf86 	b.w	800df98 <std>
 800e08c:	2001a43c 	.word	0x2001a43c
 800e090:	2001a304 	.word	0x2001a304
 800e094:	0800e005 	.word	0x0800e005

0800e098 <__sfp_lock_acquire>:
 800e098:	4801      	ldr	r0, [pc, #4]	; (800e0a0 <__sfp_lock_acquire+0x8>)
 800e09a:	f000 b932 	b.w	800e302 <__retarget_lock_acquire_recursive>
 800e09e:	bf00      	nop
 800e0a0:	2001a445 	.word	0x2001a445

0800e0a4 <__sfp_lock_release>:
 800e0a4:	4801      	ldr	r0, [pc, #4]	; (800e0ac <__sfp_lock_release+0x8>)
 800e0a6:	f000 b92d 	b.w	800e304 <__retarget_lock_release_recursive>
 800e0aa:	bf00      	nop
 800e0ac:	2001a445 	.word	0x2001a445

0800e0b0 <__sinit>:
 800e0b0:	b510      	push	{r4, lr}
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	f7ff fff0 	bl	800e098 <__sfp_lock_acquire>
 800e0b8:	6a23      	ldr	r3, [r4, #32]
 800e0ba:	b11b      	cbz	r3, 800e0c4 <__sinit+0x14>
 800e0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0c0:	f7ff bff0 	b.w	800e0a4 <__sfp_lock_release>
 800e0c4:	4b04      	ldr	r3, [pc, #16]	; (800e0d8 <__sinit+0x28>)
 800e0c6:	6223      	str	r3, [r4, #32]
 800e0c8:	4b04      	ldr	r3, [pc, #16]	; (800e0dc <__sinit+0x2c>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d1f5      	bne.n	800e0bc <__sinit+0xc>
 800e0d0:	f7ff ffc4 	bl	800e05c <global_stdio_init.part.0>
 800e0d4:	e7f2      	b.n	800e0bc <__sinit+0xc>
 800e0d6:	bf00      	nop
 800e0d8:	0800e01d 	.word	0x0800e01d
 800e0dc:	2001a43c 	.word	0x2001a43c

0800e0e0 <_fwalk_sglue>:
 800e0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0e4:	4607      	mov	r7, r0
 800e0e6:	4688      	mov	r8, r1
 800e0e8:	4614      	mov	r4, r2
 800e0ea:	2600      	movs	r6, #0
 800e0ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e0f0:	f1b9 0901 	subs.w	r9, r9, #1
 800e0f4:	d505      	bpl.n	800e102 <_fwalk_sglue+0x22>
 800e0f6:	6824      	ldr	r4, [r4, #0]
 800e0f8:	2c00      	cmp	r4, #0
 800e0fa:	d1f7      	bne.n	800e0ec <_fwalk_sglue+0xc>
 800e0fc:	4630      	mov	r0, r6
 800e0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e102:	89ab      	ldrh	r3, [r5, #12]
 800e104:	2b01      	cmp	r3, #1
 800e106:	d907      	bls.n	800e118 <_fwalk_sglue+0x38>
 800e108:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e10c:	3301      	adds	r3, #1
 800e10e:	d003      	beq.n	800e118 <_fwalk_sglue+0x38>
 800e110:	4629      	mov	r1, r5
 800e112:	4638      	mov	r0, r7
 800e114:	47c0      	blx	r8
 800e116:	4306      	orrs	r6, r0
 800e118:	3568      	adds	r5, #104	; 0x68
 800e11a:	e7e9      	b.n	800e0f0 <_fwalk_sglue+0x10>

0800e11c <sniprintf>:
 800e11c:	b40c      	push	{r2, r3}
 800e11e:	b530      	push	{r4, r5, lr}
 800e120:	4b17      	ldr	r3, [pc, #92]	; (800e180 <sniprintf+0x64>)
 800e122:	1e0c      	subs	r4, r1, #0
 800e124:	681d      	ldr	r5, [r3, #0]
 800e126:	b09d      	sub	sp, #116	; 0x74
 800e128:	da08      	bge.n	800e13c <sniprintf+0x20>
 800e12a:	238b      	movs	r3, #139	; 0x8b
 800e12c:	602b      	str	r3, [r5, #0]
 800e12e:	f04f 30ff 	mov.w	r0, #4294967295
 800e132:	b01d      	add	sp, #116	; 0x74
 800e134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e138:	b002      	add	sp, #8
 800e13a:	4770      	bx	lr
 800e13c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e140:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e144:	bf14      	ite	ne
 800e146:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e14a:	4623      	moveq	r3, r4
 800e14c:	9304      	str	r3, [sp, #16]
 800e14e:	9307      	str	r3, [sp, #28]
 800e150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e154:	9002      	str	r0, [sp, #8]
 800e156:	9006      	str	r0, [sp, #24]
 800e158:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e15c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e15e:	ab21      	add	r3, sp, #132	; 0x84
 800e160:	a902      	add	r1, sp, #8
 800e162:	4628      	mov	r0, r5
 800e164:	9301      	str	r3, [sp, #4]
 800e166:	f001 fc4f 	bl	800fa08 <_svfiprintf_r>
 800e16a:	1c43      	adds	r3, r0, #1
 800e16c:	bfbc      	itt	lt
 800e16e:	238b      	movlt	r3, #139	; 0x8b
 800e170:	602b      	strlt	r3, [r5, #0]
 800e172:	2c00      	cmp	r4, #0
 800e174:	d0dd      	beq.n	800e132 <sniprintf+0x16>
 800e176:	9b02      	ldr	r3, [sp, #8]
 800e178:	2200      	movs	r2, #0
 800e17a:	701a      	strb	r2, [r3, #0]
 800e17c:	e7d9      	b.n	800e132 <sniprintf+0x16>
 800e17e:	bf00      	nop
 800e180:	200001e0 	.word	0x200001e0

0800e184 <__sread>:
 800e184:	b510      	push	{r4, lr}
 800e186:	460c      	mov	r4, r1
 800e188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e18c:	f000 f87c 	bl	800e288 <_read_r>
 800e190:	2800      	cmp	r0, #0
 800e192:	bfab      	itete	ge
 800e194:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e196:	89a3      	ldrhlt	r3, [r4, #12]
 800e198:	181b      	addge	r3, r3, r0
 800e19a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e19e:	bfac      	ite	ge
 800e1a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e1a2:	81a3      	strhlt	r3, [r4, #12]
 800e1a4:	bd10      	pop	{r4, pc}

0800e1a6 <__swrite>:
 800e1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1aa:	461f      	mov	r7, r3
 800e1ac:	898b      	ldrh	r3, [r1, #12]
 800e1ae:	05db      	lsls	r3, r3, #23
 800e1b0:	4605      	mov	r5, r0
 800e1b2:	460c      	mov	r4, r1
 800e1b4:	4616      	mov	r6, r2
 800e1b6:	d505      	bpl.n	800e1c4 <__swrite+0x1e>
 800e1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1bc:	2302      	movs	r3, #2
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f000 f850 	bl	800e264 <_lseek_r>
 800e1c4:	89a3      	ldrh	r3, [r4, #12]
 800e1c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1ce:	81a3      	strh	r3, [r4, #12]
 800e1d0:	4632      	mov	r2, r6
 800e1d2:	463b      	mov	r3, r7
 800e1d4:	4628      	mov	r0, r5
 800e1d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1da:	f7ff b9d5 	b.w	800d588 <_write_r>

0800e1de <__sseek>:
 800e1de:	b510      	push	{r4, lr}
 800e1e0:	460c      	mov	r4, r1
 800e1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1e6:	f000 f83d 	bl	800e264 <_lseek_r>
 800e1ea:	1c43      	adds	r3, r0, #1
 800e1ec:	89a3      	ldrh	r3, [r4, #12]
 800e1ee:	bf15      	itete	ne
 800e1f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e1f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e1f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e1fa:	81a3      	strheq	r3, [r4, #12]
 800e1fc:	bf18      	it	ne
 800e1fe:	81a3      	strhne	r3, [r4, #12]
 800e200:	bd10      	pop	{r4, pc}

0800e202 <__sclose>:
 800e202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e206:	f000 b81d 	b.w	800e244 <_close_r>

0800e20a <memcmp>:
 800e20a:	b510      	push	{r4, lr}
 800e20c:	3901      	subs	r1, #1
 800e20e:	4402      	add	r2, r0
 800e210:	4290      	cmp	r0, r2
 800e212:	d101      	bne.n	800e218 <memcmp+0xe>
 800e214:	2000      	movs	r0, #0
 800e216:	e005      	b.n	800e224 <memcmp+0x1a>
 800e218:	7803      	ldrb	r3, [r0, #0]
 800e21a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e21e:	42a3      	cmp	r3, r4
 800e220:	d001      	beq.n	800e226 <memcmp+0x1c>
 800e222:	1b18      	subs	r0, r3, r4
 800e224:	bd10      	pop	{r4, pc}
 800e226:	3001      	adds	r0, #1
 800e228:	e7f2      	b.n	800e210 <memcmp+0x6>

0800e22a <memset>:
 800e22a:	4402      	add	r2, r0
 800e22c:	4603      	mov	r3, r0
 800e22e:	4293      	cmp	r3, r2
 800e230:	d100      	bne.n	800e234 <memset+0xa>
 800e232:	4770      	bx	lr
 800e234:	f803 1b01 	strb.w	r1, [r3], #1
 800e238:	e7f9      	b.n	800e22e <memset+0x4>
	...

0800e23c <_localeconv_r>:
 800e23c:	4800      	ldr	r0, [pc, #0]	; (800e240 <_localeconv_r+0x4>)
 800e23e:	4770      	bx	lr
 800e240:	20000118 	.word	0x20000118

0800e244 <_close_r>:
 800e244:	b538      	push	{r3, r4, r5, lr}
 800e246:	4d06      	ldr	r5, [pc, #24]	; (800e260 <_close_r+0x1c>)
 800e248:	2300      	movs	r3, #0
 800e24a:	4604      	mov	r4, r0
 800e24c:	4608      	mov	r0, r1
 800e24e:	602b      	str	r3, [r5, #0]
 800e250:	f7f5 ff73 	bl	800413a <_close>
 800e254:	1c43      	adds	r3, r0, #1
 800e256:	d102      	bne.n	800e25e <_close_r+0x1a>
 800e258:	682b      	ldr	r3, [r5, #0]
 800e25a:	b103      	cbz	r3, 800e25e <_close_r+0x1a>
 800e25c:	6023      	str	r3, [r4, #0]
 800e25e:	bd38      	pop	{r3, r4, r5, pc}
 800e260:	2001a440 	.word	0x2001a440

0800e264 <_lseek_r>:
 800e264:	b538      	push	{r3, r4, r5, lr}
 800e266:	4d07      	ldr	r5, [pc, #28]	; (800e284 <_lseek_r+0x20>)
 800e268:	4604      	mov	r4, r0
 800e26a:	4608      	mov	r0, r1
 800e26c:	4611      	mov	r1, r2
 800e26e:	2200      	movs	r2, #0
 800e270:	602a      	str	r2, [r5, #0]
 800e272:	461a      	mov	r2, r3
 800e274:	f7f5 ff88 	bl	8004188 <_lseek>
 800e278:	1c43      	adds	r3, r0, #1
 800e27a:	d102      	bne.n	800e282 <_lseek_r+0x1e>
 800e27c:	682b      	ldr	r3, [r5, #0]
 800e27e:	b103      	cbz	r3, 800e282 <_lseek_r+0x1e>
 800e280:	6023      	str	r3, [r4, #0]
 800e282:	bd38      	pop	{r3, r4, r5, pc}
 800e284:	2001a440 	.word	0x2001a440

0800e288 <_read_r>:
 800e288:	b538      	push	{r3, r4, r5, lr}
 800e28a:	4d07      	ldr	r5, [pc, #28]	; (800e2a8 <_read_r+0x20>)
 800e28c:	4604      	mov	r4, r0
 800e28e:	4608      	mov	r0, r1
 800e290:	4611      	mov	r1, r2
 800e292:	2200      	movs	r2, #0
 800e294:	602a      	str	r2, [r5, #0]
 800e296:	461a      	mov	r2, r3
 800e298:	f7f5 ff32 	bl	8004100 <_read>
 800e29c:	1c43      	adds	r3, r0, #1
 800e29e:	d102      	bne.n	800e2a6 <_read_r+0x1e>
 800e2a0:	682b      	ldr	r3, [r5, #0]
 800e2a2:	b103      	cbz	r3, 800e2a6 <_read_r+0x1e>
 800e2a4:	6023      	str	r3, [r4, #0]
 800e2a6:	bd38      	pop	{r3, r4, r5, pc}
 800e2a8:	2001a440 	.word	0x2001a440

0800e2ac <__errno>:
 800e2ac:	4b01      	ldr	r3, [pc, #4]	; (800e2b4 <__errno+0x8>)
 800e2ae:	6818      	ldr	r0, [r3, #0]
 800e2b0:	4770      	bx	lr
 800e2b2:	bf00      	nop
 800e2b4:	200001e0 	.word	0x200001e0

0800e2b8 <__libc_init_array>:
 800e2b8:	b570      	push	{r4, r5, r6, lr}
 800e2ba:	4d0d      	ldr	r5, [pc, #52]	; (800e2f0 <__libc_init_array+0x38>)
 800e2bc:	4c0d      	ldr	r4, [pc, #52]	; (800e2f4 <__libc_init_array+0x3c>)
 800e2be:	1b64      	subs	r4, r4, r5
 800e2c0:	10a4      	asrs	r4, r4, #2
 800e2c2:	2600      	movs	r6, #0
 800e2c4:	42a6      	cmp	r6, r4
 800e2c6:	d109      	bne.n	800e2dc <__libc_init_array+0x24>
 800e2c8:	4d0b      	ldr	r5, [pc, #44]	; (800e2f8 <__libc_init_array+0x40>)
 800e2ca:	4c0c      	ldr	r4, [pc, #48]	; (800e2fc <__libc_init_array+0x44>)
 800e2cc:	f003 f828 	bl	8011320 <_init>
 800e2d0:	1b64      	subs	r4, r4, r5
 800e2d2:	10a4      	asrs	r4, r4, #2
 800e2d4:	2600      	movs	r6, #0
 800e2d6:	42a6      	cmp	r6, r4
 800e2d8:	d105      	bne.n	800e2e6 <__libc_init_array+0x2e>
 800e2da:	bd70      	pop	{r4, r5, r6, pc}
 800e2dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2e0:	4798      	blx	r3
 800e2e2:	3601      	adds	r6, #1
 800e2e4:	e7ee      	b.n	800e2c4 <__libc_init_array+0xc>
 800e2e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2ea:	4798      	blx	r3
 800e2ec:	3601      	adds	r6, #1
 800e2ee:	e7f2      	b.n	800e2d6 <__libc_init_array+0x1e>
 800e2f0:	080118f0 	.word	0x080118f0
 800e2f4:	080118f0 	.word	0x080118f0
 800e2f8:	080118f0 	.word	0x080118f0
 800e2fc:	080118f4 	.word	0x080118f4

0800e300 <__retarget_lock_init_recursive>:
 800e300:	4770      	bx	lr

0800e302 <__retarget_lock_acquire_recursive>:
 800e302:	4770      	bx	lr

0800e304 <__retarget_lock_release_recursive>:
 800e304:	4770      	bx	lr

0800e306 <memcpy>:
 800e306:	440a      	add	r2, r1
 800e308:	4291      	cmp	r1, r2
 800e30a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e30e:	d100      	bne.n	800e312 <memcpy+0xc>
 800e310:	4770      	bx	lr
 800e312:	b510      	push	{r4, lr}
 800e314:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e318:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e31c:	4291      	cmp	r1, r2
 800e31e:	d1f9      	bne.n	800e314 <memcpy+0xe>
 800e320:	bd10      	pop	{r4, pc}

0800e322 <quorem>:
 800e322:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e326:	6903      	ldr	r3, [r0, #16]
 800e328:	690c      	ldr	r4, [r1, #16]
 800e32a:	42a3      	cmp	r3, r4
 800e32c:	4607      	mov	r7, r0
 800e32e:	db7e      	blt.n	800e42e <quorem+0x10c>
 800e330:	3c01      	subs	r4, #1
 800e332:	f101 0814 	add.w	r8, r1, #20
 800e336:	f100 0514 	add.w	r5, r0, #20
 800e33a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e33e:	9301      	str	r3, [sp, #4]
 800e340:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e344:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e348:	3301      	adds	r3, #1
 800e34a:	429a      	cmp	r2, r3
 800e34c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e350:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e354:	fbb2 f6f3 	udiv	r6, r2, r3
 800e358:	d331      	bcc.n	800e3be <quorem+0x9c>
 800e35a:	f04f 0e00 	mov.w	lr, #0
 800e35e:	4640      	mov	r0, r8
 800e360:	46ac      	mov	ip, r5
 800e362:	46f2      	mov	sl, lr
 800e364:	f850 2b04 	ldr.w	r2, [r0], #4
 800e368:	b293      	uxth	r3, r2
 800e36a:	fb06 e303 	mla	r3, r6, r3, lr
 800e36e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e372:	0c1a      	lsrs	r2, r3, #16
 800e374:	b29b      	uxth	r3, r3
 800e376:	ebaa 0303 	sub.w	r3, sl, r3
 800e37a:	f8dc a000 	ldr.w	sl, [ip]
 800e37e:	fa13 f38a 	uxtah	r3, r3, sl
 800e382:	fb06 220e 	mla	r2, r6, lr, r2
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	9b00      	ldr	r3, [sp, #0]
 800e38a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e38e:	b292      	uxth	r2, r2
 800e390:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e394:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e398:	f8bd 3000 	ldrh.w	r3, [sp]
 800e39c:	4581      	cmp	r9, r0
 800e39e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3a2:	f84c 3b04 	str.w	r3, [ip], #4
 800e3a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e3aa:	d2db      	bcs.n	800e364 <quorem+0x42>
 800e3ac:	f855 300b 	ldr.w	r3, [r5, fp]
 800e3b0:	b92b      	cbnz	r3, 800e3be <quorem+0x9c>
 800e3b2:	9b01      	ldr	r3, [sp, #4]
 800e3b4:	3b04      	subs	r3, #4
 800e3b6:	429d      	cmp	r5, r3
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	d32c      	bcc.n	800e416 <quorem+0xf4>
 800e3bc:	613c      	str	r4, [r7, #16]
 800e3be:	4638      	mov	r0, r7
 800e3c0:	f001 f9ba 	bl	800f738 <__mcmp>
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	db22      	blt.n	800e40e <quorem+0xec>
 800e3c8:	3601      	adds	r6, #1
 800e3ca:	4629      	mov	r1, r5
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	f858 2b04 	ldr.w	r2, [r8], #4
 800e3d2:	f8d1 c000 	ldr.w	ip, [r1]
 800e3d6:	b293      	uxth	r3, r2
 800e3d8:	1ac3      	subs	r3, r0, r3
 800e3da:	0c12      	lsrs	r2, r2, #16
 800e3dc:	fa13 f38c 	uxtah	r3, r3, ip
 800e3e0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e3e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3ee:	45c1      	cmp	r9, r8
 800e3f0:	f841 3b04 	str.w	r3, [r1], #4
 800e3f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e3f8:	d2e9      	bcs.n	800e3ce <quorem+0xac>
 800e3fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e402:	b922      	cbnz	r2, 800e40e <quorem+0xec>
 800e404:	3b04      	subs	r3, #4
 800e406:	429d      	cmp	r5, r3
 800e408:	461a      	mov	r2, r3
 800e40a:	d30a      	bcc.n	800e422 <quorem+0x100>
 800e40c:	613c      	str	r4, [r7, #16]
 800e40e:	4630      	mov	r0, r6
 800e410:	b003      	add	sp, #12
 800e412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e416:	6812      	ldr	r2, [r2, #0]
 800e418:	3b04      	subs	r3, #4
 800e41a:	2a00      	cmp	r2, #0
 800e41c:	d1ce      	bne.n	800e3bc <quorem+0x9a>
 800e41e:	3c01      	subs	r4, #1
 800e420:	e7c9      	b.n	800e3b6 <quorem+0x94>
 800e422:	6812      	ldr	r2, [r2, #0]
 800e424:	3b04      	subs	r3, #4
 800e426:	2a00      	cmp	r2, #0
 800e428:	d1f0      	bne.n	800e40c <quorem+0xea>
 800e42a:	3c01      	subs	r4, #1
 800e42c:	e7eb      	b.n	800e406 <quorem+0xe4>
 800e42e:	2000      	movs	r0, #0
 800e430:	e7ee      	b.n	800e410 <quorem+0xee>
 800e432:	0000      	movs	r0, r0
 800e434:	0000      	movs	r0, r0
	...

0800e438 <_dtoa_r>:
 800e438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43c:	ed2d 8b04 	vpush	{d8-d9}
 800e440:	69c5      	ldr	r5, [r0, #28]
 800e442:	b093      	sub	sp, #76	; 0x4c
 800e444:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e448:	ec57 6b10 	vmov	r6, r7, d0
 800e44c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e450:	9107      	str	r1, [sp, #28]
 800e452:	4604      	mov	r4, r0
 800e454:	920a      	str	r2, [sp, #40]	; 0x28
 800e456:	930d      	str	r3, [sp, #52]	; 0x34
 800e458:	b975      	cbnz	r5, 800e478 <_dtoa_r+0x40>
 800e45a:	2010      	movs	r0, #16
 800e45c:	f000 fe2a 	bl	800f0b4 <malloc>
 800e460:	4602      	mov	r2, r0
 800e462:	61e0      	str	r0, [r4, #28]
 800e464:	b920      	cbnz	r0, 800e470 <_dtoa_r+0x38>
 800e466:	4bae      	ldr	r3, [pc, #696]	; (800e720 <_dtoa_r+0x2e8>)
 800e468:	21ef      	movs	r1, #239	; 0xef
 800e46a:	48ae      	ldr	r0, [pc, #696]	; (800e724 <_dtoa_r+0x2ec>)
 800e46c:	f001 fca2 	bl	800fdb4 <__assert_func>
 800e470:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e474:	6005      	str	r5, [r0, #0]
 800e476:	60c5      	str	r5, [r0, #12]
 800e478:	69e3      	ldr	r3, [r4, #28]
 800e47a:	6819      	ldr	r1, [r3, #0]
 800e47c:	b151      	cbz	r1, 800e494 <_dtoa_r+0x5c>
 800e47e:	685a      	ldr	r2, [r3, #4]
 800e480:	604a      	str	r2, [r1, #4]
 800e482:	2301      	movs	r3, #1
 800e484:	4093      	lsls	r3, r2
 800e486:	608b      	str	r3, [r1, #8]
 800e488:	4620      	mov	r0, r4
 800e48a:	f000 ff19 	bl	800f2c0 <_Bfree>
 800e48e:	69e3      	ldr	r3, [r4, #28]
 800e490:	2200      	movs	r2, #0
 800e492:	601a      	str	r2, [r3, #0]
 800e494:	1e3b      	subs	r3, r7, #0
 800e496:	bfbb      	ittet	lt
 800e498:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e49c:	9303      	strlt	r3, [sp, #12]
 800e49e:	2300      	movge	r3, #0
 800e4a0:	2201      	movlt	r2, #1
 800e4a2:	bfac      	ite	ge
 800e4a4:	f8c8 3000 	strge.w	r3, [r8]
 800e4a8:	f8c8 2000 	strlt.w	r2, [r8]
 800e4ac:	4b9e      	ldr	r3, [pc, #632]	; (800e728 <_dtoa_r+0x2f0>)
 800e4ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e4b2:	ea33 0308 	bics.w	r3, r3, r8
 800e4b6:	d11b      	bne.n	800e4f0 <_dtoa_r+0xb8>
 800e4b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800e4be:	6013      	str	r3, [r2, #0]
 800e4c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e4c4:	4333      	orrs	r3, r6
 800e4c6:	f000 8593 	beq.w	800eff0 <_dtoa_r+0xbb8>
 800e4ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4cc:	b963      	cbnz	r3, 800e4e8 <_dtoa_r+0xb0>
 800e4ce:	4b97      	ldr	r3, [pc, #604]	; (800e72c <_dtoa_r+0x2f4>)
 800e4d0:	e027      	b.n	800e522 <_dtoa_r+0xea>
 800e4d2:	4b97      	ldr	r3, [pc, #604]	; (800e730 <_dtoa_r+0x2f8>)
 800e4d4:	9300      	str	r3, [sp, #0]
 800e4d6:	3308      	adds	r3, #8
 800e4d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e4da:	6013      	str	r3, [r2, #0]
 800e4dc:	9800      	ldr	r0, [sp, #0]
 800e4de:	b013      	add	sp, #76	; 0x4c
 800e4e0:	ecbd 8b04 	vpop	{d8-d9}
 800e4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e8:	4b90      	ldr	r3, [pc, #576]	; (800e72c <_dtoa_r+0x2f4>)
 800e4ea:	9300      	str	r3, [sp, #0]
 800e4ec:	3303      	adds	r3, #3
 800e4ee:	e7f3      	b.n	800e4d8 <_dtoa_r+0xa0>
 800e4f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	ec51 0b17 	vmov	r0, r1, d7
 800e4fa:	eeb0 8a47 	vmov.f32	s16, s14
 800e4fe:	eef0 8a67 	vmov.f32	s17, s15
 800e502:	2300      	movs	r3, #0
 800e504:	f7f2 fb50 	bl	8000ba8 <__aeabi_dcmpeq>
 800e508:	4681      	mov	r9, r0
 800e50a:	b160      	cbz	r0, 800e526 <_dtoa_r+0xee>
 800e50c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e50e:	2301      	movs	r3, #1
 800e510:	6013      	str	r3, [r2, #0]
 800e512:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e514:	2b00      	cmp	r3, #0
 800e516:	f000 8568 	beq.w	800efea <_dtoa_r+0xbb2>
 800e51a:	4b86      	ldr	r3, [pc, #536]	; (800e734 <_dtoa_r+0x2fc>)
 800e51c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e51e:	6013      	str	r3, [r2, #0]
 800e520:	3b01      	subs	r3, #1
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	e7da      	b.n	800e4dc <_dtoa_r+0xa4>
 800e526:	aa10      	add	r2, sp, #64	; 0x40
 800e528:	a911      	add	r1, sp, #68	; 0x44
 800e52a:	4620      	mov	r0, r4
 800e52c:	eeb0 0a48 	vmov.f32	s0, s16
 800e530:	eef0 0a68 	vmov.f32	s1, s17
 800e534:	f001 f9a6 	bl	800f884 <__d2b>
 800e538:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e53c:	4682      	mov	sl, r0
 800e53e:	2d00      	cmp	r5, #0
 800e540:	d07f      	beq.n	800e642 <_dtoa_r+0x20a>
 800e542:	ee18 3a90 	vmov	r3, s17
 800e546:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e54a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e54e:	ec51 0b18 	vmov	r0, r1, d8
 800e552:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e556:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e55a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e55e:	4619      	mov	r1, r3
 800e560:	2200      	movs	r2, #0
 800e562:	4b75      	ldr	r3, [pc, #468]	; (800e738 <_dtoa_r+0x300>)
 800e564:	f7f1 ff00 	bl	8000368 <__aeabi_dsub>
 800e568:	a367      	add	r3, pc, #412	; (adr r3, 800e708 <_dtoa_r+0x2d0>)
 800e56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56e:	f7f2 f8b3 	bl	80006d8 <__aeabi_dmul>
 800e572:	a367      	add	r3, pc, #412	; (adr r3, 800e710 <_dtoa_r+0x2d8>)
 800e574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e578:	f7f1 fef8 	bl	800036c <__adddf3>
 800e57c:	4606      	mov	r6, r0
 800e57e:	4628      	mov	r0, r5
 800e580:	460f      	mov	r7, r1
 800e582:	f7f2 f83f 	bl	8000604 <__aeabi_i2d>
 800e586:	a364      	add	r3, pc, #400	; (adr r3, 800e718 <_dtoa_r+0x2e0>)
 800e588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58c:	f7f2 f8a4 	bl	80006d8 <__aeabi_dmul>
 800e590:	4602      	mov	r2, r0
 800e592:	460b      	mov	r3, r1
 800e594:	4630      	mov	r0, r6
 800e596:	4639      	mov	r1, r7
 800e598:	f7f1 fee8 	bl	800036c <__adddf3>
 800e59c:	4606      	mov	r6, r0
 800e59e:	460f      	mov	r7, r1
 800e5a0:	f7f2 fb4a 	bl	8000c38 <__aeabi_d2iz>
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	4683      	mov	fp, r0
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	4639      	mov	r1, r7
 800e5ae:	f7f2 fb05 	bl	8000bbc <__aeabi_dcmplt>
 800e5b2:	b148      	cbz	r0, 800e5c8 <_dtoa_r+0x190>
 800e5b4:	4658      	mov	r0, fp
 800e5b6:	f7f2 f825 	bl	8000604 <__aeabi_i2d>
 800e5ba:	4632      	mov	r2, r6
 800e5bc:	463b      	mov	r3, r7
 800e5be:	f7f2 faf3 	bl	8000ba8 <__aeabi_dcmpeq>
 800e5c2:	b908      	cbnz	r0, 800e5c8 <_dtoa_r+0x190>
 800e5c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e5c8:	f1bb 0f16 	cmp.w	fp, #22
 800e5cc:	d857      	bhi.n	800e67e <_dtoa_r+0x246>
 800e5ce:	4b5b      	ldr	r3, [pc, #364]	; (800e73c <_dtoa_r+0x304>)
 800e5d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d8:	ec51 0b18 	vmov	r0, r1, d8
 800e5dc:	f7f2 faee 	bl	8000bbc <__aeabi_dcmplt>
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	d04e      	beq.n	800e682 <_dtoa_r+0x24a>
 800e5e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	930c      	str	r3, [sp, #48]	; 0x30
 800e5ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5ee:	1b5b      	subs	r3, r3, r5
 800e5f0:	1e5a      	subs	r2, r3, #1
 800e5f2:	bf45      	ittet	mi
 800e5f4:	f1c3 0301 	rsbmi	r3, r3, #1
 800e5f8:	9305      	strmi	r3, [sp, #20]
 800e5fa:	2300      	movpl	r3, #0
 800e5fc:	2300      	movmi	r3, #0
 800e5fe:	9206      	str	r2, [sp, #24]
 800e600:	bf54      	ite	pl
 800e602:	9305      	strpl	r3, [sp, #20]
 800e604:	9306      	strmi	r3, [sp, #24]
 800e606:	f1bb 0f00 	cmp.w	fp, #0
 800e60a:	db3c      	blt.n	800e686 <_dtoa_r+0x24e>
 800e60c:	9b06      	ldr	r3, [sp, #24]
 800e60e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e612:	445b      	add	r3, fp
 800e614:	9306      	str	r3, [sp, #24]
 800e616:	2300      	movs	r3, #0
 800e618:	9308      	str	r3, [sp, #32]
 800e61a:	9b07      	ldr	r3, [sp, #28]
 800e61c:	2b09      	cmp	r3, #9
 800e61e:	d868      	bhi.n	800e6f2 <_dtoa_r+0x2ba>
 800e620:	2b05      	cmp	r3, #5
 800e622:	bfc4      	itt	gt
 800e624:	3b04      	subgt	r3, #4
 800e626:	9307      	strgt	r3, [sp, #28]
 800e628:	9b07      	ldr	r3, [sp, #28]
 800e62a:	f1a3 0302 	sub.w	r3, r3, #2
 800e62e:	bfcc      	ite	gt
 800e630:	2500      	movgt	r5, #0
 800e632:	2501      	movle	r5, #1
 800e634:	2b03      	cmp	r3, #3
 800e636:	f200 8085 	bhi.w	800e744 <_dtoa_r+0x30c>
 800e63a:	e8df f003 	tbb	[pc, r3]
 800e63e:	3b2e      	.short	0x3b2e
 800e640:	5839      	.short	0x5839
 800e642:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e646:	441d      	add	r5, r3
 800e648:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e64c:	2b20      	cmp	r3, #32
 800e64e:	bfc1      	itttt	gt
 800e650:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e654:	fa08 f803 	lslgt.w	r8, r8, r3
 800e658:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e65c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e660:	bfd6      	itet	le
 800e662:	f1c3 0320 	rsble	r3, r3, #32
 800e666:	ea48 0003 	orrgt.w	r0, r8, r3
 800e66a:	fa06 f003 	lslle.w	r0, r6, r3
 800e66e:	f7f1 ffb9 	bl	80005e4 <__aeabi_ui2d>
 800e672:	2201      	movs	r2, #1
 800e674:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e678:	3d01      	subs	r5, #1
 800e67a:	920e      	str	r2, [sp, #56]	; 0x38
 800e67c:	e76f      	b.n	800e55e <_dtoa_r+0x126>
 800e67e:	2301      	movs	r3, #1
 800e680:	e7b3      	b.n	800e5ea <_dtoa_r+0x1b2>
 800e682:	900c      	str	r0, [sp, #48]	; 0x30
 800e684:	e7b2      	b.n	800e5ec <_dtoa_r+0x1b4>
 800e686:	9b05      	ldr	r3, [sp, #20]
 800e688:	eba3 030b 	sub.w	r3, r3, fp
 800e68c:	9305      	str	r3, [sp, #20]
 800e68e:	f1cb 0300 	rsb	r3, fp, #0
 800e692:	9308      	str	r3, [sp, #32]
 800e694:	2300      	movs	r3, #0
 800e696:	930b      	str	r3, [sp, #44]	; 0x2c
 800e698:	e7bf      	b.n	800e61a <_dtoa_r+0x1e2>
 800e69a:	2300      	movs	r3, #0
 800e69c:	9309      	str	r3, [sp, #36]	; 0x24
 800e69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	dc52      	bgt.n	800e74a <_dtoa_r+0x312>
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	9301      	str	r3, [sp, #4]
 800e6a8:	9304      	str	r3, [sp, #16]
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	920a      	str	r2, [sp, #40]	; 0x28
 800e6ae:	e00b      	b.n	800e6c8 <_dtoa_r+0x290>
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e7f3      	b.n	800e69c <_dtoa_r+0x264>
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e6b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6ba:	445b      	add	r3, fp
 800e6bc:	9301      	str	r3, [sp, #4]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	9304      	str	r3, [sp, #16]
 800e6c4:	bfb8      	it	lt
 800e6c6:	2301      	movlt	r3, #1
 800e6c8:	69e0      	ldr	r0, [r4, #28]
 800e6ca:	2100      	movs	r1, #0
 800e6cc:	2204      	movs	r2, #4
 800e6ce:	f102 0614 	add.w	r6, r2, #20
 800e6d2:	429e      	cmp	r6, r3
 800e6d4:	d93d      	bls.n	800e752 <_dtoa_r+0x31a>
 800e6d6:	6041      	str	r1, [r0, #4]
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f000 fdb1 	bl	800f240 <_Balloc>
 800e6de:	9000      	str	r0, [sp, #0]
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	d139      	bne.n	800e758 <_dtoa_r+0x320>
 800e6e4:	4b16      	ldr	r3, [pc, #88]	; (800e740 <_dtoa_r+0x308>)
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	f240 11af 	movw	r1, #431	; 0x1af
 800e6ec:	e6bd      	b.n	800e46a <_dtoa_r+0x32>
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e7e1      	b.n	800e6b6 <_dtoa_r+0x27e>
 800e6f2:	2501      	movs	r5, #1
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	9307      	str	r3, [sp, #28]
 800e6f8:	9509      	str	r5, [sp, #36]	; 0x24
 800e6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e6fe:	9301      	str	r3, [sp, #4]
 800e700:	9304      	str	r3, [sp, #16]
 800e702:	2200      	movs	r2, #0
 800e704:	2312      	movs	r3, #18
 800e706:	e7d1      	b.n	800e6ac <_dtoa_r+0x274>
 800e708:	636f4361 	.word	0x636f4361
 800e70c:	3fd287a7 	.word	0x3fd287a7
 800e710:	8b60c8b3 	.word	0x8b60c8b3
 800e714:	3fc68a28 	.word	0x3fc68a28
 800e718:	509f79fb 	.word	0x509f79fb
 800e71c:	3fd34413 	.word	0x3fd34413
 800e720:	0801168a 	.word	0x0801168a
 800e724:	080116a1 	.word	0x080116a1
 800e728:	7ff00000 	.word	0x7ff00000
 800e72c:	08011686 	.word	0x08011686
 800e730:	0801167d 	.word	0x0801167d
 800e734:	08011650 	.word	0x08011650
 800e738:	3ff80000 	.word	0x3ff80000
 800e73c:	08011790 	.word	0x08011790
 800e740:	080116f9 	.word	0x080116f9
 800e744:	2301      	movs	r3, #1
 800e746:	9309      	str	r3, [sp, #36]	; 0x24
 800e748:	e7d7      	b.n	800e6fa <_dtoa_r+0x2c2>
 800e74a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e74c:	9301      	str	r3, [sp, #4]
 800e74e:	9304      	str	r3, [sp, #16]
 800e750:	e7ba      	b.n	800e6c8 <_dtoa_r+0x290>
 800e752:	3101      	adds	r1, #1
 800e754:	0052      	lsls	r2, r2, #1
 800e756:	e7ba      	b.n	800e6ce <_dtoa_r+0x296>
 800e758:	69e3      	ldr	r3, [r4, #28]
 800e75a:	9a00      	ldr	r2, [sp, #0]
 800e75c:	601a      	str	r2, [r3, #0]
 800e75e:	9b04      	ldr	r3, [sp, #16]
 800e760:	2b0e      	cmp	r3, #14
 800e762:	f200 80a8 	bhi.w	800e8b6 <_dtoa_r+0x47e>
 800e766:	2d00      	cmp	r5, #0
 800e768:	f000 80a5 	beq.w	800e8b6 <_dtoa_r+0x47e>
 800e76c:	f1bb 0f00 	cmp.w	fp, #0
 800e770:	dd38      	ble.n	800e7e4 <_dtoa_r+0x3ac>
 800e772:	4bc0      	ldr	r3, [pc, #768]	; (800ea74 <_dtoa_r+0x63c>)
 800e774:	f00b 020f 	and.w	r2, fp, #15
 800e778:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e77c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e780:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e784:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e788:	d019      	beq.n	800e7be <_dtoa_r+0x386>
 800e78a:	4bbb      	ldr	r3, [pc, #748]	; (800ea78 <_dtoa_r+0x640>)
 800e78c:	ec51 0b18 	vmov	r0, r1, d8
 800e790:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e794:	f7f2 f8ca 	bl	800092c <__aeabi_ddiv>
 800e798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e79c:	f008 080f 	and.w	r8, r8, #15
 800e7a0:	2503      	movs	r5, #3
 800e7a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ea78 <_dtoa_r+0x640>
 800e7a6:	f1b8 0f00 	cmp.w	r8, #0
 800e7aa:	d10a      	bne.n	800e7c2 <_dtoa_r+0x38a>
 800e7ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7b0:	4632      	mov	r2, r6
 800e7b2:	463b      	mov	r3, r7
 800e7b4:	f7f2 f8ba 	bl	800092c <__aeabi_ddiv>
 800e7b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7bc:	e02b      	b.n	800e816 <_dtoa_r+0x3de>
 800e7be:	2502      	movs	r5, #2
 800e7c0:	e7ef      	b.n	800e7a2 <_dtoa_r+0x36a>
 800e7c2:	f018 0f01 	tst.w	r8, #1
 800e7c6:	d008      	beq.n	800e7da <_dtoa_r+0x3a2>
 800e7c8:	4630      	mov	r0, r6
 800e7ca:	4639      	mov	r1, r7
 800e7cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e7d0:	f7f1 ff82 	bl	80006d8 <__aeabi_dmul>
 800e7d4:	3501      	adds	r5, #1
 800e7d6:	4606      	mov	r6, r0
 800e7d8:	460f      	mov	r7, r1
 800e7da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e7de:	f109 0908 	add.w	r9, r9, #8
 800e7e2:	e7e0      	b.n	800e7a6 <_dtoa_r+0x36e>
 800e7e4:	f000 809f 	beq.w	800e926 <_dtoa_r+0x4ee>
 800e7e8:	f1cb 0600 	rsb	r6, fp, #0
 800e7ec:	4ba1      	ldr	r3, [pc, #644]	; (800ea74 <_dtoa_r+0x63c>)
 800e7ee:	4fa2      	ldr	r7, [pc, #648]	; (800ea78 <_dtoa_r+0x640>)
 800e7f0:	f006 020f 	and.w	r2, r6, #15
 800e7f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fc:	ec51 0b18 	vmov	r0, r1, d8
 800e800:	f7f1 ff6a 	bl	80006d8 <__aeabi_dmul>
 800e804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e808:	1136      	asrs	r6, r6, #4
 800e80a:	2300      	movs	r3, #0
 800e80c:	2502      	movs	r5, #2
 800e80e:	2e00      	cmp	r6, #0
 800e810:	d17e      	bne.n	800e910 <_dtoa_r+0x4d8>
 800e812:	2b00      	cmp	r3, #0
 800e814:	d1d0      	bne.n	800e7b8 <_dtoa_r+0x380>
 800e816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e818:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	f000 8084 	beq.w	800e92a <_dtoa_r+0x4f2>
 800e822:	4b96      	ldr	r3, [pc, #600]	; (800ea7c <_dtoa_r+0x644>)
 800e824:	2200      	movs	r2, #0
 800e826:	4640      	mov	r0, r8
 800e828:	4649      	mov	r1, r9
 800e82a:	f7f2 f9c7 	bl	8000bbc <__aeabi_dcmplt>
 800e82e:	2800      	cmp	r0, #0
 800e830:	d07b      	beq.n	800e92a <_dtoa_r+0x4f2>
 800e832:	9b04      	ldr	r3, [sp, #16]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d078      	beq.n	800e92a <_dtoa_r+0x4f2>
 800e838:	9b01      	ldr	r3, [sp, #4]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	dd39      	ble.n	800e8b2 <_dtoa_r+0x47a>
 800e83e:	4b90      	ldr	r3, [pc, #576]	; (800ea80 <_dtoa_r+0x648>)
 800e840:	2200      	movs	r2, #0
 800e842:	4640      	mov	r0, r8
 800e844:	4649      	mov	r1, r9
 800e846:	f7f1 ff47 	bl	80006d8 <__aeabi_dmul>
 800e84a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e84e:	9e01      	ldr	r6, [sp, #4]
 800e850:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e854:	3501      	adds	r5, #1
 800e856:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e85a:	4628      	mov	r0, r5
 800e85c:	f7f1 fed2 	bl	8000604 <__aeabi_i2d>
 800e860:	4642      	mov	r2, r8
 800e862:	464b      	mov	r3, r9
 800e864:	f7f1 ff38 	bl	80006d8 <__aeabi_dmul>
 800e868:	4b86      	ldr	r3, [pc, #536]	; (800ea84 <_dtoa_r+0x64c>)
 800e86a:	2200      	movs	r2, #0
 800e86c:	f7f1 fd7e 	bl	800036c <__adddf3>
 800e870:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e878:	9303      	str	r3, [sp, #12]
 800e87a:	2e00      	cmp	r6, #0
 800e87c:	d158      	bne.n	800e930 <_dtoa_r+0x4f8>
 800e87e:	4b82      	ldr	r3, [pc, #520]	; (800ea88 <_dtoa_r+0x650>)
 800e880:	2200      	movs	r2, #0
 800e882:	4640      	mov	r0, r8
 800e884:	4649      	mov	r1, r9
 800e886:	f7f1 fd6f 	bl	8000368 <__aeabi_dsub>
 800e88a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e88e:	4680      	mov	r8, r0
 800e890:	4689      	mov	r9, r1
 800e892:	f7f2 f9b1 	bl	8000bf8 <__aeabi_dcmpgt>
 800e896:	2800      	cmp	r0, #0
 800e898:	f040 8296 	bne.w	800edc8 <_dtoa_r+0x990>
 800e89c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e8a0:	4640      	mov	r0, r8
 800e8a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8a6:	4649      	mov	r1, r9
 800e8a8:	f7f2 f988 	bl	8000bbc <__aeabi_dcmplt>
 800e8ac:	2800      	cmp	r0, #0
 800e8ae:	f040 8289 	bne.w	800edc4 <_dtoa_r+0x98c>
 800e8b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e8b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f2c0 814e 	blt.w	800eb5a <_dtoa_r+0x722>
 800e8be:	f1bb 0f0e 	cmp.w	fp, #14
 800e8c2:	f300 814a 	bgt.w	800eb5a <_dtoa_r+0x722>
 800e8c6:	4b6b      	ldr	r3, [pc, #428]	; (800ea74 <_dtoa_r+0x63c>)
 800e8c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e8cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	f280 80dc 	bge.w	800ea90 <_dtoa_r+0x658>
 800e8d8:	9b04      	ldr	r3, [sp, #16]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	f300 80d8 	bgt.w	800ea90 <_dtoa_r+0x658>
 800e8e0:	f040 826f 	bne.w	800edc2 <_dtoa_r+0x98a>
 800e8e4:	4b68      	ldr	r3, [pc, #416]	; (800ea88 <_dtoa_r+0x650>)
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	4640      	mov	r0, r8
 800e8ea:	4649      	mov	r1, r9
 800e8ec:	f7f1 fef4 	bl	80006d8 <__aeabi_dmul>
 800e8f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8f4:	f7f2 f976 	bl	8000be4 <__aeabi_dcmpge>
 800e8f8:	9e04      	ldr	r6, [sp, #16]
 800e8fa:	4637      	mov	r7, r6
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	f040 8245 	bne.w	800ed8c <_dtoa_r+0x954>
 800e902:	9d00      	ldr	r5, [sp, #0]
 800e904:	2331      	movs	r3, #49	; 0x31
 800e906:	f805 3b01 	strb.w	r3, [r5], #1
 800e90a:	f10b 0b01 	add.w	fp, fp, #1
 800e90e:	e241      	b.n	800ed94 <_dtoa_r+0x95c>
 800e910:	07f2      	lsls	r2, r6, #31
 800e912:	d505      	bpl.n	800e920 <_dtoa_r+0x4e8>
 800e914:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e918:	f7f1 fede 	bl	80006d8 <__aeabi_dmul>
 800e91c:	3501      	adds	r5, #1
 800e91e:	2301      	movs	r3, #1
 800e920:	1076      	asrs	r6, r6, #1
 800e922:	3708      	adds	r7, #8
 800e924:	e773      	b.n	800e80e <_dtoa_r+0x3d6>
 800e926:	2502      	movs	r5, #2
 800e928:	e775      	b.n	800e816 <_dtoa_r+0x3de>
 800e92a:	9e04      	ldr	r6, [sp, #16]
 800e92c:	465f      	mov	r7, fp
 800e92e:	e792      	b.n	800e856 <_dtoa_r+0x41e>
 800e930:	9900      	ldr	r1, [sp, #0]
 800e932:	4b50      	ldr	r3, [pc, #320]	; (800ea74 <_dtoa_r+0x63c>)
 800e934:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e938:	4431      	add	r1, r6
 800e93a:	9102      	str	r1, [sp, #8]
 800e93c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e93e:	eeb0 9a47 	vmov.f32	s18, s14
 800e942:	eef0 9a67 	vmov.f32	s19, s15
 800e946:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e94a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e94e:	2900      	cmp	r1, #0
 800e950:	d044      	beq.n	800e9dc <_dtoa_r+0x5a4>
 800e952:	494e      	ldr	r1, [pc, #312]	; (800ea8c <_dtoa_r+0x654>)
 800e954:	2000      	movs	r0, #0
 800e956:	f7f1 ffe9 	bl	800092c <__aeabi_ddiv>
 800e95a:	ec53 2b19 	vmov	r2, r3, d9
 800e95e:	f7f1 fd03 	bl	8000368 <__aeabi_dsub>
 800e962:	9d00      	ldr	r5, [sp, #0]
 800e964:	ec41 0b19 	vmov	d9, r0, r1
 800e968:	4649      	mov	r1, r9
 800e96a:	4640      	mov	r0, r8
 800e96c:	f7f2 f964 	bl	8000c38 <__aeabi_d2iz>
 800e970:	4606      	mov	r6, r0
 800e972:	f7f1 fe47 	bl	8000604 <__aeabi_i2d>
 800e976:	4602      	mov	r2, r0
 800e978:	460b      	mov	r3, r1
 800e97a:	4640      	mov	r0, r8
 800e97c:	4649      	mov	r1, r9
 800e97e:	f7f1 fcf3 	bl	8000368 <__aeabi_dsub>
 800e982:	3630      	adds	r6, #48	; 0x30
 800e984:	f805 6b01 	strb.w	r6, [r5], #1
 800e988:	ec53 2b19 	vmov	r2, r3, d9
 800e98c:	4680      	mov	r8, r0
 800e98e:	4689      	mov	r9, r1
 800e990:	f7f2 f914 	bl	8000bbc <__aeabi_dcmplt>
 800e994:	2800      	cmp	r0, #0
 800e996:	d164      	bne.n	800ea62 <_dtoa_r+0x62a>
 800e998:	4642      	mov	r2, r8
 800e99a:	464b      	mov	r3, r9
 800e99c:	4937      	ldr	r1, [pc, #220]	; (800ea7c <_dtoa_r+0x644>)
 800e99e:	2000      	movs	r0, #0
 800e9a0:	f7f1 fce2 	bl	8000368 <__aeabi_dsub>
 800e9a4:	ec53 2b19 	vmov	r2, r3, d9
 800e9a8:	f7f2 f908 	bl	8000bbc <__aeabi_dcmplt>
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	f040 80b6 	bne.w	800eb1e <_dtoa_r+0x6e6>
 800e9b2:	9b02      	ldr	r3, [sp, #8]
 800e9b4:	429d      	cmp	r5, r3
 800e9b6:	f43f af7c 	beq.w	800e8b2 <_dtoa_r+0x47a>
 800e9ba:	4b31      	ldr	r3, [pc, #196]	; (800ea80 <_dtoa_r+0x648>)
 800e9bc:	ec51 0b19 	vmov	r0, r1, d9
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	f7f1 fe89 	bl	80006d8 <__aeabi_dmul>
 800e9c6:	4b2e      	ldr	r3, [pc, #184]	; (800ea80 <_dtoa_r+0x648>)
 800e9c8:	ec41 0b19 	vmov	d9, r0, r1
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	4640      	mov	r0, r8
 800e9d0:	4649      	mov	r1, r9
 800e9d2:	f7f1 fe81 	bl	80006d8 <__aeabi_dmul>
 800e9d6:	4680      	mov	r8, r0
 800e9d8:	4689      	mov	r9, r1
 800e9da:	e7c5      	b.n	800e968 <_dtoa_r+0x530>
 800e9dc:	ec51 0b17 	vmov	r0, r1, d7
 800e9e0:	f7f1 fe7a 	bl	80006d8 <__aeabi_dmul>
 800e9e4:	9b02      	ldr	r3, [sp, #8]
 800e9e6:	9d00      	ldr	r5, [sp, #0]
 800e9e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9ea:	ec41 0b19 	vmov	d9, r0, r1
 800e9ee:	4649      	mov	r1, r9
 800e9f0:	4640      	mov	r0, r8
 800e9f2:	f7f2 f921 	bl	8000c38 <__aeabi_d2iz>
 800e9f6:	4606      	mov	r6, r0
 800e9f8:	f7f1 fe04 	bl	8000604 <__aeabi_i2d>
 800e9fc:	3630      	adds	r6, #48	; 0x30
 800e9fe:	4602      	mov	r2, r0
 800ea00:	460b      	mov	r3, r1
 800ea02:	4640      	mov	r0, r8
 800ea04:	4649      	mov	r1, r9
 800ea06:	f7f1 fcaf 	bl	8000368 <__aeabi_dsub>
 800ea0a:	f805 6b01 	strb.w	r6, [r5], #1
 800ea0e:	9b02      	ldr	r3, [sp, #8]
 800ea10:	429d      	cmp	r5, r3
 800ea12:	4680      	mov	r8, r0
 800ea14:	4689      	mov	r9, r1
 800ea16:	f04f 0200 	mov.w	r2, #0
 800ea1a:	d124      	bne.n	800ea66 <_dtoa_r+0x62e>
 800ea1c:	4b1b      	ldr	r3, [pc, #108]	; (800ea8c <_dtoa_r+0x654>)
 800ea1e:	ec51 0b19 	vmov	r0, r1, d9
 800ea22:	f7f1 fca3 	bl	800036c <__adddf3>
 800ea26:	4602      	mov	r2, r0
 800ea28:	460b      	mov	r3, r1
 800ea2a:	4640      	mov	r0, r8
 800ea2c:	4649      	mov	r1, r9
 800ea2e:	f7f2 f8e3 	bl	8000bf8 <__aeabi_dcmpgt>
 800ea32:	2800      	cmp	r0, #0
 800ea34:	d173      	bne.n	800eb1e <_dtoa_r+0x6e6>
 800ea36:	ec53 2b19 	vmov	r2, r3, d9
 800ea3a:	4914      	ldr	r1, [pc, #80]	; (800ea8c <_dtoa_r+0x654>)
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	f7f1 fc93 	bl	8000368 <__aeabi_dsub>
 800ea42:	4602      	mov	r2, r0
 800ea44:	460b      	mov	r3, r1
 800ea46:	4640      	mov	r0, r8
 800ea48:	4649      	mov	r1, r9
 800ea4a:	f7f2 f8b7 	bl	8000bbc <__aeabi_dcmplt>
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	f43f af2f 	beq.w	800e8b2 <_dtoa_r+0x47a>
 800ea54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ea56:	1e6b      	subs	r3, r5, #1
 800ea58:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ea5e:	2b30      	cmp	r3, #48	; 0x30
 800ea60:	d0f8      	beq.n	800ea54 <_dtoa_r+0x61c>
 800ea62:	46bb      	mov	fp, r7
 800ea64:	e04a      	b.n	800eafc <_dtoa_r+0x6c4>
 800ea66:	4b06      	ldr	r3, [pc, #24]	; (800ea80 <_dtoa_r+0x648>)
 800ea68:	f7f1 fe36 	bl	80006d8 <__aeabi_dmul>
 800ea6c:	4680      	mov	r8, r0
 800ea6e:	4689      	mov	r9, r1
 800ea70:	e7bd      	b.n	800e9ee <_dtoa_r+0x5b6>
 800ea72:	bf00      	nop
 800ea74:	08011790 	.word	0x08011790
 800ea78:	08011768 	.word	0x08011768
 800ea7c:	3ff00000 	.word	0x3ff00000
 800ea80:	40240000 	.word	0x40240000
 800ea84:	401c0000 	.word	0x401c0000
 800ea88:	40140000 	.word	0x40140000
 800ea8c:	3fe00000 	.word	0x3fe00000
 800ea90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ea94:	9d00      	ldr	r5, [sp, #0]
 800ea96:	4642      	mov	r2, r8
 800ea98:	464b      	mov	r3, r9
 800ea9a:	4630      	mov	r0, r6
 800ea9c:	4639      	mov	r1, r7
 800ea9e:	f7f1 ff45 	bl	800092c <__aeabi_ddiv>
 800eaa2:	f7f2 f8c9 	bl	8000c38 <__aeabi_d2iz>
 800eaa6:	9001      	str	r0, [sp, #4]
 800eaa8:	f7f1 fdac 	bl	8000604 <__aeabi_i2d>
 800eaac:	4642      	mov	r2, r8
 800eaae:	464b      	mov	r3, r9
 800eab0:	f7f1 fe12 	bl	80006d8 <__aeabi_dmul>
 800eab4:	4602      	mov	r2, r0
 800eab6:	460b      	mov	r3, r1
 800eab8:	4630      	mov	r0, r6
 800eaba:	4639      	mov	r1, r7
 800eabc:	f7f1 fc54 	bl	8000368 <__aeabi_dsub>
 800eac0:	9e01      	ldr	r6, [sp, #4]
 800eac2:	9f04      	ldr	r7, [sp, #16]
 800eac4:	3630      	adds	r6, #48	; 0x30
 800eac6:	f805 6b01 	strb.w	r6, [r5], #1
 800eaca:	9e00      	ldr	r6, [sp, #0]
 800eacc:	1bae      	subs	r6, r5, r6
 800eace:	42b7      	cmp	r7, r6
 800ead0:	4602      	mov	r2, r0
 800ead2:	460b      	mov	r3, r1
 800ead4:	d134      	bne.n	800eb40 <_dtoa_r+0x708>
 800ead6:	f7f1 fc49 	bl	800036c <__adddf3>
 800eada:	4642      	mov	r2, r8
 800eadc:	464b      	mov	r3, r9
 800eade:	4606      	mov	r6, r0
 800eae0:	460f      	mov	r7, r1
 800eae2:	f7f2 f889 	bl	8000bf8 <__aeabi_dcmpgt>
 800eae6:	b9c8      	cbnz	r0, 800eb1c <_dtoa_r+0x6e4>
 800eae8:	4642      	mov	r2, r8
 800eaea:	464b      	mov	r3, r9
 800eaec:	4630      	mov	r0, r6
 800eaee:	4639      	mov	r1, r7
 800eaf0:	f7f2 f85a 	bl	8000ba8 <__aeabi_dcmpeq>
 800eaf4:	b110      	cbz	r0, 800eafc <_dtoa_r+0x6c4>
 800eaf6:	9b01      	ldr	r3, [sp, #4]
 800eaf8:	07db      	lsls	r3, r3, #31
 800eafa:	d40f      	bmi.n	800eb1c <_dtoa_r+0x6e4>
 800eafc:	4651      	mov	r1, sl
 800eafe:	4620      	mov	r0, r4
 800eb00:	f000 fbde 	bl	800f2c0 <_Bfree>
 800eb04:	2300      	movs	r3, #0
 800eb06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eb08:	702b      	strb	r3, [r5, #0]
 800eb0a:	f10b 0301 	add.w	r3, fp, #1
 800eb0e:	6013      	str	r3, [r2, #0]
 800eb10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	f43f ace2 	beq.w	800e4dc <_dtoa_r+0xa4>
 800eb18:	601d      	str	r5, [r3, #0]
 800eb1a:	e4df      	b.n	800e4dc <_dtoa_r+0xa4>
 800eb1c:	465f      	mov	r7, fp
 800eb1e:	462b      	mov	r3, r5
 800eb20:	461d      	mov	r5, r3
 800eb22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb26:	2a39      	cmp	r2, #57	; 0x39
 800eb28:	d106      	bne.n	800eb38 <_dtoa_r+0x700>
 800eb2a:	9a00      	ldr	r2, [sp, #0]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d1f7      	bne.n	800eb20 <_dtoa_r+0x6e8>
 800eb30:	9900      	ldr	r1, [sp, #0]
 800eb32:	2230      	movs	r2, #48	; 0x30
 800eb34:	3701      	adds	r7, #1
 800eb36:	700a      	strb	r2, [r1, #0]
 800eb38:	781a      	ldrb	r2, [r3, #0]
 800eb3a:	3201      	adds	r2, #1
 800eb3c:	701a      	strb	r2, [r3, #0]
 800eb3e:	e790      	b.n	800ea62 <_dtoa_r+0x62a>
 800eb40:	4ba3      	ldr	r3, [pc, #652]	; (800edd0 <_dtoa_r+0x998>)
 800eb42:	2200      	movs	r2, #0
 800eb44:	f7f1 fdc8 	bl	80006d8 <__aeabi_dmul>
 800eb48:	2200      	movs	r2, #0
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	4606      	mov	r6, r0
 800eb4e:	460f      	mov	r7, r1
 800eb50:	f7f2 f82a 	bl	8000ba8 <__aeabi_dcmpeq>
 800eb54:	2800      	cmp	r0, #0
 800eb56:	d09e      	beq.n	800ea96 <_dtoa_r+0x65e>
 800eb58:	e7d0      	b.n	800eafc <_dtoa_r+0x6c4>
 800eb5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb5c:	2a00      	cmp	r2, #0
 800eb5e:	f000 80ca 	beq.w	800ecf6 <_dtoa_r+0x8be>
 800eb62:	9a07      	ldr	r2, [sp, #28]
 800eb64:	2a01      	cmp	r2, #1
 800eb66:	f300 80ad 	bgt.w	800ecc4 <_dtoa_r+0x88c>
 800eb6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb6c:	2a00      	cmp	r2, #0
 800eb6e:	f000 80a5 	beq.w	800ecbc <_dtoa_r+0x884>
 800eb72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eb76:	9e08      	ldr	r6, [sp, #32]
 800eb78:	9d05      	ldr	r5, [sp, #20]
 800eb7a:	9a05      	ldr	r2, [sp, #20]
 800eb7c:	441a      	add	r2, r3
 800eb7e:	9205      	str	r2, [sp, #20]
 800eb80:	9a06      	ldr	r2, [sp, #24]
 800eb82:	2101      	movs	r1, #1
 800eb84:	441a      	add	r2, r3
 800eb86:	4620      	mov	r0, r4
 800eb88:	9206      	str	r2, [sp, #24]
 800eb8a:	f000 fc4f 	bl	800f42c <__i2b>
 800eb8e:	4607      	mov	r7, r0
 800eb90:	b165      	cbz	r5, 800ebac <_dtoa_r+0x774>
 800eb92:	9b06      	ldr	r3, [sp, #24]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	dd09      	ble.n	800ebac <_dtoa_r+0x774>
 800eb98:	42ab      	cmp	r3, r5
 800eb9a:	9a05      	ldr	r2, [sp, #20]
 800eb9c:	bfa8      	it	ge
 800eb9e:	462b      	movge	r3, r5
 800eba0:	1ad2      	subs	r2, r2, r3
 800eba2:	9205      	str	r2, [sp, #20]
 800eba4:	9a06      	ldr	r2, [sp, #24]
 800eba6:	1aed      	subs	r5, r5, r3
 800eba8:	1ad3      	subs	r3, r2, r3
 800ebaa:	9306      	str	r3, [sp, #24]
 800ebac:	9b08      	ldr	r3, [sp, #32]
 800ebae:	b1f3      	cbz	r3, 800ebee <_dtoa_r+0x7b6>
 800ebb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	f000 80a3 	beq.w	800ecfe <_dtoa_r+0x8c6>
 800ebb8:	2e00      	cmp	r6, #0
 800ebba:	dd10      	ble.n	800ebde <_dtoa_r+0x7a6>
 800ebbc:	4639      	mov	r1, r7
 800ebbe:	4632      	mov	r2, r6
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f000 fcf3 	bl	800f5ac <__pow5mult>
 800ebc6:	4652      	mov	r2, sl
 800ebc8:	4601      	mov	r1, r0
 800ebca:	4607      	mov	r7, r0
 800ebcc:	4620      	mov	r0, r4
 800ebce:	f000 fc43 	bl	800f458 <__multiply>
 800ebd2:	4651      	mov	r1, sl
 800ebd4:	4680      	mov	r8, r0
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f000 fb72 	bl	800f2c0 <_Bfree>
 800ebdc:	46c2      	mov	sl, r8
 800ebde:	9b08      	ldr	r3, [sp, #32]
 800ebe0:	1b9a      	subs	r2, r3, r6
 800ebe2:	d004      	beq.n	800ebee <_dtoa_r+0x7b6>
 800ebe4:	4651      	mov	r1, sl
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f000 fce0 	bl	800f5ac <__pow5mult>
 800ebec:	4682      	mov	sl, r0
 800ebee:	2101      	movs	r1, #1
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	f000 fc1b 	bl	800f42c <__i2b>
 800ebf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	4606      	mov	r6, r0
 800ebfc:	f340 8081 	ble.w	800ed02 <_dtoa_r+0x8ca>
 800ec00:	461a      	mov	r2, r3
 800ec02:	4601      	mov	r1, r0
 800ec04:	4620      	mov	r0, r4
 800ec06:	f000 fcd1 	bl	800f5ac <__pow5mult>
 800ec0a:	9b07      	ldr	r3, [sp, #28]
 800ec0c:	2b01      	cmp	r3, #1
 800ec0e:	4606      	mov	r6, r0
 800ec10:	dd7a      	ble.n	800ed08 <_dtoa_r+0x8d0>
 800ec12:	f04f 0800 	mov.w	r8, #0
 800ec16:	6933      	ldr	r3, [r6, #16]
 800ec18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ec1c:	6918      	ldr	r0, [r3, #16]
 800ec1e:	f000 fbb7 	bl	800f390 <__hi0bits>
 800ec22:	f1c0 0020 	rsb	r0, r0, #32
 800ec26:	9b06      	ldr	r3, [sp, #24]
 800ec28:	4418      	add	r0, r3
 800ec2a:	f010 001f 	ands.w	r0, r0, #31
 800ec2e:	f000 8094 	beq.w	800ed5a <_dtoa_r+0x922>
 800ec32:	f1c0 0320 	rsb	r3, r0, #32
 800ec36:	2b04      	cmp	r3, #4
 800ec38:	f340 8085 	ble.w	800ed46 <_dtoa_r+0x90e>
 800ec3c:	9b05      	ldr	r3, [sp, #20]
 800ec3e:	f1c0 001c 	rsb	r0, r0, #28
 800ec42:	4403      	add	r3, r0
 800ec44:	9305      	str	r3, [sp, #20]
 800ec46:	9b06      	ldr	r3, [sp, #24]
 800ec48:	4403      	add	r3, r0
 800ec4a:	4405      	add	r5, r0
 800ec4c:	9306      	str	r3, [sp, #24]
 800ec4e:	9b05      	ldr	r3, [sp, #20]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	dd05      	ble.n	800ec60 <_dtoa_r+0x828>
 800ec54:	4651      	mov	r1, sl
 800ec56:	461a      	mov	r2, r3
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f000 fd01 	bl	800f660 <__lshift>
 800ec5e:	4682      	mov	sl, r0
 800ec60:	9b06      	ldr	r3, [sp, #24]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	dd05      	ble.n	800ec72 <_dtoa_r+0x83a>
 800ec66:	4631      	mov	r1, r6
 800ec68:	461a      	mov	r2, r3
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f000 fcf8 	bl	800f660 <__lshift>
 800ec70:	4606      	mov	r6, r0
 800ec72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d072      	beq.n	800ed5e <_dtoa_r+0x926>
 800ec78:	4631      	mov	r1, r6
 800ec7a:	4650      	mov	r0, sl
 800ec7c:	f000 fd5c 	bl	800f738 <__mcmp>
 800ec80:	2800      	cmp	r0, #0
 800ec82:	da6c      	bge.n	800ed5e <_dtoa_r+0x926>
 800ec84:	2300      	movs	r3, #0
 800ec86:	4651      	mov	r1, sl
 800ec88:	220a      	movs	r2, #10
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	f000 fb3a 	bl	800f304 <__multadd>
 800ec90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec92:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ec96:	4682      	mov	sl, r0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	f000 81b0 	beq.w	800effe <_dtoa_r+0xbc6>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	4639      	mov	r1, r7
 800eca2:	220a      	movs	r2, #10
 800eca4:	4620      	mov	r0, r4
 800eca6:	f000 fb2d 	bl	800f304 <__multadd>
 800ecaa:	9b01      	ldr	r3, [sp, #4]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	4607      	mov	r7, r0
 800ecb0:	f300 8096 	bgt.w	800ede0 <_dtoa_r+0x9a8>
 800ecb4:	9b07      	ldr	r3, [sp, #28]
 800ecb6:	2b02      	cmp	r3, #2
 800ecb8:	dc59      	bgt.n	800ed6e <_dtoa_r+0x936>
 800ecba:	e091      	b.n	800ede0 <_dtoa_r+0x9a8>
 800ecbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ecc2:	e758      	b.n	800eb76 <_dtoa_r+0x73e>
 800ecc4:	9b04      	ldr	r3, [sp, #16]
 800ecc6:	1e5e      	subs	r6, r3, #1
 800ecc8:	9b08      	ldr	r3, [sp, #32]
 800ecca:	42b3      	cmp	r3, r6
 800eccc:	bfbf      	itttt	lt
 800ecce:	9b08      	ldrlt	r3, [sp, #32]
 800ecd0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ecd2:	9608      	strlt	r6, [sp, #32]
 800ecd4:	1af3      	sublt	r3, r6, r3
 800ecd6:	bfb4      	ite	lt
 800ecd8:	18d2      	addlt	r2, r2, r3
 800ecda:	1b9e      	subge	r6, r3, r6
 800ecdc:	9b04      	ldr	r3, [sp, #16]
 800ecde:	bfbc      	itt	lt
 800ece0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ece2:	2600      	movlt	r6, #0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	bfb7      	itett	lt
 800ece8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ecec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ecf0:	1a9d      	sublt	r5, r3, r2
 800ecf2:	2300      	movlt	r3, #0
 800ecf4:	e741      	b.n	800eb7a <_dtoa_r+0x742>
 800ecf6:	9e08      	ldr	r6, [sp, #32]
 800ecf8:	9d05      	ldr	r5, [sp, #20]
 800ecfa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ecfc:	e748      	b.n	800eb90 <_dtoa_r+0x758>
 800ecfe:	9a08      	ldr	r2, [sp, #32]
 800ed00:	e770      	b.n	800ebe4 <_dtoa_r+0x7ac>
 800ed02:	9b07      	ldr	r3, [sp, #28]
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	dc19      	bgt.n	800ed3c <_dtoa_r+0x904>
 800ed08:	9b02      	ldr	r3, [sp, #8]
 800ed0a:	b9bb      	cbnz	r3, 800ed3c <_dtoa_r+0x904>
 800ed0c:	9b03      	ldr	r3, [sp, #12]
 800ed0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed12:	b99b      	cbnz	r3, 800ed3c <_dtoa_r+0x904>
 800ed14:	9b03      	ldr	r3, [sp, #12]
 800ed16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed1a:	0d1b      	lsrs	r3, r3, #20
 800ed1c:	051b      	lsls	r3, r3, #20
 800ed1e:	b183      	cbz	r3, 800ed42 <_dtoa_r+0x90a>
 800ed20:	9b05      	ldr	r3, [sp, #20]
 800ed22:	3301      	adds	r3, #1
 800ed24:	9305      	str	r3, [sp, #20]
 800ed26:	9b06      	ldr	r3, [sp, #24]
 800ed28:	3301      	adds	r3, #1
 800ed2a:	9306      	str	r3, [sp, #24]
 800ed2c:	f04f 0801 	mov.w	r8, #1
 800ed30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	f47f af6f 	bne.w	800ec16 <_dtoa_r+0x7de>
 800ed38:	2001      	movs	r0, #1
 800ed3a:	e774      	b.n	800ec26 <_dtoa_r+0x7ee>
 800ed3c:	f04f 0800 	mov.w	r8, #0
 800ed40:	e7f6      	b.n	800ed30 <_dtoa_r+0x8f8>
 800ed42:	4698      	mov	r8, r3
 800ed44:	e7f4      	b.n	800ed30 <_dtoa_r+0x8f8>
 800ed46:	d082      	beq.n	800ec4e <_dtoa_r+0x816>
 800ed48:	9a05      	ldr	r2, [sp, #20]
 800ed4a:	331c      	adds	r3, #28
 800ed4c:	441a      	add	r2, r3
 800ed4e:	9205      	str	r2, [sp, #20]
 800ed50:	9a06      	ldr	r2, [sp, #24]
 800ed52:	441a      	add	r2, r3
 800ed54:	441d      	add	r5, r3
 800ed56:	9206      	str	r2, [sp, #24]
 800ed58:	e779      	b.n	800ec4e <_dtoa_r+0x816>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	e7f4      	b.n	800ed48 <_dtoa_r+0x910>
 800ed5e:	9b04      	ldr	r3, [sp, #16]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	dc37      	bgt.n	800edd4 <_dtoa_r+0x99c>
 800ed64:	9b07      	ldr	r3, [sp, #28]
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	dd34      	ble.n	800edd4 <_dtoa_r+0x99c>
 800ed6a:	9b04      	ldr	r3, [sp, #16]
 800ed6c:	9301      	str	r3, [sp, #4]
 800ed6e:	9b01      	ldr	r3, [sp, #4]
 800ed70:	b963      	cbnz	r3, 800ed8c <_dtoa_r+0x954>
 800ed72:	4631      	mov	r1, r6
 800ed74:	2205      	movs	r2, #5
 800ed76:	4620      	mov	r0, r4
 800ed78:	f000 fac4 	bl	800f304 <__multadd>
 800ed7c:	4601      	mov	r1, r0
 800ed7e:	4606      	mov	r6, r0
 800ed80:	4650      	mov	r0, sl
 800ed82:	f000 fcd9 	bl	800f738 <__mcmp>
 800ed86:	2800      	cmp	r0, #0
 800ed88:	f73f adbb 	bgt.w	800e902 <_dtoa_r+0x4ca>
 800ed8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed8e:	9d00      	ldr	r5, [sp, #0]
 800ed90:	ea6f 0b03 	mvn.w	fp, r3
 800ed94:	f04f 0800 	mov.w	r8, #0
 800ed98:	4631      	mov	r1, r6
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	f000 fa90 	bl	800f2c0 <_Bfree>
 800eda0:	2f00      	cmp	r7, #0
 800eda2:	f43f aeab 	beq.w	800eafc <_dtoa_r+0x6c4>
 800eda6:	f1b8 0f00 	cmp.w	r8, #0
 800edaa:	d005      	beq.n	800edb8 <_dtoa_r+0x980>
 800edac:	45b8      	cmp	r8, r7
 800edae:	d003      	beq.n	800edb8 <_dtoa_r+0x980>
 800edb0:	4641      	mov	r1, r8
 800edb2:	4620      	mov	r0, r4
 800edb4:	f000 fa84 	bl	800f2c0 <_Bfree>
 800edb8:	4639      	mov	r1, r7
 800edba:	4620      	mov	r0, r4
 800edbc:	f000 fa80 	bl	800f2c0 <_Bfree>
 800edc0:	e69c      	b.n	800eafc <_dtoa_r+0x6c4>
 800edc2:	2600      	movs	r6, #0
 800edc4:	4637      	mov	r7, r6
 800edc6:	e7e1      	b.n	800ed8c <_dtoa_r+0x954>
 800edc8:	46bb      	mov	fp, r7
 800edca:	4637      	mov	r7, r6
 800edcc:	e599      	b.n	800e902 <_dtoa_r+0x4ca>
 800edce:	bf00      	nop
 800edd0:	40240000 	.word	0x40240000
 800edd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	f000 80c8 	beq.w	800ef6c <_dtoa_r+0xb34>
 800eddc:	9b04      	ldr	r3, [sp, #16]
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	2d00      	cmp	r5, #0
 800ede2:	dd05      	ble.n	800edf0 <_dtoa_r+0x9b8>
 800ede4:	4639      	mov	r1, r7
 800ede6:	462a      	mov	r2, r5
 800ede8:	4620      	mov	r0, r4
 800edea:	f000 fc39 	bl	800f660 <__lshift>
 800edee:	4607      	mov	r7, r0
 800edf0:	f1b8 0f00 	cmp.w	r8, #0
 800edf4:	d05b      	beq.n	800eeae <_dtoa_r+0xa76>
 800edf6:	6879      	ldr	r1, [r7, #4]
 800edf8:	4620      	mov	r0, r4
 800edfa:	f000 fa21 	bl	800f240 <_Balloc>
 800edfe:	4605      	mov	r5, r0
 800ee00:	b928      	cbnz	r0, 800ee0e <_dtoa_r+0x9d6>
 800ee02:	4b83      	ldr	r3, [pc, #524]	; (800f010 <_dtoa_r+0xbd8>)
 800ee04:	4602      	mov	r2, r0
 800ee06:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ee0a:	f7ff bb2e 	b.w	800e46a <_dtoa_r+0x32>
 800ee0e:	693a      	ldr	r2, [r7, #16]
 800ee10:	3202      	adds	r2, #2
 800ee12:	0092      	lsls	r2, r2, #2
 800ee14:	f107 010c 	add.w	r1, r7, #12
 800ee18:	300c      	adds	r0, #12
 800ee1a:	f7ff fa74 	bl	800e306 <memcpy>
 800ee1e:	2201      	movs	r2, #1
 800ee20:	4629      	mov	r1, r5
 800ee22:	4620      	mov	r0, r4
 800ee24:	f000 fc1c 	bl	800f660 <__lshift>
 800ee28:	9b00      	ldr	r3, [sp, #0]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	9304      	str	r3, [sp, #16]
 800ee2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee32:	4413      	add	r3, r2
 800ee34:	9308      	str	r3, [sp, #32]
 800ee36:	9b02      	ldr	r3, [sp, #8]
 800ee38:	f003 0301 	and.w	r3, r3, #1
 800ee3c:	46b8      	mov	r8, r7
 800ee3e:	9306      	str	r3, [sp, #24]
 800ee40:	4607      	mov	r7, r0
 800ee42:	9b04      	ldr	r3, [sp, #16]
 800ee44:	4631      	mov	r1, r6
 800ee46:	3b01      	subs	r3, #1
 800ee48:	4650      	mov	r0, sl
 800ee4a:	9301      	str	r3, [sp, #4]
 800ee4c:	f7ff fa69 	bl	800e322 <quorem>
 800ee50:	4641      	mov	r1, r8
 800ee52:	9002      	str	r0, [sp, #8]
 800ee54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ee58:	4650      	mov	r0, sl
 800ee5a:	f000 fc6d 	bl	800f738 <__mcmp>
 800ee5e:	463a      	mov	r2, r7
 800ee60:	9005      	str	r0, [sp, #20]
 800ee62:	4631      	mov	r1, r6
 800ee64:	4620      	mov	r0, r4
 800ee66:	f000 fc83 	bl	800f770 <__mdiff>
 800ee6a:	68c2      	ldr	r2, [r0, #12]
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	bb02      	cbnz	r2, 800eeb2 <_dtoa_r+0xa7a>
 800ee70:	4601      	mov	r1, r0
 800ee72:	4650      	mov	r0, sl
 800ee74:	f000 fc60 	bl	800f738 <__mcmp>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	4629      	mov	r1, r5
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ee80:	f000 fa1e 	bl	800f2c0 <_Bfree>
 800ee84:	9b07      	ldr	r3, [sp, #28]
 800ee86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee88:	9d04      	ldr	r5, [sp, #16]
 800ee8a:	ea43 0102 	orr.w	r1, r3, r2
 800ee8e:	9b06      	ldr	r3, [sp, #24]
 800ee90:	4319      	orrs	r1, r3
 800ee92:	d110      	bne.n	800eeb6 <_dtoa_r+0xa7e>
 800ee94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ee98:	d029      	beq.n	800eeee <_dtoa_r+0xab6>
 800ee9a:	9b05      	ldr	r3, [sp, #20]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	dd02      	ble.n	800eea6 <_dtoa_r+0xa6e>
 800eea0:	9b02      	ldr	r3, [sp, #8]
 800eea2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800eea6:	9b01      	ldr	r3, [sp, #4]
 800eea8:	f883 9000 	strb.w	r9, [r3]
 800eeac:	e774      	b.n	800ed98 <_dtoa_r+0x960>
 800eeae:	4638      	mov	r0, r7
 800eeb0:	e7ba      	b.n	800ee28 <_dtoa_r+0x9f0>
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	e7e1      	b.n	800ee7a <_dtoa_r+0xa42>
 800eeb6:	9b05      	ldr	r3, [sp, #20]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	db04      	blt.n	800eec6 <_dtoa_r+0xa8e>
 800eebc:	9907      	ldr	r1, [sp, #28]
 800eebe:	430b      	orrs	r3, r1
 800eec0:	9906      	ldr	r1, [sp, #24]
 800eec2:	430b      	orrs	r3, r1
 800eec4:	d120      	bne.n	800ef08 <_dtoa_r+0xad0>
 800eec6:	2a00      	cmp	r2, #0
 800eec8:	dded      	ble.n	800eea6 <_dtoa_r+0xa6e>
 800eeca:	4651      	mov	r1, sl
 800eecc:	2201      	movs	r2, #1
 800eece:	4620      	mov	r0, r4
 800eed0:	f000 fbc6 	bl	800f660 <__lshift>
 800eed4:	4631      	mov	r1, r6
 800eed6:	4682      	mov	sl, r0
 800eed8:	f000 fc2e 	bl	800f738 <__mcmp>
 800eedc:	2800      	cmp	r0, #0
 800eede:	dc03      	bgt.n	800eee8 <_dtoa_r+0xab0>
 800eee0:	d1e1      	bne.n	800eea6 <_dtoa_r+0xa6e>
 800eee2:	f019 0f01 	tst.w	r9, #1
 800eee6:	d0de      	beq.n	800eea6 <_dtoa_r+0xa6e>
 800eee8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eeec:	d1d8      	bne.n	800eea0 <_dtoa_r+0xa68>
 800eeee:	9a01      	ldr	r2, [sp, #4]
 800eef0:	2339      	movs	r3, #57	; 0x39
 800eef2:	7013      	strb	r3, [r2, #0]
 800eef4:	462b      	mov	r3, r5
 800eef6:	461d      	mov	r5, r3
 800eef8:	3b01      	subs	r3, #1
 800eefa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eefe:	2a39      	cmp	r2, #57	; 0x39
 800ef00:	d06c      	beq.n	800efdc <_dtoa_r+0xba4>
 800ef02:	3201      	adds	r2, #1
 800ef04:	701a      	strb	r2, [r3, #0]
 800ef06:	e747      	b.n	800ed98 <_dtoa_r+0x960>
 800ef08:	2a00      	cmp	r2, #0
 800ef0a:	dd07      	ble.n	800ef1c <_dtoa_r+0xae4>
 800ef0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ef10:	d0ed      	beq.n	800eeee <_dtoa_r+0xab6>
 800ef12:	9a01      	ldr	r2, [sp, #4]
 800ef14:	f109 0301 	add.w	r3, r9, #1
 800ef18:	7013      	strb	r3, [r2, #0]
 800ef1a:	e73d      	b.n	800ed98 <_dtoa_r+0x960>
 800ef1c:	9b04      	ldr	r3, [sp, #16]
 800ef1e:	9a08      	ldr	r2, [sp, #32]
 800ef20:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d043      	beq.n	800efb0 <_dtoa_r+0xb78>
 800ef28:	4651      	mov	r1, sl
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	220a      	movs	r2, #10
 800ef2e:	4620      	mov	r0, r4
 800ef30:	f000 f9e8 	bl	800f304 <__multadd>
 800ef34:	45b8      	cmp	r8, r7
 800ef36:	4682      	mov	sl, r0
 800ef38:	f04f 0300 	mov.w	r3, #0
 800ef3c:	f04f 020a 	mov.w	r2, #10
 800ef40:	4641      	mov	r1, r8
 800ef42:	4620      	mov	r0, r4
 800ef44:	d107      	bne.n	800ef56 <_dtoa_r+0xb1e>
 800ef46:	f000 f9dd 	bl	800f304 <__multadd>
 800ef4a:	4680      	mov	r8, r0
 800ef4c:	4607      	mov	r7, r0
 800ef4e:	9b04      	ldr	r3, [sp, #16]
 800ef50:	3301      	adds	r3, #1
 800ef52:	9304      	str	r3, [sp, #16]
 800ef54:	e775      	b.n	800ee42 <_dtoa_r+0xa0a>
 800ef56:	f000 f9d5 	bl	800f304 <__multadd>
 800ef5a:	4639      	mov	r1, r7
 800ef5c:	4680      	mov	r8, r0
 800ef5e:	2300      	movs	r3, #0
 800ef60:	220a      	movs	r2, #10
 800ef62:	4620      	mov	r0, r4
 800ef64:	f000 f9ce 	bl	800f304 <__multadd>
 800ef68:	4607      	mov	r7, r0
 800ef6a:	e7f0      	b.n	800ef4e <_dtoa_r+0xb16>
 800ef6c:	9b04      	ldr	r3, [sp, #16]
 800ef6e:	9301      	str	r3, [sp, #4]
 800ef70:	9d00      	ldr	r5, [sp, #0]
 800ef72:	4631      	mov	r1, r6
 800ef74:	4650      	mov	r0, sl
 800ef76:	f7ff f9d4 	bl	800e322 <quorem>
 800ef7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ef7e:	9b00      	ldr	r3, [sp, #0]
 800ef80:	f805 9b01 	strb.w	r9, [r5], #1
 800ef84:	1aea      	subs	r2, r5, r3
 800ef86:	9b01      	ldr	r3, [sp, #4]
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	dd07      	ble.n	800ef9c <_dtoa_r+0xb64>
 800ef8c:	4651      	mov	r1, sl
 800ef8e:	2300      	movs	r3, #0
 800ef90:	220a      	movs	r2, #10
 800ef92:	4620      	mov	r0, r4
 800ef94:	f000 f9b6 	bl	800f304 <__multadd>
 800ef98:	4682      	mov	sl, r0
 800ef9a:	e7ea      	b.n	800ef72 <_dtoa_r+0xb3a>
 800ef9c:	9b01      	ldr	r3, [sp, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	bfc8      	it	gt
 800efa2:	461d      	movgt	r5, r3
 800efa4:	9b00      	ldr	r3, [sp, #0]
 800efa6:	bfd8      	it	le
 800efa8:	2501      	movle	r5, #1
 800efaa:	441d      	add	r5, r3
 800efac:	f04f 0800 	mov.w	r8, #0
 800efb0:	4651      	mov	r1, sl
 800efb2:	2201      	movs	r2, #1
 800efb4:	4620      	mov	r0, r4
 800efb6:	f000 fb53 	bl	800f660 <__lshift>
 800efba:	4631      	mov	r1, r6
 800efbc:	4682      	mov	sl, r0
 800efbe:	f000 fbbb 	bl	800f738 <__mcmp>
 800efc2:	2800      	cmp	r0, #0
 800efc4:	dc96      	bgt.n	800eef4 <_dtoa_r+0xabc>
 800efc6:	d102      	bne.n	800efce <_dtoa_r+0xb96>
 800efc8:	f019 0f01 	tst.w	r9, #1
 800efcc:	d192      	bne.n	800eef4 <_dtoa_r+0xabc>
 800efce:	462b      	mov	r3, r5
 800efd0:	461d      	mov	r5, r3
 800efd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efd6:	2a30      	cmp	r2, #48	; 0x30
 800efd8:	d0fa      	beq.n	800efd0 <_dtoa_r+0xb98>
 800efda:	e6dd      	b.n	800ed98 <_dtoa_r+0x960>
 800efdc:	9a00      	ldr	r2, [sp, #0]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d189      	bne.n	800eef6 <_dtoa_r+0xabe>
 800efe2:	f10b 0b01 	add.w	fp, fp, #1
 800efe6:	2331      	movs	r3, #49	; 0x31
 800efe8:	e796      	b.n	800ef18 <_dtoa_r+0xae0>
 800efea:	4b0a      	ldr	r3, [pc, #40]	; (800f014 <_dtoa_r+0xbdc>)
 800efec:	f7ff ba99 	b.w	800e522 <_dtoa_r+0xea>
 800eff0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	f47f aa6d 	bne.w	800e4d2 <_dtoa_r+0x9a>
 800eff8:	4b07      	ldr	r3, [pc, #28]	; (800f018 <_dtoa_r+0xbe0>)
 800effa:	f7ff ba92 	b.w	800e522 <_dtoa_r+0xea>
 800effe:	9b01      	ldr	r3, [sp, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	dcb5      	bgt.n	800ef70 <_dtoa_r+0xb38>
 800f004:	9b07      	ldr	r3, [sp, #28]
 800f006:	2b02      	cmp	r3, #2
 800f008:	f73f aeb1 	bgt.w	800ed6e <_dtoa_r+0x936>
 800f00c:	e7b0      	b.n	800ef70 <_dtoa_r+0xb38>
 800f00e:	bf00      	nop
 800f010:	080116f9 	.word	0x080116f9
 800f014:	0801164f 	.word	0x0801164f
 800f018:	0801167d 	.word	0x0801167d

0800f01c <_free_r>:
 800f01c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f01e:	2900      	cmp	r1, #0
 800f020:	d044      	beq.n	800f0ac <_free_r+0x90>
 800f022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f026:	9001      	str	r0, [sp, #4]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f1a1 0404 	sub.w	r4, r1, #4
 800f02e:	bfb8      	it	lt
 800f030:	18e4      	addlt	r4, r4, r3
 800f032:	f000 f8f9 	bl	800f228 <__malloc_lock>
 800f036:	4a1e      	ldr	r2, [pc, #120]	; (800f0b0 <_free_r+0x94>)
 800f038:	9801      	ldr	r0, [sp, #4]
 800f03a:	6813      	ldr	r3, [r2, #0]
 800f03c:	b933      	cbnz	r3, 800f04c <_free_r+0x30>
 800f03e:	6063      	str	r3, [r4, #4]
 800f040:	6014      	str	r4, [r2, #0]
 800f042:	b003      	add	sp, #12
 800f044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f048:	f000 b8f4 	b.w	800f234 <__malloc_unlock>
 800f04c:	42a3      	cmp	r3, r4
 800f04e:	d908      	bls.n	800f062 <_free_r+0x46>
 800f050:	6825      	ldr	r5, [r4, #0]
 800f052:	1961      	adds	r1, r4, r5
 800f054:	428b      	cmp	r3, r1
 800f056:	bf01      	itttt	eq
 800f058:	6819      	ldreq	r1, [r3, #0]
 800f05a:	685b      	ldreq	r3, [r3, #4]
 800f05c:	1949      	addeq	r1, r1, r5
 800f05e:	6021      	streq	r1, [r4, #0]
 800f060:	e7ed      	b.n	800f03e <_free_r+0x22>
 800f062:	461a      	mov	r2, r3
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	b10b      	cbz	r3, 800f06c <_free_r+0x50>
 800f068:	42a3      	cmp	r3, r4
 800f06a:	d9fa      	bls.n	800f062 <_free_r+0x46>
 800f06c:	6811      	ldr	r1, [r2, #0]
 800f06e:	1855      	adds	r5, r2, r1
 800f070:	42a5      	cmp	r5, r4
 800f072:	d10b      	bne.n	800f08c <_free_r+0x70>
 800f074:	6824      	ldr	r4, [r4, #0]
 800f076:	4421      	add	r1, r4
 800f078:	1854      	adds	r4, r2, r1
 800f07a:	42a3      	cmp	r3, r4
 800f07c:	6011      	str	r1, [r2, #0]
 800f07e:	d1e0      	bne.n	800f042 <_free_r+0x26>
 800f080:	681c      	ldr	r4, [r3, #0]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	6053      	str	r3, [r2, #4]
 800f086:	440c      	add	r4, r1
 800f088:	6014      	str	r4, [r2, #0]
 800f08a:	e7da      	b.n	800f042 <_free_r+0x26>
 800f08c:	d902      	bls.n	800f094 <_free_r+0x78>
 800f08e:	230c      	movs	r3, #12
 800f090:	6003      	str	r3, [r0, #0]
 800f092:	e7d6      	b.n	800f042 <_free_r+0x26>
 800f094:	6825      	ldr	r5, [r4, #0]
 800f096:	1961      	adds	r1, r4, r5
 800f098:	428b      	cmp	r3, r1
 800f09a:	bf04      	itt	eq
 800f09c:	6819      	ldreq	r1, [r3, #0]
 800f09e:	685b      	ldreq	r3, [r3, #4]
 800f0a0:	6063      	str	r3, [r4, #4]
 800f0a2:	bf04      	itt	eq
 800f0a4:	1949      	addeq	r1, r1, r5
 800f0a6:	6021      	streq	r1, [r4, #0]
 800f0a8:	6054      	str	r4, [r2, #4]
 800f0aa:	e7ca      	b.n	800f042 <_free_r+0x26>
 800f0ac:	b003      	add	sp, #12
 800f0ae:	bd30      	pop	{r4, r5, pc}
 800f0b0:	2001a448 	.word	0x2001a448

0800f0b4 <malloc>:
 800f0b4:	4b02      	ldr	r3, [pc, #8]	; (800f0c0 <malloc+0xc>)
 800f0b6:	4601      	mov	r1, r0
 800f0b8:	6818      	ldr	r0, [r3, #0]
 800f0ba:	f000 b823 	b.w	800f104 <_malloc_r>
 800f0be:	bf00      	nop
 800f0c0:	200001e0 	.word	0x200001e0

0800f0c4 <sbrk_aligned>:
 800f0c4:	b570      	push	{r4, r5, r6, lr}
 800f0c6:	4e0e      	ldr	r6, [pc, #56]	; (800f100 <sbrk_aligned+0x3c>)
 800f0c8:	460c      	mov	r4, r1
 800f0ca:	6831      	ldr	r1, [r6, #0]
 800f0cc:	4605      	mov	r5, r0
 800f0ce:	b911      	cbnz	r1, 800f0d6 <sbrk_aligned+0x12>
 800f0d0:	f000 fe60 	bl	800fd94 <_sbrk_r>
 800f0d4:	6030      	str	r0, [r6, #0]
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	4628      	mov	r0, r5
 800f0da:	f000 fe5b 	bl	800fd94 <_sbrk_r>
 800f0de:	1c43      	adds	r3, r0, #1
 800f0e0:	d00a      	beq.n	800f0f8 <sbrk_aligned+0x34>
 800f0e2:	1cc4      	adds	r4, r0, #3
 800f0e4:	f024 0403 	bic.w	r4, r4, #3
 800f0e8:	42a0      	cmp	r0, r4
 800f0ea:	d007      	beq.n	800f0fc <sbrk_aligned+0x38>
 800f0ec:	1a21      	subs	r1, r4, r0
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	f000 fe50 	bl	800fd94 <_sbrk_r>
 800f0f4:	3001      	adds	r0, #1
 800f0f6:	d101      	bne.n	800f0fc <sbrk_aligned+0x38>
 800f0f8:	f04f 34ff 	mov.w	r4, #4294967295
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	bd70      	pop	{r4, r5, r6, pc}
 800f100:	2001a44c 	.word	0x2001a44c

0800f104 <_malloc_r>:
 800f104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f108:	1ccd      	adds	r5, r1, #3
 800f10a:	f025 0503 	bic.w	r5, r5, #3
 800f10e:	3508      	adds	r5, #8
 800f110:	2d0c      	cmp	r5, #12
 800f112:	bf38      	it	cc
 800f114:	250c      	movcc	r5, #12
 800f116:	2d00      	cmp	r5, #0
 800f118:	4607      	mov	r7, r0
 800f11a:	db01      	blt.n	800f120 <_malloc_r+0x1c>
 800f11c:	42a9      	cmp	r1, r5
 800f11e:	d905      	bls.n	800f12c <_malloc_r+0x28>
 800f120:	230c      	movs	r3, #12
 800f122:	603b      	str	r3, [r7, #0]
 800f124:	2600      	movs	r6, #0
 800f126:	4630      	mov	r0, r6
 800f128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f12c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f200 <_malloc_r+0xfc>
 800f130:	f000 f87a 	bl	800f228 <__malloc_lock>
 800f134:	f8d8 3000 	ldr.w	r3, [r8]
 800f138:	461c      	mov	r4, r3
 800f13a:	bb5c      	cbnz	r4, 800f194 <_malloc_r+0x90>
 800f13c:	4629      	mov	r1, r5
 800f13e:	4638      	mov	r0, r7
 800f140:	f7ff ffc0 	bl	800f0c4 <sbrk_aligned>
 800f144:	1c43      	adds	r3, r0, #1
 800f146:	4604      	mov	r4, r0
 800f148:	d155      	bne.n	800f1f6 <_malloc_r+0xf2>
 800f14a:	f8d8 4000 	ldr.w	r4, [r8]
 800f14e:	4626      	mov	r6, r4
 800f150:	2e00      	cmp	r6, #0
 800f152:	d145      	bne.n	800f1e0 <_malloc_r+0xdc>
 800f154:	2c00      	cmp	r4, #0
 800f156:	d048      	beq.n	800f1ea <_malloc_r+0xe6>
 800f158:	6823      	ldr	r3, [r4, #0]
 800f15a:	4631      	mov	r1, r6
 800f15c:	4638      	mov	r0, r7
 800f15e:	eb04 0903 	add.w	r9, r4, r3
 800f162:	f000 fe17 	bl	800fd94 <_sbrk_r>
 800f166:	4581      	cmp	r9, r0
 800f168:	d13f      	bne.n	800f1ea <_malloc_r+0xe6>
 800f16a:	6821      	ldr	r1, [r4, #0]
 800f16c:	1a6d      	subs	r5, r5, r1
 800f16e:	4629      	mov	r1, r5
 800f170:	4638      	mov	r0, r7
 800f172:	f7ff ffa7 	bl	800f0c4 <sbrk_aligned>
 800f176:	3001      	adds	r0, #1
 800f178:	d037      	beq.n	800f1ea <_malloc_r+0xe6>
 800f17a:	6823      	ldr	r3, [r4, #0]
 800f17c:	442b      	add	r3, r5
 800f17e:	6023      	str	r3, [r4, #0]
 800f180:	f8d8 3000 	ldr.w	r3, [r8]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d038      	beq.n	800f1fa <_malloc_r+0xf6>
 800f188:	685a      	ldr	r2, [r3, #4]
 800f18a:	42a2      	cmp	r2, r4
 800f18c:	d12b      	bne.n	800f1e6 <_malloc_r+0xe2>
 800f18e:	2200      	movs	r2, #0
 800f190:	605a      	str	r2, [r3, #4]
 800f192:	e00f      	b.n	800f1b4 <_malloc_r+0xb0>
 800f194:	6822      	ldr	r2, [r4, #0]
 800f196:	1b52      	subs	r2, r2, r5
 800f198:	d41f      	bmi.n	800f1da <_malloc_r+0xd6>
 800f19a:	2a0b      	cmp	r2, #11
 800f19c:	d917      	bls.n	800f1ce <_malloc_r+0xca>
 800f19e:	1961      	adds	r1, r4, r5
 800f1a0:	42a3      	cmp	r3, r4
 800f1a2:	6025      	str	r5, [r4, #0]
 800f1a4:	bf18      	it	ne
 800f1a6:	6059      	strne	r1, [r3, #4]
 800f1a8:	6863      	ldr	r3, [r4, #4]
 800f1aa:	bf08      	it	eq
 800f1ac:	f8c8 1000 	streq.w	r1, [r8]
 800f1b0:	5162      	str	r2, [r4, r5]
 800f1b2:	604b      	str	r3, [r1, #4]
 800f1b4:	4638      	mov	r0, r7
 800f1b6:	f104 060b 	add.w	r6, r4, #11
 800f1ba:	f000 f83b 	bl	800f234 <__malloc_unlock>
 800f1be:	f026 0607 	bic.w	r6, r6, #7
 800f1c2:	1d23      	adds	r3, r4, #4
 800f1c4:	1af2      	subs	r2, r6, r3
 800f1c6:	d0ae      	beq.n	800f126 <_malloc_r+0x22>
 800f1c8:	1b9b      	subs	r3, r3, r6
 800f1ca:	50a3      	str	r3, [r4, r2]
 800f1cc:	e7ab      	b.n	800f126 <_malloc_r+0x22>
 800f1ce:	42a3      	cmp	r3, r4
 800f1d0:	6862      	ldr	r2, [r4, #4]
 800f1d2:	d1dd      	bne.n	800f190 <_malloc_r+0x8c>
 800f1d4:	f8c8 2000 	str.w	r2, [r8]
 800f1d8:	e7ec      	b.n	800f1b4 <_malloc_r+0xb0>
 800f1da:	4623      	mov	r3, r4
 800f1dc:	6864      	ldr	r4, [r4, #4]
 800f1de:	e7ac      	b.n	800f13a <_malloc_r+0x36>
 800f1e0:	4634      	mov	r4, r6
 800f1e2:	6876      	ldr	r6, [r6, #4]
 800f1e4:	e7b4      	b.n	800f150 <_malloc_r+0x4c>
 800f1e6:	4613      	mov	r3, r2
 800f1e8:	e7cc      	b.n	800f184 <_malloc_r+0x80>
 800f1ea:	230c      	movs	r3, #12
 800f1ec:	603b      	str	r3, [r7, #0]
 800f1ee:	4638      	mov	r0, r7
 800f1f0:	f000 f820 	bl	800f234 <__malloc_unlock>
 800f1f4:	e797      	b.n	800f126 <_malloc_r+0x22>
 800f1f6:	6025      	str	r5, [r4, #0]
 800f1f8:	e7dc      	b.n	800f1b4 <_malloc_r+0xb0>
 800f1fa:	605b      	str	r3, [r3, #4]
 800f1fc:	deff      	udf	#255	; 0xff
 800f1fe:	bf00      	nop
 800f200:	2001a448 	.word	0x2001a448

0800f204 <__ascii_mbtowc>:
 800f204:	b082      	sub	sp, #8
 800f206:	b901      	cbnz	r1, 800f20a <__ascii_mbtowc+0x6>
 800f208:	a901      	add	r1, sp, #4
 800f20a:	b142      	cbz	r2, 800f21e <__ascii_mbtowc+0x1a>
 800f20c:	b14b      	cbz	r3, 800f222 <__ascii_mbtowc+0x1e>
 800f20e:	7813      	ldrb	r3, [r2, #0]
 800f210:	600b      	str	r3, [r1, #0]
 800f212:	7812      	ldrb	r2, [r2, #0]
 800f214:	1e10      	subs	r0, r2, #0
 800f216:	bf18      	it	ne
 800f218:	2001      	movne	r0, #1
 800f21a:	b002      	add	sp, #8
 800f21c:	4770      	bx	lr
 800f21e:	4610      	mov	r0, r2
 800f220:	e7fb      	b.n	800f21a <__ascii_mbtowc+0x16>
 800f222:	f06f 0001 	mvn.w	r0, #1
 800f226:	e7f8      	b.n	800f21a <__ascii_mbtowc+0x16>

0800f228 <__malloc_lock>:
 800f228:	4801      	ldr	r0, [pc, #4]	; (800f230 <__malloc_lock+0x8>)
 800f22a:	f7ff b86a 	b.w	800e302 <__retarget_lock_acquire_recursive>
 800f22e:	bf00      	nop
 800f230:	2001a444 	.word	0x2001a444

0800f234 <__malloc_unlock>:
 800f234:	4801      	ldr	r0, [pc, #4]	; (800f23c <__malloc_unlock+0x8>)
 800f236:	f7ff b865 	b.w	800e304 <__retarget_lock_release_recursive>
 800f23a:	bf00      	nop
 800f23c:	2001a444 	.word	0x2001a444

0800f240 <_Balloc>:
 800f240:	b570      	push	{r4, r5, r6, lr}
 800f242:	69c6      	ldr	r6, [r0, #28]
 800f244:	4604      	mov	r4, r0
 800f246:	460d      	mov	r5, r1
 800f248:	b976      	cbnz	r6, 800f268 <_Balloc+0x28>
 800f24a:	2010      	movs	r0, #16
 800f24c:	f7ff ff32 	bl	800f0b4 <malloc>
 800f250:	4602      	mov	r2, r0
 800f252:	61e0      	str	r0, [r4, #28]
 800f254:	b920      	cbnz	r0, 800f260 <_Balloc+0x20>
 800f256:	4b18      	ldr	r3, [pc, #96]	; (800f2b8 <_Balloc+0x78>)
 800f258:	4818      	ldr	r0, [pc, #96]	; (800f2bc <_Balloc+0x7c>)
 800f25a:	216b      	movs	r1, #107	; 0x6b
 800f25c:	f000 fdaa 	bl	800fdb4 <__assert_func>
 800f260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f264:	6006      	str	r6, [r0, #0]
 800f266:	60c6      	str	r6, [r0, #12]
 800f268:	69e6      	ldr	r6, [r4, #28]
 800f26a:	68f3      	ldr	r3, [r6, #12]
 800f26c:	b183      	cbz	r3, 800f290 <_Balloc+0x50>
 800f26e:	69e3      	ldr	r3, [r4, #28]
 800f270:	68db      	ldr	r3, [r3, #12]
 800f272:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f276:	b9b8      	cbnz	r0, 800f2a8 <_Balloc+0x68>
 800f278:	2101      	movs	r1, #1
 800f27a:	fa01 f605 	lsl.w	r6, r1, r5
 800f27e:	1d72      	adds	r2, r6, #5
 800f280:	0092      	lsls	r2, r2, #2
 800f282:	4620      	mov	r0, r4
 800f284:	f000 fdb4 	bl	800fdf0 <_calloc_r>
 800f288:	b160      	cbz	r0, 800f2a4 <_Balloc+0x64>
 800f28a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f28e:	e00e      	b.n	800f2ae <_Balloc+0x6e>
 800f290:	2221      	movs	r2, #33	; 0x21
 800f292:	2104      	movs	r1, #4
 800f294:	4620      	mov	r0, r4
 800f296:	f000 fdab 	bl	800fdf0 <_calloc_r>
 800f29a:	69e3      	ldr	r3, [r4, #28]
 800f29c:	60f0      	str	r0, [r6, #12]
 800f29e:	68db      	ldr	r3, [r3, #12]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d1e4      	bne.n	800f26e <_Balloc+0x2e>
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	bd70      	pop	{r4, r5, r6, pc}
 800f2a8:	6802      	ldr	r2, [r0, #0]
 800f2aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f2b4:	e7f7      	b.n	800f2a6 <_Balloc+0x66>
 800f2b6:	bf00      	nop
 800f2b8:	0801168a 	.word	0x0801168a
 800f2bc:	0801170a 	.word	0x0801170a

0800f2c0 <_Bfree>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	69c6      	ldr	r6, [r0, #28]
 800f2c4:	4605      	mov	r5, r0
 800f2c6:	460c      	mov	r4, r1
 800f2c8:	b976      	cbnz	r6, 800f2e8 <_Bfree+0x28>
 800f2ca:	2010      	movs	r0, #16
 800f2cc:	f7ff fef2 	bl	800f0b4 <malloc>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	61e8      	str	r0, [r5, #28]
 800f2d4:	b920      	cbnz	r0, 800f2e0 <_Bfree+0x20>
 800f2d6:	4b09      	ldr	r3, [pc, #36]	; (800f2fc <_Bfree+0x3c>)
 800f2d8:	4809      	ldr	r0, [pc, #36]	; (800f300 <_Bfree+0x40>)
 800f2da:	218f      	movs	r1, #143	; 0x8f
 800f2dc:	f000 fd6a 	bl	800fdb4 <__assert_func>
 800f2e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2e4:	6006      	str	r6, [r0, #0]
 800f2e6:	60c6      	str	r6, [r0, #12]
 800f2e8:	b13c      	cbz	r4, 800f2fa <_Bfree+0x3a>
 800f2ea:	69eb      	ldr	r3, [r5, #28]
 800f2ec:	6862      	ldr	r2, [r4, #4]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f2f4:	6021      	str	r1, [r4, #0]
 800f2f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f2fa:	bd70      	pop	{r4, r5, r6, pc}
 800f2fc:	0801168a 	.word	0x0801168a
 800f300:	0801170a 	.word	0x0801170a

0800f304 <__multadd>:
 800f304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f308:	690d      	ldr	r5, [r1, #16]
 800f30a:	4607      	mov	r7, r0
 800f30c:	460c      	mov	r4, r1
 800f30e:	461e      	mov	r6, r3
 800f310:	f101 0c14 	add.w	ip, r1, #20
 800f314:	2000      	movs	r0, #0
 800f316:	f8dc 3000 	ldr.w	r3, [ip]
 800f31a:	b299      	uxth	r1, r3
 800f31c:	fb02 6101 	mla	r1, r2, r1, r6
 800f320:	0c1e      	lsrs	r6, r3, #16
 800f322:	0c0b      	lsrs	r3, r1, #16
 800f324:	fb02 3306 	mla	r3, r2, r6, r3
 800f328:	b289      	uxth	r1, r1
 800f32a:	3001      	adds	r0, #1
 800f32c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f330:	4285      	cmp	r5, r0
 800f332:	f84c 1b04 	str.w	r1, [ip], #4
 800f336:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f33a:	dcec      	bgt.n	800f316 <__multadd+0x12>
 800f33c:	b30e      	cbz	r6, 800f382 <__multadd+0x7e>
 800f33e:	68a3      	ldr	r3, [r4, #8]
 800f340:	42ab      	cmp	r3, r5
 800f342:	dc19      	bgt.n	800f378 <__multadd+0x74>
 800f344:	6861      	ldr	r1, [r4, #4]
 800f346:	4638      	mov	r0, r7
 800f348:	3101      	adds	r1, #1
 800f34a:	f7ff ff79 	bl	800f240 <_Balloc>
 800f34e:	4680      	mov	r8, r0
 800f350:	b928      	cbnz	r0, 800f35e <__multadd+0x5a>
 800f352:	4602      	mov	r2, r0
 800f354:	4b0c      	ldr	r3, [pc, #48]	; (800f388 <__multadd+0x84>)
 800f356:	480d      	ldr	r0, [pc, #52]	; (800f38c <__multadd+0x88>)
 800f358:	21ba      	movs	r1, #186	; 0xba
 800f35a:	f000 fd2b 	bl	800fdb4 <__assert_func>
 800f35e:	6922      	ldr	r2, [r4, #16]
 800f360:	3202      	adds	r2, #2
 800f362:	f104 010c 	add.w	r1, r4, #12
 800f366:	0092      	lsls	r2, r2, #2
 800f368:	300c      	adds	r0, #12
 800f36a:	f7fe ffcc 	bl	800e306 <memcpy>
 800f36e:	4621      	mov	r1, r4
 800f370:	4638      	mov	r0, r7
 800f372:	f7ff ffa5 	bl	800f2c0 <_Bfree>
 800f376:	4644      	mov	r4, r8
 800f378:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f37c:	3501      	adds	r5, #1
 800f37e:	615e      	str	r6, [r3, #20]
 800f380:	6125      	str	r5, [r4, #16]
 800f382:	4620      	mov	r0, r4
 800f384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f388:	080116f9 	.word	0x080116f9
 800f38c:	0801170a 	.word	0x0801170a

0800f390 <__hi0bits>:
 800f390:	0c03      	lsrs	r3, r0, #16
 800f392:	041b      	lsls	r3, r3, #16
 800f394:	b9d3      	cbnz	r3, 800f3cc <__hi0bits+0x3c>
 800f396:	0400      	lsls	r0, r0, #16
 800f398:	2310      	movs	r3, #16
 800f39a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f39e:	bf04      	itt	eq
 800f3a0:	0200      	lsleq	r0, r0, #8
 800f3a2:	3308      	addeq	r3, #8
 800f3a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f3a8:	bf04      	itt	eq
 800f3aa:	0100      	lsleq	r0, r0, #4
 800f3ac:	3304      	addeq	r3, #4
 800f3ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f3b2:	bf04      	itt	eq
 800f3b4:	0080      	lsleq	r0, r0, #2
 800f3b6:	3302      	addeq	r3, #2
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	db05      	blt.n	800f3c8 <__hi0bits+0x38>
 800f3bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f3c0:	f103 0301 	add.w	r3, r3, #1
 800f3c4:	bf08      	it	eq
 800f3c6:	2320      	moveq	r3, #32
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	4770      	bx	lr
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	e7e4      	b.n	800f39a <__hi0bits+0xa>

0800f3d0 <__lo0bits>:
 800f3d0:	6803      	ldr	r3, [r0, #0]
 800f3d2:	f013 0207 	ands.w	r2, r3, #7
 800f3d6:	d00c      	beq.n	800f3f2 <__lo0bits+0x22>
 800f3d8:	07d9      	lsls	r1, r3, #31
 800f3da:	d422      	bmi.n	800f422 <__lo0bits+0x52>
 800f3dc:	079a      	lsls	r2, r3, #30
 800f3de:	bf49      	itett	mi
 800f3e0:	085b      	lsrmi	r3, r3, #1
 800f3e2:	089b      	lsrpl	r3, r3, #2
 800f3e4:	6003      	strmi	r3, [r0, #0]
 800f3e6:	2201      	movmi	r2, #1
 800f3e8:	bf5c      	itt	pl
 800f3ea:	6003      	strpl	r3, [r0, #0]
 800f3ec:	2202      	movpl	r2, #2
 800f3ee:	4610      	mov	r0, r2
 800f3f0:	4770      	bx	lr
 800f3f2:	b299      	uxth	r1, r3
 800f3f4:	b909      	cbnz	r1, 800f3fa <__lo0bits+0x2a>
 800f3f6:	0c1b      	lsrs	r3, r3, #16
 800f3f8:	2210      	movs	r2, #16
 800f3fa:	b2d9      	uxtb	r1, r3
 800f3fc:	b909      	cbnz	r1, 800f402 <__lo0bits+0x32>
 800f3fe:	3208      	adds	r2, #8
 800f400:	0a1b      	lsrs	r3, r3, #8
 800f402:	0719      	lsls	r1, r3, #28
 800f404:	bf04      	itt	eq
 800f406:	091b      	lsreq	r3, r3, #4
 800f408:	3204      	addeq	r2, #4
 800f40a:	0799      	lsls	r1, r3, #30
 800f40c:	bf04      	itt	eq
 800f40e:	089b      	lsreq	r3, r3, #2
 800f410:	3202      	addeq	r2, #2
 800f412:	07d9      	lsls	r1, r3, #31
 800f414:	d403      	bmi.n	800f41e <__lo0bits+0x4e>
 800f416:	085b      	lsrs	r3, r3, #1
 800f418:	f102 0201 	add.w	r2, r2, #1
 800f41c:	d003      	beq.n	800f426 <__lo0bits+0x56>
 800f41e:	6003      	str	r3, [r0, #0]
 800f420:	e7e5      	b.n	800f3ee <__lo0bits+0x1e>
 800f422:	2200      	movs	r2, #0
 800f424:	e7e3      	b.n	800f3ee <__lo0bits+0x1e>
 800f426:	2220      	movs	r2, #32
 800f428:	e7e1      	b.n	800f3ee <__lo0bits+0x1e>
	...

0800f42c <__i2b>:
 800f42c:	b510      	push	{r4, lr}
 800f42e:	460c      	mov	r4, r1
 800f430:	2101      	movs	r1, #1
 800f432:	f7ff ff05 	bl	800f240 <_Balloc>
 800f436:	4602      	mov	r2, r0
 800f438:	b928      	cbnz	r0, 800f446 <__i2b+0x1a>
 800f43a:	4b05      	ldr	r3, [pc, #20]	; (800f450 <__i2b+0x24>)
 800f43c:	4805      	ldr	r0, [pc, #20]	; (800f454 <__i2b+0x28>)
 800f43e:	f240 1145 	movw	r1, #325	; 0x145
 800f442:	f000 fcb7 	bl	800fdb4 <__assert_func>
 800f446:	2301      	movs	r3, #1
 800f448:	6144      	str	r4, [r0, #20]
 800f44a:	6103      	str	r3, [r0, #16]
 800f44c:	bd10      	pop	{r4, pc}
 800f44e:	bf00      	nop
 800f450:	080116f9 	.word	0x080116f9
 800f454:	0801170a 	.word	0x0801170a

0800f458 <__multiply>:
 800f458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f45c:	4691      	mov	r9, r2
 800f45e:	690a      	ldr	r2, [r1, #16]
 800f460:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f464:	429a      	cmp	r2, r3
 800f466:	bfb8      	it	lt
 800f468:	460b      	movlt	r3, r1
 800f46a:	460c      	mov	r4, r1
 800f46c:	bfbc      	itt	lt
 800f46e:	464c      	movlt	r4, r9
 800f470:	4699      	movlt	r9, r3
 800f472:	6927      	ldr	r7, [r4, #16]
 800f474:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f478:	68a3      	ldr	r3, [r4, #8]
 800f47a:	6861      	ldr	r1, [r4, #4]
 800f47c:	eb07 060a 	add.w	r6, r7, sl
 800f480:	42b3      	cmp	r3, r6
 800f482:	b085      	sub	sp, #20
 800f484:	bfb8      	it	lt
 800f486:	3101      	addlt	r1, #1
 800f488:	f7ff feda 	bl	800f240 <_Balloc>
 800f48c:	b930      	cbnz	r0, 800f49c <__multiply+0x44>
 800f48e:	4602      	mov	r2, r0
 800f490:	4b44      	ldr	r3, [pc, #272]	; (800f5a4 <__multiply+0x14c>)
 800f492:	4845      	ldr	r0, [pc, #276]	; (800f5a8 <__multiply+0x150>)
 800f494:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f498:	f000 fc8c 	bl	800fdb4 <__assert_func>
 800f49c:	f100 0514 	add.w	r5, r0, #20
 800f4a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f4a4:	462b      	mov	r3, r5
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	4543      	cmp	r3, r8
 800f4aa:	d321      	bcc.n	800f4f0 <__multiply+0x98>
 800f4ac:	f104 0314 	add.w	r3, r4, #20
 800f4b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f4b4:	f109 0314 	add.w	r3, r9, #20
 800f4b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f4bc:	9202      	str	r2, [sp, #8]
 800f4be:	1b3a      	subs	r2, r7, r4
 800f4c0:	3a15      	subs	r2, #21
 800f4c2:	f022 0203 	bic.w	r2, r2, #3
 800f4c6:	3204      	adds	r2, #4
 800f4c8:	f104 0115 	add.w	r1, r4, #21
 800f4cc:	428f      	cmp	r7, r1
 800f4ce:	bf38      	it	cc
 800f4d0:	2204      	movcc	r2, #4
 800f4d2:	9201      	str	r2, [sp, #4]
 800f4d4:	9a02      	ldr	r2, [sp, #8]
 800f4d6:	9303      	str	r3, [sp, #12]
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d80c      	bhi.n	800f4f6 <__multiply+0x9e>
 800f4dc:	2e00      	cmp	r6, #0
 800f4de:	dd03      	ble.n	800f4e8 <__multiply+0x90>
 800f4e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d05b      	beq.n	800f5a0 <__multiply+0x148>
 800f4e8:	6106      	str	r6, [r0, #16]
 800f4ea:	b005      	add	sp, #20
 800f4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f0:	f843 2b04 	str.w	r2, [r3], #4
 800f4f4:	e7d8      	b.n	800f4a8 <__multiply+0x50>
 800f4f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800f4fa:	f1ba 0f00 	cmp.w	sl, #0
 800f4fe:	d024      	beq.n	800f54a <__multiply+0xf2>
 800f500:	f104 0e14 	add.w	lr, r4, #20
 800f504:	46a9      	mov	r9, r5
 800f506:	f04f 0c00 	mov.w	ip, #0
 800f50a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f50e:	f8d9 1000 	ldr.w	r1, [r9]
 800f512:	fa1f fb82 	uxth.w	fp, r2
 800f516:	b289      	uxth	r1, r1
 800f518:	fb0a 110b 	mla	r1, sl, fp, r1
 800f51c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f520:	f8d9 2000 	ldr.w	r2, [r9]
 800f524:	4461      	add	r1, ip
 800f526:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f52a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f52e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f532:	b289      	uxth	r1, r1
 800f534:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f538:	4577      	cmp	r7, lr
 800f53a:	f849 1b04 	str.w	r1, [r9], #4
 800f53e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f542:	d8e2      	bhi.n	800f50a <__multiply+0xb2>
 800f544:	9a01      	ldr	r2, [sp, #4]
 800f546:	f845 c002 	str.w	ip, [r5, r2]
 800f54a:	9a03      	ldr	r2, [sp, #12]
 800f54c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f550:	3304      	adds	r3, #4
 800f552:	f1b9 0f00 	cmp.w	r9, #0
 800f556:	d021      	beq.n	800f59c <__multiply+0x144>
 800f558:	6829      	ldr	r1, [r5, #0]
 800f55a:	f104 0c14 	add.w	ip, r4, #20
 800f55e:	46ae      	mov	lr, r5
 800f560:	f04f 0a00 	mov.w	sl, #0
 800f564:	f8bc b000 	ldrh.w	fp, [ip]
 800f568:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f56c:	fb09 220b 	mla	r2, r9, fp, r2
 800f570:	4452      	add	r2, sl
 800f572:	b289      	uxth	r1, r1
 800f574:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f578:	f84e 1b04 	str.w	r1, [lr], #4
 800f57c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f580:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f584:	f8be 1000 	ldrh.w	r1, [lr]
 800f588:	fb09 110a 	mla	r1, r9, sl, r1
 800f58c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f590:	4567      	cmp	r7, ip
 800f592:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f596:	d8e5      	bhi.n	800f564 <__multiply+0x10c>
 800f598:	9a01      	ldr	r2, [sp, #4]
 800f59a:	50a9      	str	r1, [r5, r2]
 800f59c:	3504      	adds	r5, #4
 800f59e:	e799      	b.n	800f4d4 <__multiply+0x7c>
 800f5a0:	3e01      	subs	r6, #1
 800f5a2:	e79b      	b.n	800f4dc <__multiply+0x84>
 800f5a4:	080116f9 	.word	0x080116f9
 800f5a8:	0801170a 	.word	0x0801170a

0800f5ac <__pow5mult>:
 800f5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5b0:	4615      	mov	r5, r2
 800f5b2:	f012 0203 	ands.w	r2, r2, #3
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	460f      	mov	r7, r1
 800f5ba:	d007      	beq.n	800f5cc <__pow5mult+0x20>
 800f5bc:	4c25      	ldr	r4, [pc, #148]	; (800f654 <__pow5mult+0xa8>)
 800f5be:	3a01      	subs	r2, #1
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f5c6:	f7ff fe9d 	bl	800f304 <__multadd>
 800f5ca:	4607      	mov	r7, r0
 800f5cc:	10ad      	asrs	r5, r5, #2
 800f5ce:	d03d      	beq.n	800f64c <__pow5mult+0xa0>
 800f5d0:	69f4      	ldr	r4, [r6, #28]
 800f5d2:	b97c      	cbnz	r4, 800f5f4 <__pow5mult+0x48>
 800f5d4:	2010      	movs	r0, #16
 800f5d6:	f7ff fd6d 	bl	800f0b4 <malloc>
 800f5da:	4602      	mov	r2, r0
 800f5dc:	61f0      	str	r0, [r6, #28]
 800f5de:	b928      	cbnz	r0, 800f5ec <__pow5mult+0x40>
 800f5e0:	4b1d      	ldr	r3, [pc, #116]	; (800f658 <__pow5mult+0xac>)
 800f5e2:	481e      	ldr	r0, [pc, #120]	; (800f65c <__pow5mult+0xb0>)
 800f5e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f5e8:	f000 fbe4 	bl	800fdb4 <__assert_func>
 800f5ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5f0:	6004      	str	r4, [r0, #0]
 800f5f2:	60c4      	str	r4, [r0, #12]
 800f5f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f5f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f5fc:	b94c      	cbnz	r4, 800f612 <__pow5mult+0x66>
 800f5fe:	f240 2171 	movw	r1, #625	; 0x271
 800f602:	4630      	mov	r0, r6
 800f604:	f7ff ff12 	bl	800f42c <__i2b>
 800f608:	2300      	movs	r3, #0
 800f60a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f60e:	4604      	mov	r4, r0
 800f610:	6003      	str	r3, [r0, #0]
 800f612:	f04f 0900 	mov.w	r9, #0
 800f616:	07eb      	lsls	r3, r5, #31
 800f618:	d50a      	bpl.n	800f630 <__pow5mult+0x84>
 800f61a:	4639      	mov	r1, r7
 800f61c:	4622      	mov	r2, r4
 800f61e:	4630      	mov	r0, r6
 800f620:	f7ff ff1a 	bl	800f458 <__multiply>
 800f624:	4639      	mov	r1, r7
 800f626:	4680      	mov	r8, r0
 800f628:	4630      	mov	r0, r6
 800f62a:	f7ff fe49 	bl	800f2c0 <_Bfree>
 800f62e:	4647      	mov	r7, r8
 800f630:	106d      	asrs	r5, r5, #1
 800f632:	d00b      	beq.n	800f64c <__pow5mult+0xa0>
 800f634:	6820      	ldr	r0, [r4, #0]
 800f636:	b938      	cbnz	r0, 800f648 <__pow5mult+0x9c>
 800f638:	4622      	mov	r2, r4
 800f63a:	4621      	mov	r1, r4
 800f63c:	4630      	mov	r0, r6
 800f63e:	f7ff ff0b 	bl	800f458 <__multiply>
 800f642:	6020      	str	r0, [r4, #0]
 800f644:	f8c0 9000 	str.w	r9, [r0]
 800f648:	4604      	mov	r4, r0
 800f64a:	e7e4      	b.n	800f616 <__pow5mult+0x6a>
 800f64c:	4638      	mov	r0, r7
 800f64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f652:	bf00      	nop
 800f654:	08011858 	.word	0x08011858
 800f658:	0801168a 	.word	0x0801168a
 800f65c:	0801170a 	.word	0x0801170a

0800f660 <__lshift>:
 800f660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f664:	460c      	mov	r4, r1
 800f666:	6849      	ldr	r1, [r1, #4]
 800f668:	6923      	ldr	r3, [r4, #16]
 800f66a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f66e:	68a3      	ldr	r3, [r4, #8]
 800f670:	4607      	mov	r7, r0
 800f672:	4691      	mov	r9, r2
 800f674:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f678:	f108 0601 	add.w	r6, r8, #1
 800f67c:	42b3      	cmp	r3, r6
 800f67e:	db0b      	blt.n	800f698 <__lshift+0x38>
 800f680:	4638      	mov	r0, r7
 800f682:	f7ff fddd 	bl	800f240 <_Balloc>
 800f686:	4605      	mov	r5, r0
 800f688:	b948      	cbnz	r0, 800f69e <__lshift+0x3e>
 800f68a:	4602      	mov	r2, r0
 800f68c:	4b28      	ldr	r3, [pc, #160]	; (800f730 <__lshift+0xd0>)
 800f68e:	4829      	ldr	r0, [pc, #164]	; (800f734 <__lshift+0xd4>)
 800f690:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f694:	f000 fb8e 	bl	800fdb4 <__assert_func>
 800f698:	3101      	adds	r1, #1
 800f69a:	005b      	lsls	r3, r3, #1
 800f69c:	e7ee      	b.n	800f67c <__lshift+0x1c>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	f100 0114 	add.w	r1, r0, #20
 800f6a4:	f100 0210 	add.w	r2, r0, #16
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	4553      	cmp	r3, sl
 800f6ac:	db33      	blt.n	800f716 <__lshift+0xb6>
 800f6ae:	6920      	ldr	r0, [r4, #16]
 800f6b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f6b4:	f104 0314 	add.w	r3, r4, #20
 800f6b8:	f019 091f 	ands.w	r9, r9, #31
 800f6bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f6c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f6c4:	d02b      	beq.n	800f71e <__lshift+0xbe>
 800f6c6:	f1c9 0e20 	rsb	lr, r9, #32
 800f6ca:	468a      	mov	sl, r1
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	6818      	ldr	r0, [r3, #0]
 800f6d0:	fa00 f009 	lsl.w	r0, r0, r9
 800f6d4:	4310      	orrs	r0, r2
 800f6d6:	f84a 0b04 	str.w	r0, [sl], #4
 800f6da:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6de:	459c      	cmp	ip, r3
 800f6e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800f6e4:	d8f3      	bhi.n	800f6ce <__lshift+0x6e>
 800f6e6:	ebac 0304 	sub.w	r3, ip, r4
 800f6ea:	3b15      	subs	r3, #21
 800f6ec:	f023 0303 	bic.w	r3, r3, #3
 800f6f0:	3304      	adds	r3, #4
 800f6f2:	f104 0015 	add.w	r0, r4, #21
 800f6f6:	4584      	cmp	ip, r0
 800f6f8:	bf38      	it	cc
 800f6fa:	2304      	movcc	r3, #4
 800f6fc:	50ca      	str	r2, [r1, r3]
 800f6fe:	b10a      	cbz	r2, 800f704 <__lshift+0xa4>
 800f700:	f108 0602 	add.w	r6, r8, #2
 800f704:	3e01      	subs	r6, #1
 800f706:	4638      	mov	r0, r7
 800f708:	612e      	str	r6, [r5, #16]
 800f70a:	4621      	mov	r1, r4
 800f70c:	f7ff fdd8 	bl	800f2c0 <_Bfree>
 800f710:	4628      	mov	r0, r5
 800f712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f716:	f842 0f04 	str.w	r0, [r2, #4]!
 800f71a:	3301      	adds	r3, #1
 800f71c:	e7c5      	b.n	800f6aa <__lshift+0x4a>
 800f71e:	3904      	subs	r1, #4
 800f720:	f853 2b04 	ldr.w	r2, [r3], #4
 800f724:	f841 2f04 	str.w	r2, [r1, #4]!
 800f728:	459c      	cmp	ip, r3
 800f72a:	d8f9      	bhi.n	800f720 <__lshift+0xc0>
 800f72c:	e7ea      	b.n	800f704 <__lshift+0xa4>
 800f72e:	bf00      	nop
 800f730:	080116f9 	.word	0x080116f9
 800f734:	0801170a 	.word	0x0801170a

0800f738 <__mcmp>:
 800f738:	b530      	push	{r4, r5, lr}
 800f73a:	6902      	ldr	r2, [r0, #16]
 800f73c:	690c      	ldr	r4, [r1, #16]
 800f73e:	1b12      	subs	r2, r2, r4
 800f740:	d10e      	bne.n	800f760 <__mcmp+0x28>
 800f742:	f100 0314 	add.w	r3, r0, #20
 800f746:	3114      	adds	r1, #20
 800f748:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f74c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f750:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f754:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f758:	42a5      	cmp	r5, r4
 800f75a:	d003      	beq.n	800f764 <__mcmp+0x2c>
 800f75c:	d305      	bcc.n	800f76a <__mcmp+0x32>
 800f75e:	2201      	movs	r2, #1
 800f760:	4610      	mov	r0, r2
 800f762:	bd30      	pop	{r4, r5, pc}
 800f764:	4283      	cmp	r3, r0
 800f766:	d3f3      	bcc.n	800f750 <__mcmp+0x18>
 800f768:	e7fa      	b.n	800f760 <__mcmp+0x28>
 800f76a:	f04f 32ff 	mov.w	r2, #4294967295
 800f76e:	e7f7      	b.n	800f760 <__mcmp+0x28>

0800f770 <__mdiff>:
 800f770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f774:	460c      	mov	r4, r1
 800f776:	4606      	mov	r6, r0
 800f778:	4611      	mov	r1, r2
 800f77a:	4620      	mov	r0, r4
 800f77c:	4690      	mov	r8, r2
 800f77e:	f7ff ffdb 	bl	800f738 <__mcmp>
 800f782:	1e05      	subs	r5, r0, #0
 800f784:	d110      	bne.n	800f7a8 <__mdiff+0x38>
 800f786:	4629      	mov	r1, r5
 800f788:	4630      	mov	r0, r6
 800f78a:	f7ff fd59 	bl	800f240 <_Balloc>
 800f78e:	b930      	cbnz	r0, 800f79e <__mdiff+0x2e>
 800f790:	4b3a      	ldr	r3, [pc, #232]	; (800f87c <__mdiff+0x10c>)
 800f792:	4602      	mov	r2, r0
 800f794:	f240 2137 	movw	r1, #567	; 0x237
 800f798:	4839      	ldr	r0, [pc, #228]	; (800f880 <__mdiff+0x110>)
 800f79a:	f000 fb0b 	bl	800fdb4 <__assert_func>
 800f79e:	2301      	movs	r3, #1
 800f7a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f7a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a8:	bfa4      	itt	ge
 800f7aa:	4643      	movge	r3, r8
 800f7ac:	46a0      	movge	r8, r4
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f7b4:	bfa6      	itte	ge
 800f7b6:	461c      	movge	r4, r3
 800f7b8:	2500      	movge	r5, #0
 800f7ba:	2501      	movlt	r5, #1
 800f7bc:	f7ff fd40 	bl	800f240 <_Balloc>
 800f7c0:	b920      	cbnz	r0, 800f7cc <__mdiff+0x5c>
 800f7c2:	4b2e      	ldr	r3, [pc, #184]	; (800f87c <__mdiff+0x10c>)
 800f7c4:	4602      	mov	r2, r0
 800f7c6:	f240 2145 	movw	r1, #581	; 0x245
 800f7ca:	e7e5      	b.n	800f798 <__mdiff+0x28>
 800f7cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f7d0:	6926      	ldr	r6, [r4, #16]
 800f7d2:	60c5      	str	r5, [r0, #12]
 800f7d4:	f104 0914 	add.w	r9, r4, #20
 800f7d8:	f108 0514 	add.w	r5, r8, #20
 800f7dc:	f100 0e14 	add.w	lr, r0, #20
 800f7e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f7e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f7e8:	f108 0210 	add.w	r2, r8, #16
 800f7ec:	46f2      	mov	sl, lr
 800f7ee:	2100      	movs	r1, #0
 800f7f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f7f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f7f8:	fa11 f88b 	uxtah	r8, r1, fp
 800f7fc:	b299      	uxth	r1, r3
 800f7fe:	0c1b      	lsrs	r3, r3, #16
 800f800:	eba8 0801 	sub.w	r8, r8, r1
 800f804:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f808:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f80c:	fa1f f888 	uxth.w	r8, r8
 800f810:	1419      	asrs	r1, r3, #16
 800f812:	454e      	cmp	r6, r9
 800f814:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f818:	f84a 3b04 	str.w	r3, [sl], #4
 800f81c:	d8e8      	bhi.n	800f7f0 <__mdiff+0x80>
 800f81e:	1b33      	subs	r3, r6, r4
 800f820:	3b15      	subs	r3, #21
 800f822:	f023 0303 	bic.w	r3, r3, #3
 800f826:	3304      	adds	r3, #4
 800f828:	3415      	adds	r4, #21
 800f82a:	42a6      	cmp	r6, r4
 800f82c:	bf38      	it	cc
 800f82e:	2304      	movcc	r3, #4
 800f830:	441d      	add	r5, r3
 800f832:	4473      	add	r3, lr
 800f834:	469e      	mov	lr, r3
 800f836:	462e      	mov	r6, r5
 800f838:	4566      	cmp	r6, ip
 800f83a:	d30e      	bcc.n	800f85a <__mdiff+0xea>
 800f83c:	f10c 0203 	add.w	r2, ip, #3
 800f840:	1b52      	subs	r2, r2, r5
 800f842:	f022 0203 	bic.w	r2, r2, #3
 800f846:	3d03      	subs	r5, #3
 800f848:	45ac      	cmp	ip, r5
 800f84a:	bf38      	it	cc
 800f84c:	2200      	movcc	r2, #0
 800f84e:	4413      	add	r3, r2
 800f850:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f854:	b17a      	cbz	r2, 800f876 <__mdiff+0x106>
 800f856:	6107      	str	r7, [r0, #16]
 800f858:	e7a4      	b.n	800f7a4 <__mdiff+0x34>
 800f85a:	f856 8b04 	ldr.w	r8, [r6], #4
 800f85e:	fa11 f288 	uxtah	r2, r1, r8
 800f862:	1414      	asrs	r4, r2, #16
 800f864:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f868:	b292      	uxth	r2, r2
 800f86a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f86e:	f84e 2b04 	str.w	r2, [lr], #4
 800f872:	1421      	asrs	r1, r4, #16
 800f874:	e7e0      	b.n	800f838 <__mdiff+0xc8>
 800f876:	3f01      	subs	r7, #1
 800f878:	e7ea      	b.n	800f850 <__mdiff+0xe0>
 800f87a:	bf00      	nop
 800f87c:	080116f9 	.word	0x080116f9
 800f880:	0801170a 	.word	0x0801170a

0800f884 <__d2b>:
 800f884:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f888:	460f      	mov	r7, r1
 800f88a:	2101      	movs	r1, #1
 800f88c:	ec59 8b10 	vmov	r8, r9, d0
 800f890:	4616      	mov	r6, r2
 800f892:	f7ff fcd5 	bl	800f240 <_Balloc>
 800f896:	4604      	mov	r4, r0
 800f898:	b930      	cbnz	r0, 800f8a8 <__d2b+0x24>
 800f89a:	4602      	mov	r2, r0
 800f89c:	4b24      	ldr	r3, [pc, #144]	; (800f930 <__d2b+0xac>)
 800f89e:	4825      	ldr	r0, [pc, #148]	; (800f934 <__d2b+0xb0>)
 800f8a0:	f240 310f 	movw	r1, #783	; 0x30f
 800f8a4:	f000 fa86 	bl	800fdb4 <__assert_func>
 800f8a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f8ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f8b0:	bb2d      	cbnz	r5, 800f8fe <__d2b+0x7a>
 800f8b2:	9301      	str	r3, [sp, #4]
 800f8b4:	f1b8 0300 	subs.w	r3, r8, #0
 800f8b8:	d026      	beq.n	800f908 <__d2b+0x84>
 800f8ba:	4668      	mov	r0, sp
 800f8bc:	9300      	str	r3, [sp, #0]
 800f8be:	f7ff fd87 	bl	800f3d0 <__lo0bits>
 800f8c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f8c6:	b1e8      	cbz	r0, 800f904 <__d2b+0x80>
 800f8c8:	f1c0 0320 	rsb	r3, r0, #32
 800f8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800f8d0:	430b      	orrs	r3, r1
 800f8d2:	40c2      	lsrs	r2, r0
 800f8d4:	6163      	str	r3, [r4, #20]
 800f8d6:	9201      	str	r2, [sp, #4]
 800f8d8:	9b01      	ldr	r3, [sp, #4]
 800f8da:	61a3      	str	r3, [r4, #24]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	bf14      	ite	ne
 800f8e0:	2202      	movne	r2, #2
 800f8e2:	2201      	moveq	r2, #1
 800f8e4:	6122      	str	r2, [r4, #16]
 800f8e6:	b1bd      	cbz	r5, 800f918 <__d2b+0x94>
 800f8e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f8ec:	4405      	add	r5, r0
 800f8ee:	603d      	str	r5, [r7, #0]
 800f8f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f8f4:	6030      	str	r0, [r6, #0]
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	b003      	add	sp, #12
 800f8fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f902:	e7d6      	b.n	800f8b2 <__d2b+0x2e>
 800f904:	6161      	str	r1, [r4, #20]
 800f906:	e7e7      	b.n	800f8d8 <__d2b+0x54>
 800f908:	a801      	add	r0, sp, #4
 800f90a:	f7ff fd61 	bl	800f3d0 <__lo0bits>
 800f90e:	9b01      	ldr	r3, [sp, #4]
 800f910:	6163      	str	r3, [r4, #20]
 800f912:	3020      	adds	r0, #32
 800f914:	2201      	movs	r2, #1
 800f916:	e7e5      	b.n	800f8e4 <__d2b+0x60>
 800f918:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f91c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f920:	6038      	str	r0, [r7, #0]
 800f922:	6918      	ldr	r0, [r3, #16]
 800f924:	f7ff fd34 	bl	800f390 <__hi0bits>
 800f928:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f92c:	e7e2      	b.n	800f8f4 <__d2b+0x70>
 800f92e:	bf00      	nop
 800f930:	080116f9 	.word	0x080116f9
 800f934:	0801170a 	.word	0x0801170a

0800f938 <__ascii_wctomb>:
 800f938:	b149      	cbz	r1, 800f94e <__ascii_wctomb+0x16>
 800f93a:	2aff      	cmp	r2, #255	; 0xff
 800f93c:	bf85      	ittet	hi
 800f93e:	238a      	movhi	r3, #138	; 0x8a
 800f940:	6003      	strhi	r3, [r0, #0]
 800f942:	700a      	strbls	r2, [r1, #0]
 800f944:	f04f 30ff 	movhi.w	r0, #4294967295
 800f948:	bf98      	it	ls
 800f94a:	2001      	movls	r0, #1
 800f94c:	4770      	bx	lr
 800f94e:	4608      	mov	r0, r1
 800f950:	4770      	bx	lr

0800f952 <__ssputs_r>:
 800f952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f956:	688e      	ldr	r6, [r1, #8]
 800f958:	461f      	mov	r7, r3
 800f95a:	42be      	cmp	r6, r7
 800f95c:	680b      	ldr	r3, [r1, #0]
 800f95e:	4682      	mov	sl, r0
 800f960:	460c      	mov	r4, r1
 800f962:	4690      	mov	r8, r2
 800f964:	d82c      	bhi.n	800f9c0 <__ssputs_r+0x6e>
 800f966:	898a      	ldrh	r2, [r1, #12]
 800f968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f96c:	d026      	beq.n	800f9bc <__ssputs_r+0x6a>
 800f96e:	6965      	ldr	r5, [r4, #20]
 800f970:	6909      	ldr	r1, [r1, #16]
 800f972:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f976:	eba3 0901 	sub.w	r9, r3, r1
 800f97a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f97e:	1c7b      	adds	r3, r7, #1
 800f980:	444b      	add	r3, r9
 800f982:	106d      	asrs	r5, r5, #1
 800f984:	429d      	cmp	r5, r3
 800f986:	bf38      	it	cc
 800f988:	461d      	movcc	r5, r3
 800f98a:	0553      	lsls	r3, r2, #21
 800f98c:	d527      	bpl.n	800f9de <__ssputs_r+0x8c>
 800f98e:	4629      	mov	r1, r5
 800f990:	f7ff fbb8 	bl	800f104 <_malloc_r>
 800f994:	4606      	mov	r6, r0
 800f996:	b360      	cbz	r0, 800f9f2 <__ssputs_r+0xa0>
 800f998:	6921      	ldr	r1, [r4, #16]
 800f99a:	464a      	mov	r2, r9
 800f99c:	f7fe fcb3 	bl	800e306 <memcpy>
 800f9a0:	89a3      	ldrh	r3, [r4, #12]
 800f9a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f9a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9aa:	81a3      	strh	r3, [r4, #12]
 800f9ac:	6126      	str	r6, [r4, #16]
 800f9ae:	6165      	str	r5, [r4, #20]
 800f9b0:	444e      	add	r6, r9
 800f9b2:	eba5 0509 	sub.w	r5, r5, r9
 800f9b6:	6026      	str	r6, [r4, #0]
 800f9b8:	60a5      	str	r5, [r4, #8]
 800f9ba:	463e      	mov	r6, r7
 800f9bc:	42be      	cmp	r6, r7
 800f9be:	d900      	bls.n	800f9c2 <__ssputs_r+0x70>
 800f9c0:	463e      	mov	r6, r7
 800f9c2:	6820      	ldr	r0, [r4, #0]
 800f9c4:	4632      	mov	r2, r6
 800f9c6:	4641      	mov	r1, r8
 800f9c8:	f000 f9ca 	bl	800fd60 <memmove>
 800f9cc:	68a3      	ldr	r3, [r4, #8]
 800f9ce:	1b9b      	subs	r3, r3, r6
 800f9d0:	60a3      	str	r3, [r4, #8]
 800f9d2:	6823      	ldr	r3, [r4, #0]
 800f9d4:	4433      	add	r3, r6
 800f9d6:	6023      	str	r3, [r4, #0]
 800f9d8:	2000      	movs	r0, #0
 800f9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9de:	462a      	mov	r2, r5
 800f9e0:	f000 fa1c 	bl	800fe1c <_realloc_r>
 800f9e4:	4606      	mov	r6, r0
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d1e0      	bne.n	800f9ac <__ssputs_r+0x5a>
 800f9ea:	6921      	ldr	r1, [r4, #16]
 800f9ec:	4650      	mov	r0, sl
 800f9ee:	f7ff fb15 	bl	800f01c <_free_r>
 800f9f2:	230c      	movs	r3, #12
 800f9f4:	f8ca 3000 	str.w	r3, [sl]
 800f9f8:	89a3      	ldrh	r3, [r4, #12]
 800f9fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9fe:	81a3      	strh	r3, [r4, #12]
 800fa00:	f04f 30ff 	mov.w	r0, #4294967295
 800fa04:	e7e9      	b.n	800f9da <__ssputs_r+0x88>
	...

0800fa08 <_svfiprintf_r>:
 800fa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa0c:	4698      	mov	r8, r3
 800fa0e:	898b      	ldrh	r3, [r1, #12]
 800fa10:	061b      	lsls	r3, r3, #24
 800fa12:	b09d      	sub	sp, #116	; 0x74
 800fa14:	4607      	mov	r7, r0
 800fa16:	460d      	mov	r5, r1
 800fa18:	4614      	mov	r4, r2
 800fa1a:	d50e      	bpl.n	800fa3a <_svfiprintf_r+0x32>
 800fa1c:	690b      	ldr	r3, [r1, #16]
 800fa1e:	b963      	cbnz	r3, 800fa3a <_svfiprintf_r+0x32>
 800fa20:	2140      	movs	r1, #64	; 0x40
 800fa22:	f7ff fb6f 	bl	800f104 <_malloc_r>
 800fa26:	6028      	str	r0, [r5, #0]
 800fa28:	6128      	str	r0, [r5, #16]
 800fa2a:	b920      	cbnz	r0, 800fa36 <_svfiprintf_r+0x2e>
 800fa2c:	230c      	movs	r3, #12
 800fa2e:	603b      	str	r3, [r7, #0]
 800fa30:	f04f 30ff 	mov.w	r0, #4294967295
 800fa34:	e0d0      	b.n	800fbd8 <_svfiprintf_r+0x1d0>
 800fa36:	2340      	movs	r3, #64	; 0x40
 800fa38:	616b      	str	r3, [r5, #20]
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	9309      	str	r3, [sp, #36]	; 0x24
 800fa3e:	2320      	movs	r3, #32
 800fa40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa44:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa48:	2330      	movs	r3, #48	; 0x30
 800fa4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fbf0 <_svfiprintf_r+0x1e8>
 800fa4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa52:	f04f 0901 	mov.w	r9, #1
 800fa56:	4623      	mov	r3, r4
 800fa58:	469a      	mov	sl, r3
 800fa5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa5e:	b10a      	cbz	r2, 800fa64 <_svfiprintf_r+0x5c>
 800fa60:	2a25      	cmp	r2, #37	; 0x25
 800fa62:	d1f9      	bne.n	800fa58 <_svfiprintf_r+0x50>
 800fa64:	ebba 0b04 	subs.w	fp, sl, r4
 800fa68:	d00b      	beq.n	800fa82 <_svfiprintf_r+0x7a>
 800fa6a:	465b      	mov	r3, fp
 800fa6c:	4622      	mov	r2, r4
 800fa6e:	4629      	mov	r1, r5
 800fa70:	4638      	mov	r0, r7
 800fa72:	f7ff ff6e 	bl	800f952 <__ssputs_r>
 800fa76:	3001      	adds	r0, #1
 800fa78:	f000 80a9 	beq.w	800fbce <_svfiprintf_r+0x1c6>
 800fa7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa7e:	445a      	add	r2, fp
 800fa80:	9209      	str	r2, [sp, #36]	; 0x24
 800fa82:	f89a 3000 	ldrb.w	r3, [sl]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	f000 80a1 	beq.w	800fbce <_svfiprintf_r+0x1c6>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa96:	f10a 0a01 	add.w	sl, sl, #1
 800fa9a:	9304      	str	r3, [sp, #16]
 800fa9c:	9307      	str	r3, [sp, #28]
 800fa9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800faa2:	931a      	str	r3, [sp, #104]	; 0x68
 800faa4:	4654      	mov	r4, sl
 800faa6:	2205      	movs	r2, #5
 800faa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faac:	4850      	ldr	r0, [pc, #320]	; (800fbf0 <_svfiprintf_r+0x1e8>)
 800faae:	f7f0 fbff 	bl	80002b0 <memchr>
 800fab2:	9a04      	ldr	r2, [sp, #16]
 800fab4:	b9d8      	cbnz	r0, 800faee <_svfiprintf_r+0xe6>
 800fab6:	06d0      	lsls	r0, r2, #27
 800fab8:	bf44      	itt	mi
 800faba:	2320      	movmi	r3, #32
 800fabc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fac0:	0711      	lsls	r1, r2, #28
 800fac2:	bf44      	itt	mi
 800fac4:	232b      	movmi	r3, #43	; 0x2b
 800fac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faca:	f89a 3000 	ldrb.w	r3, [sl]
 800face:	2b2a      	cmp	r3, #42	; 0x2a
 800fad0:	d015      	beq.n	800fafe <_svfiprintf_r+0xf6>
 800fad2:	9a07      	ldr	r2, [sp, #28]
 800fad4:	4654      	mov	r4, sl
 800fad6:	2000      	movs	r0, #0
 800fad8:	f04f 0c0a 	mov.w	ip, #10
 800fadc:	4621      	mov	r1, r4
 800fade:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fae2:	3b30      	subs	r3, #48	; 0x30
 800fae4:	2b09      	cmp	r3, #9
 800fae6:	d94d      	bls.n	800fb84 <_svfiprintf_r+0x17c>
 800fae8:	b1b0      	cbz	r0, 800fb18 <_svfiprintf_r+0x110>
 800faea:	9207      	str	r2, [sp, #28]
 800faec:	e014      	b.n	800fb18 <_svfiprintf_r+0x110>
 800faee:	eba0 0308 	sub.w	r3, r0, r8
 800faf2:	fa09 f303 	lsl.w	r3, r9, r3
 800faf6:	4313      	orrs	r3, r2
 800faf8:	9304      	str	r3, [sp, #16]
 800fafa:	46a2      	mov	sl, r4
 800fafc:	e7d2      	b.n	800faa4 <_svfiprintf_r+0x9c>
 800fafe:	9b03      	ldr	r3, [sp, #12]
 800fb00:	1d19      	adds	r1, r3, #4
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	9103      	str	r1, [sp, #12]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	bfbb      	ittet	lt
 800fb0a:	425b      	neglt	r3, r3
 800fb0c:	f042 0202 	orrlt.w	r2, r2, #2
 800fb10:	9307      	strge	r3, [sp, #28]
 800fb12:	9307      	strlt	r3, [sp, #28]
 800fb14:	bfb8      	it	lt
 800fb16:	9204      	strlt	r2, [sp, #16]
 800fb18:	7823      	ldrb	r3, [r4, #0]
 800fb1a:	2b2e      	cmp	r3, #46	; 0x2e
 800fb1c:	d10c      	bne.n	800fb38 <_svfiprintf_r+0x130>
 800fb1e:	7863      	ldrb	r3, [r4, #1]
 800fb20:	2b2a      	cmp	r3, #42	; 0x2a
 800fb22:	d134      	bne.n	800fb8e <_svfiprintf_r+0x186>
 800fb24:	9b03      	ldr	r3, [sp, #12]
 800fb26:	1d1a      	adds	r2, r3, #4
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	9203      	str	r2, [sp, #12]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	bfb8      	it	lt
 800fb30:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb34:	3402      	adds	r4, #2
 800fb36:	9305      	str	r3, [sp, #20]
 800fb38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fc00 <_svfiprintf_r+0x1f8>
 800fb3c:	7821      	ldrb	r1, [r4, #0]
 800fb3e:	2203      	movs	r2, #3
 800fb40:	4650      	mov	r0, sl
 800fb42:	f7f0 fbb5 	bl	80002b0 <memchr>
 800fb46:	b138      	cbz	r0, 800fb58 <_svfiprintf_r+0x150>
 800fb48:	9b04      	ldr	r3, [sp, #16]
 800fb4a:	eba0 000a 	sub.w	r0, r0, sl
 800fb4e:	2240      	movs	r2, #64	; 0x40
 800fb50:	4082      	lsls	r2, r0
 800fb52:	4313      	orrs	r3, r2
 800fb54:	3401      	adds	r4, #1
 800fb56:	9304      	str	r3, [sp, #16]
 800fb58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb5c:	4825      	ldr	r0, [pc, #148]	; (800fbf4 <_svfiprintf_r+0x1ec>)
 800fb5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb62:	2206      	movs	r2, #6
 800fb64:	f7f0 fba4 	bl	80002b0 <memchr>
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d038      	beq.n	800fbde <_svfiprintf_r+0x1d6>
 800fb6c:	4b22      	ldr	r3, [pc, #136]	; (800fbf8 <_svfiprintf_r+0x1f0>)
 800fb6e:	bb1b      	cbnz	r3, 800fbb8 <_svfiprintf_r+0x1b0>
 800fb70:	9b03      	ldr	r3, [sp, #12]
 800fb72:	3307      	adds	r3, #7
 800fb74:	f023 0307 	bic.w	r3, r3, #7
 800fb78:	3308      	adds	r3, #8
 800fb7a:	9303      	str	r3, [sp, #12]
 800fb7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb7e:	4433      	add	r3, r6
 800fb80:	9309      	str	r3, [sp, #36]	; 0x24
 800fb82:	e768      	b.n	800fa56 <_svfiprintf_r+0x4e>
 800fb84:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb88:	460c      	mov	r4, r1
 800fb8a:	2001      	movs	r0, #1
 800fb8c:	e7a6      	b.n	800fadc <_svfiprintf_r+0xd4>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	3401      	adds	r4, #1
 800fb92:	9305      	str	r3, [sp, #20]
 800fb94:	4619      	mov	r1, r3
 800fb96:	f04f 0c0a 	mov.w	ip, #10
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fba0:	3a30      	subs	r2, #48	; 0x30
 800fba2:	2a09      	cmp	r2, #9
 800fba4:	d903      	bls.n	800fbae <_svfiprintf_r+0x1a6>
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d0c6      	beq.n	800fb38 <_svfiprintf_r+0x130>
 800fbaa:	9105      	str	r1, [sp, #20]
 800fbac:	e7c4      	b.n	800fb38 <_svfiprintf_r+0x130>
 800fbae:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	e7f0      	b.n	800fb9a <_svfiprintf_r+0x192>
 800fbb8:	ab03      	add	r3, sp, #12
 800fbba:	9300      	str	r3, [sp, #0]
 800fbbc:	462a      	mov	r2, r5
 800fbbe:	4b0f      	ldr	r3, [pc, #60]	; (800fbfc <_svfiprintf_r+0x1f4>)
 800fbc0:	a904      	add	r1, sp, #16
 800fbc2:	4638      	mov	r0, r7
 800fbc4:	f7fd fe22 	bl	800d80c <_printf_float>
 800fbc8:	1c42      	adds	r2, r0, #1
 800fbca:	4606      	mov	r6, r0
 800fbcc:	d1d6      	bne.n	800fb7c <_svfiprintf_r+0x174>
 800fbce:	89ab      	ldrh	r3, [r5, #12]
 800fbd0:	065b      	lsls	r3, r3, #25
 800fbd2:	f53f af2d 	bmi.w	800fa30 <_svfiprintf_r+0x28>
 800fbd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbd8:	b01d      	add	sp, #116	; 0x74
 800fbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbde:	ab03      	add	r3, sp, #12
 800fbe0:	9300      	str	r3, [sp, #0]
 800fbe2:	462a      	mov	r2, r5
 800fbe4:	4b05      	ldr	r3, [pc, #20]	; (800fbfc <_svfiprintf_r+0x1f4>)
 800fbe6:	a904      	add	r1, sp, #16
 800fbe8:	4638      	mov	r0, r7
 800fbea:	f7fe f8b3 	bl	800dd54 <_printf_i>
 800fbee:	e7eb      	b.n	800fbc8 <_svfiprintf_r+0x1c0>
 800fbf0:	08011864 	.word	0x08011864
 800fbf4:	0801186e 	.word	0x0801186e
 800fbf8:	0800d80d 	.word	0x0800d80d
 800fbfc:	0800f953 	.word	0x0800f953
 800fc00:	0801186a 	.word	0x0801186a

0800fc04 <__sflush_r>:
 800fc04:	898a      	ldrh	r2, [r1, #12]
 800fc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc0a:	4605      	mov	r5, r0
 800fc0c:	0710      	lsls	r0, r2, #28
 800fc0e:	460c      	mov	r4, r1
 800fc10:	d458      	bmi.n	800fcc4 <__sflush_r+0xc0>
 800fc12:	684b      	ldr	r3, [r1, #4]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	dc05      	bgt.n	800fc24 <__sflush_r+0x20>
 800fc18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	dc02      	bgt.n	800fc24 <__sflush_r+0x20>
 800fc1e:	2000      	movs	r0, #0
 800fc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc26:	2e00      	cmp	r6, #0
 800fc28:	d0f9      	beq.n	800fc1e <__sflush_r+0x1a>
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fc30:	682f      	ldr	r7, [r5, #0]
 800fc32:	6a21      	ldr	r1, [r4, #32]
 800fc34:	602b      	str	r3, [r5, #0]
 800fc36:	d032      	beq.n	800fc9e <__sflush_r+0x9a>
 800fc38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fc3a:	89a3      	ldrh	r3, [r4, #12]
 800fc3c:	075a      	lsls	r2, r3, #29
 800fc3e:	d505      	bpl.n	800fc4c <__sflush_r+0x48>
 800fc40:	6863      	ldr	r3, [r4, #4]
 800fc42:	1ac0      	subs	r0, r0, r3
 800fc44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc46:	b10b      	cbz	r3, 800fc4c <__sflush_r+0x48>
 800fc48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc4a:	1ac0      	subs	r0, r0, r3
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	4602      	mov	r2, r0
 800fc50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc52:	6a21      	ldr	r1, [r4, #32]
 800fc54:	4628      	mov	r0, r5
 800fc56:	47b0      	blx	r6
 800fc58:	1c43      	adds	r3, r0, #1
 800fc5a:	89a3      	ldrh	r3, [r4, #12]
 800fc5c:	d106      	bne.n	800fc6c <__sflush_r+0x68>
 800fc5e:	6829      	ldr	r1, [r5, #0]
 800fc60:	291d      	cmp	r1, #29
 800fc62:	d82b      	bhi.n	800fcbc <__sflush_r+0xb8>
 800fc64:	4a29      	ldr	r2, [pc, #164]	; (800fd0c <__sflush_r+0x108>)
 800fc66:	410a      	asrs	r2, r1
 800fc68:	07d6      	lsls	r6, r2, #31
 800fc6a:	d427      	bmi.n	800fcbc <__sflush_r+0xb8>
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	6062      	str	r2, [r4, #4]
 800fc70:	04d9      	lsls	r1, r3, #19
 800fc72:	6922      	ldr	r2, [r4, #16]
 800fc74:	6022      	str	r2, [r4, #0]
 800fc76:	d504      	bpl.n	800fc82 <__sflush_r+0x7e>
 800fc78:	1c42      	adds	r2, r0, #1
 800fc7a:	d101      	bne.n	800fc80 <__sflush_r+0x7c>
 800fc7c:	682b      	ldr	r3, [r5, #0]
 800fc7e:	b903      	cbnz	r3, 800fc82 <__sflush_r+0x7e>
 800fc80:	6560      	str	r0, [r4, #84]	; 0x54
 800fc82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc84:	602f      	str	r7, [r5, #0]
 800fc86:	2900      	cmp	r1, #0
 800fc88:	d0c9      	beq.n	800fc1e <__sflush_r+0x1a>
 800fc8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc8e:	4299      	cmp	r1, r3
 800fc90:	d002      	beq.n	800fc98 <__sflush_r+0x94>
 800fc92:	4628      	mov	r0, r5
 800fc94:	f7ff f9c2 	bl	800f01c <_free_r>
 800fc98:	2000      	movs	r0, #0
 800fc9a:	6360      	str	r0, [r4, #52]	; 0x34
 800fc9c:	e7c0      	b.n	800fc20 <__sflush_r+0x1c>
 800fc9e:	2301      	movs	r3, #1
 800fca0:	4628      	mov	r0, r5
 800fca2:	47b0      	blx	r6
 800fca4:	1c41      	adds	r1, r0, #1
 800fca6:	d1c8      	bne.n	800fc3a <__sflush_r+0x36>
 800fca8:	682b      	ldr	r3, [r5, #0]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d0c5      	beq.n	800fc3a <__sflush_r+0x36>
 800fcae:	2b1d      	cmp	r3, #29
 800fcb0:	d001      	beq.n	800fcb6 <__sflush_r+0xb2>
 800fcb2:	2b16      	cmp	r3, #22
 800fcb4:	d101      	bne.n	800fcba <__sflush_r+0xb6>
 800fcb6:	602f      	str	r7, [r5, #0]
 800fcb8:	e7b1      	b.n	800fc1e <__sflush_r+0x1a>
 800fcba:	89a3      	ldrh	r3, [r4, #12]
 800fcbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcc0:	81a3      	strh	r3, [r4, #12]
 800fcc2:	e7ad      	b.n	800fc20 <__sflush_r+0x1c>
 800fcc4:	690f      	ldr	r7, [r1, #16]
 800fcc6:	2f00      	cmp	r7, #0
 800fcc8:	d0a9      	beq.n	800fc1e <__sflush_r+0x1a>
 800fcca:	0793      	lsls	r3, r2, #30
 800fccc:	680e      	ldr	r6, [r1, #0]
 800fcce:	bf08      	it	eq
 800fcd0:	694b      	ldreq	r3, [r1, #20]
 800fcd2:	600f      	str	r7, [r1, #0]
 800fcd4:	bf18      	it	ne
 800fcd6:	2300      	movne	r3, #0
 800fcd8:	eba6 0807 	sub.w	r8, r6, r7
 800fcdc:	608b      	str	r3, [r1, #8]
 800fcde:	f1b8 0f00 	cmp.w	r8, #0
 800fce2:	dd9c      	ble.n	800fc1e <__sflush_r+0x1a>
 800fce4:	6a21      	ldr	r1, [r4, #32]
 800fce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fce8:	4643      	mov	r3, r8
 800fcea:	463a      	mov	r2, r7
 800fcec:	4628      	mov	r0, r5
 800fcee:	47b0      	blx	r6
 800fcf0:	2800      	cmp	r0, #0
 800fcf2:	dc06      	bgt.n	800fd02 <__sflush_r+0xfe>
 800fcf4:	89a3      	ldrh	r3, [r4, #12]
 800fcf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcfa:	81a3      	strh	r3, [r4, #12]
 800fcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800fd00:	e78e      	b.n	800fc20 <__sflush_r+0x1c>
 800fd02:	4407      	add	r7, r0
 800fd04:	eba8 0800 	sub.w	r8, r8, r0
 800fd08:	e7e9      	b.n	800fcde <__sflush_r+0xda>
 800fd0a:	bf00      	nop
 800fd0c:	dfbffffe 	.word	0xdfbffffe

0800fd10 <_fflush_r>:
 800fd10:	b538      	push	{r3, r4, r5, lr}
 800fd12:	690b      	ldr	r3, [r1, #16]
 800fd14:	4605      	mov	r5, r0
 800fd16:	460c      	mov	r4, r1
 800fd18:	b913      	cbnz	r3, 800fd20 <_fflush_r+0x10>
 800fd1a:	2500      	movs	r5, #0
 800fd1c:	4628      	mov	r0, r5
 800fd1e:	bd38      	pop	{r3, r4, r5, pc}
 800fd20:	b118      	cbz	r0, 800fd2a <_fflush_r+0x1a>
 800fd22:	6a03      	ldr	r3, [r0, #32]
 800fd24:	b90b      	cbnz	r3, 800fd2a <_fflush_r+0x1a>
 800fd26:	f7fe f9c3 	bl	800e0b0 <__sinit>
 800fd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d0f3      	beq.n	800fd1a <_fflush_r+0xa>
 800fd32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fd34:	07d0      	lsls	r0, r2, #31
 800fd36:	d404      	bmi.n	800fd42 <_fflush_r+0x32>
 800fd38:	0599      	lsls	r1, r3, #22
 800fd3a:	d402      	bmi.n	800fd42 <_fflush_r+0x32>
 800fd3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd3e:	f7fe fae0 	bl	800e302 <__retarget_lock_acquire_recursive>
 800fd42:	4628      	mov	r0, r5
 800fd44:	4621      	mov	r1, r4
 800fd46:	f7ff ff5d 	bl	800fc04 <__sflush_r>
 800fd4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd4c:	07da      	lsls	r2, r3, #31
 800fd4e:	4605      	mov	r5, r0
 800fd50:	d4e4      	bmi.n	800fd1c <_fflush_r+0xc>
 800fd52:	89a3      	ldrh	r3, [r4, #12]
 800fd54:	059b      	lsls	r3, r3, #22
 800fd56:	d4e1      	bmi.n	800fd1c <_fflush_r+0xc>
 800fd58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd5a:	f7fe fad3 	bl	800e304 <__retarget_lock_release_recursive>
 800fd5e:	e7dd      	b.n	800fd1c <_fflush_r+0xc>

0800fd60 <memmove>:
 800fd60:	4288      	cmp	r0, r1
 800fd62:	b510      	push	{r4, lr}
 800fd64:	eb01 0402 	add.w	r4, r1, r2
 800fd68:	d902      	bls.n	800fd70 <memmove+0x10>
 800fd6a:	4284      	cmp	r4, r0
 800fd6c:	4623      	mov	r3, r4
 800fd6e:	d807      	bhi.n	800fd80 <memmove+0x20>
 800fd70:	1e43      	subs	r3, r0, #1
 800fd72:	42a1      	cmp	r1, r4
 800fd74:	d008      	beq.n	800fd88 <memmove+0x28>
 800fd76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd7e:	e7f8      	b.n	800fd72 <memmove+0x12>
 800fd80:	4402      	add	r2, r0
 800fd82:	4601      	mov	r1, r0
 800fd84:	428a      	cmp	r2, r1
 800fd86:	d100      	bne.n	800fd8a <memmove+0x2a>
 800fd88:	bd10      	pop	{r4, pc}
 800fd8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd92:	e7f7      	b.n	800fd84 <memmove+0x24>

0800fd94 <_sbrk_r>:
 800fd94:	b538      	push	{r3, r4, r5, lr}
 800fd96:	4d06      	ldr	r5, [pc, #24]	; (800fdb0 <_sbrk_r+0x1c>)
 800fd98:	2300      	movs	r3, #0
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	4608      	mov	r0, r1
 800fd9e:	602b      	str	r3, [r5, #0]
 800fda0:	f001 fab0 	bl	8011304 <_sbrk>
 800fda4:	1c43      	adds	r3, r0, #1
 800fda6:	d102      	bne.n	800fdae <_sbrk_r+0x1a>
 800fda8:	682b      	ldr	r3, [r5, #0]
 800fdaa:	b103      	cbz	r3, 800fdae <_sbrk_r+0x1a>
 800fdac:	6023      	str	r3, [r4, #0]
 800fdae:	bd38      	pop	{r3, r4, r5, pc}
 800fdb0:	2001a440 	.word	0x2001a440

0800fdb4 <__assert_func>:
 800fdb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fdb6:	4614      	mov	r4, r2
 800fdb8:	461a      	mov	r2, r3
 800fdba:	4b09      	ldr	r3, [pc, #36]	; (800fde0 <__assert_func+0x2c>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	4605      	mov	r5, r0
 800fdc0:	68d8      	ldr	r0, [r3, #12]
 800fdc2:	b14c      	cbz	r4, 800fdd8 <__assert_func+0x24>
 800fdc4:	4b07      	ldr	r3, [pc, #28]	; (800fde4 <__assert_func+0x30>)
 800fdc6:	9100      	str	r1, [sp, #0]
 800fdc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fdcc:	4906      	ldr	r1, [pc, #24]	; (800fde8 <__assert_func+0x34>)
 800fdce:	462b      	mov	r3, r5
 800fdd0:	f000 f854 	bl	800fe7c <fiprintf>
 800fdd4:	f000 f864 	bl	800fea0 <abort>
 800fdd8:	4b04      	ldr	r3, [pc, #16]	; (800fdec <__assert_func+0x38>)
 800fdda:	461c      	mov	r4, r3
 800fddc:	e7f3      	b.n	800fdc6 <__assert_func+0x12>
 800fdde:	bf00      	nop
 800fde0:	200001e0 	.word	0x200001e0
 800fde4:	08011875 	.word	0x08011875
 800fde8:	08011882 	.word	0x08011882
 800fdec:	080118b0 	.word	0x080118b0

0800fdf0 <_calloc_r>:
 800fdf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fdf2:	fba1 2402 	umull	r2, r4, r1, r2
 800fdf6:	b94c      	cbnz	r4, 800fe0c <_calloc_r+0x1c>
 800fdf8:	4611      	mov	r1, r2
 800fdfa:	9201      	str	r2, [sp, #4]
 800fdfc:	f7ff f982 	bl	800f104 <_malloc_r>
 800fe00:	9a01      	ldr	r2, [sp, #4]
 800fe02:	4605      	mov	r5, r0
 800fe04:	b930      	cbnz	r0, 800fe14 <_calloc_r+0x24>
 800fe06:	4628      	mov	r0, r5
 800fe08:	b003      	add	sp, #12
 800fe0a:	bd30      	pop	{r4, r5, pc}
 800fe0c:	220c      	movs	r2, #12
 800fe0e:	6002      	str	r2, [r0, #0]
 800fe10:	2500      	movs	r5, #0
 800fe12:	e7f8      	b.n	800fe06 <_calloc_r+0x16>
 800fe14:	4621      	mov	r1, r4
 800fe16:	f7fe fa08 	bl	800e22a <memset>
 800fe1a:	e7f4      	b.n	800fe06 <_calloc_r+0x16>

0800fe1c <_realloc_r>:
 800fe1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe20:	4680      	mov	r8, r0
 800fe22:	4614      	mov	r4, r2
 800fe24:	460e      	mov	r6, r1
 800fe26:	b921      	cbnz	r1, 800fe32 <_realloc_r+0x16>
 800fe28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe2c:	4611      	mov	r1, r2
 800fe2e:	f7ff b969 	b.w	800f104 <_malloc_r>
 800fe32:	b92a      	cbnz	r2, 800fe40 <_realloc_r+0x24>
 800fe34:	f7ff f8f2 	bl	800f01c <_free_r>
 800fe38:	4625      	mov	r5, r4
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe40:	f000 f835 	bl	800feae <_malloc_usable_size_r>
 800fe44:	4284      	cmp	r4, r0
 800fe46:	4607      	mov	r7, r0
 800fe48:	d802      	bhi.n	800fe50 <_realloc_r+0x34>
 800fe4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe4e:	d812      	bhi.n	800fe76 <_realloc_r+0x5a>
 800fe50:	4621      	mov	r1, r4
 800fe52:	4640      	mov	r0, r8
 800fe54:	f7ff f956 	bl	800f104 <_malloc_r>
 800fe58:	4605      	mov	r5, r0
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	d0ed      	beq.n	800fe3a <_realloc_r+0x1e>
 800fe5e:	42bc      	cmp	r4, r7
 800fe60:	4622      	mov	r2, r4
 800fe62:	4631      	mov	r1, r6
 800fe64:	bf28      	it	cs
 800fe66:	463a      	movcs	r2, r7
 800fe68:	f7fe fa4d 	bl	800e306 <memcpy>
 800fe6c:	4631      	mov	r1, r6
 800fe6e:	4640      	mov	r0, r8
 800fe70:	f7ff f8d4 	bl	800f01c <_free_r>
 800fe74:	e7e1      	b.n	800fe3a <_realloc_r+0x1e>
 800fe76:	4635      	mov	r5, r6
 800fe78:	e7df      	b.n	800fe3a <_realloc_r+0x1e>
	...

0800fe7c <fiprintf>:
 800fe7c:	b40e      	push	{r1, r2, r3}
 800fe7e:	b503      	push	{r0, r1, lr}
 800fe80:	4601      	mov	r1, r0
 800fe82:	ab03      	add	r3, sp, #12
 800fe84:	4805      	ldr	r0, [pc, #20]	; (800fe9c <fiprintf+0x20>)
 800fe86:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe8a:	6800      	ldr	r0, [r0, #0]
 800fe8c:	9301      	str	r3, [sp, #4]
 800fe8e:	f000 f83f 	bl	800ff10 <_vfiprintf_r>
 800fe92:	b002      	add	sp, #8
 800fe94:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe98:	b003      	add	sp, #12
 800fe9a:	4770      	bx	lr
 800fe9c:	200001e0 	.word	0x200001e0

0800fea0 <abort>:
 800fea0:	b508      	push	{r3, lr}
 800fea2:	2006      	movs	r0, #6
 800fea4:	f000 fa0c 	bl	80102c0 <raise>
 800fea8:	2001      	movs	r0, #1
 800feaa:	f7f4 f91f 	bl	80040ec <_exit>

0800feae <_malloc_usable_size_r>:
 800feae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800feb2:	1f18      	subs	r0, r3, #4
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	bfbc      	itt	lt
 800feb8:	580b      	ldrlt	r3, [r1, r0]
 800feba:	18c0      	addlt	r0, r0, r3
 800febc:	4770      	bx	lr

0800febe <__sfputc_r>:
 800febe:	6893      	ldr	r3, [r2, #8]
 800fec0:	3b01      	subs	r3, #1
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	b410      	push	{r4}
 800fec6:	6093      	str	r3, [r2, #8]
 800fec8:	da08      	bge.n	800fedc <__sfputc_r+0x1e>
 800feca:	6994      	ldr	r4, [r2, #24]
 800fecc:	42a3      	cmp	r3, r4
 800fece:	db01      	blt.n	800fed4 <__sfputc_r+0x16>
 800fed0:	290a      	cmp	r1, #10
 800fed2:	d103      	bne.n	800fedc <__sfputc_r+0x1e>
 800fed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fed8:	f000 b934 	b.w	8010144 <__swbuf_r>
 800fedc:	6813      	ldr	r3, [r2, #0]
 800fede:	1c58      	adds	r0, r3, #1
 800fee0:	6010      	str	r0, [r2, #0]
 800fee2:	7019      	strb	r1, [r3, #0]
 800fee4:	4608      	mov	r0, r1
 800fee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800feea:	4770      	bx	lr

0800feec <__sfputs_r>:
 800feec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feee:	4606      	mov	r6, r0
 800fef0:	460f      	mov	r7, r1
 800fef2:	4614      	mov	r4, r2
 800fef4:	18d5      	adds	r5, r2, r3
 800fef6:	42ac      	cmp	r4, r5
 800fef8:	d101      	bne.n	800fefe <__sfputs_r+0x12>
 800fefa:	2000      	movs	r0, #0
 800fefc:	e007      	b.n	800ff0e <__sfputs_r+0x22>
 800fefe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff02:	463a      	mov	r2, r7
 800ff04:	4630      	mov	r0, r6
 800ff06:	f7ff ffda 	bl	800febe <__sfputc_r>
 800ff0a:	1c43      	adds	r3, r0, #1
 800ff0c:	d1f3      	bne.n	800fef6 <__sfputs_r+0xa>
 800ff0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff10 <_vfiprintf_r>:
 800ff10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff14:	460d      	mov	r5, r1
 800ff16:	b09d      	sub	sp, #116	; 0x74
 800ff18:	4614      	mov	r4, r2
 800ff1a:	4698      	mov	r8, r3
 800ff1c:	4606      	mov	r6, r0
 800ff1e:	b118      	cbz	r0, 800ff28 <_vfiprintf_r+0x18>
 800ff20:	6a03      	ldr	r3, [r0, #32]
 800ff22:	b90b      	cbnz	r3, 800ff28 <_vfiprintf_r+0x18>
 800ff24:	f7fe f8c4 	bl	800e0b0 <__sinit>
 800ff28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff2a:	07d9      	lsls	r1, r3, #31
 800ff2c:	d405      	bmi.n	800ff3a <_vfiprintf_r+0x2a>
 800ff2e:	89ab      	ldrh	r3, [r5, #12]
 800ff30:	059a      	lsls	r2, r3, #22
 800ff32:	d402      	bmi.n	800ff3a <_vfiprintf_r+0x2a>
 800ff34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff36:	f7fe f9e4 	bl	800e302 <__retarget_lock_acquire_recursive>
 800ff3a:	89ab      	ldrh	r3, [r5, #12]
 800ff3c:	071b      	lsls	r3, r3, #28
 800ff3e:	d501      	bpl.n	800ff44 <_vfiprintf_r+0x34>
 800ff40:	692b      	ldr	r3, [r5, #16]
 800ff42:	b99b      	cbnz	r3, 800ff6c <_vfiprintf_r+0x5c>
 800ff44:	4629      	mov	r1, r5
 800ff46:	4630      	mov	r0, r6
 800ff48:	f000 f93a 	bl	80101c0 <__swsetup_r>
 800ff4c:	b170      	cbz	r0, 800ff6c <_vfiprintf_r+0x5c>
 800ff4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff50:	07dc      	lsls	r4, r3, #31
 800ff52:	d504      	bpl.n	800ff5e <_vfiprintf_r+0x4e>
 800ff54:	f04f 30ff 	mov.w	r0, #4294967295
 800ff58:	b01d      	add	sp, #116	; 0x74
 800ff5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff5e:	89ab      	ldrh	r3, [r5, #12]
 800ff60:	0598      	lsls	r0, r3, #22
 800ff62:	d4f7      	bmi.n	800ff54 <_vfiprintf_r+0x44>
 800ff64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff66:	f7fe f9cd 	bl	800e304 <__retarget_lock_release_recursive>
 800ff6a:	e7f3      	b.n	800ff54 <_vfiprintf_r+0x44>
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ff70:	2320      	movs	r3, #32
 800ff72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff76:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff7a:	2330      	movs	r3, #48	; 0x30
 800ff7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010130 <_vfiprintf_r+0x220>
 800ff80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff84:	f04f 0901 	mov.w	r9, #1
 800ff88:	4623      	mov	r3, r4
 800ff8a:	469a      	mov	sl, r3
 800ff8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff90:	b10a      	cbz	r2, 800ff96 <_vfiprintf_r+0x86>
 800ff92:	2a25      	cmp	r2, #37	; 0x25
 800ff94:	d1f9      	bne.n	800ff8a <_vfiprintf_r+0x7a>
 800ff96:	ebba 0b04 	subs.w	fp, sl, r4
 800ff9a:	d00b      	beq.n	800ffb4 <_vfiprintf_r+0xa4>
 800ff9c:	465b      	mov	r3, fp
 800ff9e:	4622      	mov	r2, r4
 800ffa0:	4629      	mov	r1, r5
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	f7ff ffa2 	bl	800feec <__sfputs_r>
 800ffa8:	3001      	adds	r0, #1
 800ffaa:	f000 80a9 	beq.w	8010100 <_vfiprintf_r+0x1f0>
 800ffae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffb0:	445a      	add	r2, fp
 800ffb2:	9209      	str	r2, [sp, #36]	; 0x24
 800ffb4:	f89a 3000 	ldrb.w	r3, [sl]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	f000 80a1 	beq.w	8010100 <_vfiprintf_r+0x1f0>
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ffc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffc8:	f10a 0a01 	add.w	sl, sl, #1
 800ffcc:	9304      	str	r3, [sp, #16]
 800ffce:	9307      	str	r3, [sp, #28]
 800ffd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ffd4:	931a      	str	r3, [sp, #104]	; 0x68
 800ffd6:	4654      	mov	r4, sl
 800ffd8:	2205      	movs	r2, #5
 800ffda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffde:	4854      	ldr	r0, [pc, #336]	; (8010130 <_vfiprintf_r+0x220>)
 800ffe0:	f7f0 f966 	bl	80002b0 <memchr>
 800ffe4:	9a04      	ldr	r2, [sp, #16]
 800ffe6:	b9d8      	cbnz	r0, 8010020 <_vfiprintf_r+0x110>
 800ffe8:	06d1      	lsls	r1, r2, #27
 800ffea:	bf44      	itt	mi
 800ffec:	2320      	movmi	r3, #32
 800ffee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fff2:	0713      	lsls	r3, r2, #28
 800fff4:	bf44      	itt	mi
 800fff6:	232b      	movmi	r3, #43	; 0x2b
 800fff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fffc:	f89a 3000 	ldrb.w	r3, [sl]
 8010000:	2b2a      	cmp	r3, #42	; 0x2a
 8010002:	d015      	beq.n	8010030 <_vfiprintf_r+0x120>
 8010004:	9a07      	ldr	r2, [sp, #28]
 8010006:	4654      	mov	r4, sl
 8010008:	2000      	movs	r0, #0
 801000a:	f04f 0c0a 	mov.w	ip, #10
 801000e:	4621      	mov	r1, r4
 8010010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010014:	3b30      	subs	r3, #48	; 0x30
 8010016:	2b09      	cmp	r3, #9
 8010018:	d94d      	bls.n	80100b6 <_vfiprintf_r+0x1a6>
 801001a:	b1b0      	cbz	r0, 801004a <_vfiprintf_r+0x13a>
 801001c:	9207      	str	r2, [sp, #28]
 801001e:	e014      	b.n	801004a <_vfiprintf_r+0x13a>
 8010020:	eba0 0308 	sub.w	r3, r0, r8
 8010024:	fa09 f303 	lsl.w	r3, r9, r3
 8010028:	4313      	orrs	r3, r2
 801002a:	9304      	str	r3, [sp, #16]
 801002c:	46a2      	mov	sl, r4
 801002e:	e7d2      	b.n	800ffd6 <_vfiprintf_r+0xc6>
 8010030:	9b03      	ldr	r3, [sp, #12]
 8010032:	1d19      	adds	r1, r3, #4
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	9103      	str	r1, [sp, #12]
 8010038:	2b00      	cmp	r3, #0
 801003a:	bfbb      	ittet	lt
 801003c:	425b      	neglt	r3, r3
 801003e:	f042 0202 	orrlt.w	r2, r2, #2
 8010042:	9307      	strge	r3, [sp, #28]
 8010044:	9307      	strlt	r3, [sp, #28]
 8010046:	bfb8      	it	lt
 8010048:	9204      	strlt	r2, [sp, #16]
 801004a:	7823      	ldrb	r3, [r4, #0]
 801004c:	2b2e      	cmp	r3, #46	; 0x2e
 801004e:	d10c      	bne.n	801006a <_vfiprintf_r+0x15a>
 8010050:	7863      	ldrb	r3, [r4, #1]
 8010052:	2b2a      	cmp	r3, #42	; 0x2a
 8010054:	d134      	bne.n	80100c0 <_vfiprintf_r+0x1b0>
 8010056:	9b03      	ldr	r3, [sp, #12]
 8010058:	1d1a      	adds	r2, r3, #4
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	9203      	str	r2, [sp, #12]
 801005e:	2b00      	cmp	r3, #0
 8010060:	bfb8      	it	lt
 8010062:	f04f 33ff 	movlt.w	r3, #4294967295
 8010066:	3402      	adds	r4, #2
 8010068:	9305      	str	r3, [sp, #20]
 801006a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010140 <_vfiprintf_r+0x230>
 801006e:	7821      	ldrb	r1, [r4, #0]
 8010070:	2203      	movs	r2, #3
 8010072:	4650      	mov	r0, sl
 8010074:	f7f0 f91c 	bl	80002b0 <memchr>
 8010078:	b138      	cbz	r0, 801008a <_vfiprintf_r+0x17a>
 801007a:	9b04      	ldr	r3, [sp, #16]
 801007c:	eba0 000a 	sub.w	r0, r0, sl
 8010080:	2240      	movs	r2, #64	; 0x40
 8010082:	4082      	lsls	r2, r0
 8010084:	4313      	orrs	r3, r2
 8010086:	3401      	adds	r4, #1
 8010088:	9304      	str	r3, [sp, #16]
 801008a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801008e:	4829      	ldr	r0, [pc, #164]	; (8010134 <_vfiprintf_r+0x224>)
 8010090:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010094:	2206      	movs	r2, #6
 8010096:	f7f0 f90b 	bl	80002b0 <memchr>
 801009a:	2800      	cmp	r0, #0
 801009c:	d03f      	beq.n	801011e <_vfiprintf_r+0x20e>
 801009e:	4b26      	ldr	r3, [pc, #152]	; (8010138 <_vfiprintf_r+0x228>)
 80100a0:	bb1b      	cbnz	r3, 80100ea <_vfiprintf_r+0x1da>
 80100a2:	9b03      	ldr	r3, [sp, #12]
 80100a4:	3307      	adds	r3, #7
 80100a6:	f023 0307 	bic.w	r3, r3, #7
 80100aa:	3308      	adds	r3, #8
 80100ac:	9303      	str	r3, [sp, #12]
 80100ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100b0:	443b      	add	r3, r7
 80100b2:	9309      	str	r3, [sp, #36]	; 0x24
 80100b4:	e768      	b.n	800ff88 <_vfiprintf_r+0x78>
 80100b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80100ba:	460c      	mov	r4, r1
 80100bc:	2001      	movs	r0, #1
 80100be:	e7a6      	b.n	801000e <_vfiprintf_r+0xfe>
 80100c0:	2300      	movs	r3, #0
 80100c2:	3401      	adds	r4, #1
 80100c4:	9305      	str	r3, [sp, #20]
 80100c6:	4619      	mov	r1, r3
 80100c8:	f04f 0c0a 	mov.w	ip, #10
 80100cc:	4620      	mov	r0, r4
 80100ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100d2:	3a30      	subs	r2, #48	; 0x30
 80100d4:	2a09      	cmp	r2, #9
 80100d6:	d903      	bls.n	80100e0 <_vfiprintf_r+0x1d0>
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d0c6      	beq.n	801006a <_vfiprintf_r+0x15a>
 80100dc:	9105      	str	r1, [sp, #20]
 80100de:	e7c4      	b.n	801006a <_vfiprintf_r+0x15a>
 80100e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80100e4:	4604      	mov	r4, r0
 80100e6:	2301      	movs	r3, #1
 80100e8:	e7f0      	b.n	80100cc <_vfiprintf_r+0x1bc>
 80100ea:	ab03      	add	r3, sp, #12
 80100ec:	9300      	str	r3, [sp, #0]
 80100ee:	462a      	mov	r2, r5
 80100f0:	4b12      	ldr	r3, [pc, #72]	; (801013c <_vfiprintf_r+0x22c>)
 80100f2:	a904      	add	r1, sp, #16
 80100f4:	4630      	mov	r0, r6
 80100f6:	f7fd fb89 	bl	800d80c <_printf_float>
 80100fa:	4607      	mov	r7, r0
 80100fc:	1c78      	adds	r0, r7, #1
 80100fe:	d1d6      	bne.n	80100ae <_vfiprintf_r+0x19e>
 8010100:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010102:	07d9      	lsls	r1, r3, #31
 8010104:	d405      	bmi.n	8010112 <_vfiprintf_r+0x202>
 8010106:	89ab      	ldrh	r3, [r5, #12]
 8010108:	059a      	lsls	r2, r3, #22
 801010a:	d402      	bmi.n	8010112 <_vfiprintf_r+0x202>
 801010c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801010e:	f7fe f8f9 	bl	800e304 <__retarget_lock_release_recursive>
 8010112:	89ab      	ldrh	r3, [r5, #12]
 8010114:	065b      	lsls	r3, r3, #25
 8010116:	f53f af1d 	bmi.w	800ff54 <_vfiprintf_r+0x44>
 801011a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801011c:	e71c      	b.n	800ff58 <_vfiprintf_r+0x48>
 801011e:	ab03      	add	r3, sp, #12
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	462a      	mov	r2, r5
 8010124:	4b05      	ldr	r3, [pc, #20]	; (801013c <_vfiprintf_r+0x22c>)
 8010126:	a904      	add	r1, sp, #16
 8010128:	4630      	mov	r0, r6
 801012a:	f7fd fe13 	bl	800dd54 <_printf_i>
 801012e:	e7e4      	b.n	80100fa <_vfiprintf_r+0x1ea>
 8010130:	08011864 	.word	0x08011864
 8010134:	0801186e 	.word	0x0801186e
 8010138:	0800d80d 	.word	0x0800d80d
 801013c:	0800feed 	.word	0x0800feed
 8010140:	0801186a 	.word	0x0801186a

08010144 <__swbuf_r>:
 8010144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010146:	460e      	mov	r6, r1
 8010148:	4614      	mov	r4, r2
 801014a:	4605      	mov	r5, r0
 801014c:	b118      	cbz	r0, 8010156 <__swbuf_r+0x12>
 801014e:	6a03      	ldr	r3, [r0, #32]
 8010150:	b90b      	cbnz	r3, 8010156 <__swbuf_r+0x12>
 8010152:	f7fd ffad 	bl	800e0b0 <__sinit>
 8010156:	69a3      	ldr	r3, [r4, #24]
 8010158:	60a3      	str	r3, [r4, #8]
 801015a:	89a3      	ldrh	r3, [r4, #12]
 801015c:	071a      	lsls	r2, r3, #28
 801015e:	d525      	bpl.n	80101ac <__swbuf_r+0x68>
 8010160:	6923      	ldr	r3, [r4, #16]
 8010162:	b31b      	cbz	r3, 80101ac <__swbuf_r+0x68>
 8010164:	6823      	ldr	r3, [r4, #0]
 8010166:	6922      	ldr	r2, [r4, #16]
 8010168:	1a98      	subs	r0, r3, r2
 801016a:	6963      	ldr	r3, [r4, #20]
 801016c:	b2f6      	uxtb	r6, r6
 801016e:	4283      	cmp	r3, r0
 8010170:	4637      	mov	r7, r6
 8010172:	dc04      	bgt.n	801017e <__swbuf_r+0x3a>
 8010174:	4621      	mov	r1, r4
 8010176:	4628      	mov	r0, r5
 8010178:	f7ff fdca 	bl	800fd10 <_fflush_r>
 801017c:	b9e0      	cbnz	r0, 80101b8 <__swbuf_r+0x74>
 801017e:	68a3      	ldr	r3, [r4, #8]
 8010180:	3b01      	subs	r3, #1
 8010182:	60a3      	str	r3, [r4, #8]
 8010184:	6823      	ldr	r3, [r4, #0]
 8010186:	1c5a      	adds	r2, r3, #1
 8010188:	6022      	str	r2, [r4, #0]
 801018a:	701e      	strb	r6, [r3, #0]
 801018c:	6962      	ldr	r2, [r4, #20]
 801018e:	1c43      	adds	r3, r0, #1
 8010190:	429a      	cmp	r2, r3
 8010192:	d004      	beq.n	801019e <__swbuf_r+0x5a>
 8010194:	89a3      	ldrh	r3, [r4, #12]
 8010196:	07db      	lsls	r3, r3, #31
 8010198:	d506      	bpl.n	80101a8 <__swbuf_r+0x64>
 801019a:	2e0a      	cmp	r6, #10
 801019c:	d104      	bne.n	80101a8 <__swbuf_r+0x64>
 801019e:	4621      	mov	r1, r4
 80101a0:	4628      	mov	r0, r5
 80101a2:	f7ff fdb5 	bl	800fd10 <_fflush_r>
 80101a6:	b938      	cbnz	r0, 80101b8 <__swbuf_r+0x74>
 80101a8:	4638      	mov	r0, r7
 80101aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101ac:	4621      	mov	r1, r4
 80101ae:	4628      	mov	r0, r5
 80101b0:	f000 f806 	bl	80101c0 <__swsetup_r>
 80101b4:	2800      	cmp	r0, #0
 80101b6:	d0d5      	beq.n	8010164 <__swbuf_r+0x20>
 80101b8:	f04f 37ff 	mov.w	r7, #4294967295
 80101bc:	e7f4      	b.n	80101a8 <__swbuf_r+0x64>
	...

080101c0 <__swsetup_r>:
 80101c0:	b538      	push	{r3, r4, r5, lr}
 80101c2:	4b2a      	ldr	r3, [pc, #168]	; (801026c <__swsetup_r+0xac>)
 80101c4:	4605      	mov	r5, r0
 80101c6:	6818      	ldr	r0, [r3, #0]
 80101c8:	460c      	mov	r4, r1
 80101ca:	b118      	cbz	r0, 80101d4 <__swsetup_r+0x14>
 80101cc:	6a03      	ldr	r3, [r0, #32]
 80101ce:	b90b      	cbnz	r3, 80101d4 <__swsetup_r+0x14>
 80101d0:	f7fd ff6e 	bl	800e0b0 <__sinit>
 80101d4:	89a3      	ldrh	r3, [r4, #12]
 80101d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101da:	0718      	lsls	r0, r3, #28
 80101dc:	d422      	bmi.n	8010224 <__swsetup_r+0x64>
 80101de:	06d9      	lsls	r1, r3, #27
 80101e0:	d407      	bmi.n	80101f2 <__swsetup_r+0x32>
 80101e2:	2309      	movs	r3, #9
 80101e4:	602b      	str	r3, [r5, #0]
 80101e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80101ea:	81a3      	strh	r3, [r4, #12]
 80101ec:	f04f 30ff 	mov.w	r0, #4294967295
 80101f0:	e034      	b.n	801025c <__swsetup_r+0x9c>
 80101f2:	0758      	lsls	r0, r3, #29
 80101f4:	d512      	bpl.n	801021c <__swsetup_r+0x5c>
 80101f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101f8:	b141      	cbz	r1, 801020c <__swsetup_r+0x4c>
 80101fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101fe:	4299      	cmp	r1, r3
 8010200:	d002      	beq.n	8010208 <__swsetup_r+0x48>
 8010202:	4628      	mov	r0, r5
 8010204:	f7fe ff0a 	bl	800f01c <_free_r>
 8010208:	2300      	movs	r3, #0
 801020a:	6363      	str	r3, [r4, #52]	; 0x34
 801020c:	89a3      	ldrh	r3, [r4, #12]
 801020e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010212:	81a3      	strh	r3, [r4, #12]
 8010214:	2300      	movs	r3, #0
 8010216:	6063      	str	r3, [r4, #4]
 8010218:	6923      	ldr	r3, [r4, #16]
 801021a:	6023      	str	r3, [r4, #0]
 801021c:	89a3      	ldrh	r3, [r4, #12]
 801021e:	f043 0308 	orr.w	r3, r3, #8
 8010222:	81a3      	strh	r3, [r4, #12]
 8010224:	6923      	ldr	r3, [r4, #16]
 8010226:	b94b      	cbnz	r3, 801023c <__swsetup_r+0x7c>
 8010228:	89a3      	ldrh	r3, [r4, #12]
 801022a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801022e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010232:	d003      	beq.n	801023c <__swsetup_r+0x7c>
 8010234:	4621      	mov	r1, r4
 8010236:	4628      	mov	r0, r5
 8010238:	f000 f884 	bl	8010344 <__smakebuf_r>
 801023c:	89a0      	ldrh	r0, [r4, #12]
 801023e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010242:	f010 0301 	ands.w	r3, r0, #1
 8010246:	d00a      	beq.n	801025e <__swsetup_r+0x9e>
 8010248:	2300      	movs	r3, #0
 801024a:	60a3      	str	r3, [r4, #8]
 801024c:	6963      	ldr	r3, [r4, #20]
 801024e:	425b      	negs	r3, r3
 8010250:	61a3      	str	r3, [r4, #24]
 8010252:	6923      	ldr	r3, [r4, #16]
 8010254:	b943      	cbnz	r3, 8010268 <__swsetup_r+0xa8>
 8010256:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801025a:	d1c4      	bne.n	80101e6 <__swsetup_r+0x26>
 801025c:	bd38      	pop	{r3, r4, r5, pc}
 801025e:	0781      	lsls	r1, r0, #30
 8010260:	bf58      	it	pl
 8010262:	6963      	ldrpl	r3, [r4, #20]
 8010264:	60a3      	str	r3, [r4, #8]
 8010266:	e7f4      	b.n	8010252 <__swsetup_r+0x92>
 8010268:	2000      	movs	r0, #0
 801026a:	e7f7      	b.n	801025c <__swsetup_r+0x9c>
 801026c:	200001e0 	.word	0x200001e0

08010270 <_raise_r>:
 8010270:	291f      	cmp	r1, #31
 8010272:	b538      	push	{r3, r4, r5, lr}
 8010274:	4604      	mov	r4, r0
 8010276:	460d      	mov	r5, r1
 8010278:	d904      	bls.n	8010284 <_raise_r+0x14>
 801027a:	2316      	movs	r3, #22
 801027c:	6003      	str	r3, [r0, #0]
 801027e:	f04f 30ff 	mov.w	r0, #4294967295
 8010282:	bd38      	pop	{r3, r4, r5, pc}
 8010284:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010286:	b112      	cbz	r2, 801028e <_raise_r+0x1e>
 8010288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801028c:	b94b      	cbnz	r3, 80102a2 <_raise_r+0x32>
 801028e:	4620      	mov	r0, r4
 8010290:	f000 f830 	bl	80102f4 <_getpid_r>
 8010294:	462a      	mov	r2, r5
 8010296:	4601      	mov	r1, r0
 8010298:	4620      	mov	r0, r4
 801029a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801029e:	f000 b817 	b.w	80102d0 <_kill_r>
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	d00a      	beq.n	80102bc <_raise_r+0x4c>
 80102a6:	1c59      	adds	r1, r3, #1
 80102a8:	d103      	bne.n	80102b2 <_raise_r+0x42>
 80102aa:	2316      	movs	r3, #22
 80102ac:	6003      	str	r3, [r0, #0]
 80102ae:	2001      	movs	r0, #1
 80102b0:	e7e7      	b.n	8010282 <_raise_r+0x12>
 80102b2:	2400      	movs	r4, #0
 80102b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80102b8:	4628      	mov	r0, r5
 80102ba:	4798      	blx	r3
 80102bc:	2000      	movs	r0, #0
 80102be:	e7e0      	b.n	8010282 <_raise_r+0x12>

080102c0 <raise>:
 80102c0:	4b02      	ldr	r3, [pc, #8]	; (80102cc <raise+0xc>)
 80102c2:	4601      	mov	r1, r0
 80102c4:	6818      	ldr	r0, [r3, #0]
 80102c6:	f7ff bfd3 	b.w	8010270 <_raise_r>
 80102ca:	bf00      	nop
 80102cc:	200001e0 	.word	0x200001e0

080102d0 <_kill_r>:
 80102d0:	b538      	push	{r3, r4, r5, lr}
 80102d2:	4d07      	ldr	r5, [pc, #28]	; (80102f0 <_kill_r+0x20>)
 80102d4:	2300      	movs	r3, #0
 80102d6:	4604      	mov	r4, r0
 80102d8:	4608      	mov	r0, r1
 80102da:	4611      	mov	r1, r2
 80102dc:	602b      	str	r3, [r5, #0]
 80102de:	f7f3 fef5 	bl	80040cc <_kill>
 80102e2:	1c43      	adds	r3, r0, #1
 80102e4:	d102      	bne.n	80102ec <_kill_r+0x1c>
 80102e6:	682b      	ldr	r3, [r5, #0]
 80102e8:	b103      	cbz	r3, 80102ec <_kill_r+0x1c>
 80102ea:	6023      	str	r3, [r4, #0]
 80102ec:	bd38      	pop	{r3, r4, r5, pc}
 80102ee:	bf00      	nop
 80102f0:	2001a440 	.word	0x2001a440

080102f4 <_getpid_r>:
 80102f4:	f7f3 bee2 	b.w	80040bc <_getpid>

080102f8 <__swhatbuf_r>:
 80102f8:	b570      	push	{r4, r5, r6, lr}
 80102fa:	460c      	mov	r4, r1
 80102fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010300:	2900      	cmp	r1, #0
 8010302:	b096      	sub	sp, #88	; 0x58
 8010304:	4615      	mov	r5, r2
 8010306:	461e      	mov	r6, r3
 8010308:	da0d      	bge.n	8010326 <__swhatbuf_r+0x2e>
 801030a:	89a3      	ldrh	r3, [r4, #12]
 801030c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010310:	f04f 0100 	mov.w	r1, #0
 8010314:	bf0c      	ite	eq
 8010316:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801031a:	2340      	movne	r3, #64	; 0x40
 801031c:	2000      	movs	r0, #0
 801031e:	6031      	str	r1, [r6, #0]
 8010320:	602b      	str	r3, [r5, #0]
 8010322:	b016      	add	sp, #88	; 0x58
 8010324:	bd70      	pop	{r4, r5, r6, pc}
 8010326:	466a      	mov	r2, sp
 8010328:	f000 f848 	bl	80103bc <_fstat_r>
 801032c:	2800      	cmp	r0, #0
 801032e:	dbec      	blt.n	801030a <__swhatbuf_r+0x12>
 8010330:	9901      	ldr	r1, [sp, #4]
 8010332:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010336:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801033a:	4259      	negs	r1, r3
 801033c:	4159      	adcs	r1, r3
 801033e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010342:	e7eb      	b.n	801031c <__swhatbuf_r+0x24>

08010344 <__smakebuf_r>:
 8010344:	898b      	ldrh	r3, [r1, #12]
 8010346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010348:	079d      	lsls	r5, r3, #30
 801034a:	4606      	mov	r6, r0
 801034c:	460c      	mov	r4, r1
 801034e:	d507      	bpl.n	8010360 <__smakebuf_r+0x1c>
 8010350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010354:	6023      	str	r3, [r4, #0]
 8010356:	6123      	str	r3, [r4, #16]
 8010358:	2301      	movs	r3, #1
 801035a:	6163      	str	r3, [r4, #20]
 801035c:	b002      	add	sp, #8
 801035e:	bd70      	pop	{r4, r5, r6, pc}
 8010360:	ab01      	add	r3, sp, #4
 8010362:	466a      	mov	r2, sp
 8010364:	f7ff ffc8 	bl	80102f8 <__swhatbuf_r>
 8010368:	9900      	ldr	r1, [sp, #0]
 801036a:	4605      	mov	r5, r0
 801036c:	4630      	mov	r0, r6
 801036e:	f7fe fec9 	bl	800f104 <_malloc_r>
 8010372:	b948      	cbnz	r0, 8010388 <__smakebuf_r+0x44>
 8010374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010378:	059a      	lsls	r2, r3, #22
 801037a:	d4ef      	bmi.n	801035c <__smakebuf_r+0x18>
 801037c:	f023 0303 	bic.w	r3, r3, #3
 8010380:	f043 0302 	orr.w	r3, r3, #2
 8010384:	81a3      	strh	r3, [r4, #12]
 8010386:	e7e3      	b.n	8010350 <__smakebuf_r+0xc>
 8010388:	89a3      	ldrh	r3, [r4, #12]
 801038a:	6020      	str	r0, [r4, #0]
 801038c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010390:	81a3      	strh	r3, [r4, #12]
 8010392:	9b00      	ldr	r3, [sp, #0]
 8010394:	6163      	str	r3, [r4, #20]
 8010396:	9b01      	ldr	r3, [sp, #4]
 8010398:	6120      	str	r0, [r4, #16]
 801039a:	b15b      	cbz	r3, 80103b4 <__smakebuf_r+0x70>
 801039c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103a0:	4630      	mov	r0, r6
 80103a2:	f000 f81d 	bl	80103e0 <_isatty_r>
 80103a6:	b128      	cbz	r0, 80103b4 <__smakebuf_r+0x70>
 80103a8:	89a3      	ldrh	r3, [r4, #12]
 80103aa:	f023 0303 	bic.w	r3, r3, #3
 80103ae:	f043 0301 	orr.w	r3, r3, #1
 80103b2:	81a3      	strh	r3, [r4, #12]
 80103b4:	89a3      	ldrh	r3, [r4, #12]
 80103b6:	431d      	orrs	r5, r3
 80103b8:	81a5      	strh	r5, [r4, #12]
 80103ba:	e7cf      	b.n	801035c <__smakebuf_r+0x18>

080103bc <_fstat_r>:
 80103bc:	b538      	push	{r3, r4, r5, lr}
 80103be:	4d07      	ldr	r5, [pc, #28]	; (80103dc <_fstat_r+0x20>)
 80103c0:	2300      	movs	r3, #0
 80103c2:	4604      	mov	r4, r0
 80103c4:	4608      	mov	r0, r1
 80103c6:	4611      	mov	r1, r2
 80103c8:	602b      	str	r3, [r5, #0]
 80103ca:	f7f3 fec2 	bl	8004152 <_fstat>
 80103ce:	1c43      	adds	r3, r0, #1
 80103d0:	d102      	bne.n	80103d8 <_fstat_r+0x1c>
 80103d2:	682b      	ldr	r3, [r5, #0]
 80103d4:	b103      	cbz	r3, 80103d8 <_fstat_r+0x1c>
 80103d6:	6023      	str	r3, [r4, #0]
 80103d8:	bd38      	pop	{r3, r4, r5, pc}
 80103da:	bf00      	nop
 80103dc:	2001a440 	.word	0x2001a440

080103e0 <_isatty_r>:
 80103e0:	b538      	push	{r3, r4, r5, lr}
 80103e2:	4d06      	ldr	r5, [pc, #24]	; (80103fc <_isatty_r+0x1c>)
 80103e4:	2300      	movs	r3, #0
 80103e6:	4604      	mov	r4, r0
 80103e8:	4608      	mov	r0, r1
 80103ea:	602b      	str	r3, [r5, #0]
 80103ec:	f7f3 fec1 	bl	8004172 <_isatty>
 80103f0:	1c43      	adds	r3, r0, #1
 80103f2:	d102      	bne.n	80103fa <_isatty_r+0x1a>
 80103f4:	682b      	ldr	r3, [r5, #0]
 80103f6:	b103      	cbz	r3, 80103fa <_isatty_r+0x1a>
 80103f8:	6023      	str	r3, [r4, #0]
 80103fa:	bd38      	pop	{r3, r4, r5, pc}
 80103fc:	2001a440 	.word	0x2001a440

08010400 <pow>:
 8010400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010402:	ed2d 8b02 	vpush	{d8}
 8010406:	eeb0 8a40 	vmov.f32	s16, s0
 801040a:	eef0 8a60 	vmov.f32	s17, s1
 801040e:	ec55 4b11 	vmov	r4, r5, d1
 8010412:	f000 f995 	bl	8010740 <__ieee754_pow>
 8010416:	4622      	mov	r2, r4
 8010418:	462b      	mov	r3, r5
 801041a:	4620      	mov	r0, r4
 801041c:	4629      	mov	r1, r5
 801041e:	ec57 6b10 	vmov	r6, r7, d0
 8010422:	f7f0 fbf3 	bl	8000c0c <__aeabi_dcmpun>
 8010426:	2800      	cmp	r0, #0
 8010428:	d13b      	bne.n	80104a2 <pow+0xa2>
 801042a:	ec51 0b18 	vmov	r0, r1, d8
 801042e:	2200      	movs	r2, #0
 8010430:	2300      	movs	r3, #0
 8010432:	f7f0 fbb9 	bl	8000ba8 <__aeabi_dcmpeq>
 8010436:	b1b8      	cbz	r0, 8010468 <pow+0x68>
 8010438:	2200      	movs	r2, #0
 801043a:	2300      	movs	r3, #0
 801043c:	4620      	mov	r0, r4
 801043e:	4629      	mov	r1, r5
 8010440:	f7f0 fbb2 	bl	8000ba8 <__aeabi_dcmpeq>
 8010444:	2800      	cmp	r0, #0
 8010446:	d146      	bne.n	80104d6 <pow+0xd6>
 8010448:	ec45 4b10 	vmov	d0, r4, r5
 801044c:	f000 f848 	bl	80104e0 <finite>
 8010450:	b338      	cbz	r0, 80104a2 <pow+0xa2>
 8010452:	2200      	movs	r2, #0
 8010454:	2300      	movs	r3, #0
 8010456:	4620      	mov	r0, r4
 8010458:	4629      	mov	r1, r5
 801045a:	f7f0 fbaf 	bl	8000bbc <__aeabi_dcmplt>
 801045e:	b300      	cbz	r0, 80104a2 <pow+0xa2>
 8010460:	f7fd ff24 	bl	800e2ac <__errno>
 8010464:	2322      	movs	r3, #34	; 0x22
 8010466:	e01b      	b.n	80104a0 <pow+0xa0>
 8010468:	ec47 6b10 	vmov	d0, r6, r7
 801046c:	f000 f838 	bl	80104e0 <finite>
 8010470:	b9e0      	cbnz	r0, 80104ac <pow+0xac>
 8010472:	eeb0 0a48 	vmov.f32	s0, s16
 8010476:	eef0 0a68 	vmov.f32	s1, s17
 801047a:	f000 f831 	bl	80104e0 <finite>
 801047e:	b1a8      	cbz	r0, 80104ac <pow+0xac>
 8010480:	ec45 4b10 	vmov	d0, r4, r5
 8010484:	f000 f82c 	bl	80104e0 <finite>
 8010488:	b180      	cbz	r0, 80104ac <pow+0xac>
 801048a:	4632      	mov	r2, r6
 801048c:	463b      	mov	r3, r7
 801048e:	4630      	mov	r0, r6
 8010490:	4639      	mov	r1, r7
 8010492:	f7f0 fbbb 	bl	8000c0c <__aeabi_dcmpun>
 8010496:	2800      	cmp	r0, #0
 8010498:	d0e2      	beq.n	8010460 <pow+0x60>
 801049a:	f7fd ff07 	bl	800e2ac <__errno>
 801049e:	2321      	movs	r3, #33	; 0x21
 80104a0:	6003      	str	r3, [r0, #0]
 80104a2:	ecbd 8b02 	vpop	{d8}
 80104a6:	ec47 6b10 	vmov	d0, r6, r7
 80104aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104ac:	2200      	movs	r2, #0
 80104ae:	2300      	movs	r3, #0
 80104b0:	4630      	mov	r0, r6
 80104b2:	4639      	mov	r1, r7
 80104b4:	f7f0 fb78 	bl	8000ba8 <__aeabi_dcmpeq>
 80104b8:	2800      	cmp	r0, #0
 80104ba:	d0f2      	beq.n	80104a2 <pow+0xa2>
 80104bc:	eeb0 0a48 	vmov.f32	s0, s16
 80104c0:	eef0 0a68 	vmov.f32	s1, s17
 80104c4:	f000 f80c 	bl	80104e0 <finite>
 80104c8:	2800      	cmp	r0, #0
 80104ca:	d0ea      	beq.n	80104a2 <pow+0xa2>
 80104cc:	ec45 4b10 	vmov	d0, r4, r5
 80104d0:	f000 f806 	bl	80104e0 <finite>
 80104d4:	e7c3      	b.n	801045e <pow+0x5e>
 80104d6:	4f01      	ldr	r7, [pc, #4]	; (80104dc <pow+0xdc>)
 80104d8:	2600      	movs	r6, #0
 80104da:	e7e2      	b.n	80104a2 <pow+0xa2>
 80104dc:	3ff00000 	.word	0x3ff00000

080104e0 <finite>:
 80104e0:	b082      	sub	sp, #8
 80104e2:	ed8d 0b00 	vstr	d0, [sp]
 80104e6:	9801      	ldr	r0, [sp, #4]
 80104e8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80104ec:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80104f0:	0fc0      	lsrs	r0, r0, #31
 80104f2:	b002      	add	sp, #8
 80104f4:	4770      	bx	lr
	...

080104f8 <__ieee754_sqrt>:
 80104f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104fc:	ec55 4b10 	vmov	r4, r5, d0
 8010500:	4e67      	ldr	r6, [pc, #412]	; (80106a0 <__ieee754_sqrt+0x1a8>)
 8010502:	43ae      	bics	r6, r5
 8010504:	ee10 0a10 	vmov	r0, s0
 8010508:	ee10 2a10 	vmov	r2, s0
 801050c:	4629      	mov	r1, r5
 801050e:	462b      	mov	r3, r5
 8010510:	d10d      	bne.n	801052e <__ieee754_sqrt+0x36>
 8010512:	f7f0 f8e1 	bl	80006d8 <__aeabi_dmul>
 8010516:	4602      	mov	r2, r0
 8010518:	460b      	mov	r3, r1
 801051a:	4620      	mov	r0, r4
 801051c:	4629      	mov	r1, r5
 801051e:	f7ef ff25 	bl	800036c <__adddf3>
 8010522:	4604      	mov	r4, r0
 8010524:	460d      	mov	r5, r1
 8010526:	ec45 4b10 	vmov	d0, r4, r5
 801052a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801052e:	2d00      	cmp	r5, #0
 8010530:	dc0b      	bgt.n	801054a <__ieee754_sqrt+0x52>
 8010532:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010536:	4326      	orrs	r6, r4
 8010538:	d0f5      	beq.n	8010526 <__ieee754_sqrt+0x2e>
 801053a:	b135      	cbz	r5, 801054a <__ieee754_sqrt+0x52>
 801053c:	f7ef ff14 	bl	8000368 <__aeabi_dsub>
 8010540:	4602      	mov	r2, r0
 8010542:	460b      	mov	r3, r1
 8010544:	f7f0 f9f2 	bl	800092c <__aeabi_ddiv>
 8010548:	e7eb      	b.n	8010522 <__ieee754_sqrt+0x2a>
 801054a:	1509      	asrs	r1, r1, #20
 801054c:	f000 808d 	beq.w	801066a <__ieee754_sqrt+0x172>
 8010550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010554:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8010558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801055c:	07c9      	lsls	r1, r1, #31
 801055e:	bf5c      	itt	pl
 8010560:	005b      	lslpl	r3, r3, #1
 8010562:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8010566:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801056a:	bf58      	it	pl
 801056c:	0052      	lslpl	r2, r2, #1
 801056e:	2500      	movs	r5, #0
 8010570:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010574:	1076      	asrs	r6, r6, #1
 8010576:	0052      	lsls	r2, r2, #1
 8010578:	f04f 0e16 	mov.w	lr, #22
 801057c:	46ac      	mov	ip, r5
 801057e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010582:	eb0c 0001 	add.w	r0, ip, r1
 8010586:	4298      	cmp	r0, r3
 8010588:	bfde      	ittt	le
 801058a:	1a1b      	suble	r3, r3, r0
 801058c:	eb00 0c01 	addle.w	ip, r0, r1
 8010590:	186d      	addle	r5, r5, r1
 8010592:	005b      	lsls	r3, r3, #1
 8010594:	f1be 0e01 	subs.w	lr, lr, #1
 8010598:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801059c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80105a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80105a4:	d1ed      	bne.n	8010582 <__ieee754_sqrt+0x8a>
 80105a6:	4674      	mov	r4, lr
 80105a8:	2720      	movs	r7, #32
 80105aa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80105ae:	4563      	cmp	r3, ip
 80105b0:	eb01 000e 	add.w	r0, r1, lr
 80105b4:	dc02      	bgt.n	80105bc <__ieee754_sqrt+0xc4>
 80105b6:	d113      	bne.n	80105e0 <__ieee754_sqrt+0xe8>
 80105b8:	4290      	cmp	r0, r2
 80105ba:	d811      	bhi.n	80105e0 <__ieee754_sqrt+0xe8>
 80105bc:	2800      	cmp	r0, #0
 80105be:	eb00 0e01 	add.w	lr, r0, r1
 80105c2:	da57      	bge.n	8010674 <__ieee754_sqrt+0x17c>
 80105c4:	f1be 0f00 	cmp.w	lr, #0
 80105c8:	db54      	blt.n	8010674 <__ieee754_sqrt+0x17c>
 80105ca:	f10c 0801 	add.w	r8, ip, #1
 80105ce:	eba3 030c 	sub.w	r3, r3, ip
 80105d2:	4290      	cmp	r0, r2
 80105d4:	bf88      	it	hi
 80105d6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80105da:	1a12      	subs	r2, r2, r0
 80105dc:	440c      	add	r4, r1
 80105de:	46c4      	mov	ip, r8
 80105e0:	005b      	lsls	r3, r3, #1
 80105e2:	3f01      	subs	r7, #1
 80105e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80105e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80105ec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80105f0:	d1dd      	bne.n	80105ae <__ieee754_sqrt+0xb6>
 80105f2:	4313      	orrs	r3, r2
 80105f4:	d01b      	beq.n	801062e <__ieee754_sqrt+0x136>
 80105f6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80106a4 <__ieee754_sqrt+0x1ac>
 80105fa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80106a8 <__ieee754_sqrt+0x1b0>
 80105fe:	e9da 0100 	ldrd	r0, r1, [sl]
 8010602:	e9db 2300 	ldrd	r2, r3, [fp]
 8010606:	f7ef feaf 	bl	8000368 <__aeabi_dsub>
 801060a:	e9da 8900 	ldrd	r8, r9, [sl]
 801060e:	4602      	mov	r2, r0
 8010610:	460b      	mov	r3, r1
 8010612:	4640      	mov	r0, r8
 8010614:	4649      	mov	r1, r9
 8010616:	f7f0 fadb 	bl	8000bd0 <__aeabi_dcmple>
 801061a:	b140      	cbz	r0, 801062e <__ieee754_sqrt+0x136>
 801061c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010620:	e9da 0100 	ldrd	r0, r1, [sl]
 8010624:	e9db 2300 	ldrd	r2, r3, [fp]
 8010628:	d126      	bne.n	8010678 <__ieee754_sqrt+0x180>
 801062a:	3501      	adds	r5, #1
 801062c:	463c      	mov	r4, r7
 801062e:	106a      	asrs	r2, r5, #1
 8010630:	0863      	lsrs	r3, r4, #1
 8010632:	07e9      	lsls	r1, r5, #31
 8010634:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010638:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801063c:	bf48      	it	mi
 801063e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010642:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8010646:	461c      	mov	r4, r3
 8010648:	e76d      	b.n	8010526 <__ieee754_sqrt+0x2e>
 801064a:	0ad3      	lsrs	r3, r2, #11
 801064c:	3815      	subs	r0, #21
 801064e:	0552      	lsls	r2, r2, #21
 8010650:	2b00      	cmp	r3, #0
 8010652:	d0fa      	beq.n	801064a <__ieee754_sqrt+0x152>
 8010654:	02dc      	lsls	r4, r3, #11
 8010656:	d50a      	bpl.n	801066e <__ieee754_sqrt+0x176>
 8010658:	f1c1 0420 	rsb	r4, r1, #32
 801065c:	fa22 f404 	lsr.w	r4, r2, r4
 8010660:	1e4d      	subs	r5, r1, #1
 8010662:	408a      	lsls	r2, r1
 8010664:	4323      	orrs	r3, r4
 8010666:	1b41      	subs	r1, r0, r5
 8010668:	e772      	b.n	8010550 <__ieee754_sqrt+0x58>
 801066a:	4608      	mov	r0, r1
 801066c:	e7f0      	b.n	8010650 <__ieee754_sqrt+0x158>
 801066e:	005b      	lsls	r3, r3, #1
 8010670:	3101      	adds	r1, #1
 8010672:	e7ef      	b.n	8010654 <__ieee754_sqrt+0x15c>
 8010674:	46e0      	mov	r8, ip
 8010676:	e7aa      	b.n	80105ce <__ieee754_sqrt+0xd6>
 8010678:	f7ef fe78 	bl	800036c <__adddf3>
 801067c:	e9da 8900 	ldrd	r8, r9, [sl]
 8010680:	4602      	mov	r2, r0
 8010682:	460b      	mov	r3, r1
 8010684:	4640      	mov	r0, r8
 8010686:	4649      	mov	r1, r9
 8010688:	f7f0 fa98 	bl	8000bbc <__aeabi_dcmplt>
 801068c:	b120      	cbz	r0, 8010698 <__ieee754_sqrt+0x1a0>
 801068e:	1ca0      	adds	r0, r4, #2
 8010690:	bf08      	it	eq
 8010692:	3501      	addeq	r5, #1
 8010694:	3402      	adds	r4, #2
 8010696:	e7ca      	b.n	801062e <__ieee754_sqrt+0x136>
 8010698:	3401      	adds	r4, #1
 801069a:	f024 0401 	bic.w	r4, r4, #1
 801069e:	e7c6      	b.n	801062e <__ieee754_sqrt+0x136>
 80106a0:	7ff00000 	.word	0x7ff00000
 80106a4:	200001e8 	.word	0x200001e8
 80106a8:	200001f0 	.word	0x200001f0

080106ac <round>:
 80106ac:	ec53 2b10 	vmov	r2, r3, d0
 80106b0:	b570      	push	{r4, r5, r6, lr}
 80106b2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80106b6:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80106ba:	2813      	cmp	r0, #19
 80106bc:	ee10 5a10 	vmov	r5, s0
 80106c0:	4619      	mov	r1, r3
 80106c2:	dc18      	bgt.n	80106f6 <round+0x4a>
 80106c4:	2800      	cmp	r0, #0
 80106c6:	da09      	bge.n	80106dc <round+0x30>
 80106c8:	3001      	adds	r0, #1
 80106ca:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80106ce:	d103      	bne.n	80106d8 <round+0x2c>
 80106d0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80106d4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80106d8:	2300      	movs	r3, #0
 80106da:	e02a      	b.n	8010732 <round+0x86>
 80106dc:	4c16      	ldr	r4, [pc, #88]	; (8010738 <round+0x8c>)
 80106de:	4104      	asrs	r4, r0
 80106e0:	ea03 0604 	and.w	r6, r3, r4
 80106e4:	4316      	orrs	r6, r2
 80106e6:	d011      	beq.n	801070c <round+0x60>
 80106e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80106ec:	4103      	asrs	r3, r0
 80106ee:	440b      	add	r3, r1
 80106f0:	ea23 0104 	bic.w	r1, r3, r4
 80106f4:	e7f0      	b.n	80106d8 <round+0x2c>
 80106f6:	2833      	cmp	r0, #51	; 0x33
 80106f8:	dd0b      	ble.n	8010712 <round+0x66>
 80106fa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80106fe:	d105      	bne.n	801070c <round+0x60>
 8010700:	ee10 0a10 	vmov	r0, s0
 8010704:	f7ef fe32 	bl	800036c <__adddf3>
 8010708:	4602      	mov	r2, r0
 801070a:	460b      	mov	r3, r1
 801070c:	ec43 2b10 	vmov	d0, r2, r3
 8010710:	bd70      	pop	{r4, r5, r6, pc}
 8010712:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8010716:	f04f 34ff 	mov.w	r4, #4294967295
 801071a:	40f4      	lsrs	r4, r6
 801071c:	4214      	tst	r4, r2
 801071e:	d0f5      	beq.n	801070c <round+0x60>
 8010720:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8010724:	2301      	movs	r3, #1
 8010726:	4083      	lsls	r3, r0
 8010728:	195b      	adds	r3, r3, r5
 801072a:	bf28      	it	cs
 801072c:	3101      	addcs	r1, #1
 801072e:	ea23 0304 	bic.w	r3, r3, r4
 8010732:	461a      	mov	r2, r3
 8010734:	460b      	mov	r3, r1
 8010736:	e7e9      	b.n	801070c <round+0x60>
 8010738:	000fffff 	.word	0x000fffff
 801073c:	00000000 	.word	0x00000000

08010740 <__ieee754_pow>:
 8010740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010744:	ed2d 8b06 	vpush	{d8-d10}
 8010748:	b089      	sub	sp, #36	; 0x24
 801074a:	ed8d 1b00 	vstr	d1, [sp]
 801074e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010752:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010756:	ea58 0102 	orrs.w	r1, r8, r2
 801075a:	ec57 6b10 	vmov	r6, r7, d0
 801075e:	d115      	bne.n	801078c <__ieee754_pow+0x4c>
 8010760:	19b3      	adds	r3, r6, r6
 8010762:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010766:	4152      	adcs	r2, r2
 8010768:	4299      	cmp	r1, r3
 801076a:	4b89      	ldr	r3, [pc, #548]	; (8010990 <__ieee754_pow+0x250>)
 801076c:	4193      	sbcs	r3, r2
 801076e:	f080 84d1 	bcs.w	8011114 <__ieee754_pow+0x9d4>
 8010772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010776:	4630      	mov	r0, r6
 8010778:	4639      	mov	r1, r7
 801077a:	f7ef fdf7 	bl	800036c <__adddf3>
 801077e:	ec41 0b10 	vmov	d0, r0, r1
 8010782:	b009      	add	sp, #36	; 0x24
 8010784:	ecbd 8b06 	vpop	{d8-d10}
 8010788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801078c:	4b81      	ldr	r3, [pc, #516]	; (8010994 <__ieee754_pow+0x254>)
 801078e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010792:	429c      	cmp	r4, r3
 8010794:	ee10 aa10 	vmov	sl, s0
 8010798:	463d      	mov	r5, r7
 801079a:	dc06      	bgt.n	80107aa <__ieee754_pow+0x6a>
 801079c:	d101      	bne.n	80107a2 <__ieee754_pow+0x62>
 801079e:	2e00      	cmp	r6, #0
 80107a0:	d1e7      	bne.n	8010772 <__ieee754_pow+0x32>
 80107a2:	4598      	cmp	r8, r3
 80107a4:	dc01      	bgt.n	80107aa <__ieee754_pow+0x6a>
 80107a6:	d10f      	bne.n	80107c8 <__ieee754_pow+0x88>
 80107a8:	b172      	cbz	r2, 80107c8 <__ieee754_pow+0x88>
 80107aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80107ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80107b2:	ea55 050a 	orrs.w	r5, r5, sl
 80107b6:	d1dc      	bne.n	8010772 <__ieee754_pow+0x32>
 80107b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80107bc:	18db      	adds	r3, r3, r3
 80107be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80107c2:	4152      	adcs	r2, r2
 80107c4:	429d      	cmp	r5, r3
 80107c6:	e7d0      	b.n	801076a <__ieee754_pow+0x2a>
 80107c8:	2d00      	cmp	r5, #0
 80107ca:	da3b      	bge.n	8010844 <__ieee754_pow+0x104>
 80107cc:	4b72      	ldr	r3, [pc, #456]	; (8010998 <__ieee754_pow+0x258>)
 80107ce:	4598      	cmp	r8, r3
 80107d0:	dc51      	bgt.n	8010876 <__ieee754_pow+0x136>
 80107d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80107d6:	4598      	cmp	r8, r3
 80107d8:	f340 84ab 	ble.w	8011132 <__ieee754_pow+0x9f2>
 80107dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80107e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80107e4:	2b14      	cmp	r3, #20
 80107e6:	dd0f      	ble.n	8010808 <__ieee754_pow+0xc8>
 80107e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80107ec:	fa22 f103 	lsr.w	r1, r2, r3
 80107f0:	fa01 f303 	lsl.w	r3, r1, r3
 80107f4:	4293      	cmp	r3, r2
 80107f6:	f040 849c 	bne.w	8011132 <__ieee754_pow+0x9f2>
 80107fa:	f001 0101 	and.w	r1, r1, #1
 80107fe:	f1c1 0302 	rsb	r3, r1, #2
 8010802:	9304      	str	r3, [sp, #16]
 8010804:	b182      	cbz	r2, 8010828 <__ieee754_pow+0xe8>
 8010806:	e05f      	b.n	80108c8 <__ieee754_pow+0x188>
 8010808:	2a00      	cmp	r2, #0
 801080a:	d15b      	bne.n	80108c4 <__ieee754_pow+0x184>
 801080c:	f1c3 0314 	rsb	r3, r3, #20
 8010810:	fa48 f103 	asr.w	r1, r8, r3
 8010814:	fa01 f303 	lsl.w	r3, r1, r3
 8010818:	4543      	cmp	r3, r8
 801081a:	f040 8487 	bne.w	801112c <__ieee754_pow+0x9ec>
 801081e:	f001 0101 	and.w	r1, r1, #1
 8010822:	f1c1 0302 	rsb	r3, r1, #2
 8010826:	9304      	str	r3, [sp, #16]
 8010828:	4b5c      	ldr	r3, [pc, #368]	; (801099c <__ieee754_pow+0x25c>)
 801082a:	4598      	cmp	r8, r3
 801082c:	d132      	bne.n	8010894 <__ieee754_pow+0x154>
 801082e:	f1b9 0f00 	cmp.w	r9, #0
 8010832:	f280 8477 	bge.w	8011124 <__ieee754_pow+0x9e4>
 8010836:	4959      	ldr	r1, [pc, #356]	; (801099c <__ieee754_pow+0x25c>)
 8010838:	4632      	mov	r2, r6
 801083a:	463b      	mov	r3, r7
 801083c:	2000      	movs	r0, #0
 801083e:	f7f0 f875 	bl	800092c <__aeabi_ddiv>
 8010842:	e79c      	b.n	801077e <__ieee754_pow+0x3e>
 8010844:	2300      	movs	r3, #0
 8010846:	9304      	str	r3, [sp, #16]
 8010848:	2a00      	cmp	r2, #0
 801084a:	d13d      	bne.n	80108c8 <__ieee754_pow+0x188>
 801084c:	4b51      	ldr	r3, [pc, #324]	; (8010994 <__ieee754_pow+0x254>)
 801084e:	4598      	cmp	r8, r3
 8010850:	d1ea      	bne.n	8010828 <__ieee754_pow+0xe8>
 8010852:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010856:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801085a:	ea53 030a 	orrs.w	r3, r3, sl
 801085e:	f000 8459 	beq.w	8011114 <__ieee754_pow+0x9d4>
 8010862:	4b4f      	ldr	r3, [pc, #316]	; (80109a0 <__ieee754_pow+0x260>)
 8010864:	429c      	cmp	r4, r3
 8010866:	dd08      	ble.n	801087a <__ieee754_pow+0x13a>
 8010868:	f1b9 0f00 	cmp.w	r9, #0
 801086c:	f2c0 8456 	blt.w	801111c <__ieee754_pow+0x9dc>
 8010870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010874:	e783      	b.n	801077e <__ieee754_pow+0x3e>
 8010876:	2302      	movs	r3, #2
 8010878:	e7e5      	b.n	8010846 <__ieee754_pow+0x106>
 801087a:	f1b9 0f00 	cmp.w	r9, #0
 801087e:	f04f 0000 	mov.w	r0, #0
 8010882:	f04f 0100 	mov.w	r1, #0
 8010886:	f6bf af7a 	bge.w	801077e <__ieee754_pow+0x3e>
 801088a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801088e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010892:	e774      	b.n	801077e <__ieee754_pow+0x3e>
 8010894:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010898:	d106      	bne.n	80108a8 <__ieee754_pow+0x168>
 801089a:	4632      	mov	r2, r6
 801089c:	463b      	mov	r3, r7
 801089e:	4630      	mov	r0, r6
 80108a0:	4639      	mov	r1, r7
 80108a2:	f7ef ff19 	bl	80006d8 <__aeabi_dmul>
 80108a6:	e76a      	b.n	801077e <__ieee754_pow+0x3e>
 80108a8:	4b3e      	ldr	r3, [pc, #248]	; (80109a4 <__ieee754_pow+0x264>)
 80108aa:	4599      	cmp	r9, r3
 80108ac:	d10c      	bne.n	80108c8 <__ieee754_pow+0x188>
 80108ae:	2d00      	cmp	r5, #0
 80108b0:	db0a      	blt.n	80108c8 <__ieee754_pow+0x188>
 80108b2:	ec47 6b10 	vmov	d0, r6, r7
 80108b6:	b009      	add	sp, #36	; 0x24
 80108b8:	ecbd 8b06 	vpop	{d8-d10}
 80108bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c0:	f7ff be1a 	b.w	80104f8 <__ieee754_sqrt>
 80108c4:	2300      	movs	r3, #0
 80108c6:	9304      	str	r3, [sp, #16]
 80108c8:	ec47 6b10 	vmov	d0, r6, r7
 80108cc:	f000 fc62 	bl	8011194 <fabs>
 80108d0:	ec51 0b10 	vmov	r0, r1, d0
 80108d4:	f1ba 0f00 	cmp.w	sl, #0
 80108d8:	d129      	bne.n	801092e <__ieee754_pow+0x1ee>
 80108da:	b124      	cbz	r4, 80108e6 <__ieee754_pow+0x1a6>
 80108dc:	4b2f      	ldr	r3, [pc, #188]	; (801099c <__ieee754_pow+0x25c>)
 80108de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d123      	bne.n	801092e <__ieee754_pow+0x1ee>
 80108e6:	f1b9 0f00 	cmp.w	r9, #0
 80108ea:	da05      	bge.n	80108f8 <__ieee754_pow+0x1b8>
 80108ec:	4602      	mov	r2, r0
 80108ee:	460b      	mov	r3, r1
 80108f0:	2000      	movs	r0, #0
 80108f2:	492a      	ldr	r1, [pc, #168]	; (801099c <__ieee754_pow+0x25c>)
 80108f4:	f7f0 f81a 	bl	800092c <__aeabi_ddiv>
 80108f8:	2d00      	cmp	r5, #0
 80108fa:	f6bf af40 	bge.w	801077e <__ieee754_pow+0x3e>
 80108fe:	9b04      	ldr	r3, [sp, #16]
 8010900:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010904:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010908:	431c      	orrs	r4, r3
 801090a:	d108      	bne.n	801091e <__ieee754_pow+0x1de>
 801090c:	4602      	mov	r2, r0
 801090e:	460b      	mov	r3, r1
 8010910:	4610      	mov	r0, r2
 8010912:	4619      	mov	r1, r3
 8010914:	f7ef fd28 	bl	8000368 <__aeabi_dsub>
 8010918:	4602      	mov	r2, r0
 801091a:	460b      	mov	r3, r1
 801091c:	e78f      	b.n	801083e <__ieee754_pow+0xfe>
 801091e:	9b04      	ldr	r3, [sp, #16]
 8010920:	2b01      	cmp	r3, #1
 8010922:	f47f af2c 	bne.w	801077e <__ieee754_pow+0x3e>
 8010926:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801092a:	4619      	mov	r1, r3
 801092c:	e727      	b.n	801077e <__ieee754_pow+0x3e>
 801092e:	0feb      	lsrs	r3, r5, #31
 8010930:	3b01      	subs	r3, #1
 8010932:	9306      	str	r3, [sp, #24]
 8010934:	9a06      	ldr	r2, [sp, #24]
 8010936:	9b04      	ldr	r3, [sp, #16]
 8010938:	4313      	orrs	r3, r2
 801093a:	d102      	bne.n	8010942 <__ieee754_pow+0x202>
 801093c:	4632      	mov	r2, r6
 801093e:	463b      	mov	r3, r7
 8010940:	e7e6      	b.n	8010910 <__ieee754_pow+0x1d0>
 8010942:	4b19      	ldr	r3, [pc, #100]	; (80109a8 <__ieee754_pow+0x268>)
 8010944:	4598      	cmp	r8, r3
 8010946:	f340 80fb 	ble.w	8010b40 <__ieee754_pow+0x400>
 801094a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801094e:	4598      	cmp	r8, r3
 8010950:	4b13      	ldr	r3, [pc, #76]	; (80109a0 <__ieee754_pow+0x260>)
 8010952:	dd0c      	ble.n	801096e <__ieee754_pow+0x22e>
 8010954:	429c      	cmp	r4, r3
 8010956:	dc0f      	bgt.n	8010978 <__ieee754_pow+0x238>
 8010958:	f1b9 0f00 	cmp.w	r9, #0
 801095c:	da0f      	bge.n	801097e <__ieee754_pow+0x23e>
 801095e:	2000      	movs	r0, #0
 8010960:	b009      	add	sp, #36	; 0x24
 8010962:	ecbd 8b06 	vpop	{d8-d10}
 8010966:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801096a:	f000 bcc2 	b.w	80112f2 <__math_oflow>
 801096e:	429c      	cmp	r4, r3
 8010970:	dbf2      	blt.n	8010958 <__ieee754_pow+0x218>
 8010972:	4b0a      	ldr	r3, [pc, #40]	; (801099c <__ieee754_pow+0x25c>)
 8010974:	429c      	cmp	r4, r3
 8010976:	dd19      	ble.n	80109ac <__ieee754_pow+0x26c>
 8010978:	f1b9 0f00 	cmp.w	r9, #0
 801097c:	dcef      	bgt.n	801095e <__ieee754_pow+0x21e>
 801097e:	2000      	movs	r0, #0
 8010980:	b009      	add	sp, #36	; 0x24
 8010982:	ecbd 8b06 	vpop	{d8-d10}
 8010986:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801098a:	f000 bca9 	b.w	80112e0 <__math_uflow>
 801098e:	bf00      	nop
 8010990:	fff00000 	.word	0xfff00000
 8010994:	7ff00000 	.word	0x7ff00000
 8010998:	433fffff 	.word	0x433fffff
 801099c:	3ff00000 	.word	0x3ff00000
 80109a0:	3fefffff 	.word	0x3fefffff
 80109a4:	3fe00000 	.word	0x3fe00000
 80109a8:	41e00000 	.word	0x41e00000
 80109ac:	4b60      	ldr	r3, [pc, #384]	; (8010b30 <__ieee754_pow+0x3f0>)
 80109ae:	2200      	movs	r2, #0
 80109b0:	f7ef fcda 	bl	8000368 <__aeabi_dsub>
 80109b4:	a354      	add	r3, pc, #336	; (adr r3, 8010b08 <__ieee754_pow+0x3c8>)
 80109b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ba:	4604      	mov	r4, r0
 80109bc:	460d      	mov	r5, r1
 80109be:	f7ef fe8b 	bl	80006d8 <__aeabi_dmul>
 80109c2:	a353      	add	r3, pc, #332	; (adr r3, 8010b10 <__ieee754_pow+0x3d0>)
 80109c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c8:	4606      	mov	r6, r0
 80109ca:	460f      	mov	r7, r1
 80109cc:	4620      	mov	r0, r4
 80109ce:	4629      	mov	r1, r5
 80109d0:	f7ef fe82 	bl	80006d8 <__aeabi_dmul>
 80109d4:	4b57      	ldr	r3, [pc, #348]	; (8010b34 <__ieee754_pow+0x3f4>)
 80109d6:	4682      	mov	sl, r0
 80109d8:	468b      	mov	fp, r1
 80109da:	2200      	movs	r2, #0
 80109dc:	4620      	mov	r0, r4
 80109de:	4629      	mov	r1, r5
 80109e0:	f7ef fe7a 	bl	80006d8 <__aeabi_dmul>
 80109e4:	4602      	mov	r2, r0
 80109e6:	460b      	mov	r3, r1
 80109e8:	a14b      	add	r1, pc, #300	; (adr r1, 8010b18 <__ieee754_pow+0x3d8>)
 80109ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109ee:	f7ef fcbb 	bl	8000368 <__aeabi_dsub>
 80109f2:	4622      	mov	r2, r4
 80109f4:	462b      	mov	r3, r5
 80109f6:	f7ef fe6f 	bl	80006d8 <__aeabi_dmul>
 80109fa:	4602      	mov	r2, r0
 80109fc:	460b      	mov	r3, r1
 80109fe:	2000      	movs	r0, #0
 8010a00:	494d      	ldr	r1, [pc, #308]	; (8010b38 <__ieee754_pow+0x3f8>)
 8010a02:	f7ef fcb1 	bl	8000368 <__aeabi_dsub>
 8010a06:	4622      	mov	r2, r4
 8010a08:	4680      	mov	r8, r0
 8010a0a:	4689      	mov	r9, r1
 8010a0c:	462b      	mov	r3, r5
 8010a0e:	4620      	mov	r0, r4
 8010a10:	4629      	mov	r1, r5
 8010a12:	f7ef fe61 	bl	80006d8 <__aeabi_dmul>
 8010a16:	4602      	mov	r2, r0
 8010a18:	460b      	mov	r3, r1
 8010a1a:	4640      	mov	r0, r8
 8010a1c:	4649      	mov	r1, r9
 8010a1e:	f7ef fe5b 	bl	80006d8 <__aeabi_dmul>
 8010a22:	a33f      	add	r3, pc, #252	; (adr r3, 8010b20 <__ieee754_pow+0x3e0>)
 8010a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a28:	f7ef fe56 	bl	80006d8 <__aeabi_dmul>
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	460b      	mov	r3, r1
 8010a30:	4650      	mov	r0, sl
 8010a32:	4659      	mov	r1, fp
 8010a34:	f7ef fc98 	bl	8000368 <__aeabi_dsub>
 8010a38:	4602      	mov	r2, r0
 8010a3a:	460b      	mov	r3, r1
 8010a3c:	4680      	mov	r8, r0
 8010a3e:	4689      	mov	r9, r1
 8010a40:	4630      	mov	r0, r6
 8010a42:	4639      	mov	r1, r7
 8010a44:	f7ef fc92 	bl	800036c <__adddf3>
 8010a48:	2000      	movs	r0, #0
 8010a4a:	4632      	mov	r2, r6
 8010a4c:	463b      	mov	r3, r7
 8010a4e:	4604      	mov	r4, r0
 8010a50:	460d      	mov	r5, r1
 8010a52:	f7ef fc89 	bl	8000368 <__aeabi_dsub>
 8010a56:	4602      	mov	r2, r0
 8010a58:	460b      	mov	r3, r1
 8010a5a:	4640      	mov	r0, r8
 8010a5c:	4649      	mov	r1, r9
 8010a5e:	f7ef fc83 	bl	8000368 <__aeabi_dsub>
 8010a62:	9b04      	ldr	r3, [sp, #16]
 8010a64:	9a06      	ldr	r2, [sp, #24]
 8010a66:	3b01      	subs	r3, #1
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	4682      	mov	sl, r0
 8010a6c:	468b      	mov	fp, r1
 8010a6e:	f040 81e7 	bne.w	8010e40 <__ieee754_pow+0x700>
 8010a72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010b28 <__ieee754_pow+0x3e8>
 8010a76:	eeb0 8a47 	vmov.f32	s16, s14
 8010a7a:	eef0 8a67 	vmov.f32	s17, s15
 8010a7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010a82:	2600      	movs	r6, #0
 8010a84:	4632      	mov	r2, r6
 8010a86:	463b      	mov	r3, r7
 8010a88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a8c:	f7ef fc6c 	bl	8000368 <__aeabi_dsub>
 8010a90:	4622      	mov	r2, r4
 8010a92:	462b      	mov	r3, r5
 8010a94:	f7ef fe20 	bl	80006d8 <__aeabi_dmul>
 8010a98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a9c:	4680      	mov	r8, r0
 8010a9e:	4689      	mov	r9, r1
 8010aa0:	4650      	mov	r0, sl
 8010aa2:	4659      	mov	r1, fp
 8010aa4:	f7ef fe18 	bl	80006d8 <__aeabi_dmul>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	460b      	mov	r3, r1
 8010aac:	4640      	mov	r0, r8
 8010aae:	4649      	mov	r1, r9
 8010ab0:	f7ef fc5c 	bl	800036c <__adddf3>
 8010ab4:	4632      	mov	r2, r6
 8010ab6:	463b      	mov	r3, r7
 8010ab8:	4680      	mov	r8, r0
 8010aba:	4689      	mov	r9, r1
 8010abc:	4620      	mov	r0, r4
 8010abe:	4629      	mov	r1, r5
 8010ac0:	f7ef fe0a 	bl	80006d8 <__aeabi_dmul>
 8010ac4:	460b      	mov	r3, r1
 8010ac6:	4604      	mov	r4, r0
 8010ac8:	460d      	mov	r5, r1
 8010aca:	4602      	mov	r2, r0
 8010acc:	4649      	mov	r1, r9
 8010ace:	4640      	mov	r0, r8
 8010ad0:	f7ef fc4c 	bl	800036c <__adddf3>
 8010ad4:	4b19      	ldr	r3, [pc, #100]	; (8010b3c <__ieee754_pow+0x3fc>)
 8010ad6:	4299      	cmp	r1, r3
 8010ad8:	ec45 4b19 	vmov	d9, r4, r5
 8010adc:	4606      	mov	r6, r0
 8010ade:	460f      	mov	r7, r1
 8010ae0:	468b      	mov	fp, r1
 8010ae2:	f340 82f0 	ble.w	80110c6 <__ieee754_pow+0x986>
 8010ae6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010aea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010aee:	4303      	orrs	r3, r0
 8010af0:	f000 81e4 	beq.w	8010ebc <__ieee754_pow+0x77c>
 8010af4:	ec51 0b18 	vmov	r0, r1, d8
 8010af8:	2200      	movs	r2, #0
 8010afa:	2300      	movs	r3, #0
 8010afc:	f7f0 f85e 	bl	8000bbc <__aeabi_dcmplt>
 8010b00:	3800      	subs	r0, #0
 8010b02:	bf18      	it	ne
 8010b04:	2001      	movne	r0, #1
 8010b06:	e72b      	b.n	8010960 <__ieee754_pow+0x220>
 8010b08:	60000000 	.word	0x60000000
 8010b0c:	3ff71547 	.word	0x3ff71547
 8010b10:	f85ddf44 	.word	0xf85ddf44
 8010b14:	3e54ae0b 	.word	0x3e54ae0b
 8010b18:	55555555 	.word	0x55555555
 8010b1c:	3fd55555 	.word	0x3fd55555
 8010b20:	652b82fe 	.word	0x652b82fe
 8010b24:	3ff71547 	.word	0x3ff71547
 8010b28:	00000000 	.word	0x00000000
 8010b2c:	bff00000 	.word	0xbff00000
 8010b30:	3ff00000 	.word	0x3ff00000
 8010b34:	3fd00000 	.word	0x3fd00000
 8010b38:	3fe00000 	.word	0x3fe00000
 8010b3c:	408fffff 	.word	0x408fffff
 8010b40:	4bd5      	ldr	r3, [pc, #852]	; (8010e98 <__ieee754_pow+0x758>)
 8010b42:	402b      	ands	r3, r5
 8010b44:	2200      	movs	r2, #0
 8010b46:	b92b      	cbnz	r3, 8010b54 <__ieee754_pow+0x414>
 8010b48:	4bd4      	ldr	r3, [pc, #848]	; (8010e9c <__ieee754_pow+0x75c>)
 8010b4a:	f7ef fdc5 	bl	80006d8 <__aeabi_dmul>
 8010b4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010b52:	460c      	mov	r4, r1
 8010b54:	1523      	asrs	r3, r4, #20
 8010b56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010b5a:	4413      	add	r3, r2
 8010b5c:	9305      	str	r3, [sp, #20]
 8010b5e:	4bd0      	ldr	r3, [pc, #832]	; (8010ea0 <__ieee754_pow+0x760>)
 8010b60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010b64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010b68:	429c      	cmp	r4, r3
 8010b6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010b6e:	dd08      	ble.n	8010b82 <__ieee754_pow+0x442>
 8010b70:	4bcc      	ldr	r3, [pc, #816]	; (8010ea4 <__ieee754_pow+0x764>)
 8010b72:	429c      	cmp	r4, r3
 8010b74:	f340 8162 	ble.w	8010e3c <__ieee754_pow+0x6fc>
 8010b78:	9b05      	ldr	r3, [sp, #20]
 8010b7a:	3301      	adds	r3, #1
 8010b7c:	9305      	str	r3, [sp, #20]
 8010b7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010b82:	2400      	movs	r4, #0
 8010b84:	00e3      	lsls	r3, r4, #3
 8010b86:	9307      	str	r3, [sp, #28]
 8010b88:	4bc7      	ldr	r3, [pc, #796]	; (8010ea8 <__ieee754_pow+0x768>)
 8010b8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010b8e:	ed93 7b00 	vldr	d7, [r3]
 8010b92:	4629      	mov	r1, r5
 8010b94:	ec53 2b17 	vmov	r2, r3, d7
 8010b98:	eeb0 9a47 	vmov.f32	s18, s14
 8010b9c:	eef0 9a67 	vmov.f32	s19, s15
 8010ba0:	4682      	mov	sl, r0
 8010ba2:	f7ef fbe1 	bl	8000368 <__aeabi_dsub>
 8010ba6:	4652      	mov	r2, sl
 8010ba8:	4606      	mov	r6, r0
 8010baa:	460f      	mov	r7, r1
 8010bac:	462b      	mov	r3, r5
 8010bae:	ec51 0b19 	vmov	r0, r1, d9
 8010bb2:	f7ef fbdb 	bl	800036c <__adddf3>
 8010bb6:	4602      	mov	r2, r0
 8010bb8:	460b      	mov	r3, r1
 8010bba:	2000      	movs	r0, #0
 8010bbc:	49bb      	ldr	r1, [pc, #748]	; (8010eac <__ieee754_pow+0x76c>)
 8010bbe:	f7ef feb5 	bl	800092c <__aeabi_ddiv>
 8010bc2:	ec41 0b1a 	vmov	d10, r0, r1
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	460b      	mov	r3, r1
 8010bca:	4630      	mov	r0, r6
 8010bcc:	4639      	mov	r1, r7
 8010bce:	f7ef fd83 	bl	80006d8 <__aeabi_dmul>
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bd8:	9302      	str	r3, [sp, #8]
 8010bda:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010bde:	46ab      	mov	fp, r5
 8010be0:	106d      	asrs	r5, r5, #1
 8010be2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010be6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010bea:	ec41 0b18 	vmov	d8, r0, r1
 8010bee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	4640      	mov	r0, r8
 8010bf6:	4649      	mov	r1, r9
 8010bf8:	4614      	mov	r4, r2
 8010bfa:	461d      	mov	r5, r3
 8010bfc:	f7ef fd6c 	bl	80006d8 <__aeabi_dmul>
 8010c00:	4602      	mov	r2, r0
 8010c02:	460b      	mov	r3, r1
 8010c04:	4630      	mov	r0, r6
 8010c06:	4639      	mov	r1, r7
 8010c08:	f7ef fbae 	bl	8000368 <__aeabi_dsub>
 8010c0c:	ec53 2b19 	vmov	r2, r3, d9
 8010c10:	4606      	mov	r6, r0
 8010c12:	460f      	mov	r7, r1
 8010c14:	4620      	mov	r0, r4
 8010c16:	4629      	mov	r1, r5
 8010c18:	f7ef fba6 	bl	8000368 <__aeabi_dsub>
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	460b      	mov	r3, r1
 8010c20:	4650      	mov	r0, sl
 8010c22:	4659      	mov	r1, fp
 8010c24:	f7ef fba0 	bl	8000368 <__aeabi_dsub>
 8010c28:	4642      	mov	r2, r8
 8010c2a:	464b      	mov	r3, r9
 8010c2c:	f7ef fd54 	bl	80006d8 <__aeabi_dmul>
 8010c30:	4602      	mov	r2, r0
 8010c32:	460b      	mov	r3, r1
 8010c34:	4630      	mov	r0, r6
 8010c36:	4639      	mov	r1, r7
 8010c38:	f7ef fb96 	bl	8000368 <__aeabi_dsub>
 8010c3c:	ec53 2b1a 	vmov	r2, r3, d10
 8010c40:	f7ef fd4a 	bl	80006d8 <__aeabi_dmul>
 8010c44:	ec53 2b18 	vmov	r2, r3, d8
 8010c48:	ec41 0b19 	vmov	d9, r0, r1
 8010c4c:	ec51 0b18 	vmov	r0, r1, d8
 8010c50:	f7ef fd42 	bl	80006d8 <__aeabi_dmul>
 8010c54:	a37c      	add	r3, pc, #496	; (adr r3, 8010e48 <__ieee754_pow+0x708>)
 8010c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	460d      	mov	r5, r1
 8010c5e:	f7ef fd3b 	bl	80006d8 <__aeabi_dmul>
 8010c62:	a37b      	add	r3, pc, #492	; (adr r3, 8010e50 <__ieee754_pow+0x710>)
 8010c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c68:	f7ef fb80 	bl	800036c <__adddf3>
 8010c6c:	4622      	mov	r2, r4
 8010c6e:	462b      	mov	r3, r5
 8010c70:	f7ef fd32 	bl	80006d8 <__aeabi_dmul>
 8010c74:	a378      	add	r3, pc, #480	; (adr r3, 8010e58 <__ieee754_pow+0x718>)
 8010c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7a:	f7ef fb77 	bl	800036c <__adddf3>
 8010c7e:	4622      	mov	r2, r4
 8010c80:	462b      	mov	r3, r5
 8010c82:	f7ef fd29 	bl	80006d8 <__aeabi_dmul>
 8010c86:	a376      	add	r3, pc, #472	; (adr r3, 8010e60 <__ieee754_pow+0x720>)
 8010c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c8c:	f7ef fb6e 	bl	800036c <__adddf3>
 8010c90:	4622      	mov	r2, r4
 8010c92:	462b      	mov	r3, r5
 8010c94:	f7ef fd20 	bl	80006d8 <__aeabi_dmul>
 8010c98:	a373      	add	r3, pc, #460	; (adr r3, 8010e68 <__ieee754_pow+0x728>)
 8010c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9e:	f7ef fb65 	bl	800036c <__adddf3>
 8010ca2:	4622      	mov	r2, r4
 8010ca4:	462b      	mov	r3, r5
 8010ca6:	f7ef fd17 	bl	80006d8 <__aeabi_dmul>
 8010caa:	a371      	add	r3, pc, #452	; (adr r3, 8010e70 <__ieee754_pow+0x730>)
 8010cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb0:	f7ef fb5c 	bl	800036c <__adddf3>
 8010cb4:	4622      	mov	r2, r4
 8010cb6:	4606      	mov	r6, r0
 8010cb8:	460f      	mov	r7, r1
 8010cba:	462b      	mov	r3, r5
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	4629      	mov	r1, r5
 8010cc0:	f7ef fd0a 	bl	80006d8 <__aeabi_dmul>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	4630      	mov	r0, r6
 8010cca:	4639      	mov	r1, r7
 8010ccc:	f7ef fd04 	bl	80006d8 <__aeabi_dmul>
 8010cd0:	4642      	mov	r2, r8
 8010cd2:	4604      	mov	r4, r0
 8010cd4:	460d      	mov	r5, r1
 8010cd6:	464b      	mov	r3, r9
 8010cd8:	ec51 0b18 	vmov	r0, r1, d8
 8010cdc:	f7ef fb46 	bl	800036c <__adddf3>
 8010ce0:	ec53 2b19 	vmov	r2, r3, d9
 8010ce4:	f7ef fcf8 	bl	80006d8 <__aeabi_dmul>
 8010ce8:	4622      	mov	r2, r4
 8010cea:	462b      	mov	r3, r5
 8010cec:	f7ef fb3e 	bl	800036c <__adddf3>
 8010cf0:	4642      	mov	r2, r8
 8010cf2:	4682      	mov	sl, r0
 8010cf4:	468b      	mov	fp, r1
 8010cf6:	464b      	mov	r3, r9
 8010cf8:	4640      	mov	r0, r8
 8010cfa:	4649      	mov	r1, r9
 8010cfc:	f7ef fcec 	bl	80006d8 <__aeabi_dmul>
 8010d00:	4b6b      	ldr	r3, [pc, #428]	; (8010eb0 <__ieee754_pow+0x770>)
 8010d02:	2200      	movs	r2, #0
 8010d04:	4606      	mov	r6, r0
 8010d06:	460f      	mov	r7, r1
 8010d08:	f7ef fb30 	bl	800036c <__adddf3>
 8010d0c:	4652      	mov	r2, sl
 8010d0e:	465b      	mov	r3, fp
 8010d10:	f7ef fb2c 	bl	800036c <__adddf3>
 8010d14:	2000      	movs	r0, #0
 8010d16:	4604      	mov	r4, r0
 8010d18:	460d      	mov	r5, r1
 8010d1a:	4602      	mov	r2, r0
 8010d1c:	460b      	mov	r3, r1
 8010d1e:	4640      	mov	r0, r8
 8010d20:	4649      	mov	r1, r9
 8010d22:	f7ef fcd9 	bl	80006d8 <__aeabi_dmul>
 8010d26:	4b62      	ldr	r3, [pc, #392]	; (8010eb0 <__ieee754_pow+0x770>)
 8010d28:	4680      	mov	r8, r0
 8010d2a:	4689      	mov	r9, r1
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	4620      	mov	r0, r4
 8010d30:	4629      	mov	r1, r5
 8010d32:	f7ef fb19 	bl	8000368 <__aeabi_dsub>
 8010d36:	4632      	mov	r2, r6
 8010d38:	463b      	mov	r3, r7
 8010d3a:	f7ef fb15 	bl	8000368 <__aeabi_dsub>
 8010d3e:	4602      	mov	r2, r0
 8010d40:	460b      	mov	r3, r1
 8010d42:	4650      	mov	r0, sl
 8010d44:	4659      	mov	r1, fp
 8010d46:	f7ef fb0f 	bl	8000368 <__aeabi_dsub>
 8010d4a:	ec53 2b18 	vmov	r2, r3, d8
 8010d4e:	f7ef fcc3 	bl	80006d8 <__aeabi_dmul>
 8010d52:	4622      	mov	r2, r4
 8010d54:	4606      	mov	r6, r0
 8010d56:	460f      	mov	r7, r1
 8010d58:	462b      	mov	r3, r5
 8010d5a:	ec51 0b19 	vmov	r0, r1, d9
 8010d5e:	f7ef fcbb 	bl	80006d8 <__aeabi_dmul>
 8010d62:	4602      	mov	r2, r0
 8010d64:	460b      	mov	r3, r1
 8010d66:	4630      	mov	r0, r6
 8010d68:	4639      	mov	r1, r7
 8010d6a:	f7ef faff 	bl	800036c <__adddf3>
 8010d6e:	4606      	mov	r6, r0
 8010d70:	460f      	mov	r7, r1
 8010d72:	4602      	mov	r2, r0
 8010d74:	460b      	mov	r3, r1
 8010d76:	4640      	mov	r0, r8
 8010d78:	4649      	mov	r1, r9
 8010d7a:	f7ef faf7 	bl	800036c <__adddf3>
 8010d7e:	a33e      	add	r3, pc, #248	; (adr r3, 8010e78 <__ieee754_pow+0x738>)
 8010d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d84:	2000      	movs	r0, #0
 8010d86:	4604      	mov	r4, r0
 8010d88:	460d      	mov	r5, r1
 8010d8a:	f7ef fca5 	bl	80006d8 <__aeabi_dmul>
 8010d8e:	4642      	mov	r2, r8
 8010d90:	ec41 0b18 	vmov	d8, r0, r1
 8010d94:	464b      	mov	r3, r9
 8010d96:	4620      	mov	r0, r4
 8010d98:	4629      	mov	r1, r5
 8010d9a:	f7ef fae5 	bl	8000368 <__aeabi_dsub>
 8010d9e:	4602      	mov	r2, r0
 8010da0:	460b      	mov	r3, r1
 8010da2:	4630      	mov	r0, r6
 8010da4:	4639      	mov	r1, r7
 8010da6:	f7ef fadf 	bl	8000368 <__aeabi_dsub>
 8010daa:	a335      	add	r3, pc, #212	; (adr r3, 8010e80 <__ieee754_pow+0x740>)
 8010dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db0:	f7ef fc92 	bl	80006d8 <__aeabi_dmul>
 8010db4:	a334      	add	r3, pc, #208	; (adr r3, 8010e88 <__ieee754_pow+0x748>)
 8010db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dba:	4606      	mov	r6, r0
 8010dbc:	460f      	mov	r7, r1
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	4629      	mov	r1, r5
 8010dc2:	f7ef fc89 	bl	80006d8 <__aeabi_dmul>
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	460b      	mov	r3, r1
 8010dca:	4630      	mov	r0, r6
 8010dcc:	4639      	mov	r1, r7
 8010dce:	f7ef facd 	bl	800036c <__adddf3>
 8010dd2:	9a07      	ldr	r2, [sp, #28]
 8010dd4:	4b37      	ldr	r3, [pc, #220]	; (8010eb4 <__ieee754_pow+0x774>)
 8010dd6:	4413      	add	r3, r2
 8010dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ddc:	f7ef fac6 	bl	800036c <__adddf3>
 8010de0:	4682      	mov	sl, r0
 8010de2:	9805      	ldr	r0, [sp, #20]
 8010de4:	468b      	mov	fp, r1
 8010de6:	f7ef fc0d 	bl	8000604 <__aeabi_i2d>
 8010dea:	9a07      	ldr	r2, [sp, #28]
 8010dec:	4b32      	ldr	r3, [pc, #200]	; (8010eb8 <__ieee754_pow+0x778>)
 8010dee:	4413      	add	r3, r2
 8010df0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010df4:	4606      	mov	r6, r0
 8010df6:	460f      	mov	r7, r1
 8010df8:	4652      	mov	r2, sl
 8010dfa:	465b      	mov	r3, fp
 8010dfc:	ec51 0b18 	vmov	r0, r1, d8
 8010e00:	f7ef fab4 	bl	800036c <__adddf3>
 8010e04:	4642      	mov	r2, r8
 8010e06:	464b      	mov	r3, r9
 8010e08:	f7ef fab0 	bl	800036c <__adddf3>
 8010e0c:	4632      	mov	r2, r6
 8010e0e:	463b      	mov	r3, r7
 8010e10:	f7ef faac 	bl	800036c <__adddf3>
 8010e14:	2000      	movs	r0, #0
 8010e16:	4632      	mov	r2, r6
 8010e18:	463b      	mov	r3, r7
 8010e1a:	4604      	mov	r4, r0
 8010e1c:	460d      	mov	r5, r1
 8010e1e:	f7ef faa3 	bl	8000368 <__aeabi_dsub>
 8010e22:	4642      	mov	r2, r8
 8010e24:	464b      	mov	r3, r9
 8010e26:	f7ef fa9f 	bl	8000368 <__aeabi_dsub>
 8010e2a:	ec53 2b18 	vmov	r2, r3, d8
 8010e2e:	f7ef fa9b 	bl	8000368 <__aeabi_dsub>
 8010e32:	4602      	mov	r2, r0
 8010e34:	460b      	mov	r3, r1
 8010e36:	4650      	mov	r0, sl
 8010e38:	4659      	mov	r1, fp
 8010e3a:	e610      	b.n	8010a5e <__ieee754_pow+0x31e>
 8010e3c:	2401      	movs	r4, #1
 8010e3e:	e6a1      	b.n	8010b84 <__ieee754_pow+0x444>
 8010e40:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010e90 <__ieee754_pow+0x750>
 8010e44:	e617      	b.n	8010a76 <__ieee754_pow+0x336>
 8010e46:	bf00      	nop
 8010e48:	4a454eef 	.word	0x4a454eef
 8010e4c:	3fca7e28 	.word	0x3fca7e28
 8010e50:	93c9db65 	.word	0x93c9db65
 8010e54:	3fcd864a 	.word	0x3fcd864a
 8010e58:	a91d4101 	.word	0xa91d4101
 8010e5c:	3fd17460 	.word	0x3fd17460
 8010e60:	518f264d 	.word	0x518f264d
 8010e64:	3fd55555 	.word	0x3fd55555
 8010e68:	db6fabff 	.word	0xdb6fabff
 8010e6c:	3fdb6db6 	.word	0x3fdb6db6
 8010e70:	33333303 	.word	0x33333303
 8010e74:	3fe33333 	.word	0x3fe33333
 8010e78:	e0000000 	.word	0xe0000000
 8010e7c:	3feec709 	.word	0x3feec709
 8010e80:	dc3a03fd 	.word	0xdc3a03fd
 8010e84:	3feec709 	.word	0x3feec709
 8010e88:	145b01f5 	.word	0x145b01f5
 8010e8c:	be3e2fe0 	.word	0xbe3e2fe0
 8010e90:	00000000 	.word	0x00000000
 8010e94:	3ff00000 	.word	0x3ff00000
 8010e98:	7ff00000 	.word	0x7ff00000
 8010e9c:	43400000 	.word	0x43400000
 8010ea0:	0003988e 	.word	0x0003988e
 8010ea4:	000bb679 	.word	0x000bb679
 8010ea8:	080118b8 	.word	0x080118b8
 8010eac:	3ff00000 	.word	0x3ff00000
 8010eb0:	40080000 	.word	0x40080000
 8010eb4:	080118d8 	.word	0x080118d8
 8010eb8:	080118c8 	.word	0x080118c8
 8010ebc:	a3b3      	add	r3, pc, #716	; (adr r3, 801118c <__ieee754_pow+0xa4c>)
 8010ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec2:	4640      	mov	r0, r8
 8010ec4:	4649      	mov	r1, r9
 8010ec6:	f7ef fa51 	bl	800036c <__adddf3>
 8010eca:	4622      	mov	r2, r4
 8010ecc:	ec41 0b1a 	vmov	d10, r0, r1
 8010ed0:	462b      	mov	r3, r5
 8010ed2:	4630      	mov	r0, r6
 8010ed4:	4639      	mov	r1, r7
 8010ed6:	f7ef fa47 	bl	8000368 <__aeabi_dsub>
 8010eda:	4602      	mov	r2, r0
 8010edc:	460b      	mov	r3, r1
 8010ede:	ec51 0b1a 	vmov	r0, r1, d10
 8010ee2:	f7ef fe89 	bl	8000bf8 <__aeabi_dcmpgt>
 8010ee6:	2800      	cmp	r0, #0
 8010ee8:	f47f ae04 	bne.w	8010af4 <__ieee754_pow+0x3b4>
 8010eec:	4aa2      	ldr	r2, [pc, #648]	; (8011178 <__ieee754_pow+0xa38>)
 8010eee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	f340 8107 	ble.w	8011106 <__ieee754_pow+0x9c6>
 8010ef8:	151b      	asrs	r3, r3, #20
 8010efa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010efe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010f02:	fa4a fa03 	asr.w	sl, sl, r3
 8010f06:	44da      	add	sl, fp
 8010f08:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010f0c:	489b      	ldr	r0, [pc, #620]	; (801117c <__ieee754_pow+0xa3c>)
 8010f0e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010f12:	4108      	asrs	r0, r1
 8010f14:	ea00 030a 	and.w	r3, r0, sl
 8010f18:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010f1c:	f1c1 0114 	rsb	r1, r1, #20
 8010f20:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010f24:	fa4a fa01 	asr.w	sl, sl, r1
 8010f28:	f1bb 0f00 	cmp.w	fp, #0
 8010f2c:	f04f 0200 	mov.w	r2, #0
 8010f30:	4620      	mov	r0, r4
 8010f32:	4629      	mov	r1, r5
 8010f34:	bfb8      	it	lt
 8010f36:	f1ca 0a00 	rsblt	sl, sl, #0
 8010f3a:	f7ef fa15 	bl	8000368 <__aeabi_dsub>
 8010f3e:	ec41 0b19 	vmov	d9, r0, r1
 8010f42:	4642      	mov	r2, r8
 8010f44:	464b      	mov	r3, r9
 8010f46:	ec51 0b19 	vmov	r0, r1, d9
 8010f4a:	f7ef fa0f 	bl	800036c <__adddf3>
 8010f4e:	a37a      	add	r3, pc, #488	; (adr r3, 8011138 <__ieee754_pow+0x9f8>)
 8010f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f54:	2000      	movs	r0, #0
 8010f56:	4604      	mov	r4, r0
 8010f58:	460d      	mov	r5, r1
 8010f5a:	f7ef fbbd 	bl	80006d8 <__aeabi_dmul>
 8010f5e:	ec53 2b19 	vmov	r2, r3, d9
 8010f62:	4606      	mov	r6, r0
 8010f64:	460f      	mov	r7, r1
 8010f66:	4620      	mov	r0, r4
 8010f68:	4629      	mov	r1, r5
 8010f6a:	f7ef f9fd 	bl	8000368 <__aeabi_dsub>
 8010f6e:	4602      	mov	r2, r0
 8010f70:	460b      	mov	r3, r1
 8010f72:	4640      	mov	r0, r8
 8010f74:	4649      	mov	r1, r9
 8010f76:	f7ef f9f7 	bl	8000368 <__aeabi_dsub>
 8010f7a:	a371      	add	r3, pc, #452	; (adr r3, 8011140 <__ieee754_pow+0xa00>)
 8010f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f80:	f7ef fbaa 	bl	80006d8 <__aeabi_dmul>
 8010f84:	a370      	add	r3, pc, #448	; (adr r3, 8011148 <__ieee754_pow+0xa08>)
 8010f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8a:	4680      	mov	r8, r0
 8010f8c:	4689      	mov	r9, r1
 8010f8e:	4620      	mov	r0, r4
 8010f90:	4629      	mov	r1, r5
 8010f92:	f7ef fba1 	bl	80006d8 <__aeabi_dmul>
 8010f96:	4602      	mov	r2, r0
 8010f98:	460b      	mov	r3, r1
 8010f9a:	4640      	mov	r0, r8
 8010f9c:	4649      	mov	r1, r9
 8010f9e:	f7ef f9e5 	bl	800036c <__adddf3>
 8010fa2:	4604      	mov	r4, r0
 8010fa4:	460d      	mov	r5, r1
 8010fa6:	4602      	mov	r2, r0
 8010fa8:	460b      	mov	r3, r1
 8010faa:	4630      	mov	r0, r6
 8010fac:	4639      	mov	r1, r7
 8010fae:	f7ef f9dd 	bl	800036c <__adddf3>
 8010fb2:	4632      	mov	r2, r6
 8010fb4:	463b      	mov	r3, r7
 8010fb6:	4680      	mov	r8, r0
 8010fb8:	4689      	mov	r9, r1
 8010fba:	f7ef f9d5 	bl	8000368 <__aeabi_dsub>
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	460b      	mov	r3, r1
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	4629      	mov	r1, r5
 8010fc6:	f7ef f9cf 	bl	8000368 <__aeabi_dsub>
 8010fca:	4642      	mov	r2, r8
 8010fcc:	4606      	mov	r6, r0
 8010fce:	460f      	mov	r7, r1
 8010fd0:	464b      	mov	r3, r9
 8010fd2:	4640      	mov	r0, r8
 8010fd4:	4649      	mov	r1, r9
 8010fd6:	f7ef fb7f 	bl	80006d8 <__aeabi_dmul>
 8010fda:	a35d      	add	r3, pc, #372	; (adr r3, 8011150 <__ieee754_pow+0xa10>)
 8010fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe0:	4604      	mov	r4, r0
 8010fe2:	460d      	mov	r5, r1
 8010fe4:	f7ef fb78 	bl	80006d8 <__aeabi_dmul>
 8010fe8:	a35b      	add	r3, pc, #364	; (adr r3, 8011158 <__ieee754_pow+0xa18>)
 8010fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fee:	f7ef f9bb 	bl	8000368 <__aeabi_dsub>
 8010ff2:	4622      	mov	r2, r4
 8010ff4:	462b      	mov	r3, r5
 8010ff6:	f7ef fb6f 	bl	80006d8 <__aeabi_dmul>
 8010ffa:	a359      	add	r3, pc, #356	; (adr r3, 8011160 <__ieee754_pow+0xa20>)
 8010ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011000:	f7ef f9b4 	bl	800036c <__adddf3>
 8011004:	4622      	mov	r2, r4
 8011006:	462b      	mov	r3, r5
 8011008:	f7ef fb66 	bl	80006d8 <__aeabi_dmul>
 801100c:	a356      	add	r3, pc, #344	; (adr r3, 8011168 <__ieee754_pow+0xa28>)
 801100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011012:	f7ef f9a9 	bl	8000368 <__aeabi_dsub>
 8011016:	4622      	mov	r2, r4
 8011018:	462b      	mov	r3, r5
 801101a:	f7ef fb5d 	bl	80006d8 <__aeabi_dmul>
 801101e:	a354      	add	r3, pc, #336	; (adr r3, 8011170 <__ieee754_pow+0xa30>)
 8011020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011024:	f7ef f9a2 	bl	800036c <__adddf3>
 8011028:	4622      	mov	r2, r4
 801102a:	462b      	mov	r3, r5
 801102c:	f7ef fb54 	bl	80006d8 <__aeabi_dmul>
 8011030:	4602      	mov	r2, r0
 8011032:	460b      	mov	r3, r1
 8011034:	4640      	mov	r0, r8
 8011036:	4649      	mov	r1, r9
 8011038:	f7ef f996 	bl	8000368 <__aeabi_dsub>
 801103c:	4604      	mov	r4, r0
 801103e:	460d      	mov	r5, r1
 8011040:	4602      	mov	r2, r0
 8011042:	460b      	mov	r3, r1
 8011044:	4640      	mov	r0, r8
 8011046:	4649      	mov	r1, r9
 8011048:	f7ef fb46 	bl	80006d8 <__aeabi_dmul>
 801104c:	2200      	movs	r2, #0
 801104e:	ec41 0b19 	vmov	d9, r0, r1
 8011052:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011056:	4620      	mov	r0, r4
 8011058:	4629      	mov	r1, r5
 801105a:	f7ef f985 	bl	8000368 <__aeabi_dsub>
 801105e:	4602      	mov	r2, r0
 8011060:	460b      	mov	r3, r1
 8011062:	ec51 0b19 	vmov	r0, r1, d9
 8011066:	f7ef fc61 	bl	800092c <__aeabi_ddiv>
 801106a:	4632      	mov	r2, r6
 801106c:	4604      	mov	r4, r0
 801106e:	460d      	mov	r5, r1
 8011070:	463b      	mov	r3, r7
 8011072:	4640      	mov	r0, r8
 8011074:	4649      	mov	r1, r9
 8011076:	f7ef fb2f 	bl	80006d8 <__aeabi_dmul>
 801107a:	4632      	mov	r2, r6
 801107c:	463b      	mov	r3, r7
 801107e:	f7ef f975 	bl	800036c <__adddf3>
 8011082:	4602      	mov	r2, r0
 8011084:	460b      	mov	r3, r1
 8011086:	4620      	mov	r0, r4
 8011088:	4629      	mov	r1, r5
 801108a:	f7ef f96d 	bl	8000368 <__aeabi_dsub>
 801108e:	4642      	mov	r2, r8
 8011090:	464b      	mov	r3, r9
 8011092:	f7ef f969 	bl	8000368 <__aeabi_dsub>
 8011096:	460b      	mov	r3, r1
 8011098:	4602      	mov	r2, r0
 801109a:	4939      	ldr	r1, [pc, #228]	; (8011180 <__ieee754_pow+0xa40>)
 801109c:	2000      	movs	r0, #0
 801109e:	f7ef f963 	bl	8000368 <__aeabi_dsub>
 80110a2:	ec41 0b10 	vmov	d0, r0, r1
 80110a6:	ee10 3a90 	vmov	r3, s1
 80110aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80110ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110b2:	da2b      	bge.n	801110c <__ieee754_pow+0x9cc>
 80110b4:	4650      	mov	r0, sl
 80110b6:	f000 f877 	bl	80111a8 <scalbn>
 80110ba:	ec51 0b10 	vmov	r0, r1, d0
 80110be:	ec53 2b18 	vmov	r2, r3, d8
 80110c2:	f7ff bbee 	b.w	80108a2 <__ieee754_pow+0x162>
 80110c6:	4b2f      	ldr	r3, [pc, #188]	; (8011184 <__ieee754_pow+0xa44>)
 80110c8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80110cc:	429e      	cmp	r6, r3
 80110ce:	f77f af0d 	ble.w	8010eec <__ieee754_pow+0x7ac>
 80110d2:	4b2d      	ldr	r3, [pc, #180]	; (8011188 <__ieee754_pow+0xa48>)
 80110d4:	440b      	add	r3, r1
 80110d6:	4303      	orrs	r3, r0
 80110d8:	d009      	beq.n	80110ee <__ieee754_pow+0x9ae>
 80110da:	ec51 0b18 	vmov	r0, r1, d8
 80110de:	2200      	movs	r2, #0
 80110e0:	2300      	movs	r3, #0
 80110e2:	f7ef fd6b 	bl	8000bbc <__aeabi_dcmplt>
 80110e6:	3800      	subs	r0, #0
 80110e8:	bf18      	it	ne
 80110ea:	2001      	movne	r0, #1
 80110ec:	e448      	b.n	8010980 <__ieee754_pow+0x240>
 80110ee:	4622      	mov	r2, r4
 80110f0:	462b      	mov	r3, r5
 80110f2:	f7ef f939 	bl	8000368 <__aeabi_dsub>
 80110f6:	4642      	mov	r2, r8
 80110f8:	464b      	mov	r3, r9
 80110fa:	f7ef fd73 	bl	8000be4 <__aeabi_dcmpge>
 80110fe:	2800      	cmp	r0, #0
 8011100:	f43f aef4 	beq.w	8010eec <__ieee754_pow+0x7ac>
 8011104:	e7e9      	b.n	80110da <__ieee754_pow+0x99a>
 8011106:	f04f 0a00 	mov.w	sl, #0
 801110a:	e71a      	b.n	8010f42 <__ieee754_pow+0x802>
 801110c:	ec51 0b10 	vmov	r0, r1, d0
 8011110:	4619      	mov	r1, r3
 8011112:	e7d4      	b.n	80110be <__ieee754_pow+0x97e>
 8011114:	491a      	ldr	r1, [pc, #104]	; (8011180 <__ieee754_pow+0xa40>)
 8011116:	2000      	movs	r0, #0
 8011118:	f7ff bb31 	b.w	801077e <__ieee754_pow+0x3e>
 801111c:	2000      	movs	r0, #0
 801111e:	2100      	movs	r1, #0
 8011120:	f7ff bb2d 	b.w	801077e <__ieee754_pow+0x3e>
 8011124:	4630      	mov	r0, r6
 8011126:	4639      	mov	r1, r7
 8011128:	f7ff bb29 	b.w	801077e <__ieee754_pow+0x3e>
 801112c:	9204      	str	r2, [sp, #16]
 801112e:	f7ff bb7b 	b.w	8010828 <__ieee754_pow+0xe8>
 8011132:	2300      	movs	r3, #0
 8011134:	f7ff bb65 	b.w	8010802 <__ieee754_pow+0xc2>
 8011138:	00000000 	.word	0x00000000
 801113c:	3fe62e43 	.word	0x3fe62e43
 8011140:	fefa39ef 	.word	0xfefa39ef
 8011144:	3fe62e42 	.word	0x3fe62e42
 8011148:	0ca86c39 	.word	0x0ca86c39
 801114c:	be205c61 	.word	0xbe205c61
 8011150:	72bea4d0 	.word	0x72bea4d0
 8011154:	3e663769 	.word	0x3e663769
 8011158:	c5d26bf1 	.word	0xc5d26bf1
 801115c:	3ebbbd41 	.word	0x3ebbbd41
 8011160:	af25de2c 	.word	0xaf25de2c
 8011164:	3f11566a 	.word	0x3f11566a
 8011168:	16bebd93 	.word	0x16bebd93
 801116c:	3f66c16c 	.word	0x3f66c16c
 8011170:	5555553e 	.word	0x5555553e
 8011174:	3fc55555 	.word	0x3fc55555
 8011178:	3fe00000 	.word	0x3fe00000
 801117c:	fff00000 	.word	0xfff00000
 8011180:	3ff00000 	.word	0x3ff00000
 8011184:	4090cbff 	.word	0x4090cbff
 8011188:	3f6f3400 	.word	0x3f6f3400
 801118c:	652b82fe 	.word	0x652b82fe
 8011190:	3c971547 	.word	0x3c971547

08011194 <fabs>:
 8011194:	ec51 0b10 	vmov	r0, r1, d0
 8011198:	ee10 2a10 	vmov	r2, s0
 801119c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80111a0:	ec43 2b10 	vmov	d0, r2, r3
 80111a4:	4770      	bx	lr
	...

080111a8 <scalbn>:
 80111a8:	b570      	push	{r4, r5, r6, lr}
 80111aa:	ec55 4b10 	vmov	r4, r5, d0
 80111ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80111b2:	4606      	mov	r6, r0
 80111b4:	462b      	mov	r3, r5
 80111b6:	b999      	cbnz	r1, 80111e0 <scalbn+0x38>
 80111b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80111bc:	4323      	orrs	r3, r4
 80111be:	d03f      	beq.n	8011240 <scalbn+0x98>
 80111c0:	4b35      	ldr	r3, [pc, #212]	; (8011298 <scalbn+0xf0>)
 80111c2:	4629      	mov	r1, r5
 80111c4:	ee10 0a10 	vmov	r0, s0
 80111c8:	2200      	movs	r2, #0
 80111ca:	f7ef fa85 	bl	80006d8 <__aeabi_dmul>
 80111ce:	4b33      	ldr	r3, [pc, #204]	; (801129c <scalbn+0xf4>)
 80111d0:	429e      	cmp	r6, r3
 80111d2:	4604      	mov	r4, r0
 80111d4:	460d      	mov	r5, r1
 80111d6:	da10      	bge.n	80111fa <scalbn+0x52>
 80111d8:	a327      	add	r3, pc, #156	; (adr r3, 8011278 <scalbn+0xd0>)
 80111da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111de:	e01f      	b.n	8011220 <scalbn+0x78>
 80111e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80111e4:	4291      	cmp	r1, r2
 80111e6:	d10c      	bne.n	8011202 <scalbn+0x5a>
 80111e8:	ee10 2a10 	vmov	r2, s0
 80111ec:	4620      	mov	r0, r4
 80111ee:	4629      	mov	r1, r5
 80111f0:	f7ef f8bc 	bl	800036c <__adddf3>
 80111f4:	4604      	mov	r4, r0
 80111f6:	460d      	mov	r5, r1
 80111f8:	e022      	b.n	8011240 <scalbn+0x98>
 80111fa:	460b      	mov	r3, r1
 80111fc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011200:	3936      	subs	r1, #54	; 0x36
 8011202:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011206:	4296      	cmp	r6, r2
 8011208:	dd0d      	ble.n	8011226 <scalbn+0x7e>
 801120a:	2d00      	cmp	r5, #0
 801120c:	a11c      	add	r1, pc, #112	; (adr r1, 8011280 <scalbn+0xd8>)
 801120e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011212:	da02      	bge.n	801121a <scalbn+0x72>
 8011214:	a11c      	add	r1, pc, #112	; (adr r1, 8011288 <scalbn+0xe0>)
 8011216:	e9d1 0100 	ldrd	r0, r1, [r1]
 801121a:	a319      	add	r3, pc, #100	; (adr r3, 8011280 <scalbn+0xd8>)
 801121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011220:	f7ef fa5a 	bl	80006d8 <__aeabi_dmul>
 8011224:	e7e6      	b.n	80111f4 <scalbn+0x4c>
 8011226:	1872      	adds	r2, r6, r1
 8011228:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801122c:	428a      	cmp	r2, r1
 801122e:	dcec      	bgt.n	801120a <scalbn+0x62>
 8011230:	2a00      	cmp	r2, #0
 8011232:	dd08      	ble.n	8011246 <scalbn+0x9e>
 8011234:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011238:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801123c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011240:	ec45 4b10 	vmov	d0, r4, r5
 8011244:	bd70      	pop	{r4, r5, r6, pc}
 8011246:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801124a:	da08      	bge.n	801125e <scalbn+0xb6>
 801124c:	2d00      	cmp	r5, #0
 801124e:	a10a      	add	r1, pc, #40	; (adr r1, 8011278 <scalbn+0xd0>)
 8011250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011254:	dac0      	bge.n	80111d8 <scalbn+0x30>
 8011256:	a10e      	add	r1, pc, #56	; (adr r1, 8011290 <scalbn+0xe8>)
 8011258:	e9d1 0100 	ldrd	r0, r1, [r1]
 801125c:	e7bc      	b.n	80111d8 <scalbn+0x30>
 801125e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011262:	3236      	adds	r2, #54	; 0x36
 8011264:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011268:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801126c:	4620      	mov	r0, r4
 801126e:	4b0c      	ldr	r3, [pc, #48]	; (80112a0 <scalbn+0xf8>)
 8011270:	2200      	movs	r2, #0
 8011272:	e7d5      	b.n	8011220 <scalbn+0x78>
 8011274:	f3af 8000 	nop.w
 8011278:	c2f8f359 	.word	0xc2f8f359
 801127c:	01a56e1f 	.word	0x01a56e1f
 8011280:	8800759c 	.word	0x8800759c
 8011284:	7e37e43c 	.word	0x7e37e43c
 8011288:	8800759c 	.word	0x8800759c
 801128c:	fe37e43c 	.word	0xfe37e43c
 8011290:	c2f8f359 	.word	0xc2f8f359
 8011294:	81a56e1f 	.word	0x81a56e1f
 8011298:	43500000 	.word	0x43500000
 801129c:	ffff3cb0 	.word	0xffff3cb0
 80112a0:	3c900000 	.word	0x3c900000

080112a4 <with_errno>:
 80112a4:	b570      	push	{r4, r5, r6, lr}
 80112a6:	4604      	mov	r4, r0
 80112a8:	460d      	mov	r5, r1
 80112aa:	4616      	mov	r6, r2
 80112ac:	f7fc fffe 	bl	800e2ac <__errno>
 80112b0:	4629      	mov	r1, r5
 80112b2:	6006      	str	r6, [r0, #0]
 80112b4:	4620      	mov	r0, r4
 80112b6:	bd70      	pop	{r4, r5, r6, pc}

080112b8 <xflow>:
 80112b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112ba:	4614      	mov	r4, r2
 80112bc:	461d      	mov	r5, r3
 80112be:	b108      	cbz	r0, 80112c4 <xflow+0xc>
 80112c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80112c4:	e9cd 2300 	strd	r2, r3, [sp]
 80112c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112cc:	4620      	mov	r0, r4
 80112ce:	4629      	mov	r1, r5
 80112d0:	f7ef fa02 	bl	80006d8 <__aeabi_dmul>
 80112d4:	2222      	movs	r2, #34	; 0x22
 80112d6:	b003      	add	sp, #12
 80112d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112dc:	f7ff bfe2 	b.w	80112a4 <with_errno>

080112e0 <__math_uflow>:
 80112e0:	b508      	push	{r3, lr}
 80112e2:	2200      	movs	r2, #0
 80112e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80112e8:	f7ff ffe6 	bl	80112b8 <xflow>
 80112ec:	ec41 0b10 	vmov	d0, r0, r1
 80112f0:	bd08      	pop	{r3, pc}

080112f2 <__math_oflow>:
 80112f2:	b508      	push	{r3, lr}
 80112f4:	2200      	movs	r2, #0
 80112f6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80112fa:	f7ff ffdd 	bl	80112b8 <xflow>
 80112fe:	ec41 0b10 	vmov	d0, r0, r1
 8011302:	bd08      	pop	{r3, pc}

08011304 <_sbrk>:
 8011304:	4a04      	ldr	r2, [pc, #16]	; (8011318 <_sbrk+0x14>)
 8011306:	6811      	ldr	r1, [r2, #0]
 8011308:	4603      	mov	r3, r0
 801130a:	b909      	cbnz	r1, 8011310 <_sbrk+0xc>
 801130c:	4903      	ldr	r1, [pc, #12]	; (801131c <_sbrk+0x18>)
 801130e:	6011      	str	r1, [r2, #0]
 8011310:	6810      	ldr	r0, [r2, #0]
 8011312:	4403      	add	r3, r0
 8011314:	6013      	str	r3, [r2, #0]
 8011316:	4770      	bx	lr
 8011318:	2001a450 	.word	0x2001a450
 801131c:	2001a458 	.word	0x2001a458

08011320 <_init>:
 8011320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011322:	bf00      	nop
 8011324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011326:	bc08      	pop	{r3}
 8011328:	469e      	mov	lr, r3
 801132a:	4770      	bx	lr

0801132c <_fini>:
 801132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801132e:	bf00      	nop
 8011330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011332:	bc08      	pop	{r3}
 8011334:	469e      	mov	lr, r3
 8011336:	4770      	bx	lr
