
First_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ffc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080071cc  080071cc  000171cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007208  08007208  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007210  08007210  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007210  08007210  00017210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007214  08007214  00017214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bcc  2000000c  08007224  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd8  08007224  00020bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db67  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003294  00000000  00000000  0003dba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001790  00000000  00000000  00040e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001658  00000000  00000000  000425c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000046ee  00000000  00000000  00043c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001392f  00000000  00000000  0004830e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0b66  00000000  00000000  0005bc3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c7a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006594  00000000  00000000  0013c820  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080071b4 	.word	0x080071b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	080071b4 	.word	0x080071b4

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20000b30 	.word	0x20000b30

080002a4 <__aeabi_drsub>:
 80002a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a8:	e002      	b.n	80002b0 <__adddf3>
 80002aa:	bf00      	nop

080002ac <__aeabi_dsub>:
 80002ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002b0 <__adddf3>:
 80002b0:	b530      	push	{r4, r5, lr}
 80002b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ba:	ea94 0f05 	teq	r4, r5
 80002be:	bf08      	it	eq
 80002c0:	ea90 0f02 	teqeq	r0, r2
 80002c4:	bf1f      	itttt	ne
 80002c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d6:	f000 80e2 	beq.w	800049e <__adddf3+0x1ee>
 80002da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e2:	bfb8      	it	lt
 80002e4:	426d      	neglt	r5, r5
 80002e6:	dd0c      	ble.n	8000302 <__adddf3+0x52>
 80002e8:	442c      	add	r4, r5
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	ea82 0000 	eor.w	r0, r2, r0
 80002f6:	ea83 0101 	eor.w	r1, r3, r1
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	2d36      	cmp	r5, #54	; 0x36
 8000304:	bf88      	it	hi
 8000306:	bd30      	pophi	{r4, r5, pc}
 8000308:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800030c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000310:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000314:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x70>
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000324:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000328:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x84>
 800032e:	4252      	negs	r2, r2
 8000330:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000334:	ea94 0f05 	teq	r4, r5
 8000338:	f000 80a7 	beq.w	800048a <__adddf3+0x1da>
 800033c:	f1a4 0401 	sub.w	r4, r4, #1
 8000340:	f1d5 0e20 	rsbs	lr, r5, #32
 8000344:	db0d      	blt.n	8000362 <__adddf3+0xb2>
 8000346:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034a:	fa22 f205 	lsr.w	r2, r2, r5
 800034e:	1880      	adds	r0, r0, r2
 8000350:	f141 0100 	adc.w	r1, r1, #0
 8000354:	fa03 f20e 	lsl.w	r2, r3, lr
 8000358:	1880      	adds	r0, r0, r2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	4159      	adcs	r1, r3
 8000360:	e00e      	b.n	8000380 <__adddf3+0xd0>
 8000362:	f1a5 0520 	sub.w	r5, r5, #32
 8000366:	f10e 0e20 	add.w	lr, lr, #32
 800036a:	2a01      	cmp	r2, #1
 800036c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000370:	bf28      	it	cs
 8000372:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	18c0      	adds	r0, r0, r3
 800037c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000380:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000384:	d507      	bpl.n	8000396 <__adddf3+0xe6>
 8000386:	f04f 0e00 	mov.w	lr, #0
 800038a:	f1dc 0c00 	rsbs	ip, ip, #0
 800038e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000392:	eb6e 0101 	sbc.w	r1, lr, r1
 8000396:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800039a:	d31b      	bcc.n	80003d4 <__adddf3+0x124>
 800039c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003a0:	d30c      	bcc.n	80003bc <__adddf3+0x10c>
 80003a2:	0849      	lsrs	r1, r1, #1
 80003a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003ac:	f104 0401 	add.w	r4, r4, #1
 80003b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b8:	f080 809a 	bcs.w	80004f0 <__adddf3+0x240>
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c0:	bf08      	it	eq
 80003c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c6:	f150 0000 	adcs.w	r0, r0, #0
 80003ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ce:	ea41 0105 	orr.w	r1, r1, r5
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d8:	4140      	adcs	r0, r0
 80003da:	eb41 0101 	adc.w	r1, r1, r1
 80003de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e2:	f1a4 0401 	sub.w	r4, r4, #1
 80003e6:	d1e9      	bne.n	80003bc <__adddf3+0x10c>
 80003e8:	f091 0f00 	teq	r1, #0
 80003ec:	bf04      	itt	eq
 80003ee:	4601      	moveq	r1, r0
 80003f0:	2000      	moveq	r0, #0
 80003f2:	fab1 f381 	clz	r3, r1
 80003f6:	bf08      	it	eq
 80003f8:	3320      	addeq	r3, #32
 80003fa:	f1a3 030b 	sub.w	r3, r3, #11
 80003fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000402:	da0c      	bge.n	800041e <__adddf3+0x16e>
 8000404:	320c      	adds	r2, #12
 8000406:	dd08      	ble.n	800041a <__adddf3+0x16a>
 8000408:	f102 0c14 	add.w	ip, r2, #20
 800040c:	f1c2 020c 	rsb	r2, r2, #12
 8000410:	fa01 f00c 	lsl.w	r0, r1, ip
 8000414:	fa21 f102 	lsr.w	r1, r1, r2
 8000418:	e00c      	b.n	8000434 <__adddf3+0x184>
 800041a:	f102 0214 	add.w	r2, r2, #20
 800041e:	bfd8      	it	le
 8000420:	f1c2 0c20 	rsble	ip, r2, #32
 8000424:	fa01 f102 	lsl.w	r1, r1, r2
 8000428:	fa20 fc0c 	lsr.w	ip, r0, ip
 800042c:	bfdc      	itt	le
 800042e:	ea41 010c 	orrle.w	r1, r1, ip
 8000432:	4090      	lslle	r0, r2
 8000434:	1ae4      	subs	r4, r4, r3
 8000436:	bfa2      	ittt	ge
 8000438:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800043c:	4329      	orrge	r1, r5
 800043e:	bd30      	popge	{r4, r5, pc}
 8000440:	ea6f 0404 	mvn.w	r4, r4
 8000444:	3c1f      	subs	r4, #31
 8000446:	da1c      	bge.n	8000482 <__adddf3+0x1d2>
 8000448:	340c      	adds	r4, #12
 800044a:	dc0e      	bgt.n	800046a <__adddf3+0x1ba>
 800044c:	f104 0414 	add.w	r4, r4, #20
 8000450:	f1c4 0220 	rsb	r2, r4, #32
 8000454:	fa20 f004 	lsr.w	r0, r0, r4
 8000458:	fa01 f302 	lsl.w	r3, r1, r2
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	fa21 f304 	lsr.w	r3, r1, r4
 8000464:	ea45 0103 	orr.w	r1, r5, r3
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	f1c4 040c 	rsb	r4, r4, #12
 800046e:	f1c4 0220 	rsb	r2, r4, #32
 8000472:	fa20 f002 	lsr.w	r0, r0, r2
 8000476:	fa01 f304 	lsl.w	r3, r1, r4
 800047a:	ea40 0003 	orr.w	r0, r0, r3
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	fa21 f004 	lsr.w	r0, r1, r4
 8000486:	4629      	mov	r1, r5
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f094 0f00 	teq	r4, #0
 800048e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000492:	bf06      	itte	eq
 8000494:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000498:	3401      	addeq	r4, #1
 800049a:	3d01      	subne	r5, #1
 800049c:	e74e      	b.n	800033c <__adddf3+0x8c>
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf18      	it	ne
 80004a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a8:	d029      	beq.n	80004fe <__adddf3+0x24e>
 80004aa:	ea94 0f05 	teq	r4, r5
 80004ae:	bf08      	it	eq
 80004b0:	ea90 0f02 	teqeq	r0, r2
 80004b4:	d005      	beq.n	80004c2 <__adddf3+0x212>
 80004b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ba:	bf04      	itt	eq
 80004bc:	4619      	moveq	r1, r3
 80004be:	4610      	moveq	r0, r2
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	ea91 0f03 	teq	r1, r3
 80004c6:	bf1e      	ittt	ne
 80004c8:	2100      	movne	r1, #0
 80004ca:	2000      	movne	r0, #0
 80004cc:	bd30      	popne	{r4, r5, pc}
 80004ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d2:	d105      	bne.n	80004e0 <__adddf3+0x230>
 80004d4:	0040      	lsls	r0, r0, #1
 80004d6:	4149      	adcs	r1, r1
 80004d8:	bf28      	it	cs
 80004da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e4:	bf3c      	itt	cc
 80004e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ea:	bd30      	popcc	{r4, r5, pc}
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f8:	f04f 0000 	mov.w	r0, #0
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf1a      	itte	ne
 8000504:	4619      	movne	r1, r3
 8000506:	4610      	movne	r0, r2
 8000508:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800050c:	bf1c      	itt	ne
 800050e:	460b      	movne	r3, r1
 8000510:	4602      	movne	r2, r0
 8000512:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000516:	bf06      	itte	eq
 8000518:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800051c:	ea91 0f03 	teqeq	r1, r3
 8000520:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	bf00      	nop

08000528 <__aeabi_ui2d>:
 8000528:	f090 0f00 	teq	r0, #0
 800052c:	bf04      	itt	eq
 800052e:	2100      	moveq	r1, #0
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000538:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053c:	f04f 0500 	mov.w	r5, #0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e750      	b.n	80003e8 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_i2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000560:	bf48      	it	mi
 8000562:	4240      	negmi	r0, r0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e73e      	b.n	80003e8 <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_f2d>:
 800056c:	0042      	lsls	r2, r0, #1
 800056e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000572:	ea4f 0131 	mov.w	r1, r1, rrx
 8000576:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057a:	bf1f      	itttt	ne
 800057c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000580:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000584:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000588:	4770      	bxne	lr
 800058a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058e:	bf08      	it	eq
 8000590:	4770      	bxeq	lr
 8000592:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000596:	bf04      	itt	eq
 8000598:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ac:	e71c      	b.n	80003e8 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_ul2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	e00a      	b.n	80005d6 <__aeabi_l2d+0x16>

080005c0 <__aeabi_l2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ce:	d502      	bpl.n	80005d6 <__aeabi_l2d+0x16>
 80005d0:	4240      	negs	r0, r0
 80005d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e2:	f43f aed8 	beq.w	8000396 <__adddf3+0xe6>
 80005e6:	f04f 0203 	mov.w	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f6:	bf18      	it	ne
 80005f8:	3203      	addne	r2, #3
 80005fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fe:	f1c2 0320 	rsb	r3, r2, #32
 8000602:	fa00 fc03 	lsl.w	ip, r0, r3
 8000606:	fa20 f002 	lsr.w	r0, r0, r2
 800060a:	fa01 fe03 	lsl.w	lr, r1, r3
 800060e:	ea40 000e 	orr.w	r0, r0, lr
 8000612:	fa21 f102 	lsr.w	r1, r1, r2
 8000616:	4414      	add	r4, r2
 8000618:	e6bd      	b.n	8000396 <__adddf3+0xe6>
 800061a:	bf00      	nop

0800061c <__aeabi_dmul>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062a:	bf1d      	ittte	ne
 800062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000630:	ea94 0f0c 	teqne	r4, ip
 8000634:	ea95 0f0c 	teqne	r5, ip
 8000638:	f000 f8de 	bleq	80007f8 <__aeabi_dmul+0x1dc>
 800063c:	442c      	add	r4, r5
 800063e:	ea81 0603 	eor.w	r6, r1, r3
 8000642:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000646:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064e:	bf18      	it	ne
 8000650:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800065c:	d038      	beq.n	80006d0 <__aeabi_dmul+0xb4>
 800065e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000662:	f04f 0500 	mov.w	r5, #0
 8000666:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000672:	f04f 0600 	mov.w	r6, #0
 8000676:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067a:	f09c 0f00 	teq	ip, #0
 800067e:	bf18      	it	ne
 8000680:	f04e 0e01 	orrne.w	lr, lr, #1
 8000684:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000688:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800068c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000690:	d204      	bcs.n	800069c <__aeabi_dmul+0x80>
 8000692:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000696:	416d      	adcs	r5, r5
 8000698:	eb46 0606 	adc.w	r6, r6, r6
 800069c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b4:	bf88      	it	hi
 80006b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ba:	d81e      	bhi.n	80006fa <__aeabi_dmul+0xde>
 80006bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c0:	bf08      	it	eq
 80006c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c6:	f150 0000 	adcs.w	r0, r0, #0
 80006ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d4:	ea46 0101 	orr.w	r1, r6, r1
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e4:	bfc2      	ittt	gt
 80006e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	popgt	{r4, r5, r6, pc}
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f04f 0e00 	mov.w	lr, #0
 80006f8:	3c01      	subs	r4, #1
 80006fa:	f300 80ab 	bgt.w	8000854 <__aeabi_dmul+0x238>
 80006fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000702:	bfde      	ittt	le
 8000704:	2000      	movle	r0, #0
 8000706:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070a:	bd70      	pople	{r4, r5, r6, pc}
 800070c:	f1c4 0400 	rsb	r4, r4, #0
 8000710:	3c20      	subs	r4, #32
 8000712:	da35      	bge.n	8000780 <__aeabi_dmul+0x164>
 8000714:	340c      	adds	r4, #12
 8000716:	dc1b      	bgt.n	8000750 <__aeabi_dmul+0x134>
 8000718:	f104 0414 	add.w	r4, r4, #20
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f305 	lsl.w	r3, r0, r5
 8000724:	fa20 f004 	lsr.w	r0, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000734:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	fa21 f604 	lsr.w	r6, r1, r4
 8000740:	eb42 0106 	adc.w	r1, r2, r6
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 040c 	rsb	r4, r4, #12
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f304 	lsl.w	r3, r0, r4
 800075c:	fa20 f005 	lsr.w	r0, r0, r5
 8000760:	fa01 f204 	lsl.w	r2, r1, r4
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	f141 0100 	adc.w	r1, r1, #0
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f205 	lsl.w	r2, r0, r5
 8000788:	ea4e 0e02 	orr.w	lr, lr, r2
 800078c:	fa20 f304 	lsr.w	r3, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea43 0302 	orr.w	r3, r3, r2
 8000798:	fa21 f004 	lsr.w	r0, r1, r4
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	fa21 f204 	lsr.w	r2, r1, r4
 80007a4:	ea20 0002 	bic.w	r0, r0, r2
 80007a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f094 0f00 	teq	r4, #0
 80007bc:	d10f      	bne.n	80007de <__aeabi_dmul+0x1c2>
 80007be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c2:	0040      	lsls	r0, r0, #1
 80007c4:	eb41 0101 	adc.w	r1, r1, r1
 80007c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007cc:	bf08      	it	eq
 80007ce:	3c01      	subeq	r4, #1
 80007d0:	d0f7      	beq.n	80007c2 <__aeabi_dmul+0x1a6>
 80007d2:	ea41 0106 	orr.w	r1, r1, r6
 80007d6:	f095 0f00 	teq	r5, #0
 80007da:	bf18      	it	ne
 80007dc:	4770      	bxne	lr
 80007de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	eb43 0303 	adc.w	r3, r3, r3
 80007e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3d01      	subeq	r5, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1c6>
 80007f2:	ea43 0306 	orr.w	r3, r3, r6
 80007f6:	4770      	bx	lr
 80007f8:	ea94 0f0c 	teq	r4, ip
 80007fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000800:	bf18      	it	ne
 8000802:	ea95 0f0c 	teqne	r5, ip
 8000806:	d00c      	beq.n	8000822 <__aeabi_dmul+0x206>
 8000808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080c:	bf18      	it	ne
 800080e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000812:	d1d1      	bne.n	80007b8 <__aeabi_dmul+0x19c>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000826:	bf06      	itte	eq
 8000828:	4610      	moveq	r0, r2
 800082a:	4619      	moveq	r1, r3
 800082c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000830:	d019      	beq.n	8000866 <__aeabi_dmul+0x24a>
 8000832:	ea94 0f0c 	teq	r4, ip
 8000836:	d102      	bne.n	800083e <__aeabi_dmul+0x222>
 8000838:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800083c:	d113      	bne.n	8000866 <__aeabi_dmul+0x24a>
 800083e:	ea95 0f0c 	teq	r5, ip
 8000842:	d105      	bne.n	8000850 <__aeabi_dmul+0x234>
 8000844:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000848:	bf1c      	itt	ne
 800084a:	4610      	movne	r0, r2
 800084c:	4619      	movne	r1, r3
 800084e:	d10a      	bne.n	8000866 <__aeabi_dmul+0x24a>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086e:	bd70      	pop	{r4, r5, r6, pc}

08000870 <__aeabi_ddiv>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000876:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087e:	bf1d      	ittte	ne
 8000880:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000884:	ea94 0f0c 	teqne	r4, ip
 8000888:	ea95 0f0c 	teqne	r5, ip
 800088c:	f000 f8a7 	bleq	80009de <__aeabi_ddiv+0x16e>
 8000890:	eba4 0405 	sub.w	r4, r4, r5
 8000894:	ea81 0e03 	eor.w	lr, r1, r3
 8000898:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800089c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a0:	f000 8088 	beq.w	80009b4 <__aeabi_ddiv+0x144>
 80008a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c8:	429d      	cmp	r5, r3
 80008ca:	bf08      	it	eq
 80008cc:	4296      	cmpeq	r6, r2
 80008ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d6:	d202      	bcs.n	80008de <__aeabi_ddiv+0x6e>
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	1ab6      	subs	r6, r6, r2
 80008e0:	eb65 0503 	sbc.w	r5, r5, r3
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 000c 	orrcs.w	r0, r0, ip
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800094c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000950:	d018      	beq.n	8000984 <__aeabi_ddiv+0x114>
 8000952:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000956:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000962:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000966:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096e:	d1c0      	bne.n	80008f2 <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	d10b      	bne.n	800098e <__aeabi_ddiv+0x11e>
 8000976:	ea41 0100 	orr.w	r1, r1, r0
 800097a:	f04f 0000 	mov.w	r0, #0
 800097e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000982:	e7b6      	b.n	80008f2 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	bf04      	itt	eq
 800098a:	4301      	orreq	r1, r0
 800098c:	2000      	moveq	r0, #0
 800098e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000992:	bf88      	it	hi
 8000994:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000998:	f63f aeaf 	bhi.w	80006fa <__aeabi_dmul+0xde>
 800099c:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a0:	bf04      	itt	eq
 80009a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009aa:	f150 0000 	adcs.w	r0, r0, #0
 80009ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c0:	bfc2      	ittt	gt
 80009c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	popgt	{r4, r5, r6, pc}
 80009cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d0:	f04f 0e00 	mov.w	lr, #0
 80009d4:	3c01      	subs	r4, #1
 80009d6:	e690      	b.n	80006fa <__aeabi_dmul+0xde>
 80009d8:	ea45 0e06 	orr.w	lr, r5, r6
 80009dc:	e68d      	b.n	80006fa <__aeabi_dmul+0xde>
 80009de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e2:	ea94 0f0c 	teq	r4, ip
 80009e6:	bf08      	it	eq
 80009e8:	ea95 0f0c 	teqeq	r5, ip
 80009ec:	f43f af3b 	beq.w	8000866 <__aeabi_dmul+0x24a>
 80009f0:	ea94 0f0c 	teq	r4, ip
 80009f4:	d10a      	bne.n	8000a0c <__aeabi_ddiv+0x19c>
 80009f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fa:	f47f af34 	bne.w	8000866 <__aeabi_dmul+0x24a>
 80009fe:	ea95 0f0c 	teq	r5, ip
 8000a02:	f47f af25 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e72c      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a0c:	ea95 0f0c 	teq	r5, ip
 8000a10:	d106      	bne.n	8000a20 <__aeabi_ddiv+0x1b0>
 8000a12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a16:	f43f aefd 	beq.w	8000814 <__aeabi_dmul+0x1f8>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e722      	b.n	8000866 <__aeabi_dmul+0x24a>
 8000a20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2a:	f47f aec5 	bne.w	80007b8 <__aeabi_dmul+0x19c>
 8000a2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a32:	f47f af0d 	bne.w	8000850 <__aeabi_dmul+0x234>
 8000a36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3a:	f47f aeeb 	bne.w	8000814 <__aeabi_dmul+0x1f8>
 8000a3e:	e712      	b.n	8000866 <__aeabi_dmul+0x24a>

08000a40 <__aeabi_d2uiz>:
 8000a40:	004a      	lsls	r2, r1, #1
 8000a42:	d211      	bcs.n	8000a68 <__aeabi_d2uiz+0x28>
 8000a44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a48:	d211      	bcs.n	8000a6e <__aeabi_d2uiz+0x2e>
 8000a4a:	d50d      	bpl.n	8000a68 <__aeabi_d2uiz+0x28>
 8000a4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a54:	d40e      	bmi.n	8000a74 <__aeabi_d2uiz+0x34>
 8000a56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d102      	bne.n	8000a7a <__aeabi_d2uiz+0x3a>
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	4770      	bx	lr
 8000a7a:	f04f 0000 	mov.w	r0, #0
 8000a7e:	4770      	bx	lr

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_uldivmod>:
 8000b20:	b953      	cbnz	r3, 8000b38 <__aeabi_uldivmod+0x18>
 8000b22:	b94a      	cbnz	r2, 8000b38 <__aeabi_uldivmod+0x18>
 8000b24:	2900      	cmp	r1, #0
 8000b26:	bf08      	it	eq
 8000b28:	2800      	cmpeq	r0, #0
 8000b2a:	bf1c      	itt	ne
 8000b2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b30:	f04f 30ff 	movne.w	r0, #4294967295
 8000b34:	f000 b972 	b.w	8000e1c <__aeabi_idiv0>
 8000b38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b40:	f000 f806 	bl	8000b50 <__udivmoddi4>
 8000b44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4c:	b004      	add	sp, #16
 8000b4e:	4770      	bx	lr

08000b50 <__udivmoddi4>:
 8000b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b54:	9e08      	ldr	r6, [sp, #32]
 8000b56:	4604      	mov	r4, r0
 8000b58:	4688      	mov	r8, r1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d14b      	bne.n	8000bf6 <__udivmoddi4+0xa6>
 8000b5e:	428a      	cmp	r2, r1
 8000b60:	4615      	mov	r5, r2
 8000b62:	d967      	bls.n	8000c34 <__udivmoddi4+0xe4>
 8000b64:	fab2 f282 	clz	r2, r2
 8000b68:	b14a      	cbz	r2, 8000b7e <__udivmoddi4+0x2e>
 8000b6a:	f1c2 0720 	rsb	r7, r2, #32
 8000b6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b72:	fa20 f707 	lsr.w	r7, r0, r7
 8000b76:	4095      	lsls	r5, r2
 8000b78:	ea47 0803 	orr.w	r8, r7, r3
 8000b7c:	4094      	lsls	r4, r2
 8000b7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b82:	0c23      	lsrs	r3, r4, #16
 8000b84:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b88:	fa1f fc85 	uxth.w	ip, r5
 8000b8c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b90:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b94:	fb07 f10c 	mul.w	r1, r7, ip
 8000b98:	4299      	cmp	r1, r3
 8000b9a:	d909      	bls.n	8000bb0 <__udivmoddi4+0x60>
 8000b9c:	18eb      	adds	r3, r5, r3
 8000b9e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ba2:	f080 811b 	bcs.w	8000ddc <__udivmoddi4+0x28c>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 8118 	bls.w	8000ddc <__udivmoddi4+0x28c>
 8000bac:	3f02      	subs	r7, #2
 8000bae:	442b      	add	r3, r5
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bc4:	45a4      	cmp	ip, r4
 8000bc6:	d909      	bls.n	8000bdc <__udivmoddi4+0x8c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	f080 8107 	bcs.w	8000de0 <__udivmoddi4+0x290>
 8000bd2:	45a4      	cmp	ip, r4
 8000bd4:	f240 8104 	bls.w	8000de0 <__udivmoddi4+0x290>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	442c      	add	r4, r5
 8000bdc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000be0:	eba4 040c 	sub.w	r4, r4, ip
 8000be4:	2700      	movs	r7, #0
 8000be6:	b11e      	cbz	r6, 8000bf0 <__udivmoddi4+0xa0>
 8000be8:	40d4      	lsrs	r4, r2
 8000bea:	2300      	movs	r3, #0
 8000bec:	e9c6 4300 	strd	r4, r3, [r6]
 8000bf0:	4639      	mov	r1, r7
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d909      	bls.n	8000c0e <__udivmoddi4+0xbe>
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	f000 80eb 	beq.w	8000dd6 <__udivmoddi4+0x286>
 8000c00:	2700      	movs	r7, #0
 8000c02:	e9c6 0100 	strd	r0, r1, [r6]
 8000c06:	4638      	mov	r0, r7
 8000c08:	4639      	mov	r1, r7
 8000c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0e:	fab3 f783 	clz	r7, r3
 8000c12:	2f00      	cmp	r7, #0
 8000c14:	d147      	bne.n	8000ca6 <__udivmoddi4+0x156>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d302      	bcc.n	8000c20 <__udivmoddi4+0xd0>
 8000c1a:	4282      	cmp	r2, r0
 8000c1c:	f200 80fa 	bhi.w	8000e14 <__udivmoddi4+0x2c4>
 8000c20:	1a84      	subs	r4, r0, r2
 8000c22:	eb61 0303 	sbc.w	r3, r1, r3
 8000c26:	2001      	movs	r0, #1
 8000c28:	4698      	mov	r8, r3
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	d0e0      	beq.n	8000bf0 <__udivmoddi4+0xa0>
 8000c2e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c32:	e7dd      	b.n	8000bf0 <__udivmoddi4+0xa0>
 8000c34:	b902      	cbnz	r2, 8000c38 <__udivmoddi4+0xe8>
 8000c36:	deff      	udf	#255	; 0xff
 8000c38:	fab2 f282 	clz	r2, r2
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	f040 808f 	bne.w	8000d60 <__udivmoddi4+0x210>
 8000c42:	1b49      	subs	r1, r1, r5
 8000c44:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c48:	fa1f f885 	uxth.w	r8, r5
 8000c4c:	2701      	movs	r7, #1
 8000c4e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c52:	0c23      	lsrs	r3, r4, #16
 8000c54:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d907      	bls.n	8000c74 <__udivmoddi4+0x124>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x122>
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	f200 80cd 	bhi.w	8000e0c <__udivmoddi4+0x2bc>
 8000c72:	4684      	mov	ip, r0
 8000c74:	1a59      	subs	r1, r3, r1
 8000c76:	b2a3      	uxth	r3, r4
 8000c78:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c7c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c80:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c84:	fb08 f800 	mul.w	r8, r8, r0
 8000c88:	45a0      	cmp	r8, r4
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0x14c>
 8000c8c:	192c      	adds	r4, r5, r4
 8000c8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x14a>
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	f200 80b6 	bhi.w	8000e06 <__udivmoddi4+0x2b6>
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	eba4 0408 	sub.w	r4, r4, r8
 8000ca0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca4:	e79f      	b.n	8000be6 <__udivmoddi4+0x96>
 8000ca6:	f1c7 0c20 	rsb	ip, r7, #32
 8000caa:	40bb      	lsls	r3, r7
 8000cac:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cb0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cb4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cb8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cbc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cc0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cc4:	4325      	orrs	r5, r4
 8000cc6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cca:	0c2c      	lsrs	r4, r5, #16
 8000ccc:	fb08 3319 	mls	r3, r8, r9, r3
 8000cd0:	fa1f fa8e 	uxth.w	sl, lr
 8000cd4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cd8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cdc:	429c      	cmp	r4, r3
 8000cde:	fa02 f207 	lsl.w	r2, r2, r7
 8000ce2:	fa00 f107 	lsl.w	r1, r0, r7
 8000ce6:	d90b      	bls.n	8000d00 <__udivmoddi4+0x1b0>
 8000ce8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf0:	f080 8087 	bcs.w	8000e02 <__udivmoddi4+0x2b2>
 8000cf4:	429c      	cmp	r4, r3
 8000cf6:	f240 8084 	bls.w	8000e02 <__udivmoddi4+0x2b2>
 8000cfa:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfe:	4473      	add	r3, lr
 8000d00:	1b1b      	subs	r3, r3, r4
 8000d02:	b2ad      	uxth	r5, r5
 8000d04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d08:	fb08 3310 	mls	r3, r8, r0, r3
 8000d0c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d10:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d14:	45a2      	cmp	sl, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x1da>
 8000d18:	eb1e 0404 	adds.w	r4, lr, r4
 8000d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d20:	d26b      	bcs.n	8000dfa <__udivmoddi4+0x2aa>
 8000d22:	45a2      	cmp	sl, r4
 8000d24:	d969      	bls.n	8000dfa <__udivmoddi4+0x2aa>
 8000d26:	3802      	subs	r0, #2
 8000d28:	4474      	add	r4, lr
 8000d2a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	eba4 040a 	sub.w	r4, r4, sl
 8000d36:	454c      	cmp	r4, r9
 8000d38:	46c2      	mov	sl, r8
 8000d3a:	464b      	mov	r3, r9
 8000d3c:	d354      	bcc.n	8000de8 <__udivmoddi4+0x298>
 8000d3e:	d051      	beq.n	8000de4 <__udivmoddi4+0x294>
 8000d40:	2e00      	cmp	r6, #0
 8000d42:	d069      	beq.n	8000e18 <__udivmoddi4+0x2c8>
 8000d44:	ebb1 050a 	subs.w	r5, r1, sl
 8000d48:	eb64 0403 	sbc.w	r4, r4, r3
 8000d4c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d50:	40fd      	lsrs	r5, r7
 8000d52:	40fc      	lsrs	r4, r7
 8000d54:	ea4c 0505 	orr.w	r5, ip, r5
 8000d58:	e9c6 5400 	strd	r5, r4, [r6]
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	e747      	b.n	8000bf0 <__udivmoddi4+0xa0>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f703 	lsr.w	r7, r0, r3
 8000d68:	4095      	lsls	r5, r2
 8000d6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d76:	4338      	orrs	r0, r7
 8000d78:	0c01      	lsrs	r1, r0, #16
 8000d7a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d7e:	fa1f f885 	uxth.w	r8, r5
 8000d82:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d86:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8a:	fb07 f308 	mul.w	r3, r7, r8
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	fa04 f402 	lsl.w	r4, r4, r2
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x256>
 8000d96:	1869      	adds	r1, r5, r1
 8000d98:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d9c:	d22f      	bcs.n	8000dfe <__udivmoddi4+0x2ae>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d92d      	bls.n	8000dfe <__udivmoddi4+0x2ae>
 8000da2:	3f02      	subs	r7, #2
 8000da4:	4429      	add	r1, r5
 8000da6:	1acb      	subs	r3, r1, r3
 8000da8:	b281      	uxth	r1, r0
 8000daa:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dae:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db6:	fb00 f308 	mul.w	r3, r0, r8
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x27e>
 8000dbe:	1869      	adds	r1, r5, r1
 8000dc0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc4:	d217      	bcs.n	8000df6 <__udivmoddi4+0x2a6>
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d915      	bls.n	8000df6 <__udivmoddi4+0x2a6>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	4429      	add	r1, r5
 8000dce:	1ac9      	subs	r1, r1, r3
 8000dd0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dd4:	e73b      	b.n	8000c4e <__udivmoddi4+0xfe>
 8000dd6:	4637      	mov	r7, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e709      	b.n	8000bf0 <__udivmoddi4+0xa0>
 8000ddc:	4607      	mov	r7, r0
 8000dde:	e6e7      	b.n	8000bb0 <__udivmoddi4+0x60>
 8000de0:	4618      	mov	r0, r3
 8000de2:	e6fb      	b.n	8000bdc <__udivmoddi4+0x8c>
 8000de4:	4541      	cmp	r1, r8
 8000de6:	d2ab      	bcs.n	8000d40 <__udivmoddi4+0x1f0>
 8000de8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dec:	eb69 020e 	sbc.w	r2, r9, lr
 8000df0:	3801      	subs	r0, #1
 8000df2:	4613      	mov	r3, r2
 8000df4:	e7a4      	b.n	8000d40 <__udivmoddi4+0x1f0>
 8000df6:	4660      	mov	r0, ip
 8000df8:	e7e9      	b.n	8000dce <__udivmoddi4+0x27e>
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	e795      	b.n	8000d2a <__udivmoddi4+0x1da>
 8000dfe:	4667      	mov	r7, ip
 8000e00:	e7d1      	b.n	8000da6 <__udivmoddi4+0x256>
 8000e02:	4681      	mov	r9, r0
 8000e04:	e77c      	b.n	8000d00 <__udivmoddi4+0x1b0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	442c      	add	r4, r5
 8000e0a:	e747      	b.n	8000c9c <__udivmoddi4+0x14c>
 8000e0c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e10:	442b      	add	r3, r5
 8000e12:	e72f      	b.n	8000c74 <__udivmoddi4+0x124>
 8000e14:	4638      	mov	r0, r7
 8000e16:	e708      	b.n	8000c2a <__udivmoddi4+0xda>
 8000e18:	4637      	mov	r7, r6
 8000e1a:	e6e9      	b.n	8000bf0 <__udivmoddi4+0xa0>

08000e1c <__aeabi_idiv0>:
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <LCD_voidInit>:
#define LCD_SLAVE_ADDRESS 0b01001110

extern I2C_HandleTypeDef hi2c1;

void LCD_voidInit(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	/*Setting 4 bits interface(Twice as the datasheet specefies)*/
	LCD_voidSendCommand(0b00110011);
 8000e24:	2033      	movs	r0, #51	; 0x33
 8000e26:	f000 f829 	bl	8000e7c <LCD_voidSendCommand>
	LCD_voidSendCommand(0b00110010);
 8000e2a:	2032      	movs	r0, #50	; 0x32
 8000e2c:	f000 f826 	bl	8000e7c <LCD_voidSendCommand>
	HAL_Delay(50);
 8000e30:	2032      	movs	r0, #50	; 0x32
 8000e32:	f001 f959 	bl	80020e8 <HAL_Delay>
	/*Setting the LCD Function*/
	LCD_voidSendCommand(0b00101000);
 8000e36:	2028      	movs	r0, #40	; 0x28
 8000e38:	f000 f820 	bl	8000e7c <LCD_voidSendCommand>
	HAL_Delay(50);
 8000e3c:	2032      	movs	r0, #50	; 0x32
 8000e3e:	f001 f953 	bl	80020e8 <HAL_Delay>
	/*Clearing the display*/
	LCD_voidSendCommand(0b00000001);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f000 f81a 	bl	8000e7c <LCD_voidSendCommand>
	HAL_Delay(50);
 8000e48:	2032      	movs	r0, #50	; 0x32
 8000e4a:	f001 f94d 	bl	80020e8 <HAL_Delay>
	/*Set the entry mode*/
	LCD_voidSendCommand(0b00000110);
 8000e4e:	2006      	movs	r0, #6
 8000e50:	f000 f814 	bl	8000e7c <LCD_voidSendCommand>
	HAL_Delay(50);
 8000e54:	2032      	movs	r0, #50	; 0x32
 8000e56:	f001 f947 	bl	80020e8 <HAL_Delay>
	/*Set the display to on*/
	LCD_voidSendCommand(0b00001100);
 8000e5a:	200c      	movs	r0, #12
 8000e5c:	f000 f80e 	bl	8000e7c <LCD_voidSendCommand>
	HAL_Delay(50);
 8000e60:	2032      	movs	r0, #50	; 0x32
 8000e62:	f001 f941 	bl	80020e8 <HAL_Delay>
	/*Set the cursor to home */
	LCD_voidSendCommand(0b00000010);
 8000e66:	2002      	movs	r0, #2
 8000e68:	f000 f808 	bl	8000e7c <LCD_voidSendCommand>
	HAL_Delay(50);
 8000e6c:	2032      	movs	r0, #50	; 0x32
 8000e6e:	f001 f93b 	bl	80020e8 <HAL_Delay>
	/*and the Data address to 0*/
	LCD_voidSendCommand(0b10000000);
 8000e72:	2080      	movs	r0, #128	; 0x80
 8000e74:	f000 f802 	bl	8000e7c <LCD_voidSendCommand>

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <LCD_voidSendCommand>:
void LCD_voidSendCommand(uint8_t Copy_uint8Command)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
 *
 *
 * 0b00000001 --> DataU --> 0b000000000-->0b00000001100
 *
 * */
	Local_uint8Local_uint8DataU=(Copy_uint8Command&0b11110000);
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f023 030f 	bic.w	r3, r3, #15
 8000e8c:	73fb      	strb	r3, [r7, #15]
	Local_uint8Local_uint8DataL=((Copy_uint8Command<<4)&0b11110000);
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	73bb      	strb	r3, [r7, #14]

	Local_uint8Local_uint8DataT[0]=Local_uint8Local_uint8DataU|0b00001100; //EN=1 RS=0
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	f043 030c 	orr.w	r3, r3, #12
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	723b      	strb	r3, [r7, #8]
	Local_uint8Local_uint8DataT[1]=Local_uint8Local_uint8DataU|0b00001000; //EN=0 RS=0
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	727b      	strb	r3, [r7, #9]
	Local_uint8Local_uint8DataT[2]=Local_uint8Local_uint8DataL|0b00001100; //EN=1 RS=0
 8000ea8:	7bbb      	ldrb	r3, [r7, #14]
 8000eaa:	f043 030c 	orr.w	r3, r3, #12
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	72bb      	strb	r3, [r7, #10]
	Local_uint8Local_uint8DataT[3]=Local_uint8Local_uint8DataL|0b00001000; //EN=0 RS=0
 8000eb2:	7bbb      	ldrb	r3, [r7, #14]
 8000eb4:	f043 0308 	orr.w	r3, r3, #8
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDRESS,(uint8_t*)Local_uint8Local_uint8DataT , 4, 100);
 8000ebc:	f107 0208 	add.w	r2, r7, #8
 8000ec0:	2364      	movs	r3, #100	; 0x64
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	214e      	movs	r1, #78	; 0x4e
 8000ec8:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <LCD_voidSendCommand+0x5c>)
 8000eca:	f001 fd87 	bl	80029dc <HAL_I2C_Master_Transmit>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000088c 	.word	0x2000088c

08000edc <LightSensor_voidInit>:
static void TSL2561_GetChannelsReadings(uint16_t* Copy_uint16Data0Val, uint16_t* Copy_uint16Data1Val);
static void TSL2561_WriteByte(uint8_t Copy_uint8RegisterAddress, uint8_t Copy_uint8RegisterValue);
static void TSL2561_ReadByte(uint8_t Copy_uint8RegisterAddress, uint8_t *Copy_puinit8RecivingVariable);

void LightSensor_voidInit(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0

	/*Powering up the module*/

	/*1-first element is the command -> Address of control register
	 * 2-Second element is the 0b00000011 which power up the module */
	TSL2561_WriteByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_CONTROL),0b00000011);
 8000ee0:	2103      	movs	r1, #3
 8000ee2:	2080      	movs	r0, #128	; 0x80
 8000ee4:	f000 f806 	bl	8000ef4 <TSL2561_WriteByte>

	/*1- first element is the command -> Address of timing register
	 *2- Second element is the 0b00010010 which makes the gain = 1 and the integration time
	 *2- =402ms which is the default value*/

	TSL2561_WriteByte((TSL2561_COMMAND_NORMAL|TSL2561_REG_TIMING),0b00000010);
 8000ee8:	2102      	movs	r1, #2
 8000eea:	2081      	movs	r0, #129	; 0x81
 8000eec:	f000 f802 	bl	8000ef4 <TSL2561_WriteByte>


}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <TSL2561_WriteByte>:
	LightSensor_voidInit();

}

static void TSL2561_WriteByte(uint8_t Copy_uint8RegisterAddress, uint8_t Copy_uint8RegisterValue)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af04      	add	r7, sp, #16
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(LightSensor_I2CChannel, LightSensor_SLAVE_ADDRESS,Copy_uint8RegisterAddress, 1, &Copy_uint8RegisterValue,1,TSL2561_Max_Delay);
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0c:	9302      	str	r3, [sp, #8]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	1dbb      	adds	r3, r7, #6
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	2172      	movs	r1, #114	; 0x72
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <TSL2561_WriteByte+0x34>)
 8000f1c:	f001 fe5c 	bl	8002bd8 <HAL_I2C_Mem_Write>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200008e0 	.word	0x200008e0

08000f2c <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
	 * increments by 1 for future storing, it doesnt coincide with the tail
	 * the % UART_BUFFER_SIZE checking if the index of the next storing procedure
	 * is bigger than the buffer size(ex this iteration stores in 512 byte and the next one
	 * will be in the 513 so i should reset the (i) to zero to repeat again)*/

  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f3e:	3301      	adds	r3, #1
 8000f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f44:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d009      	beq.n	8000f66 <store_char+0x3a>
  {
	  /*Storing the charachter in the recent head pointed location*/
    buffer->buffer[buffer->head] = c;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	79f9      	ldrb	r1, [r7, #7]
 8000f5c:	54d1      	strb	r1, [r2, r3]

    /*After storing the character, incrementing the head for the next storing */
    buffer->head = i;
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f003 0320 	and.w	r3, r3, #32
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d013      	beq.n	8000fbe <Uart_isr+0x4a>
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	f003 0320 	and.w	r3, r3, #32
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00e      	beq.n	8000fbe <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <Uart_isr+0xb4>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ffb8 	bl	8000f2c <store_char>
        return;
 8000fbc:	e031      	b.n	8001022 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d02c      	beq.n	8001022 <Uart_isr+0xae>
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d027      	beq.n	8001022 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <Uart_isr+0xb8>)
 8000fd4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <Uart_isr+0xb8>)
 8000fda:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d108      	bne.n	8000ff4 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ff0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000ff2:	e016      	b.n	8001022 <Uart_isr+0xae>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <Uart_isr+0xb8>)
 8000ff6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <Uart_isr+0xb8>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <Uart_isr+0xb8>)
 8001002:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001006:	3301      	adds	r3, #1
 8001008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <Uart_isr+0xb8>)
 800100e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	7bba      	ldrb	r2, [r7, #14]
 800101e:	605a      	str	r2, [r3, #4]
    	return;
 8001020:	bf00      	nop
    }
}
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200007ec 	.word	0x200007ec
 800102c:	20000028 	.word	0x20000028

08001030 <Calculate_Car_Speed>:
#include "calculateSpeed.h"

extern uint32_t edges_counter;

float Calculate_Car_Speed()
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
	float Local_uint16Speed;
	Local_uint16Speed = (edges_counter/50)/(2000.0*60);
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <Calculate_Car_Speed+0x48>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <Calculate_Car_Speed+0x4c>)
 800103c:	fba2 2303 	umull	r2, r3, r2, r3
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa70 	bl	8000528 <__aeabi_ui2d>
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <Calculate_Car_Speed+0x50>)
 800104e:	f7ff fc0f 	bl	8000870 <__aeabi_ddiv>
 8001052:	4603      	mov	r3, r0
 8001054:	460c      	mov	r4, r1
 8001056:	4618      	mov	r0, r3
 8001058:	4621      	mov	r1, r4
 800105a:	f7ff fd11 	bl	8000a80 <__aeabi_d2f>
 800105e:	4603      	mov	r3, r0
 8001060:	607b      	str	r3, [r7, #4]
	edges_counter=0;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <Calculate_Car_Speed+0x48>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
	return Local_uint16Speed;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	ee07 3a90 	vmov	s15, r3
}
 800106e:	eeb0 0a67 	vmov.f32	s0, s15
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bd90      	pop	{r4, r7, pc}
 8001078:	20000230 	.word	0x20000230
 800107c:	51eb851f 	.word	0x51eb851f
 8001080:	40fd4c00 	.word	0x40fd4c00

08001084 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001088:	f000 ffec 	bl	8002064 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800108c:	f000 f832 	bl	80010f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001090:	f000 faf8 	bl	8001684 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001094:	f000 f89a 	bl	80011cc <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001098:	f000 faa0 	bl	80015dc <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 800109c:	f000 fac8 	bl	8001630 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 80010a0:	f000 f91e 	bl	80012e0 <MX_TIM2_Init>
	MX_I2C2_Init();
 80010a4:	f000 f8c0 	bl	8001228 <MX_I2C2_Init>
	MX_I2C3_Init();
 80010a8:	f000 f8ec 	bl	8001284 <MX_I2C3_Init>
	MX_TIM3_Init();
 80010ac:	f000 f978 	bl	80013a0 <MX_TIM3_Init>
	MX_UART5_Init();
 80010b0:	f000 fa6a 	bl	8001588 <MX_UART5_Init>
	MX_TIM6_Init();
 80010b4:	f000 f9ee 	bl	8001494 <MX_TIM6_Init>
	MX_TIM12_Init();
 80010b8:	f000 fa22 	bl	8001500 <MX_TIM12_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3,&received_char , 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	490a      	ldr	r1, [pc, #40]	; (80010e8 <main+0x64>)
 80010c0:	480a      	ldr	r0, [pc, #40]	; (80010ec <main+0x68>)
 80010c2:	f003 ffe6 	bl	8005092 <HAL_UART_Receive_IT>
	__HAL_TIM_ENABLE_IT(&htim2,TIM_IT_UPDATE);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <main+0x6c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <main+0x6c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0201 	orr.w	r2, r2, #1
 80010d4:	60da      	str	r2, [r3, #12]
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80010d6:	2100      	movs	r1, #0
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <main+0x6c>)
 80010da:	f002 ffb1 	bl	8004040 <HAL_TIM_IC_Start_IT>
	LCD_voidInit();
 80010de:	f7ff fe9f 	bl	8000e20 <LCD_voidInit>
	LightSensor_voidInit();
 80010e2:	f7ff fefb 	bl	8000edc <LightSensor_voidInit>
uint16_t Dataaaa;
uint16_t Garbage1;
uint16_t Garbage2;
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80010e6:	e7fe      	b.n	80010e6 <main+0x62>
 80010e8:	20000ae0 	.word	0x20000ae0
 80010ec:	20000848 	.word	0x20000848
 80010f0:	20000a50 	.word	0x20000a50

080010f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	; 0x50
 80010f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	2234      	movs	r2, #52	; 0x34
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f006 f803 	bl	800710e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <SystemClock_Config+0xd0>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	4a28      	ldr	r2, [pc, #160]	; (80011c4 <SystemClock_Config+0xd0>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001126:	6413      	str	r3, [r2, #64]	; 0x40
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <SystemClock_Config+0xd0>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001134:	2300      	movs	r3, #0
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <SystemClock_Config+0xd4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001140:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <SystemClock_Config+0xd4>)
 8001142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <SystemClock_Config+0xd4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115c:	2310      	movs	r3, #16
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001164:	2300      	movs	r3, #0
 8001166:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001168:	2308      	movs	r3, #8
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 800116c:	2340      	movs	r3, #64	; 0x40
 800116e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001174:	2302      	movs	r3, #2
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001178:	2302      	movs	r3, #2
 800117a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4618      	mov	r0, r3
 8001182:	f002 fb61 	bl	8003848 <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 800118c:	f000 fb3a 	bl	8001804 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2302      	movs	r3, #2
 8001196:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 f8ae 	bl	800330c <HAL_RCC_ClockConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80011b6:	f000 fb25 	bl	8001804 <Error_Handler>
	}
}
 80011ba:	bf00      	nop
 80011bc:	3750      	adds	r7, #80	; 0x50
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40007000 	.word	0x40007000

080011cc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <MX_I2C1_Init+0x54>)
 80011d2:	4a14      	ldr	r2, [pc, #80]	; (8001224 <MX_I2C1_Init+0x58>)
 80011d4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 1000;
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_I2C1_Init+0x54>)
 80011d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011dc:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_I2C1_Init+0x54>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_I2C1_Init+0x54>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <MX_I2C1_Init+0x54>)
 80011ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011f0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_I2C1_Init+0x54>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_I2C1_Init+0x54>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_I2C1_Init+0x54>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_I2C1_Init+0x54>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_I2C1_Init+0x54>)
 800120c:	f001 faae 	bl	800276c <HAL_I2C_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C1_Init+0x4e>
	{
		Error_Handler();
 8001216:	f000 faf5 	bl	8001804 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000088c 	.word	0x2000088c
 8001224:	40005400 	.word	0x40005400

08001228 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_I2C2_Init+0x54>)
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <MX_I2C2_Init+0x58>)
 8001230:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 1000;
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_I2C2_Init+0x54>)
 8001234:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001238:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_I2C2_Init+0x54>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 120;
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_I2C2_Init+0x54>)
 8001242:	2278      	movs	r2, #120	; 0x78
 8001244:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <MX_I2C2_Init+0x54>)
 8001248:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800124c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_I2C2_Init+0x54>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_I2C2_Init+0x54>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_I2C2_Init+0x54>)
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_I2C2_Init+0x54>)
 8001262:	2200      	movs	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_I2C2_Init+0x54>)
 8001268:	f001 fa80 	bl	800276c <HAL_I2C_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_I2C2_Init+0x4e>
	{
		Error_Handler();
 8001272:	f000 fac7 	bl	8001804 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200008e0 	.word	0x200008e0
 8001280:	40005800 	.word	0x40005800

08001284 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_I2C3_Init+0x50>)
 800128a:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <MX_I2C3_Init+0x54>)
 800128c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_I2C3_Init+0x50>)
 8001290:	4a12      	ldr	r2, [pc, #72]	; (80012dc <MX_I2C3_Init+0x58>)
 8001292:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_I2C3_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_I2C3_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_I2C3_Init+0x50>)
 80012a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012a6:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <MX_I2C3_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_I2C3_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <MX_I2C3_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_I2C3_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_I2C3_Init+0x50>)
 80012c2:	f001 fa53 	bl	800276c <HAL_I2C_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 80012cc:	f000 fa9a 	bl	8001804 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200007f4 	.word	0x200007f4
 80012d8:	40005c00 	.word	0x40005c00
 80012dc:	000186a0 	.word	0x000186a0

080012e0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80012fc:	4b27      	ldr	r3, [pc, #156]	; (800139c <MX_TIM2_Init+0xbc>)
 80012fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001302:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15999;
 8001304:	4b25      	ldr	r3, [pc, #148]	; (800139c <MX_TIM2_Init+0xbc>)
 8001306:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800130a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_TIM2_Init+0xbc>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 12000;
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <MX_TIM2_Init+0xbc>)
 8001314:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8001318:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_TIM2_Init+0xbc>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_TIM2_Init+0xbc>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001326:	481d      	ldr	r0, [pc, #116]	; (800139c <MX_TIM2_Init+0xbc>)
 8001328:	f002 fe3b 	bl	8003fa2 <HAL_TIM_IC_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8001332:	f000 fa67 	bl	8001804 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4619      	mov	r1, r3
 8001344:	4815      	ldr	r0, [pc, #84]	; (800139c <MX_TIM2_Init+0xbc>)
 8001346:	f003 fdc7 	bl	8004ed8 <HAL_TIMEx_MasterConfigSynchronization>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 8001350:	f000 fa58 	bl	8001804 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001354:	230a      	movs	r3, #10
 8001356:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001358:	2301      	movs	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	4619      	mov	r1, r3
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_TIM2_Init+0xbc>)
 800136c:	f003 f898 	bl	80044a0 <HAL_TIM_IC_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 8001376:	f000 fa45 	bl	8001804 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	2204      	movs	r2, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_TIM2_Init+0xbc>)
 8001386:	f003 f88b 	bl	80044a0 <HAL_TIM_IC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8001390:	f000 fa38 	bl	8001804 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000a50 	.word	0x20000a50

080013a0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a6:	f107 0320 	add.w	r3, r7, #32
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013c2:	4b32      	ldr	r3, [pc, #200]	; (800148c <MX_TIM3_Init+0xec>)
 80013c4:	4a32      	ldr	r2, [pc, #200]	; (8001490 <MX_TIM3_Init+0xf0>)
 80013c6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 320-1;
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <MX_TIM3_Init+0xec>)
 80013ca:	f240 123f 	movw	r2, #319	; 0x13f
 80013ce:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b2e      	ldr	r3, [pc, #184]	; (800148c <MX_TIM3_Init+0xec>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <MX_TIM3_Init+0xec>)
 80013d8:	2263      	movs	r2, #99	; 0x63
 80013da:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <MX_TIM3_Init+0xec>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <MX_TIM3_Init+0xec>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013e8:	4828      	ldr	r0, [pc, #160]	; (800148c <MX_TIM3_Init+0xec>)
 80013ea:	f002 fd8b 	bl	8003f04 <HAL_TIM_PWM_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 80013f4:	f000 fa06 	bl	8001804 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001400:	f107 0320 	add.w	r3, r7, #32
 8001404:	4619      	mov	r1, r3
 8001406:	4821      	ldr	r0, [pc, #132]	; (800148c <MX_TIM3_Init+0xec>)
 8001408:	f003 fd66 	bl	8004ed8 <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 8001412:	f000 f9f7 	bl	8001804 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001416:	2360      	movs	r3, #96	; 0x60
 8001418:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	4619      	mov	r1, r3
 800142c:	4817      	ldr	r0, [pc, #92]	; (800148c <MX_TIM3_Init+0xec>)
 800142e:	f003 f8d3 	bl	80045d8 <HAL_TIM_PWM_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 8001438:	f000 f9e4 	bl	8001804 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2204      	movs	r2, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4812      	ldr	r0, [pc, #72]	; (800148c <MX_TIM3_Init+0xec>)
 8001444:	f003 f8c8 	bl	80045d8 <HAL_TIM_PWM_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 800144e:	f000 f9d9 	bl	8001804 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2208      	movs	r2, #8
 8001456:	4619      	mov	r1, r3
 8001458:	480c      	ldr	r0, [pc, #48]	; (800148c <MX_TIM3_Init+0xec>)
 800145a:	f003 f8bd 	bl	80045d8 <HAL_TIM_PWM_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM3_Init+0xc8>
	{
		Error_Handler();
 8001464:	f000 f9ce 	bl	8001804 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	220c      	movs	r2, #12
 800146c:	4619      	mov	r1, r3
 800146e:	4807      	ldr	r0, [pc, #28]	; (800148c <MX_TIM3_Init+0xec>)
 8001470:	f003 f8b2 	bl	80045d8 <HAL_TIM_PWM_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0xde>
	{
		Error_Handler();
 800147a:	f000 f9c3 	bl	8001804 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800147e:	4803      	ldr	r0, [pc, #12]	; (800148c <MX_TIM3_Init+0xec>)
 8001480:	f000 fb66 	bl	8001b50 <HAL_TIM_MspPostInit>

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	; 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000934 	.word	0x20000934
 8001490:	40000400 	.word	0x40000400

08001494 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149a:	463b      	mov	r3, r7
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_TIM6_Init+0x64>)
 80014a4:	4a15      	ldr	r2, [pc, #84]	; (80014fc <MX_TIM6_Init+0x68>)
 80014a6:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <MX_TIM6_Init+0x64>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_TIM6_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535;
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_TIM6_Init+0x64>)
 80014b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ba:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_TIM6_Init+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014c2:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_TIM6_Init+0x64>)
 80014c4:	f002 fc5e 	bl	8003d84 <HAL_TIM_Base_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 80014ce:	f000 f999 	bl	8001804 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014da:	463b      	mov	r3, r7
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <MX_TIM6_Init+0x64>)
 80014e0:	f003 fcfa 	bl	8004ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 80014ea:	f000 f98b 	bl	8001804 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000a08 	.word	0x20000a08
 80014fc:	40001000 	.word	0x40001000

08001500 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <MX_TIM12_Init+0x80>)
 800151a:	4a1a      	ldr	r2, [pc, #104]	; (8001584 <MX_TIM12_Init+0x84>)
 800151c:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 160-1;
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <MX_TIM12_Init+0x80>)
 8001520:	229f      	movs	r2, #159	; 0x9f
 8001522:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_TIM12_Init+0x80>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 100-1;
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <MX_TIM12_Init+0x80>)
 800152c:	2263      	movs	r2, #99	; 0x63
 800152e:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <MX_TIM12_Init+0x80>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_TIM12_Init+0x80>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800153c:	4810      	ldr	r0, [pc, #64]	; (8001580 <MX_TIM12_Init+0x80>)
 800153e:	f002 fce1 	bl	8003f04 <HAL_TIM_PWM_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM12_Init+0x4c>
	{
		Error_Handler();
 8001548:	f000 f95c 	bl	8001804 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154c:	2360      	movs	r3, #96	; 0x60
 800154e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	2200      	movs	r2, #0
 8001560:	4619      	mov	r1, r3
 8001562:	4807      	ldr	r0, [pc, #28]	; (8001580 <MX_TIM12_Init+0x80>)
 8001564:	f003 f838 	bl	80045d8 <HAL_TIM_PWM_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM12_Init+0x72>
	{
		Error_Handler();
 800156e:	f000 f949 	bl	8001804 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8001572:	4803      	ldr	r0, [pc, #12]	; (8001580 <MX_TIM12_Init+0x80>)
 8001574:	f000 faec 	bl	8001b50 <HAL_TIM_MspPostInit>

}
 8001578:	bf00      	nop
 800157a:	3720      	adds	r7, #32
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000a98 	.word	0x20000a98
 8001584:	40001800 	.word	0x40001800

08001588 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_UART5_Init+0x4c>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <MX_UART5_Init+0x50>)
 8001590:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 9600;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_UART5_Init+0x4c>)
 8001594:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001598:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_UART5_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_UART5_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_UART5_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_UART5_Init+0x4c>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_UART5_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_UART5_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_UART5_Init+0x4c>)
 80015c0:	f003 fd1a 	bl	8004ff8 <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_UART5_Init+0x46>
	{
		Error_Handler();
 80015ca:	f000 f91b 	bl	8001804 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000097c 	.word	0x2000097c
 80015d8:	40005000 	.word	0x40005000

080015dc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_USART1_UART_Init+0x50>)
 80015e4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015ec:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_USART1_UART_Init+0x4c>)
 8001614:	f003 fcf0 	bl	8004ff8 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 800161e:	f000 f8f1 	bl	8001804 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200009c4 	.word	0x200009c4
 800162c:	40011000 	.word	0x40011000

08001630 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_USART3_UART_Init+0x4c>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <MX_USART3_UART_Init+0x50>)
 8001638:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_USART3_UART_Init+0x4c>)
 800163c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001640:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_USART3_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_USART3_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <MX_USART3_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_USART3_UART_Init+0x4c>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <MX_USART3_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_USART3_UART_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_USART3_UART_Init+0x4c>)
 8001668:	f003 fcc6 	bl	8004ff8 <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001672:	f000 f8c7 	bl	8001804 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000848 	.word	0x20000848
 8001680:	40004800 	.word	0x40004800

08001684 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b32      	ldr	r3, [pc, #200]	; (8001768 <MX_GPIO_Init+0xe4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a31      	ldr	r2, [pc, #196]	; (8001768 <MX_GPIO_Init+0xe4>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <MX_GPIO_Init+0xe4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <MX_GPIO_Init+0xe4>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a2a      	ldr	r2, [pc, #168]	; (8001768 <MX_GPIO_Init+0xe4>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <MX_GPIO_Init+0xe4>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <MX_GPIO_Init+0xe4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a23      	ldr	r2, [pc, #140]	; (8001768 <MX_GPIO_Init+0xe4>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <MX_GPIO_Init+0xe4>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <MX_GPIO_Init+0xe4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <MX_GPIO_Init+0xe4>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_GPIO_Init+0xe4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800170a:	2200      	movs	r2, #0
 800170c:	f242 311c 	movw	r1, #8988	; 0x231c
 8001710:	4816      	ldr	r0, [pc, #88]	; (800176c <MX_GPIO_Init+0xe8>)
 8001712:	f001 f811 	bl	8002738 <HAL_GPIO_WritePin>
			|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 7108 	mov.w	r1, #544	; 0x220
 800171c:	4814      	ldr	r0, [pc, #80]	; (8001770 <MX_GPIO_Init+0xec>)
 800171e:	f001 f80b 	bl	8002738 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001722:	f242 331c 	movw	r3, #8988	; 0x231c
 8001726:	617b      	str	r3, [r7, #20]
			|GPIO_PIN_8|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	480c      	ldr	r0, [pc, #48]	; (800176c <MX_GPIO_Init+0xe8>)
 800173c:	f000 fe6a 	bl	8002414 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8001740:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001744:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_GPIO_Init+0xec>)
 800175a:	f000 fe5b 	bl	8002414 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800175e:	bf00      	nop
 8001760:	3728      	adds	r7, #40	; 0x28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40020800 	.word	0x40020800
 8001770:	40020400 	.word	0x40020400

08001774 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 || htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001784:	d10c      	bne.n	80017a0 <HAL_TIM_IC_CaptureCallback+0x2c>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7f1b      	ldrb	r3, [r3, #28]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d003      	beq.n	8001796 <HAL_TIM_IC_CaptureCallback+0x22>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7f1b      	ldrb	r3, [r3, #28]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d104      	bne.n	80017a0 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		edges_counter++;
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x38>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	3301      	adds	r3, #1
 800179c:	4a03      	ldr	r2, [pc, #12]	; (80017ac <HAL_TIM_IC_CaptureCallback+0x38>)
 800179e:	6013      	str	r3, [r2, #0]
	}
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	20000230 	.word	0x20000230

080017b0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <HAL_UART_RxCpltCallback+0x24>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d104      	bne.n	80017cc <HAL_UART_RxCpltCallback+0x1c>
	{
		HAL_UART_Receive_IT(&huart3, &received_char, 1);
 80017c2:	2201      	movs	r2, #1
 80017c4:	4904      	ldr	r1, [pc, #16]	; (80017d8 <HAL_UART_RxCpltCallback+0x28>)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <HAL_UART_RxCpltCallback+0x2c>)
 80017c8:	f003 fc63 	bl	8005092 <HAL_UART_Receive_IT>

		/*Give the semaphore*/

	}
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40004800 	.word	0x40004800
 80017d8:	20000ae0 	.word	0x20000ae0
 80017dc:	20000848 	.word	0x20000848

080017e0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80017f2:	f000 fc59 	bl	80020a8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40001400 	.word	0x40001400

08001804 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800180a:	e7fe      	b.n	800180a <Error_Handler+0x6>

0800180c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <HAL_MspInit+0x4c>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_MspInit+0x4c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_MspInit+0x4c>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08e      	sub	sp, #56	; 0x38
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a5b      	ldr	r2, [pc, #364]	; (80019e8 <HAL_I2C_MspInit+0x18c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d12c      	bne.n	80018d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
 8001882:	4b5a      	ldr	r3, [pc, #360]	; (80019ec <HAL_I2C_MspInit+0x190>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a59      	ldr	r2, [pc, #356]	; (80019ec <HAL_I2C_MspInit+0x190>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b57      	ldr	r3, [pc, #348]	; (80019ec <HAL_I2C_MspInit+0x190>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	623b      	str	r3, [r7, #32]
 8001898:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800189a:	23c0      	movs	r3, #192	; 0xc0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189e:	2312      	movs	r3, #18
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018aa:	2304      	movs	r3, #4
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	484e      	ldr	r0, [pc, #312]	; (80019f0 <HAL_I2C_MspInit+0x194>)
 80018b6:	f000 fdad 	bl	8002414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	4b4b      	ldr	r3, [pc, #300]	; (80019ec <HAL_I2C_MspInit+0x190>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a4a      	ldr	r2, [pc, #296]	; (80019ec <HAL_I2C_MspInit+0x190>)
 80018c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b48      	ldr	r3, [pc, #288]	; (80019ec <HAL_I2C_MspInit+0x190>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80018d6:	e082      	b.n	80019de <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a45      	ldr	r2, [pc, #276]	; (80019f4 <HAL_I2C_MspInit+0x198>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d12d      	bne.n	800193e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_I2C_MspInit+0x190>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a40      	ldr	r2, [pc, #256]	; (80019ec <HAL_I2C_MspInit+0x190>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b3e      	ldr	r3, [pc, #248]	; (80019ec <HAL_I2C_MspInit+0x190>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80018fe:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001904:	2312      	movs	r3, #18
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001910:	2304      	movs	r3, #4
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001918:	4619      	mov	r1, r3
 800191a:	4835      	ldr	r0, [pc, #212]	; (80019f0 <HAL_I2C_MspInit+0x194>)
 800191c:	f000 fd7a 	bl	8002414 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_I2C_MspInit+0x190>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a30      	ldr	r2, [pc, #192]	; (80019ec <HAL_I2C_MspInit+0x190>)
 800192a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40
 8001930:	4b2e      	ldr	r3, [pc, #184]	; (80019ec <HAL_I2C_MspInit+0x190>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	697b      	ldr	r3, [r7, #20]
}
 800193c:	e04f      	b.n	80019de <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a2d      	ldr	r2, [pc, #180]	; (80019f8 <HAL_I2C_MspInit+0x19c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d14a      	bne.n	80019de <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_I2C_MspInit+0x190>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	4a26      	ldr	r2, [pc, #152]	; (80019ec <HAL_I2C_MspInit+0x190>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6313      	str	r3, [r2, #48]	; 0x30
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_I2C_MspInit+0x190>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_I2C_MspInit+0x190>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	4a1f      	ldr	r2, [pc, #124]	; (80019ec <HAL_I2C_MspInit+0x190>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	6313      	str	r3, [r2, #48]	; 0x30
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_I2C_MspInit+0x190>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001986:	2312      	movs	r3, #18
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001992:	2304      	movs	r3, #4
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199a:	4619      	mov	r1, r3
 800199c:	4817      	ldr	r0, [pc, #92]	; (80019fc <HAL_I2C_MspInit+0x1a0>)
 800199e:	f000 fd39 	bl	8002414 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019a2:	2310      	movs	r3, #16
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a6:	2312      	movs	r3, #18
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019b2:	2304      	movs	r3, #4
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ba:	4619      	mov	r1, r3
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <HAL_I2C_MspInit+0x194>)
 80019be:	f000 fd29 	bl	8002414 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_I2C_MspInit+0x190>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_I2C_MspInit+0x190>)
 80019cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_I2C_MspInit+0x190>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
}
 80019de:	bf00      	nop
 80019e0:	3738      	adds	r7, #56	; 0x38
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40005400 	.word	0x40005400
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40005800 	.word	0x40005800
 80019f8:	40005c00 	.word	0x40005c00
 80019fc:	40020000 	.word	0x40020000

08001a00 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a20:	d133      	bne.n	8001a8a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_TIM_IC_MspInit+0x94>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <HAL_TIM_IC_MspInit+0x94>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_TIM_IC_MspInit+0x94>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_TIM_IC_MspInit+0x94>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <HAL_TIM_IC_MspInit+0x94>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_TIM_IC_MspInit+0x94>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	4808      	ldr	r0, [pc, #32]	; (8001a98 <HAL_TIM_IC_MspInit+0x98>)
 8001a76:	f000 fccd 	bl	8002414 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	201c      	movs	r0, #28
 8001a80:	f000 fc0c 	bl	800229c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a84:	201c      	movs	r0, #28
 8001a86:	f000 fc25 	bl	80022d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020000 	.word	0x40020000

08001a9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <HAL_TIM_PWM_MspInit+0x64>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d10e      	bne.n	8001acc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_TIM_PWM_MspInit+0x68>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <HAL_TIM_PWM_MspInit+0x68>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <HAL_TIM_PWM_MspInit+0x68>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001aca:	e012      	b.n	8001af2 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <HAL_TIM_PWM_MspInit+0x6c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d10d      	bne.n	8001af2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_TIM_PWM_MspInit+0x68>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <HAL_TIM_PWM_MspInit+0x68>)
 8001ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_TIM_PWM_MspInit+0x68>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40000400 	.word	0x40000400
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40001800 	.word	0x40001800

08001b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <HAL_TIM_Base_MspInit+0x3c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d10d      	bne.n	8001b3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_TIM_Base_MspInit+0x40>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <HAL_TIM_Base_MspInit+0x40>)
 8001b28:	f043 0310 	orr.w	r3, r3, #16
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <HAL_TIM_Base_MspInit+0x40>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40001000 	.word	0x40001000
 8001b4c:	40023800 	.word	0x40023800

08001b50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a33      	ldr	r2, [pc, #204]	; (8001c3c <HAL_TIM_MspPostInit+0xec>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d13c      	bne.n	8001bec <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <HAL_TIM_MspPostInit+0xf0>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a31      	ldr	r2, [pc, #196]	; (8001c40 <HAL_TIM_MspPostInit+0xf0>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <HAL_TIM_MspPostInit+0xf0>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_TIM_MspPostInit+0xf0>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a2a      	ldr	r2, [pc, #168]	; (8001c40 <HAL_TIM_MspPostInit+0xf0>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <HAL_TIM_MspPostInit+0xf0>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001baa:	23c0      	movs	r3, #192	; 0xc0
 8001bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	481f      	ldr	r0, [pc, #124]	; (8001c44 <HAL_TIM_MspPostInit+0xf4>)
 8001bc6:	f000 fc25 	bl	8002414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	4818      	ldr	r0, [pc, #96]	; (8001c48 <HAL_TIM_MspPostInit+0xf8>)
 8001be6:	f000 fc15 	bl	8002414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001bea:	e023      	b.n	8001c34 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM12)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <HAL_TIM_MspPostInit+0xfc>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d11e      	bne.n	8001c34 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_TIM_MspPostInit+0xf0>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a10      	ldr	r2, [pc, #64]	; (8001c40 <HAL_TIM_MspPostInit+0xf0>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_TIM_MspPostInit+0xf0>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001c24:	2309      	movs	r3, #9
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4806      	ldr	r0, [pc, #24]	; (8001c48 <HAL_TIM_MspPostInit+0xf8>)
 8001c30:	f000 fbf0 	bl	8002414 <HAL_GPIO_Init>
}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40000400 	.word	0x40000400
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40001800 	.word	0x40001800

08001c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08e      	sub	sp, #56	; 0x38
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a67      	ldr	r2, [pc, #412]	; (8001e0c <HAL_UART_MspInit+0x1bc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d153      	bne.n	8001d1a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
 8001c76:	4b66      	ldr	r3, [pc, #408]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a65      	ldr	r2, [pc, #404]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b63      	ldr	r3, [pc, #396]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	4b5f      	ldr	r3, [pc, #380]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a5e      	ldr	r2, [pc, #376]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b5c      	ldr	r3, [pc, #368]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	4b58      	ldr	r3, [pc, #352]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a57      	ldr	r2, [pc, #348]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001cb4:	f043 0308 	orr.w	r3, r3, #8
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b55      	ldr	r3, [pc, #340]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	484c      	ldr	r0, [pc, #304]	; (8001e14 <HAL_UART_MspInit+0x1c4>)
 8001ce4:	f000 fb96 	bl	8002414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d00:	4619      	mov	r1, r3
 8001d02:	4845      	ldr	r0, [pc, #276]	; (8001e18 <HAL_UART_MspInit+0x1c8>)
 8001d04:	f000 fb86 	bl	8002414 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2035      	movs	r0, #53	; 0x35
 8001d0e:	f000 fac5 	bl	800229c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001d12:	2035      	movs	r0, #53	; 0x35
 8001d14:	f000 fade 	bl	80022d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d18:	e074      	b.n	8001e04 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a3f      	ldr	r2, [pc, #252]	; (8001e1c <HAL_UART_MspInit+0x1cc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d135      	bne.n	8001d90 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	4a38      	ldr	r2, [pc, #224]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001d2e:	f043 0310 	orr.w	r3, r3, #16
 8001d32:	6453      	str	r3, [r2, #68]	; 0x44
 8001d34:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4a31      	ldr	r2, [pc, #196]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d50:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d6e:	2307      	movs	r3, #7
 8001d70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d76:	4619      	mov	r1, r3
 8001d78:	4829      	ldr	r0, [pc, #164]	; (8001e20 <HAL_UART_MspInit+0x1d0>)
 8001d7a:	f000 fb4b 	bl	8002414 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2106      	movs	r1, #6
 8001d82:	2025      	movs	r0, #37	; 0x25
 8001d84:	f000 fa8a 	bl	800229c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d88:	2025      	movs	r0, #37	; 0x25
 8001d8a:	f000 faa3 	bl	80022d4 <HAL_NVIC_EnableIRQ>
}
 8001d8e:	e039      	b.n	8001e04 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a23      	ldr	r2, [pc, #140]	; (8001e24 <HAL_UART_MspInit+0x1d4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d134      	bne.n	8001e04 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_UART_MspInit+0x1c0>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001dd2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001de4:	2307      	movs	r3, #7
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dec:	4619      	mov	r1, r3
 8001dee:	4809      	ldr	r0, [pc, #36]	; (8001e14 <HAL_UART_MspInit+0x1c4>)
 8001df0:	f000 fb10 	bl	8002414 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2101      	movs	r1, #1
 8001df8:	2027      	movs	r0, #39	; 0x27
 8001dfa:	f000 fa4f 	bl	800229c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001dfe:	2027      	movs	r0, #39	; 0x27
 8001e00:	f000 fa68 	bl	80022d4 <HAL_NVIC_EnableIRQ>
}
 8001e04:	bf00      	nop
 8001e06:	3738      	adds	r7, #56	; 0x38
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40005000 	.word	0x40005000
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020c00 	.word	0x40020c00
 8001e1c:	40011000 	.word	0x40011000
 8001e20:	40020000 	.word	0x40020000
 8001e24:	40004800 	.word	0x40004800

08001e28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08e      	sub	sp, #56	; 0x38
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	4b33      	ldr	r3, [pc, #204]	; (8001f0c <HAL_InitTick+0xe4>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	4a32      	ldr	r2, [pc, #200]	; (8001f0c <HAL_InitTick+0xe4>)
 8001e42:	f043 0320 	orr.w	r3, r3, #32
 8001e46:	6413      	str	r3, [r2, #64]	; 0x40
 8001e48:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <HAL_InitTick+0xe4>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e54:	f107 0210 	add.w	r2, r7, #16
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f001 fb6e 	bl	8003540 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e6e:	f001 fb3f 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8001e72:	6378      	str	r0, [r7, #52]	; 0x34
 8001e74:	e004      	b.n	8001e80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e76:	f001 fb3b 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e82:	4a23      	ldr	r2, [pc, #140]	; (8001f10 <HAL_InitTick+0xe8>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	0c9b      	lsrs	r3, r3, #18
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_InitTick+0xec>)
 8001e90:	4a21      	ldr	r2, [pc, #132]	; (8001f18 <HAL_InitTick+0xf0>)
 8001e92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001e94:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_InitTick+0xec>)
 8001e96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e9a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001e9c:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <HAL_InitTick+0xec>)
 8001e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <HAL_InitTick+0xec>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <HAL_InitTick+0xec>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_InitTick+0xec>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001eb4:	4817      	ldr	r0, [pc, #92]	; (8001f14 <HAL_InitTick+0xec>)
 8001eb6:	f001 ff65 	bl	8003d84 <HAL_TIM_Base_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ec0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d11b      	bne.n	8001f00 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001ec8:	4812      	ldr	r0, [pc, #72]	; (8001f14 <HAL_InitTick+0xec>)
 8001eca:	f001 ffab 	bl	8003e24 <HAL_TIM_Base_Start_IT>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d111      	bne.n	8001f00 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001edc:	2037      	movs	r0, #55	; 0x37
 8001ede:	f000 f9f9 	bl	80022d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d808      	bhi.n	8001efa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	2037      	movs	r0, #55	; 0x37
 8001eee:	f000 f9d5 	bl	800229c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_InitTick+0xf4>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e002      	b.n	8001f00 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3738      	adds	r7, #56	; 0x38
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	431bde83 	.word	0x431bde83
 8001f14:	20000ae4 	.word	0x20000ae4
 8001f18:	40001400 	.word	0x40001400
 8001f1c:	20000004 	.word	0x20000004

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <NMI_Handler+0x4>

08001f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <MemManage_Handler+0x4>

08001f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <BusFault_Handler+0x4>

08001f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <UsageFault_Handler+0x4>
	...

08001f40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	 if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_CC1) != RESET)
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <TIM2_IRQHandler+0x50>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d116      	bne.n	8001f82 <TIM2_IRQHandler+0x42>
	  {
		float Local_fSpeed_In_Decimals;
		Local_fSpeed_In_Decimals=Calculate_Car_Speed();
 8001f54:	f7ff f86c 	bl	8001030 <Calculate_Car_Speed>
 8001f58:	ed87 0a01 	vstr	s0, [r7, #4]
		Global_Speed=round(Local_fSpeed_In_Decimals);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7fe fb05 	bl	800056c <__aeabi_f2d>
 8001f62:	4603      	mov	r3, r0
 8001f64:	460c      	mov	r4, r1
 8001f66:	ec44 3b10 	vmov	d0, r3, r4
 8001f6a:	f005 f8d9 	bl	8007120 <round>
 8001f6e:	ec54 3b10 	vmov	r3, r4, d0
 8001f72:	4618      	mov	r0, r3
 8001f74:	4621      	mov	r1, r4
 8001f76:	f7fe fd63 	bl	8000a40 <__aeabi_d2uiz>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <TIM2_IRQHandler+0x54>)
 8001f80:	801a      	strh	r2, [r3, #0]
	  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f82:	4803      	ldr	r0, [pc, #12]	; (8001f90 <TIM2_IRQHandler+0x50>)
 8001f84:	f002 f984 	bl	8004290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd90      	pop	{r4, r7, pc}
 8001f90:	20000a50 	.word	0x20000a50
 8001f94:	200009c0 	.word	0x200009c0

08001f98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <USART1_IRQHandler+0x14>)
 8001f9e:	f7fe ffe9 	bl	8000f74 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fa2:	4802      	ldr	r0, [pc, #8]	; (8001fac <USART1_IRQHandler+0x14>)
 8001fa4:	f003 f8a6 	bl	80050f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200009c4 	.word	0x200009c4

08001fb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <USART3_IRQHandler+0x10>)
 8001fb6:	f003 f89d 	bl	80050f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000848 	.word	0x20000848

08001fc4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <UART5_IRQHandler+0x10>)
 8001fca:	f003 f893 	bl	80050f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000097c 	.word	0x2000097c

08001fd8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <TIM7_IRQHandler+0x10>)
 8001fde:	f002 f957 	bl	8004290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000ae4 	.word	0x20000ae4

08001fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <SystemInit+0x20>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <SystemInit+0x20>)
 8001ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002048 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002014:	480d      	ldr	r0, [pc, #52]	; (800204c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002016:	490e      	ldr	r1, [pc, #56]	; (8002050 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002018:	4a0e      	ldr	r2, [pc, #56]	; (8002054 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800202c:	4c0b      	ldr	r4, [pc, #44]	; (800205c <LoopFillZerobss+0x26>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800203a:	f7ff ffd7 	bl	8001fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203e:	f005 f837 	bl	80070b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002042:	f7ff f81f 	bl	8001084 <main>
  bx  lr    
 8002046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800204c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002050:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002054:	08007218 	.word	0x08007218
  ldr r2, =_sbss
 8002058:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800205c:	20000bd8 	.word	0x20000bd8

08002060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <ADC_IRQHandler>
	...

08002064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_Init+0x40>)
 800206e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_Init+0x40>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_Init+0x40>)
 800207a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800207e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <HAL_Init+0x40>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208c:	2003      	movs	r0, #3
 800208e:	f000 f8fa 	bl	8002286 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002092:	200f      	movs	r0, #15
 8002094:	f7ff fec8 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002098:	f7ff fbb8 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023c00 	.word	0x40023c00

080020a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_IncTick+0x20>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_IncTick+0x24>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <HAL_IncTick+0x24>)
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000008 	.word	0x20000008
 80020cc:	20000b2c 	.word	0x20000b2c

080020d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return uwTick;
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <HAL_GetTick+0x14>)
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000b2c 	.word	0x20000b2c

080020e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f0:	f7ff ffee 	bl	80020d0 <HAL_GetTick>
 80020f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d005      	beq.n	800210e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_Delay+0x40>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800210e:	bf00      	nop
 8002110:	f7ff ffde 	bl	80020d0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	429a      	cmp	r2, r3
 800211e:	d8f7      	bhi.n	8002110 <HAL_Delay+0x28>
  {
  }
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000008 	.word	0x20000008

0800212c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <__NVIC_GetPriorityGrouping+0x18>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0307 	and.w	r3, r3, #7
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	db0b      	blt.n	80021ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	f003 021f 	and.w	r2, r3, #31
 80021a8:	4907      	ldr	r1, [pc, #28]	; (80021c8 <__NVIC_EnableIRQ+0x38>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2001      	movs	r0, #1
 80021b2:	fa00 f202 	lsl.w	r2, r0, r2
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000e100 	.word	0xe000e100

080021cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	db0a      	blt.n	80021f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	490c      	ldr	r1, [pc, #48]	; (8002218 <__NVIC_SetPriority+0x4c>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	0112      	lsls	r2, r2, #4
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	440b      	add	r3, r1
 80021f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f4:	e00a      	b.n	800220c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4908      	ldr	r1, [pc, #32]	; (800221c <__NVIC_SetPriority+0x50>)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	3b04      	subs	r3, #4
 8002204:	0112      	lsls	r2, r2, #4
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	440b      	add	r3, r1
 800220a:	761a      	strb	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000e100 	.word	0xe000e100
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f1c3 0307 	rsb	r3, r3, #7
 800223a:	2b04      	cmp	r3, #4
 800223c:	bf28      	it	cs
 800223e:	2304      	movcs	r3, #4
 8002240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3304      	adds	r3, #4
 8002246:	2b06      	cmp	r3, #6
 8002248:	d902      	bls.n	8002250 <NVIC_EncodePriority+0x30>
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3b03      	subs	r3, #3
 800224e:	e000      	b.n	8002252 <NVIC_EncodePriority+0x32>
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	f04f 32ff 	mov.w	r2, #4294967295
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43da      	mvns	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	401a      	ands	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002268:	f04f 31ff 	mov.w	r1, #4294967295
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	43d9      	mvns	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	4313      	orrs	r3, r2
         );
}
 800227a:	4618      	mov	r0, r3
 800227c:	3724      	adds	r7, #36	; 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff4c 	bl	800212c <__NVIC_SetPriorityGrouping>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ae:	f7ff ff61 	bl	8002174 <__NVIC_GetPriorityGrouping>
 80022b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	6978      	ldr	r0, [r7, #20]
 80022ba:	f7ff ffb1 	bl	8002220 <NVIC_EncodePriority>
 80022be:	4602      	mov	r2, r0
 80022c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff80 	bl	80021cc <__NVIC_SetPriority>
}
 80022cc:	bf00      	nop
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff ff54 	bl	8002190 <__NVIC_EnableIRQ>
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022fe:	f7ff fee7 	bl	80020d0 <HAL_GetTick>
 8002302:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d008      	beq.n	8002322 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2280      	movs	r2, #128	; 0x80
 8002314:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e052      	b.n	80023c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0216 	bic.w	r2, r2, #22
 8002330:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002340:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d103      	bne.n	8002352 <HAL_DMA_Abort+0x62>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234e:	2b00      	cmp	r3, #0
 8002350:	d007      	beq.n	8002362 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0208 	bic.w	r2, r2, #8
 8002360:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0201 	bic.w	r2, r2, #1
 8002370:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002372:	e013      	b.n	800239c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002374:	f7ff feac 	bl	80020d0 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b05      	cmp	r3, #5
 8002380:	d90c      	bls.n	800239c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2220      	movs	r2, #32
 8002386:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2203      	movs	r2, #3
 800238c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e015      	b.n	80023c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1e4      	bne.n	8002374 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	223f      	movs	r2, #63	; 0x3f
 80023b0:	409a      	lsls	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d004      	beq.n	80023ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2280      	movs	r2, #128	; 0x80
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00c      	b.n	8002408 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2205      	movs	r2, #5
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0201 	bic.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e165      	b.n	80026fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002430:	2201      	movs	r2, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	f040 8154 	bne.w	80026f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d005      	beq.n	8002466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002462:	2b02      	cmp	r3, #2
 8002464:	d130      	bne.n	80024c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 0201 	and.w	r2, r3, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d017      	beq.n	8002504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d123      	bne.n	8002558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	08da      	lsrs	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80ae 	beq.w	80026f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b5c      	ldr	r3, [pc, #368]	; (8002710 <HAL_GPIO_Init+0x2fc>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	4a5b      	ldr	r2, [pc, #364]	; (8002710 <HAL_GPIO_Init+0x2fc>)
 80025a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a8:	6453      	str	r3, [r2, #68]	; 0x44
 80025aa:	4b59      	ldr	r3, [pc, #356]	; (8002710 <HAL_GPIO_Init+0x2fc>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b6:	4a57      	ldr	r2, [pc, #348]	; (8002714 <HAL_GPIO_Init+0x300>)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4e      	ldr	r2, [pc, #312]	; (8002718 <HAL_GPIO_Init+0x304>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d025      	beq.n	800262e <HAL_GPIO_Init+0x21a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4d      	ldr	r2, [pc, #308]	; (800271c <HAL_GPIO_Init+0x308>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d01f      	beq.n	800262a <HAL_GPIO_Init+0x216>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4c      	ldr	r2, [pc, #304]	; (8002720 <HAL_GPIO_Init+0x30c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d019      	beq.n	8002626 <HAL_GPIO_Init+0x212>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4b      	ldr	r2, [pc, #300]	; (8002724 <HAL_GPIO_Init+0x310>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_GPIO_Init+0x20e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4a      	ldr	r2, [pc, #296]	; (8002728 <HAL_GPIO_Init+0x314>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00d      	beq.n	800261e <HAL_GPIO_Init+0x20a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a49      	ldr	r2, [pc, #292]	; (800272c <HAL_GPIO_Init+0x318>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d007      	beq.n	800261a <HAL_GPIO_Init+0x206>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a48      	ldr	r2, [pc, #288]	; (8002730 <HAL_GPIO_Init+0x31c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <HAL_GPIO_Init+0x202>
 8002612:	2306      	movs	r3, #6
 8002614:	e00c      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 8002616:	2307      	movs	r3, #7
 8002618:	e00a      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 800261a:	2305      	movs	r3, #5
 800261c:	e008      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 800261e:	2304      	movs	r3, #4
 8002620:	e006      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 8002622:	2303      	movs	r3, #3
 8002624:	e004      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 8002626:	2302      	movs	r3, #2
 8002628:	e002      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_GPIO_Init+0x21c>
 800262e:	2300      	movs	r3, #0
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	f002 0203 	and.w	r2, r2, #3
 8002636:	0092      	lsls	r2, r2, #2
 8002638:	4093      	lsls	r3, r2
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002640:	4934      	ldr	r1, [pc, #208]	; (8002714 <HAL_GPIO_Init+0x300>)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	3302      	adds	r3, #2
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264e:	4b39      	ldr	r3, [pc, #228]	; (8002734 <HAL_GPIO_Init+0x320>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002672:	4a30      	ldr	r2, [pc, #192]	; (8002734 <HAL_GPIO_Init+0x320>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002678:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <HAL_GPIO_Init+0x320>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800269c:	4a25      	ldr	r2, [pc, #148]	; (8002734 <HAL_GPIO_Init+0x320>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_GPIO_Init+0x320>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c6:	4a1b      	ldr	r2, [pc, #108]	; (8002734 <HAL_GPIO_Init+0x320>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <HAL_GPIO_Init+0x320>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f0:	4a10      	ldr	r2, [pc, #64]	; (8002734 <HAL_GPIO_Init+0x320>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3301      	adds	r3, #1
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b0f      	cmp	r3, #15
 8002700:	f67f ae96 	bls.w	8002430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002704:	bf00      	nop
 8002706:	3724      	adds	r7, #36	; 0x24
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40023800 	.word	0x40023800
 8002714:	40013800 	.word	0x40013800
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40021400 	.word	0x40021400
 8002730:	40021800 	.word	0x40021800
 8002734:	40013c00 	.word	0x40013c00

08002738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	807b      	strh	r3, [r7, #2]
 8002744:	4613      	mov	r3, r2
 8002746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002748:	787b      	ldrb	r3, [r7, #1]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002754:	e003      	b.n	800275e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	041a      	lsls	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	619a      	str	r2, [r3, #24]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e11f      	b.n	80029be <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff f862 	bl	800185c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2224      	movs	r2, #36	; 0x24
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027d0:	f000 fe8e 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 80027d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4a7b      	ldr	r2, [pc, #492]	; (80029c8 <HAL_I2C_Init+0x25c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d807      	bhi.n	80027f0 <HAL_I2C_Init+0x84>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4a7a      	ldr	r2, [pc, #488]	; (80029cc <HAL_I2C_Init+0x260>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	bf94      	ite	ls
 80027e8:	2301      	movls	r3, #1
 80027ea:	2300      	movhi	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	e006      	b.n	80027fe <HAL_I2C_Init+0x92>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4a77      	ldr	r2, [pc, #476]	; (80029d0 <HAL_I2C_Init+0x264>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	bf94      	ite	ls
 80027f8:	2301      	movls	r3, #1
 80027fa:	2300      	movhi	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e0db      	b.n	80029be <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4a72      	ldr	r2, [pc, #456]	; (80029d4 <HAL_I2C_Init+0x268>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	0c9b      	lsrs	r3, r3, #18
 8002810:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4a64      	ldr	r2, [pc, #400]	; (80029c8 <HAL_I2C_Init+0x25c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d802      	bhi.n	8002840 <HAL_I2C_Init+0xd4>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	3301      	adds	r3, #1
 800283e:	e009      	b.n	8002854 <HAL_I2C_Init+0xe8>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002846:	fb02 f303 	mul.w	r3, r2, r3
 800284a:	4a63      	ldr	r2, [pc, #396]	; (80029d8 <HAL_I2C_Init+0x26c>)
 800284c:	fba2 2303 	umull	r2, r3, r2, r3
 8002850:	099b      	lsrs	r3, r3, #6
 8002852:	3301      	adds	r3, #1
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	430b      	orrs	r3, r1
 800285a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002866:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4956      	ldr	r1, [pc, #344]	; (80029c8 <HAL_I2C_Init+0x25c>)
 8002870:	428b      	cmp	r3, r1
 8002872:	d80d      	bhi.n	8002890 <HAL_I2C_Init+0x124>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1e59      	subs	r1, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002882:	3301      	adds	r3, #1
 8002884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002888:	2b04      	cmp	r3, #4
 800288a:	bf38      	it	cc
 800288c:	2304      	movcc	r3, #4
 800288e:	e04f      	b.n	8002930 <HAL_I2C_Init+0x1c4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d111      	bne.n	80028bc <HAL_I2C_Init+0x150>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1e58      	subs	r0, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6859      	ldr	r1, [r3, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	440b      	add	r3, r1
 80028a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf0c      	ite	eq
 80028b4:	2301      	moveq	r3, #1
 80028b6:	2300      	movne	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	e012      	b.n	80028e2 <HAL_I2C_Init+0x176>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1e58      	subs	r0, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	0099      	lsls	r1, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d2:	3301      	adds	r3, #1
 80028d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_I2C_Init+0x17e>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e022      	b.n	8002930 <HAL_I2C_Init+0x1c4>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10e      	bne.n	8002910 <HAL_I2C_Init+0x1a4>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1e58      	subs	r0, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	440b      	add	r3, r1
 8002900:	fbb0 f3f3 	udiv	r3, r0, r3
 8002904:	3301      	adds	r3, #1
 8002906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290e:	e00f      	b.n	8002930 <HAL_I2C_Init+0x1c4>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1e58      	subs	r0, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	0099      	lsls	r1, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	fbb0 f3f3 	udiv	r3, r0, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	6809      	ldr	r1, [r1, #0]
 8002934:	4313      	orrs	r3, r2
 8002936:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800295e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6911      	ldr	r1, [r2, #16]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68d2      	ldr	r2, [r2, #12]
 800296a:	4311      	orrs	r1, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	430b      	orrs	r3, r1
 8002972:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	000186a0 	.word	0x000186a0
 80029cc:	001e847f 	.word	0x001e847f
 80029d0:	003d08ff 	.word	0x003d08ff
 80029d4:	431bde83 	.word	0x431bde83
 80029d8:	10624dd3 	.word	0x10624dd3

080029dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	461a      	mov	r2, r3
 80029e8:	460b      	mov	r3, r1
 80029ea:	817b      	strh	r3, [r7, #10]
 80029ec:	4613      	mov	r3, r2
 80029ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff fb6e 	bl	80020d0 <HAL_GetTick>
 80029f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	f040 80e0 	bne.w	8002bc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	2319      	movs	r3, #25
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4970      	ldr	r1, [pc, #448]	; (8002bd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 faf4 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e0d3      	b.n	8002bc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_I2C_Master_Transmit+0x50>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e0cc      	b.n	8002bc6 <HAL_I2C_Master_Transmit+0x1ea>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d007      	beq.n	8002a52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2221      	movs	r2, #33	; 0x21
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	893a      	ldrh	r2, [r7, #8]
 8002a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4a50      	ldr	r2, [pc, #320]	; (8002bd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a94:	8979      	ldrh	r1, [r7, #10]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	6a3a      	ldr	r2, [r7, #32]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f996 	bl	8002dcc <I2C_MasterRequestWrite>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e08d      	b.n	8002bc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ac0:	e066      	b.n	8002b90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	6a39      	ldr	r1, [r7, #32]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fb6e 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d107      	bne.n	8002aea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e06b      	b.n	8002bc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d11b      	bne.n	8002b64 <HAL_I2C_Master_Transmit+0x188>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d017      	beq.n	8002b64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	6a39      	ldr	r1, [r7, #32]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fb5e 	bl	800322a <I2C_WaitOnBTFFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00d      	beq.n	8002b90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d107      	bne.n	8002b8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e01a      	b.n	8002bc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d194      	bne.n	8002ac2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	00100002 	.word	0x00100002
 8002bd4:	ffff0000 	.word	0xffff0000

08002bd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	4608      	mov	r0, r1
 8002be2:	4611      	mov	r1, r2
 8002be4:	461a      	mov	r2, r3
 8002be6:	4603      	mov	r3, r0
 8002be8:	817b      	strh	r3, [r7, #10]
 8002bea:	460b      	mov	r3, r1
 8002bec:	813b      	strh	r3, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bf2:	f7ff fa6d 	bl	80020d0 <HAL_GetTick>
 8002bf6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	f040 80d9 	bne.w	8002db8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	2319      	movs	r3, #25
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	496d      	ldr	r1, [pc, #436]	; (8002dc4 <HAL_I2C_Mem_Write+0x1ec>)
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f9f3 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e0cc      	b.n	8002dba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_I2C_Mem_Write+0x56>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e0c5      	b.n	8002dba <HAL_I2C_Mem_Write+0x1e2>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d007      	beq.n	8002c54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2221      	movs	r2, #33	; 0x21
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2240      	movs	r2, #64	; 0x40
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a3a      	ldr	r2, [r7, #32]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4a4d      	ldr	r2, [pc, #308]	; (8002dc8 <HAL_I2C_Mem_Write+0x1f0>)
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c96:	88f8      	ldrh	r0, [r7, #6]
 8002c98:	893a      	ldrh	r2, [r7, #8]
 8002c9a:	8979      	ldrh	r1, [r7, #10]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f912 	bl	8002ed0 <I2C_RequestMemoryWrite>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d052      	beq.n	8002d58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e081      	b.n	8002dba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fa74 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d107      	bne.n	8002cde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e06b      	b.n	8002dba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d11b      	bne.n	8002d58 <HAL_I2C_Mem_Write+0x180>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d017      	beq.n	8002d58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	781a      	ldrb	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1aa      	bne.n	8002cb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fa60 	bl	800322a <I2C_WaitOnBTFFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d107      	bne.n	8002d88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e016      	b.n	8002dba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e000      	b.n	8002dba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
  }
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	00100002 	.word	0x00100002
 8002dc8:	ffff0000 	.word	0xffff0000

08002dcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d006      	beq.n	8002df6 <I2C_MasterRequestWrite+0x2a>
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d003      	beq.n	8002df6 <I2C_MasterRequestWrite+0x2a>
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002df4:	d108      	bne.n	8002e08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	e00b      	b.n	8002e20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	2b12      	cmp	r3, #18
 8002e0e:	d107      	bne.n	8002e20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f8e5 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00d      	beq.n	8002e54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e46:	d103      	bne.n	8002e50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e035      	b.n	8002ec0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e5c:	d108      	bne.n	8002e70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e5e:	897b      	ldrh	r3, [r7, #10]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e6c:	611a      	str	r2, [r3, #16]
 8002e6e:	e01b      	b.n	8002ea8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e70:	897b      	ldrh	r3, [r7, #10]
 8002e72:	11db      	asrs	r3, r3, #7
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f003 0306 	and.w	r3, r3, #6
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f063 030f 	orn	r3, r3, #15
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <I2C_MasterRequestWrite+0xfc>)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f90b 	bl	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e010      	b.n	8002ec0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4907      	ldr	r1, [pc, #28]	; (8002ecc <I2C_MasterRequestWrite+0x100>)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f8fb 	bl	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	00010008 	.word	0x00010008
 8002ecc:	00010002 	.word	0x00010002

08002ed0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	4608      	mov	r0, r1
 8002eda:	4611      	mov	r1, r2
 8002edc:	461a      	mov	r2, r3
 8002ede:	4603      	mov	r3, r0
 8002ee0:	817b      	strh	r3, [r7, #10]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	813b      	strh	r3, [r7, #8]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f878 	bl	8002ffc <I2C_WaitOnFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f20:	d103      	bne.n	8002f2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e05f      	b.n	8002fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f2e:	897b      	ldrh	r3, [r7, #10]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	6a3a      	ldr	r2, [r7, #32]
 8002f42:	492d      	ldr	r1, [pc, #180]	; (8002ff8 <I2C_RequestMemoryWrite+0x128>)
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f8b0 	bl	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e04c      	b.n	8002fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6c:	6a39      	ldr	r1, [r7, #32]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f91a 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d107      	bne.n	8002f92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e02b      	b.n	8002fee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f9c:	893b      	ldrh	r3, [r7, #8]
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	611a      	str	r2, [r3, #16]
 8002fa6:	e021      	b.n	8002fec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fa8:	893b      	ldrh	r3, [r7, #8]
 8002faa:	0a1b      	lsrs	r3, r3, #8
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb8:	6a39      	ldr	r1, [r7, #32]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f8f4 	bl	80031a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00d      	beq.n	8002fe2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d107      	bne.n	8002fde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e005      	b.n	8002fee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fe2:	893b      	ldrh	r3, [r7, #8]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	00010002 	.word	0x00010002

08002ffc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800300c:	e025      	b.n	800305a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d021      	beq.n	800305a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003016:	f7ff f85b 	bl	80020d0 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d302      	bcc.n	800302c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d116      	bne.n	800305a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f043 0220 	orr.w	r2, r3, #32
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e023      	b.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10d      	bne.n	8003080 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4013      	ands	r3, r2
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf0c      	ite	eq
 8003076:	2301      	moveq	r3, #1
 8003078:	2300      	movne	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	e00c      	b.n	800309a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	43da      	mvns	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4013      	ands	r3, r2
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf0c      	ite	eq
 8003092:	2301      	moveq	r3, #1
 8003094:	2300      	movne	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	429a      	cmp	r2, r3
 800309e:	d0b6      	beq.n	800300e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b8:	e051      	b.n	800315e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c8:	d123      	bne.n	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f043 0204 	orr.w	r2, r3, #4
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e046      	b.n	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d021      	beq.n	800315e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7fe ffd9 	bl	80020d0 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d116      	bne.n	800315e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e020      	b.n	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d10c      	bne.n	8003182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4013      	ands	r3, r2
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	bf14      	ite	ne
 800317a:	2301      	movne	r3, #1
 800317c:	2300      	moveq	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	e00b      	b.n	800319a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	43da      	mvns	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4013      	ands	r3, r2
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d18d      	bne.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b4:	e02d      	b.n	8003212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f878 	bl	80032ac <I2C_IsAcknowledgeFailed>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e02d      	b.n	8003222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d021      	beq.n	8003212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ce:	f7fe ff7f 	bl	80020d0 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d302      	bcc.n	80031e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d116      	bne.n	8003212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f043 0220 	orr.w	r2, r3, #32
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e007      	b.n	8003222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321c:	2b80      	cmp	r3, #128	; 0x80
 800321e:	d1ca      	bne.n	80031b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003236:	e02d      	b.n	8003294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f837 	bl	80032ac <I2C_IsAcknowledgeFailed>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e02d      	b.n	80032a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d021      	beq.n	8003294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003250:	f7fe ff3e 	bl	80020d0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	429a      	cmp	r2, r3
 800325e:	d302      	bcc.n	8003266 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d116      	bne.n	8003294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e007      	b.n	80032a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d1ca      	bne.n	8003238 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c2:	d11b      	bne.n	80032fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f043 0204 	orr.w	r2, r3, #4
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0cc      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003320:	4b68      	ldr	r3, [pc, #416]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d90c      	bls.n	8003348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b65      	ldr	r3, [pc, #404]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b63      	ldr	r3, [pc, #396]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0b8      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003360:	4b59      	ldr	r3, [pc, #356]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a58      	ldr	r2, [pc, #352]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800336a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a52      	ldr	r2, [pc, #328]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003384:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	494d      	ldr	r1, [pc, #308]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d044      	beq.n	800342c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d119      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e07f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d003      	beq.n	80033ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	4b3f      	ldr	r3, [pc, #252]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e06f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033da:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e067      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ea:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 0203 	bic.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4934      	ldr	r1, [pc, #208]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033fc:	f7fe fe68 	bl	80020d0 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	e00a      	b.n	800341a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fe fe64 	bl	80020d0 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e04f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 020c 	and.w	r2, r3, #12
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	429a      	cmp	r2, r3
 800342a:	d1eb      	bne.n	8003404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800342c:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d20c      	bcs.n	8003454 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e032      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4916      	ldr	r1, [pc, #88]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	490e      	ldr	r1, [pc, #56]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003492:	f000 f887 	bl	80035a4 <HAL_RCC_GetSysClockFreq>
 8003496:	4601      	mov	r1, r0
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	5cd3      	ldrb	r3, [r2, r3]
 80034a6:	fa21 f303 	lsr.w	r3, r1, r3
 80034aa:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fcb8 	bl	8001e28 <HAL_InitTick>

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40023c00 	.word	0x40023c00
 80034c8:	40023800 	.word	0x40023800
 80034cc:	080071e4 	.word	0x080071e4
 80034d0:	20000000 	.word	0x20000000
 80034d4:	20000004 	.word	0x20000004

080034d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <HAL_RCC_GetHCLKFreq+0x14>)
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000000 	.word	0x20000000

080034f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034f4:	f7ff fff0 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 80034f8:	4601      	mov	r1, r0
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	0a9b      	lsrs	r3, r3, #10
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	4a03      	ldr	r2, [pc, #12]	; (8003514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	fa21 f303 	lsr.w	r3, r1, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40023800 	.word	0x40023800
 8003514:	080071f4 	.word	0x080071f4

08003518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800351c:	f7ff ffdc 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 8003520:	4601      	mov	r1, r0
 8003522:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	0b5b      	lsrs	r3, r3, #13
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	4a03      	ldr	r2, [pc, #12]	; (800353c <HAL_RCC_GetPCLK2Freq+0x24>)
 800352e:	5cd3      	ldrb	r3, [r2, r3]
 8003530:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40023800 	.word	0x40023800
 800353c:	080071f4 	.word	0x080071f4

08003540 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	220f      	movs	r2, #15
 800354e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003550:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_RCC_GetClockConfig+0x5c>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0203 	and.w	r2, r3, #3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <HAL_RCC_GetClockConfig+0x5c>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <HAL_RCC_GetClockConfig+0x5c>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_RCC_GetClockConfig+0x5c>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	08db      	lsrs	r3, r3, #3
 800357a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003582:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <HAL_RCC_GetClockConfig+0x60>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 020f 	and.w	r2, r3, #15
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	601a      	str	r2, [r3, #0]
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800
 80035a0:	40023c00 	.word	0x40023c00

080035a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035be:	4b9f      	ldr	r3, [pc, #636]	; (800383c <HAL_RCC_GetSysClockFreq+0x298>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b0c      	cmp	r3, #12
 80035c8:	f200 8130 	bhi.w	800382c <HAL_RCC_GetSysClockFreq+0x288>
 80035cc:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <HAL_RCC_GetSysClockFreq+0x30>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	08003609 	.word	0x08003609
 80035d8:	0800382d 	.word	0x0800382d
 80035dc:	0800382d 	.word	0x0800382d
 80035e0:	0800382d 	.word	0x0800382d
 80035e4:	0800360f 	.word	0x0800360f
 80035e8:	0800382d 	.word	0x0800382d
 80035ec:	0800382d 	.word	0x0800382d
 80035f0:	0800382d 	.word	0x0800382d
 80035f4:	08003615 	.word	0x08003615
 80035f8:	0800382d 	.word	0x0800382d
 80035fc:	0800382d 	.word	0x0800382d
 8003600:	0800382d 	.word	0x0800382d
 8003604:	08003723 	.word	0x08003723
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003608:	4b8d      	ldr	r3, [pc, #564]	; (8003840 <HAL_RCC_GetSysClockFreq+0x29c>)
 800360a:	613b      	str	r3, [r7, #16]
       break;
 800360c:	e111      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800360e:	4b8d      	ldr	r3, [pc, #564]	; (8003844 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003610:	613b      	str	r3, [r7, #16]
      break;
 8003612:	e10e      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003614:	4b89      	ldr	r3, [pc, #548]	; (800383c <HAL_RCC_GetSysClockFreq+0x298>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800361c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800361e:	4b87      	ldr	r3, [pc, #540]	; (800383c <HAL_RCC_GetSysClockFreq+0x298>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d023      	beq.n	8003672 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800362a:	4b84      	ldr	r3, [pc, #528]	; (800383c <HAL_RCC_GetSysClockFreq+0x298>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	099b      	lsrs	r3, r3, #6
 8003630:	f04f 0400 	mov.w	r4, #0
 8003634:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	ea03 0501 	and.w	r5, r3, r1
 8003640:	ea04 0602 	and.w	r6, r4, r2
 8003644:	4a7f      	ldr	r2, [pc, #508]	; (8003844 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003646:	fb02 f106 	mul.w	r1, r2, r6
 800364a:	2200      	movs	r2, #0
 800364c:	fb02 f205 	mul.w	r2, r2, r5
 8003650:	440a      	add	r2, r1
 8003652:	497c      	ldr	r1, [pc, #496]	; (8003844 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003654:	fba5 0101 	umull	r0, r1, r5, r1
 8003658:	1853      	adds	r3, r2, r1
 800365a:	4619      	mov	r1, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f04f 0400 	mov.w	r4, #0
 8003662:	461a      	mov	r2, r3
 8003664:	4623      	mov	r3, r4
 8003666:	f7fd fa5b 	bl	8000b20 <__aeabi_uldivmod>
 800366a:	4603      	mov	r3, r0
 800366c:	460c      	mov	r4, r1
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e049      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003672:	4b72      	ldr	r3, [pc, #456]	; (800383c <HAL_RCC_GetSysClockFreq+0x298>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	099b      	lsrs	r3, r3, #6
 8003678:	f04f 0400 	mov.w	r4, #0
 800367c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	ea03 0501 	and.w	r5, r3, r1
 8003688:	ea04 0602 	and.w	r6, r4, r2
 800368c:	4629      	mov	r1, r5
 800368e:	4632      	mov	r2, r6
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	f04f 0400 	mov.w	r4, #0
 8003698:	0154      	lsls	r4, r2, #5
 800369a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800369e:	014b      	lsls	r3, r1, #5
 80036a0:	4619      	mov	r1, r3
 80036a2:	4622      	mov	r2, r4
 80036a4:	1b49      	subs	r1, r1, r5
 80036a6:	eb62 0206 	sbc.w	r2, r2, r6
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	f04f 0400 	mov.w	r4, #0
 80036b2:	0194      	lsls	r4, r2, #6
 80036b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036b8:	018b      	lsls	r3, r1, #6
 80036ba:	1a5b      	subs	r3, r3, r1
 80036bc:	eb64 0402 	sbc.w	r4, r4, r2
 80036c0:	f04f 0100 	mov.w	r1, #0
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	00e2      	lsls	r2, r4, #3
 80036ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036ce:	00d9      	lsls	r1, r3, #3
 80036d0:	460b      	mov	r3, r1
 80036d2:	4614      	mov	r4, r2
 80036d4:	195b      	adds	r3, r3, r5
 80036d6:	eb44 0406 	adc.w	r4, r4, r6
 80036da:	f04f 0100 	mov.w	r1, #0
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	02a2      	lsls	r2, r4, #10
 80036e4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036e8:	0299      	lsls	r1, r3, #10
 80036ea:	460b      	mov	r3, r1
 80036ec:	4614      	mov	r4, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	4621      	mov	r1, r4
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f04f 0400 	mov.w	r4, #0
 80036f8:	461a      	mov	r2, r3
 80036fa:	4623      	mov	r3, r4
 80036fc:	f7fd fa10 	bl	8000b20 <__aeabi_uldivmod>
 8003700:	4603      	mov	r3, r0
 8003702:	460c      	mov	r4, r1
 8003704:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003706:	4b4d      	ldr	r3, [pc, #308]	; (800383c <HAL_RCC_GetSysClockFreq+0x298>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0c1b      	lsrs	r3, r3, #16
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	3301      	adds	r3, #1
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	613b      	str	r3, [r7, #16]
      break;
 8003720:	e087      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003722:	4b46      	ldr	r3, [pc, #280]	; (800383c <HAL_RCC_GetSysClockFreq+0x298>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800372a:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800372c:	4b43      	ldr	r3, [pc, #268]	; (800383c <HAL_RCC_GetSysClockFreq+0x298>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d023      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003738:	4b40      	ldr	r3, [pc, #256]	; (800383c <HAL_RCC_GetSysClockFreq+0x298>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	099b      	lsrs	r3, r3, #6
 800373e:	f04f 0400 	mov.w	r4, #0
 8003742:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	ea03 0501 	and.w	r5, r3, r1
 800374e:	ea04 0602 	and.w	r6, r4, r2
 8003752:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003754:	fb02 f106 	mul.w	r1, r2, r6
 8003758:	2200      	movs	r2, #0
 800375a:	fb02 f205 	mul.w	r2, r2, r5
 800375e:	440a      	add	r2, r1
 8003760:	4938      	ldr	r1, [pc, #224]	; (8003844 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003762:	fba5 0101 	umull	r0, r1, r5, r1
 8003766:	1853      	adds	r3, r2, r1
 8003768:	4619      	mov	r1, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f04f 0400 	mov.w	r4, #0
 8003770:	461a      	mov	r2, r3
 8003772:	4623      	mov	r3, r4
 8003774:	f7fd f9d4 	bl	8000b20 <__aeabi_uldivmod>
 8003778:	4603      	mov	r3, r0
 800377a:	460c      	mov	r4, r1
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e049      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003780:	4b2e      	ldr	r3, [pc, #184]	; (800383c <HAL_RCC_GetSysClockFreq+0x298>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	099b      	lsrs	r3, r3, #6
 8003786:	f04f 0400 	mov.w	r4, #0
 800378a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	ea03 0501 	and.w	r5, r3, r1
 8003796:	ea04 0602 	and.w	r6, r4, r2
 800379a:	4629      	mov	r1, r5
 800379c:	4632      	mov	r2, r6
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	f04f 0400 	mov.w	r4, #0
 80037a6:	0154      	lsls	r4, r2, #5
 80037a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037ac:	014b      	lsls	r3, r1, #5
 80037ae:	4619      	mov	r1, r3
 80037b0:	4622      	mov	r2, r4
 80037b2:	1b49      	subs	r1, r1, r5
 80037b4:	eb62 0206 	sbc.w	r2, r2, r6
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	f04f 0400 	mov.w	r4, #0
 80037c0:	0194      	lsls	r4, r2, #6
 80037c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037c6:	018b      	lsls	r3, r1, #6
 80037c8:	1a5b      	subs	r3, r3, r1
 80037ca:	eb64 0402 	sbc.w	r4, r4, r2
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	00e2      	lsls	r2, r4, #3
 80037d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037dc:	00d9      	lsls	r1, r3, #3
 80037de:	460b      	mov	r3, r1
 80037e0:	4614      	mov	r4, r2
 80037e2:	195b      	adds	r3, r3, r5
 80037e4:	eb44 0406 	adc.w	r4, r4, r6
 80037e8:	f04f 0100 	mov.w	r1, #0
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	02a2      	lsls	r2, r4, #10
 80037f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037f6:	0299      	lsls	r1, r3, #10
 80037f8:	460b      	mov	r3, r1
 80037fa:	4614      	mov	r4, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	4621      	mov	r1, r4
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f04f 0400 	mov.w	r4, #0
 8003806:	461a      	mov	r2, r3
 8003808:	4623      	mov	r3, r4
 800380a:	f7fd f989 	bl	8000b20 <__aeabi_uldivmod>
 800380e:	4603      	mov	r3, r0
 8003810:	460c      	mov	r4, r1
 8003812:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <HAL_RCC_GetSysClockFreq+0x298>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	0f1b      	lsrs	r3, r3, #28
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	613b      	str	r3, [r7, #16]
      break;
 800382a:	e002      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b04      	ldr	r3, [pc, #16]	; (8003840 <HAL_RCC_GetSysClockFreq+0x29c>)
 800382e:	613b      	str	r3, [r7, #16]
      break;
 8003830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003832:	693b      	ldr	r3, [r7, #16]
}
 8003834:	4618      	mov	r0, r3
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	00f42400 	.word	0x00f42400
 8003844:	017d7840 	.word	0x017d7840

08003848 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e28d      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8083 	beq.w	800396e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003868:	4b94      	ldr	r3, [pc, #592]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b04      	cmp	r3, #4
 8003872:	d019      	beq.n	80038a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003874:	4b91      	ldr	r3, [pc, #580]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800387c:	2b08      	cmp	r3, #8
 800387e:	d106      	bne.n	800388e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003880:	4b8e      	ldr	r3, [pc, #568]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800388c:	d00c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800388e:	4b8b      	ldr	r3, [pc, #556]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003896:	2b0c      	cmp	r3, #12
 8003898:	d112      	bne.n	80038c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389a:	4b88      	ldr	r3, [pc, #544]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038a6:	d10b      	bne.n	80038c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a8:	4b84      	ldr	r3, [pc, #528]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d05b      	beq.n	800396c <HAL_RCC_OscConfig+0x124>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d157      	bne.n	800396c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e25a      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c8:	d106      	bne.n	80038d8 <HAL_RCC_OscConfig+0x90>
 80038ca:	4b7c      	ldr	r3, [pc, #496]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a7b      	ldr	r2, [pc, #492]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e01d      	b.n	8003914 <HAL_RCC_OscConfig+0xcc>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0xb4>
 80038e2:	4b76      	ldr	r3, [pc, #472]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a75      	ldr	r2, [pc, #468]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b73      	ldr	r3, [pc, #460]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a72      	ldr	r2, [pc, #456]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0xcc>
 80038fc:	4b6f      	ldr	r3, [pc, #444]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a6e      	ldr	r2, [pc, #440]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b6c      	ldr	r3, [pc, #432]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a6b      	ldr	r2, [pc, #428]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 800390e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe fbd8 	bl	80020d0 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003924:	f7fe fbd4 	bl	80020d0 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	; 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e21f      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b61      	ldr	r3, [pc, #388]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0xdc>
 8003942:	e014      	b.n	800396e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe fbc4 	bl	80020d0 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800394c:	f7fe fbc0 	bl	80020d0 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e20b      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395e:	4b57      	ldr	r3, [pc, #348]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x104>
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d06f      	beq.n	8003a5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800397a:	4b50      	ldr	r3, [pc, #320]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b00      	cmp	r3, #0
 8003984:	d017      	beq.n	80039b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003986:	4b4d      	ldr	r3, [pc, #308]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800398e:	2b08      	cmp	r3, #8
 8003990:	d105      	bne.n	800399e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003992:	4b4a      	ldr	r3, [pc, #296]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800399e:	4b47      	ldr	r3, [pc, #284]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d11c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039aa:	4b44      	ldr	r3, [pc, #272]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d116      	bne.n	80039e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b6:	4b41      	ldr	r3, [pc, #260]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <HAL_RCC_OscConfig+0x186>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d001      	beq.n	80039ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e1d3      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ce:	4b3b      	ldr	r3, [pc, #236]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4937      	ldr	r1, [pc, #220]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e2:	e03a      	b.n	8003a5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d020      	beq.n	8003a2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ec:	4b34      	ldr	r3, [pc, #208]	; (8003ac0 <HAL_RCC_OscConfig+0x278>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f2:	f7fe fb6d 	bl	80020d0 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039fa:	f7fe fb69 	bl	80020d0 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e1b4      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a18:	4b28      	ldr	r3, [pc, #160]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4925      	ldr	r1, [pc, #148]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	600b      	str	r3, [r1, #0]
 8003a2c:	e015      	b.n	8003a5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a2e:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <HAL_RCC_OscConfig+0x278>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe fb4c 	bl	80020d0 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a3c:	f7fe fb48 	bl	80020d0 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e193      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4e:	4b1b      	ldr	r3, [pc, #108]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d036      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d016      	beq.n	8003a9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a74:	f7fe fb2c 	bl	80020d0 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a7c:	f7fe fb28 	bl	80020d0 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e173      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x234>
 8003a9a:	e01b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_RCC_OscConfig+0x27c>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa2:	f7fe fb15 	bl	80020d0 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa8:	e00e      	b.n	8003ac8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aaa:	f7fe fb11 	bl	80020d0 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d907      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e15c      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	42470000 	.word	0x42470000
 8003ac4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac8:	4b8a      	ldr	r3, [pc, #552]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ea      	bne.n	8003aaa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8097 	beq.w	8003c10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae6:	4b83      	ldr	r3, [pc, #524]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10f      	bne.n	8003b12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	4b7f      	ldr	r3, [pc, #508]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	4a7e      	ldr	r2, [pc, #504]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b00:	6413      	str	r3, [r2, #64]	; 0x40
 8003b02:	4b7c      	ldr	r3, [pc, #496]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b12:	4b79      	ldr	r3, [pc, #484]	; (8003cf8 <HAL_RCC_OscConfig+0x4b0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d118      	bne.n	8003b50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b1e:	4b76      	ldr	r3, [pc, #472]	; (8003cf8 <HAL_RCC_OscConfig+0x4b0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a75      	ldr	r2, [pc, #468]	; (8003cf8 <HAL_RCC_OscConfig+0x4b0>)
 8003b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b2a:	f7fe fad1 	bl	80020d0 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b32:	f7fe facd 	bl	80020d0 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e118      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	4b6c      	ldr	r3, [pc, #432]	; (8003cf8 <HAL_RCC_OscConfig+0x4b0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d106      	bne.n	8003b66 <HAL_RCC_OscConfig+0x31e>
 8003b58:	4b66      	ldr	r3, [pc, #408]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	4a65      	ldr	r2, [pc, #404]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6713      	str	r3, [r2, #112]	; 0x70
 8003b64:	e01c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x358>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b05      	cmp	r3, #5
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x340>
 8003b6e:	4b61      	ldr	r3, [pc, #388]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	4a60      	ldr	r2, [pc, #384]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b74:	f043 0304 	orr.w	r3, r3, #4
 8003b78:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7a:	4b5e      	ldr	r3, [pc, #376]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	4a5d      	ldr	r2, [pc, #372]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	6713      	str	r3, [r2, #112]	; 0x70
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCC_OscConfig+0x358>
 8003b88:	4b5a      	ldr	r3, [pc, #360]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	4a59      	ldr	r2, [pc, #356]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	6713      	str	r3, [r2, #112]	; 0x70
 8003b94:	4b57      	ldr	r3, [pc, #348]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4a56      	ldr	r2, [pc, #344]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003b9a:	f023 0304 	bic.w	r3, r3, #4
 8003b9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d015      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba8:	f7fe fa92 	bl	80020d0 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb0:	f7fe fa8e 	bl	80020d0 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e0d7      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc6:	4b4b      	ldr	r3, [pc, #300]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0ee      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x368>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fe fa7c 	bl	80020d0 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bda:	e00a      	b.n	8003bf2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bdc:	f7fe fa78 	bl	80020d0 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e0c1      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf2:	4b40      	ldr	r3, [pc, #256]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1ee      	bne.n	8003bdc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c04:	4b3b      	ldr	r3, [pc, #236]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	4a3a      	ldr	r2, [pc, #232]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80ad 	beq.w	8003d74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c1a:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d060      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d145      	bne.n	8003cba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c2e:	4b33      	ldr	r3, [pc, #204]	; (8003cfc <HAL_RCC_OscConfig+0x4b4>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fe fa4c 	bl	80020d0 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fe fa48 	bl	80020d0 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e093      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69da      	ldr	r2, [r3, #28]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	019b      	lsls	r3, r3, #6
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	3b01      	subs	r3, #1
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c84:	071b      	lsls	r3, r3, #28
 8003c86:	491b      	ldr	r1, [pc, #108]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <HAL_RCC_OscConfig+0x4b4>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fe fa1d 	bl	80020d0 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9a:	f7fe fa19 	bl	80020d0 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e064      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cac:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x452>
 8003cb8:	e05c      	b.n	8003d74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cba:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <HAL_RCC_OscConfig+0x4b4>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fa06 	bl	80020d0 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fe fa02 	bl	80020d0 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e04d      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_RCC_OscConfig+0x4ac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x480>
 8003ce6:	e045      	b.n	8003d74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e040      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	40007000 	.word	0x40007000
 8003cfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d00:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <HAL_RCC_OscConfig+0x538>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d030      	beq.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d129      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d122      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d30:	4013      	ands	r3, r2
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d119      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d10f      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800

08003d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e041      	b.n	8003e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd feae 	bl	8001b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f000 fce8 	bl	8004798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d001      	beq.n	8003e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e04e      	b.n	8003eda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d022      	beq.n	8003ea4 <HAL_TIM_Base_Start_IT+0x80>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e66:	d01d      	beq.n	8003ea4 <HAL_TIM_Base_Start_IT+0x80>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <HAL_TIM_Base_Start_IT+0xc8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d018      	beq.n	8003ea4 <HAL_TIM_Base_Start_IT+0x80>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a1e      	ldr	r2, [pc, #120]	; (8003ef0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <HAL_TIM_Base_Start_IT+0x80>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <HAL_TIM_Base_Start_IT+0x80>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <HAL_TIM_Base_Start_IT+0x80>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a19      	ldr	r2, [pc, #100]	; (8003efc <HAL_TIM_Base_Start_IT+0xd8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_TIM_Base_Start_IT+0x80>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a18      	ldr	r2, [pc, #96]	; (8003f00 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d111      	bne.n	8003ec8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	d010      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec6:	e007      	b.n	8003ed8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40010000 	.word	0x40010000
 8003eec:	40000400 	.word	0x40000400
 8003ef0:	40000800 	.word	0x40000800
 8003ef4:	40000c00 	.word	0x40000c00
 8003ef8:	40010400 	.word	0x40010400
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40001800 	.word	0x40001800

08003f04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e041      	b.n	8003f9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fd fdb6 	bl	8001a9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f000 fc28 	bl	8004798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e041      	b.n	8004038 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d106      	bne.n	8003fce <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7fd fd19 	bl	8001a00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	f000 fbd9 	bl	8004798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d104      	bne.n	800405e <HAL_TIM_IC_Start_IT+0x1e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800405a:	b2db      	uxtb	r3, r3
 800405c:	e013      	b.n	8004086 <HAL_TIM_IC_Start_IT+0x46>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b04      	cmp	r3, #4
 8004062:	d104      	bne.n	800406e <HAL_TIM_IC_Start_IT+0x2e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800406a:	b2db      	uxtb	r3, r3
 800406c:	e00b      	b.n	8004086 <HAL_TIM_IC_Start_IT+0x46>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d104      	bne.n	800407e <HAL_TIM_IC_Start_IT+0x3e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800407a:	b2db      	uxtb	r3, r3
 800407c:	e003      	b.n	8004086 <HAL_TIM_IC_Start_IT+0x46>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004084:	b2db      	uxtb	r3, r3
 8004086:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d104      	bne.n	8004098 <HAL_TIM_IC_Start_IT+0x58>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004094:	b2db      	uxtb	r3, r3
 8004096:	e013      	b.n	80040c0 <HAL_TIM_IC_Start_IT+0x80>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2b04      	cmp	r3, #4
 800409c:	d104      	bne.n	80040a8 <HAL_TIM_IC_Start_IT+0x68>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	e00b      	b.n	80040c0 <HAL_TIM_IC_Start_IT+0x80>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d104      	bne.n	80040b8 <HAL_TIM_IC_Start_IT+0x78>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e003      	b.n	80040c0 <HAL_TIM_IC_Start_IT+0x80>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80040c2:	7bbb      	ldrb	r3, [r7, #14]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d102      	bne.n	80040ce <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80040c8:	7b7b      	ldrb	r3, [r7, #13]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d001      	beq.n	80040d2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e0cc      	b.n	800426c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d104      	bne.n	80040e2 <HAL_TIM_IC_Start_IT+0xa2>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040e0:	e013      	b.n	800410a <HAL_TIM_IC_Start_IT+0xca>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d104      	bne.n	80040f2 <HAL_TIM_IC_Start_IT+0xb2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f0:	e00b      	b.n	800410a <HAL_TIM_IC_Start_IT+0xca>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_IC_Start_IT+0xc2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004100:	e003      	b.n	800410a <HAL_TIM_IC_Start_IT+0xca>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2202      	movs	r2, #2
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d104      	bne.n	800411a <HAL_TIM_IC_Start_IT+0xda>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004118:	e013      	b.n	8004142 <HAL_TIM_IC_Start_IT+0x102>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b04      	cmp	r3, #4
 800411e:	d104      	bne.n	800412a <HAL_TIM_IC_Start_IT+0xea>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004128:	e00b      	b.n	8004142 <HAL_TIM_IC_Start_IT+0x102>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b08      	cmp	r3, #8
 800412e:	d104      	bne.n	800413a <HAL_TIM_IC_Start_IT+0xfa>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004138:	e003      	b.n	8004142 <HAL_TIM_IC_Start_IT+0x102>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2202      	movs	r2, #2
 800413e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b0c      	cmp	r3, #12
 8004146:	d841      	bhi.n	80041cc <HAL_TIM_IC_Start_IT+0x18c>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <HAL_TIM_IC_Start_IT+0x110>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004185 	.word	0x08004185
 8004154:	080041cd 	.word	0x080041cd
 8004158:	080041cd 	.word	0x080041cd
 800415c:	080041cd 	.word	0x080041cd
 8004160:	08004197 	.word	0x08004197
 8004164:	080041cd 	.word	0x080041cd
 8004168:	080041cd 	.word	0x080041cd
 800416c:	080041cd 	.word	0x080041cd
 8004170:	080041a9 	.word	0x080041a9
 8004174:	080041cd 	.word	0x080041cd
 8004178:	080041cd 	.word	0x080041cd
 800417c:	080041cd 	.word	0x080041cd
 8004180:	080041bb 	.word	0x080041bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0202 	orr.w	r2, r2, #2
 8004192:	60da      	str	r2, [r3, #12]
      break;
 8004194:	e01d      	b.n	80041d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0204 	orr.w	r2, r2, #4
 80041a4:	60da      	str	r2, [r3, #12]
      break;
 80041a6:	e014      	b.n	80041d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0208 	orr.w	r2, r2, #8
 80041b6:	60da      	str	r2, [r3, #12]
      break;
 80041b8:	e00b      	b.n	80041d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0210 	orr.w	r2, r2, #16
 80041c8:	60da      	str	r2, [r3, #12]
      break;
 80041ca:	e002      	b.n	80041d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
      break;
 80041d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d148      	bne.n	800426a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2201      	movs	r2, #1
 80041de:	6839      	ldr	r1, [r7, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fe53 	bl	8004e8c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a22      	ldr	r2, [pc, #136]	; (8004274 <HAL_TIM_IC_Start_IT+0x234>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d022      	beq.n	8004236 <HAL_TIM_IC_Start_IT+0x1f6>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f8:	d01d      	beq.n	8004236 <HAL_TIM_IC_Start_IT+0x1f6>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <HAL_TIM_IC_Start_IT+0x238>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d018      	beq.n	8004236 <HAL_TIM_IC_Start_IT+0x1f6>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1c      	ldr	r2, [pc, #112]	; (800427c <HAL_TIM_IC_Start_IT+0x23c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <HAL_TIM_IC_Start_IT+0x1f6>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_TIM_IC_Start_IT+0x240>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00e      	beq.n	8004236 <HAL_TIM_IC_Start_IT+0x1f6>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a19      	ldr	r2, [pc, #100]	; (8004284 <HAL_TIM_IC_Start_IT+0x244>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d009      	beq.n	8004236 <HAL_TIM_IC_Start_IT+0x1f6>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <HAL_TIM_IC_Start_IT+0x248>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <HAL_TIM_IC_Start_IT+0x1f6>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a16      	ldr	r2, [pc, #88]	; (800428c <HAL_TIM_IC_Start_IT+0x24c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d111      	bne.n	800425a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b06      	cmp	r3, #6
 8004246:	d010      	beq.n	800426a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004258:	e007      	b.n	800426a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800426a:	7bfb      	ldrb	r3, [r7, #15]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40010000 	.word	0x40010000
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800
 8004280:	40000c00 	.word	0x40000c00
 8004284:	40010400 	.word	0x40010400
 8004288:	40014000 	.word	0x40014000
 800428c:	40001800 	.word	0x40001800

08004290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d122      	bne.n	80042ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d11b      	bne.n	80042ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0202 	mvn.w	r2, #2
 80042bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fd fa4e 	bl	8001774 <HAL_TIM_IC_CaptureCallback>
 80042d8:	e005      	b.n	80042e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fa3e 	bl	800475c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fa45 	bl	8004770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d122      	bne.n	8004340 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b04      	cmp	r3, #4
 8004306:	d11b      	bne.n	8004340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0204 	mvn.w	r2, #4
 8004310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2202      	movs	r2, #2
 8004316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fd fa24 	bl	8001774 <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fa14 	bl	800475c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fa1b 	bl	8004770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b08      	cmp	r3, #8
 800434c:	d122      	bne.n	8004394 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b08      	cmp	r3, #8
 800435a:	d11b      	bne.n	8004394 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0208 	mvn.w	r2, #8
 8004364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2204      	movs	r2, #4
 800436a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fd f9fa 	bl	8001774 <HAL_TIM_IC_CaptureCallback>
 8004380:	e005      	b.n	800438e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f9ea 	bl	800475c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f9f1 	bl	8004770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2b10      	cmp	r3, #16
 80043a0:	d122      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d11b      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0210 	mvn.w	r2, #16
 80043b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2208      	movs	r2, #8
 80043be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fd f9d0 	bl	8001774 <HAL_TIM_IC_CaptureCallback>
 80043d4:	e005      	b.n	80043e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f9c0 	bl	800475c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f9c7 	bl	8004770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10e      	bne.n	8004414 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b01      	cmp	r3, #1
 8004402:	d107      	bne.n	8004414 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0201 	mvn.w	r2, #1
 800440c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd f9e6 	bl	80017e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441e:	2b80      	cmp	r3, #128	; 0x80
 8004420:	d10e      	bne.n	8004440 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442c:	2b80      	cmp	r3, #128	; 0x80
 800442e:	d107      	bne.n	8004440 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fdd2 	bl	8004fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b40      	cmp	r3, #64	; 0x40
 800444c:	d10e      	bne.n	800446c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b40      	cmp	r3, #64	; 0x40
 800445a:	d107      	bne.n	800446c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f98c 	bl	8004784 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b20      	cmp	r3, #32
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b20      	cmp	r3, #32
 8004486:	d107      	bne.n	8004498 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0220 	mvn.w	r2, #32
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fd9c 	bl	8004fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_TIM_IC_ConfigChannel+0x1e>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e088      	b.n	80045d0 <HAL_TIM_IC_ConfigChannel+0x130>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d11b      	bne.n	8004504 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	6819      	ldr	r1, [r3, #0]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f000 fbac 	bl	8004c38 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 020c 	bic.w	r2, r2, #12
 80044ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6999      	ldr	r1, [r3, #24]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	619a      	str	r2, [r3, #24]
 8004502:	e060      	b.n	80045c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b04      	cmp	r3, #4
 8004508:	d11c      	bne.n	8004544 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	6819      	ldr	r1, [r3, #0]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f000 fc01 	bl	8004d20 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699a      	ldr	r2, [r3, #24]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800452c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6999      	ldr	r1, [r3, #24]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	021a      	lsls	r2, r3, #8
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	619a      	str	r2, [r3, #24]
 8004542:	e040      	b.n	80045c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b08      	cmp	r3, #8
 8004548:	d11b      	bne.n	8004582 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	6819      	ldr	r1, [r3, #0]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f000 fc1e 	bl	8004d9a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69da      	ldr	r2, [r3, #28]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 020c 	bic.w	r2, r2, #12
 800456c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69d9      	ldr	r1, [r3, #28]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	61da      	str	r2, [r3, #28]
 8004580:	e021      	b.n	80045c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b0c      	cmp	r3, #12
 8004586:	d11c      	bne.n	80045c2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f000 fc3b 	bl	8004e12 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69da      	ldr	r2, [r3, #28]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69d9      	ldr	r1, [r3, #28]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	021a      	lsls	r2, r3, #8
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	61da      	str	r2, [r3, #28]
 80045c0:	e001      	b.n	80045c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e0ae      	b.n	8004754 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b0c      	cmp	r3, #12
 8004602:	f200 809f 	bhi.w	8004744 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004606:	a201      	add	r2, pc, #4	; (adr r2, 800460c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	08004641 	.word	0x08004641
 8004610:	08004745 	.word	0x08004745
 8004614:	08004745 	.word	0x08004745
 8004618:	08004745 	.word	0x08004745
 800461c:	08004681 	.word	0x08004681
 8004620:	08004745 	.word	0x08004745
 8004624:	08004745 	.word	0x08004745
 8004628:	08004745 	.word	0x08004745
 800462c:	080046c3 	.word	0x080046c3
 8004630:	08004745 	.word	0x08004745
 8004634:	08004745 	.word	0x08004745
 8004638:	08004745 	.word	0x08004745
 800463c:	08004703 	.word	0x08004703
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 f946 	bl	80048d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0208 	orr.w	r2, r2, #8
 800465a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0204 	bic.w	r2, r2, #4
 800466a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6999      	ldr	r1, [r3, #24]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	619a      	str	r2, [r3, #24]
      break;
 800467e:	e064      	b.n	800474a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f996 	bl	80049b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800469a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6999      	ldr	r1, [r3, #24]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	021a      	lsls	r2, r3, #8
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	619a      	str	r2, [r3, #24]
      break;
 80046c0:	e043      	b.n	800474a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68b9      	ldr	r1, [r7, #8]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 f9eb 	bl	8004aa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0208 	orr.w	r2, r2, #8
 80046dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69da      	ldr	r2, [r3, #28]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0204 	bic.w	r2, r2, #4
 80046ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69d9      	ldr	r1, [r3, #28]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	61da      	str	r2, [r3, #28]
      break;
 8004700:	e023      	b.n	800474a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fa3f 	bl	8004b8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800471c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69da      	ldr	r2, [r3, #28]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69d9      	ldr	r1, [r3, #28]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	021a      	lsls	r2, r3, #8
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	61da      	str	r2, [r3, #28]
      break;
 8004742:	e002      	b.n	800474a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	75fb      	strb	r3, [r7, #23]
      break;
 8004748:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004752:	7dfb      	ldrb	r3, [r7, #23]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a40      	ldr	r2, [pc, #256]	; (80048ac <TIM_Base_SetConfig+0x114>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d013      	beq.n	80047d8 <TIM_Base_SetConfig+0x40>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b6:	d00f      	beq.n	80047d8 <TIM_Base_SetConfig+0x40>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a3d      	ldr	r2, [pc, #244]	; (80048b0 <TIM_Base_SetConfig+0x118>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00b      	beq.n	80047d8 <TIM_Base_SetConfig+0x40>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a3c      	ldr	r2, [pc, #240]	; (80048b4 <TIM_Base_SetConfig+0x11c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d007      	beq.n	80047d8 <TIM_Base_SetConfig+0x40>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a3b      	ldr	r2, [pc, #236]	; (80048b8 <TIM_Base_SetConfig+0x120>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d003      	beq.n	80047d8 <TIM_Base_SetConfig+0x40>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a3a      	ldr	r2, [pc, #232]	; (80048bc <TIM_Base_SetConfig+0x124>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d108      	bne.n	80047ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a2f      	ldr	r2, [pc, #188]	; (80048ac <TIM_Base_SetConfig+0x114>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d02b      	beq.n	800484a <TIM_Base_SetConfig+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f8:	d027      	beq.n	800484a <TIM_Base_SetConfig+0xb2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a2c      	ldr	r2, [pc, #176]	; (80048b0 <TIM_Base_SetConfig+0x118>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d023      	beq.n	800484a <TIM_Base_SetConfig+0xb2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a2b      	ldr	r2, [pc, #172]	; (80048b4 <TIM_Base_SetConfig+0x11c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d01f      	beq.n	800484a <TIM_Base_SetConfig+0xb2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a2a      	ldr	r2, [pc, #168]	; (80048b8 <TIM_Base_SetConfig+0x120>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d01b      	beq.n	800484a <TIM_Base_SetConfig+0xb2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a29      	ldr	r2, [pc, #164]	; (80048bc <TIM_Base_SetConfig+0x124>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d017      	beq.n	800484a <TIM_Base_SetConfig+0xb2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a28      	ldr	r2, [pc, #160]	; (80048c0 <TIM_Base_SetConfig+0x128>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <TIM_Base_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a27      	ldr	r2, [pc, #156]	; (80048c4 <TIM_Base_SetConfig+0x12c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00f      	beq.n	800484a <TIM_Base_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <TIM_Base_SetConfig+0x130>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00b      	beq.n	800484a <TIM_Base_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a25      	ldr	r2, [pc, #148]	; (80048cc <TIM_Base_SetConfig+0x134>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d007      	beq.n	800484a <TIM_Base_SetConfig+0xb2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a24      	ldr	r2, [pc, #144]	; (80048d0 <TIM_Base_SetConfig+0x138>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d003      	beq.n	800484a <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a23      	ldr	r2, [pc, #140]	; (80048d4 <TIM_Base_SetConfig+0x13c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d108      	bne.n	800485c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <TIM_Base_SetConfig+0x114>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d003      	beq.n	8004890 <TIM_Base_SetConfig+0xf8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a0c      	ldr	r2, [pc, #48]	; (80048bc <TIM_Base_SetConfig+0x124>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d103      	bne.n	8004898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	615a      	str	r2, [r3, #20]
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40010000 	.word	0x40010000
 80048b0:	40000400 	.word	0x40000400
 80048b4:	40000800 	.word	0x40000800
 80048b8:	40000c00 	.word	0x40000c00
 80048bc:	40010400 	.word	0x40010400
 80048c0:	40014000 	.word	0x40014000
 80048c4:	40014400 	.word	0x40014400
 80048c8:	40014800 	.word	0x40014800
 80048cc:	40001800 	.word	0x40001800
 80048d0:	40001c00 	.word	0x40001c00
 80048d4:	40002000 	.word	0x40002000

080048d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f023 0201 	bic.w	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0303 	bic.w	r3, r3, #3
 800490e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f023 0302 	bic.w	r3, r3, #2
 8004920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a20      	ldr	r2, [pc, #128]	; (80049b0 <TIM_OC1_SetConfig+0xd8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d003      	beq.n	800493c <TIM_OC1_SetConfig+0x64>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a1f      	ldr	r2, [pc, #124]	; (80049b4 <TIM_OC1_SetConfig+0xdc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d10c      	bne.n	8004956 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f023 0308 	bic.w	r3, r3, #8
 8004942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f023 0304 	bic.w	r3, r3, #4
 8004954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <TIM_OC1_SetConfig+0xd8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d003      	beq.n	8004966 <TIM_OC1_SetConfig+0x8e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a14      	ldr	r2, [pc, #80]	; (80049b4 <TIM_OC1_SetConfig+0xdc>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d111      	bne.n	800498a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800496c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4313      	orrs	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	621a      	str	r2, [r3, #32]
}
 80049a4:	bf00      	nop
 80049a6:	371c      	adds	r7, #28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40010400 	.word	0x40010400

080049b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 0210 	bic.w	r2, r3, #16
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f023 0320 	bic.w	r3, r3, #32
 8004a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a22      	ldr	r2, [pc, #136]	; (8004a9c <TIM_OC2_SetConfig+0xe4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_OC2_SetConfig+0x68>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a21      	ldr	r2, [pc, #132]	; (8004aa0 <TIM_OC2_SetConfig+0xe8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d10d      	bne.n	8004a3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <TIM_OC2_SetConfig+0xe4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_OC2_SetConfig+0x94>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a16      	ldr	r2, [pc, #88]	; (8004aa0 <TIM_OC2_SetConfig+0xe8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d113      	bne.n	8004a74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40010400 	.word	0x40010400

08004aa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0303 	bic.w	r3, r3, #3
 8004ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a21      	ldr	r2, [pc, #132]	; (8004b84 <TIM_OC3_SetConfig+0xe0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d003      	beq.n	8004b0a <TIM_OC3_SetConfig+0x66>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a20      	ldr	r2, [pc, #128]	; (8004b88 <TIM_OC3_SetConfig+0xe4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d10d      	bne.n	8004b26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a16      	ldr	r2, [pc, #88]	; (8004b84 <TIM_OC3_SetConfig+0xe0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_OC3_SetConfig+0x92>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a15      	ldr	r2, [pc, #84]	; (8004b88 <TIM_OC3_SetConfig+0xe4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d113      	bne.n	8004b5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	621a      	str	r2, [r3, #32]
}
 8004b78:	bf00      	nop
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	40010000 	.word	0x40010000
 8004b88:	40010400 	.word	0x40010400

08004b8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	021b      	lsls	r3, r3, #8
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	031b      	lsls	r3, r3, #12
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a12      	ldr	r2, [pc, #72]	; (8004c30 <TIM_OC4_SetConfig+0xa4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d003      	beq.n	8004bf4 <TIM_OC4_SetConfig+0x68>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a11      	ldr	r2, [pc, #68]	; (8004c34 <TIM_OC4_SetConfig+0xa8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d109      	bne.n	8004c08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	019b      	lsls	r3, r3, #6
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	621a      	str	r2, [r3, #32]
}
 8004c22:	bf00      	nop
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40010000 	.word	0x40010000
 8004c34:	40010400 	.word	0x40010400

08004c38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f023 0201 	bic.w	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4a28      	ldr	r2, [pc, #160]	; (8004d04 <TIM_TI1_SetConfig+0xcc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d01b      	beq.n	8004c9e <TIM_TI1_SetConfig+0x66>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6c:	d017      	beq.n	8004c9e <TIM_TI1_SetConfig+0x66>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4a25      	ldr	r2, [pc, #148]	; (8004d08 <TIM_TI1_SetConfig+0xd0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <TIM_TI1_SetConfig+0x66>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <TIM_TI1_SetConfig+0xd4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00f      	beq.n	8004c9e <TIM_TI1_SetConfig+0x66>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4a23      	ldr	r2, [pc, #140]	; (8004d10 <TIM_TI1_SetConfig+0xd8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00b      	beq.n	8004c9e <TIM_TI1_SetConfig+0x66>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a22      	ldr	r2, [pc, #136]	; (8004d14 <TIM_TI1_SetConfig+0xdc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d007      	beq.n	8004c9e <TIM_TI1_SetConfig+0x66>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a21      	ldr	r2, [pc, #132]	; (8004d18 <TIM_TI1_SetConfig+0xe0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d003      	beq.n	8004c9e <TIM_TI1_SetConfig+0x66>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a20      	ldr	r2, [pc, #128]	; (8004d1c <TIM_TI1_SetConfig+0xe4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d101      	bne.n	8004ca2 <TIM_TI1_SetConfig+0x6a>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <TIM_TI1_SetConfig+0x6c>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f023 0303 	bic.w	r3, r3, #3
 8004cae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	e003      	b.n	8004cc2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f023 030a 	bic.w	r3, r3, #10
 8004cdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f003 030a 	and.w	r3, r3, #10
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	621a      	str	r2, [r3, #32]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40000c00 	.word	0x40000c00
 8004d14:	40010400 	.word	0x40010400
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40001800 	.word	0x40001800

08004d20 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	f023 0210 	bic.w	r2, r3, #16
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	031b      	lsls	r3, r3, #12
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	621a      	str	r2, [r3, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b087      	sub	sp, #28
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	607a      	str	r2, [r7, #4]
 8004da6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004dea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b087      	sub	sp, #28
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e3e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	031b      	lsls	r3, r3, #12
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004e64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	031b      	lsls	r3, r3, #12
 8004e6a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	621a      	str	r2, [r3, #32]
}
 8004e80:	bf00      	nop
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	401a      	ands	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a1a      	ldr	r2, [r3, #32]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e05a      	b.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a21      	ldr	r2, [pc, #132]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d022      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3c:	d01d      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1d      	ldr	r2, [pc, #116]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d018      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1a      	ldr	r2, [pc, #104]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00e      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a18      	ldr	r2, [pc, #96]	; (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d009      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a17      	ldr	r2, [pc, #92]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d004      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d10c      	bne.n	8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40010000 	.word	0x40010000
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40000800 	.word	0x40000800
 8004fc0:	40000c00 	.word	0x40000c00
 8004fc4:	40010400 	.word	0x40010400
 8004fc8:	40014000 	.word	0x40014000
 8004fcc:	40001800 	.word	0x40001800

08004fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e03f      	b.n	800508a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fc fe16 	bl	8001c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2224      	movs	r2, #36	; 0x24
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800503a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fcdf 	bl	8005a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695a      	ldr	r2, [r3, #20]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	4613      	mov	r3, r2
 800509e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d11d      	bne.n	80050e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <HAL_UART_Receive_IT+0x26>
 80050b2:	88fb      	ldrh	r3, [r7, #6]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e016      	b.n	80050ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Receive_IT+0x38>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e00f      	b.n	80050ea <HAL_UART_Receive_IT+0x58>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	461a      	mov	r2, r3
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 fab6 	bl	8005650 <UART_Start_Receive_IT>
 80050e4:	4603      	mov	r3, r0
 80050e6:	e000      	b.n	80050ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80050e8:	2302      	movs	r3, #2
  }
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b0ba      	sub	sp, #232	; 0xe8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800511a:	2300      	movs	r3, #0
 800511c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10f      	bne.n	800515a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800513a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_UART_IRQHandler+0x66>
 8005146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fb99 	bl	800588a <UART_Receive_IT>
      return;
 8005158:	e257      	b.n	800560a <HAL_UART_IRQHandler+0x516>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800515a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 80de 	beq.w	8005320 <HAL_UART_IRQHandler+0x22c>
 8005164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005174:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 80d1 	beq.w	8005320 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800517e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <HAL_UART_IRQHandler+0xae>
 800518a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800518e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f043 0201 	orr.w	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <HAL_UART_IRQHandler+0xd2>
 80051ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f043 0202 	orr.w	r2, r3, #2
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <HAL_UART_IRQHandler+0xf6>
 80051d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d005      	beq.n	80051ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f043 0204 	orr.w	r2, r3, #4
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d011      	beq.n	800521a <HAL_UART_IRQHandler+0x126>
 80051f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d105      	bne.n	800520e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f043 0208 	orr.w	r2, r3, #8
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 81ee 	beq.w	8005600 <HAL_UART_IRQHandler+0x50c>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_UART_IRQHandler+0x14e>
 8005230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fb24 	bl	800588a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <HAL_UART_IRQHandler+0x17a>
 8005266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800526a:	2b00      	cmp	r3, #0
 800526c:	d04f      	beq.n	800530e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa2c 	bl	80056cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	d141      	bne.n	8005306 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3314      	adds	r3, #20
 8005288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800529c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1d9      	bne.n	8005282 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d013      	beq.n	80052fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	4a7d      	ldr	r2, [pc, #500]	; (80054d0 <HAL_UART_IRQHandler+0x3dc>)
 80052dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fd f874 	bl	80023d0 <HAL_DMA_Abort_IT>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d016      	beq.n	800531c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052f8:	4610      	mov	r0, r2
 80052fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052fc:	e00e      	b.n	800531c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f990 	bl	8005624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005304:	e00a      	b.n	800531c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f98c 	bl	8005624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530c:	e006      	b.n	800531c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f988 	bl	8005624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800531a:	e171      	b.n	8005600 <HAL_UART_IRQHandler+0x50c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531c:	bf00      	nop
    return;
 800531e:	e16f      	b.n	8005600 <HAL_UART_IRQHandler+0x50c>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	2b01      	cmp	r3, #1
 8005326:	f040 814a 	bne.w	80055be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800532a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532e:	f003 0310 	and.w	r3, r3, #16
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 8143 	beq.w	80055be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 813c 	beq.w	80055be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005346:	2300      	movs	r3, #0
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	f040 80b4 	bne.w	80054d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005378:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 8141 	beq.w	8005604 <HAL_UART_IRQHandler+0x510>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800538a:	429a      	cmp	r2, r3
 800538c:	f080 813a 	bcs.w	8005604 <HAL_UART_IRQHandler+0x510>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005396:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a2:	f000 8088 	beq.w	80054b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80053d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1d9      	bne.n	80053a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3314      	adds	r3, #20
 80053f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3314      	adds	r3, #20
 8005412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005416:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800541a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800541e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e1      	bne.n	80053f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3314      	adds	r3, #20
 8005434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800543e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3314      	adds	r3, #20
 800544e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005452:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e3      	bne.n	800542e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	330c      	adds	r3, #12
 800547a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547e:	e853 3f00 	ldrex	r3, [r3]
 8005482:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005486:	f023 0310 	bic.w	r3, r3, #16
 800548a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	330c      	adds	r3, #12
 8005494:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005498:	65ba      	str	r2, [r7, #88]	; 0x58
 800549a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800549e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054a0:	e841 2300 	strex	r3, r2, [r1]
 80054a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e3      	bne.n	8005474 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fc ff1d 	bl	80022f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054be:	b29b      	uxth	r3, r3
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f8b6 	bl	8005638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054cc:	e09a      	b.n	8005604 <HAL_UART_IRQHandler+0x510>
 80054ce:	bf00      	nop
 80054d0:	08005793 	.word	0x08005793
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054dc:	b29b      	uxth	r3, r3
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 808c 	beq.w	8005608 <HAL_UART_IRQHandler+0x514>
          && (nb_rx_data > 0U))
 80054f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 8087 	beq.w	8005608 <HAL_UART_IRQHandler+0x514>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	330c      	adds	r3, #12
 8005500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800550a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800551e:	647a      	str	r2, [r7, #68]	; 0x44
 8005520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800552c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e3      	bne.n	80054fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3314      	adds	r3, #20
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	623b      	str	r3, [r7, #32]
   return(result);
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	f023 0301 	bic.w	r3, r3, #1
 8005548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3314      	adds	r3, #20
 8005552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005556:	633a      	str	r2, [r7, #48]	; 0x30
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800555c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e3      	bne.n	8005532 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	330c      	adds	r3, #12
 800557e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	60fb      	str	r3, [r7, #12]
   return(result);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0310 	bic.w	r3, r3, #16
 800558e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	330c      	adds	r3, #12
 8005598:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800559c:	61fa      	str	r2, [r7, #28]
 800559e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	69b9      	ldr	r1, [r7, #24]
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	e841 2300 	strex	r3, r2, [r1]
 80055a8:	617b      	str	r3, [r7, #20]
   return(result);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1e3      	bne.n	8005578 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f83e 	bl	8005638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055bc:	e024      	b.n	8005608 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d009      	beq.n	80055de <HAL_UART_IRQHandler+0x4ea>
 80055ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f8ef 	bl	80057ba <UART_Transmit_IT>
    return;
 80055dc:	e015      	b.n	800560a <HAL_UART_IRQHandler+0x516>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00f      	beq.n	800560a <HAL_UART_IRQHandler+0x516>
 80055ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <HAL_UART_IRQHandler+0x516>
  {
    UART_EndTransmit_IT(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f92f 	bl	800585a <UART_EndTransmit_IT>
    return;
 80055fc:	bf00      	nop
 80055fe:	e004      	b.n	800560a <HAL_UART_IRQHandler+0x516>
    return;
 8005600:	bf00      	nop
 8005602:	e002      	b.n	800560a <HAL_UART_IRQHandler+0x516>
      return;
 8005604:	bf00      	nop
 8005606:	e000      	b.n	800560a <HAL_UART_IRQHandler+0x516>
      return;
 8005608:	bf00      	nop
  }
}
 800560a:	37e8      	adds	r7, #232	; 0xe8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	4613      	mov	r3, r2
 800565c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	88fa      	ldrh	r2, [r7, #6]
 8005668:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	88fa      	ldrh	r2, [r7, #6]
 800566e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2222      	movs	r2, #34	; 0x22
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800569c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695a      	ldr	r2, [r3, #20]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0201 	orr.w	r2, r2, #1
 80056ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0220 	orr.w	r2, r2, #32
 80056bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b095      	sub	sp, #84	; 0x54
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	330c      	adds	r3, #12
 80056da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056f4:	643a      	str	r2, [r7, #64]	; 0x40
 80056f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e5      	bne.n	80056d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3314      	adds	r3, #20
 800570e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	61fb      	str	r3, [r7, #28]
   return(result);
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	f023 0301 	bic.w	r3, r3, #1
 800571e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3314      	adds	r3, #20
 8005726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005728:	62fa      	str	r2, [r7, #44]	; 0x2c
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800572e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e5      	bne.n	8005708 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	2b01      	cmp	r3, #1
 8005742:	d119      	bne.n	8005778 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	330c      	adds	r3, #12
 800574a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	60bb      	str	r3, [r7, #8]
   return(result);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f023 0310 	bic.w	r3, r3, #16
 800575a:	647b      	str	r3, [r7, #68]	; 0x44
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	330c      	adds	r3, #12
 8005762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005764:	61ba      	str	r2, [r7, #24]
 8005766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6979      	ldr	r1, [r7, #20]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	613b      	str	r3, [r7, #16]
   return(result);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e5      	bne.n	8005744 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005786:	bf00      	nop
 8005788:	3754      	adds	r7, #84	; 0x54
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f7ff ff39 	bl	8005624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057b2:	bf00      	nop
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b085      	sub	sp, #20
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b21      	cmp	r3, #33	; 0x21
 80057cc:	d13e      	bne.n	800584c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d6:	d114      	bne.n	8005802 <UART_Transmit_IT+0x48>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d110      	bne.n	8005802 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	1c9a      	adds	r2, r3, #2
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	621a      	str	r2, [r3, #32]
 8005800:	e008      	b.n	8005814 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	1c59      	adds	r1, r3, #1
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6211      	str	r1, [r2, #32]
 800580c:	781a      	ldrb	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29b      	uxth	r3, r3
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4619      	mov	r1, r3
 8005822:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10f      	bne.n	8005848 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005836:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005846:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005848:	2300      	movs	r3, #0
 800584a:	e000      	b.n	800584e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800584c:	2302      	movs	r3, #2
  }
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005870:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff fec8 	bl	8005610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b08c      	sub	sp, #48	; 0x30
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b22      	cmp	r3, #34	; 0x22
 800589c:	f040 80ab 	bne.w	80059f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a8:	d117      	bne.n	80058da <UART_Receive_IT+0x50>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d113      	bne.n	80058da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	1c9a      	adds	r2, r3, #2
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	629a      	str	r2, [r3, #40]	; 0x28
 80058d8:	e026      	b.n	8005928 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ec:	d007      	beq.n	80058fe <UART_Receive_IT+0x74>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10a      	bne.n	800590c <UART_Receive_IT+0x82>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	b2da      	uxtb	r2, r3
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	e008      	b.n	800591e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005918:	b2da      	uxtb	r2, r3
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29b      	uxth	r3, r3
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	4619      	mov	r1, r3
 8005936:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005938:	2b00      	cmp	r3, #0
 800593a:	d15a      	bne.n	80059f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0220 	bic.w	r2, r2, #32
 800594a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800595a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695a      	ldr	r2, [r3, #20]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0201 	bic.w	r2, r2, #1
 800596a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	2b01      	cmp	r3, #1
 800597a:	d135      	bne.n	80059e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	613b      	str	r3, [r7, #16]
   return(result);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f023 0310 	bic.w	r3, r3, #16
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	330c      	adds	r3, #12
 80059a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a2:	623a      	str	r2, [r7, #32]
 80059a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	69f9      	ldr	r1, [r7, #28]
 80059a8:	6a3a      	ldr	r2, [r7, #32]
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e5      	bne.n	8005982 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b10      	cmp	r3, #16
 80059c2:	d10a      	bne.n	80059da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff fe29 	bl	8005638 <HAL_UARTEx_RxEventCallback>
 80059e6:	e002      	b.n	80059ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7fb fee1 	bl	80017b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	e002      	b.n	80059f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e000      	b.n	80059f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80059f6:	2302      	movs	r3, #2
  }
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3730      	adds	r7, #48	; 0x30
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005a42:	f023 030c 	bic.w	r3, r3, #12
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	68b9      	ldr	r1, [r7, #8]
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4ad0      	ldr	r2, [pc, #832]	; (8005dac <UART_SetConfig+0x3ac>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d004      	beq.n	8005a7a <UART_SetConfig+0x7a>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4ace      	ldr	r2, [pc, #824]	; (8005db0 <UART_SetConfig+0x3b0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d103      	bne.n	8005a82 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a7a:	f7fd fd4d 	bl	8003518 <HAL_RCC_GetPCLK2Freq>
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	e002      	b.n	8005a88 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a82:	f7fd fd35 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8005a86:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a90:	f040 80ba 	bne.w	8005c08 <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	461d      	mov	r5, r3
 8005a98:	f04f 0600 	mov.w	r6, #0
 8005a9c:	46a8      	mov	r8, r5
 8005a9e:	46b1      	mov	r9, r6
 8005aa0:	eb18 0308 	adds.w	r3, r8, r8
 8005aa4:	eb49 0409 	adc.w	r4, r9, r9
 8005aa8:	4698      	mov	r8, r3
 8005aaa:	46a1      	mov	r9, r4
 8005aac:	eb18 0805 	adds.w	r8, r8, r5
 8005ab0:	eb49 0906 	adc.w	r9, r9, r6
 8005ab4:	f04f 0100 	mov.w	r1, #0
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ac0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ac4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ac8:	4688      	mov	r8, r1
 8005aca:	4691      	mov	r9, r2
 8005acc:	eb18 0005 	adds.w	r0, r8, r5
 8005ad0:	eb49 0106 	adc.w	r1, r9, r6
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	461d      	mov	r5, r3
 8005ada:	f04f 0600 	mov.w	r6, #0
 8005ade:	196b      	adds	r3, r5, r5
 8005ae0:	eb46 0406 	adc.w	r4, r6, r6
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	f7fb f81a 	bl	8000b20 <__aeabi_uldivmod>
 8005aec:	4603      	mov	r3, r0
 8005aee:	460c      	mov	r4, r1
 8005af0:	461a      	mov	r2, r3
 8005af2:	4bb0      	ldr	r3, [pc, #704]	; (8005db4 <UART_SetConfig+0x3b4>)
 8005af4:	fba3 2302 	umull	r2, r3, r3, r2
 8005af8:	095b      	lsrs	r3, r3, #5
 8005afa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	461d      	mov	r5, r3
 8005b02:	f04f 0600 	mov.w	r6, #0
 8005b06:	46a9      	mov	r9, r5
 8005b08:	46b2      	mov	sl, r6
 8005b0a:	eb19 0309 	adds.w	r3, r9, r9
 8005b0e:	eb4a 040a 	adc.w	r4, sl, sl
 8005b12:	4699      	mov	r9, r3
 8005b14:	46a2      	mov	sl, r4
 8005b16:	eb19 0905 	adds.w	r9, r9, r5
 8005b1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b1e:	f04f 0100 	mov.w	r1, #0
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b32:	4689      	mov	r9, r1
 8005b34:	4692      	mov	sl, r2
 8005b36:	eb19 0005 	adds.w	r0, r9, r5
 8005b3a:	eb4a 0106 	adc.w	r1, sl, r6
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	461d      	mov	r5, r3
 8005b44:	f04f 0600 	mov.w	r6, #0
 8005b48:	196b      	adds	r3, r5, r5
 8005b4a:	eb46 0406 	adc.w	r4, r6, r6
 8005b4e:	461a      	mov	r2, r3
 8005b50:	4623      	mov	r3, r4
 8005b52:	f7fa ffe5 	bl	8000b20 <__aeabi_uldivmod>
 8005b56:	4603      	mov	r3, r0
 8005b58:	460c      	mov	r4, r1
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	4b95      	ldr	r3, [pc, #596]	; (8005db4 <UART_SetConfig+0x3b4>)
 8005b5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	2164      	movs	r1, #100	; 0x64
 8005b66:	fb01 f303 	mul.w	r3, r1, r3
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	3332      	adds	r3, #50	; 0x32
 8005b70:	4a90      	ldr	r2, [pc, #576]	; (8005db4 <UART_SetConfig+0x3b4>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b7e:	4498      	add	r8, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	461d      	mov	r5, r3
 8005b84:	f04f 0600 	mov.w	r6, #0
 8005b88:	46a9      	mov	r9, r5
 8005b8a:	46b2      	mov	sl, r6
 8005b8c:	eb19 0309 	adds.w	r3, r9, r9
 8005b90:	eb4a 040a 	adc.w	r4, sl, sl
 8005b94:	4699      	mov	r9, r3
 8005b96:	46a2      	mov	sl, r4
 8005b98:	eb19 0905 	adds.w	r9, r9, r5
 8005b9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ba0:	f04f 0100 	mov.w	r1, #0
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bb4:	4689      	mov	r9, r1
 8005bb6:	4692      	mov	sl, r2
 8005bb8:	eb19 0005 	adds.w	r0, r9, r5
 8005bbc:	eb4a 0106 	adc.w	r1, sl, r6
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	461d      	mov	r5, r3
 8005bc6:	f04f 0600 	mov.w	r6, #0
 8005bca:	196b      	adds	r3, r5, r5
 8005bcc:	eb46 0406 	adc.w	r4, r6, r6
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4623      	mov	r3, r4
 8005bd4:	f7fa ffa4 	bl	8000b20 <__aeabi_uldivmod>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	461a      	mov	r2, r3
 8005bde:	4b75      	ldr	r3, [pc, #468]	; (8005db4 <UART_SetConfig+0x3b4>)
 8005be0:	fba3 1302 	umull	r1, r3, r3, r2
 8005be4:	095b      	lsrs	r3, r3, #5
 8005be6:	2164      	movs	r1, #100	; 0x64
 8005be8:	fb01 f303 	mul.w	r3, r1, r3
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	3332      	adds	r3, #50	; 0x32
 8005bf2:	4a70      	ldr	r2, [pc, #448]	; (8005db4 <UART_SetConfig+0x3b4>)
 8005bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf8:	095b      	lsrs	r3, r3, #5
 8005bfa:	f003 0207 	and.w	r2, r3, #7
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4442      	add	r2, r8
 8005c04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c06:	e0cc      	b.n	8005da2 <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	469a      	mov	sl, r3
 8005c0c:	f04f 0b00 	mov.w	fp, #0
 8005c10:	46d0      	mov	r8, sl
 8005c12:	46d9      	mov	r9, fp
 8005c14:	eb18 0308 	adds.w	r3, r8, r8
 8005c18:	eb49 0409 	adc.w	r4, r9, r9
 8005c1c:	4698      	mov	r8, r3
 8005c1e:	46a1      	mov	r9, r4
 8005c20:	eb18 080a 	adds.w	r8, r8, sl
 8005c24:	eb49 090b 	adc.w	r9, r9, fp
 8005c28:	f04f 0100 	mov.w	r1, #0
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c3c:	4688      	mov	r8, r1
 8005c3e:	4691      	mov	r9, r2
 8005c40:	eb1a 0508 	adds.w	r5, sl, r8
 8005c44:	eb4b 0609 	adc.w	r6, fp, r9
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	f04f 0400 	mov.w	r4, #0
 8005c5a:	0094      	lsls	r4, r2, #2
 8005c5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c60:	008b      	lsls	r3, r1, #2
 8005c62:	461a      	mov	r2, r3
 8005c64:	4623      	mov	r3, r4
 8005c66:	4628      	mov	r0, r5
 8005c68:	4631      	mov	r1, r6
 8005c6a:	f7fa ff59 	bl	8000b20 <__aeabi_uldivmod>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	460c      	mov	r4, r1
 8005c72:	461a      	mov	r2, r3
 8005c74:	4b4f      	ldr	r3, [pc, #316]	; (8005db4 <UART_SetConfig+0x3b4>)
 8005c76:	fba3 2302 	umull	r2, r3, r3, r2
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	469b      	mov	fp, r3
 8005c84:	f04f 0c00 	mov.w	ip, #0
 8005c88:	46d9      	mov	r9, fp
 8005c8a:	46e2      	mov	sl, ip
 8005c8c:	eb19 0309 	adds.w	r3, r9, r9
 8005c90:	eb4a 040a 	adc.w	r4, sl, sl
 8005c94:	4699      	mov	r9, r3
 8005c96:	46a2      	mov	sl, r4
 8005c98:	eb19 090b 	adds.w	r9, r9, fp
 8005c9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ca0:	f04f 0100 	mov.w	r1, #0
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cb4:	4689      	mov	r9, r1
 8005cb6:	4692      	mov	sl, r2
 8005cb8:	eb1b 0509 	adds.w	r5, fp, r9
 8005cbc:	eb4c 060a 	adc.w	r6, ip, sl
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	f04f 0400 	mov.w	r4, #0
 8005cd2:	0094      	lsls	r4, r2, #2
 8005cd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cd8:	008b      	lsls	r3, r1, #2
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4623      	mov	r3, r4
 8005cde:	4628      	mov	r0, r5
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	f7fa ff1d 	bl	8000b20 <__aeabi_uldivmod>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	460c      	mov	r4, r1
 8005cea:	461a      	mov	r2, r3
 8005cec:	4b31      	ldr	r3, [pc, #196]	; (8005db4 <UART_SetConfig+0x3b4>)
 8005cee:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	2164      	movs	r1, #100	; 0x64
 8005cf6:	fb01 f303 	mul.w	r3, r1, r3
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	3332      	adds	r3, #50	; 0x32
 8005d00:	4a2c      	ldr	r2, [pc, #176]	; (8005db4 <UART_SetConfig+0x3b4>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d0c:	4498      	add	r8, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	469b      	mov	fp, r3
 8005d12:	f04f 0c00 	mov.w	ip, #0
 8005d16:	46d9      	mov	r9, fp
 8005d18:	46e2      	mov	sl, ip
 8005d1a:	eb19 0309 	adds.w	r3, r9, r9
 8005d1e:	eb4a 040a 	adc.w	r4, sl, sl
 8005d22:	4699      	mov	r9, r3
 8005d24:	46a2      	mov	sl, r4
 8005d26:	eb19 090b 	adds.w	r9, r9, fp
 8005d2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d2e:	f04f 0100 	mov.w	r1, #0
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d42:	4689      	mov	r9, r1
 8005d44:	4692      	mov	sl, r2
 8005d46:	eb1b 0509 	adds.w	r5, fp, r9
 8005d4a:	eb4c 060a 	adc.w	r6, ip, sl
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4619      	mov	r1, r3
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	f04f 0400 	mov.w	r4, #0
 8005d60:	0094      	lsls	r4, r2, #2
 8005d62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d66:	008b      	lsls	r3, r1, #2
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4623      	mov	r3, r4
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	4631      	mov	r1, r6
 8005d70:	f7fa fed6 	bl	8000b20 <__aeabi_uldivmod>
 8005d74:	4603      	mov	r3, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4b0e      	ldr	r3, [pc, #56]	; (8005db4 <UART_SetConfig+0x3b4>)
 8005d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	2164      	movs	r1, #100	; 0x64
 8005d84:	fb01 f303 	mul.w	r3, r1, r3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	3332      	adds	r3, #50	; 0x32
 8005d8e:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <UART_SetConfig+0x3b4>)
 8005d90:	fba2 2303 	umull	r2, r3, r2, r3
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	f003 020f 	and.w	r2, r3, #15
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4442      	add	r2, r8
 8005da0:	609a      	str	r2, [r3, #8]
}
 8005da2:	bf00      	nop
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dac:	40011000 	.word	0x40011000
 8005db0:	40011400 	.word	0x40011400
 8005db4:	51eb851f 	.word	0x51eb851f

08005db8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08a      	sub	sp, #40	; 0x28
 8005dbc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dc2:	4b7f      	ldr	r3, [pc, #508]	; (8005fc0 <xTaskIncrementTick+0x208>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f040 80ef 	bne.w	8005faa <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005dcc:	4b7d      	ldr	r3, [pc, #500]	; (8005fc4 <xTaskIncrementTick+0x20c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005dd4:	4a7b      	ldr	r2, [pc, #492]	; (8005fc4 <xTaskIncrementTick+0x20c>)
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d11f      	bne.n	8005e20 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8005de0:	4b79      	ldr	r3, [pc, #484]	; (8005fc8 <xTaskIncrementTick+0x210>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <xTaskIncrementTick+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	607b      	str	r3, [r7, #4]
 8005dfc:	e7fe      	b.n	8005dfc <xTaskIncrementTick+0x44>
 8005dfe:	4b72      	ldr	r3, [pc, #456]	; (8005fc8 <xTaskIncrementTick+0x210>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	61fb      	str	r3, [r7, #28]
 8005e04:	4b71      	ldr	r3, [pc, #452]	; (8005fcc <xTaskIncrementTick+0x214>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a6f      	ldr	r2, [pc, #444]	; (8005fc8 <xTaskIncrementTick+0x210>)
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	4a6f      	ldr	r2, [pc, #444]	; (8005fcc <xTaskIncrementTick+0x214>)
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	4b6f      	ldr	r3, [pc, #444]	; (8005fd0 <xTaskIncrementTick+0x218>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3301      	adds	r3, #1
 8005e18:	4a6d      	ldr	r2, [pc, #436]	; (8005fd0 <xTaskIncrementTick+0x218>)
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	f000 f94e 	bl	80060bc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005e20:	4b6c      	ldr	r3, [pc, #432]	; (8005fd4 <xTaskIncrementTick+0x21c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6a3a      	ldr	r2, [r7, #32]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	f0c0 80aa 	bcc.w	8005f80 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e2c:	4b66      	ldr	r3, [pc, #408]	; (8005fc8 <xTaskIncrementTick+0x210>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d104      	bne.n	8005e40 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e36:	4b67      	ldr	r3, [pc, #412]	; (8005fd4 <xTaskIncrementTick+0x21c>)
 8005e38:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3c:	601a      	str	r2, [r3, #0]
                    break;
 8005e3e:	e09f      	b.n	8005f80 <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e40:	4b61      	ldr	r3, [pc, #388]	; (8005fc8 <xTaskIncrementTick+0x210>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005e50:	6a3a      	ldr	r2, [r7, #32]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d203      	bcs.n	8005e60 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005e58:	4a5e      	ldr	r2, [pc, #376]	; (8005fd4 <xTaskIncrementTick+0x21c>)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005e5e:	e08f      	b.n	8005f80 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	68d2      	ldr	r2, [r2, #12]
 8005e6e:	609a      	str	r2, [r3, #8]
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	6892      	ldr	r2, [r2, #8]
 8005e78:	605a      	str	r2, [r3, #4]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	3304      	adds	r3, #4
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d103      	bne.n	8005e8e <xTaskIncrementTick+0xd6>
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	605a      	str	r2, [r3, #4]
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	2200      	movs	r2, #0
 8005e92:	615a      	str	r2, [r3, #20]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	1e5a      	subs	r2, r3, #1
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d01e      	beq.n	8005ee4 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	6a12      	ldr	r2, [r2, #32]
 8005eb4:	609a      	str	r2, [r3, #8]
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	69d2      	ldr	r2, [r2, #28]
 8005ebe:	605a      	str	r2, [r3, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	3318      	adds	r3, #24
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d103      	bne.n	8005ed4 <xTaskIncrementTick+0x11c>
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	6a1a      	ldr	r2, [r3, #32]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	605a      	str	r2, [r3, #4]
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	1e5a      	subs	r2, r3, #1
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 ffc4 	bl	8006e74 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	409a      	lsls	r2, r3
 8005ef4:	4b38      	ldr	r3, [pc, #224]	; (8005fd8 <xTaskIncrementTick+0x220>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	4a37      	ldr	r2, [pc, #220]	; (8005fd8 <xTaskIncrementTick+0x220>)
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f02:	4936      	ldr	r1, [pc, #216]	; (8005fdc <xTaskIncrementTick+0x224>)
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	3304      	adds	r3, #4
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	609a      	str	r2, [r3, #8]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	3204      	adds	r2, #4
 8005f2a:	605a      	str	r2, [r3, #4]
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	1d1a      	adds	r2, r3, #4
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	609a      	str	r2, [r3, #8]
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4a26      	ldr	r2, [pc, #152]	; (8005fdc <xTaskIncrementTick+0x224>)
 8005f42:	441a      	add	r2, r3
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	615a      	str	r2, [r3, #20]
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4c:	4923      	ldr	r1, [pc, #140]	; (8005fdc <xTaskIncrementTick+0x224>)
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	1c59      	adds	r1, r3, #1
 8005f5c:	481f      	ldr	r0, [pc, #124]	; (8005fdc <xTaskIncrementTick+0x224>)
 8005f5e:	4613      	mov	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4403      	add	r3, r0
 8005f68:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	4b1c      	ldr	r3, [pc, #112]	; (8005fe0 <xTaskIncrementTick+0x228>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	429a      	cmp	r2, r3
 8005f76:	f67f af59 	bls.w	8005e2c <xTaskIncrementTick+0x74>
                        {
                            xSwitchRequired = pdTRUE;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f7e:	e755      	b.n	8005e2c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f80:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <xTaskIncrementTick+0x228>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f86:	4915      	ldr	r1, [pc, #84]	; (8005fdc <xTaskIncrementTick+0x224>)
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d901      	bls.n	8005f9c <xTaskIncrementTick+0x1e4>
            {
                xSwitchRequired = pdTRUE;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <xTaskIncrementTick+0x22c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d007      	beq.n	8005fb4 <xTaskIncrementTick+0x1fc>
            {
                xSwitchRequired = pdTRUE;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa8:	e004      	b.n	8005fb4 <xTaskIncrementTick+0x1fc>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005faa:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <xTaskIncrementTick+0x230>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	4a0d      	ldr	r2, [pc, #52]	; (8005fe8 <xTaskIncrementTick+0x230>)
 8005fb2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3728      	adds	r7, #40	; 0x28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	200002c0 	.word	0x200002c0
 8005fc4:	200002a4 	.word	0x200002a4
 8005fc8:	2000029c 	.word	0x2000029c
 8005fcc:	200002a0 	.word	0x200002a0
 8005fd0:	200002b4 	.word	0x200002b4
 8005fd4:	200002b8 	.word	0x200002b8
 8005fd8:	200002a8 	.word	0x200002a8
 8005fdc:	20000238 	.word	0x20000238
 8005fe0:	20000234 	.word	0x20000234
 8005fe4:	200002b0 	.word	0x200002b0
 8005fe8:	200002ac 	.word	0x200002ac

08005fec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ff2:	4b2c      	ldr	r3, [pc, #176]	; (80060a4 <vTaskSwitchContext+0xb8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005ffa:	4b2b      	ldr	r3, [pc, #172]	; (80060a8 <vTaskSwitchContext+0xbc>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006000:	e04c      	b.n	800609c <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 8006002:	4b29      	ldr	r3, [pc, #164]	; (80060a8 <vTaskSwitchContext+0xbc>)
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006008:	4b28      	ldr	r3, [pc, #160]	; (80060ac <vTaskSwitchContext+0xc0>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	fab3 f383 	clz	r3, r3
 8006014:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006016:	7afb      	ldrb	r3, [r7, #11]
 8006018:	f1c3 031f 	rsb	r3, r3, #31
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	4924      	ldr	r1, [pc, #144]	; (80060b0 <vTaskSwitchContext+0xc4>)
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	440b      	add	r3, r1
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d109      	bne.n	8006046 <vTaskSwitchContext+0x5a>
        __asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	607b      	str	r3, [r7, #4]
 8006044:	e7fe      	b.n	8006044 <vTaskSwitchContext+0x58>
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4613      	mov	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4a17      	ldr	r2, [pc, #92]	; (80060b0 <vTaskSwitchContext+0xc4>)
 8006052:	4413      	add	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	605a      	str	r2, [r3, #4]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	3308      	adds	r3, #8
 8006068:	429a      	cmp	r2, r3
 800606a:	d104      	bne.n	8006076 <vTaskSwitchContext+0x8a>
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	605a      	str	r2, [r3, #4]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	4a0d      	ldr	r2, [pc, #52]	; (80060b4 <vTaskSwitchContext+0xc8>)
 800607e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8006080:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <vTaskSwitchContext+0xc8>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <vTaskSwitchContext+0xcc>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d102      	bne.n	8006092 <vTaskSwitchContext+0xa6>
 800608c:	f000 fe94 	bl	8006db8 <SEGGER_SYSVIEW_OnIdle>
}
 8006090:	e004      	b.n	800609c <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8006092:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <vTaskSwitchContext+0xc8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f000 feaa 	bl	8006df0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800609c:	bf00      	nop
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	200002c0 	.word	0x200002c0
 80060a8:	200002b0 	.word	0x200002b0
 80060ac:	200002a8 	.word	0x200002a8
 80060b0:	20000238 	.word	0x20000238
 80060b4:	20000234 	.word	0x20000234
 80060b8:	200002bc 	.word	0x200002bc

080060bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <prvResetNextTaskUnblockTime+0x30>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80060ca:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <prvResetNextTaskUnblockTime+0x34>)
 80060cc:	f04f 32ff 	mov.w	r2, #4294967295
 80060d0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80060d2:	e005      	b.n	80060e0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <prvResetNextTaskUnblockTime+0x30>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a04      	ldr	r2, [pc, #16]	; (80060f0 <prvResetNextTaskUnblockTime+0x34>)
 80060de:	6013      	str	r3, [r2, #0]
}
 80060e0:	bf00      	nop
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	2000029c 	.word	0x2000029c
 80060f0:	200002b8 	.word	0x200002b8
	...

08006100 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006100:	4b07      	ldr	r3, [pc, #28]	; (8006120 <pxCurrentTCBConst2>)
 8006102:	6819      	ldr	r1, [r3, #0]
 8006104:	6808      	ldr	r0, [r1, #0]
 8006106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610a:	f380 8809 	msr	PSP, r0
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f04f 0000 	mov.w	r0, #0
 8006116:	f380 8811 	msr	BASEPRI, r0
 800611a:	4770      	bx	lr
 800611c:	f3af 8000 	nop.w

08006120 <pxCurrentTCBConst2>:
 8006120:	20000234 	.word	0x20000234
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
	...

08006130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006130:	f3ef 8009 	mrs	r0, PSP
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	4b15      	ldr	r3, [pc, #84]	; (8006190 <pxCurrentTCBConst>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	f01e 0f10 	tst.w	lr, #16
 8006140:	bf08      	it	eq
 8006142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614a:	6010      	str	r0, [r2, #0]
 800614c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006154:	f380 8811 	msr	BASEPRI, r0
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f7ff ff44 	bl	8005fec <vTaskSwitchContext>
 8006164:	f04f 0000 	mov.w	r0, #0
 8006168:	f380 8811 	msr	BASEPRI, r0
 800616c:	bc09      	pop	{r0, r3}
 800616e:	6819      	ldr	r1, [r3, #0]
 8006170:	6808      	ldr	r0, [r1, #0]
 8006172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006176:	f01e 0f10 	tst.w	lr, #16
 800617a:	bf08      	it	eq
 800617c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006180:	f380 8809 	msr	PSP, r0
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	f3af 8000 	nop.w

08006190 <pxCurrentTCBConst>:
 8006190:	20000234 	.word	0x20000234
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop

08006198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80061b0:	f000 fd88 	bl	8006cc4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80061b4:	f7ff fe00 	bl	8005db8 <xTaskIncrementTick>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d006      	beq.n	80061cc <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80061be:	f000 fddf 	bl	8006d80 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061c2:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <SysTick_Handler+0x4c>)
 80061c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e001      	b.n	80061d0 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 80061cc:	f000 fdbc 	bl	8006d48 <SEGGER_SYSVIEW_RecordExitISR>
 80061d0:	2300      	movs	r3, #0
 80061d2:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	e000ed04 	.word	0xe000ed04

080061e8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80061ee:	4b24      	ldr	r3, [pc, #144]	; (8006280 <_DoInit+0x98>)
 80061f0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2203      	movs	r2, #3
 80061f6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2203      	movs	r2, #3
 80061fc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a20      	ldr	r2, [pc, #128]	; (8006284 <_DoInit+0x9c>)
 8006202:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a20      	ldr	r2, [pc, #128]	; (8006288 <_DoInit+0xa0>)
 8006208:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006210:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a17      	ldr	r2, [pc, #92]	; (8006284 <_DoInit+0x9c>)
 8006228:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a17      	ldr	r2, [pc, #92]	; (800628c <_DoInit+0xa4>)
 800622e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2210      	movs	r2, #16
 8006234:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3307      	adds	r3, #7
 800624c:	4a10      	ldr	r2, [pc, #64]	; (8006290 <_DoInit+0xa8>)
 800624e:	6810      	ldr	r0, [r2, #0]
 8006250:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006252:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a0e      	ldr	r2, [pc, #56]	; (8006294 <_DoInit+0xac>)
 800625a:	6810      	ldr	r0, [r2, #0]
 800625c:	6018      	str	r0, [r3, #0]
 800625e:	8891      	ldrh	r1, [r2, #4]
 8006260:	7992      	ldrb	r2, [r2, #6]
 8006262:	8099      	strh	r1, [r3, #4]
 8006264:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006266:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2220      	movs	r2, #32
 800626e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006270:	f3bf 8f5f 	dmb	sy
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	20000b30 	.word	0x20000b30
 8006284:	080071cc 	.word	0x080071cc
 8006288:	200002c4 	.word	0x200002c4
 800628c:	200006c4 	.word	0x200006c4
 8006290:	080071d8 	.word	0x080071d8
 8006294:	080071dc 	.word	0x080071dc

08006298 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b08c      	sub	sp, #48	; 0x30
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80062a4:	4b3e      	ldr	r3, [pc, #248]	; (80063a0 <SEGGER_RTT_ReadNoLock+0x108>)
 80062a6:	623b      	str	r3, [r7, #32]
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <SEGGER_RTT_ReadNoLock+0x1e>
 80062b2:	f7ff ff99 	bl	80061e8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4613      	mov	r3, r2
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	4413      	add	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	3360      	adds	r3, #96	; 0x60
 80062c2:	4a37      	ldr	r2, [pc, #220]	; (80063a0 <SEGGER_RTT_ReadNoLock+0x108>)
 80062c4:	4413      	add	r3, r2
 80062c6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80062d8:	2300      	movs	r3, #0
 80062da:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80062dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d92b      	bls.n	800633c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4293      	cmp	r3, r2
 80062f4:	bf28      	it	cs
 80062f6:	4613      	movcs	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	4413      	add	r3, r2
 8006302:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	6939      	ldr	r1, [r7, #16]
 8006308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800630a:	f000 fef5 	bl	80070f8 <memcpy>
    NumBytesRead += NumBytesRem;
 800630e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	4413      	add	r3, r2
 8006314:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	4413      	add	r3, r2
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	4413      	add	r3, r2
 800632c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006334:	429a      	cmp	r2, r3
 8006336:	d101      	bne.n	800633c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006338:	2300      	movs	r3, #0
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4293      	cmp	r3, r2
 800634a:	bf28      	it	cs
 800634c:	4613      	movcs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d019      	beq.n	800638a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	4413      	add	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	6939      	ldr	r1, [r7, #16]
 8006364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006366:	f000 fec7 	bl	80070f8 <memcpy>
    NumBytesRead += NumBytesRem;
 800636a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4413      	add	r3, r2
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	4413      	add	r3, r2
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	4413      	add	r3, r2
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006394:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006398:	4618      	mov	r0, r3
 800639a:	3730      	adds	r7, #48	; 0x30
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20000b30 	.word	0x20000b30

080063a4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80063b4:	e002      	b.n	80063bc <_EncodeStr+0x18>
    Len++;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	3301      	adds	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	4413      	add	r3, r2
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1f6      	bne.n	80063b6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d901      	bls.n	80063d4 <_EncodeStr+0x30>
    Len = Limit;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	2bfe      	cmp	r3, #254	; 0xfe
 80063d8:	d806      	bhi.n	80063e8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	60fa      	str	r2, [r7, #12]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	e011      	b.n	800640c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	60fa      	str	r2, [r7, #12]
 80063ee:	22ff      	movs	r2, #255	; 0xff
 80063f0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	60fa      	str	r2, [r7, #12]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	0a19      	lsrs	r1, r3, #8
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	60fa      	str	r2, [r7, #12]
 8006408:	b2ca      	uxtb	r2, r1
 800640a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006410:	e00a      	b.n	8006428 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	1c53      	adds	r3, r2, #1
 8006416:	60bb      	str	r3, [r7, #8]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	1c59      	adds	r1, r3, #1
 800641c:	60f9      	str	r1, [r7, #12]
 800641e:	7812      	ldrb	r2, [r2, #0]
 8006420:	701a      	strb	r2, [r3, #0]
    n++;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	3301      	adds	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	429a      	cmp	r2, r3
 800642e:	d3f0      	bcc.n	8006412 <_EncodeStr+0x6e>
  }
  return pPayload;
 8006430:	68fb      	ldr	r3, [r7, #12]
}
 8006432:	4618      	mov	r0, r3
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3304      	adds	r3, #4
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
	...

08006458 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800645e:	4b33      	ldr	r3, [pc, #204]	; (800652c <_HandleIncomingPacket+0xd4>)
 8006460:	7e1b      	ldrb	r3, [r3, #24]
 8006462:	4618      	mov	r0, r3
 8006464:	1cfb      	adds	r3, r7, #3
 8006466:	2201      	movs	r2, #1
 8006468:	4619      	mov	r1, r3
 800646a:	f7ff ff15 	bl	8006298 <SEGGER_RTT_ReadNoLock>
 800646e:	4603      	mov	r3, r0
 8006470:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	dd4d      	ble.n	8006514 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	2b05      	cmp	r3, #5
 800647c:	d022      	beq.n	80064c4 <_HandleIncomingPacket+0x6c>
 800647e:	2b05      	cmp	r3, #5
 8006480:	dc0b      	bgt.n	800649a <_HandleIncomingPacket+0x42>
 8006482:	2b02      	cmp	r3, #2
 8006484:	d015      	beq.n	80064b2 <_HandleIncomingPacket+0x5a>
 8006486:	2b02      	cmp	r3, #2
 8006488:	dc02      	bgt.n	8006490 <_HandleIncomingPacket+0x38>
 800648a:	2b01      	cmp	r3, #1
 800648c:	d00e      	beq.n	80064ac <_HandleIncomingPacket+0x54>
 800648e:	e034      	b.n	80064fa <_HandleIncomingPacket+0xa2>
 8006490:	2b03      	cmp	r3, #3
 8006492:	d011      	beq.n	80064b8 <_HandleIncomingPacket+0x60>
 8006494:	2b04      	cmp	r3, #4
 8006496:	d012      	beq.n	80064be <_HandleIncomingPacket+0x66>
 8006498:	e02f      	b.n	80064fa <_HandleIncomingPacket+0xa2>
 800649a:	2b07      	cmp	r3, #7
 800649c:	d018      	beq.n	80064d0 <_HandleIncomingPacket+0x78>
 800649e:	2b07      	cmp	r3, #7
 80064a0:	db13      	blt.n	80064ca <_HandleIncomingPacket+0x72>
 80064a2:	2b7f      	cmp	r3, #127	; 0x7f
 80064a4:	d038      	beq.n	8006518 <_HandleIncomingPacket+0xc0>
 80064a6:	2b80      	cmp	r3, #128	; 0x80
 80064a8:	d015      	beq.n	80064d6 <_HandleIncomingPacket+0x7e>
 80064aa:	e026      	b.n	80064fa <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80064ac:	f000 fa4c 	bl	8006948 <SEGGER_SYSVIEW_Start>
      break;
 80064b0:	e037      	b.n	8006522 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80064b2:	f000 fb03 	bl	8006abc <SEGGER_SYSVIEW_Stop>
      break;
 80064b6:	e034      	b.n	8006522 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80064b8:	f000 fbd4 	bl	8006c64 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80064bc:	e031      	b.n	8006522 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80064be:	f000 fbbd 	bl	8006c3c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80064c2:	e02e      	b.n	8006522 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80064c4:	f000 fb20 	bl	8006b08 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80064c8:	e02b      	b.n	8006522 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80064ca:	f000 fdb3 	bl	8007034 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80064ce:	e028      	b.n	8006522 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80064d0:	f000 fd92 	bl	8006ff8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80064d4:	e025      	b.n	8006522 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80064d6:	4b15      	ldr	r3, [pc, #84]	; (800652c <_HandleIncomingPacket+0xd4>)
 80064d8:	7e1b      	ldrb	r3, [r3, #24]
 80064da:	4618      	mov	r0, r3
 80064dc:	1cfb      	adds	r3, r7, #3
 80064de:	2201      	movs	r2, #1
 80064e0:	4619      	mov	r1, r3
 80064e2:	f7ff fed9 	bl	8006298 <SEGGER_RTT_ReadNoLock>
 80064e6:	4603      	mov	r3, r0
 80064e8:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	dd15      	ble.n	800651c <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fd00 	bl	8006ef8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80064f8:	e010      	b.n	800651c <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	b25b      	sxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	da0e      	bge.n	8006520 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006502:	4b0a      	ldr	r3, [pc, #40]	; (800652c <_HandleIncomingPacket+0xd4>)
 8006504:	7e1b      	ldrb	r3, [r3, #24]
 8006506:	4618      	mov	r0, r3
 8006508:	1cfb      	adds	r3, r7, #3
 800650a:	2201      	movs	r2, #1
 800650c:	4619      	mov	r1, r3
 800650e:	f7ff fec3 	bl	8006298 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006512:	e005      	b.n	8006520 <_HandleIncomingPacket+0xc8>
    }
  }
 8006514:	bf00      	nop
 8006516:	e004      	b.n	8006522 <_HandleIncomingPacket+0xca>
      break;
 8006518:	bf00      	nop
 800651a:	e002      	b.n	8006522 <_HandleIncomingPacket+0xca>
      break;
 800651c:	bf00      	nop
 800651e:	e000      	b.n	8006522 <_HandleIncomingPacket+0xca>
      break;
 8006520:	bf00      	nop
}
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	200006d4 	.word	0x200006d4

08006530 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006530:	b580      	push	{r7, lr}
 8006532:	b08c      	sub	sp, #48	; 0x30
 8006534:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006536:	2301      	movs	r3, #1
 8006538:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800653a:	1d3b      	adds	r3, r7, #4
 800653c:	3301      	adds	r3, #1
 800653e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006544:	4b31      	ldr	r3, [pc, #196]	; (800660c <_TrySendOverflowPacket+0xdc>)
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	62bb      	str	r3, [r7, #40]	; 0x28
 800654a:	e00b      	b.n	8006564 <_TrySendOverflowPacket+0x34>
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	b2da      	uxtb	r2, r3
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	1c59      	adds	r1, r3, #1
 8006554:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006556:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	09db      	lsrs	r3, r3, #7
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	2b7f      	cmp	r3, #127	; 0x7f
 8006568:	d8f0      	bhi.n	800654c <_TrySendOverflowPacket+0x1c>
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800657a:	4b25      	ldr	r3, [pc, #148]	; (8006610 <_TrySendOverflowPacket+0xe0>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006580:	4b22      	ldr	r3, [pc, #136]	; (800660c <_TrySendOverflowPacket+0xdc>)
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	623b      	str	r3, [r7, #32]
 8006592:	e00b      	b.n	80065ac <_TrySendOverflowPacket+0x7c>
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	1c59      	adds	r1, r3, #1
 800659c:	6279      	str	r1, [r7, #36]	; 0x24
 800659e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	09db      	lsrs	r3, r3, #7
 80065aa:	623b      	str	r3, [r7, #32]
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	2b7f      	cmp	r3, #127	; 0x7f
 80065b0:	d8f0      	bhi.n	8006594 <_TrySendOverflowPacket+0x64>
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	627a      	str	r2, [r7, #36]	; 0x24
 80065b8:	6a3a      	ldr	r2, [r7, #32]
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80065c2:	4b12      	ldr	r3, [pc, #72]	; (800660c <_TrySendOverflowPacket+0xdc>)
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	4618      	mov	r0, r3
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	1d3b      	adds	r3, r7, #4
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	461a      	mov	r2, r3
 80065d0:	1d3b      	adds	r3, r7, #4
 80065d2:	4619      	mov	r1, r3
 80065d4:	f7f9 fe1c 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80065d8:	4603      	mov	r3, r0
 80065da:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d009      	beq.n	80065f6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80065e2:	4a0a      	ldr	r2, [pc, #40]	; (800660c <_TrySendOverflowPacket+0xdc>)
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80065e8:	4b08      	ldr	r3, [pc, #32]	; (800660c <_TrySendOverflowPacket+0xdc>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	4b06      	ldr	r3, [pc, #24]	; (800660c <_TrySendOverflowPacket+0xdc>)
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	e004      	b.n	8006600 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80065f6:	4b05      	ldr	r3, [pc, #20]	; (800660c <_TrySendOverflowPacket+0xdc>)
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	3301      	adds	r3, #1
 80065fc:	4a03      	ldr	r2, [pc, #12]	; (800660c <_TrySendOverflowPacket+0xdc>)
 80065fe:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006600:	693b      	ldr	r3, [r7, #16]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3730      	adds	r7, #48	; 0x30
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	200006d4 	.word	0x200006d4
 8006610:	e0001004 	.word	0xe0001004

08006614 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006614:	b580      	push	{r7, lr}
 8006616:	b08a      	sub	sp, #40	; 0x28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006620:	4b6c      	ldr	r3, [pc, #432]	; (80067d4 <_SendPacket+0x1c0>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d010      	beq.n	800664a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006628:	4b6a      	ldr	r3, [pc, #424]	; (80067d4 <_SendPacket+0x1c0>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 80a3 	beq.w	8006778 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006632:	4b68      	ldr	r3, [pc, #416]	; (80067d4 <_SendPacket+0x1c0>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b02      	cmp	r3, #2
 8006638:	d109      	bne.n	800664e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800663a:	f7ff ff79 	bl	8006530 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800663e:	4b65      	ldr	r3, [pc, #404]	; (80067d4 <_SendPacket+0x1c0>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b01      	cmp	r3, #1
 8006644:	f040 809a 	bne.w	800677c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8006648:	e001      	b.n	800664e <_SendPacket+0x3a>
    goto Send;
 800664a:	bf00      	nop
 800664c:	e000      	b.n	8006650 <_SendPacket+0x3c>
Send:
 800664e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b1f      	cmp	r3, #31
 8006654:	d809      	bhi.n	800666a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006656:	4b5f      	ldr	r3, [pc, #380]	; (80067d4 <_SendPacket+0x1c0>)
 8006658:	69da      	ldr	r2, [r3, #28]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	fa22 f303 	lsr.w	r3, r2, r3
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	f040 808b 	bne.w	8006780 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b17      	cmp	r3, #23
 800666e:	d807      	bhi.n	8006680 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3b01      	subs	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	b2da      	uxtb	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e03d      	b.n	80066fc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	2b7f      	cmp	r3, #127	; 0x7f
 800668c:	d912      	bls.n	80066b4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	09da      	lsrs	r2, r3, #7
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3b01      	subs	r3, #1
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	3a01      	subs	r2, #1
 80066a6:	60fa      	str	r2, [r7, #12]
 80066a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	e006      	b.n	80066c2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b7f      	cmp	r3, #127	; 0x7f
 80066c6:	d912      	bls.n	80066ee <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	09da      	lsrs	r2, r3, #7
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	3a01      	subs	r2, #1
 80066e0:	60fa      	str	r2, [r7, #12]
 80066e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	e006      	b.n	80066fc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80066fc:	4b36      	ldr	r3, [pc, #216]	; (80067d8 <_SendPacket+0x1c4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006702:	4b34      	ldr	r3, [pc, #208]	; (80067d4 <_SendPacket+0x1c0>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	623b      	str	r3, [r7, #32]
 8006714:	e00b      	b.n	800672e <_SendPacket+0x11a>
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	b2da      	uxtb	r2, r3
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	1c59      	adds	r1, r3, #1
 800671e:	6279      	str	r1, [r7, #36]	; 0x24
 8006720:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006724:	b2d2      	uxtb	r2, r2
 8006726:	701a      	strb	r2, [r3, #0]
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	09db      	lsrs	r3, r3, #7
 800672c:	623b      	str	r3, [r7, #32]
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	2b7f      	cmp	r3, #127	; 0x7f
 8006732:	d8f0      	bhi.n	8006716 <_SendPacket+0x102>
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	627a      	str	r2, [r7, #36]	; 0x24
 800673a:	6a3a      	ldr	r2, [r7, #32]
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006744:	4b23      	ldr	r3, [pc, #140]	; (80067d4 <_SendPacket+0x1c0>)
 8006746:	785b      	ldrb	r3, [r3, #1]
 8006748:	4618      	mov	r0, r3
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	461a      	mov	r2, r3
 8006752:	68f9      	ldr	r1, [r7, #12]
 8006754:	f7f9 fd5c 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006758:	4603      	mov	r3, r0
 800675a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006762:	4a1c      	ldr	r2, [pc, #112]	; (80067d4 <_SendPacket+0x1c0>)
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	60d3      	str	r3, [r2, #12]
 8006768:	e00b      	b.n	8006782 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800676a:	4b1a      	ldr	r3, [pc, #104]	; (80067d4 <_SendPacket+0x1c0>)
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	3301      	adds	r3, #1
 8006770:	b2da      	uxtb	r2, r3
 8006772:	4b18      	ldr	r3, [pc, #96]	; (80067d4 <_SendPacket+0x1c0>)
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	e004      	b.n	8006782 <_SendPacket+0x16e>
    goto SendDone;
 8006778:	bf00      	nop
 800677a:	e002      	b.n	8006782 <_SendPacket+0x16e>
      goto SendDone;
 800677c:	bf00      	nop
 800677e:	e000      	b.n	8006782 <_SendPacket+0x16e>
      goto SendDone;
 8006780:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006782:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <_SendPacket+0x1c0>)
 8006784:	7e1b      	ldrb	r3, [r3, #24]
 8006786:	4619      	mov	r1, r3
 8006788:	4a14      	ldr	r2, [pc, #80]	; (80067dc <_SendPacket+0x1c8>)
 800678a:	460b      	mov	r3, r1
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	440b      	add	r3, r1
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	4413      	add	r3, r2
 8006794:	336c      	adds	r3, #108	; 0x6c
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <_SendPacket+0x1c0>)
 800679a:	7e1b      	ldrb	r3, [r3, #24]
 800679c:	4618      	mov	r0, r3
 800679e:	490f      	ldr	r1, [pc, #60]	; (80067dc <_SendPacket+0x1c8>)
 80067a0:	4603      	mov	r3, r0
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	4403      	add	r3, r0
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	440b      	add	r3, r1
 80067aa:	3370      	adds	r3, #112	; 0x70
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d00b      	beq.n	80067ca <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80067b2:	4b08      	ldr	r3, [pc, #32]	; (80067d4 <_SendPacket+0x1c0>)
 80067b4:	789b      	ldrb	r3, [r3, #2]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d107      	bne.n	80067ca <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80067ba:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <_SendPacket+0x1c0>)
 80067bc:	2201      	movs	r2, #1
 80067be:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80067c0:	f7ff fe4a 	bl	8006458 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80067c4:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <_SendPacket+0x1c0>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80067ca:	bf00      	nop
 80067cc:	3728      	adds	r7, #40	; 0x28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	200006d4 	.word	0x200006d4
 80067d8:	e0001004 	.word	0xe0001004
 80067dc:	20000b30 	.word	0x20000b30

080067e0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067e8:	f3ef 8311 	mrs	r3, BASEPRI
 80067ec:	f04f 0120 	mov.w	r1, #32
 80067f0:	f381 8811 	msr	BASEPRI, r1
 80067f4:	60fb      	str	r3, [r7, #12]
 80067f6:	4808      	ldr	r0, [pc, #32]	; (8006818 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80067f8:	f7ff fe21 	bl	800643e <_PreparePacket>
 80067fc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	68b8      	ldr	r0, [r7, #8]
 8006804:	f7ff ff06 	bl	8006614 <_SendPacket>
  RECORD_END();
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f383 8811 	msr	BASEPRI, r3
}
 800680e:	bf00      	nop
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20000704 	.word	0x20000704

0800681c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006826:	f3ef 8311 	mrs	r3, BASEPRI
 800682a:	f04f 0120 	mov.w	r1, #32
 800682e:	f381 8811 	msr	BASEPRI, r1
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	4816      	ldr	r0, [pc, #88]	; (8006890 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006836:	f7ff fe02 	bl	800643e <_PreparePacket>
 800683a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	e00b      	b.n	8006862 <SEGGER_SYSVIEW_RecordU32+0x46>
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	b2da      	uxtb	r2, r3
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	1c59      	adds	r1, r3, #1
 8006852:	61f9      	str	r1, [r7, #28]
 8006854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	09db      	lsrs	r3, r3, #7
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b7f      	cmp	r3, #127	; 0x7f
 8006866:	d8f0      	bhi.n	800684a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	61fa      	str	r2, [r7, #28]
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	68f9      	ldr	r1, [r7, #12]
 800687c:	6938      	ldr	r0, [r7, #16]
 800687e:	f7ff fec9 	bl	8006614 <_SendPacket>
  RECORD_END();
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f383 8811 	msr	BASEPRI, r3
}
 8006888:	bf00      	nop
 800688a:	3720      	adds	r7, #32
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20000704 	.word	0x20000704

08006894 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006894:	b580      	push	{r7, lr}
 8006896:	b08c      	sub	sp, #48	; 0x30
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80068a0:	f3ef 8311 	mrs	r3, BASEPRI
 80068a4:	f04f 0120 	mov.w	r1, #32
 80068a8:	f381 8811 	msr	BASEPRI, r1
 80068ac:	61fb      	str	r3, [r7, #28]
 80068ae:	4825      	ldr	r0, [pc, #148]	; (8006944 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80068b0:	f7ff fdc5 	bl	800643e <_PreparePacket>
 80068b4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80068c2:	e00b      	b.n	80068dc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ca:	1c59      	adds	r1, r3, #1
 80068cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	09db      	lsrs	r3, r3, #7
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	2b7f      	cmp	r3, #127	; 0x7f
 80068e0:	d8f0      	bhi.n	80068c4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	623b      	str	r3, [r7, #32]
 80068fa:	e00b      	b.n	8006914 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	1c59      	adds	r1, r3, #1
 8006904:	6279      	str	r1, [r7, #36]	; 0x24
 8006906:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	09db      	lsrs	r3, r3, #7
 8006912:	623b      	str	r3, [r7, #32]
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	2b7f      	cmp	r3, #127	; 0x7f
 8006918:	d8f0      	bhi.n	80068fc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	627a      	str	r2, [r7, #36]	; 0x24
 8006920:	6a3a      	ldr	r2, [r7, #32]
 8006922:	b2d2      	uxtb	r2, r2
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	6979      	ldr	r1, [r7, #20]
 800692e:	69b8      	ldr	r0, [r7, #24]
 8006930:	f7ff fe70 	bl	8006614 <_SendPacket>
  RECORD_END();
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f383 8811 	msr	BASEPRI, r3
}
 800693a:	bf00      	nop
 800693c:	3730      	adds	r7, #48	; 0x30
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000704 	.word	0x20000704

08006948 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b08c      	sub	sp, #48	; 0x30
 800694c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800694e:	4b58      	ldr	r3, [pc, #352]	; (8006ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8006950:	2201      	movs	r2, #1
 8006952:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006954:	f3ef 8311 	mrs	r3, BASEPRI
 8006958:	f04f 0120 	mov.w	r1, #32
 800695c:	f381 8811 	msr	BASEPRI, r1
 8006960:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006962:	4b53      	ldr	r3, [pc, #332]	; (8006ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8006964:	785b      	ldrb	r3, [r3, #1]
 8006966:	220a      	movs	r2, #10
 8006968:	4952      	ldr	r1, [pc, #328]	; (8006ab4 <SEGGER_SYSVIEW_Start+0x16c>)
 800696a:	4618      	mov	r0, r3
 800696c:	f7f9 fc50 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006976:	200a      	movs	r0, #10
 8006978:	f7ff ff32 	bl	80067e0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800697c:	f3ef 8311 	mrs	r3, BASEPRI
 8006980:	f04f 0120 	mov.w	r1, #32
 8006984:	f381 8811 	msr	BASEPRI, r1
 8006988:	60bb      	str	r3, [r7, #8]
 800698a:	484b      	ldr	r0, [pc, #300]	; (8006ab8 <SEGGER_SYSVIEW_Start+0x170>)
 800698c:	f7ff fd57 	bl	800643e <_PreparePacket>
 8006990:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800699a:	4b45      	ldr	r3, [pc, #276]	; (8006ab0 <SEGGER_SYSVIEW_Start+0x168>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	62bb      	str	r3, [r7, #40]	; 0x28
 80069a0:	e00b      	b.n	80069ba <SEGGER_SYSVIEW_Start+0x72>
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	1c59      	adds	r1, r3, #1
 80069aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	09db      	lsrs	r3, r3, #7
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	2b7f      	cmp	r3, #127	; 0x7f
 80069be:	d8f0      	bhi.n	80069a2 <SEGGER_SYSVIEW_Start+0x5a>
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
 80069d4:	4b36      	ldr	r3, [pc, #216]	; (8006ab0 <SEGGER_SYSVIEW_Start+0x168>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	623b      	str	r3, [r7, #32]
 80069da:	e00b      	b.n	80069f4 <SEGGER_SYSVIEW_Start+0xac>
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	6279      	str	r1, [r7, #36]	; 0x24
 80069e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	09db      	lsrs	r3, r3, #7
 80069f2:	623b      	str	r3, [r7, #32]
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	2b7f      	cmp	r3, #127	; 0x7f
 80069f8:	d8f0      	bhi.n	80069dc <SEGGER_SYSVIEW_Start+0x94>
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006a00:	6a3a      	ldr	r2, [r7, #32]
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	4b28      	ldr	r3, [pc, #160]	; (8006ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	61bb      	str	r3, [r7, #24]
 8006a14:	e00b      	b.n	8006a2e <SEGGER_SYSVIEW_Start+0xe6>
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	1c59      	adds	r1, r3, #1
 8006a1e:	61f9      	str	r1, [r7, #28]
 8006a20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	09db      	lsrs	r3, r3, #7
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b7f      	cmp	r3, #127	; 0x7f
 8006a32:	d8f0      	bhi.n	8006a16 <SEGGER_SYSVIEW_Start+0xce>
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	61fa      	str	r2, [r7, #28]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	613b      	str	r3, [r7, #16]
 8006a4c:	e00b      	b.n	8006a66 <SEGGER_SYSVIEW_Start+0x11e>
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	1c59      	adds	r1, r3, #1
 8006a56:	6179      	str	r1, [r7, #20]
 8006a58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	09db      	lsrs	r3, r3, #7
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b7f      	cmp	r3, #127	; 0x7f
 8006a6a:	d8f0      	bhi.n	8006a4e <SEGGER_SYSVIEW_Start+0x106>
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	617a      	str	r2, [r7, #20]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	701a      	strb	r2, [r3, #0]
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006a7c:	2218      	movs	r2, #24
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff fdc7 	bl	8006614 <_SendPacket>
      RECORD_END();
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006a8c:	4b08      	ldr	r3, [pc, #32]	; (8006ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006a94:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006a9a:	f000 f8e3 	bl	8006c64 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006a9e:	f000 f8cd 	bl	8006c3c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006aa2:	f000 fac7 	bl	8007034 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006aa6:	bf00      	nop
 8006aa8:	3730      	adds	r7, #48	; 0x30
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	200006d4 	.word	0x200006d4
 8006ab4:	080071fc 	.word	0x080071fc
 8006ab8:	20000704 	.word	0x20000704

08006abc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ac2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac6:	f04f 0120 	mov.w	r1, #32
 8006aca:	f381 8811 	msr	BASEPRI, r1
 8006ace:	607b      	str	r3, [r7, #4]
 8006ad0:	480b      	ldr	r0, [pc, #44]	; (8006b00 <SEGGER_SYSVIEW_Stop+0x44>)
 8006ad2:	f7ff fcb4 	bl	800643e <_PreparePacket>
 8006ad6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006ad8:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <SEGGER_SYSVIEW_Stop+0x48>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006ae0:	220b      	movs	r2, #11
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6838      	ldr	r0, [r7, #0]
 8006ae6:	f7ff fd95 	bl	8006614 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006aea:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <SEGGER_SYSVIEW_Stop+0x48>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f383 8811 	msr	BASEPRI, r3
}
 8006af6:	bf00      	nop
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20000704 	.word	0x20000704
 8006b04:	200006d4 	.word	0x200006d4

08006b08 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08c      	sub	sp, #48	; 0x30
 8006b0c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b12:	f04f 0120 	mov.w	r1, #32
 8006b16:	f381 8811 	msr	BASEPRI, r1
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	4845      	ldr	r0, [pc, #276]	; (8006c34 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006b1e:	f7ff fc8e 	bl	800643e <_PreparePacket>
 8006b22:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b2c:	4b42      	ldr	r3, [pc, #264]	; (8006c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b32:	e00b      	b.n	8006b4c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	1c59      	adds	r1, r3, #1
 8006b3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	09db      	lsrs	r3, r3, #7
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b50:	d8f0      	bhi.n	8006b34 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
 8006b66:	4b34      	ldr	r3, [pc, #208]	; (8006c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	623b      	str	r3, [r7, #32]
 8006b6c:	e00b      	b.n	8006b86 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	1c59      	adds	r1, r3, #1
 8006b76:	6279      	str	r1, [r7, #36]	; 0x24
 8006b78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	09db      	lsrs	r3, r3, #7
 8006b84:	623b      	str	r3, [r7, #32]
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	2b7f      	cmp	r3, #127	; 0x7f
 8006b8a:	d8f0      	bhi.n	8006b6e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	627a      	str	r2, [r7, #36]	; 0x24
 8006b92:	6a3a      	ldr	r2, [r7, #32]
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	61fb      	str	r3, [r7, #28]
 8006ba0:	4b25      	ldr	r3, [pc, #148]	; (8006c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	e00b      	b.n	8006bc0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	1c59      	adds	r1, r3, #1
 8006bb0:	61f9      	str	r1, [r7, #28]
 8006bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	09db      	lsrs	r3, r3, #7
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bc4:	d8f0      	bhi.n	8006ba8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	61fa      	str	r2, [r7, #28]
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	613b      	str	r3, [r7, #16]
 8006bde:	e00b      	b.n	8006bf8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	1c59      	adds	r1, r3, #1
 8006be8:	6179      	str	r1, [r7, #20]
 8006bea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	09db      	lsrs	r3, r3, #7
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8006bfc:	d8f0      	bhi.n	8006be0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	617a      	str	r2, [r7, #20]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c0e:	2218      	movs	r2, #24
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	68b8      	ldr	r0, [r7, #8]
 8006c14:	f7ff fcfe 	bl	8006614 <_SendPacket>
  RECORD_END();
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c1e:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006c26:	4b04      	ldr	r3, [pc, #16]	; (8006c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	4798      	blx	r3
  }
}
 8006c2c:	bf00      	nop
 8006c2e:	3730      	adds	r7, #48	; 0x30
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20000704 	.word	0x20000704
 8006c38:	200006d4 	.word	0x200006d4

08006c3c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d008      	beq.n	8006c5a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006c52:	4b03      	ldr	r3, [pc, #12]	; (8006c60 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	4798      	blx	r3
  }
}
 8006c5a:	bf00      	nop
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	200006d4 	.word	0x200006d4

08006c64 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006c64:	b590      	push	{r4, r7, lr}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006c6a:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d019      	beq.n	8006ca6 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8006c72:	4b12      	ldr	r3, [pc, #72]	; (8006cbc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d014      	beq.n	8006ca6 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006c7c:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4798      	blx	r3
 8006c84:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c88:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006c8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c8e:	f04f 0300 	mov.w	r3, #0
 8006c92:	f04f 0400 	mov.w	r4, #0
 8006c96:	0013      	movs	r3, r2
 8006c98:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4601      	mov	r1, r0
 8006c9e:	200d      	movs	r0, #13
 8006ca0:	f7ff fdf8 	bl	8006894 <SEGGER_SYSVIEW_RecordU32x2>
 8006ca4:	e005      	b.n	8006cb2 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006ca6:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4619      	mov	r1, r3
 8006cac:	200c      	movs	r0, #12
 8006cae:	f7ff fdb5 	bl	800681c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd90      	pop	{r4, r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	200006d4 	.word	0x200006d4
 8006cc0:	e0001004 	.word	0xe0001004

08006cc4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006cca:	f3ef 8311 	mrs	r3, BASEPRI
 8006cce:	f04f 0120 	mov.w	r1, #32
 8006cd2:	f381 8811 	msr	BASEPRI, r1
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	4819      	ldr	r0, [pc, #100]	; (8006d40 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006cda:	f7ff fbb0 	bl	800643e <_PreparePacket>
 8006cde:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006ce4:	4b17      	ldr	r3, [pc, #92]	; (8006d44 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cec:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	e00b      	b.n	8006d10 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	1c59      	adds	r1, r3, #1
 8006d00:	6179      	str	r1, [r7, #20]
 8006d02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	09db      	lsrs	r3, r3, #7
 8006d0e:	613b      	str	r3, [r7, #16]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	2b7f      	cmp	r3, #127	; 0x7f
 8006d14:	d8f0      	bhi.n	8006cf8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	617a      	str	r2, [r7, #20]
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006d26:	2202      	movs	r2, #2
 8006d28:	6879      	ldr	r1, [r7, #4]
 8006d2a:	68b8      	ldr	r0, [r7, #8]
 8006d2c:	f7ff fc72 	bl	8006614 <_SendPacket>
  RECORD_END();
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f383 8811 	msr	BASEPRI, r3
}
 8006d36:	bf00      	nop
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20000704 	.word	0x20000704
 8006d44:	e000ed04 	.word	0xe000ed04

08006d48 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d52:	f04f 0120 	mov.w	r1, #32
 8006d56:	f381 8811 	msr	BASEPRI, r1
 8006d5a:	607b      	str	r3, [r7, #4]
 8006d5c:	4807      	ldr	r0, [pc, #28]	; (8006d7c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006d5e:	f7ff fb6e 	bl	800643e <_PreparePacket>
 8006d62:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006d64:	2203      	movs	r2, #3
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6838      	ldr	r0, [r7, #0]
 8006d6a:	f7ff fc53 	bl	8006614 <_SendPacket>
  RECORD_END();
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f383 8811 	msr	BASEPRI, r3
}
 8006d74:	bf00      	nop
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20000704 	.word	0x20000704

08006d80 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d86:	f3ef 8311 	mrs	r3, BASEPRI
 8006d8a:	f04f 0120 	mov.w	r1, #32
 8006d8e:	f381 8811 	msr	BASEPRI, r1
 8006d92:	607b      	str	r3, [r7, #4]
 8006d94:	4807      	ldr	r0, [pc, #28]	; (8006db4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006d96:	f7ff fb52 	bl	800643e <_PreparePacket>
 8006d9a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006d9c:	2212      	movs	r2, #18
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6838      	ldr	r0, [r7, #0]
 8006da2:	f7ff fc37 	bl	8006614 <_SendPacket>
  RECORD_END();
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f383 8811 	msr	BASEPRI, r3
}
 8006dac:	bf00      	nop
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	20000704 	.word	0x20000704

08006db8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006dbe:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc2:	f04f 0120 	mov.w	r1, #32
 8006dc6:	f381 8811 	msr	BASEPRI, r1
 8006dca:	607b      	str	r3, [r7, #4]
 8006dcc:	4807      	ldr	r0, [pc, #28]	; (8006dec <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006dce:	f7ff fb36 	bl	800643e <_PreparePacket>
 8006dd2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006dd4:	2211      	movs	r2, #17
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6838      	ldr	r0, [r7, #0]
 8006dda:	f7ff fc1b 	bl	8006614 <_SendPacket>
  RECORD_END();
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f383 8811 	msr	BASEPRI, r3
}
 8006de4:	bf00      	nop
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	20000704 	.word	0x20000704

08006df0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006df8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dfc:	f04f 0120 	mov.w	r1, #32
 8006e00:	f381 8811 	msr	BASEPRI, r1
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	4819      	ldr	r0, [pc, #100]	; (8006e6c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006e08:	f7ff fb19 	bl	800643e <_PreparePacket>
 8006e0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e12:	4b17      	ldr	r3, [pc, #92]	; (8006e70 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	61fb      	str	r3, [r7, #28]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	61bb      	str	r3, [r7, #24]
 8006e24:	e00b      	b.n	8006e3e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	1c59      	adds	r1, r3, #1
 8006e2e:	61f9      	str	r1, [r7, #28]
 8006e30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	09db      	lsrs	r3, r3, #7
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b7f      	cmp	r3, #127	; 0x7f
 8006e42:	d8f0      	bhi.n	8006e26 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	61fa      	str	r2, [r7, #28]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	701a      	strb	r2, [r3, #0]
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006e54:	2204      	movs	r2, #4
 8006e56:	68f9      	ldr	r1, [r7, #12]
 8006e58:	6938      	ldr	r0, [r7, #16]
 8006e5a:	f7ff fbdb 	bl	8006614 <_SendPacket>
  RECORD_END();
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f383 8811 	msr	BASEPRI, r3
}
 8006e64:	bf00      	nop
 8006e66:	3720      	adds	r7, #32
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20000704 	.word	0x20000704
 8006e70:	200006d4 	.word	0x200006d4

08006e74 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e80:	f04f 0120 	mov.w	r1, #32
 8006e84:	f381 8811 	msr	BASEPRI, r1
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	4819      	ldr	r0, [pc, #100]	; (8006ef0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006e8c:	f7ff fad7 	bl	800643e <_PreparePacket>
 8006e90:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e96:	4b17      	ldr	r3, [pc, #92]	; (8006ef4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	61bb      	str	r3, [r7, #24]
 8006ea8:	e00b      	b.n	8006ec2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	1c59      	adds	r1, r3, #1
 8006eb2:	61f9      	str	r1, [r7, #28]
 8006eb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	701a      	strb	r2, [r3, #0]
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	09db      	lsrs	r3, r3, #7
 8006ec0:	61bb      	str	r3, [r7, #24]
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec6:	d8f0      	bhi.n	8006eaa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	61fa      	str	r2, [r7, #28]
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	701a      	strb	r2, [r3, #0]
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006ed8:	2206      	movs	r2, #6
 8006eda:	68f9      	ldr	r1, [r7, #12]
 8006edc:	6938      	ldr	r0, [r7, #16]
 8006ede:	f7ff fb99 	bl	8006614 <_SendPacket>
  RECORD_END();
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f383 8811 	msr	BASEPRI, r3
}
 8006ee8:	bf00      	nop
 8006eea:	3720      	adds	r7, #32
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000704 	.word	0x20000704
 8006ef4:	200006d4 	.word	0x200006d4

08006ef8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08c      	sub	sp, #48	; 0x30
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	4603      	mov	r3, r0
 8006f00:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006f02:	4b3b      	ldr	r3, [pc, #236]	; (8006ff0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d06d      	beq.n	8006fe6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006f0a:	4b39      	ldr	r3, [pc, #228]	; (8006ff0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006f10:	2300      	movs	r3, #0
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f14:	e008      	b.n	8006f28 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d007      	beq.n	8006f32 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f24:	3301      	adds	r3, #1
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d3f2      	bcc.n	8006f16 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006f30:	e000      	b.n	8006f34 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006f32:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d055      	beq.n	8006fe6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f3a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f3e:	f04f 0120 	mov.w	r1, #32
 8006f42:	f381 8811 	msr	BASEPRI, r1
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	482a      	ldr	r0, [pc, #168]	; (8006ff4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006f4a:	f7ff fa78 	bl	800643e <_PreparePacket>
 8006f4e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
 8006f58:	79fb      	ldrb	r3, [r7, #7]
 8006f5a:	623b      	str	r3, [r7, #32]
 8006f5c:	e00b      	b.n	8006f76 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	1c59      	adds	r1, r3, #1
 8006f66:	6279      	str	r1, [r7, #36]	; 0x24
 8006f68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f6c:	b2d2      	uxtb	r2, r2
 8006f6e:	701a      	strb	r2, [r3, #0]
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	09db      	lsrs	r3, r3, #7
 8006f74:	623b      	str	r3, [r7, #32]
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	2b7f      	cmp	r3, #127	; 0x7f
 8006f7a:	d8f0      	bhi.n	8006f5e <SEGGER_SYSVIEW_SendModule+0x66>
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	627a      	str	r2, [r7, #36]	; 0x24
 8006f82:	6a3a      	ldr	r2, [r7, #32]
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	61fb      	str	r3, [r7, #28]
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	61bb      	str	r3, [r7, #24]
 8006f96:	e00b      	b.n	8006fb0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	1c59      	adds	r1, r3, #1
 8006fa0:	61f9      	str	r1, [r7, #28]
 8006fa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	09db      	lsrs	r3, r3, #7
 8006fae:	61bb      	str	r3, [r7, #24]
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8006fb4:	d8f0      	bhi.n	8006f98 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	61fa      	str	r2, [r7, #28]
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2280      	movs	r2, #128	; 0x80
 8006fcc:	4619      	mov	r1, r3
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f7ff f9e8 	bl	80063a4 <_EncodeStr>
 8006fd4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006fd6:	2216      	movs	r2, #22
 8006fd8:	68f9      	ldr	r1, [r7, #12]
 8006fda:	6938      	ldr	r0, [r7, #16]
 8006fdc:	f7ff fb1a 	bl	8006614 <_SendPacket>
      RECORD_END();
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006fe6:	bf00      	nop
 8006fe8:	3730      	adds	r7, #48	; 0x30
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	200006fc 	.word	0x200006fc
 8006ff4:	20000704 	.word	0x20000704

08006ff8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006ffe:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00f      	beq.n	8007026 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007006:	4b0a      	ldr	r3, [pc, #40]	; (8007030 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1f2      	bne.n	800700c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007026:	bf00      	nop
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	200006fc 	.word	0x200006fc

08007034 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800703a:	f3ef 8311 	mrs	r3, BASEPRI
 800703e:	f04f 0120 	mov.w	r1, #32
 8007042:	f381 8811 	msr	BASEPRI, r1
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	4817      	ldr	r0, [pc, #92]	; (80070a8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800704a:	f7ff f9f8 	bl	800643e <_PreparePacket>
 800704e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	617b      	str	r3, [r7, #20]
 8007058:	4b14      	ldr	r3, [pc, #80]	; (80070ac <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	613b      	str	r3, [r7, #16]
 800705e:	e00b      	b.n	8007078 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	1c59      	adds	r1, r3, #1
 8007068:	6179      	str	r1, [r7, #20]
 800706a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	09db      	lsrs	r3, r3, #7
 8007076:	613b      	str	r3, [r7, #16]
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	2b7f      	cmp	r3, #127	; 0x7f
 800707c:	d8f0      	bhi.n	8007060 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	617a      	str	r2, [r7, #20]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	b2d2      	uxtb	r2, r2
 8007088:	701a      	strb	r2, [r3, #0]
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800708e:	221b      	movs	r2, #27
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	68b8      	ldr	r0, [r7, #8]
 8007094:	f7ff fabe 	bl	8006614 <_SendPacket>
  RECORD_END();
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f383 8811 	msr	BASEPRI, r3
}
 800709e:	bf00      	nop
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000704 	.word	0x20000704
 80070ac:	20000700 	.word	0x20000700

080070b0 <__libc_init_array>:
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	4e0d      	ldr	r6, [pc, #52]	; (80070e8 <__libc_init_array+0x38>)
 80070b4:	4c0d      	ldr	r4, [pc, #52]	; (80070ec <__libc_init_array+0x3c>)
 80070b6:	1ba4      	subs	r4, r4, r6
 80070b8:	10a4      	asrs	r4, r4, #2
 80070ba:	2500      	movs	r5, #0
 80070bc:	42a5      	cmp	r5, r4
 80070be:	d109      	bne.n	80070d4 <__libc_init_array+0x24>
 80070c0:	4e0b      	ldr	r6, [pc, #44]	; (80070f0 <__libc_init_array+0x40>)
 80070c2:	4c0c      	ldr	r4, [pc, #48]	; (80070f4 <__libc_init_array+0x44>)
 80070c4:	f000 f876 	bl	80071b4 <_init>
 80070c8:	1ba4      	subs	r4, r4, r6
 80070ca:	10a4      	asrs	r4, r4, #2
 80070cc:	2500      	movs	r5, #0
 80070ce:	42a5      	cmp	r5, r4
 80070d0:	d105      	bne.n	80070de <__libc_init_array+0x2e>
 80070d2:	bd70      	pop	{r4, r5, r6, pc}
 80070d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070d8:	4798      	blx	r3
 80070da:	3501      	adds	r5, #1
 80070dc:	e7ee      	b.n	80070bc <__libc_init_array+0xc>
 80070de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070e2:	4798      	blx	r3
 80070e4:	3501      	adds	r5, #1
 80070e6:	e7f2      	b.n	80070ce <__libc_init_array+0x1e>
 80070e8:	08007210 	.word	0x08007210
 80070ec:	08007210 	.word	0x08007210
 80070f0:	08007210 	.word	0x08007210
 80070f4:	08007214 	.word	0x08007214

080070f8 <memcpy>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	1e43      	subs	r3, r0, #1
 80070fc:	440a      	add	r2, r1
 80070fe:	4291      	cmp	r1, r2
 8007100:	d100      	bne.n	8007104 <memcpy+0xc>
 8007102:	bd10      	pop	{r4, pc}
 8007104:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007108:	f803 4f01 	strb.w	r4, [r3, #1]!
 800710c:	e7f7      	b.n	80070fe <memcpy+0x6>

0800710e <memset>:
 800710e:	4402      	add	r2, r0
 8007110:	4603      	mov	r3, r0
 8007112:	4293      	cmp	r3, r2
 8007114:	d100      	bne.n	8007118 <memset+0xa>
 8007116:	4770      	bx	lr
 8007118:	f803 1b01 	strb.w	r1, [r3], #1
 800711c:	e7f9      	b.n	8007112 <memset+0x4>
	...

08007120 <round>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	ec57 6b10 	vmov	r6, r7, d0
 8007126:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800712a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800712e:	2c13      	cmp	r4, #19
 8007130:	463b      	mov	r3, r7
 8007132:	463d      	mov	r5, r7
 8007134:	dc17      	bgt.n	8007166 <round+0x46>
 8007136:	2c00      	cmp	r4, #0
 8007138:	da09      	bge.n	800714e <round+0x2e>
 800713a:	3401      	adds	r4, #1
 800713c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8007140:	d103      	bne.n	800714a <round+0x2a>
 8007142:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007146:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800714a:	2100      	movs	r1, #0
 800714c:	e02c      	b.n	80071a8 <round+0x88>
 800714e:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <round+0x90>)
 8007150:	4122      	asrs	r2, r4
 8007152:	4217      	tst	r7, r2
 8007154:	d100      	bne.n	8007158 <round+0x38>
 8007156:	b19e      	cbz	r6, 8007180 <round+0x60>
 8007158:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800715c:	4123      	asrs	r3, r4
 800715e:	442b      	add	r3, r5
 8007160:	ea23 0302 	bic.w	r3, r3, r2
 8007164:	e7f1      	b.n	800714a <round+0x2a>
 8007166:	2c33      	cmp	r4, #51	; 0x33
 8007168:	dd0d      	ble.n	8007186 <round+0x66>
 800716a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800716e:	d107      	bne.n	8007180 <round+0x60>
 8007170:	4630      	mov	r0, r6
 8007172:	4639      	mov	r1, r7
 8007174:	ee10 2a10 	vmov	r2, s0
 8007178:	f7f9 f89a 	bl	80002b0 <__adddf3>
 800717c:	4606      	mov	r6, r0
 800717e:	460f      	mov	r7, r1
 8007180:	ec47 6b10 	vmov	d0, r6, r7
 8007184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007186:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800718a:	f04f 30ff 	mov.w	r0, #4294967295
 800718e:	40d0      	lsrs	r0, r2
 8007190:	4206      	tst	r6, r0
 8007192:	d0f5      	beq.n	8007180 <round+0x60>
 8007194:	2201      	movs	r2, #1
 8007196:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800719a:	fa02 f404 	lsl.w	r4, r2, r4
 800719e:	1931      	adds	r1, r6, r4
 80071a0:	bf28      	it	cs
 80071a2:	189b      	addcs	r3, r3, r2
 80071a4:	ea21 0100 	bic.w	r1, r1, r0
 80071a8:	461f      	mov	r7, r3
 80071aa:	460e      	mov	r6, r1
 80071ac:	e7e8      	b.n	8007180 <round+0x60>
 80071ae:	bf00      	nop
 80071b0:	000fffff 	.word	0x000fffff

080071b4 <_init>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	bf00      	nop
 80071b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ba:	bc08      	pop	{r3}
 80071bc:	469e      	mov	lr, r3
 80071be:	4770      	bx	lr

080071c0 <_fini>:
 80071c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c2:	bf00      	nop
 80071c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c6:	bc08      	pop	{r3}
 80071c8:	469e      	mov	lr, r3
 80071ca:	4770      	bx	lr
